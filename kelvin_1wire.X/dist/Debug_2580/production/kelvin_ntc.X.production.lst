

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Tue Mar  8 12:42:18 2016

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	text79,global,reloc=2,class=CODE,delta=1
    94                           	psect	text80,global,reloc=2,class=CODE,delta=1
    95                           	psect	text81,global,reloc=2,class=CODE,delta=1
    96                           	psect	text82,global,reloc=2,class=CODE,delta=1
    97                           	psect	text83,global,reloc=2,class=CODE,delta=1
    98                           	psect	text84,global,reloc=2,class=CODE,delta=1
    99                           	psect	text85,global,reloc=2,class=CODE,delta=1
   100                           	psect	text86,global,reloc=2,class=CODE,delta=1
   101                           	psect	text87,global,reloc=2,class=CODE,delta=1
   102                           	psect	text88,global,reloc=2,class=CODE,delta=1
   103                           	psect	text89,global,reloc=2,class=CODE,delta=1
   104                           	psect	text90,global,reloc=2,class=CODE,delta=1
   105                           	psect	text91,global,reloc=2,class=CODE,delta=1
   106                           	psect	text92,global,reloc=2,class=CODE,delta=1
   107                           	psect	text93,global,reloc=2,class=CODE,delta=1
   108                           	psect	text94,global,reloc=2,class=CODE,delta=1
   109                           	psect	text95,global,reloc=2,class=CODE,delta=1
   110                           	psect	text96,global,reloc=2,class=CODE,delta=1
   111                           	psect	text97,global,reloc=2,class=CODE,delta=1
   112                           	psect	text98,global,reloc=2,class=CODE,delta=1
   113                           	psect	text99,global,reloc=2,class=CODE,delta=1
   114                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   115                           	psect	text101,global,reloc=2,class=CODE,delta=1
   116                           	psect	text102,global,reloc=2,class=CODE,delta=1
   117                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   118                           	psect	text103,global,reloc=2,class=CODE,delta=1
   119                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   120                           	psect	pa_nodes,global,class=CODE,delta=1
   121  0000                     tblptrh	equ	0xFF7
   122                           tblptrl	equ	0xFF6
   123                           tablat	equ	0xFF5
   124                           prodh	equ	0xFF4
   125                           prodl	equ	0xFF3
   126                           intcon	equ	0xFF2
   127                           wreg	equ	0xFE8
   128                           indf1	equ	0xFE7
   129                           fsr1h	equ	0xFE2
   130                           fsr1l	equ	0xFE1
   131                           indf2	equ	0xFDF
   132                           postinc2	equ	0xFDE
   133                           postdec2	equ	0xFDD
   134                           plusw2	equ	0xFDB
   135                           fsr2h	equ	0xFDA
   136                           fsr2l	equ	0xFD9
   137                           status	equ	0xFD8
   138                           
   139                           	psect	smallconst
   140  000600                     __psmallconst:
   141                           	opt stack 0
   142  000600                     _vscp_deviceURL:
   143                           	opt stack 0
   144  000600  77                 	db	119
   145  000601  77                 	db	119
   146  000602  77                 	db	119
   147  000603  2E                 	db	46
   148  000604  65                 	db	101
   149  000605  75                 	db	117
   150  000606  72                 	db	114
   151  000607  6F                 	db	111
   152  000608  73                 	db	115
   153  000609  6F                 	db	111
   154  00060A  75                 	db	117
   155  00060B  72                 	db	114
   156  00060C  63                 	db	99
   157  00060D  65                 	db	101
   158  00060E  2E                 	db	46
   159  00060F  73                 	db	115
   160  000610  65                 	db	101
   161  000611  2F                 	db	47
   162  000612  6E                 	db	110
   163  000613  74                 	db	116
   164  000614  63                 	db	99
   165  000615  31                 	db	49
   166  000616  30                 	db	48
   167  000617  4B                 	db	75
   168  000618  41                 	db	65
   169  000619  5F                 	db	95
   170  00061A  33                 	db	51
   171  00061B  2E                 	db	46
   172  00061C  78                 	db	120
   173  00061D  6D                 	db	109
   174  00061E  6C                 	db	108
   175  00061F  00                 	db	0
   176  000620                     __end_of_vscp_deviceURL:
   177                           	opt stack 0
   178  000620                     exp@coeff:
   179                           	opt stack 0
   180  000620  0000               	dw	0
   181  000622  3F80               	dw	16256
   182  000624  7218               	dw	29208
   183  000626  3F31               	dw	16177
   184  000628  FDF0               	dw	65008
   185  00062A  3E75               	dw	15989
   186  00062C  5847               	dw	22599
   187  00062E  3D63               	dw	15715
   188  000630  9558               	dw	38232
   189  000632  3C1D               	dw	15389
   190  000634  C482               	dw	50306
   191  000636  3AAE               	dw	15022
   192  000638  78A8               	dw	30888
   193  00063A  3921               	dw	14625
   194  00063C  93EF               	dw	37871
   195  00063E  3780               	dw	14208
   196  000640  92A0               	dw	37536
   197  000642  35A7               	dw	13735
   198  000644  5646               	dw	22086
   199  000646  3415               	dw	13333
   200  000648                     __end_ofexp@coeff:
   201                           	opt stack 0
   202  000648                     log@coeff:
   203                           	opt stack 0
   204  000648  0000               	dw	0
   205  00064A  0000               	dw	0
   206  00064C  FFC4               	dw	65476
   207  00064E  3F7F               	dw	16255
   208  000650  EF80               	dw	61312
   209  000652  BEFF               	dw	48895
   210  000654  E190               	dw	57744
   211  000656  3EA9               	dw	16041
   212  000658  82EC               	dw	33516
   213  00065A  BE76               	dw	48758
   214  00065C  AD82               	dw	44418
   215  00065E  3E2B               	dw	15915
   216  000660  3C0E               	dw	15374
   217  000662  BDC3               	dw	48579
   218  000664  D187               	dw	53639
   219  000666  3D13               	dw	15635
   220  000668  7841               	dw	30785
   221  00066A  BBD3               	dw	48083
   222  00066C                     __end_oflog@coeff:
   223                           	opt stack 0
   224  0000                     _ADCON0	set	4034
   225  0000                     _ADCON0bits	set	4034
   226  0000                     _ADCON1	set	4033
   227  0000                     _ADCON2	set	4032
   228  0000                     _ADRESH	set	4036
   229  0000                     _ADRESL	set	4035
   230  0000                     _BRGCON1	set	3952
   231  0000                     _BRGCON2	set	3953
   232  0000                     _BRGCON3	set	3954
   233  0000                     _BSEL0	set	3576
   234  0000                     _CANCON	set	3951
   235  0000                     _CIOCON	set	3955
   236  0000                     _ECANCON	set	3959
   237  0000                     _EEADR	set	4009
   238  0000                     _EECON1bits	set	4006
   239  0000                     _EECON2	set	4007
   240  0000                     _EEDATA	set	4008
   241  0000                     _INTCONbits	set	4082
   242  0000                     _MSEL0	set	3568
   243  0000                     _MSEL1	set	3569
   244  0000                     _MSEL2	set	3570
   245  0000                     _PIE1bits	set	3997
   246  0000                     _PIR1bits	set	3998
   247  0000                     _PORTC	set	3970
   248  0000                     _RXB1CONbits	set	3920
   249  0000                     _RXF0EIDH	set	3842
   250  0000                     _RXF0EIDL	set	3843
   251  0000                     _RXF0SIDH	set	3840
   252  0000                     _RXF0SIDL	set	3841
   253  0000                     _RXF1EIDH	set	3846
   254  0000                     _RXF1EIDL	set	3847
   255  0000                     _RXF1SIDH	set	3844
   256  0000                     _RXF1SIDL	set	3845
   257  0000                     _RXFBCON0	set	3552
   258  0000                     _RXFBCON1	set	3553
   259  0000                     _RXFBCON2	set	3554
   260  0000                     _RXFBCON3	set	3555
   261  0000                     _RXFBCON4	set	3556
   262  0000                     _RXFBCON5	set	3557
   263  0000                     _RXFBCON6	set	3558
   264  0000                     _RXFBCON7	set	3559
   265  0000                     _RXFCON0	set	3540
   266  0000                     _RXFCON1	set	3541
   267  0000                     _RXM0EIDH	set	3866
   268  0000                     _RXM0EIDL	set	3867
   269  0000                     _RXM0SIDH	set	3864
   270  0000                     _RXM0SIDL	set	3865
   271  0000                     _RXM1EIDH	set	3870
   272  0000                     _RXM1EIDL	set	3871
   273  0000                     _RXM1SIDH	set	3868
   274  0000                     _RXM1SIDL	set	3869
   275  0000                     _T0CON	set	4053
   276  0000                     _T0CONbits	set	4053
   277  0000                     _TMR0H	set	4055
   278  0000                     _TMR0L	set	4054
   279  0000                     _TRISA	set	3986
   280  0000                     _TRISB	set	3987
   281  0000                     _TRISC	set	3988
   282  0000                     _B0RXFUL	set	28935
   283  0000                     _B0TXEN	set	28610
   284  0000                     _B1RXFUL	set	29063
   285  0000                     _B1TXEN	set	28611
   286  0000                     _B2RXFUL	set	29191
   287  0000                     _B2TXEN	set	28612
   288  0000                     _B3RXFUL	set	29319
   289  0000                     _B3TXEN	set	28613
   290  0000                     _B4RXFUL	set	29447
   291  0000                     _B4TXEN	set	28614
   292  0000                     _B5RXFUL	set	29575
   293  0000                     _B5TXEN	set	28615
   294  0000                     _FIFOEMPTY	set	31655
   295  0000                     _IRXIF	set	32039
   296  0000                     _MDSEL0	set	31678
   297  0000                     _MDSEL1	set	31679
   298  0000                     _RXB0FILHIT0	set	31488
   299  0000                     _RXB0FUL	set	31495
   300  0000                     _RXB0IF	set	32032
   301  0000                     _RXB0OVFL	set	31655
   302  0000                     _RXB1IF	set	32033
   303  0000                     _RXB1OVFL	set	31654
   304  0000                     _RXM0EXIDM	set	30923
   305  0000                     _RXM1EXIDEN	set	30955
   306  0000                     _B0CON	set	3616
   307  0000                     _B1CON	set	3632
   308  0000                     _B2CON	set	3648
   309  0000                     _B3CON	set	3664
   310  0000                     _B4CON	set	3680
   311  0000                     _B5CON	set	3696
   312  0000                     _RXB0CON	set	3936
   313  0000                     _RXB1CON	set	3920
   314  0000                     _TXB0CON	set	3904
   315  0000                     _TXB1CON	set	3888
   316  0000                     _TXB2CON	set	3872
   317                           
   318                           ; #config settings
   319  00066C  00                 	db	0	; dummy byte at the end
   320  0000                     tblptrh	equ	0xFF7
   321                           tblptrl	equ	0xFF6
   322                           tablat	equ	0xFF5
   323                           prodh	equ	0xFF4
   324                           prodl	equ	0xFF3
   325                           intcon	equ	0xFF2
   326                           wreg	equ	0xFE8
   327                           indf1	equ	0xFE7
   328                           fsr1h	equ	0xFE2
   329                           fsr1l	equ	0xFE1
   330                           indf2	equ	0xFDF
   331                           postinc2	equ	0xFDE
   332                           postdec2	equ	0xFDD
   333                           plusw2	equ	0xFDB
   334                           fsr2h	equ	0xFDA
   335                           fsr2l	equ	0xFD9
   336                           status	equ	0xFD8
   337                           
   338                           	psect	cinit
   339  005168                     __pcinit:
   340                           	opt stack 0
   341  005168                     start_initialization:
   342                           	opt stack 0
   343  005168                     __initialization:
   344                           	opt stack 0
   345                           
   346                           ; Clear objects allocated to BIGRAM (960 bytes)
   347  005168  EE01  F09E         	lfsr	0,__pbssBIGRAM
   348  00516C  EE13 F0C0          	lfsr	1,960
   349  005170                     clear_0:
   350  005170  6AEE               	clrf	postinc0,c
   351  005172  50E5               	movf	postdec1,w,c
   352  005174  50E1               	movf	fsr1l,w,c
   353  005176  E1FC               	bnz	clear_0
   354  005178  50E2               	movf	fsr1h,w,c
   355  00517A  E1FA               	bnz	clear_0
   356                           
   357                           ; Clear objects allocated to BANK1 (106 bytes)
   358  00517C  EE01  F000         	lfsr	0,__pbssBANK1
   359  005180  0E6A               	movlw	106
   360  005182                     clear_1:
   361  005182  6AEE               	clrf	postinc0,c
   362  005184  06E8               	decf	wreg,f,c
   363  005186  E1FD               	bnz	clear_1
   364                           
   365                           ; Clear objects allocated to BANK0 (35 bytes)
   366  005188  EE00  F0B6         	lfsr	0,__pbssBANK0
   367  00518C  0E23               	movlw	35
   368  00518E                     clear_2:
   369  00518E  6AEE               	clrf	postinc0,c
   370  005190  06E8               	decf	wreg,f,c
   371  005192  E1FD               	bnz	clear_2
   372                           
   373                           ; Clear objects allocated to COMRAM (13 bytes)
   374  005194  EE00  F046         	lfsr	0,__pbssCOMRAM
   375  005198  0E0D               	movlw	13
   376  00519A                     clear_3:
   377  00519A  6AEE               	clrf	postinc0,c
   378  00519C  06E8               	decf	wreg,f,c
   379  00519E  E1FD               	bnz	clear_3
   380  0051A0                     end_of_initialization:
   381                           	opt stack 0
   382  0051A0                     __end_of__initialization:
   383                           	opt stack 0
   384  0051A0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   385  0051A2  6EF8               	movwf	tblptru,c
   386  0051A4  0100               	movlb	0
   387  0051A6  EF8A  F01F         	goto	_main	;jump to C main() function
   388                           tblptru	equ	0xFF8
   389                           tblptrh	equ	0xFF7
   390                           tblptrl	equ	0xFF6
   391                           tablat	equ	0xFF5
   392                           prodh	equ	0xFF4
   393                           prodl	equ	0xFF3
   394                           intcon	equ	0xFF2
   395                           postinc0	equ	0xFEE
   396                           wreg	equ	0xFE8
   397                           indf1	equ	0xFE7
   398                           postdec1	equ	0xFE5
   399                           fsr1h	equ	0xFE2
   400                           fsr1l	equ	0xFE1
   401                           indf2	equ	0xFDF
   402                           postinc2	equ	0xFDE
   403                           postdec2	equ	0xFDD
   404                           plusw2	equ	0xFDB
   405                           fsr2h	equ	0xFDA
   406                           fsr2l	equ	0xFD9
   407                           status	equ	0xFD8
   408                           
   409                           	psect	bssCOMRAM
   410  000046                     __pbssCOMRAM:
   411                           	opt stack 0
   412  000046                     _vscp_page_select:
   413                           	opt stack 0
   414  000046                     	ds	2
   415  000048                     __ECANRxFilterHitInfo:
   416                           	opt stack 0
   417  000048                     	ds	1
   418  000049                     _adc_series_counter:
   419                           	opt stack 0
   420  000049                     	ds	1
   421  00004A                     _vscp_alarmstatus:
   422                           	opt stack 0
   423  00004A                     	ds	1
   424  00004B                     _vscp_errorcnt:
   425                           	opt stack 0
   426  00004B                     	ds	1
   427  00004C                     _vscp_guid_reset:
   428                           	opt stack 0
   429  00004C                     	ds	1
   430  00004D                     _vscp_initledfunc:
   431                           	opt stack 0
   432  00004D                     	ds	1
   433  00004E                     _vscp_node_substate:
   434                           	opt stack 0
   435  00004E                     	ds	1
   436  00004F                     _vscp_probe_address:
   437                           	opt stack 0
   438  00004F                     	ds	1
   439  000050                     _vscp_probe_cnt:
   440                           	opt stack 0
   441  000050                     	ds	1
   442  000051                     _vscp_second:
   443                           	opt stack 0
   444  000051                     	ds	1
   445  000052                     _vscp_statuscnt:
   446                           	opt stack 0
   447  000052                     	ds	1
   448                           tblptru	equ	0xFF8
   449                           tblptrh	equ	0xFF7
   450                           tblptrl	equ	0xFF6
   451                           tablat	equ	0xFF5
   452                           prodh	equ	0xFF4
   453                           prodl	equ	0xFF3
   454                           intcon	equ	0xFF2
   455                           postinc0	equ	0xFEE
   456                           wreg	equ	0xFE8
   457                           indf1	equ	0xFE7
   458                           postdec1	equ	0xFE5
   459                           fsr1h	equ	0xFE2
   460                           fsr1l	equ	0xFE1
   461                           indf2	equ	0xFDF
   462                           postinc2	equ	0xFDE
   463                           postdec2	equ	0xFDD
   464                           plusw2	equ	0xFDB
   465                           fsr2h	equ	0xFDA
   466                           fsr2l	equ	0xFD9
   467                           status	equ	0xFD8
   468                           
   469                           	psect	bssBANK0
   470  0000B6                     __pbssBANK0:
   471                           	opt stack 0
   472  0000B6                     _adc_conversion_flags:
   473                           	opt stack 0
   474  0000B6                     	ds	1
   475  0000B7                     _high_alarm:
   476                           	opt stack 0
   477  0000B7                     	ds	1
   478  0000B8                     _low_alarm:
   479                           	opt stack 0
   480  0000B8                     	ds	1
   481  0000B9                     _seconds:
   482                           	opt stack 0
   483  0000B9                     	ds	1
   484  0000BA                     _vscp_initbtncnt:
   485                           	opt stack 0
   486  0000BA                     	ds	1
   487  0000BB                     _vscp_nickname:
   488                           	opt stack 0
   489  0000BB                     	ds	1
   490  0000BC                     _vscp_node_state:
   491                           	opt stack 0
   492  0000BC                     	ds	1
   493  0000BD                     _vscp_imsg:
   494                           	opt stack 0
   495  0000BD                     	ds	14
   496  0000CB                     _vscp_omsg:
   497                           	opt stack 0
   498  0000CB                     	ds	14
   499                           tblptru	equ	0xFF8
   500                           tblptrh	equ	0xFF7
   501                           tblptrl	equ	0xFF6
   502                           tablat	equ	0xFF5
   503                           prodh	equ	0xFF4
   504                           prodl	equ	0xFF3
   505                           intcon	equ	0xFF2
   506                           postinc0	equ	0xFEE
   507                           wreg	equ	0xFE8
   508                           indf1	equ	0xFE7
   509                           postdec1	equ	0xFE5
   510                           fsr1h	equ	0xFE2
   511                           fsr1l	equ	0xFE1
   512                           indf2	equ	0xFDF
   513                           postinc2	equ	0xFDE
   514                           postdec2	equ	0xFDD
   515                           plusw2	equ	0xFDB
   516                           fsr2h	equ	0xFDA
   517                           fsr2l	equ	0xFD9
   518                           status	equ	0xFD8
   519                           
   520                           	psect	bssBANK1
   521  000100                     __pbssBANK1:
   522                           	opt stack 0
   523  000100                     _current_temp:
   524                           	opt stack 0
   525  000100                     	ds	12
   526  00010C                     _seconds_temp:
   527                           	opt stack 0
   528  00010C                     	ds	6
   529  000112                     _measurement_clock:
   530                           	opt stack 0
   531  000112                     	ds	4
   532  000116                     _timeout_clock:
   533                           	opt stack 0
   534  000116                     	ds	4
   535  00011A                     _sendTimer:
   536                           	opt stack 0
   537  00011A                     	ds	2
   538  00011C                     _vscp_configtimer:
   539                           	opt stack 0
   540  00011C                     	ds	2
   541  00011E                     _vscp_timer:
   542                           	opt stack 0
   543  00011E                     	ds	2
   544  000120                     _vscp_hour:
   545                           	opt stack 0
   546  000120                     	ds	1
   547  000121                     _vscp_minute:
   548                           	opt stack 0
   549  000121                     	ds	1
   550  000122                     _sh_coefficients:
   551                           	opt stack 0
   552  000122                     	ds	72
   553                           tblptru	equ	0xFF8
   554                           tblptrh	equ	0xFF7
   555                           tblptrl	equ	0xFF6
   556                           tablat	equ	0xFF5
   557                           prodh	equ	0xFF4
   558                           prodl	equ	0xFF3
   559                           intcon	equ	0xFF2
   560                           postinc0	equ	0xFEE
   561                           wreg	equ	0xFE8
   562                           indf1	equ	0xFE7
   563                           postdec1	equ	0xFE5
   564                           fsr1h	equ	0xFE2
   565                           fsr1l	equ	0xFE1
   566                           indf2	equ	0xFDF
   567                           postinc2	equ	0xFDE
   568                           postdec2	equ	0xFDD
   569                           plusw2	equ	0xFDB
   570                           fsr2h	equ	0xFDA
   571                           fsr2l	equ	0xFD9
   572                           status	equ	0xFD8
   573                           
   574                           	psect	bssBIGRAM
   575  00019E                     __pbssBIGRAM:
   576                           	opt stack 0
   577  00019E                     _adc:
   578                           	opt stack 0
   579  00019E                     	ds	960
   580                           tblptru	equ	0xFF8
   581                           tblptrh	equ	0xFF7
   582                           tblptrl	equ	0xFF6
   583                           tablat	equ	0xFF5
   584                           prodh	equ	0xFF4
   585                           prodl	equ	0xFF3
   586                           intcon	equ	0xFF2
   587                           postinc0	equ	0xFEE
   588                           wreg	equ	0xFE8
   589                           indf1	equ	0xFE7
   590                           postdec1	equ	0xFE5
   591                           fsr1h	equ	0xFE2
   592                           fsr1l	equ	0xFE1
   593                           indf2	equ	0xFDF
   594                           postinc2	equ	0xFDE
   595                           postdec2	equ	0xFDD
   596                           plusw2	equ	0xFDB
   597                           fsr2h	equ	0xFDA
   598                           fsr2l	equ	0xFD9
   599                           status	equ	0xFD8
   600                           
   601                           	psect	cstackBANK1
   602  00016A                     __pcstackBANK1:
   603                           	opt stack 0
   604  00016A                     doWork@Rinf:
   605                           	opt stack 0
   606                           
   607                           ; 4 bytes @ 0x0
   608  00016A                     	ds	4
   609  00016E                     doWork@calVoltage:
   610                           	opt stack 0
   611                           
   612                           ; 4 bytes @ 0x4
   613  00016E                     	ds	4
   614  000172                     _doWork$2281:
   615                           	opt stack 0
   616                           
   617                           ; 4 bytes @ 0x8
   618  000172                     	ds	4
   619  000176                     _doWork$2282:
   620                           	opt stack 0
   621                           
   622                           ; 4 bytes @ 0xC
   623  000176                     	ds	4
   624  00017A                     _doWork$2283:
   625                           	opt stack 0
   626                           
   627                           ; 4 bytes @ 0x10
   628  00017A                     	ds	16
   629  00018A                     doWork@v:
   630                           	opt stack 0
   631                           
   632                           ; 4 bytes @ 0x20
   633  00018A                     	ds	4
   634  00018E                     doWork@B:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x24
   638  00018E                     	ds	2
   639  000190                     doWork@resistance:
   640                           	opt stack 0
   641                           
   642                           ; 4 bytes @ 0x26
   643  000190                     	ds	4
   644  000194                     doWork@j:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0x2A
   648  000194                     	ds	1
   649  000195                     doWork@avarage:
   650                           	opt stack 0
   651                           
   652                           ; 4 bytes @ 0x2B
   653  000195                     	ds	4
   654  000199                     doWork@temp:
   655                           	opt stack 0
   656                           
   657                           ; 4 bytes @ 0x2F
   658  000199                     	ds	4
   659  00019D                     doWork@i:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x33
   663  00019D                     	ds	1
   664                           tblptru	equ	0xFF8
   665                           tblptrh	equ	0xFF7
   666                           tblptrl	equ	0xFF6
   667                           tablat	equ	0xFF5
   668                           prodh	equ	0xFF4
   669                           prodl	equ	0xFF3
   670                           intcon	equ	0xFF2
   671                           postinc0	equ	0xFEE
   672                           wreg	equ	0xFE8
   673                           indf1	equ	0xFE7
   674                           postdec1	equ	0xFE5
   675                           fsr1h	equ	0xFE2
   676                           fsr1l	equ	0xFE1
   677                           indf2	equ	0xFDF
   678                           postinc2	equ	0xFDE
   679                           postdec2	equ	0xFDD
   680                           plusw2	equ	0xFDB
   681                           fsr2h	equ	0xFDA
   682                           fsr2l	equ	0xFD9
   683                           status	equ	0xFD8
   684                           
   685                           	psect	cstackBANK0
   686  000060                     __pcstackBANK0:
   687                           	opt stack 0
   688  000060                     ?_sendVSCPFrame:
   689                           	opt stack 0
   690  000060                     ?___flmul:
   691                           	opt stack 0
   692  000060                     ?___asfldiv:
   693                           	opt stack 0
   694  000060                     sendVSCPFrame@vscpclass:
   695                           	opt stack 0
   696  000060                     ___asfldiv@f1p:
   697                           	opt stack 0
   698  000060                     ___flmul@f1:
   699                           	opt stack 0
   700                           
   701                           ; 4 bytes @ 0x0
   702  000060                     	ds	2
   703  000062                     sendVSCPFrame@vscptype:
   704                           	opt stack 0
   705  000062                     ___asfldiv@f2:
   706                           	opt stack 0
   707                           
   708                           ; 4 bytes @ 0x2
   709  000062                     	ds	1
   710  000063                     sendVSCPFrame@nodeid:
   711                           	opt stack 0
   712                           
   713                           ; 1 bytes @ 0x3
   714  000063                     	ds	1
   715  000064                     sendVSCPFrame@priority:
   716                           	opt stack 0
   717  000064                     ___flmul@f2:
   718                           	opt stack 0
   719                           
   720                           ; 4 bytes @ 0x4
   721  000064                     	ds	1
   722  000065                     sendVSCPFrame@size:
   723                           	opt stack 0
   724                           
   725                           ; 1 bytes @ 0x5
   726  000065                     	ds	1
   727  000066                     sendVSCPFrame@pData:
   728                           	opt stack 0
   729                           
   730                           ; 1 bytes @ 0x6
   731  000066                     	ds	1
   732  000067                     ??_sendVSCPFrame:
   733                           
   734                           ; 0 bytes @ 0x7
   735  000067                     	ds	8
   736  00006F                     ___flmul@exp:
   737                           	opt stack 0
   738                           
   739                           ; 1 bytes @ 0xF
   740  00006F                     	ds	1
   741  000070                     ___flmul@f3_as_product:
   742                           	opt stack 0
   743                           
   744                           ; 4 bytes @ 0x10
   745  000070                     	ds	4
   746  000074                     ___flmul@cntr:
   747                           	opt stack 0
   748                           
   749                           ; 1 bytes @ 0x14
   750  000074                     	ds	1
   751  000075                     ___flmul@sign:
   752                           	opt stack 0
   753                           
   754                           ; 1 bytes @ 0x15
   755  000075                     	ds	1
   756  000076                     ?_Celsius2Fahrenheit:
   757                           	opt stack 0
   758  000076                     ?___flsub:
   759                           	opt stack 0
   760  000076                     ?_eval_poly:
   761                           	opt stack 0
   762  000076                     ?___asflmul:
   763                           	opt stack 0
   764  000076                     ?___fltol:
   765                           	opt stack 0
   766  000076                     Celsius2Fahrenheit@tc:
   767                           	opt stack 0
   768  000076                     ___asflmul@multiplicand:
   769                           	opt stack 0
   770  000076                     ___flsub@f1:
   771                           	opt stack 0
   772  000076                     ___fltol@f1:
   773                           	opt stack 0
   774  000076                     eval_poly@x:
   775                           	opt stack 0
   776                           
   777                           ; 4 bytes @ 0x16
   778  000076                     	ds	4
   779  00007A                     ___fltol@sign1:
   780                           	opt stack 0
   781  00007A                     eval_poly@d:
   782                           	opt stack 0
   783  00007A                     ___flsub@f2:
   784                           	opt stack 0
   785                           
   786                           ; 4 bytes @ 0x1A
   787  00007A                     	ds	1
   788  00007B                     ___fltol@exp1:
   789                           	opt stack 0
   790  00007B                     eval_poly@n:
   791                           	opt stack 0
   792  00007B                     sendVSCPFrame@id:
   793                           	opt stack 0
   794                           
   795                           ; 4 bytes @ 0x1B
   796  00007B                     	ds	1
   797  00007C                     ?_setEventData:
   798                           	opt stack 0
   799  00007C                     ?___aldiv:
   800                           	opt stack 0
   801  00007C                     setEventData@v:
   802                           	opt stack 0
   803  00007C                     ___aldiv@dividend:
   804                           	opt stack 0
   805                           
   806                           ; 4 bytes @ 0x1C
   807  00007C                     	ds	1
   808  00007D                     eval_poly@res:
   809                           	opt stack 0
   810                           
   811                           ; 4 bytes @ 0x1D
   812  00007D                     	ds	1
   813  00007E                     ?___asflsub:
   814                           	opt stack 0
   815  00007E                     setEventData@unit:
   816                           	opt stack 0
   817  00007E                     ___asflsub@f1p:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0x1E
   821  00007E                     	ds	1
   822  00007F                     ??_vscp_handleProtocolEvent:
   823  00007F                     ??_vscp_doOneSecondWork:
   824  00007F                     setEventData@newval:
   825                           	opt stack 0
   826                           
   827                           ; 4 bytes @ 0x1F
   828  00007F                     	ds	1
   829  000080                     ___aldiv@divisor:
   830                           	opt stack 0
   831  000080                     ___asflsub@f2:
   832                           	opt stack 0
   833                           
   834                           ; 4 bytes @ 0x20
   835  000080                     	ds	1
   836  000081                     ?_log:
   837                           	opt stack 0
   838  000081                     ?_ldexp:
   839                           	opt stack 0
   840  000081                     ldexp@value:
   841                           	opt stack 0
   842  000081                     log@x:
   843                           	opt stack 0
   844                           
   845                           ; 4 bytes @ 0x21
   846  000081                     	ds	2
   847  000083                     setEventData@ival:
   848                           	opt stack 0
   849                           
   850                           ; 2 bytes @ 0x23
   851  000083                     	ds	1
   852  000084                     ___aldiv@counter:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0x24
   856  000084                     	ds	1
   857  000085                     ??_sendTempEvent:
   858  000085                     ___aldiv@sign:
   859                           	opt stack 0
   860  000085                     ldexp@newexp:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x25
   864  000085                     	ds	1
   865  000086                     sendTempEvent@i:
   866                           	opt stack 0
   867  000086                     vscp_handleProtocolEvent@page_save:
   868                           	opt stack 0
   869  000086                     ___aldiv@quotient:
   870                           	opt stack 0
   871                           
   872                           ; 4 bytes @ 0x26
   873  000086                     	ds	1
   874  000087                     ??_handle_sync:
   875  000087                     ??_doOneSecondWork:
   876                           
   877                           ; 0 bytes @ 0x27
   878  000087                     	ds	1
   879  000088                     vscp_handleProtocolEvent@page_save_1045:
   880                           	opt stack 0
   881                           
   882                           ; 2 bytes @ 0x28
   883  000088                     	ds	1
   884  000089                     handle_sync@i:
   885                           	opt stack 0
   886                           
   887                           ; 1 bytes @ 0x29
   888  000089                     	ds	1
   889  00008A                     ?___altofl:
   890                           	opt stack 0
   891  00008A                     vscp_handleProtocolEvent@offset:
   892                           	opt stack 0
   893  00008A                     ___altofl@c:
   894                           	opt stack 0
   895                           
   896                           ; 4 bytes @ 0x2A
   897  00008A                     	ds	1
   898  00008B                     vscp_handleProtocolEvent@pos:
   899                           	opt stack 0
   900                           
   901                           ; 1 bytes @ 0x2B
   902  00008B                     	ds	1
   903  00008C                     vscp_handleProtocolEvent@bytes:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x2C
   907  00008C                     	ds	1
   908  00008D                     vscp_handleProtocolEvent@len:
   909                           	opt stack 0
   910                           
   911                           ; 1 bytes @ 0x2D
   912  00008D                     	ds	1
   913  00008E                     doOneSecondWork@tmp:
   914                           	opt stack 0
   915  00008E                     vscp_handleProtocolEvent@pos_1034:
   916                           	opt stack 0
   917  00008E                     ___altofl@sign:
   918                           	opt stack 0
   919                           
   920                           ; 1 bytes @ 0x2E
   921  00008E                     	ds	1
   922  00008F                     ?_floor:
   923                           	opt stack 0
   924  00008F                     vscp_handleProtocolEvent@len_1035:
   925                           	opt stack 0
   926  00008F                     doOneSecondWork@setpoint:
   927                           	opt stack 0
   928  00008F                     floor@x:
   929                           	opt stack 0
   930                           
   931                           ; 4 bytes @ 0x2F
   932  00008F                     	ds	1
   933  000090                     vscp_handleProtocolEvent@bytes_this_time:
   934                           	opt stack 0
   935                           
   936                           ; 1 bytes @ 0x30
   937  000090                     	ds	1
   938  000091                     doOneSecondWork@i:
   939                           	opt stack 0
   940  000091                     vscp_handleProtocolEvent@cb:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x31
   944  000091                     	ds	1
   945  000092                     vscp_handleProtocolEvent@i_1044:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x32
   949  000092                     	ds	1
   950  000093                     vscp_handleProtocolEvent@k:
   951                           	opt stack 0
   952  000093                     floor@i:
   953                           	opt stack 0
   954                           
   955                           ; 4 bytes @ 0x33
   956  000093                     	ds	1
   957  000094                     vscp_handleProtocolEvent@i_1033:
   958                           	opt stack 0
   959                           
   960                           ; 1 bytes @ 0x34
   961  000094                     	ds	1
   962  000095                     vscp_handleProtocolEvent@byte:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x35
   966  000095                     	ds	1
   967  000096                     vscp_handleProtocolEvent@bytes_1040:
   968                           	opt stack 0
   969                           
   970                           ; 2 bytes @ 0x36
   971  000096                     	ds	1
   972  000097                     floor@expon:
   973                           	opt stack 0
   974                           
   975                           ; 2 bytes @ 0x37
   976  000097                     	ds	1
   977  000098                     vscp_handleProtocolEvent@i_1036:
   978                           	opt stack 0
   979                           
   980                           ; 1 bytes @ 0x38
   981  000098                     	ds	1
   982  000099                     ?_exp:
   983                           	opt stack 0
   984  000099                     vscp_handleProtocolEvent@i:
   985                           	opt stack 0
   986  000099                     exp@x:
   987                           	opt stack 0
   988                           
   989                           ; 4 bytes @ 0x39
   990  000099                     	ds	1
   991  00009A                     vscp_handleProtocolEvent@j:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x3A
   995  00009A                     	ds	3
   996  00009D                     _exp$2287:
   997                           	opt stack 0
   998                           
   999                           ; 4 bytes @ 0x3D
  1000  00009D                     	ds	4
  1001  0000A1                     exp@exponent:
  1002                           	opt stack 0
  1003                           
  1004                           ; 2 bytes @ 0x41
  1005  0000A1                     	ds	2
  1006  0000A3                     exp@sign:
  1007                           	opt stack 0
  1008                           
  1009                           ; 1 bytes @ 0x43
  1010  0000A3                     	ds	1
  1011  0000A4                     ??_doWork:
  1012                           
  1013                           ; 0 bytes @ 0x44
  1014  0000A4                     	ds	14
  1015  0000B2                     main@i:
  1016                           	opt stack 0
  1017                           
  1018                           ; 4 bytes @ 0x52
  1019  0000B2                     	ds	4
  1020                           tblptru	equ	0xFF8
  1021                           tblptrh	equ	0xFF7
  1022                           tblptrl	equ	0xFF6
  1023                           tablat	equ	0xFF5
  1024                           prodh	equ	0xFF4
  1025                           prodl	equ	0xFF3
  1026                           intcon	equ	0xFF2
  1027                           postinc0	equ	0xFEE
  1028                           wreg	equ	0xFE8
  1029                           indf1	equ	0xFE7
  1030                           postdec1	equ	0xFE5
  1031                           fsr1h	equ	0xFE2
  1032                           fsr1l	equ	0xFE1
  1033                           indf2	equ	0xFDF
  1034                           postinc2	equ	0xFDE
  1035                           postdec2	equ	0xFDD
  1036                           plusw2	equ	0xFDB
  1037                           fsr2h	equ	0xFDA
  1038                           fsr2l	equ	0xFD9
  1039                           status	equ	0xFD8
  1040                           
  1041                           	psect	cstackCOMRAM
  1042  000001                     __pcstackCOMRAM:
  1043                           	opt stack 0
  1044  000001                     ?i1_WriteTimer0:
  1045                           	opt stack 0
  1046  000001                     i1WriteTimer0@timer0:
  1047                           	opt stack 0
  1048                           
  1049                           ; 2 bytes @ 0x0
  1050  000001                     	ds	2
  1051  000003                     i1WriteTimer0@timer:
  1052                           	opt stack 0
  1053                           
  1054                           ; 2 bytes @ 0x2
  1055  000003                     	ds	2
  1056  000005                     ??_interrupt_at_low_vector:
  1057                           
  1058                           ; 0 bytes @ 0x4
  1059  000005                     	ds	9
  1060  00000E                     ?_WriteTimer0:
  1061                           	opt stack 0
  1062  00000E                     ?_Write_b_eep:
  1063                           	opt stack 0
  1064  00000E                     ?_OpenADC:
  1065                           	opt stack 0
  1066  00000E                     ?__CANIDToRegs:
  1067                           	opt stack 0
  1068  00000E                     ?__RegsToCANID:
  1069                           	opt stack 0
  1070  00000E                     ??_vscp_getMDF_URL:
  1071  00000E                     ?___flge:
  1072                           	opt stack 0
  1073  00000E                     ?___lbmod:
  1074                           	opt stack 0
  1075  00000E                     ?__ECANPointBuffer:
  1076                           	opt stack 0
  1077  00000E                     ?___wmul:
  1078                           	opt stack 0
  1079  00000E                     ?___flpack:
  1080                           	opt stack 0
  1081  00000E                     ?_frexp:
  1082                           	opt stack 0
  1083  00000E                     ?_vscp_getFamilyCode:
  1084                           	opt stack 0
  1085  00000E                     ?_vscp_getFamilyType:
  1086                           	opt stack 0
  1087  00000E                     ?___flneg:
  1088                           	opt stack 0
  1089  00000E                     init_app_ram@i:
  1090                           	opt stack 0
  1091  00000E                     vscp_getMatrixInfo@pData:
  1092                           	opt stack 0
  1093  00000E                     ECANSetOperationMode@mode:
  1094                           	opt stack 0
  1095  00000E                     OpenADC@config2:
  1096                           	opt stack 0
  1097  00000E                     OpenTimer0@config:
  1098                           	opt stack 0
  1099  00000E                     ___lbmod@divisor:
  1100                           	opt stack 0
  1101  00000E                     __CANIDToRegs@ptr:
  1102                           	opt stack 0
  1103  00000E                     __RegsToCANID@ptr:
  1104                           	opt stack 0
  1105  00000E                     Write_b_eep@badd:
  1106                           	opt stack 0
  1107  00000E                     WriteTimer0@timer0:
  1108                           	opt stack 0
  1109  00000E                     ___wmul@multiplier:
  1110                           	opt stack 0
  1111  00000E                     ___flpack@arg:
  1112                           	opt stack 0
  1113  00000E                     ___flge@ff1:
  1114                           	opt stack 0
  1115  00000E                     ___flneg@f1:
  1116                           	opt stack 0
  1117  00000E                     frexp@value:
  1118                           	opt stack 0
  1119                           
  1120                           ; 4 bytes @ 0xD
  1121  00000E                     	ds	1
  1122  00000F                     vscp_getMDF_URL@idx:
  1123                           	opt stack 0
  1124  00000F                     vscp_getMatrixInfo@i:
  1125                           	opt stack 0
  1126  00000F                     OpenADC@portconfig:
  1127                           	opt stack 0
  1128  00000F                     ___lbmod@dividend:
  1129                           	opt stack 0
  1130                           
  1131                           ; 1 bytes @ 0xE
  1132  00000F                     	ds	1
  1133  000010                     ??_OpenADC:
  1134  000010                     __RegsToCANID@val:
  1135                           	opt stack 0
  1136  000010                     Write_b_eep@bdat:
  1137                           	opt stack 0
  1138  000010                     ___lbmod@counter:
  1139                           	opt stack 0
  1140  000010                     WriteTimer0@timer:
  1141                           	opt stack 0
  1142  000010                     ___wmul@multiplicand:
  1143                           	opt stack 0
  1144  000010                     __CANIDToRegs@val:
  1145                           	opt stack 0
  1146                           
  1147                           ; 4 bytes @ 0xF
  1148  000010                     	ds	1
  1149  000011                     __RegsToCANID@type:
  1150                           	opt stack 0
  1151  000011                     __ECANPointBuffer@b:
  1152                           	opt stack 0
  1153  000011                     Write_b_eep@GIE_BIT_VAL:
  1154                           	opt stack 0
  1155  000011                     ___lbmod@rem:
  1156                           	opt stack 0
  1157                           
  1158                           ; 1 bytes @ 0x10
  1159  000011                     	ds	1
  1160  000012                     ??__RegsToCANID:
  1161  000012                     ?_vscp_setGUID:
  1162                           	opt stack 0
  1163  000012                     ?_vscp_setUserID:
  1164                           	opt stack 0
  1165  000012                     ?_vscp_setManufacturerId:
  1166                           	opt stack 0
  1167  000012                     ?_vscp_setControlByte:
  1168                           	opt stack 0
  1169  000012                     vscp_setGUID@data:
  1170                           	opt stack 0
  1171  000012                     vscp_setUserID@data:
  1172                           	opt stack 0
  1173  000012                     vscp_setManufacturerId@data:
  1174                           	opt stack 0
  1175  000012                     vscp_goBootloaderMode@algorithm:
  1176                           	opt stack 0
  1177  000012                     vscp_writeNicknamePermanent@nickname:
  1178                           	opt stack 0
  1179  000012                     vscp_setControlByte@idx:
  1180                           	opt stack 0
  1181  000012                     OpenADC@config:
  1182                           	opt stack 0
  1183  000012                     ___flpack@exp:
  1184                           	opt stack 0
  1185  000012                     __ECANPointBuffer@pt:
  1186                           	opt stack 0
  1187  000012                     frexp@eptr:
  1188                           	opt stack 0
  1189  000012                     ___flge@ff2:
  1190                           	opt stack 0
  1191                           
  1192                           ; 4 bytes @ 0x11
  1193  000012                     	ds	1
  1194  000013                     vscp_setGUID@idx:
  1195                           	opt stack 0
  1196  000013                     vscp_setUserID@idx:
  1197                           	opt stack 0
  1198  000013                     vscp_setManufacturerId@idx:
  1199                           	opt stack 0
  1200  000013                     vscp_setControlByte@ctrl:
  1201                           	opt stack 0
  1202  000013                     ___flpack@sign:
  1203                           	opt stack 0
  1204                           
  1205                           ; 1 bytes @ 0x12
  1206  000013                     	ds	1
  1207  000014                     ??___flpack:
  1208  000014                     ??_frexp:
  1209  000014                     __CANIDToRegs@type:
  1210                           	opt stack 0
  1211  000014                     __RegsToCANID@Value:
  1212                           	opt stack 0
  1213  000014                     ___wmul@product:
  1214                           	opt stack 0
  1215                           
  1216                           ; 2 bytes @ 0x13
  1217  000014                     	ds	1
  1218  000015                     ??__CANIDToRegs:
  1219  000015                     ?_ECANReceiveMessage:
  1220                           	opt stack 0
  1221  000015                     ECANReceiveMessage@data:
  1222                           	opt stack 0
  1223                           
  1224                           ; 1 bytes @ 0x14
  1225  000015                     	ds	1
  1226  000016                     ?_Read_b_eep:
  1227                           	opt stack 0
  1228  000016                     ECANReceiveMessage@dataLen:
  1229                           	opt stack 0
  1230  000016                     Read_b_eep@badd:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x15
  1234  000016                     	ds	1
  1235  000017                     ECANReceiveMessage@msgFlags:
  1236                           	opt stack 0
  1237  000017                     __CANIDToRegs@Value:
  1238                           	opt stack 0
  1239                           
  1240                           ; 1 bytes @ 0x16
  1241  000017                     	ds	1
  1242  000018                     ??_writeCoeffs2Ram:
  1243  000018                     ?_ECANSendMessage:
  1244                           	opt stack 0
  1245  000018                     ?_getCalibrationValue:
  1246                           	opt stack 0
  1247  000018                     ?___awtofl:
  1248                           	opt stack 0
  1249  000018                     ?___lwtofl:
  1250                           	opt stack 0
  1251  000018                     vscp_readAppReg@pos:
  1252                           	opt stack 0
  1253  000018                     vscp_getGUID@idx:
  1254                           	opt stack 0
  1255  000018                     vscp_getUserID@idx:
  1256                           	opt stack 0
  1257  000018                     vscp_getManufacturerId@idx:
  1258                           	opt stack 0
  1259  000018                     vscp_getControlByte@idx:
  1260                           	opt stack 0
  1261  000018                     vscp_handleDropNickname@bytes:
  1262                           	opt stack 0
  1263  000018                     ECANReceiveMessage@savedPtr:
  1264                           	opt stack 0
  1265  000018                     ___awtofl@c:
  1266                           	opt stack 0
  1267  000018                     ___lwtofl@c:
  1268                           	opt stack 0
  1269  000018                     ECANSendMessage@id:
  1270                           	opt stack 0
  1271                           
  1272                           ; 4 bytes @ 0x17
  1273  000018                     	ds	1
  1274  000019                     ??_vscp_readStdReg:
  1275  000019                     ?_vscp_writeStdReg:
  1276                           	opt stack 0
  1277  000019                     vscp_readAppReg@reg:
  1278                           	opt stack 0
  1279  000019                     vscp_writeStdReg@value:
  1280                           	opt stack 0
  1281                           
  1282                           ; 1 bytes @ 0x18
  1283  000019                     	ds	1
  1284  00001A                     ??_getCalibrationValue:
  1285  00001A                     ??_vscp_writeStdReg:
  1286  00001A                     vscp_readAppReg@rv:
  1287                           	opt stack 0
  1288  00001A                     ECANReceiveMessage@id:
  1289                           	opt stack 0
  1290  00001A                     writeCoeffs2Ram@c:
  1291                           	opt stack 0
  1292                           
  1293                           ; 3 bytes @ 0x19
  1294  00001A                     	ds	1
  1295  00001B                     ECANReceiveMessage@i:
  1296                           	opt stack 0
  1297  00001B                     getCalibrationValue@cal:
  1298                           	opt stack 0
  1299                           
  1300                           ; 2 bytes @ 0x1A
  1301  00001B                     	ds	1
  1302  00001C                     ECANSendMessage@data:
  1303                           	opt stack 0
  1304  00001C                     ECANReceiveMessage@mode:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0x1B
  1308  00001C                     	ds	1
  1309  00001D                     ?___fladd:
  1310                           	opt stack 0
  1311  00001D                     getCalibrationValue@i:
  1312                           	opt stack 0
  1313  00001D                     ECANSendMessage@dataLen:
  1314                           	opt stack 0
  1315  00001D                     ECANReceiveMessage@temp:
  1316                           	opt stack 0
  1317  00001D                     writeCoeffs2Ram@i:
  1318                           	opt stack 0
  1319  00001D                     ___fladd@f1:
  1320                           	opt stack 0
  1321                           
  1322                           ; 4 bytes @ 0x1C
  1323  00001D                     	ds	1
  1324  00001E                     ECANSendMessage@msgFlags:
  1325                           	opt stack 0
  1326  00001E                     vscp_writeStdReg@rv:
  1327                           	opt stack 0
  1328  00001E                     ___awtofl@sign:
  1329                           	opt stack 0
  1330  00001E                     ECANReceiveMessage@ptr:
  1331                           	opt stack 0
  1332  00001E                     vscp_readStdReg@code:
  1333                           	opt stack 0
  1334                           
  1335                           ; 4 bytes @ 0x1D
  1336  00001E                     	ds	1
  1337  00001F                     ??_ECANSendMessage:
  1338  00001F                     vscp_writeStdReg@reg:
  1339                           	opt stack 0
  1340  00001F                     writeCoeffs2Ram@j:
  1341                           	opt stack 0
  1342                           
  1343                           ; 2 bytes @ 0x1E
  1344  00001F                     	ds	1
  1345  000020                     ?_getCANFrame:
  1346                           	opt stack 0
  1347  000020                     getCANFrame@pdlc:
  1348                           	opt stack 0
  1349  000020                     ECANSendMessage@pb:
  1350                           	opt stack 0
  1351                           
  1352                           ; 18 bytes @ 0x1F
  1353  000020                     	ds	1
  1354  000021                     ?_vscp_writeAppReg:
  1355                           	opt stack 0
  1356  000021                     vscp_writeAppReg@val:
  1357                           	opt stack 0
  1358  000021                     getCANFrame@pdata:
  1359                           	opt stack 0
  1360  000021                     ___fladd@f2:
  1361                           	opt stack 0
  1362                           
  1363                           ; 4 bytes @ 0x20
  1364  000021                     	ds	1
  1365  000022                     vscp_writeAppReg@pos:
  1366                           	opt stack 0
  1367  000022                     getCANFrame@pid:
  1368                           	opt stack 0
  1369  000022                     vscp_readStdReg@code_1018:
  1370                           	opt stack 0
  1371                           
  1372                           ; 4 bytes @ 0x21
  1373  000022                     	ds	1
  1374  000023                     vscp_writeAppReg@reg:
  1375                           	opt stack 0
  1376  000023                     getCANFrame@flags:
  1377                           	opt stack 0
  1378                           
  1379                           ; 1 bytes @ 0x22
  1380  000023                     	ds	1
  1381  000024                     ?_getVSCPFrame:
  1382                           	opt stack 0
  1383  000024                     vscp_writeAppReg@rv:
  1384                           	opt stack 0
  1385  000024                     getVSCPFrame@pvscptype:
  1386                           	opt stack 0
  1387                           
  1388                           ; 1 bytes @ 0x23
  1389  000024                     	ds	1
  1390  000025                     ??___fladd:
  1391  000025                     ?_vscp_writeRegister:
  1392                           	opt stack 0
  1393  000025                     getVSCPFrame@pNodeId:
  1394                           	opt stack 0
  1395  000025                     vscp_writeRegister@value:
  1396                           	opt stack 0
  1397                           
  1398                           ; 1 bytes @ 0x24
  1399  000025                     	ds	1
  1400  000026                     getVSCPFrame@pPriority:
  1401                           	opt stack 0
  1402  000026                     vscp_readStdReg@idx:
  1403                           	opt stack 0
  1404  000026                     vscp_writeRegister@reg:
  1405                           	opt stack 0
  1406                           
  1407                           ; 1 bytes @ 0x25
  1408  000026                     	ds	1
  1409  000027                     getVSCPFrame@pSize:
  1410                           	opt stack 0
  1411  000027                     vscp_readStdReg@idx_1019:
  1412                           	opt stack 0
  1413                           
  1414                           ; 1 bytes @ 0x26
  1415  000027                     	ds	1
  1416  000028                     getVSCPFrame@pData:
  1417                           	opt stack 0
  1418  000028                     vscp_readStdReg@rv:
  1419                           	opt stack 0
  1420                           
  1421                           ; 1 bytes @ 0x27
  1422  000028                     	ds	1
  1423  000029                     ??_getVSCPFrame:
  1424  000029                     vscp_readStdReg@reg:
  1425                           	opt stack 0
  1426  000029                     ___fladd@sign:
  1427                           	opt stack 0
  1428                           
  1429                           ; 1 bytes @ 0x28
  1430  000029                     	ds	1
  1431  00002A                     vscp_readRegister@reg:
  1432                           	opt stack 0
  1433  00002A                     ___fladd@exp2:
  1434                           	opt stack 0
  1435                           
  1436                           ; 1 bytes @ 0x29
  1437  00002A                     	ds	1
  1438  00002B                     ___fladd@exp1:
  1439                           	opt stack 0
  1440                           
  1441                           ; 1 bytes @ 0x2A
  1442  00002B                     	ds	1
  1443  00002C                     ?_Celsius2Kelvin:
  1444                           	opt stack 0
  1445  00002C                     ?___fldiv:
  1446                           	opt stack 0
  1447  00002C                     ?___asfladd:
  1448                           	opt stack 0
  1449  00002C                     ___asfladd@f1p:
  1450                           	opt stack 0
  1451  00002C                     Celsius2Kelvin@tc:
  1452                           	opt stack 0
  1453  00002C                     ___fldiv@f1:
  1454                           	opt stack 0
  1455                           
  1456                           ; 4 bytes @ 0x2B
  1457  00002C                     	ds	1
  1458  00002D                     getVSCPFrame@pvscpclass:
  1459                           	opt stack 0
  1460                           
  1461                           ; 1 bytes @ 0x2C
  1462  00002D                     	ds	1
  1463  00002E                     getVSCPFrame@id:
  1464                           	opt stack 0
  1465  00002E                     ___asfladd@f2:
  1466                           	opt stack 0
  1467                           
  1468                           ; 4 bytes @ 0x2D
  1469  00002E                     	ds	2
  1470  000030                     ___fldiv@f2:
  1471                           	opt stack 0
  1472                           
  1473                           ; 4 bytes @ 0x2F
  1474  000030                     	ds	2
  1475  000032                     ECANSendMessage@mode:
  1476                           	opt stack 0
  1477  000032                     vscp_getEvent@rv:
  1478                           	opt stack 0
  1479                           
  1480                           ; 1 bytes @ 0x31
  1481  000032                     	ds	1
  1482  000033                     ECANSendMessage@buffers:
  1483                           	opt stack 0
  1484                           
  1485                           ; 1 bytes @ 0x32
  1486  000033                     	ds	1
  1487  000034                     ECANSendMessage@j:
  1488                           	opt stack 0
  1489                           
  1490                           ; 1 bytes @ 0x33
  1491  000034                     	ds	1
  1492  000035                     ECANSendMessage@tempBSEL0:
  1493                           	opt stack 0
  1494                           
  1495                           ; 1 bytes @ 0x34
  1496  000035                     	ds	1
  1497  000036                     ECANSendMessage@tempPtr:
  1498                           	opt stack 0
  1499                           
  1500                           ; 2 bytes @ 0x35
  1501  000036                     	ds	2
  1502  000038                     ECANSendMessage@temp:
  1503                           	opt stack 0
  1504                           
  1505                           ; 1 bytes @ 0x37
  1506  000038                     	ds	1
  1507  000039                     ECANSendMessage@i:
  1508                           	opt stack 0
  1509                           
  1510                           ; 1 bytes @ 0x38
  1511  000039                     	ds	1
  1512  00003A                     ECANSendMessage@ptr:
  1513                           	opt stack 0
  1514                           
  1515                           ; 2 bytes @ 0x39
  1516  00003A                     	ds	1
  1517  00003B                     ___fldiv@f3:
  1518                           	opt stack 0
  1519                           
  1520                           ; 4 bytes @ 0x3A
  1521  00003B                     	ds	1
  1522  00003C                     ?_sendCANFrame:
  1523                           	opt stack 0
  1524  00003C                     sendCANFrame@id:
  1525                           	opt stack 0
  1526                           
  1527                           ; 4 bytes @ 0x3B
  1528  00003C                     	ds	3
  1529  00003F                     ___fldiv@cntr:
  1530                           	opt stack 0
  1531                           
  1532                           ; 1 bytes @ 0x3E
  1533  00003F                     	ds	1
  1534  000040                     sendCANFrame@dlc:
  1535                           	opt stack 0
  1536  000040                     ___fldiv@exp:
  1537                           	opt stack 0
  1538                           
  1539                           ; 1 bytes @ 0x3F
  1540  000040                     	ds	1
  1541  000041                     sendCANFrame@pdata:
  1542                           	opt stack 0
  1543  000041                     ___fldiv@sign:
  1544                           	opt stack 0
  1545                           
  1546                           ; 1 bytes @ 0x40
  1547  000041                     	ds	1
  1548  000042                     ??_eval_poly:
  1549  000042                     ??___fltol:
  1550  000042                     sendCANFrame@rv:
  1551                           	opt stack 0
  1552  000042                     ___asflmul@mp:
  1553                           	opt stack 0
  1554                           
  1555                           ; 1 bytes @ 0x41
  1556  000042                     	ds	1
  1557  000043                     ??_ldexp:
  1558  000043                     vscp_sendEvent@rv:
  1559                           	opt stack 0
  1560  000043                     log@exponent:
  1561                           	opt stack 0
  1562                           
  1563                           ; 2 bytes @ 0x42
  1564  000043                     	ds	1
  1565  000044                     ?_vscp_sendHeartBeat:
  1566                           	opt stack 0
  1567  000044                     ??_vscp_newNodeOnline:
  1568  000044                     vscp_sendHeartBeat@subzone:
  1569                           	opt stack 0
  1570                           
  1571                           ; 1 bytes @ 0x43
  1572  000044                     	ds	1
  1573  000045                     vscp_sendHeartBeat@zone:
  1574                           	opt stack 0
  1575                           
  1576                           ; 1 bytes @ 0x44
  1577  000045                     	ds	1
  1578  000046                     tblptru	equ	0xFF8
  1579                           tblptrh	equ	0xFF7
  1580                           tblptrl	equ	0xFF6
  1581                           tablat	equ	0xFF5
  1582                           prodh	equ	0xFF4
  1583                           prodl	equ	0xFF3
  1584                           intcon	equ	0xFF2
  1585                           postinc0	equ	0xFEE
  1586                           wreg	equ	0xFE8
  1587                           indf1	equ	0xFE7
  1588                           postdec1	equ	0xFE5
  1589                           fsr1h	equ	0xFE2
  1590                           fsr1l	equ	0xFE1
  1591                           indf2	equ	0xFDF
  1592                           postinc2	equ	0xFDE
  1593                           postdec2	equ	0xFDD
  1594                           plusw2	equ	0xFDB
  1595                           fsr2h	equ	0xFDA
  1596                           fsr2l	equ	0xFD9
  1597                           status	equ	0xFD8
  1598                           
  1599                           ; 0 bytes @ 0x45
  1600 ;;
  1601 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1602 ;;
  1603 ;; *************** function _main *****************
  1604 ;; Defined at:
  1605 ;;		line 333 in file "../main.c"
  1606 ;; Parameters:    Size  Location     Type
  1607 ;;		None
  1608 ;; Auto vars:     Size  Location     Type
  1609 ;;  i               4   82[BANK0 ] unsigned long 
  1610 ;; Return value:  Size  Location     Type
  1611 ;;		None               void
  1612 ;; Registers used:
  1613 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1614 ;; Tracked objects:
  1615 ;;		On entry : 0/0
  1616 ;;		On exit  : F/1
  1617 ;;		Unchanged: 0/0
  1618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1619 ;;      Params:         0       0       0       0       0       0       0
  1620 ;;      Locals:         0       4       0       0       0       0       0
  1621 ;;      Temps:          0       0       0       0       0       0       0
  1622 ;;      Totals:         0       4       0       0       0       0       0
  1623 ;;Total ram usage:        4 bytes
  1624 ;; Hardware stack levels required when called:    9
  1625 ;; This function calls:
  1626 ;;		_init
  1627 ;;		_vscp_check_pstorage
  1628 ;;		_init_app_eeprom
  1629 ;;		_vscp_init
  1630 ;;		_Busy_eep
  1631 ;;		_Write_b_eep
  1632 ;;		_vscp_getEvent
  1633 ;;		_vscp_goActiveState
  1634 ;;		_vscp_handleProbeState
  1635 ;;		_vscp_handleProtocolEvent
  1636 ;;		_handle_sync
  1637 ;;		_vscp_error
  1638 ;;		_doOneSecondWork
  1639 ;;		_vscp_doOneSecondWork
  1640 ;;		_doWork
  1641 ;; This function is called by:
  1642 ;;		Startup code after reset
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646                           	psect	text0
  1647  003F14                     __ptext0:
  1648                           	opt stack 0
  1649  003F14                     _main:
  1650                           	opt stack 22
  1651                           
  1652                           ;main.c: 334: uint32_t i;
  1653                           ;main.c: 336: init();
  1654                           
  1655                           ;incstack = 0
  1656                           ;incstack = 0
  1657  003F14  EC31  F029         	call	_init	;wreg free
  1658                           
  1659                           ;main.c: 340: if ( !vscp_check_pstorage() ) {
  1660  003F18  EC4F  F029         	call	_vscp_check_pstorage	;wreg free
  1661  003F1C  0900               	iorlw	0
  1662  003F1E  B4D8               	btfsc	status,2,c
  1663                           
  1664                           ;main.c: 343: init_app_eeprom();
  1665  003F20  EC5D  F00E         	call	_init_app_eeprom	;wreg free
  1666                           
  1667                           ;main.c: 345: }
  1668                           ;main.c: 347: vscp_init();
  1669  003F24  EC6C  F028         	call	_vscp_init	;wreg free
  1670  003F28                     l172:
  1671                           
  1672                           ; BSR set to: 1
  1673  003F28  0004               	clrwdt		;# 
  1674                           
  1675                           ;main.c: 353: if ( ( vscp_initbtncnt > 250 ) &&
  1676                           ;main.c: 354: ( 0x01 != vscp_node_state ) ) {
  1677  003F2A  0EFA               	movlw	250
  1678  003F2C  0100               	movlb	0	; () banked
  1679  003F2E  65BA               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1680  003F30  D00E               	goto	l13427
  1681                           
  1682                           ; BSR set to: 0
  1683  003F32  05BC               	decf	_vscp_node_state& (0+255),w,b
  1684  003F34  E00C               	bz	l13427
  1685                           
  1686                           ; BSR set to: 0
  1687                           ;main.c: 357: vscp_nickname = 0xff;
  1688  003F36  69BB               	setf	_vscp_nickname& (0+255),b
  1689                           
  1690                           ; BSR set to: 0
  1691                           ;main.c: 358: (Busy_eep(), Write_b_eep(0x01,0xff));
  1692  003F38  ECC7  F02B         	call	_Busy_eep	;wreg free
  1693  003F3C  6A0F               	clrf	?_Write_b_eep+1,c
  1694  003F3E  0E01               	movlw	1
  1695  003F40  6E0E               	movwf	?_Write_b_eep,c
  1696  003F42  0EFF               	movlw	255
  1697  003F44  6810               	setf	?_Write_b_eep+2,c
  1698  003F46  ECA3  F029         	call	_Write_b_eep	;wreg free
  1699                           
  1700                           ;main.c: 359: vscp_init();
  1701  003F4A  EC6C  F028         	call	_vscp_init	;wreg free
  1702  003F4E                     l13427:
  1703                           
  1704                           ;main.c: 361: }
  1705                           ;main.c: 365: vscp_imsg.flags = 0;
  1706  003F4E  0100               	movlb	0	; () banked
  1707  003F50  6BBD               	clrf	_vscp_imsg& (0+255),b
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;main.c: 366: vscp_getEvent();
  1711  003F52  EC45  F02A         	call	_vscp_getEvent	;wreg free
  1712                           
  1713                           ;main.c: 369: switch (vscp_node_state) {
  1714  003F56  D024               	goto	l13457
  1715  003F58                     l13431:
  1716                           
  1717                           ; BSR set to: 0
  1718                           ;main.c: 374: if (0xff == vscp_nickname) {
  1719  003F58  29BB               	incf	_vscp_nickname& (0+255),w,b
  1720  003F5A  E103               	bnz	l13435
  1721                           
  1722                           ; BSR set to: 0
  1723                           ;main.c: 376: vscp_node_state = 0x01;
  1724  003F5C  0E01               	movlw	1
  1725  003F5E  6FBC               	movwf	_vscp_node_state& (0+255),b
  1726                           
  1727                           ;main.c: 377: }
  1728  003F60  D02B               	goto	l13459
  1729  003F62                     l13435:
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;main.c: 378: else {
  1733                           ;main.c: 380: vscp_node_state = 0x03;
  1734  003F62  0E03               	movlw	3
  1735  003F64  6FBC               	movwf	_vscp_node_state& (0+255),b
  1736  003F66                     l13437:
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;main.c: 381: vscp_goActiveState();
  1740  003F66  ECFA  F02A         	call	_vscp_goActiveState	;wreg free
  1741  003F6A  D026               	goto	l13459
  1742  003F6C                     l13439:
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;main.c: 386: vscp_handleProbeState();
  1746  003F6C  EC0B  F022         	call	_vscp_handleProbeState	;wreg free
  1747                           
  1748                           ;main.c: 387: break;
  1749  003F70  D023               	goto	l13459
  1750  003F72                     l181:
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;main.c: 396: if (vscp_imsg.flags & 0x80) {
  1754  003F72  AFBD               	btfss	_vscp_imsg& (0+255),7,b
  1755  003F74  D021               	goto	l13459
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;main.c: 398: if ( 0 == vscp_imsg.vscp_class ) {
  1759  003F76  51C0               	movf	(_vscp_imsg+3)& (0+255),w,b
  1760  003F78  11BF               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1761  003F7A  E103               	bnz	l13447
  1762                           
  1763                           ; BSR set to: 0
  1764                           ;main.c: 401: vscp_handleProtocolEvent();
  1765  003F7C  EC15  F012         	call	_vscp_handleProtocolEvent	;wreg free
  1766                           
  1767                           ;main.c: 403: }
  1768  003F80  D01B               	goto	l13459
  1769  003F82                     l13447:
  1770                           
  1771                           ; BSR set to: 0
  1772                           ;main.c: 404: else if ( ( 30 == vscp_imsg.vscp_class ) &&
  1773                           ;main.c: 405: ( 26 == vscp_imsg.vscp_type ) ) {
  1774  003F82  51BF               	movf	(_vscp_imsg+2)& (0+255),w,b
  1775  003F84  0A1E               	xorlw	30
  1776  003F86  11C0               	iorwf	(_vscp_imsg+3)& (0+255),w,b
  1777  003F88  E117               	bnz	l13459
  1778                           
  1779                           ; BSR set to: 0
  1780  003F8A  51C1               	movf	(_vscp_imsg+4)& (0+255),w,b
  1781  003F8C  0A1A               	xorlw	26
  1782  003F8E  E114               	bnz	l13459
  1783                           
  1784                           ; BSR set to: 0
  1785                           ;main.c: 406: handle_sync();
  1786  003F90  EC06  F026         	call	_handle_sync	;wreg free
  1787  003F94  D011               	goto	l13459
  1788  003F96                     l13453:
  1789                           
  1790                           ; BSR set to: 0
  1791                           ;main.c: 413: vscp_error();
  1792  003F96  ECCA  F02B         	call	_vscp_error	;wreg free
  1793                           
  1794                           ;main.c: 414: break;
  1795  003F9A  D00E               	goto	l13459
  1796  003F9C                     l187:
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;main.c: 417: vscp_node_state = 0x00;
  1800  003F9C  6BBC               	clrf	_vscp_node_state& (0+255),b
  1801                           
  1802                           ;main.c: 418: break;
  1803  003F9E  D00C               	goto	l13459
  1804  003FA0                     l13457:
  1805  003FA0  0100               	movlb	0	; () banked
  1806  003FA2  51BC               	movf	_vscp_node_state& (0+255),w,b
  1807                           
  1808                           ; Switch size 1, requested type "space"
  1809                           ; Number of cases is 5, Range of values is 0 to 4
  1810                           ; switch strategies available:
  1811                           ; Name         Instructions Cycles
  1812                           ; simple_byte           16     9 (average)
  1813                           ;	Chosen strategy is simple_byte
  1814  003FA4  E0D9               	bz	l13431
  1815  003FA6  0A01               	xorlw	1	; case 1
  1816  003FA8  E0E1               	bz	l13439
  1817  003FAA  0A03               	xorlw	3	; case 2
  1818  003FAC  E0DC               	bz	l13437
  1819  003FAE  0A01               	xorlw	1	; case 3
  1820  003FB0  E0E0               	bz	l181
  1821  003FB2  0A07               	xorlw	7	; case 4
  1822  003FB4  E0F0               	bz	l13453
  1823  003FB6  D7F2               	goto	l187
  1824  003FB8                     l13459:
  1825                           
  1826                           ;main.c: 424: if ( measurement_clock > 1000 ) {
  1827  003FB8  0EE9               	movlw	233
  1828  003FBA  0101               	movlb	1	; () banked
  1829  003FBC  5D12               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1830  003FBE  0E03               	movlw	3
  1831  003FC0  5913               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1832  003FC2  0E00               	movlw	0
  1833  003FC4  5914               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1834  003FC6  0E00               	movlw	0
  1835  003FC8  5915               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1836  003FCA  E3AE               	bnc	l172
  1837                           
  1838                           ; BSR set to: 1
  1839                           ;main.c: 426: measurement_clock = 0;
  1840  003FCC  6B12               	clrf	_measurement_clock& (0+255),b	;volatile
  1841  003FCE  6B13               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1842  003FD0  6B14               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1843  003FD2  6B15               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1844                           
  1845                           ; BSR set to: 1
  1846                           ;main.c: 427: doOneSecondWork();
  1847  003FD4  EC2C  F015         	call	_doOneSecondWork	;wreg free
  1848                           
  1849                           ; BSR set to: 0
  1850                           ;main.c: 428: seconds++;
  1851  003FD8  2BB9               	incf	_seconds& (0+255),f,b
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;main.c: 432: if (0x03 == vscp_node_state) {
  1855  003FDA  51BC               	movf	_vscp_node_state& (0+255),w,b
  1856  003FDC  0A03               	xorlw	3
  1857  003FDE  E11A               	bnz	l13481
  1858                           
  1859                           ; BSR set to: 0
  1860                           ;main.c: 433: for (i = 0; i < 6; i++) {
  1861  003FE0  6BB2               	clrf	main@i& (0+255),b
  1862  003FE2  6BB3               	clrf	(main@i+1)& (0+255),b
  1863  003FE4  6BB4               	clrf	(main@i+2)& (0+255),b
  1864  003FE6  6BB5               	clrf	(main@i+3)& (0+255),b
  1865  003FE8                     l13475:
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;main.c: 434: seconds_temp[i]++;
  1869  003FE8  0E0C               	movlw	low _seconds_temp
  1870  003FEA  0100               	movlb	0	; () banked
  1871  003FEC  25B2               	addwf	main@i& (0+255),w,b
  1872  003FEE  6ED9               	movwf	fsr2l,c
  1873  003FF0  0E01               	movlw	high _seconds_temp
  1874  003FF2  21B3               	addwfc	(main@i+1)& (0+255),w,b
  1875  003FF4  6EDA               	movwf	fsr2h,c
  1876  003FF6  2ADF               	incf	indf2,f,c
  1877                           
  1878                           ; BSR set to: 0
  1879  003FF8  2BB2               	incf	main@i& (0+255),f,b
  1880  003FFA  0E00               	movlw	0
  1881  003FFC  23B3               	addwfc	(main@i+1)& (0+255),f,b
  1882  003FFE  23B4               	addwfc	(main@i+2)& (0+255),f,b
  1883  004000  23B5               	addwfc	(main@i+3)& (0+255),f,b
  1884                           
  1885                           ; BSR set to: 0
  1886  004002  0E06               	movlw	6
  1887  004004  5DB2               	subwf	main@i& (0+255),w,b
  1888  004006  0E00               	movlw	0
  1889  004008  59B3               	subwfb	(main@i+1)& (0+255),w,b
  1890  00400A  0E00               	movlw	0
  1891  00400C  59B4               	subwfb	(main@i+2)& (0+255),w,b
  1892  00400E  0E00               	movlw	0
  1893  004010  59B5               	subwfb	(main@i+3)& (0+255),w,b
  1894  004012  E3EA               	bnc	l13475
  1895  004014                     l13481:
  1896                           
  1897                           ; BSR set to: 0
  1898                           ;main.c: 435: }
  1899                           ;main.c: 436: }
  1900                           ;main.c: 438: if (seconds > 60) {
  1901  004014  0E3C               	movlw	60
  1902  004016  65B9               	cpfsgt	_seconds& (0+255),b
  1903  004018  D001               	goto	l13485
  1904                           
  1905                           ; BSR set to: 0
  1906                           ;main.c: 439: seconds = 0;
  1907  00401A  6BB9               	clrf	_seconds& (0+255),b
  1908  00401C                     l13485:
  1909                           
  1910                           ; BSR set to: 0
  1911                           ;main.c: 440: }
  1912                           ;main.c: 444: if (0x03 == vscp_node_state) {
  1913  00401C  51BC               	movf	_vscp_node_state& (0+255),w,b
  1914  00401E  0A03               	xorlw	3
  1915  004020  B4D8               	btfsc	status,2,c
  1916                           
  1917                           ; BSR set to: 0
  1918                           ;main.c: 445: vscp_doOneSecondWork();
  1919  004022  EC61  F027         	call	_vscp_doOneSecondWork	;wreg free
  1920                           
  1921                           ; BSR set to: 0
  1922                           ;main.c: 446: }
  1923                           ;main.c: 449: doWork();
  1924  004026  EC23  F018         	call	_doWork	;wreg free
  1925  00402A  D77E               	goto	l172
  1926  00402C                     __end_of_main:
  1927                           	opt stack 0
  1928                           tblptru	equ	0xFF8
  1929                           tblptrh	equ	0xFF7
  1930                           tblptrl	equ	0xFF6
  1931                           tablat	equ	0xFF5
  1932                           prodh	equ	0xFF4
  1933                           prodl	equ	0xFF3
  1934                           intcon	equ	0xFF2
  1935                           postinc0	equ	0xFEE
  1936                           wreg	equ	0xFE8
  1937                           indf1	equ	0xFE7
  1938                           postdec1	equ	0xFE5
  1939                           fsr1h	equ	0xFE2
  1940                           fsr1l	equ	0xFE1
  1941                           indf2	equ	0xFDF
  1942                           postinc2	equ	0xFDE
  1943                           postdec2	equ	0xFDD
  1944                           plusw2	equ	0xFDB
  1945                           fsr2h	equ	0xFDA
  1946                           fsr2l	equ	0xFD9
  1947                           status	equ	0xFD8
  1948                           
  1949 ;; *************** function _doWork *****************
  1950 ;; Defined at:
  1951 ;;		line 464 in file "../main.c"
  1952 ;; Parameters:    Size  Location     Type
  1953 ;;		None
  1954 ;; Auto vars:     Size  Location     Type
  1955 ;;  temp            4   47[BANK1 ] unsigned long 
  1956 ;;  avarage         4   43[BANK1 ] unsigned long 
  1957 ;;  resistance      4   38[BANK1 ] unsigned long 
  1958 ;;  v               4   32[BANK1 ] unsigned long 
  1959 ;;  calVoltage      4    4[BANK1 ] unsigned long 
  1960 ;;  Rinf            4    0[BANK1 ] unsigned long 
  1961 ;;  B               2   36[BANK1 ] unsigned short 
  1962 ;;  i               1   51[BANK1 ] unsigned char 
  1963 ;;  j               1   42[BANK1 ] unsigned char 
  1964 ;; Return value:  Size  Location     Type
  1965 ;;		None               void
  1966 ;; Registers used:
  1967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1968 ;; Tracked objects:
  1969 ;;		On entry : F/0
  1970 ;;		On exit  : F/1
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1973 ;;      Params:         0       0       0       0       0       0       0
  1974 ;;      Locals:         0       0      52       0       0       0       0
  1975 ;;      Temps:          0      14       0       0       0       0       0
  1976 ;;      Totals:         0      14      52       0       0       0       0
  1977 ;;Total ram usage:       66 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; Hardware stack levels required when called:    7
  1980 ;; This function calls:
  1981 ;;		_Read_b_eep
  1982 ;;		_exp
  1983 ;;		_log
  1984 ;;		_getCalibrationValue
  1985 ;;		___aldiv
  1986 ;;		___altofl
  1987 ;;		___asfladd
  1988 ;;		___fladd
  1989 ;;		___asfldiv
  1990 ;;		___fldiv
  1991 ;;		___flmul
  1992 ;;		___asflsub
  1993 ;;		___flsub
  1994 ;;		___fltol
  1995 ;;		___lwtofl
  1996 ;; This function is called by:
  1997 ;;		_main
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001                           	psect	text1
  2002  003046                     __ptext1:
  2003                           	opt stack 0
  2004  003046                     _doWork:
  2005                           	opt stack 23
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;main.c: 465: uint8_t i, j;
  2009                           ;main.c: 466: uint16_t B;
  2010                           ;main.c: 467: double avarage;
  2011                           ;main.c: 468: double resistance;
  2012                           ;main.c: 469: double Rinf;
  2013                           ;main.c: 470: double temp;
  2014                           ;main.c: 471: double v;
  2015                           ;main.c: 472: double calVoltage;
  2016                           ;main.c: 474: calVoltage = ((uint16_t) Read_b_eep(0xF2)*256 +
  2017                           ;main.c: 475: Read_b_eep(0xF3));
  2018                           
  2019                           ; BSR set to: 1
  2020                           ;incstack = 0
  2021                           ;incstack = 0
  2022  003046  6A17               	clrf	?_Read_b_eep+1,c
  2023  003048  0EF3               	movlw	243
  2024  00304A  6E16               	movwf	?_Read_b_eep,c
  2025  00304C  EC8F  F02B         	call	_Read_b_eep	;wreg free
  2026  003050  0100               	movlb	0	; () banked
  2027  003052  6FA4               	movwf	??_doWork& (0+255),b
  2028  003054  6A17               	clrf	?_Read_b_eep+1,c
  2029  003056  0EF2               	movlw	242
  2030  003058  6E16               	movwf	?_Read_b_eep,c
  2031  00305A  EC8F  F02B         	call	_Read_b_eep	;wreg free
  2032  00305E  6E19               	movwf	?___lwtofl+1,c
  2033  003060  0100               	movlb	0	; () banked
  2034  003062  51A4               	movf	??_doWork& (0+255),w,b
  2035  003064  6E18               	movwf	?___lwtofl,c
  2036  003066  EC1B  F02A         	call	___lwtofl	;wreg free
  2037  00306A  C01B  F171         	movff	?___lwtofl+3,doWork@calVoltage+3
  2038  00306E  C01A  F170         	movff	?___lwtofl+2,doWork@calVoltage+2
  2039  003072  C019  F16F         	movff	?___lwtofl+1,doWork@calVoltage+1
  2040  003076  C018  F16E         	movff	?___lwtofl,doWork@calVoltage
  2041                           
  2042                           ;main.c: 480: for (i = 0; i < 6; i++) {
  2043  00307A  0101               	movlb	1	; () banked
  2044  00307C  6B9D               	clrf	doWork@i& (0+255),b
  2045  00307E                     l13497:
  2046                           
  2047                           ; BSR set to: 1
  2048                           ;main.c: 482: if (adc_conversion_flags & 1 << i) {
  2049  00307E  C19D  F0A4         	movff	doWork@i,??_doWork
  2050  003082  0E01               	movlw	1
  2051  003084  0100               	movlb	0	; () banked
  2052  003086  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2053  003088  2BA4               	incf	??_doWork& (0+255),f,b
  2054  00308A  D002               	goto	u10454
  2055  00308C                     u10455:
  2056  00308C  90D8               	bcf	status,0,c
  2057  00308E  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2058  003090                     u10454:
  2059  003090  2FA4               	decfsz	??_doWork& (0+255),f,b
  2060  003092  D7FC               	goto	u10455
  2061  003094  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2062  003096  15B6               	andwf	_adc_conversion_flags& (0+255),w,b
  2063  003098  E101 D1E3          	bz	l13551
  2064                           
  2065                           ; BSR set to: 0
  2066                           ;main.c: 485: avarage = 0;
  2067  00309C  0101               	movlb	1	; () banked
  2068  00309E  6B95               	clrf	doWork@avarage& (0+255),b
  2069  0030A0  6B96               	clrf	(doWork@avarage+1)& (0+255),b
  2070  0030A2  6B97               	clrf	(doWork@avarage+2)& (0+255),b
  2071  0030A4  6B98               	clrf	(doWork@avarage+3)& (0+255),b
  2072                           
  2073                           ;main.c: 486: for (j = 0; j < 80; j++) {
  2074  0030A6  6B94               	clrf	doWork@j& (0+255),b
  2075  0030A8                     l13505:
  2076                           
  2077                           ; BSR set to: 1
  2078                           ;main.c: 487: avarage += ((uint16_t)adc[12 * j + 2 * i])*256 + adc[12 * j + 2 * i + 1];
  2079  0030A8  0E01               	movlw	high doWork@avarage
  2080  0030AA  6E2D               	movwf	?___asfladd+1,c
  2081  0030AC  0E95               	movlw	low doWork@avarage
  2082  0030AE  6E2C               	movwf	?___asfladd,c
  2083  0030B0  90D8               	bcf	status,0,c
  2084  0030B2  359D               	rlcf	doWork@i& (0+255),w,b
  2085  0030B4  0100               	movlb	0	; () banked
  2086  0030B6  6FA4               	movwf	??_doWork& (0+255),b
  2087  0030B8  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2088  0030BA  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2089  0030BC  0101               	movlb	1	; () banked
  2090  0030BE  5194               	movf	doWork@j& (0+255),w,b
  2091  0030C0  0D0C               	mullw	12
  2092  0030C2  0E9F               	movlw	low (_adc+1)
  2093  0030C4  24F3               	addwf	prodl,w,c
  2094  0030C6  0100               	movlb	0	; () banked
  2095  0030C8  6FA6               	movwf	(??_doWork+2)& (0+255),b
  2096  0030CA  0E01               	movlw	high (_adc+1)
  2097  0030CC  20F4               	addwfc	prodh,w,c
  2098  0030CE  6FA7               	movwf	(??_doWork+3)& (0+255),b
  2099  0030D0  51A4               	movf	??_doWork& (0+255),w,b
  2100  0030D2  25A6               	addwf	(??_doWork+2)& (0+255),w,b
  2101  0030D4  6ED9               	movwf	fsr2l,c
  2102  0030D6  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2103  0030D8  21A7               	addwfc	(??_doWork+3)& (0+255),w,b
  2104  0030DA  6EDA               	movwf	fsr2h,c
  2105  0030DC  50DF               	movf	indf2,w,c
  2106  0030DE  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2107  0030E0  90D8               	bcf	status,0,c
  2108  0030E2  0101               	movlb	1	; () banked
  2109  0030E4  359D               	rlcf	doWork@i& (0+255),w,b
  2110  0030E6  0100               	movlb	0	; () banked
  2111  0030E8  6FA9               	movwf	(??_doWork+5)& (0+255),b
  2112  0030EA  6BAA               	clrf	(??_doWork+6)& (0+255),b
  2113  0030EC  37AA               	rlcf	(??_doWork+6)& (0+255),f,b
  2114  0030EE  0101               	movlb	1	; () banked
  2115  0030F0  5194               	movf	doWork@j& (0+255),w,b
  2116  0030F2  0D0C               	mullw	12
  2117  0030F4  0E9E               	movlw	low _adc
  2118  0030F6  24F3               	addwf	prodl,w,c
  2119  0030F8  0100               	movlb	0	; () banked
  2120  0030FA  6FAB               	movwf	(??_doWork+7)& (0+255),b
  2121  0030FC  0E01               	movlw	high _adc
  2122  0030FE  20F4               	addwfc	prodh,w,c
  2123  003100  6FAC               	movwf	(??_doWork+8)& (0+255),b
  2124  003102  51A9               	movf	(??_doWork+5)& (0+255),w,b
  2125  003104  25AB               	addwf	(??_doWork+7)& (0+255),w,b
  2126  003106  6ED9               	movwf	fsr2l,c
  2127  003108  51AA               	movf	(??_doWork+6)& (0+255),w,b
  2128  00310A  21AC               	addwfc	(??_doWork+8)& (0+255),w,b
  2129  00310C  6EDA               	movwf	fsr2h,c
  2130  00310E  50DF               	movf	indf2,w,c
  2131  003110  6E19               	movwf	?___lwtofl+1,c
  2132  003112  51A8               	movf	(??_doWork+4)& (0+255),w,b
  2133  003114  6E18               	movwf	?___lwtofl,c
  2134  003116  EC1B  F02A         	call	___lwtofl	;wreg free
  2135  00311A  C01B  F031         	movff	?___lwtofl+3,?___asfladd+5
  2136  00311E  C01A  F030         	movff	?___lwtofl+2,?___asfladd+4
  2137  003122  C019  F02F         	movff	?___lwtofl+1,?___asfladd+3
  2138  003126  C018  F02E         	movff	?___lwtofl,?___asfladd+2
  2139  00312A  EC23  F028         	call	___asfladd	;wreg free
  2140  00312E  0101               	movlb	1	; () banked
  2141  003130  2B94               	incf	doWork@j& (0+255),f,b
  2142                           
  2143                           ; BSR set to: 1
  2144  003132  0E4F               	movlw	79
  2145  003134  6594               	cpfsgt	doWork@j& (0+255),b
  2146  003136  D7B8               	goto	l13505
  2147                           
  2148                           ; BSR set to: 1
  2149                           ;main.c: 491: if (1) {
  2150  003138  0E01               	movlw	high doWork@avarage
  2151  00313A  0100               	movlb	0	; () banked
  2152  00313C  6F61               	movwf	(?___asfldiv+1)& (0+255),b
  2153  00313E  0E95               	movlw	low doWork@avarage
  2154  003140  6F60               	movwf	?___asfldiv& (0+255),b
  2155  003142  6B62               	clrf	(?___asfldiv+2)& (0+255),b
  2156  003144  6B63               	clrf	(?___asfldiv+3)& (0+255),b
  2157  003146  0EA0               	movlw	160
  2158  003148  6F64               	movwf	(?___asfldiv+4)& (0+255),b
  2159  00314A  0E42               	movlw	66
  2160  00314C  6F65               	movwf	(?___asfldiv+5)& (0+255),b
  2161  00314E  ECFE  F027         	call	___asfldiv	;wreg free
  2162                           
  2163                           ;main.c: 499: B = (uint16_t)Read_b_eep(2 * i + 0x4F)*256 +
  2164                           ;main.c: 500: Read_b_eep(2 * i + 0x50);
  2165  003152  0101               	movlb	1	; () banked
  2166  003154  519D               	movf	doWork@i& (0+255),w,b
  2167  003156  0D02               	mullw	2
  2168  003158  0E50               	movlw	80
  2169  00315A  24F3               	addwf	prodl,w,c
  2170  00315C  6E16               	movwf	?_Read_b_eep,c
  2171  00315E  0E00               	movlw	0
  2172  003160  20F4               	addwfc	prodh,w,c
  2173  003162  6E17               	movwf	?_Read_b_eep+1,c
  2174  003164  EC8F  F02B         	call	_Read_b_eep	;wreg free
  2175  003168  0100               	movlb	0	; () banked
  2176  00316A  6FA4               	movwf	??_doWork& (0+255),b
  2177  00316C  0101               	movlb	1	; () banked
  2178  00316E  519D               	movf	doWork@i& (0+255),w,b
  2179  003170  0D02               	mullw	2
  2180  003172  0E4F               	movlw	79
  2181  003174  24F3               	addwf	prodl,w,c
  2182  003176  6E16               	movwf	?_Read_b_eep,c
  2183  003178  0E00               	movlw	0
  2184  00317A  20F4               	addwfc	prodh,w,c
  2185  00317C  6E17               	movwf	?_Read_b_eep+1,c
  2186  00317E  EC8F  F02B         	call	_Read_b_eep	;wreg free
  2187  003182  0101               	movlb	1	; () banked
  2188  003184  6F8F               	movwf	(doWork@B+1)& (0+255),b
  2189  003186  0100               	movlb	0	; () banked
  2190  003188  51A4               	movf	??_doWork& (0+255),w,b
  2191  00318A  0101               	movlb	1	; () banked
  2192  00318C  6F8E               	movwf	doWork@B& (0+255),b
  2193                           
  2194                           ; BSR set to: 1
  2195                           ;main.c: 503: Rinf = 10000.0 * exp(B / -298.15);
  2196  00318E  0E33               	movlw	51
  2197  003190  6E30               	movwf	?___fldiv+4,c
  2198  003192  0E13               	movlw	19
  2199  003194  6E31               	movwf	?___fldiv+5,c
  2200  003196  0E95               	movlw	149
  2201  003198  6E32               	movwf	?___fldiv+6,c
  2202  00319A  0EC3               	movlw	195
  2203  00319C  6E33               	movwf	?___fldiv+7,c
  2204  00319E  C18E  F018         	movff	doWork@B,?___lwtofl
  2205  0031A2  C18F  F019         	movff	doWork@B+1,?___lwtofl+1
  2206  0031A6  EC1B  F02A         	call	___lwtofl	;wreg free
  2207  0031AA  C01B  F02F         	movff	?___lwtofl+3,?___fldiv+3
  2208  0031AE  C01A  F02E         	movff	?___lwtofl+2,?___fldiv+2
  2209  0031B2  C019  F02D         	movff	?___lwtofl+1,?___fldiv+1
  2210  0031B6  C018  F02C         	movff	?___lwtofl,?___fldiv
  2211  0031BA  EC33  F024         	call	___fldiv	;wreg free
  2212  0031BE  C02F  F175         	movff	?___fldiv+3,_doWork$2281+3
  2213  0031C2  C02E  F174         	movff	?___fldiv+2,_doWork$2281+2
  2214  0031C6  C02D  F173         	movff	?___fldiv+1,_doWork$2281+1
  2215  0031CA  C02C  F172         	movff	?___fldiv,_doWork$2281
  2216                           
  2217                           ;main.c: 503: Rinf = 10000.0 * exp(B / -298.15);
  2218  0031CE  C172  F099         	movff	_doWork$2281,?_exp
  2219  0031D2  C173  F09A         	movff	_doWork$2281+1,?_exp+1
  2220  0031D6  C174  F09B         	movff	_doWork$2281+2,?_exp+2
  2221  0031DA  C175  F09C         	movff	_doWork$2281+3,?_exp+3
  2222  0031DE  EC44  F01B         	call	_exp	;wreg free
  2223  0031E2  C09C  F179         	movff	?_exp+3,_doWork$2282+3
  2224  0031E6  C09B  F178         	movff	?_exp+2,_doWork$2282+2
  2225  0031EA  C09A  F177         	movff	?_exp+1,_doWork$2282+1
  2226  0031EE  C099  F176         	movff	?_exp,_doWork$2282
  2227                           
  2228                           ;main.c: 503: Rinf = 10000.0 * exp(B / -298.15);
  2229  0031F2  C176  F060         	movff	_doWork$2282,?___flmul
  2230  0031F6  C177  F061         	movff	_doWork$2282+1,?___flmul+1
  2231  0031FA  C178  F062         	movff	_doWork$2282+2,?___flmul+2
  2232  0031FE  C179  F063         	movff	_doWork$2282+3,?___flmul+3
  2233  003202  D935               	call	PL56	;call to abstracted procedure
  2234  003204  ECA8  F021         	call	___flmul	;wreg free
  2235  003208  C063  F16D         	movff	?___flmul+3,doWork@Rinf+3
  2236  00320C  C062  F16C         	movff	?___flmul+2,doWork@Rinf+2
  2237  003210  C061  F16B         	movff	?___flmul+1,doWork@Rinf+1
  2238  003214  C060  F16A         	movff	?___flmul,doWork@Rinf
  2239                           
  2240                           ;main.c: 505: v = 5.0 * (double) avarage / 1025;
  2241  003218  0100               	movlb	0	; () banked
  2242  00321A  6B64               	clrf	(?___flmul+4)& (0+255),b
  2243  00321C  6B65               	clrf	(?___flmul+5)& (0+255),b
  2244  00321E  0EA0               	movlw	160
  2245  003220  6F66               	movwf	(?___flmul+6)& (0+255),b
  2246  003222  0E40               	movlw	64
  2247  003224  6F67               	movwf	(?___flmul+7)& (0+255),b
  2248  003226  C195  F060         	movff	doWork@avarage,?___flmul
  2249  00322A  C196  F061         	movff	doWork@avarage+1,?___flmul+1
  2250  00322E  C197  F062         	movff	doWork@avarage+2,?___flmul+2
  2251  003232  C198  F063         	movff	doWork@avarage+3,?___flmul+3
  2252  003236  ECA8  F021         	call	___flmul	;wreg free
  2253  00323A  C063  F02F         	movff	?___flmul+3,?___fldiv+3
  2254  00323E  C062  F02E         	movff	?___flmul+2,?___fldiv+2
  2255  003242  C061  F02D         	movff	?___flmul+1,?___fldiv+1
  2256  003246  C060  F02C         	movff	?___flmul,?___fldiv
  2257  00324A  6A30               	clrf	?___fldiv+4,c
  2258  00324C  0E20               	movlw	32
  2259  00324E  6E31               	movwf	?___fldiv+5,c
  2260  003250  0E80               	movlw	128
  2261  003252  6E32               	movwf	?___fldiv+6,c
  2262  003254  0E44               	movlw	68
  2263  003256  6E33               	movwf	?___fldiv+7,c
  2264  003258  EC33  F024         	call	___fldiv	;wreg free
  2265  00325C  C02F  F18D         	movff	?___fldiv+3,doWork@v+3
  2266  003260  C02E  F18C         	movff	?___fldiv+2,doWork@v+2
  2267  003264  C02D  F18B         	movff	?___fldiv+1,doWork@v+1
  2268  003268  C02C  F18A         	movff	?___fldiv,doWork@v
  2269                           
  2270                           ;main.c: 507: resistance = (calVoltage - 10000.0 * v) / v;
  2271  00326C  D900               	call	PL56	;call to abstracted procedure
  2272  00326E  C18A  F060         	movff	doWork@v,?___flmul
  2273  003272  C18B  F061         	movff	doWork@v+1,?___flmul+1
  2274  003276  C18C  F062         	movff	doWork@v+2,?___flmul+2
  2275  00327A  C18D  F063         	movff	doWork@v+3,?___flmul+3
  2276  00327E  ECA8  F021         	call	___flmul	;wreg free
  2277  003282  C063  F07D         	movff	?___flmul+3,?___flsub+7
  2278  003286  C062  F07C         	movff	?___flmul+2,?___flsub+6
  2279  00328A  C061  F07B         	movff	?___flmul+1,?___flsub+5
  2280  00328E  C060  F07A         	movff	?___flmul,?___flsub+4
  2281  003292  C16E  F076         	movff	doWork@calVoltage,?___flsub
  2282  003296  C16F  F077         	movff	doWork@calVoltage+1,?___flsub+1
  2283  00329A  C170  F078         	movff	doWork@calVoltage+2,?___flsub+2
  2284  00329E  C171  F079         	movff	doWork@calVoltage+3,?___flsub+3
  2285  0032A2  EC13  F029         	call	___flsub	;wreg free
  2286  0032A6  C079  F02F         	movff	?___flsub+3,?___fldiv+3
  2287  0032AA  C078  F02E         	movff	?___flsub+2,?___fldiv+2
  2288  0032AE  C077  F02D         	movff	?___flsub+1,?___fldiv+1
  2289  0032B2  C076  F02C         	movff	?___flsub,?___fldiv
  2290  0032B6  C18A  F030         	movff	doWork@v,?___fldiv+4
  2291  0032BA  C18B  F031         	movff	doWork@v+1,?___fldiv+5
  2292  0032BE  C18C  F032         	movff	doWork@v+2,?___fldiv+6
  2293  0032C2  C18D  F033         	movff	doWork@v+3,?___fldiv+7
  2294  0032C6  EC33  F024         	call	___fldiv	;wreg free
  2295  0032CA  C02F  F193         	movff	?___fldiv+3,doWork@resistance+3
  2296  0032CE  C02E  F192         	movff	?___fldiv+2,doWork@resistance+2
  2297  0032D2  C02D  F191         	movff	?___fldiv+1,doWork@resistance+1
  2298  0032D6  C02C  F190         	movff	?___fldiv,doWork@resistance
  2299                           
  2300                           ;main.c: 509: temp = ((double) B) / log(resistance / Rinf);
  2301  0032DA  C16A  F030         	movff	doWork@Rinf,?___fldiv+4
  2302  0032DE  C16B  F031         	movff	doWork@Rinf+1,?___fldiv+5
  2303  0032E2  C16C  F032         	movff	doWork@Rinf+2,?___fldiv+6
  2304  0032E6  C16D  F033         	movff	doWork@Rinf+3,?___fldiv+7
  2305  0032EA  C190  F02C         	movff	doWork@resistance,?___fldiv
  2306  0032EE  C191  F02D         	movff	doWork@resistance+1,?___fldiv+1
  2307  0032F2  C192  F02E         	movff	doWork@resistance+2,?___fldiv+2
  2308  0032F6  C193  F02F         	movff	doWork@resistance+3,?___fldiv+3
  2309  0032FA  EC33  F024         	call	___fldiv	;wreg free
  2310  0032FE  C02F  F084         	movff	?___fldiv+3,?_log+3
  2311  003302  C02E  F083         	movff	?___fldiv+2,?_log+2
  2312  003306  C02D  F082         	movff	?___fldiv+1,?_log+1
  2313  00330A  C02C  F081         	movff	?___fldiv,?_log
  2314  00330E  EC64  F01E         	call	_log	;wreg free
  2315  003312  C084  F17D         	movff	?_log+3,_doWork$2283+3
  2316  003316  C083  F17C         	movff	?_log+2,_doWork$2283+2
  2317  00331A  C082  F17B         	movff	?_log+1,_doWork$2283+1
  2318  00331E  C081  F17A         	movff	?_log,_doWork$2283
  2319                           
  2320                           ;main.c: 509: temp = ((double) B) / log(resistance / Rinf);
  2321  003322  C18E  F018         	movff	doWork@B,?___lwtofl
  2322  003326  C18F  F019         	movff	doWork@B+1,?___lwtofl+1
  2323  00332A  EC1B  F02A         	call	___lwtofl	;wreg free
  2324  00332E  C01B  F02F         	movff	?___lwtofl+3,?___fldiv+3
  2325  003332  C01A  F02E         	movff	?___lwtofl+2,?___fldiv+2
  2326  003336  C019  F02D         	movff	?___lwtofl+1,?___fldiv+1
  2327  00333A  C018  F02C         	movff	?___lwtofl,?___fldiv
  2328  00333E  C17A  F030         	movff	_doWork$2283,?___fldiv+4
  2329  003342  C17B  F031         	movff	_doWork$2283+1,?___fldiv+5
  2330  003346  C17C  F032         	movff	_doWork$2283+2,?___fldiv+6
  2331  00334A  C17D  F033         	movff	_doWork$2283+3,?___fldiv+7
  2332  00334E  EC33  F024         	call	___fldiv	;wreg free
  2333  003352  C02F  F19C         	movff	?___fldiv+3,doWork@temp+3
  2334  003356  C02E  F19B         	movff	?___fldiv+2,doWork@temp+2
  2335  00335A  C02D  F19A         	movff	?___fldiv+1,doWork@temp+1
  2336  00335E  C02C  F199         	movff	?___fldiv,doWork@temp
  2337                           
  2338                           ;main.c: 511: temp -= 273.15;
  2339  003362  0E01               	movlw	high doWork@temp
  2340  003364  0100               	movlb	0	; () banked
  2341  003366  6F7F               	movwf	(?___asflsub+1)& (0+255),b
  2342  003368  0E99               	movlw	low doWork@temp
  2343  00336A  6F7E               	movwf	?___asflsub& (0+255),b
  2344  00336C  0E33               	movlw	51
  2345  00336E  6F80               	movwf	(?___asflsub+2)& (0+255),b
  2346  003370  0E93               	movlw	147
  2347  003372  6F81               	movwf	(?___asflsub+3)& (0+255),b
  2348  003374  0E88               	movlw	136
  2349  003376  6F82               	movwf	(?___asflsub+4)& (0+255),b
  2350  003378  0E43               	movlw	67
  2351  00337A  6F83               	movwf	(?___asflsub+5)& (0+255),b
  2352  00337C  EC8B  F027         	call	___asflsub	;wreg free
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;main.c: 526: current_temp[ i ] = (current_temp[ i ] + ((long) (temp * 100) + getCalibra
      +                          tionValue(i))) / 2;
  2356  003380  0101               	movlb	1	; () banked
  2357  003382  519D               	movf	doWork@i& (0+255),w,b
  2358  003384  0D02               	mullw	2
  2359  003386  EC78  F017         	call	PL2	;call to abstracted procedure
  2360  00338A  CFDE F0A4          	movff	postinc2,??_doWork
  2361  00338E  CFDD F0A5          	movff	postdec2,??_doWork+1
  2362  003392  C0A4  F0A6         	movff	??_doWork,??_doWork+2
  2363  003396  C0A5  F0A7         	movff	??_doWork+1,??_doWork+3
  2364  00339A  0E00               	movlw	0
  2365  00339C  0100               	movlb	0	; () banked
  2366  00339E  BFA7               	btfsc	(??_doWork+3)& (0+255),7,b
  2367  0033A0  0EFF               	movlw	255
  2368  0033A2  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2369  0033A4  6FA9               	movwf	(??_doWork+5)& (0+255),b
  2370  0033A6  0101               	movlb	1	; () banked
  2371  0033A8  519D               	movf	doWork@i& (0+255),w,b
  2372  0033AA  ECD5  F028         	call	_getCalibrationValue
  2373  0033AE  C018  F0AA         	movff	?_getCalibrationValue,??_doWork+6
  2374  0033B2  C019  F0AB         	movff	?_getCalibrationValue+1,??_doWork+7
  2375  0033B6  0E00               	movlw	0
  2376  0033B8  0100               	movlb	0	; () banked
  2377  0033BA  BFAB               	btfsc	(??_doWork+7)& (0+255),7,b
  2378  0033BC  0EFF               	movlw	255
  2379  0033BE  6FAC               	movwf	(??_doWork+8)& (0+255),b
  2380  0033C0  6FAD               	movwf	(??_doWork+9)& (0+255),b
  2381  0033C2  6B64               	clrf	(?___flmul+4)& (0+255),b
  2382  0033C4  6B65               	clrf	(?___flmul+5)& (0+255),b
  2383  0033C6  0EC8               	movlw	200
  2384  0033C8  6F66               	movwf	(?___flmul+6)& (0+255),b
  2385  0033CA  0E42               	movlw	66
  2386  0033CC  6F67               	movwf	(?___flmul+7)& (0+255),b
  2387  0033CE  C199  F060         	movff	doWork@temp,?___flmul
  2388  0033D2  C19A  F061         	movff	doWork@temp+1,?___flmul+1
  2389  0033D6  C19B  F062         	movff	doWork@temp+2,?___flmul+2
  2390  0033DA  C19C  F063         	movff	doWork@temp+3,?___flmul+3
  2391  0033DE  ECA8  F021         	call	___flmul	;wreg free
  2392  0033E2  C063  F079         	movff	?___flmul+3,?___fltol+3
  2393  0033E6  C062  F078         	movff	?___flmul+2,?___fltol+2
  2394  0033EA  C061  F077         	movff	?___flmul+1,?___fltol+1
  2395  0033EE  C060  F076         	movff	?___flmul,?___fltol
  2396  0033F2  EC29  F025         	call	___fltol	;wreg free
  2397  0033F6  51AA               	movf	(??_doWork+6)& (0+255),w,b
  2398  0033F8  2576               	addwf	?___fltol& (0+255),w,b
  2399  0033FA  6FAE               	movwf	(??_doWork+10)& (0+255),b
  2400  0033FC  51AB               	movf	(??_doWork+7)& (0+255),w,b
  2401  0033FE  2177               	addwfc	(?___fltol+1)& (0+255),w,b
  2402  003400  6FAF               	movwf	(??_doWork+11)& (0+255),b
  2403  003402  51AC               	movf	(??_doWork+8)& (0+255),w,b
  2404  003404  2178               	addwfc	(?___fltol+2)& (0+255),w,b
  2405  003406  6FB0               	movwf	(??_doWork+12)& (0+255),b
  2406  003408  51AD               	movf	(??_doWork+9)& (0+255),w,b
  2407  00340A  2179               	addwfc	(?___fltol+3)& (0+255),w,b
  2408  00340C  6FB1               	movwf	(??_doWork+13)& (0+255),b
  2409  00340E  51A6               	movf	(??_doWork+2)& (0+255),w,b
  2410  003410  25AE               	addwf	(??_doWork+10)& (0+255),w,b
  2411  003412  6F7C               	movwf	?___aldiv& (0+255),b
  2412  003414  51A7               	movf	(??_doWork+3)& (0+255),w,b
  2413  003416  21AF               	addwfc	(??_doWork+11)& (0+255),w,b
  2414  003418  6F7D               	movwf	(?___aldiv+1)& (0+255),b
  2415  00341A  51A8               	movf	(??_doWork+4)& (0+255),w,b
  2416  00341C  21B0               	addwfc	(??_doWork+12)& (0+255),w,b
  2417  00341E  6F7E               	movwf	(?___aldiv+2)& (0+255),b
  2418  003420  51A9               	movf	(??_doWork+5)& (0+255),w,b
  2419  003422  21B1               	addwfc	(??_doWork+13)& (0+255),w,b
  2420  003424  6F7F               	movwf	(?___aldiv+3)& (0+255),b
  2421  003426  0E02               	movlw	2
  2422  003428  6F80               	movwf	(?___aldiv+4)& (0+255),b
  2423  00342A  0E00               	movlw	0
  2424  00342C  6B81               	clrf	(?___aldiv+5)& (0+255),b
  2425  00342E  6B82               	clrf	(?___aldiv+6)& (0+255),b
  2426  003430  6B83               	clrf	(?___aldiv+7)& (0+255),b
  2427  003432  EC6A  F022         	call	___aldiv	;wreg free
  2428  003436  0101               	movlb	1	; () banked
  2429  003438  519D               	movf	doWork@i& (0+255),w,b
  2430  00343A  0D02               	mullw	2
  2431  00343C  EC78  F017         	call	PL2	;call to abstracted procedure
  2432  003440  0100               	movlb	0	; () banked
  2433  003442  C07C  FFDE         	movff	?___aldiv,postinc2
  2434  003446  C07D  FFDD         	movff	?___aldiv+1,postdec2
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;main.c: 547: }
  2438                           ;main.c: 550: adc_conversion_flags &= ~(1 << i);
  2439                           
  2440                           ;main.c: 528: }
  2441  00344A  C19D  F0A4         	movff	doWork@i,??_doWork
  2442  00344E  0E01               	movlw	1
  2443  003450  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2444  003452  2BA4               	incf	??_doWork& (0+255),f,b
  2445  003454  D002               	goto	u10484
  2446  003456                     u10485:
  2447  003456  90D8               	bcf	status,0,c
  2448  003458  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2449  00345A                     u10484:
  2450  00345A  2FA4               	decfsz	??_doWork& (0+255),f,b
  2451  00345C  D7FC               	goto	u10485
  2452  00345E  1DA5               	comf	(??_doWork+1)& (0+255),w,b
  2453  003460  17B6               	andwf	_adc_conversion_flags& (0+255),f,b
  2454  003462                     l13551:
  2455                           
  2456                           ; BSR set to: 0
  2457  003462  0101               	movlb	1	; () banked
  2458  003464  2B9D               	incf	doWork@i& (0+255),f,b
  2459                           
  2460                           ; BSR set to: 1
  2461  003466  0E05               	movlw	5
  2462  003468  659D               	cpfsgt	doWork@i& (0+255),b
  2463  00346A  D609               	goto	l13497
  2464                           
  2465                           ; BSR set to: 1
  2466  00346C  0C05               	retlw	5
  2467  00346E                     __end_of_doWork:
  2468                           	opt stack 0
  2469  00346E                     PL56:
  2470                           	opt stack 23
  2471  00346E  0100               	movlb	0	; () banked
  2472  003470  6B64               	clrf	(?___flmul+4)& (0+255),b
  2473  003472  0E40               	movlw	64
  2474  003474  6F65               	movwf	(?___flmul+5)& (0+255),b
  2475  003476  0E1C               	movlw	28
  2476  003478  6F66               	movwf	(?___flmul+6)& (0+255),b
  2477  00347A  0E46               	movlw	70
  2478  00347C  6F67               	movwf	(?___flmul+7)& (0+255),b
  2479  00347E  0C46               	retlw	70
  2480  003480                     __end_ofPL56:
  2481                           	opt stack 0
  2482                           tblptru	equ	0xFF8
  2483                           tblptrh	equ	0xFF7
  2484                           tblptrl	equ	0xFF6
  2485                           tablat	equ	0xFF5
  2486                           prodh	equ	0xFF4
  2487                           prodl	equ	0xFF3
  2488                           intcon	equ	0xFF2
  2489                           postinc0	equ	0xFEE
  2490                           wreg	equ	0xFE8
  2491                           indf1	equ	0xFE7
  2492                           postdec1	equ	0xFE5
  2493                           fsr1h	equ	0xFE2
  2494                           fsr1l	equ	0xFE1
  2495                           indf2	equ	0xFDF
  2496                           postinc2	equ	0xFDE
  2497                           postdec2	equ	0xFDD
  2498                           plusw2	equ	0xFDB
  2499                           fsr2h	equ	0xFDA
  2500                           fsr2l	equ	0xFD9
  2501                           status	equ	0xFD8
  2502                           
  2503 ;; *************** function ___lwtofl *****************
  2504 ;; Defined at:
  2505 ;;		line 29 in file "/opt/microchip/xc8/v1.21/sources/common/lwtofl.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;  c               2   23[COMRAM] unsigned int 
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;		None
  2510 ;; Return value:  Size  Location     Type
  2511 ;;                  4   23[COMRAM] unsigned int 
  2512 ;; Registers used:
  2513 ;;		wreg, status,2, status,0, cstack
  2514 ;; Tracked objects:
  2515 ;;		On entry : 0/0
  2516 ;;		On exit  : 0/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2519 ;;      Params:         4       0       0       0       0       0       0
  2520 ;;      Locals:         0       0       0       0       0       0       0
  2521 ;;      Temps:          0       0       0       0       0       0       0
  2522 ;;      Totals:         4       0       0       0       0       0       0
  2523 ;;Total ram usage:        4 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; Hardware stack levels required when called:    3
  2526 ;; This function calls:
  2527 ;;		___flpack
  2528 ;; This function is called by:
  2529 ;;		_doWork
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533                           	psect	text2
  2534  005436                     __ptext2:
  2535                           	opt stack 0
  2536  005436                     ___lwtofl:
  2537                           	opt stack 26
  2538                           
  2539                           ; BSR set to: 1
  2540                           ;incstack = 0
  2541                           ;incstack = 0
  2542  005436  C018  F00E         	movff	___lwtofl@c,?___flpack
  2543  00543A  C019  F00F         	movff	___lwtofl@c+1,?___flpack+1
  2544  00543E  6A10               	clrf	?___flpack+2,c
  2545  005440  6A11               	clrf	?___flpack+3,c
  2546  005442  0E96               	movlw	150
  2547  005444  6E12               	movwf	?___flpack+4,c
  2548  005446  0E00               	movlw	0
  2549  005448  6A13               	clrf	?___flpack+5,c
  2550  00544A  ECC8  F022         	call	___flpack	;wreg free
  2551  00544E  C011  F01B         	movff	?___flpack+3,?___lwtofl+3
  2552  005452  C010  F01A         	movff	?___flpack+2,?___lwtofl+2
  2553  005456  C00F  F019         	movff	?___flpack+1,?___lwtofl+1
  2554  00545A  C00E  F018         	movff	?___flpack,?___lwtofl
  2555  00545E  0012               	return	
  2556  005460                     __end_of___lwtofl:
  2557                           	opt stack 0
  2558                           tblptru	equ	0xFF8
  2559                           tblptrh	equ	0xFF7
  2560                           tblptrl	equ	0xFF6
  2561                           tablat	equ	0xFF5
  2562                           prodh	equ	0xFF4
  2563                           prodl	equ	0xFF3
  2564                           intcon	equ	0xFF2
  2565                           postinc0	equ	0xFEE
  2566                           wreg	equ	0xFE8
  2567                           indf1	equ	0xFE7
  2568                           postdec1	equ	0xFE5
  2569                           fsr1h	equ	0xFE2
  2570                           fsr1l	equ	0xFE1
  2571                           indf2	equ	0xFDF
  2572                           postinc2	equ	0xFDE
  2573                           postdec2	equ	0xFDD
  2574                           plusw2	equ	0xFDB
  2575                           fsr2h	equ	0xFDA
  2576                           fsr2l	equ	0xFD9
  2577                           status	equ	0xFD8
  2578                           
  2579 ;; *************** function ___asfldiv *****************
  2580 ;; Defined at:
  2581 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/pic18/asfldiv.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;  f1p             2    0[BANK0 ] PTR 
  2584 ;;		 -> doWork@avarage(4), 
  2585 ;;  f2              4    2[BANK0 ] PTR 
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;		None
  2588 ;; Return value:  Size  Location     Type
  2589 ;;                  4    0[BANK0 ] PTR 
  2590 ;; Registers used:
  2591 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2592 ;; Tracked objects:
  2593 ;;		On entry : F/0
  2594 ;;		On exit  : 0/0
  2595 ;;		Unchanged: 0/0
  2596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2597 ;;      Params:         0       6       0       0       0       0       0
  2598 ;;      Locals:         0       0       0       0       0       0       0
  2599 ;;      Temps:          0       0       0       0       0       0       0
  2600 ;;      Totals:         0       6       0       0       0       0       0
  2601 ;;Total ram usage:        6 bytes
  2602 ;; Hardware stack levels used:    1
  2603 ;; Hardware stack levels required when called:    4
  2604 ;; This function calls:
  2605 ;;		___fldiv
  2606 ;; This function is called by:
  2607 ;;		_doWork
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           	psect	text3
  2612  004FFC                     __ptext3:
  2613                           	opt stack 0
  2614  004FFC                     ___asfldiv:
  2615                           	opt stack 25
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;	Return value of ___asfldiv is never used
  2619                           
  2620                           ;incstack = 0
  2621                           ;incstack = 0
  2622  004FFC  C060  FFD9         	movff	___asfldiv@f1p,fsr2l
  2623  005000  C061  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  2624  005004  CFDE F02C          	movff	postinc2,?___fldiv
  2625  005008  CFDE F02D          	movff	postinc2,?___fldiv+1
  2626  00500C  CFDE F02E          	movff	postinc2,?___fldiv+2
  2627  005010  CFDE F02F          	movff	postinc2,?___fldiv+3
  2628  005014  C062  F030         	movff	___asfldiv@f2,?___fldiv+4
  2629  005018  C063  F031         	movff	___asfldiv@f2+1,?___fldiv+5
  2630  00501C  C064  F032         	movff	___asfldiv@f2+2,?___fldiv+6
  2631  005020  C065  F033         	movff	___asfldiv@f2+3,?___fldiv+7
  2632  005024  EC33  F024         	call	___fldiv	;wreg free
  2633  005028  C060  FFD9         	movff	___asfldiv@f1p,fsr2l
  2634  00502C  C061  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  2635  005030  C02C  FFDE         	movff	?___fldiv,postinc2
  2636  005034  C02D  FFDE         	movff	?___fldiv+1,postinc2
  2637  005038  C02E  FFDE         	movff	?___fldiv+2,postinc2
  2638  00503C  C02F  FFDD         	movff	?___fldiv+3,postdec2
  2639  005040  06D9               	decf	fsr2l,f,c
  2640  005042  06D9               	decf	fsr2l,f,c
  2641  005044  0012               	return	
  2642  005046                     __end_of___asfldiv:
  2643                           	opt stack 0
  2644                           tblptru	equ	0xFF8
  2645                           tblptrh	equ	0xFF7
  2646                           tblptrl	equ	0xFF6
  2647                           tablat	equ	0xFF5
  2648                           prodh	equ	0xFF4
  2649                           prodl	equ	0xFF3
  2650                           intcon	equ	0xFF2
  2651                           postinc0	equ	0xFEE
  2652                           wreg	equ	0xFE8
  2653                           indf1	equ	0xFE7
  2654                           postdec1	equ	0xFE5
  2655                           fsr1h	equ	0xFE2
  2656                           fsr1l	equ	0xFE1
  2657                           indf2	equ	0xFDF
  2658                           postinc2	equ	0xFDE
  2659                           postdec2	equ	0xFDD
  2660                           plusw2	equ	0xFDB
  2661                           fsr2h	equ	0xFDA
  2662                           fsr2l	equ	0xFD9
  2663                           status	equ	0xFD8
  2664                           
  2665 ;; *************** function ___asfladd *****************
  2666 ;; Defined at:
  2667 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/pic18/asfladd.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;  f1p             2   43[COMRAM] PTR 
  2670 ;;		 -> doWork@temp(4), doWork@avarage(4), 
  2671 ;;  f2              4   45[COMRAM] PTR 
  2672 ;; Auto vars:     Size  Location     Type
  2673 ;;		None
  2674 ;; Return value:  Size  Location     Type
  2675 ;;                  4   43[COMRAM] PTR 
  2676 ;; Registers used:
  2677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2678 ;; Tracked objects:
  2679 ;;		On entry : 0/0
  2680 ;;		On exit  : 0/0
  2681 ;;		Unchanged: 0/0
  2682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2683 ;;      Params:         6       0       0       0       0       0       0
  2684 ;;      Locals:         0       0       0       0       0       0       0
  2685 ;;      Temps:          0       0       0       0       0       0       0
  2686 ;;      Totals:         6       0       0       0       0       0       0
  2687 ;;Total ram usage:        6 bytes
  2688 ;; Hardware stack levels used:    1
  2689 ;; Hardware stack levels required when called:    4
  2690 ;; This function calls:
  2691 ;;		___fladd
  2692 ;; This function is called by:
  2693 ;;		_doWork
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697                           	psect	text4
  2698  005046                     __ptext4:
  2699                           	opt stack 0
  2700  005046                     ___asfladd:
  2701                           	opt stack 25
  2702                           
  2703                           ;	Return value of ___asfladd is never used
  2704                           
  2705                           ;incstack = 0
  2706                           ;incstack = 0
  2707  005046  C02C  FFD9         	movff	___asfladd@f1p,fsr2l
  2708  00504A  C02D  FFDA         	movff	___asfladd@f1p+1,fsr2h
  2709  00504E  CFDE F01D          	movff	postinc2,?___fladd
  2710  005052  CFDE F01E          	movff	postinc2,?___fladd+1
  2711  005056  CFDE F01F          	movff	postinc2,?___fladd+2
  2712  00505A  CFDE F020          	movff	postinc2,?___fladd+3
  2713  00505E  C02E  F021         	movff	___asfladd@f2,?___fladd+4
  2714  005062  C02F  F022         	movff	___asfladd@f2+1,?___fladd+5
  2715  005066  C030  F023         	movff	___asfladd@f2+2,?___fladd+6
  2716  00506A  C031  F024         	movff	___asfladd@f2+3,?___fladd+7
  2717  00506E  ECB9  F01D         	call	___fladd	;wreg free
  2718  005072  C02C  FFD9         	movff	___asfladd@f1p,fsr2l
  2719  005076  C02D  FFDA         	movff	___asfladd@f1p+1,fsr2h
  2720  00507A  C01D  FFDE         	movff	?___fladd,postinc2
  2721  00507E  C01E  FFDE         	movff	?___fladd+1,postinc2
  2722  005082  C01F  FFDE         	movff	?___fladd+2,postinc2
  2723  005086  C020  FFDD         	movff	?___fladd+3,postdec2
  2724  00508A  06D9               	decf	fsr2l,f,c
  2725  00508C  06D9               	decf	fsr2l,f,c
  2726  00508E  0012               	return	
  2727  005090                     __end_of___asfladd:
  2728                           	opt stack 0
  2729                           tblptru	equ	0xFF8
  2730                           tblptrh	equ	0xFF7
  2731                           tblptrl	equ	0xFF6
  2732                           tablat	equ	0xFF5
  2733                           prodh	equ	0xFF4
  2734                           prodl	equ	0xFF3
  2735                           intcon	equ	0xFF2
  2736                           postinc0	equ	0xFEE
  2737                           wreg	equ	0xFE8
  2738                           indf1	equ	0xFE7
  2739                           postdec1	equ	0xFE5
  2740                           fsr1h	equ	0xFE2
  2741                           fsr1l	equ	0xFE1
  2742                           indf2	equ	0xFDF
  2743                           postinc2	equ	0xFDE
  2744                           postdec2	equ	0xFDD
  2745                           plusw2	equ	0xFDB
  2746                           fsr2h	equ	0xFDA
  2747                           fsr2l	equ	0xFD9
  2748                           status	equ	0xFD8
  2749                           
  2750 ;; *************** function ___aldiv *****************
  2751 ;; Defined at:
  2752 ;;		line 10 in file "/opt/microchip/xc8/v1.21/sources/common/aldiv.c"
  2753 ;; Parameters:    Size  Location     Type
  2754 ;;  dividend        4   28[BANK0 ] long 
  2755 ;;  divisor         4   32[BANK0 ] long 
  2756 ;; Auto vars:     Size  Location     Type
  2757 ;;  quotient        4   38[BANK0 ] long 
  2758 ;;  sign            1   37[BANK0 ] unsigned char 
  2759 ;;  counter         1   36[BANK0 ] unsigned char 
  2760 ;; Return value:  Size  Location     Type
  2761 ;;                  4   28[BANK0 ] long 
  2762 ;; Registers used:
  2763 ;;		wreg, status,2, status,0
  2764 ;; Tracked objects:
  2765 ;;		On entry : F/0
  2766 ;;		On exit  : F/0
  2767 ;;		Unchanged: 0/0
  2768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2769 ;;      Params:         0       8       0       0       0       0       0
  2770 ;;      Locals:         0       6       0       0       0       0       0
  2771 ;;      Temps:          0       0       0       0       0       0       0
  2772 ;;      Totals:         0      14       0       0       0       0       0
  2773 ;;Total ram usage:       14 bytes
  2774 ;; Hardware stack levels used:    1
  2775 ;; Hardware stack levels required when called:    2
  2776 ;; This function calls:
  2777 ;;		Nothing
  2778 ;; This function is called by:
  2779 ;;		_doWork
  2780 ;; This function uses a non-reentrant model
  2781 ;;
  2782                           
  2783                           	psect	text5
  2784  0044D4                     __ptext5:
  2785                           	opt stack 0
  2786  0044D4                     ___aldiv:
  2787                           	opt stack 27
  2788                           
  2789                           ; BSR set to: 0
  2790                           
  2791                           ;incstack = 0
  2792                           ;incstack = 0
  2793  0044D4  6B85               	clrf	___aldiv@sign& (0+255),b
  2794  0044D6  AF83               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2795  0044D8  D00A               	goto	l12927
  2796                           
  2797                           ; BSR set to: 0
  2798  0044DA  1F83               	comf	(___aldiv@divisor+3)& (0+255),f,b
  2799  0044DC  1F82               	comf	(___aldiv@divisor+2)& (0+255),f,b
  2800  0044DE  1F81               	comf	(___aldiv@divisor+1)& (0+255),f,b
  2801  0044E0  6D80               	negf	___aldiv@divisor& (0+255),b
  2802  0044E2  0E00               	movlw	0
  2803  0044E4  2381               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  2804  0044E6  2382               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  2805  0044E8  2383               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  2806                           
  2807                           ; BSR set to: 0
  2808  0044EA  0E01               	movlw	1
  2809  0044EC  6F85               	movwf	___aldiv@sign& (0+255),b
  2810  0044EE                     l12927:
  2811                           
  2812                           ; BSR set to: 0
  2813  0044EE  AF7F               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  2814  0044F0  D00A               	goto	l12933
  2815                           
  2816                           ; BSR set to: 0
  2817  0044F2  1F7F               	comf	(___aldiv@dividend+3)& (0+255),f,b
  2818  0044F4  1F7E               	comf	(___aldiv@dividend+2)& (0+255),f,b
  2819  0044F6  1F7D               	comf	(___aldiv@dividend+1)& (0+255),f,b
  2820  0044F8  6D7C               	negf	___aldiv@dividend& (0+255),b
  2821  0044FA  0E00               	movlw	0
  2822  0044FC  237D               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  2823  0044FE  237E               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  2824  004500  237F               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  2825                           
  2826                           ; BSR set to: 0
  2827  004502  0E01               	movlw	1
  2828  004504  1B85               	xorwf	___aldiv@sign& (0+255),f,b
  2829  004506                     l12933:
  2830                           
  2831                           ; BSR set to: 0
  2832  004506  6B86               	clrf	___aldiv@quotient& (0+255),b
  2833  004508  6B87               	clrf	(___aldiv@quotient+1)& (0+255),b
  2834  00450A  6B88               	clrf	(___aldiv@quotient+2)& (0+255),b
  2835  00450C  6B89               	clrf	(___aldiv@quotient+3)& (0+255),b
  2836                           
  2837                           ; BSR set to: 0
  2838  00450E  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2839  004510  1180               	iorwf	___aldiv@divisor& (0+255),w,b
  2840  004512  1181               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  2841  004514  1182               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  2842  004516  E029               	bz	l12955
  2843                           
  2844                           ; BSR set to: 0
  2845  004518  0E01               	movlw	1
  2846  00451A  6F84               	movwf	___aldiv@counter& (0+255),b
  2847  00451C  D006               	goto	l12941
  2848  00451E                     l12939:
  2849                           
  2850                           ; BSR set to: 0
  2851  00451E  90D8               	bcf	status,0,c
  2852  004520  3780               	rlcf	___aldiv@divisor& (0+255),f,b
  2853  004522  3781               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  2854  004524  3782               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  2855  004526  3783               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  2856  004528  2B84               	incf	___aldiv@counter& (0+255),f,b
  2857  00452A                     l12941:
  2858                           
  2859                           ; BSR set to: 0
  2860  00452A  AF83               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2861  00452C  D7F8               	goto	l12939
  2862  00452E                     l12943:
  2863                           
  2864                           ; BSR set to: 0
  2865  00452E  90D8               	bcf	status,0,c
  2866  004530  3786               	rlcf	___aldiv@quotient& (0+255),f,b
  2867  004532  3787               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  2868  004534  3788               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  2869  004536  3789               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  2870                           
  2871                           ; BSR set to: 0
  2872  004538  5180               	movf	___aldiv@divisor& (0+255),w,b
  2873  00453A  5D7C               	subwf	___aldiv@dividend& (0+255),w,b
  2874  00453C  5181               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2875  00453E  597D               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  2876  004540  5182               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2877  004542  597E               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  2878  004544  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2879  004546  597F               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  2880  004548  E309               	bnc	l12951
  2881                           
  2882                           ; BSR set to: 0
  2883  00454A  5180               	movf	___aldiv@divisor& (0+255),w,b
  2884  00454C  5F7C               	subwf	___aldiv@dividend& (0+255),f,b
  2885  00454E  5181               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2886  004550  5B7D               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  2887  004552  5182               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2888  004554  5B7E               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  2889  004556  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2890  004558  5B7F               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  2891                           
  2892                           ; BSR set to: 0
  2893  00455A  8186               	bsf	___aldiv@quotient& (0+255),0,b
  2894  00455C                     l12951:
  2895                           
  2896                           ; BSR set to: 0
  2897  00455C  90D8               	bcf	status,0,c
  2898  00455E  3383               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  2899  004560  3382               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  2900  004562  3381               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  2901  004564  3380               	rrcf	___aldiv@divisor& (0+255),f,b
  2902                           
  2903                           ; BSR set to: 0
  2904  004566  2F84               	decfsz	___aldiv@counter& (0+255),f,b
  2905  004568  D7E2               	goto	l12943
  2906  00456A                     l12955:
  2907                           
  2908                           ; BSR set to: 0
  2909  00456A  5185               	movf	___aldiv@sign& (0+255),w,b
  2910  00456C  E008               	bz	l12959
  2911                           
  2912                           ; BSR set to: 0
  2913  00456E  1F89               	comf	(___aldiv@quotient+3)& (0+255),f,b
  2914  004570  1F88               	comf	(___aldiv@quotient+2)& (0+255),f,b
  2915  004572  1F87               	comf	(___aldiv@quotient+1)& (0+255),f,b
  2916  004574  6D86               	negf	___aldiv@quotient& (0+255),b
  2917  004576  0E00               	movlw	0
  2918  004578  2387               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  2919  00457A  2388               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  2920  00457C  2389               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  2921  00457E                     l12959:
  2922                           
  2923                           ; BSR set to: 0
  2924  00457E  C086  F07C         	movff	___aldiv@quotient,?___aldiv
  2925  004582  C087  F07D         	movff	___aldiv@quotient+1,?___aldiv+1
  2926  004586  C088  F07E         	movff	___aldiv@quotient+2,?___aldiv+2
  2927  00458A  C089  F07F         	movff	___aldiv@quotient+3,?___aldiv+3
  2928                           
  2929                           ; BSR set to: 0
  2930  00458E  0012               	return	
  2931  004590                     __end_of___aldiv:
  2932                           	opt stack 0
  2933                           tblptru	equ	0xFF8
  2934                           tblptrh	equ	0xFF7
  2935                           tblptrl	equ	0xFF6
  2936                           tablat	equ	0xFF5
  2937                           prodh	equ	0xFF4
  2938                           prodl	equ	0xFF3
  2939                           intcon	equ	0xFF2
  2940                           postinc0	equ	0xFEE
  2941                           wreg	equ	0xFE8
  2942                           indf1	equ	0xFE7
  2943                           postdec1	equ	0xFE5
  2944                           fsr1h	equ	0xFE2
  2945                           fsr1l	equ	0xFE1
  2946                           indf2	equ	0xFDF
  2947                           postinc2	equ	0xFDE
  2948                           postdec2	equ	0xFDD
  2949                           plusw2	equ	0xFDB
  2950                           fsr2h	equ	0xFDA
  2951                           fsr2l	equ	0xFD9
  2952                           status	equ	0xFD8
  2953                           
  2954 ;; *************** function _getCalibrationValue *****************
  2955 ;; Defined at:
  2956 ;;		line 910 in file "../main.c"
  2957 ;; Parameters:    Size  Location     Type
  2958 ;;  i               1    wreg     unsigned char 
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;  i               1   28[COMRAM] unsigned char 
  2961 ;;  cal             2   26[COMRAM] short 
  2962 ;; Return value:  Size  Location     Type
  2963 ;;                  2   23[COMRAM] short 
  2964 ;; Registers used:
  2965 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2966 ;; Tracked objects:
  2967 ;;		On entry : F/1
  2968 ;;		On exit  : 0/0
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2971 ;;      Params:         2       0       0       0       0       0       0
  2972 ;;      Locals:         3       0       0       0       0       0       0
  2973 ;;      Temps:          1       0       0       0       0       0       0
  2974 ;;      Totals:         6       0       0       0       0       0       0
  2975 ;;Total ram usage:        6 bytes
  2976 ;; Hardware stack levels used:    1
  2977 ;; Hardware stack levels required when called:    3
  2978 ;; This function calls:
  2979 ;;		_Read_b_eep
  2980 ;; This function is called by:
  2981 ;;		_doWork
  2982 ;; This function uses a non-reentrant model
  2983 ;;
  2984                           
  2985                           	psect	text6
  2986  0051AA                     __ptext6:
  2987                           	opt stack 0
  2988  0051AA                     _getCalibrationValue:
  2989                           	opt stack 26
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;incstack = 0
  2993                           ;incstack = 0
  2994                           ;getCalibrationValue@i stored from wreg
  2995  0051AA  CFE8 F01D          	movff	wreg,getCalibrationValue@i
  2996                           
  2997                           ; BSR set to: 1
  2998                           ;main.c: 911: int16_t cal;
  2999                           ;main.c: 913: cal = ((int16_t)( (((uint16_t)Read_b_eep(2 * i + 0x9E))<<8) + (uint16_t)Re
      +                          ad_b_eep(2 * i + 0x9F)) );
  3000  0051AE  501D               	movf	getCalibrationValue@i,w,c
  3001  0051B0  0D02               	mullw	2
  3002  0051B2  0E9F               	movlw	159
  3003  0051B4  24F3               	addwf	prodl,w,c
  3004  0051B6  6E16               	movwf	?_Read_b_eep,c
  3005  0051B8  0E00               	movlw	0
  3006  0051BA  20F4               	addwfc	prodh,w,c
  3007  0051BC  6E17               	movwf	?_Read_b_eep+1,c
  3008  0051BE  EC8F  F02B         	call	_Read_b_eep	;wreg free
  3009  0051C2  6E1A               	movwf	??_getCalibrationValue& (0+255),c
  3010  0051C4  501D               	movf	getCalibrationValue@i,w,c
  3011  0051C6  0D02               	mullw	2
  3012  0051C8  0E9E               	movlw	158
  3013  0051CA  24F3               	addwf	prodl,w,c
  3014  0051CC  6E16               	movwf	?_Read_b_eep,c
  3015  0051CE  0E00               	movlw	0
  3016  0051D0  20F4               	addwfc	prodh,w,c
  3017  0051D2  6E17               	movwf	?_Read_b_eep+1,c
  3018  0051D4  EC8F  F02B         	call	_Read_b_eep	;wreg free
  3019  0051D8  6E1C               	movwf	getCalibrationValue@cal+1,c
  3020  0051DA  501A               	movf	??_getCalibrationValue,w,c
  3021  0051DC  6E1B               	movwf	getCalibrationValue@cal,c
  3022                           
  3023                           ;main.c: 918: return cal;
  3024  0051DE  C01B  F018         	movff	getCalibrationValue@cal,?_getCalibrationValue
  3025  0051E2  C01C  F019         	movff	getCalibrationValue@cal+1,?_getCalibrationValue+1
  3026  0051E6  0012               	return	
  3027  0051E8                     __end_of_getCalibrationValue:
  3028                           	opt stack 0
  3029                           tblptru	equ	0xFF8
  3030                           tblptrh	equ	0xFF7
  3031                           tblptrl	equ	0xFF6
  3032                           tablat	equ	0xFF5
  3033                           prodh	equ	0xFF4
  3034                           prodl	equ	0xFF3
  3035                           intcon	equ	0xFF2
  3036                           postinc0	equ	0xFEE
  3037                           wreg	equ	0xFE8
  3038                           indf1	equ	0xFE7
  3039                           postdec1	equ	0xFE5
  3040                           fsr1h	equ	0xFE2
  3041                           fsr1l	equ	0xFE1
  3042                           indf2	equ	0xFDF
  3043                           postinc2	equ	0xFDE
  3044                           postdec2	equ	0xFDD
  3045                           plusw2	equ	0xFDB
  3046                           fsr2h	equ	0xFDA
  3047                           fsr2l	equ	0xFD9
  3048                           status	equ	0xFD8
  3049                           
  3050 ;; *************** function _log *****************
  3051 ;; Defined at:
  3052 ;;		line 6 in file "/opt/microchip/xc8/v1.21/sources/common/log.c"
  3053 ;; Parameters:    Size  Location     Type
  3054 ;;  x               4   33[BANK0 ] short 
  3055 ;; Auto vars:     Size  Location     Type
  3056 ;;  exponent        2   66[COMRAM] int 
  3057 ;; Return value:  Size  Location     Type
  3058 ;;                  4   33[BANK0 ] int 
  3059 ;; Registers used:
  3060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3061 ;; Tracked objects:
  3062 ;;		On entry : 0/1
  3063 ;;		On exit  : 0/0
  3064 ;;		Unchanged: 0/0
  3065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3066 ;;      Params:         0       4       0       0       0       0       0
  3067 ;;      Locals:         2       0       0       0       0       0       0
  3068 ;;      Temps:          0       0       0       0       0       0       0
  3069 ;;      Totals:         2       4       0       0       0       0       0
  3070 ;;Total ram usage:        6 bytes
  3071 ;; Hardware stack levels used:    1
  3072 ;; Hardware stack levels required when called:    5
  3073 ;; This function calls:
  3074 ;;		___fladd
  3075 ;;		___flmul
  3076 ;;		___awtofl
  3077 ;;		_eval_poly
  3078 ;;		_frexp
  3079 ;; This function is called by:
  3080 ;;		_doWork
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           	psect	text7
  3085  003CC8                     __ptext7:
  3086                           	opt stack 0
  3087  003CC8                     _log:
  3088                           	opt stack 24
  3089                           
  3090                           ;incstack = 0
  3091                           ;incstack = 0
  3092  003CC8  0100               	movlb	0	; () banked
  3093  003CCA  BF84               	btfsc	(log@x+3)& (0+255),7,b
  3094  003CCC  D007               	goto	u8820
  3095                           
  3096                           ; BSR set to: 0
  3097                           
  3098                           ; BSR set to: 0
  3099  003CCE  EE20  F081         	lfsr	2,log@x
  3100  003CD2  50DE               	movf	postinc2,w,c
  3101  003CD4  10DE               	iorwf	postinc2,w,c
  3102  003CD6  10DE               	iorwf	postinc2,w,c
  3103  003CD8  10DE               	iorwf	postinc2,w,c
  3104  003CDA  E105               	bnz	l11577
  3105  003CDC                     u8820:
  3106                           
  3107                           ; BSR set to: 0
  3108  003CDC  6B81               	clrf	?_log& (0+255),b
  3109  003CDE  6B82               	clrf	(?_log+1)& (0+255),b
  3110  003CE0  6B83               	clrf	(?_log+2)& (0+255),b
  3111  003CE2  6B84               	clrf	(?_log+3)& (0+255),b
  3112  003CE4  D087               	goto	l1872
  3113  003CE6                     l11577:
  3114                           
  3115                           ; BSR set to: 0
  3116  003CE6  6B64               	clrf	(?___flmul+4)& (0+255),b
  3117  003CE8  6B65               	clrf	(?___flmul+5)& (0+255),b
  3118  003CEA  6B66               	clrf	(?___flmul+6)& (0+255),b
  3119  003CEC  0E40               	movlw	64
  3120  003CEE  6F67               	movwf	(?___flmul+7)& (0+255),b
  3121  003CF0  0E43               	movlw	low log@exponent
  3122  003CF2  6E12               	movwf	?_frexp+4,c
  3123  003CF4  0E00               	movlw	high log@exponent
  3124  003CF6  6E13               	movwf	?_frexp+5,c
  3125  003CF8  0E0F               	movlw	15
  3126  003CFA  6E13               	movwf	?_frexp+5,c
  3127  003CFC  0E5F               	movlw	__accesstop+-1
  3128  003CFE  6412               	cpfsgt	?_frexp+4,c
  3129  003D00  6A13               	clrf	?_frexp+5,c
  3130  003D02  C081  F00E         	movff	log@x,?_frexp
  3131  003D06  C082  F00F         	movff	log@x+1,?_frexp+1
  3132  003D0A  C083  F010         	movff	log@x+2,?_frexp+2
  3133  003D0E  C084  F011         	movff	log@x+3,?_frexp+3
  3134  003D12  ECC3  F025         	call	_frexp	;wreg free
  3135  003D16  C011  F063         	movff	?_frexp+3,?___flmul+3
  3136  003D1A  C010  F062         	movff	?_frexp+2,?___flmul+2
  3137  003D1E  C00F  F061         	movff	?_frexp+1,?___flmul+1
  3138  003D22  C00E  F060         	movff	?_frexp,?___flmul
  3139  003D26  ECA8  F021         	call	___flmul	;wreg free
  3140  003D2A  C063  F020         	movff	?___flmul+3,?___fladd+3
  3141  003D2E  C062  F01F         	movff	?___flmul+2,?___fladd+2
  3142  003D32  C061  F01E         	movff	?___flmul+1,?___fladd+1
  3143  003D36  C060  F01D         	movff	?___flmul,?___fladd
  3144  003D3A  6A21               	clrf	?___fladd+4,c
  3145  003D3C  6A22               	clrf	?___fladd+5,c
  3146  003D3E  0E80               	movlw	128
  3147  003D40  6E23               	movwf	?___fladd+6,c
  3148  003D42  0EBF               	movlw	191
  3149  003D44  6E24               	movwf	?___fladd+7,c
  3150  003D46  ECB9  F01D         	call	___fladd	;wreg free
  3151  003D4A  C020  F084         	movff	?___fladd+3,log@x+3
  3152  003D4E  C01F  F083         	movff	?___fladd+2,log@x+2
  3153  003D52  C01E  F082         	movff	?___fladd+1,log@x+1
  3154  003D56  C01D  F081         	movff	?___fladd,log@x
  3155  003D5A  0643               	decf	log@exponent,f,c
  3156  003D5C  A0D8               	btfss	status,0,c
  3157  003D5E  0644               	decf	log@exponent+1,f,c
  3158  003D60  C081  F076         	movff	log@x,?_eval_poly
  3159  003D64  C082  F077         	movff	log@x+1,?_eval_poly+1
  3160  003D68  C083  F078         	movff	log@x+2,?_eval_poly+2
  3161  003D6C  C084  F079         	movff	log@x+3,?_eval_poly+3
  3162  003D70  0E48               	movlw	low log@coeff
  3163  003D72  0100               	movlb	0	; () banked
  3164  003D74  6F7A               	movwf	(?_eval_poly+4)& (0+255),b
  3165  003D76  6B7C               	clrf	(?_eval_poly+6)& (0+255),b
  3166  003D78  0E08               	movlw	8
  3167  003D7A  6F7B               	movwf	(?_eval_poly+5)& (0+255),b
  3168  003D7C  EC81  F023         	call	_eval_poly	;wreg free
  3169  003D80  C079  F084         	movff	?_eval_poly+3,log@x+3
  3170  003D84  C078  F083         	movff	?_eval_poly+2,log@x+2
  3171  003D88  C077  F082         	movff	?_eval_poly+1,log@x+1
  3172  003D8C  C076  F081         	movff	?_eval_poly,log@x
  3173                           
  3174                           ; BSR set to: 0
  3175  003D90  0E18               	movlw	24
  3176  003D92  6F64               	movwf	(?___flmul+4)& (0+255),b
  3177  003D94  0E72               	movlw	114
  3178  003D96  6F65               	movwf	(?___flmul+5)& (0+255),b
  3179  003D98  0E31               	movlw	49
  3180  003D9A  6F66               	movwf	(?___flmul+6)& (0+255),b
  3181  003D9C  0E3F               	movlw	63
  3182  003D9E  6F67               	movwf	(?___flmul+7)& (0+255),b
  3183  003DA0  C043  F018         	movff	log@exponent,?___awtofl
  3184  003DA4  C044  F019         	movff	log@exponent+1,?___awtofl+1
  3185  003DA8  EC6C  F029         	call	___awtofl	;wreg free
  3186  003DAC  C01B  F063         	movff	?___awtofl+3,?___flmul+3
  3187  003DB0  C01A  F062         	movff	?___awtofl+2,?___flmul+2
  3188  003DB4  C019  F061         	movff	?___awtofl+1,?___flmul+1
  3189  003DB8  C018  F060         	movff	?___awtofl,?___flmul
  3190  003DBC  ECA8  F021         	call	___flmul	;wreg free
  3191  003DC0  C063  F020         	movff	?___flmul+3,?___fladd+3
  3192  003DC4  C062  F01F         	movff	?___flmul+2,?___fladd+2
  3193  003DC8  C061  F01E         	movff	?___flmul+1,?___fladd+1
  3194  003DCC  C060  F01D         	movff	?___flmul,?___fladd
  3195  003DD0  C081  F021         	movff	log@x,?___fladd+4
  3196  003DD4  C082  F022         	movff	log@x+1,?___fladd+5
  3197  003DD8  C083  F023         	movff	log@x+2,?___fladd+6
  3198  003DDC  C084  F024         	movff	log@x+3,?___fladd+7
  3199  003DE0  ECB9  F01D         	call	___fladd	;wreg free
  3200  003DE4  C020  F084         	movff	?___fladd+3,?_log+3
  3201  003DE8  C01F  F083         	movff	?___fladd+2,?_log+2
  3202  003DEC  C01E  F082         	movff	?___fladd+1,?_log+1
  3203  003DF0  C01D  F081         	movff	?___fladd,?_log
  3204  003DF4                     l1872:
  3205  003DF4  0012               	return	
  3206  003DF6                     __end_of_log:
  3207                           	opt stack 0
  3208                           tblptru	equ	0xFF8
  3209                           tblptrh	equ	0xFF7
  3210                           tblptrl	equ	0xFF6
  3211                           tablat	equ	0xFF5
  3212                           prodh	equ	0xFF4
  3213                           prodl	equ	0xFF3
  3214                           intcon	equ	0xFF2
  3215                           postinc0	equ	0xFEE
  3216                           wreg	equ	0xFE8
  3217                           indf1	equ	0xFE7
  3218                           postdec1	equ	0xFE5
  3219                           fsr1h	equ	0xFE2
  3220                           fsr1l	equ	0xFE1
  3221                           indf2	equ	0xFDF
  3222                           postinc2	equ	0xFDE
  3223                           postdec2	equ	0xFDD
  3224                           plusw2	equ	0xFDB
  3225                           fsr2h	equ	0xFDA
  3226                           fsr2l	equ	0xFD9
  3227                           status	equ	0xFD8
  3228                           
  3229 ;; *************** function _exp *****************
  3230 ;; Defined at:
  3231 ;;		line 13 in file "/opt/microchip/xc8/v1.21/sources/common/exp.c"
  3232 ;; Parameters:    Size  Location     Type
  3233 ;;  x               4   57[BANK0 ] int 
  3234 ;; Auto vars:     Size  Location     Type
  3235 ;;  exponent        2   65[BANK0 ] int 
  3236 ;;  sign            1   67[BANK0 ] unsigned char 
  3237 ;; Return value:  Size  Location     Type
  3238 ;;                  4   57[BANK0 ] unsigned char 
  3239 ;; Registers used:
  3240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3241 ;; Tracked objects:
  3242 ;;		On entry : 0/1
  3243 ;;		On exit  : 0/0
  3244 ;;		Unchanged: 0/0
  3245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3246 ;;      Params:         0       4       0       0       0       0       0
  3247 ;;      Locals:         0       7       0       0       0       0       0
  3248 ;;      Temps:          0       0       0       0       0       0       0
  3249 ;;      Totals:         0      11       0       0       0       0       0
  3250 ;;Total ram usage:       11 bytes
  3251 ;; Hardware stack levels used:    1
  3252 ;; Hardware stack levels required when called:    6
  3253 ;; This function calls:
  3254 ;;		___fldiv
  3255 ;;		___asflmul
  3256 ;;		___asflsub
  3257 ;;		___awtofl
  3258 ;;		_floor
  3259 ;;		_eval_poly
  3260 ;;		_ldexp
  3261 ;;		___flge
  3262 ;;		___flneg
  3263 ;;		___fltol
  3264 ;; This function is called by:
  3265 ;;		_doWork
  3266 ;; This function uses a non-reentrant model
  3267 ;;
  3268                           
  3269                           	psect	text8
  3270  003688                     __ptext8:
  3271                           	opt stack 0
  3272  003688                     _exp:
  3273                           	opt stack 23
  3274                           
  3275                           ;incstack = 0
  3276                           ;incstack = 0
  3277  003688  0100               	movlb	0	; () banked
  3278  00368A  EE20  F099         	lfsr	2,exp@x
  3279  00368E  50DE               	movf	postinc2,w,c
  3280  003690  10DE               	iorwf	postinc2,w,c
  3281  003692  10DE               	iorwf	postinc2,w,c
  3282  003694  10DE               	iorwf	postinc2,w,c
  3283  003696  E107               	bnz	l11539
  3284                           
  3285                           ; BSR set to: 0
  3286  003698  0E00               	movlw	0
  3287  00369A  6F99               	movwf	?_exp& (0+255),b
  3288  00369C  6F9A               	movwf	(?_exp+1)& (0+255),b
  3289  00369E  0E80               	movlw	128
  3290  0036A0  6F9B               	movwf	(?_exp+2)& (0+255),b
  3291  0036A2  0E3F               	movlw	63
  3292  0036A4  D018               	goto	L1
  3293  0036A6                     l11539:
  3294                           
  3295                           ; BSR set to: 0
  3296  0036A6  0E18               	movlw	24
  3297  0036A8  6E0E               	movwf	?___flge,c
  3298  0036AA  0E72               	movlw	114
  3299  0036AC  6E0F               	movwf	?___flge+1,c
  3300  0036AE  0E31               	movlw	49
  3301  0036B0  6E10               	movwf	?___flge+2,c
  3302  0036B2  0E44               	movlw	68
  3303  0036B4  6E11               	movwf	?___flge+3,c
  3304  0036B6  C099  F012         	movff	exp@x,?___flge+4
  3305  0036BA  C09A  F013         	movff	exp@x+1,?___flge+5
  3306  0036BE  C09B  F014         	movff	exp@x+2,?___flge+6
  3307  0036C2  C09C  F015         	movff	exp@x+3,?___flge+7
  3308  0036C6  ECB2  F027         	call	___flge	;wreg free
  3309  0036CA  E207               	bc	l11545
  3310  0036CC  0100               	movlb	0	; () banked
  3311  0036CE  6999               	setf	?_exp& (0+255),b
  3312  0036D0  699A               	setf	(?_exp+1)& (0+255),b
  3313  0036D2  0E7F               	movlw	127
  3314  0036D4  6F9B               	movwf	(?_exp+2)& (0+255),b
  3315  0036D6                     L1:
  3316  0036D6  6F9C               	movwf	(?_exp+3)& (0+255),b
  3317  0036D8  D0C8               	goto	l1580
  3318  0036DA                     l11545:
  3319  0036DA  C099  F00E         	movff	exp@x,?___flge
  3320  0036DE  C09A  F00F         	movff	exp@x+1,?___flge+1
  3321  0036E2  C09B  F010         	movff	exp@x+2,?___flge+2
  3322  0036E6  C09C  F011         	movff	exp@x+3,?___flge+3
  3323  0036EA  0E87               	movlw	135
  3324  0036EC  6E12               	movwf	?___flge+4,c
  3325  0036EE  0E48               	movlw	72
  3326  0036F0  6E13               	movwf	?___flge+5,c
  3327  0036F2  0E3A               	movlw	58
  3328  0036F4  6E14               	movwf	?___flge+6,c
  3329  0036F6  0EC4               	movlw	196
  3330  0036F8  6E15               	movwf	?___flge+7,c
  3331  0036FA  ECB2  F027         	call	___flge	;wreg free
  3332  0036FE  E202               	bc	l11549
  3333  003700  0100               	movlb	0	; () banked
  3334  003702  D08D               	goto	u8800
  3335  003704                     l11549:
  3336  003704  0100               	movlb	0	; () banked
  3337  003706  0E01               	movlw	1
  3338  003708  AF9C               	btfss	(exp@x+3)& (0+255),7,b
  3339  00370A  0E00               	movlw	0
  3340  00370C  6FA3               	movwf	exp@sign& (0+255),b
  3341  00370E  51A3               	movf	exp@sign& (0+255),w,b
  3342  003710  E012               	bz	l1583
  3343                           
  3344                           ; BSR set to: 0
  3345  003712  C099  F00E         	movff	exp@x,?___flneg
  3346  003716  C09A  F00F         	movff	exp@x+1,?___flneg+1
  3347  00371A  C09B  F010         	movff	exp@x+2,?___flneg+2
  3348  00371E  C09C  F011         	movff	exp@x+3,?___flneg+3
  3349  003722  ECA7  F02A         	call	___flneg	;wreg free
  3350  003726  C011  F09C         	movff	?___flneg+3,exp@x+3
  3351  00372A  C010  F09B         	movff	?___flneg+2,exp@x+2
  3352  00372E  C00F  F09A         	movff	?___flneg+1,exp@x+1
  3353  003732  C00E  F099         	movff	?___flneg,exp@x
  3354  003736                     l1583:
  3355                           
  3356                           ; BSR set to: 0
  3357  003736  0E3B               	movlw	59
  3358  003738  6F76               	movwf	?___asflmul& (0+255),b
  3359  00373A  0EAA               	movlw	170
  3360  00373C  6F77               	movwf	(?___asflmul+1)& (0+255),b
  3361  00373E  0EB8               	movlw	184
  3362  003740  6F78               	movwf	(?___asflmul+2)& (0+255),b
  3363  003742  0E3F               	movlw	63
  3364  003744  6F79               	movwf	(?___asflmul+3)& (0+255),b
  3365  003746  0E99               	movlw	exp@x& (0+255)
  3366  003748  ECD8  F027         	call	___asflmul
  3367  00374C  C099  F08F         	movff	exp@x,?_floor
  3368  003750  C09A  F090         	movff	exp@x+1,?_floor+1
  3369  003754  C09B  F091         	movff	exp@x+2,?_floor+2
  3370  003758  C09C  F092         	movff	exp@x+3,?_floor+3
  3371  00375C  EC2A  F021         	call	_floor	;wreg free
  3372  003760  C092  F0A0         	movff	?_floor+3,_exp$2287+3
  3373  003764  C091  F09F         	movff	?_floor+2,_exp$2287+2
  3374  003768  C090  F09E         	movff	?_floor+1,_exp$2287+1
  3375  00376C  C08F  F09D         	movff	?_floor,_exp$2287
  3376  003770  C09D  F076         	movff	_exp$2287,?___fltol
  3377  003774  C09E  F077         	movff	_exp$2287+1,?___fltol+1
  3378  003778  C09F  F078         	movff	_exp$2287+2,?___fltol+2
  3379  00377C  C0A0  F079         	movff	_exp$2287+3,?___fltol+3
  3380  003780  EC29  F025         	call	___fltol	;wreg free
  3381  003784  C076  F0A1         	movff	?___fltol,exp@exponent
  3382  003788  C077  F0A2         	movff	?___fltol+1,exp@exponent+1
  3383                           
  3384                           ; BSR set to: 0
  3385  00378C  0E00               	movlw	high exp@x
  3386  00378E  6F7F               	movwf	(?___asflsub+1)& (0+255),b
  3387  003790  0E99               	movlw	low exp@x
  3388  003792  6F7E               	movwf	?___asflsub& (0+255),b
  3389  003794  C0A1  F018         	movff	exp@exponent,?___awtofl
  3390  003798  C0A2  F019         	movff	exp@exponent+1,?___awtofl+1
  3391  00379C  EC6C  F029         	call	___awtofl	;wreg free
  3392  0037A0  C01B  F083         	movff	?___awtofl+3,?___asflsub+5
  3393  0037A4  C01A  F082         	movff	?___awtofl+2,?___asflsub+4
  3394  0037A8  C019  F081         	movff	?___awtofl+1,?___asflsub+3
  3395  0037AC  C018  F080         	movff	?___awtofl,?___asflsub+2
  3396  0037B0  EC8B  F027         	call	___asflsub	;wreg free
  3397                           
  3398                           ; BSR set to: 0
  3399  0037B4  C099  F076         	movff	exp@x,?_eval_poly
  3400  0037B8  C09A  F077         	movff	exp@x+1,?_eval_poly+1
  3401  0037BC  C09B  F078         	movff	exp@x+2,?_eval_poly+2
  3402  0037C0  C09C  F079         	movff	exp@x+3,?_eval_poly+3
  3403  0037C4  0E20               	movlw	low exp@coeff
  3404  0037C6  6F7A               	movwf	(?_eval_poly+4)& (0+255),b
  3405  0037C8  6B7C               	clrf	(?_eval_poly+6)& (0+255),b
  3406  0037CA  0E09               	movlw	9
  3407  0037CC  6F7B               	movwf	(?_eval_poly+5)& (0+255),b
  3408  0037CE  EC81  F023         	call	_eval_poly	;wreg free
  3409  0037D2  C079  F084         	movff	?_eval_poly+3,?_ldexp+3
  3410  0037D6  C078  F083         	movff	?_eval_poly+2,?_ldexp+2
  3411  0037DA  C077  F082         	movff	?_eval_poly+1,?_ldexp+1
  3412  0037DE  C076  F081         	movff	?_eval_poly,?_ldexp
  3413  0037E2  C0A1  F085         	movff	exp@exponent,?_ldexp+4
  3414  0037E6  C0A2  F086         	movff	exp@exponent+1,?_ldexp+5
  3415  0037EA  EC87  F024         	call	_ldexp	;wreg free
  3416  0037EE  C084  F09C         	movff	?_ldexp+3,exp@x+3
  3417  0037F2  C083  F09B         	movff	?_ldexp+2,exp@x+2
  3418  0037F6  C082  F09A         	movff	?_ldexp+1,exp@x+1
  3419  0037FA  C081  F099         	movff	?_ldexp,exp@x
  3420                           
  3421                           ; BSR set to: 0
  3422  0037FE  51A3               	movf	exp@sign& (0+255),w,b
  3423  003800  E02C               	bz	l1584
  3424                           
  3425                           ; BSR set to: 0
  3426  003802  EE20  F099         	lfsr	2,exp@x
  3427  003806  0EFF               	movlw	255
  3428  003808  18DE               	xorwf	postinc2,w,c
  3429  00380A  0EFF               	movlw	255
  3430  00380C  B4D8               	btfsc	status,2,c
  3431  00380E  18DE               	xorwf	postinc2,w,c
  3432  003810  0E7F               	movlw	127
  3433  003812  B4D8               	btfsc	status,2,c
  3434  003814  18DE               	xorwf	postinc2,w,c
  3435  003816  0E7F               	movlw	127
  3436  003818  B4D8               	btfsc	status,2,c
  3437  00381A  18DE               	xorwf	postinc2,w,c
  3438  00381C  E105               	bnz	l11565
  3439  00381E                     u8800:
  3440                           
  3441                           ; BSR set to: 0
  3442  00381E  6B99               	clrf	?_exp& (0+255),b
  3443  003820  6B9A               	clrf	(?_exp+1)& (0+255),b
  3444  003822  6B9B               	clrf	(?_exp+2)& (0+255),b
  3445  003824  6B9C               	clrf	(?_exp+3)& (0+255),b
  3446  003826  D021               	goto	l1580
  3447  003828                     l11565:
  3448                           
  3449                           ; BSR set to: 0
  3450  003828  6A2C               	clrf	?___fldiv,c
  3451  00382A  6A2D               	clrf	?___fldiv+1,c
  3452  00382C  0E80               	movlw	128
  3453  00382E  6E2E               	movwf	?___fldiv+2,c
  3454  003830  0E3F               	movlw	63
  3455  003832  6E2F               	movwf	?___fldiv+3,c
  3456  003834  C099  F030         	movff	exp@x,?___fldiv+4
  3457  003838  C09A  F031         	movff	exp@x+1,?___fldiv+5
  3458  00383C  C09B  F032         	movff	exp@x+2,?___fldiv+6
  3459  003840  C09C  F033         	movff	exp@x+3,?___fldiv+7
  3460  003844  EC33  F024         	call	___fldiv	;wreg free
  3461  003848  C02F  F09C         	movff	?___fldiv+3,?_exp+3
  3462  00384C  C02E  F09B         	movff	?___fldiv+2,?_exp+2
  3463  003850  C02D  F09A         	movff	?___fldiv+1,?_exp+1
  3464  003854  C02C  F099         	movff	?___fldiv,?_exp
  3465  003858  D008               	goto	l1580
  3466  00385A                     l1584:
  3467                           
  3468                           ; BSR set to: 0
  3469  00385A  C099  F099         	movff	exp@x,?_exp
  3470  00385E  C09A  F09A         	movff	exp@x+1,?_exp+1
  3471  003862  C09B  F09B         	movff	exp@x+2,?_exp+2
  3472  003866  C09C  F09C         	movff	exp@x+3,?_exp+3
  3473  00386A                     l1580:
  3474  00386A  0012               	return	
  3475  00386C                     __end_of_exp:
  3476                           	opt stack 0
  3477                           tblptru	equ	0xFF8
  3478                           tblptrh	equ	0xFF7
  3479                           tblptrl	equ	0xFF6
  3480                           tablat	equ	0xFF5
  3481                           prodh	equ	0xFF4
  3482                           prodl	equ	0xFF3
  3483                           intcon	equ	0xFF2
  3484                           postinc0	equ	0xFEE
  3485                           wreg	equ	0xFE8
  3486                           indf1	equ	0xFE7
  3487                           postdec1	equ	0xFE5
  3488                           fsr1h	equ	0xFE2
  3489                           fsr1l	equ	0xFE1
  3490                           indf2	equ	0xFDF
  3491                           postinc2	equ	0xFDE
  3492                           postdec2	equ	0xFDD
  3493                           plusw2	equ	0xFDB
  3494                           fsr2h	equ	0xFDA
  3495                           fsr2l	equ	0xFD9
  3496                           status	equ	0xFD8
  3497                           
  3498 ;; *************** function ___flneg *****************
  3499 ;; Defined at:
  3500 ;;		line 16 in file "/opt/microchip/xc8/v1.21/sources/common/flneg.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;  f1              4   13[COMRAM] unsigned char 
  3503 ;; Auto vars:     Size  Location     Type
  3504 ;;		None
  3505 ;; Return value:  Size  Location     Type
  3506 ;;                  4   13[COMRAM] unsigned char 
  3507 ;; Registers used:
  3508 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3509 ;; Tracked objects:
  3510 ;;		On entry : F/0
  3511 ;;		On exit  : F/0
  3512 ;;		Unchanged: F/0
  3513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3514 ;;      Params:         4       0       0       0       0       0       0
  3515 ;;      Locals:         0       0       0       0       0       0       0
  3516 ;;      Temps:          0       0       0       0       0       0       0
  3517 ;;      Totals:         4       0       0       0       0       0       0
  3518 ;;Total ram usage:        4 bytes
  3519 ;; Hardware stack levels used:    1
  3520 ;; Hardware stack levels required when called:    2
  3521 ;; This function calls:
  3522 ;;		Nothing
  3523 ;; This function is called by:
  3524 ;;		_exp
  3525 ;; This function uses a non-reentrant model
  3526 ;;
  3527                           
  3528                           	psect	text9
  3529  00554E                     __ptext9:
  3530                           	opt stack 0
  3531  00554E                     ___flneg:
  3532                           	opt stack 26
  3533                           
  3534                           ; BSR set to: 0
  3535                           
  3536                           ;incstack = 0
  3537                           ;incstack = 0
  3538  00554E  EE20  F00E         	lfsr	2,___flneg@f1
  3539  005552  50DE               	movf	postinc2,w,c
  3540  005554  10DE               	iorwf	postinc2,w,c
  3541  005556  10DE               	iorwf	postinc2,w,c
  3542  005558  10DE               	iorwf	postinc2,w,c
  3543  00555A  E002               	bz	l13229
  3544                           
  3545                           ; BSR set to: 0
  3546  00555C  0E80               	movlw	128
  3547  00555E  1A11               	xorwf	___flneg@f1+3,f,c
  3548  005560                     l13229:
  3549                           
  3550                           ; BSR set to: 0
  3551  005560  C00E  F00E         	movff	___flneg@f1,?___flneg
  3552  005564  C00F  F00F         	movff	___flneg@f1+1,?___flneg+1
  3553  005568  C010  F010         	movff	___flneg@f1+2,?___flneg+2
  3554  00556C  C011  F011         	movff	___flneg@f1+3,?___flneg+3
  3555                           
  3556                           ; BSR set to: 0
  3557  005570  0012               	return	
  3558  005572                     __end_of___flneg:
  3559                           	opt stack 0
  3560                           tblptru	equ	0xFF8
  3561                           tblptrh	equ	0xFF7
  3562                           tblptrl	equ	0xFF6
  3563                           tablat	equ	0xFF5
  3564                           prodh	equ	0xFF4
  3565                           prodl	equ	0xFF3
  3566                           intcon	equ	0xFF2
  3567                           postinc0	equ	0xFEE
  3568                           wreg	equ	0xFE8
  3569                           indf1	equ	0xFE7
  3570                           postdec1	equ	0xFE5
  3571                           fsr1h	equ	0xFE2
  3572                           fsr1l	equ	0xFE1
  3573                           indf2	equ	0xFDF
  3574                           postinc2	equ	0xFDE
  3575                           postdec2	equ	0xFDD
  3576                           plusw2	equ	0xFDB
  3577                           fsr2h	equ	0xFDA
  3578                           fsr2l	equ	0xFD9
  3579                           status	equ	0xFD8
  3580                           
  3581 ;; *************** function _ldexp *****************
  3582 ;; Defined at:
  3583 ;;		line 278 in file "/opt/microchip/xc8/v1.21/sources/common/frexp.c"
  3584 ;; Parameters:    Size  Location     Type
  3585 ;;  value           4   33[BANK0 ] unsigned char 
  3586 ;;  newexp          2   37[BANK0 ] int 
  3587 ;; Auto vars:     Size  Location     Type
  3588 ;;		None
  3589 ;; Return value:  Size  Location     Type
  3590 ;;                  4   33[BANK0 ] int 
  3591 ;; Registers used:
  3592 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3593 ;; Tracked objects:
  3594 ;;		On entry : F/0
  3595 ;;		On exit  : F/0
  3596 ;;		Unchanged: 0/0
  3597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3598 ;;      Params:         0       6       0       0       0       0       0
  3599 ;;      Locals:         0       0       0       0       0       0       0
  3600 ;;      Temps:          3       0       0       0       0       0       0
  3601 ;;      Totals:         3       6       0       0       0       0       0
  3602 ;;Total ram usage:        9 bytes
  3603 ;; Hardware stack levels used:    1
  3604 ;; Hardware stack levels required when called:    2
  3605 ;; This function calls:
  3606 ;;		Nothing
  3607 ;; This function is called by:
  3608 ;;		_exp
  3609 ;; This function uses a non-reentrant model
  3610 ;;
  3611                           
  3612                           	psect	text10
  3613  00490E                     __ptext10:
  3614                           	opt stack 0
  3615  00490E                     _ldexp:
  3616                           	opt stack 26
  3617                           
  3618                           ; BSR set to: 0
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;incstack = 0
  3622                           ;incstack = 0
  3623  00490E  EE20  F081         	lfsr	2,ldexp@value
  3624  004912  50DE               	movf	postinc2,w,c
  3625  004914  10DE               	iorwf	postinc2,w,c
  3626  004916  10DE               	iorwf	postinc2,w,c
  3627  004918  10DE               	iorwf	postinc2,w,c
  3628  00491A  E014               	bz	u10170
  3629                           
  3630                           ; BSR set to: 0
  3631                           
  3632                           ; BSR set to: 0
  3633  00491C  5184               	movf	(ldexp@value+3)& (0+255),w,b
  3634  00491E  0B7F               	andlw	127
  3635  004920  6E43               	movwf	??_ldexp& (0+255),c
  3636  004922  90D8               	bcf	status,0,c
  3637  004924  3443               	rlcf	??_ldexp,w,c
  3638  004926  6E44               	movwf	(??_ldexp+1)& (0+255),c
  3639  004928  6A45               	clrf	(??_ldexp+2)& (0+255),c
  3640  00492A  3645               	rlcf	(??_ldexp+2)& (0+255),f,c
  3641  00492C  5044               	movf	??_ldexp+1,w,c
  3642  00492E  2785               	addwf	ldexp@newexp& (0+255),f,b
  3643  004930  5045               	movf	??_ldexp+2,w,c
  3644  004932  2386               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  3645  004934  3583               	rlcf	(ldexp@value+2)& (0+255),w,b
  3646  004936  36E8               	rlcf	wreg,f,c
  3647  004938  0B01               	andlw	1
  3648  00493A  2785               	addwf	ldexp@newexp& (0+255),f,b
  3649  00493C  0E00               	movlw	0
  3650  00493E  2386               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  3651                           
  3652                           ; BSR set to: 0
  3653  004940  AF86               	btfss	(ldexp@newexp+1)& (0+255),7,b
  3654  004942  D005               	goto	l13191
  3655  004944                     u10170:
  3656                           
  3657                           ; BSR set to: 0
  3658  004944  6B81               	clrf	?_ldexp& (0+255),b
  3659  004946  6B82               	clrf	(?_ldexp+1)& (0+255),b
  3660  004948  6B83               	clrf	(?_ldexp+2)& (0+255),b
  3661  00494A  6B84               	clrf	(?_ldexp+3)& (0+255),b
  3662  00494C  D031               	goto	l1705
  3663  00494E                     l13191:
  3664                           
  3665                           ; BSR set to: 0
  3666  00494E  5186               	movf	(ldexp@newexp+1)& (0+255),w,b
  3667  004950  0A80               	xorlw	128
  3668  004952  0F7F               	addlw	-129
  3669  004954  0E00               	movlw	0
  3670  004956  B4D8               	btfsc	status,2,c
  3671  004958  5D85               	subwf	ldexp@newexp& (0+255),w,b
  3672  00495A  E30E               	bnc	l13205
  3673                           
  3674                           ; BSR set to: 0
  3675  00495C  AF84               	btfss	(ldexp@value+3)& (0+255),7,b
  3676  00495E  D006               	goto	l13201
  3677                           
  3678                           ; BSR set to: 0
  3679  004960  6981               	setf	?_ldexp& (0+255),b
  3680  004962  6982               	setf	(?_ldexp+1)& (0+255),b
  3681  004964  0E7F               	movlw	127
  3682  004966  6F83               	movwf	(?_ldexp+2)& (0+255),b
  3683  004968  0EFF               	movlw	255
  3684  00496A  D004               	goto	L2
  3685  00496C                     l13201:
  3686                           
  3687                           ; BSR set to: 0
  3688  00496C  6981               	setf	?_ldexp& (0+255),b
  3689  00496E  6982               	setf	(?_ldexp+1)& (0+255),b
  3690  004970  0E7F               	movlw	127
  3691  004972  6F83               	movwf	(?_ldexp+2)& (0+255),b
  3692  004974                     L2:
  3693  004974  6F84               	movwf	(?_ldexp+3)& (0+255),b
  3694  004976  D01C               	goto	l1705
  3695  004978                     l13205:
  3696                           
  3697                           ; BSR set to: 0
  3698  004978  3586               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  3699  00497A  3186               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  3700  00497C  6E44               	movwf	(??_ldexp+1)& (0+255),c
  3701  00497E  3185               	rrcf	ldexp@newexp& (0+255),w,b
  3702  004980  6E43               	movwf	??_ldexp& (0+255),c
  3703  004982  1984               	xorwf	(ldexp@value+3)& (0+255),w,b
  3704  004984  0B80               	andlw	-128
  3705  004986  1843               	xorwf	??_ldexp,w,c
  3706  004988  6F84               	movwf	(ldexp@value+3)& (0+255),b
  3707  00498A  C085  F043         	movff	ldexp@newexp,??_ldexp
  3708  00498E  0E01               	movlw	1
  3709  004990  1643               	andwf	??_ldexp,f,c
  3710  004992  3243               	rrcf	??_ldexp,f,c
  3711  004994  3243               	rrcf	??_ldexp,f,c
  3712  004996  5183               	movf	(ldexp@value+2)& (0+255),w,b
  3713  004998  1843               	xorwf	??_ldexp,w,c
  3714  00499A  0B7F               	andlw	-129
  3715  00499C  1843               	xorwf	??_ldexp,w,c
  3716  00499E  6F83               	movwf	(ldexp@value+2)& (0+255),b
  3717                           
  3718                           ; BSR set to: 0
  3719  0049A0  C081  F081         	movff	ldexp@value,?_ldexp
  3720  0049A4  C082  F082         	movff	ldexp@value+1,?_ldexp+1
  3721  0049A8  C083  F083         	movff	ldexp@value+2,?_ldexp+2
  3722  0049AC  C084  F084         	movff	ldexp@value+3,?_ldexp+3
  3723  0049B0                     l1705:
  3724                           
  3725                           ; BSR set to: 0
  3726  0049B0  0012               	return	
  3727  0049B2                     __end_of_ldexp:
  3728                           	opt stack 0
  3729                           tblptru	equ	0xFF8
  3730                           tblptrh	equ	0xFF7
  3731                           tblptrl	equ	0xFF6
  3732                           tablat	equ	0xFF5
  3733                           prodh	equ	0xFF4
  3734                           prodl	equ	0xFF3
  3735                           intcon	equ	0xFF2
  3736                           postinc0	equ	0xFEE
  3737                           wreg	equ	0xFE8
  3738                           indf1	equ	0xFE7
  3739                           postdec1	equ	0xFE5
  3740                           fsr1h	equ	0xFE2
  3741                           fsr1l	equ	0xFE1
  3742                           indf2	equ	0xFDF
  3743                           postinc2	equ	0xFDE
  3744                           postdec2	equ	0xFDD
  3745                           plusw2	equ	0xFDB
  3746                           fsr2h	equ	0xFDA
  3747                           fsr2l	equ	0xFD9
  3748                           status	equ	0xFD8
  3749                           
  3750 ;; *************** function _eval_poly *****************
  3751 ;; Defined at:
  3752 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/common/evalpoly.c"
  3753 ;; Parameters:    Size  Location     Type
  3754 ;;  x               4   22[BANK0 ] int 
  3755 ;;  d               1   26[BANK0 ] PTR const 
  3756 ;;		 -> log@coeff(36), exp@coeff(40), 
  3757 ;;  n               2   27[BANK0 ] int 
  3758 ;; Auto vars:     Size  Location     Type
  3759 ;;  res             4   29[BANK0 ] int 
  3760 ;; Return value:  Size  Location     Type
  3761 ;;                  4   22[BANK0 ] int 
  3762 ;; Registers used:
  3763 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3764 ;; Tracked objects:
  3765 ;;		On entry : F/0
  3766 ;;		On exit  : F/0
  3767 ;;		Unchanged: 0/0
  3768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3769 ;;      Params:         0       7       0       0       0       0       0
  3770 ;;      Locals:         0       4       0       0       0       0       0
  3771 ;;      Temps:          1       0       0       0       0       0       0
  3772 ;;      Totals:         1      11       0       0       0       0       0
  3773 ;;Total ram usage:       12 bytes
  3774 ;; Hardware stack levels used:    1
  3775 ;; Hardware stack levels required when called:    4
  3776 ;; This function calls:
  3777 ;;		___fladd
  3778 ;;		___flmul
  3779 ;; This function is called by:
  3780 ;;		_exp
  3781 ;;		_log
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           	psect	text11
  3786  004702                     __ptext11:
  3787                           	opt stack 0
  3788  004702                     _eval_poly:
  3789                           	opt stack 24
  3790                           
  3791                           ; BSR set to: 0
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;incstack = 0
  3795                           ;incstack = 0
  3796  004702  517B               	movf	eval_poly@n& (0+255),w,b
  3797  004704  D84E               	call	PL48	;call to abstracted procedure
  3798  004706  CFF5 F07D          	movff	tablat,eval_poly@res
  3799  00470A  0009               	tblrd		*+
  3800  00470C  CFF5 F07E          	movff	tablat,eval_poly@res+1
  3801  004710  0009               	tblrd		*+
  3802  004712  CFF5 F07F          	movff	tablat,eval_poly@res+2
  3803  004716  000A               	tblrd		*-
  3804  004718  CFF5 F080          	movff	tablat,eval_poly@res+3
  3805  00471C  D035               	goto	l13177
  3806  00471E                     l13175:
  3807                           
  3808                           ; BSR set to: 0
  3809  00471E  C07D  F064         	movff	eval_poly@res,?___flmul+4
  3810  004722  C07E  F065         	movff	eval_poly@res+1,?___flmul+5
  3811  004726  C07F  F066         	movff	eval_poly@res+2,?___flmul+6
  3812  00472A  C080  F067         	movff	eval_poly@res+3,?___flmul+7
  3813  00472E  C076  F060         	movff	eval_poly@x,?___flmul
  3814  004732  C077  F061         	movff	eval_poly@x+1,?___flmul+1
  3815  004736  C078  F062         	movff	eval_poly@x+2,?___flmul+2
  3816  00473A  C079  F063         	movff	eval_poly@x+3,?___flmul+3
  3817  00473E  ECA8  F021         	call	___flmul	;wreg free
  3818  004742  C063  F020         	movff	?___flmul+3,?___fladd+3
  3819  004746  C062  F01F         	movff	?___flmul+2,?___fladd+2
  3820  00474A  C061  F01E         	movff	?___flmul+1,?___fladd+1
  3821  00474E  C060  F01D         	movff	?___flmul,?___fladd
  3822  004752  0100               	movlb	0	; () banked
  3823  004754  077B               	decf	eval_poly@n& (0+255),f,b
  3824  004756  A0D8               	btfss	status,0,c
  3825  004758  077C               	decf	(eval_poly@n+1)& (0+255),f,b
  3826  00475A  517B               	movf	eval_poly@n& (0+255),w,b
  3827  00475C  D822               	call	PL48	;call to abstracted procedure
  3828  00475E  CFF5 F021          	movff	tablat,?___fladd+4
  3829  004762  0009               	tblrd		*+
  3830  004764  CFF5 F022          	movff	tablat,?___fladd+5
  3831  004768  0009               	tblrd		*+
  3832  00476A  CFF5 F023          	movff	tablat,?___fladd+6
  3833  00476E  000A               	tblrd		*-
  3834  004770  CFF5 F024          	movff	tablat,?___fladd+7
  3835  004774  ECB9  F01D         	call	___fladd	;wreg free
  3836  004778  C020  F080         	movff	?___fladd+3,eval_poly@res+3
  3837  00477C  C01F  F07F         	movff	?___fladd+2,eval_poly@res+2
  3838  004780  C01E  F07E         	movff	?___fladd+1,eval_poly@res+1
  3839  004784  C01D  F07D         	movff	?___fladd,eval_poly@res
  3840  004788                     l13177:
  3841  004788  0100               	movlb	0	; () banked
  3842  00478A  517C               	movf	(eval_poly@n+1)& (0+255),w,b
  3843  00478C  117B               	iorwf	eval_poly@n& (0+255),w,b
  3844  00478E  E1C7               	bnz	l13175
  3845                           
  3846                           ; BSR set to: 0
  3847  004790  C07D  F076         	movff	eval_poly@res,?_eval_poly
  3848  004794  C07E  F077         	movff	eval_poly@res+1,?_eval_poly+1
  3849  004798  C07F  F078         	movff	eval_poly@res+2,?_eval_poly+2
  3850  00479C  C080  F079         	movff	eval_poly@res+3,?_eval_poly+3
  3851                           
  3852                           ; BSR set to: 0
  3853  0047A0  0012               	return	
  3854  0047A2                     __end_of_eval_poly:
  3855                           	opt stack 0
  3856  0047A2                     PL48:
  3857                           	opt stack 24
  3858  0047A2  0D04               	mullw	4
  3859  0047A4  517A               	movf	eval_poly@d& (0+255),w,b
  3860  0047A6  24F3               	addwf	prodl,w,c
  3861  0047A8  6E42               	movwf	??_eval_poly& (0+255),c
  3862  0047AA  C042  FFF6         	movff	??_eval_poly,tblptrl
  3863  0047AE  0E06               	movlw	high __smallconst
  3864  0047B0  6EF7               	movwf	tblptrh,c
  3865  0047B2  0009               	tblrd		*+
  3866  0047B4  0012               	return	
  3867  0047B6                     __end_ofPL48:
  3868                           	opt stack 0
  3869                           tblptru	equ	0xFF8
  3870                           tblptrh	equ	0xFF7
  3871                           tblptrl	equ	0xFF6
  3872                           tablat	equ	0xFF5
  3873                           prodh	equ	0xFF4
  3874                           prodl	equ	0xFF3
  3875                           intcon	equ	0xFF2
  3876                           postinc0	equ	0xFEE
  3877                           wreg	equ	0xFE8
  3878                           indf1	equ	0xFE7
  3879                           postdec1	equ	0xFE5
  3880                           fsr1h	equ	0xFE2
  3881                           fsr1l	equ	0xFE1
  3882                           indf2	equ	0xFDF
  3883                           postinc2	equ	0xFDE
  3884                           postdec2	equ	0xFDD
  3885                           plusw2	equ	0xFDB
  3886                           fsr2h	equ	0xFDA
  3887                           fsr2l	equ	0xFD9
  3888                           status	equ	0xFD8
  3889                           
  3890 ;; *************** function _floor *****************
  3891 ;; Defined at:
  3892 ;;		line 14 in file "/opt/microchip/xc8/v1.21/sources/common/floor.c"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;  x               4   47[BANK0 ] int 
  3895 ;; Auto vars:     Size  Location     Type
  3896 ;;  i               4   51[BANK0 ] int 
  3897 ;;  expon           2   55[BANK0 ] int 
  3898 ;; Return value:  Size  Location     Type
  3899 ;;                  4   47[BANK0 ] int 
  3900 ;; Registers used:
  3901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3902 ;; Tracked objects:
  3903 ;;		On entry : F/0
  3904 ;;		On exit  : 0/0
  3905 ;;		Unchanged: 0/0
  3906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3907 ;;      Params:         0       4       0       0       0       0       0
  3908 ;;      Locals:         0       6       0       0       0       0       0
  3909 ;;      Temps:          0       0       0       0       0       0       0
  3910 ;;      Totals:         0      10       0       0       0       0       0
  3911 ;;Total ram usage:       10 bytes
  3912 ;; Hardware stack levels used:    1
  3913 ;; Hardware stack levels required when called:    4
  3914 ;; This function calls:
  3915 ;;		___altofl
  3916 ;;		___fladd
  3917 ;;		___flge
  3918 ;;		_frexp
  3919 ;;		___fltol
  3920 ;; This function is called by:
  3921 ;;		_exp
  3922 ;; This function uses a non-reentrant model
  3923 ;;
  3924                           
  3925                           	psect	text12
  3926  004254                     __ptext12:
  3927                           	opt stack 0
  3928  004254                     _floor:
  3929                           	opt stack 24
  3930                           
  3931                           ; BSR set to: 0
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;incstack = 0
  3935                           ;incstack = 0
  3936  004254  C08F  F00E         	movff	floor@x,?_frexp
  3937  004258  C090  F00F         	movff	floor@x+1,?_frexp+1
  3938  00425C  C091  F010         	movff	floor@x+2,?_frexp+2
  3939  004260  C092  F011         	movff	floor@x+3,?_frexp+3
  3940  004264  0E00               	movlw	high floor@expon
  3941  004266  6E13               	movwf	?_frexp+5,c
  3942  004268  0E97               	movlw	low floor@expon
  3943  00426A  6E12               	movwf	?_frexp+4,c
  3944  00426C  ECC3  F025         	call	_frexp	;wreg free
  3945                           
  3946                           ; BSR set to: 0
  3947  004270  AF98               	btfss	(floor@expon+1)& (0+255),7,b
  3948  004272  D00F               	goto	l13163
  3949                           
  3950                           ; BSR set to: 0
  3951  004274  AF92               	btfss	(floor@x+3)& (0+255),7,b
  3952  004276  D008               	goto	l1673
  3953                           
  3954                           ; BSR set to: 0
  3955  004278  0E00               	movlw	0
  3956  00427A  6F8F               	movwf	?_floor& (0+255),b
  3957  00427C  6F90               	movwf	(?_floor+1)& (0+255),b
  3958  00427E  0E80               	movlw	128
  3959  004280  6F91               	movwf	(?_floor+2)& (0+255),b
  3960  004282  0EBF               	movlw	191
  3961  004284  6F92               	movwf	(?_floor+3)& (0+255),b
  3962  004286  D063               	goto	l1674
  3963  004288                     l1673:
  3964                           
  3965                           ; BSR set to: 0
  3966  004288  6B8F               	clrf	?_floor& (0+255),b
  3967  00428A  6B90               	clrf	(?_floor+1)& (0+255),b
  3968  00428C  6B91               	clrf	(?_floor+2)& (0+255),b
  3969  00428E  6B92               	clrf	(?_floor+3)& (0+255),b
  3970  004290  D05E               	goto	l1674
  3971  004292                     l13163:
  3972                           
  3973                           ; BSR set to: 0
  3974  004292  0E1D               	movlw	29
  3975  004294  5D97               	subwf	floor@expon& (0+255),w,b
  3976  004296  0E00               	movlw	0
  3977  004298  5998               	subwfb	(floor@expon+1)& (0+255),w,b
  3978  00429A  E309               	bnc	l13167
  3979                           
  3980                           ; BSR set to: 0
  3981  00429C  C08F  F08F         	movff	floor@x,?_floor
  3982  0042A0  C090  F090         	movff	floor@x+1,?_floor+1
  3983  0042A4  C091  F091         	movff	floor@x+2,?_floor+2
  3984  0042A8  C092  F092         	movff	floor@x+3,?_floor+3
  3985  0042AC  D050               	goto	l1674
  3986  0042AE                     l13167:
  3987                           
  3988                           ; BSR set to: 0
  3989  0042AE  C08F  F076         	movff	floor@x,?___fltol
  3990  0042B2  C090  F077         	movff	floor@x+1,?___fltol+1
  3991  0042B6  C091  F078         	movff	floor@x+2,?___fltol+2
  3992  0042BA  C092  F079         	movff	floor@x+3,?___fltol+3
  3993  0042BE  EC29  F025         	call	___fltol	;wreg free
  3994  0042C2  C079  F08D         	movff	?___fltol+3,?___altofl+3
  3995  0042C6  C078  F08C         	movff	?___fltol+2,?___altofl+2
  3996  0042CA  C077  F08B         	movff	?___fltol+1,?___altofl+1
  3997  0042CE  C076  F08A         	movff	?___fltol,?___altofl
  3998  0042D2  EC48  F028         	call	___altofl	;wreg free
  3999  0042D6  C08D  F096         	movff	?___altofl+3,floor@i+3
  4000  0042DA  C08C  F095         	movff	?___altofl+2,floor@i+2
  4001  0042DE  C08B  F094         	movff	?___altofl+1,floor@i+1
  4002  0042E2  C08A  F093         	movff	?___altofl,floor@i
  4003  0042E6  C08F  F00E         	movff	floor@x,?___flge
  4004  0042EA  C090  F00F         	movff	floor@x+1,?___flge+1
  4005  0042EE  C091  F010         	movff	floor@x+2,?___flge+2
  4006  0042F2  C092  F011         	movff	floor@x+3,?___flge+3
  4007  0042F6  C093  F012         	movff	floor@i,?___flge+4
  4008  0042FA  C094  F013         	movff	floor@i+1,?___flge+5
  4009  0042FE  C095  F014         	movff	floor@i+2,?___flge+6
  4010  004302  C096  F015         	movff	floor@i+3,?___flge+7
  4011  004306  ECB2  F027         	call	___flge	;wreg free
  4012  00430A  E219               	bc	l1676
  4013  00430C  C093  F01D         	movff	floor@i,?___fladd
  4014  004310  C094  F01E         	movff	floor@i+1,?___fladd+1
  4015  004314  C095  F01F         	movff	floor@i+2,?___fladd+2
  4016  004318  C096  F020         	movff	floor@i+3,?___fladd+3
  4017  00431C  6A21               	clrf	?___fladd+4,c
  4018  00431E  6A22               	clrf	?___fladd+5,c
  4019  004320  0E80               	movlw	128
  4020  004322  6E23               	movwf	?___fladd+6,c
  4021  004324  0EBF               	movlw	191
  4022  004326  6E24               	movwf	?___fladd+7,c
  4023  004328  ECB9  F01D         	call	___fladd	;wreg free
  4024  00432C  C020  F092         	movff	?___fladd+3,?_floor+3
  4025  004330  C01F  F091         	movff	?___fladd+2,?_floor+2
  4026  004334  C01E  F090         	movff	?___fladd+1,?_floor+1
  4027  004338  C01D  F08F         	movff	?___fladd,?_floor
  4028  00433C  D008               	goto	l1674
  4029  00433E                     l1676:
  4030  00433E  C093  F08F         	movff	floor@i,?_floor
  4031  004342  C094  F090         	movff	floor@i+1,?_floor+1
  4032  004346  C095  F091         	movff	floor@i+2,?_floor+2
  4033  00434A  C096  F092         	movff	floor@i+3,?_floor+3
  4034  00434E                     l1674:
  4035  00434E  0012               	return	
  4036  004350                     __end_of_floor:
  4037                           	opt stack 0
  4038                           tblptru	equ	0xFF8
  4039                           tblptrh	equ	0xFF7
  4040                           tblptrl	equ	0xFF6
  4041                           tablat	equ	0xFF5
  4042                           prodh	equ	0xFF4
  4043                           prodl	equ	0xFF3
  4044                           intcon	equ	0xFF2
  4045                           postinc0	equ	0xFEE
  4046                           wreg	equ	0xFE8
  4047                           indf1	equ	0xFE7
  4048                           postdec1	equ	0xFE5
  4049                           fsr1h	equ	0xFE2
  4050                           fsr1l	equ	0xFE1
  4051                           indf2	equ	0xFDF
  4052                           postinc2	equ	0xFDE
  4053                           postdec2	equ	0xFDD
  4054                           plusw2	equ	0xFDB
  4055                           fsr2h	equ	0xFDA
  4056                           fsr2l	equ	0xFD9
  4057                           status	equ	0xFD8
  4058                           
  4059 ;; *************** function ___fltol *****************
  4060 ;; Defined at:
  4061 ;;		line 44 in file "/opt/microchip/xc8/v1.21/sources/common/fltol.c"
  4062 ;; Parameters:    Size  Location     Type
  4063 ;;  f1              4   22[BANK0 ] int 
  4064 ;; Auto vars:     Size  Location     Type
  4065 ;;  exp1            1   27[BANK0 ] unsigned char 
  4066 ;;  sign1           1   26[BANK0 ] unsigned char 
  4067 ;; Return value:  Size  Location     Type
  4068 ;;                  4   22[BANK0 ] long 
  4069 ;; Registers used:
  4070 ;;		wreg, status,2, status,0
  4071 ;; Tracked objects:
  4072 ;;		On entry : 0/0
  4073 ;;		On exit  : F/0
  4074 ;;		Unchanged: 0/0
  4075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4076 ;;      Params:         0       4       0       0       0       0       0
  4077 ;;      Locals:         0       2       0       0       0       0       0
  4078 ;;      Temps:          4       0       0       0       0       0       0
  4079 ;;      Totals:         4       6       0       0       0       0       0
  4080 ;;Total ram usage:       10 bytes
  4081 ;; Hardware stack levels used:    1
  4082 ;; Hardware stack levels required when called:    2
  4083 ;; This function calls:
  4084 ;;		Nothing
  4085 ;; This function is called by:
  4086 ;;		_doWork
  4087 ;;		_setEventData
  4088 ;;		_exp
  4089 ;;		_floor
  4090 ;; This function uses a non-reentrant model
  4091 ;;
  4092                           
  4093                           	psect	text13
  4094  004A52                     __ptext13:
  4095                           	opt stack 0
  4096  004A52                     ___fltol:
  4097                           	opt stack 27
  4098                           
  4099                           ;incstack = 0
  4100                           ;incstack = 0
  4101  004A52  0100               	movlb	0	; () banked
  4102  004A54  3578               	rlcf	(___fltol@f1+2)& (0+255),w,b
  4103  004A56  3579               	rlcf	(___fltol@f1+3)& (0+255),w,b
  4104  004A58  6F7B               	movwf	___fltol@exp1& (0+255),b
  4105  004A5A  677B               	tstfsz	___fltol@exp1& (0+255),b
  4106  004A5C  D005               	goto	l13257
  4107  004A5E                     l13255:
  4108                           
  4109                           ; BSR set to: 0
  4110  004A5E  6B76               	clrf	?___fltol& (0+255),b
  4111  004A60  6B77               	clrf	(?___fltol+1)& (0+255),b
  4112  004A62  6B78               	clrf	(?___fltol+2)& (0+255),b
  4113  004A64  6B79               	clrf	(?___fltol+3)& (0+255),b
  4114  004A66  D043               	goto	l1685
  4115  004A68                     l13257:
  4116                           
  4117                           ; BSR set to: 0
  4118  004A68  C076  F042         	movff	___fltol@f1,??___fltol
  4119  004A6C  C077  F043         	movff	___fltol@f1+1,??___fltol+1
  4120  004A70  C078  F044         	movff	___fltol@f1+2,??___fltol+2
  4121  004A74  C079  F045         	movff	___fltol@f1+3,??___fltol+3
  4122  004A78  0E20               	movlw	32
  4123  004A7A  D005               	goto	u10260
  4124  004A7C                     u10265:
  4125  004A7C  90D8               	bcf	status,0,c
  4126  004A7E  3245               	rrcf	??___fltol+3,f,c
  4127  004A80  3244               	rrcf	??___fltol+2,f,c
  4128  004A82  3243               	rrcf	??___fltol+1,f,c
  4129  004A84  3242               	rrcf	??___fltol,f,c
  4130  004A86                     u10260:
  4131  004A86  2EE8               	decfsz	wreg,f,c
  4132  004A88  D7F9               	goto	u10265
  4133  004A8A  5042               	movf	??___fltol,w,c
  4134  004A8C  6F7A               	movwf	___fltol@sign1& (0+255),b
  4135                           
  4136                           ; BSR set to: 0
  4137  004A8E  8F78               	bsf	(___fltol@f1+2)& (0+255),7,b
  4138                           
  4139                           ; BSR set to: 0
  4140  004A90  6B79               	clrf	(___fltol@f1+3)& (0+255),b
  4141                           
  4142                           ; BSR set to: 0
  4143  004A92  0E96               	movlw	150
  4144  004A94  5F7B               	subwf	___fltol@exp1& (0+255),f,b
  4145                           
  4146                           ; BSR set to: 0
  4147  004A96  AF7B               	btfss	___fltol@exp1& (0+255),7,b
  4148  004A98  D00C               	goto	l13275
  4149                           
  4150                           ; BSR set to: 0
  4151  004A9A  517B               	movf	___fltol@exp1& (0+255),w,b
  4152  004A9C  0A80               	xorlw	128
  4153  004A9E  0F97               	addlw	151
  4154  004AA0  E3DE               	bnc	l13255
  4155  004AA2                     l13271:
  4156                           
  4157                           ; BSR set to: 0
  4158  004AA2  90D8               	bcf	status,0,c
  4159  004AA4  3379               	rrcf	(___fltol@f1+3)& (0+255),f,b
  4160  004AA6  3378               	rrcf	(___fltol@f1+2)& (0+255),f,b
  4161  004AA8  3377               	rrcf	(___fltol@f1+1)& (0+255),f,b
  4162  004AAA  3376               	rrcf	___fltol@f1& (0+255),f,b
  4163                           
  4164                           ; BSR set to: 0
  4165  004AAC  3F7B               	incfsz	___fltol@exp1& (0+255),f,b
  4166  004AAE  D7F9               	goto	l13271
  4167  004AB0  D00C               	goto	l13283
  4168  004AB2                     l13275:
  4169                           
  4170                           ; BSR set to: 0
  4171  004AB2  0E1F               	movlw	31
  4172  004AB4  657B               	cpfsgt	___fltol@exp1& (0+255),b
  4173  004AB6  D007               	goto	l13281
  4174  004AB8  D7D2               	goto	l13255
  4175  004ABA                     l13279:
  4176                           
  4177                           ; BSR set to: 0
  4178  004ABA  90D8               	bcf	status,0,c
  4179  004ABC  3776               	rlcf	___fltol@f1& (0+255),f,b
  4180  004ABE  3777               	rlcf	(___fltol@f1+1)& (0+255),f,b
  4181  004AC0  3778               	rlcf	(___fltol@f1+2)& (0+255),f,b
  4182  004AC2  3779               	rlcf	(___fltol@f1+3)& (0+255),f,b
  4183  004AC4  077B               	decf	___fltol@exp1& (0+255),f,b
  4184  004AC6                     l13281:
  4185                           
  4186                           ; BSR set to: 0
  4187  004AC6  677B               	tstfsz	___fltol@exp1& (0+255),b
  4188  004AC8  D7F8               	goto	l13279
  4189  004ACA                     l13283:
  4190                           
  4191                           ; BSR set to: 0
  4192  004ACA  517A               	movf	___fltol@sign1& (0+255),w,b
  4193  004ACC  E008               	bz	l13287
  4194                           
  4195                           ; BSR set to: 0
  4196  004ACE  1F79               	comf	(___fltol@f1+3)& (0+255),f,b
  4197  004AD0  1F78               	comf	(___fltol@f1+2)& (0+255),f,b
  4198  004AD2  1F77               	comf	(___fltol@f1+1)& (0+255),f,b
  4199  004AD4  6D76               	negf	___fltol@f1& (0+255),b
  4200  004AD6  0E00               	movlw	0
  4201  004AD8  2377               	addwfc	(___fltol@f1+1)& (0+255),f,b
  4202  004ADA  2378               	addwfc	(___fltol@f1+2)& (0+255),f,b
  4203  004ADC  2379               	addwfc	(___fltol@f1+3)& (0+255),f,b
  4204  004ADE                     l13287:
  4205                           
  4206                           ; BSR set to: 0
  4207  004ADE  C076  F076         	movff	___fltol@f1,?___fltol
  4208  004AE2  C077  F077         	movff	___fltol@f1+1,?___fltol+1
  4209  004AE6  C078  F078         	movff	___fltol@f1+2,?___fltol+2
  4210  004AEA  C079  F079         	movff	___fltol@f1+3,?___fltol+3
  4211  004AEE                     l1685:
  4212                           
  4213                           ; BSR set to: 0
  4214  004AEE  0012               	return	
  4215  004AF0                     __end_of___fltol:
  4216                           	opt stack 0
  4217                           tblptru	equ	0xFF8
  4218                           tblptrh	equ	0xFF7
  4219                           tblptrl	equ	0xFF6
  4220                           tablat	equ	0xFF5
  4221                           prodh	equ	0xFF4
  4222                           prodl	equ	0xFF3
  4223                           intcon	equ	0xFF2
  4224                           postinc0	equ	0xFEE
  4225                           wreg	equ	0xFE8
  4226                           indf1	equ	0xFE7
  4227                           postdec1	equ	0xFE5
  4228                           fsr1h	equ	0xFE2
  4229                           fsr1l	equ	0xFE1
  4230                           indf2	equ	0xFDF
  4231                           postinc2	equ	0xFDE
  4232                           postdec2	equ	0xFDD
  4233                           plusw2	equ	0xFDB
  4234                           fsr2h	equ	0xFDA
  4235                           fsr2l	equ	0xFD9
  4236                           status	equ	0xFD8
  4237                           
  4238 ;; *************** function _frexp *****************
  4239 ;; Defined at:
  4240 ;;		line 255 in file "/opt/microchip/xc8/v1.21/sources/common/frexp.c"
  4241 ;; Parameters:    Size  Location     Type
  4242 ;;  value           4   13[COMRAM] long 
  4243 ;;  eptr            2   17[COMRAM] PTR int 
  4244 ;;		 -> log@exponent(2), floor@expon(2), 
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;		None
  4247 ;; Return value:  Size  Location     Type
  4248 ;;                  4   13[COMRAM] PTR int 
  4249 ;; Registers used:
  4250 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4251 ;; Tracked objects:
  4252 ;;		On entry : F/0
  4253 ;;		On exit  : F/0
  4254 ;;		Unchanged: F/0
  4255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4256 ;;      Params:         6       0       0       0       0       0       0
  4257 ;;      Locals:         0       0       0       0       0       0       0
  4258 ;;      Temps:          3       0       0       0       0       0       0
  4259 ;;      Totals:         9       0       0       0       0       0       0
  4260 ;;Total ram usage:        9 bytes
  4261 ;; Hardware stack levels used:    1
  4262 ;; Hardware stack levels required when called:    2
  4263 ;; This function calls:
  4264 ;;		Nothing
  4265 ;; This function is called by:
  4266 ;;		_floor
  4267 ;;		_log
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           	psect	text14
  4272  004B86                     __ptext14:
  4273                           	opt stack 0
  4274  004B86                     _frexp:
  4275                           	opt stack 26
  4276                           
  4277                           ; BSR set to: 0
  4278                           
  4279                           ; BSR set to: 0
  4280                           ;incstack = 0
  4281                           ;incstack = 0
  4282  004B86  EE20  F00E         	lfsr	2,frexp@value
  4283  004B8A  50DE               	movf	postinc2,w,c
  4284  004B8C  10DE               	iorwf	postinc2,w,c
  4285  004B8E  10DE               	iorwf	postinc2,w,c
  4286  004B90  10DE               	iorwf	postinc2,w,c
  4287  004B92  E10C               	bnz	l13241
  4288                           
  4289                           ; BSR set to: 0
  4290  004B94  C012  FFD9         	movff	frexp@eptr,fsr2l
  4291  004B98  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4292  004B9C  0E00               	movlw	0
  4293  004B9E  6ADE               	clrf	postinc2,c
  4294  004BA0  6ADD               	clrf	postdec2,c
  4295                           
  4296                           ; BSR set to: 0
  4297  004BA2  6A0E               	clrf	?_frexp,c
  4298  004BA4  6A0F               	clrf	?_frexp+1,c
  4299  004BA6  6A10               	clrf	?_frexp+2,c
  4300  004BA8  6A11               	clrf	?_frexp+3,c
  4301  004BAA  D02F               	goto	l1701
  4302  004BAC                     l13241:
  4303                           
  4304                           ; BSR set to: 0
  4305  004BAC  5011               	movf	frexp@value+3,w,c
  4306  004BAE  0B7F               	andlw	127
  4307  004BB0  6E14               	movwf	??_frexp& (0+255),c
  4308  004BB2  90D8               	bcf	status,0,c
  4309  004BB4  3414               	rlcf	??_frexp,w,c
  4310  004BB6  6E15               	movwf	(??_frexp+1)& (0+255),c
  4311  004BB8  6A16               	clrf	(??_frexp+2)& (0+255),c
  4312  004BBA  3616               	rlcf	(??_frexp+2)& (0+255),f,c
  4313  004BBC  C012  FFD9         	movff	frexp@eptr,fsr2l
  4314  004BC0  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4315  004BC4  C015  FFDE         	movff	??_frexp+1,postinc2
  4316  004BC8  C016  FFDD         	movff	??_frexp+2,postdec2
  4317  004BCC  3410               	rlcf	frexp@value+2,w,c
  4318  004BCE  36E8               	rlcf	wreg,f,c
  4319  004BD0  0B01               	andlw	1
  4320  004BD2  C012  FFD9         	movff	frexp@eptr,fsr2l
  4321  004BD6  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4322  004BDA  12DE               	iorwf	postinc2,f,c
  4323  004BDC  0E00               	movlw	0
  4324  004BDE  12DD               	iorwf	postdec2,f,c
  4325                           
  4326                           ; BSR set to: 0
  4327  004BE0  C012  FFD9         	movff	frexp@eptr,fsr2l
  4328  004BE4  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4329  004BE8  0E82               	movlw	130
  4330  004BEA  26DE               	addwf	postinc2,f,c
  4331  004BEC  0EFF               	movlw	255
  4332  004BEE  22DD               	addwfc	postdec2,f,c
  4333                           
  4334                           ; BSR set to: 0
  4335  004BF0  5011               	movf	frexp@value+3,w,c
  4336  004BF2  0B80               	andlw	-128
  4337  004BF4  093F               	iorlw	63
  4338  004BF6  6E11               	movwf	frexp@value+3,c
  4339                           
  4340                           ; BSR set to: 0
  4341  004BF8  9E10               	bcf	frexp@value+2,7,c
  4342                           
  4343                           ; BSR set to: 0
  4344  004BFA  C00E  F00E         	movff	frexp@value,?_frexp
  4345  004BFE  C00F  F00F         	movff	frexp@value+1,?_frexp+1
  4346  004C02  C010  F010         	movff	frexp@value+2,?_frexp+2
  4347  004C06  C011  F011         	movff	frexp@value+3,?_frexp+3
  4348  004C0A                     l1701:
  4349                           
  4350                           ; BSR set to: 0
  4351  004C0A  0012               	return	
  4352  004C0C                     __end_of_frexp:
  4353                           	opt stack 0
  4354                           tblptru	equ	0xFF8
  4355                           tblptrh	equ	0xFF7
  4356                           tblptrl	equ	0xFF6
  4357                           tablat	equ	0xFF5
  4358                           prodh	equ	0xFF4
  4359                           prodl	equ	0xFF3
  4360                           intcon	equ	0xFF2
  4361                           postinc0	equ	0xFEE
  4362                           wreg	equ	0xFE8
  4363                           indf1	equ	0xFE7
  4364                           postdec1	equ	0xFE5
  4365                           fsr1h	equ	0xFE2
  4366                           fsr1l	equ	0xFE1
  4367                           indf2	equ	0xFDF
  4368                           postinc2	equ	0xFDE
  4369                           postdec2	equ	0xFDD
  4370                           plusw2	equ	0xFDB
  4371                           fsr2h	equ	0xFDA
  4372                           fsr2l	equ	0xFD9
  4373                           status	equ	0xFD8
  4374                           
  4375 ;; *************** function ___flge *****************
  4376 ;; Defined at:
  4377 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/common/flge.c"
  4378 ;; Parameters:    Size  Location     Type
  4379 ;;  ff1             4   13[COMRAM] PTR int 
  4380 ;;  ff2             4   17[COMRAM] PTR int 
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;		None
  4383 ;; Return value:  Size  Location     Type
  4384 ;;		None               void
  4385 ;; Registers used:
  4386 ;;		wreg, status,2, status,0
  4387 ;; Tracked objects:
  4388 ;;		On entry : 0/0
  4389 ;;		On exit  : 0/0
  4390 ;;		Unchanged: 0/0
  4391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4392 ;;      Params:         8       0       0       0       0       0       0
  4393 ;;      Locals:         0       0       0       0       0       0       0
  4394 ;;      Temps:          0       0       0       0       0       0       0
  4395 ;;      Totals:         8       0       0       0       0       0       0
  4396 ;;Total ram usage:        8 bytes
  4397 ;; Hardware stack levels used:    1
  4398 ;; Hardware stack levels required when called:    2
  4399 ;; This function calls:
  4400 ;;		Nothing
  4401 ;; This function is called by:
  4402 ;;		_exp
  4403 ;;		_floor
  4404 ;; This function uses a non-reentrant model
  4405 ;;
  4406                           
  4407                           	psect	text15
  4408  004F64                     __ptext15:
  4409                           	opt stack 0
  4410  004F64                     ___flge:
  4411                           	opt stack 26
  4412                           
  4413                           ; BSR set to: 0
  4414                           ;incstack = 0
  4415                           ;incstack = 0
  4416  004F64  AE11               	btfss	___flge@ff1+3,7,c
  4417  004F66  D009               	goto	l13215
  4418  004F68  6C0E               	negf	___flge@ff1,c
  4419  004F6A  1E0F               	comf	___flge@ff1+1,f,c
  4420  004F6C  B0D8               	btfsc	status,0,c
  4421  004F6E  2A0F               	incf	___flge@ff1+1,f,c
  4422  004F70  1E10               	comf	___flge@ff1+2,f,c
  4423  004F72  B0D8               	btfsc	status,0,c
  4424  004F74  2A10               	incf	___flge@ff1+2,f,c
  4425  004F76  0E80               	movlw	128
  4426  004F78  5611               	subfwb	___flge@ff1+3,f,c
  4427  004F7A                     l13215:
  4428  004F7A  AE15               	btfss	___flge@ff2+3,7,c
  4429  004F7C  D009               	goto	l1632
  4430  004F7E  6C12               	negf	___flge@ff2,c
  4431  004F80  1E13               	comf	___flge@ff2+1,f,c
  4432  004F82  B0D8               	btfsc	status,0,c
  4433  004F84  2A13               	incf	___flge@ff2+1,f,c
  4434  004F86  1E14               	comf	___flge@ff2+2,f,c
  4435  004F88  B0D8               	btfsc	status,0,c
  4436  004F8A  2A14               	incf	___flge@ff2+2,f,c
  4437  004F8C  0E80               	movlw	128
  4438  004F8E  5615               	subfwb	___flge@ff2+3,f,c
  4439  004F90                     l1632:
  4440  004F90  0E80               	movlw	128
  4441  004F92  1A11               	xorwf	___flge@ff1+3,f,c
  4442  004F94  1A15               	xorwf	___flge@ff2+3,f,c
  4443  004F96  5012               	movf	___flge@ff2,w,c
  4444  004F98  5C0E               	subwf	___flge@ff1,w,c
  4445  004F9A  5013               	movf	___flge@ff2+1,w,c
  4446  004F9C  580F               	subwfb	___flge@ff1+1,w,c
  4447  004F9E  5014               	movf	___flge@ff2+2,w,c
  4448  004FA0  5810               	subwfb	___flge@ff1+2,w,c
  4449  004FA2  5015               	movf	___flge@ff2+3,w,c
  4450  004FA4  5811               	subwfb	___flge@ff1+3,w,c
  4451  004FA6  E202               	bc	l13221
  4452  004FA8  90D8               	bcf	status,0,c
  4453  004FAA  D001               	goto	l1633
  4454  004FAC                     l13221:
  4455  004FAC  80D8               	bsf	status,0,c
  4456  004FAE                     l1633:
  4457  004FAE  0012               	return	
  4458  004FB0                     __end_of___flge:
  4459                           	opt stack 0
  4460                           tblptru	equ	0xFF8
  4461                           tblptrh	equ	0xFF7
  4462                           tblptrl	equ	0xFF6
  4463                           tablat	equ	0xFF5
  4464                           prodh	equ	0xFF4
  4465                           prodl	equ	0xFF3
  4466                           intcon	equ	0xFF2
  4467                           postinc0	equ	0xFEE
  4468                           wreg	equ	0xFE8
  4469                           indf1	equ	0xFE7
  4470                           postdec1	equ	0xFE5
  4471                           fsr1h	equ	0xFE2
  4472                           fsr1l	equ	0xFE1
  4473                           indf2	equ	0xFDF
  4474                           postinc2	equ	0xFDE
  4475                           postdec2	equ	0xFDD
  4476                           plusw2	equ	0xFDB
  4477                           fsr2h	equ	0xFDA
  4478                           fsr2l	equ	0xFD9
  4479                           status	equ	0xFD8
  4480                           
  4481 ;; *************** function ___altofl *****************
  4482 ;; Defined at:
  4483 ;;		line 37 in file "/opt/microchip/xc8/v1.21/sources/common/altofl.c"
  4484 ;; Parameters:    Size  Location     Type
  4485 ;;  c               4   42[BANK0 ] long 
  4486 ;; Auto vars:     Size  Location     Type
  4487 ;;  sign            1   46[BANK0 ] unsigned char 
  4488 ;; Return value:  Size  Location     Type
  4489 ;;                  4   42[BANK0 ] unsigned char 
  4490 ;; Registers used:
  4491 ;;		wreg, status,2, status,0, cstack
  4492 ;; Tracked objects:
  4493 ;;		On entry : F/0
  4494 ;;		On exit  : 0/0
  4495 ;;		Unchanged: 0/0
  4496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4497 ;;      Params:         0       4       0       0       0       0       0
  4498 ;;      Locals:         0       1       0       0       0       0       0
  4499 ;;      Temps:          0       0       0       0       0       0       0
  4500 ;;      Totals:         0       5       0       0       0       0       0
  4501 ;;Total ram usage:        5 bytes
  4502 ;; Hardware stack levels used:    1
  4503 ;; Hardware stack levels required when called:    3
  4504 ;; This function calls:
  4505 ;;		___flpack
  4506 ;; This function is called by:
  4507 ;;		_doWork
  4508 ;;		_floor
  4509 ;; This function uses a non-reentrant model
  4510 ;;
  4511                           
  4512                           	psect	text16
  4513  005090                     __ptext16:
  4514                           	opt stack 0
  4515  005090                     ___altofl:
  4516                           	opt stack 26
  4517                           
  4518                           ; BSR set to: 0
  4519                           
  4520                           ;incstack = 0
  4521                           ;incstack = 0
  4522  005090  6B8E               	clrf	___altofl@sign& (0+255),b
  4523  005092  AF8D               	btfss	(___altofl@c+3)& (0+255),7,b
  4524  005094  D00A               	goto	l12969
  4525                           
  4526                           ; BSR set to: 0
  4527  005096  1F8D               	comf	(___altofl@c+3)& (0+255),f,b
  4528  005098  1F8C               	comf	(___altofl@c+2)& (0+255),f,b
  4529  00509A  1F8B               	comf	(___altofl@c+1)& (0+255),f,b
  4530  00509C  6D8A               	negf	___altofl@c& (0+255),b
  4531  00509E  0E00               	movlw	0
  4532  0050A0  238B               	addwfc	(___altofl@c+1)& (0+255),f,b
  4533  0050A2  238C               	addwfc	(___altofl@c+2)& (0+255),f,b
  4534  0050A4  238D               	addwfc	(___altofl@c+3)& (0+255),f,b
  4535                           
  4536                           ; BSR set to: 0
  4537  0050A6  0E01               	movlw	1
  4538  0050A8  6F8E               	movwf	___altofl@sign& (0+255),b
  4539  0050AA                     l12969:
  4540                           
  4541                           ; BSR set to: 0
  4542  0050AA  C08A  F00E         	movff	___altofl@c,?___flpack
  4543  0050AE  C08B  F00F         	movff	___altofl@c+1,?___flpack+1
  4544  0050B2  C08C  F010         	movff	___altofl@c+2,?___flpack+2
  4545  0050B6  C08D  F011         	movff	___altofl@c+3,?___flpack+3
  4546  0050BA  0E96               	movlw	150
  4547  0050BC  6E12               	movwf	?___flpack+4,c
  4548  0050BE  C08E  F013         	movff	___altofl@sign,?___flpack+5
  4549  0050C2  ECC8  F022         	call	___flpack	;wreg free
  4550  0050C6  C011  F08D         	movff	?___flpack+3,?___altofl+3
  4551  0050CA  C010  F08C         	movff	?___flpack+2,?___altofl+2
  4552  0050CE  C00F  F08B         	movff	?___flpack+1,?___altofl+1
  4553  0050D2  C00E  F08A         	movff	?___flpack,?___altofl
  4554  0050D6  0012               	return	
  4555  0050D8                     __end_of___altofl:
  4556                           	opt stack 0
  4557                           tblptru	equ	0xFF8
  4558                           tblptrh	equ	0xFF7
  4559                           tblptrl	equ	0xFF6
  4560                           tablat	equ	0xFF5
  4561                           prodh	equ	0xFF4
  4562                           prodl	equ	0xFF3
  4563                           intcon	equ	0xFF2
  4564                           postinc0	equ	0xFEE
  4565                           wreg	equ	0xFE8
  4566                           indf1	equ	0xFE7
  4567                           postdec1	equ	0xFE5
  4568                           fsr1h	equ	0xFE2
  4569                           fsr1l	equ	0xFE1
  4570                           indf2	equ	0xFDF
  4571                           postinc2	equ	0xFDE
  4572                           postdec2	equ	0xFDD
  4573                           plusw2	equ	0xFDB
  4574                           fsr2h	equ	0xFDA
  4575                           fsr2l	equ	0xFD9
  4576                           status	equ	0xFD8
  4577                           
  4578 ;; *************** function ___asflsub *****************
  4579 ;; Defined at:
  4580 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/pic18/asflsub.c"
  4581 ;; Parameters:    Size  Location     Type
  4582 ;;  f1p             2   30[BANK0 ] PTR 
  4583 ;;		 -> exp@x(4), doWork@temp(4), 
  4584 ;;  f2              4   32[BANK0 ] PTR 
  4585 ;; Auto vars:     Size  Location     Type
  4586 ;;		None
  4587 ;; Return value:  Size  Location     Type
  4588 ;;                  4   30[BANK0 ] PTR 
  4589 ;; Registers used:
  4590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4591 ;; Tracked objects:
  4592 ;;		On entry : 0/0
  4593 ;;		On exit  : F/0
  4594 ;;		Unchanged: 0/0
  4595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4596 ;;      Params:         0       6       0       0       0       0       0
  4597 ;;      Locals:         0       0       0       0       0       0       0
  4598 ;;      Temps:          0       0       0       0       0       0       0
  4599 ;;      Totals:         0       6       0       0       0       0       0
  4600 ;;Total ram usage:        6 bytes
  4601 ;; Hardware stack levels used:    1
  4602 ;; Hardware stack levels required when called:    5
  4603 ;; This function calls:
  4604 ;;		___flsub
  4605 ;; This function is called by:
  4606 ;;		_doWork
  4607 ;;		_exp
  4608 ;; This function uses a non-reentrant model
  4609 ;;
  4610                           
  4611                           	psect	text17
  4612  004F16                     __ptext17:
  4613                           	opt stack 0
  4614  004F16                     ___asflsub:
  4615                           	opt stack 24
  4616                           
  4617                           ;	Return value of ___asflsub is never used
  4618                           
  4619                           ;incstack = 0
  4620                           ;incstack = 0
  4621  004F16  C07E  FFD9         	movff	___asflsub@f1p,fsr2l
  4622  004F1A  C07F  FFDA         	movff	___asflsub@f1p+1,fsr2h
  4623  004F1E  0100               	movlb	0	; () banked
  4624  004F20  CFDE F076          	movff	postinc2,?___flsub
  4625  004F24  CFDE F077          	movff	postinc2,?___flsub+1
  4626  004F28  CFDE F078          	movff	postinc2,?___flsub+2
  4627  004F2C  CFDE F079          	movff	postinc2,?___flsub+3
  4628  004F30  C080  F07A         	movff	___asflsub@f2,?___flsub+4
  4629  004F34  C081  F07B         	movff	___asflsub@f2+1,?___flsub+5
  4630  004F38  C082  F07C         	movff	___asflsub@f2+2,?___flsub+6
  4631  004F3C  C083  F07D         	movff	___asflsub@f2+3,?___flsub+7
  4632  004F40  EC13  F029         	call	___flsub	;wreg free
  4633  004F44  C07E  FFD9         	movff	___asflsub@f1p,fsr2l
  4634  004F48  C07F  FFDA         	movff	___asflsub@f1p+1,fsr2h
  4635  004F4C  0100               	movlb	0	; () banked
  4636  004F4E  C076  FFDE         	movff	?___flsub,postinc2
  4637  004F52  C077  FFDE         	movff	?___flsub+1,postinc2
  4638  004F56  C078  FFDE         	movff	?___flsub+2,postinc2
  4639  004F5A  C079  FFDD         	movff	?___flsub+3,postdec2
  4640  004F5E  06D9               	decf	fsr2l,f,c
  4641  004F60  06D9               	decf	fsr2l,f,c
  4642                           
  4643                           ; BSR set to: 0
  4644  004F62  0012               	return	
  4645  004F64                     __end_of___asflsub:
  4646                           	opt stack 0
  4647                           tblptru	equ	0xFF8
  4648                           tblptrh	equ	0xFF7
  4649                           tblptrl	equ	0xFF6
  4650                           tablat	equ	0xFF5
  4651                           prodh	equ	0xFF4
  4652                           prodl	equ	0xFF3
  4653                           intcon	equ	0xFF2
  4654                           postinc0	equ	0xFEE
  4655                           wreg	equ	0xFE8
  4656                           indf1	equ	0xFE7
  4657                           postdec1	equ	0xFE5
  4658                           fsr1h	equ	0xFE2
  4659                           fsr1l	equ	0xFE1
  4660                           indf2	equ	0xFDF
  4661                           postinc2	equ	0xFDE
  4662                           postdec2	equ	0xFDD
  4663                           plusw2	equ	0xFDB
  4664                           fsr2h	equ	0xFDA
  4665                           fsr2l	equ	0xFD9
  4666                           status	equ	0xFD8
  4667                           
  4668 ;; *************** function ___flsub *****************
  4669 ;; Defined at:
  4670 ;;		line 22 in file "/opt/microchip/xc8/v1.21/sources/common/flsub.c"
  4671 ;; Parameters:    Size  Location     Type
  4672 ;;  f1              4   22[BANK0 ] PTR 
  4673 ;;  f2              4   26[BANK0 ] PTR 
  4674 ;; Auto vars:     Size  Location     Type
  4675 ;;		None
  4676 ;; Return value:  Size  Location     Type
  4677 ;;                  4   22[BANK0 ] PTR 
  4678 ;; Registers used:
  4679 ;;		wreg, status,2, status,0, cstack
  4680 ;; Tracked objects:
  4681 ;;		On entry : 0/0
  4682 ;;		On exit  : 0/0
  4683 ;;		Unchanged: 0/0
  4684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4685 ;;      Params:         0       8       0       0       0       0       0
  4686 ;;      Locals:         0       0       0       0       0       0       0
  4687 ;;      Temps:          0       0       0       0       0       0       0
  4688 ;;      Totals:         0       8       0       0       0       0       0
  4689 ;;Total ram usage:        8 bytes
  4690 ;; Hardware stack levels used:    1
  4691 ;; Hardware stack levels required when called:    4
  4692 ;; This function calls:
  4693 ;;		___fladd
  4694 ;; This function is called by:
  4695 ;;		_doWork
  4696 ;;		___asflsub
  4697 ;; This function uses a non-reentrant model
  4698 ;;
  4699                           
  4700                           	psect	text18
  4701  005226                     __ptext18:
  4702                           	opt stack 0
  4703  005226                     ___flsub:
  4704                           	opt stack 25
  4705                           
  4706                           ; BSR set to: 0
  4707                           ;incstack = 0
  4708                           ;incstack = 0
  4709  005226  0100               	movlb	0	; () banked
  4710  005228  0E80               	movlw	128
  4711  00522A  1B7D               	xorwf	(___flsub@f2+3)& (0+255),f,b
  4712                           
  4713                           ; BSR set to: 0
  4714  00522C  C076  F01D         	movff	___flsub@f1,?___fladd
  4715  005230  C077  F01E         	movff	___flsub@f1+1,?___fladd+1
  4716  005234  C078  F01F         	movff	___flsub@f1+2,?___fladd+2
  4717  005238  C079  F020         	movff	___flsub@f1+3,?___fladd+3
  4718  00523C  C07A  F021         	movff	___flsub@f2,?___fladd+4
  4719  005240  C07B  F022         	movff	___flsub@f2+1,?___fladd+5
  4720  005244  C07C  F023         	movff	___flsub@f2+2,?___fladd+6
  4721  005248  C07D  F024         	movff	___flsub@f2+3,?___fladd+7
  4722  00524C  ECB9  F01D         	call	___fladd	;wreg free
  4723  005250  C020  F079         	movff	?___fladd+3,?___flsub+3
  4724  005254  C01F  F078         	movff	?___fladd+2,?___flsub+2
  4725  005258  C01E  F077         	movff	?___fladd+1,?___flsub+1
  4726  00525C  C01D  F076         	movff	?___fladd,?___flsub
  4727  005260  0012               	return	
  4728  005262                     __end_of___flsub:
  4729                           	opt stack 0
  4730                           tblptru	equ	0xFF8
  4731                           tblptrh	equ	0xFF7
  4732                           tblptrl	equ	0xFF6
  4733                           tablat	equ	0xFF5
  4734                           prodh	equ	0xFF4
  4735                           prodl	equ	0xFF3
  4736                           intcon	equ	0xFF2
  4737                           postinc0	equ	0xFEE
  4738                           wreg	equ	0xFE8
  4739                           indf1	equ	0xFE7
  4740                           postdec1	equ	0xFE5
  4741                           fsr1h	equ	0xFE2
  4742                           fsr1l	equ	0xFE1
  4743                           indf2	equ	0xFDF
  4744                           postinc2	equ	0xFDE
  4745                           postdec2	equ	0xFDD
  4746                           plusw2	equ	0xFDB
  4747                           fsr2h	equ	0xFDA
  4748                           fsr2l	equ	0xFD9
  4749                           status	equ	0xFD8
  4750                           
  4751 ;; *************** function ___asflmul *****************
  4752 ;; Defined at:
  4753 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/pic18/asflmul.c"
  4754 ;; Parameters:    Size  Location     Type
  4755 ;;  mp              1    wreg     PTR 
  4756 ;;		 -> exp@x(4), 
  4757 ;;  multiplicand    4   22[BANK0 ] PTR 
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;  mp              1   65[COMRAM] PTR 
  4760 ;;		 -> exp@x(4), 
  4761 ;; Return value:  Size  Location     Type
  4762 ;;                  4   22[BANK0 ] PTR 
  4763 ;; Registers used:
  4764 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4765 ;; Tracked objects:
  4766 ;;		On entry : F/0
  4767 ;;		On exit  : F/0
  4768 ;;		Unchanged: 0/0
  4769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4770 ;;      Params:         0       4       0       0       0       0       0
  4771 ;;      Locals:         1       0       0       0       0       0       0
  4772 ;;      Temps:          0       0       0       0       0       0       0
  4773 ;;      Totals:         1       4       0       0       0       0       0
  4774 ;;Total ram usage:        5 bytes
  4775 ;; Hardware stack levels used:    1
  4776 ;; Hardware stack levels required when called:    4
  4777 ;; This function calls:
  4778 ;;		___flmul
  4779 ;; This function is called by:
  4780 ;;		_exp
  4781 ;; This function uses a non-reentrant model
  4782 ;;
  4783                           
  4784                           	psect	text19
  4785  004FB0                     __ptext19:
  4786                           	opt stack 0
  4787  004FB0                     ___asflmul:
  4788                           	opt stack 24
  4789                           
  4790                           ;incstack = 0
  4791                           ;incstack = 0
  4792                           ;___asflmul@mp stored from wreg
  4793  004FB0  CFE8 F042          	movff	wreg,___asflmul@mp
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;	Return value of ___asflmul is never used
  4797  004FB4  5042               	movf	___asflmul@mp,w,c
  4798  004FB6  6ED9               	movwf	fsr2l,c
  4799  004FB8  6ADA               	clrf	fsr2h,c
  4800  004FBA  CFDE F060          	movff	postinc2,?___flmul
  4801  004FBE  CFDE F061          	movff	postinc2,?___flmul+1
  4802  004FC2  CFDE F062          	movff	postinc2,?___flmul+2
  4803  004FC6  CFDE F063          	movff	postinc2,?___flmul+3
  4804  004FCA  C076  F064         	movff	___asflmul@multiplicand,?___flmul+4
  4805  004FCE  C077  F065         	movff	___asflmul@multiplicand+1,?___flmul+5
  4806  004FD2  C078  F066         	movff	___asflmul@multiplicand+2,?___flmul+6
  4807  004FD6  C079  F067         	movff	___asflmul@multiplicand+3,?___flmul+7
  4808  004FDA  ECA8  F021         	call	___flmul	;wreg free
  4809  004FDE  5042               	movf	___asflmul@mp,w,c
  4810  004FE0  6ED9               	movwf	fsr2l,c
  4811  004FE2  6ADA               	clrf	fsr2h,c
  4812  004FE4  0100               	movlb	0	; () banked
  4813  004FE6  C060  FFDE         	movff	?___flmul,postinc2
  4814  004FEA  C061  FFDE         	movff	?___flmul+1,postinc2
  4815  004FEE  C062  FFDE         	movff	?___flmul+2,postinc2
  4816  004FF2  C063  FFDD         	movff	?___flmul+3,postdec2
  4817  004FF6  06D9               	decf	fsr2l,f,c
  4818  004FF8  06D9               	decf	fsr2l,f,c
  4819                           
  4820                           ; BSR set to: 0
  4821  004FFA  0012               	return	
  4822  004FFC                     __end_of___asflmul:
  4823                           	opt stack 0
  4824                           tblptru	equ	0xFF8
  4825                           tblptrh	equ	0xFF7
  4826                           tblptrl	equ	0xFF6
  4827                           tablat	equ	0xFF5
  4828                           prodh	equ	0xFF4
  4829                           prodl	equ	0xFF3
  4830                           intcon	equ	0xFF2
  4831                           postinc0	equ	0xFEE
  4832                           wreg	equ	0xFE8
  4833                           indf1	equ	0xFE7
  4834                           postdec1	equ	0xFE5
  4835                           fsr1h	equ	0xFE2
  4836                           fsr1l	equ	0xFE1
  4837                           indf2	equ	0xFDF
  4838                           postinc2	equ	0xFDE
  4839                           postdec2	equ	0xFDD
  4840                           plusw2	equ	0xFDB
  4841                           fsr2h	equ	0xFDA
  4842                           fsr2l	equ	0xFD9
  4843                           status	equ	0xFD8
  4844                           
  4845 ;; *************** function ___fldiv *****************
  4846 ;; Defined at:
  4847 ;;		line 50 in file "/opt/microchip/xc8/v1.21/sources/common/fldiv.c"
  4848 ;; Parameters:    Size  Location     Type
  4849 ;;  f1              4   43[COMRAM] PTR 
  4850 ;;  f2              4   47[COMRAM] PTR 
  4851 ;; Auto vars:     Size  Location     Type
  4852 ;;  f3              4   58[COMRAM] PTR 
  4853 ;;  sign            1   64[COMRAM] unsigned char 
  4854 ;;  exp             1   63[COMRAM] unsigned char 
  4855 ;;  cntr            1   62[COMRAM] unsigned char 
  4856 ;; Return value:  Size  Location     Type
  4857 ;;                  4   43[COMRAM] unsigned char 
  4858 ;; Registers used:
  4859 ;;		wreg, status,2, status,0, cstack
  4860 ;; Tracked objects:
  4861 ;;		On entry : 0/1
  4862 ;;		On exit  : 0/0
  4863 ;;		Unchanged: 0/0
  4864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4865 ;;      Params:         8       0       0       0       0       0       0
  4866 ;;      Locals:        14       0       0       0       0       0       0
  4867 ;;      Temps:          0       0       0       0       0       0       0
  4868 ;;      Totals:        22       0       0       0       0       0       0
  4869 ;;Total ram usage:       22 bytes
  4870 ;; Hardware stack levels used:    1
  4871 ;; Hardware stack levels required when called:    3
  4872 ;; This function calls:
  4873 ;;		___flpack
  4874 ;; This function is called by:
  4875 ;;		_doWork
  4876 ;;		_Celsius2Fahrenheit
  4877 ;;		___asfldiv
  4878 ;;		_exp
  4879 ;; This function uses a non-reentrant model
  4880 ;;
  4881                           
  4882                           	psect	text20
  4883  004866                     __ptext20:
  4884                           	opt stack 0
  4885  004866                     ___fldiv:
  4886                           	opt stack 26
  4887                           
  4888                           ; BSR set to: 0
  4889                           ;incstack = 0
  4890                           ;incstack = 0
  4891  004866  342E               	rlcf	(___fldiv@f1+2)& (0+255),w,c
  4892  004868  342F               	rlcf	(___fldiv@f1+3)& (0+255),w,c
  4893  00486A  6E40               	movwf	___fldiv@exp,c
  4894  00486C  6640               	tstfsz	___fldiv@exp& (0+255),c
  4895  00486E  D001               	goto	l13053
  4896  004870  D005               	goto	u10040
  4897  004872                     l13053:
  4898  004872  3432               	rlcf	(___fldiv@f2+2)& (0+255),w,c
  4899  004874  3433               	rlcf	(___fldiv@f2+3)& (0+255),w,c
  4900  004876  6E41               	movwf	___fldiv@sign,c
  4901  004878  6641               	tstfsz	___fldiv@sign& (0+255),c
  4902  00487A  D005               	goto	l13057
  4903  00487C                     u10040:
  4904  00487C  6A2C               	clrf	?___fldiv,c
  4905  00487E  6A2D               	clrf	?___fldiv+1,c
  4906  004880  6A2E               	clrf	?___fldiv+2,c
  4907  004882  6A2F               	clrf	?___fldiv+3,c
  4908  004884  D043               	goto	l1624
  4909  004886                     l13057:
  4910  004886  5041               	movf	___fldiv@sign,w,c
  4911  004888  0F89               	addlw	137
  4912  00488A  5E40               	subwf	___fldiv@exp,f,c
  4913  00488C  C02F  F041         	movff	___fldiv@f1+3,___fldiv@sign
  4914  004890  5033               	movf	(___fldiv@f2+3)& (0+255),w,c
  4915  004892  1A41               	xorwf	___fldiv@sign,f,c
  4916  004894  0E80               	movlw	128
  4917  004896  1641               	andwf	___fldiv@sign,f,c
  4918  004898  8E2E               	bsf	___fldiv@f1+2,7,c
  4919  00489A  6A2F               	clrf	___fldiv@f1+3,c
  4920  00489C  8E32               	bsf	___fldiv@f2+2,7,c
  4921  00489E  6A33               	clrf	___fldiv@f2+3,c
  4922  0048A0  0E20               	movlw	32
  4923  0048A2  6E3F               	movwf	___fldiv@cntr,c
  4924  0048A4                     l13069:
  4925  0048A4  90D8               	bcf	status,0,c
  4926  0048A6  363B               	rlcf	___fldiv@f3,f,c
  4927  0048A8  363C               	rlcf	___fldiv@f3+1,f,c
  4928  0048AA  363D               	rlcf	___fldiv@f3+2,f,c
  4929  0048AC  363E               	rlcf	___fldiv@f3+3,f,c
  4930  0048AE  5030               	movf	___fldiv@f2,w,c
  4931  0048B0  5C2C               	subwf	___fldiv@f1,w,c
  4932  0048B2  5031               	movf	___fldiv@f2+1,w,c
  4933  0048B4  582D               	subwfb	___fldiv@f1+1,w,c
  4934  0048B6  5032               	movf	___fldiv@f2+2,w,c
  4935  0048B8  582E               	subwfb	___fldiv@f1+2,w,c
  4936  0048BA  5033               	movf	___fldiv@f2+3,w,c
  4937  0048BC  582F               	subwfb	___fldiv@f1+3,w,c
  4938  0048BE  E309               	bnc	l13077
  4939  0048C0  5030               	movf	___fldiv@f2,w,c
  4940  0048C2  5E2C               	subwf	___fldiv@f1,f,c
  4941  0048C4  5031               	movf	___fldiv@f2+1,w,c
  4942  0048C6  5A2D               	subwfb	___fldiv@f1+1,f,c
  4943  0048C8  5032               	movf	___fldiv@f2+2,w,c
  4944  0048CA  5A2E               	subwfb	___fldiv@f1+2,f,c
  4945  0048CC  5033               	movf	___fldiv@f2+3,w,c
  4946  0048CE  5A2F               	subwfb	___fldiv@f1+3,f,c
  4947  0048D0  803B               	bsf	___fldiv@f3,0,c
  4948  0048D2                     l13077:
  4949  0048D2  90D8               	bcf	status,0,c
  4950  0048D4  362C               	rlcf	___fldiv@f1,f,c
  4951  0048D6  362D               	rlcf	___fldiv@f1+1,f,c
  4952  0048D8  362E               	rlcf	___fldiv@f1+2,f,c
  4953  0048DA  362F               	rlcf	___fldiv@f1+3,f,c
  4954  0048DC  2E3F               	decfsz	___fldiv@cntr,f,c
  4955  0048DE  D7E2               	goto	l13069
  4956  0048E0  C03B  F00E         	movff	___fldiv@f3,?___flpack
  4957  0048E4  C03C  F00F         	movff	___fldiv@f3+1,?___flpack+1
  4958  0048E8  C03D  F010         	movff	___fldiv@f3+2,?___flpack+2
  4959  0048EC  C03E  F011         	movff	___fldiv@f3+3,?___flpack+3
  4960  0048F0  C040  F012         	movff	___fldiv@exp,?___flpack+4
  4961  0048F4  C041  F013         	movff	___fldiv@sign,?___flpack+5
  4962  0048F8  ECC8  F022         	call	___flpack	;wreg free
  4963  0048FC  C011  F02F         	movff	?___flpack+3,?___fldiv+3
  4964  004900  C010  F02E         	movff	?___flpack+2,?___fldiv+2
  4965  004904  C00F  F02D         	movff	?___flpack+1,?___fldiv+1
  4966  004908  C00E  F02C         	movff	?___flpack,?___fldiv
  4967  00490C                     l1624:
  4968  00490C  0012               	return	
  4969  00490E                     __end_of___fldiv:
  4970                           	opt stack 0
  4971                           tblptru	equ	0xFF8
  4972                           tblptrh	equ	0xFF7
  4973                           tblptrl	equ	0xFF6
  4974                           tablat	equ	0xFF5
  4975                           prodh	equ	0xFF4
  4976                           prodl	equ	0xFF3
  4977                           intcon	equ	0xFF2
  4978                           postinc0	equ	0xFEE
  4979                           wreg	equ	0xFE8
  4980                           indf1	equ	0xFE7
  4981                           postdec1	equ	0xFE5
  4982                           fsr1h	equ	0xFE2
  4983                           fsr1l	equ	0xFE1
  4984                           indf2	equ	0xFDF
  4985                           postinc2	equ	0xFDE
  4986                           postdec2	equ	0xFDD
  4987                           plusw2	equ	0xFDB
  4988                           fsr2h	equ	0xFDA
  4989                           fsr2l	equ	0xFD9
  4990                           status	equ	0xFD8
  4991                           
  4992 ;; *************** function _vscp_doOneSecondWork *****************
  4993 ;; Defined at:
  4994 ;;		line 513 in file "../../vscp_firmware/common/vscp_firmware.c"
  4995 ;; Parameters:    Size  Location     Type
  4996 ;;		None
  4997 ;; Auto vars:     Size  Location     Type
  4998 ;;		None
  4999 ;; Return value:  Size  Location     Type
  5000 ;;		None               void
  5001 ;; Registers used:
  5002 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5003 ;; Tracked objects:
  5004 ;;		On entry : F/0
  5005 ;;		On exit  : F/0
  5006 ;;		Unchanged: 0/0
  5007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5008 ;;      Params:         0       0       0       0       0       0       0
  5009 ;;      Locals:         0       0       0       0       0       0       0
  5010 ;;      Temps:          0       1       0       0       0       0       0
  5011 ;;      Totals:         0       1       0       0       0       0       0
  5012 ;;Total ram usage:        1 bytes
  5013 ;; Hardware stack levels used:    1
  5014 ;; Hardware stack levels required when called:    8
  5015 ;; This function calls:
  5016 ;;		_vscp_getZone
  5017 ;;		_vscp_getSubzone
  5018 ;;		_vscp_sendHeartBeat
  5019 ;; This function is called by:
  5020 ;;		_main
  5021 ;; This function uses a non-reentrant model
  5022 ;;
  5023                           
  5024                           	psect	text21
  5025  004EC2                     __ptext21:
  5026                           	opt stack 0
  5027  004EC2                     _vscp_doOneSecondWork:
  5028                           	opt stack 22
  5029                           
  5030                           ; BSR set to: 0
  5031                           ;vscp_firmware.c: 515: ++vscp_second;
  5032                           
  5033                           ;incstack = 0
  5034                           ;incstack = 0
  5035  004EC2  2A51               	incf	_vscp_second,f,c
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;vscp_firmware.c: 517: if (vscp_second > 59) {
  5039  004EC4  0E3B               	movlw	59
  5040  004EC6  6451               	cpfsgt	_vscp_second,c
  5041  004EC8  D00E               	goto	l11443
  5042                           
  5043                           ; BSR set to: 0
  5044                           ;vscp_firmware.c: 518: vscp_second = 0;
  5045  004ECA  6A51               	clrf	_vscp_second,c
  5046                           
  5047                           ; BSR set to: 0
  5048                           ;vscp_firmware.c: 519: vscp_minute++;
  5049  004ECC  0101               	movlb	1	; () banked
  5050  004ECE  2B21               	incf	_vscp_minute& (0+255),f,b
  5051                           
  5052                           ; BSR set to: 1
  5053                           ;vscp_firmware.c: 522: if (0x03 == vscp_node_state) {
  5054  004ED0  0100               	movlb	0	; () banked
  5055  004ED2  51BC               	movf	_vscp_node_state& (0+255),w,b
  5056  004ED4  0A03               	xorlw	3
  5057  004ED6  E107               	bnz	l11443
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;vscp_firmware.c: 523: vscp_sendHeartBeat(vscp_getZone(),
  5061                           ;vscp_firmware.c: 524: vscp_getSubzone());
  5062  004ED8  ECAA  F02B         	call	_vscp_getSubzone	;wreg free
  5063  004EDC  6E44               	movwf	?_vscp_sendHeartBeat,c
  5064  004EDE  ECAF  F02B         	call	_vscp_getZone	;wreg free
  5065  004EE2  EC6E  F02A         	call	_vscp_sendHeartBeat
  5066  004EE6                     l11443:
  5067                           
  5068                           ;vscp_firmware.c: 525: }
  5069                           ;vscp_firmware.c: 526: }
  5070                           ;vscp_firmware.c: 528: if (vscp_minute > 59) {
  5071  004EE6  0E3B               	movlw	59
  5072  004EE8  0101               	movlb	1	; () banked
  5073  004EEA  6521               	cpfsgt	_vscp_minute& (0+255),b
  5074  004EEC  D002               	goto	l11449
  5075                           
  5076                           ; BSR set to: 1
  5077                           ;vscp_firmware.c: 529: vscp_minute = 0;
  5078  004EEE  6B21               	clrf	_vscp_minute& (0+255),b
  5079                           
  5080                           ; BSR set to: 1
  5081                           ;vscp_firmware.c: 530: vscp_hour++;
  5082  004EF0  2B20               	incf	_vscp_hour& (0+255),f,b
  5083  004EF2                     l11449:
  5084                           
  5085                           ; BSR set to: 1
  5086                           ;vscp_firmware.c: 531: }
  5087                           ;vscp_firmware.c: 533: if (vscp_hour > 23) vscp_hour = 0;
  5088  004EF2  0E17               	movlw	23
  5089  004EF4  6520               	cpfsgt	_vscp_hour& (0+255),b
  5090  004EF6  D001               	goto	l11453
  5091                           
  5092                           ; BSR set to: 1
  5093  004EF8  6B20               	clrf	_vscp_hour& (0+255),b
  5094  004EFA                     l11453:
  5095                           
  5096                           ; BSR set to: 1
  5097                           ;vscp_firmware.c: 537: if (0x03 == vscp_node_state) {
  5098  004EFA  0100               	movlb	0	; () banked
  5099  004EFC  51BC               	movf	_vscp_node_state& (0+255),w,b
  5100  004EFE  0A03               	xorlw	3
  5101  004F00  E109               	bnz	l1085
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;vscp_firmware.c: 538: vscp_guid_reset++;
  5105  004F02  2A4C               	incf	_vscp_guid_reset,f,c
  5106                           
  5107                           ; BSR set to: 0
  5108                           ;vscp_firmware.c: 539: if ((vscp_guid_reset & 0x0f) >= 2) {
  5109  004F04  C04C  F07F         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  5110  004F08  0E0F               	movlw	15
  5111  004F0A  177F               	andwf	??_vscp_doOneSecondWork& (0+255),f,b
  5112  004F0C  0E02               	movlw	2
  5113  004F0E  5D7F               	subwf	??_vscp_doOneSecondWork& (0+255),w,b
  5114  004F10  B0D8               	btfsc	status,0,c
  5115                           
  5116                           ; BSR set to: 0
  5117                           ;vscp_firmware.c: 540: vscp_guid_reset = 0;
  5118  004F12  6A4C               	clrf	_vscp_guid_reset,c
  5119  004F14                     l1085:
  5120                           
  5121                           ; BSR set to: 0
  5122  004F14  0012               	return	
  5123  004F16                     __end_of_vscp_doOneSecondWork:
  5124                           	opt stack 0
  5125                           tblptru	equ	0xFF8
  5126                           tblptrh	equ	0xFF7
  5127                           tblptrl	equ	0xFF6
  5128                           tablat	equ	0xFF5
  5129                           prodh	equ	0xFF4
  5130                           prodl	equ	0xFF3
  5131                           intcon	equ	0xFF2
  5132                           postinc0	equ	0xFEE
  5133                           wreg	equ	0xFE8
  5134                           indf1	equ	0xFE7
  5135                           postdec1	equ	0xFE5
  5136                           fsr1h	equ	0xFE2
  5137                           fsr1l	equ	0xFE1
  5138                           indf2	equ	0xFDF
  5139                           postinc2	equ	0xFDE
  5140                           postdec2	equ	0xFDD
  5141                           plusw2	equ	0xFDB
  5142                           fsr2h	equ	0xFDA
  5143                           fsr2l	equ	0xFD9
  5144                           status	equ	0xFD8
  5145                           
  5146 ;; *************** function _vscp_sendHeartBeat *****************
  5147 ;; Defined at:
  5148 ;;		line 382 in file "../../vscp_firmware/common/vscp_firmware.c"
  5149 ;; Parameters:    Size  Location     Type
  5150 ;;  zone            1    wreg     unsigned char 
  5151 ;;  subzone         1   67[COMRAM] unsigned char 
  5152 ;; Auto vars:     Size  Location     Type
  5153 ;;  zone            1   68[COMRAM] unsigned char 
  5154 ;; Return value:  Size  Location     Type
  5155 ;;		None               void
  5156 ;; Registers used:
  5157 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5158 ;; Tracked objects:
  5159 ;;		On entry : 0/0
  5160 ;;		On exit  : 0/0
  5161 ;;		Unchanged: 0/0
  5162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5163 ;;      Params:         1       0       0       0       0       0       0
  5164 ;;      Locals:         1       0       0       0       0       0       0
  5165 ;;      Temps:          0       0       0       0       0       0       0
  5166 ;;      Totals:         2       0       0       0       0       0       0
  5167 ;;Total ram usage:        2 bytes
  5168 ;; Hardware stack levels used:    1
  5169 ;; Hardware stack levels required when called:    7
  5170 ;; This function calls:
  5171 ;;		_vscp_sendEvent
  5172 ;; This function is called by:
  5173 ;;		_vscp_doOneSecondWork
  5174 ;; This function uses a non-reentrant model
  5175 ;;
  5176                           
  5177                           	psect	text22
  5178  0054DC                     __ptext22:
  5179                           	opt stack 0
  5180  0054DC                     _vscp_sendHeartBeat:
  5181                           	opt stack 22
  5182                           
  5183                           ; BSR set to: 0
  5184                           ;incstack = 0
  5185                           ;incstack = 0
  5186                           ;vscp_sendHeartBeat@zone stored from wreg
  5187  0054DC  CFE8 F045          	movff	wreg,vscp_sendHeartBeat@zone
  5188                           
  5189                           ;vscp_firmware.c: 383: vscp_omsg.flags = 0x80 + 3;
  5190  0054E0  0E83               	movlw	131
  5191  0054E2  0100               	movlb	0	; () banked
  5192  0054E4  6FCB               	movwf	_vscp_omsg& (0+255),b
  5193                           
  5194                           ;vscp_firmware.c: 384: vscp_omsg.priority = 0x07;
  5195  0054E6  0E07               	movlw	7
  5196  0054E8  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  5197                           
  5198                           ;vscp_firmware.c: 385: vscp_omsg.vscp_class = 20;
  5199  0054EA  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5200  0054EC  0E14               	movlw	20
  5201  0054EE  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  5202                           
  5203                           ;vscp_firmware.c: 386: vscp_omsg.vscp_type = 9;
  5204  0054F0  0E09               	movlw	9
  5205  0054F2  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  5206                           
  5207                           ; BSR set to: 0
  5208                           ;vscp_firmware.c: 387: vscp_omsg.data[ 0 ] = 0;
  5209  0054F4  6BD1               	clrf	(_vscp_omsg+6)& (0+255),b
  5210                           
  5211                           ; BSR set to: 0
  5212                           ;vscp_firmware.c: 388: vscp_omsg.data[ 1 ] = zone;
  5213  0054F6  C045  F0D2         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+7
  5214                           
  5215                           ; BSR set to: 0
  5216                           ;vscp_firmware.c: 389: vscp_omsg.data[ 2 ] = subzone;
  5217  0054FA  C044  F0D3         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+8
  5218                           
  5219                           ; BSR set to: 0
  5220                           ;vscp_firmware.c: 392: vscp_sendEvent();
  5221  0054FE  EFEE  F029         	goto	_vscp_sendEvent	;wreg free
  5222  005502                     __end_of_vscp_sendHeartBeat:
  5223                           	opt stack 0
  5224                           tblptru	equ	0xFF8
  5225                           tblptrh	equ	0xFF7
  5226                           tblptrl	equ	0xFF6
  5227                           tablat	equ	0xFF5
  5228                           prodh	equ	0xFF4
  5229                           prodl	equ	0xFF3
  5230                           intcon	equ	0xFF2
  5231                           postinc0	equ	0xFEE
  5232                           wreg	equ	0xFE8
  5233                           indf1	equ	0xFE7
  5234                           postdec1	equ	0xFE5
  5235                           fsr1h	equ	0xFE2
  5236                           fsr1l	equ	0xFE1
  5237                           indf2	equ	0xFDF
  5238                           postinc2	equ	0xFDE
  5239                           postdec2	equ	0xFDD
  5240                           plusw2	equ	0xFDB
  5241                           fsr2h	equ	0xFDA
  5242                           fsr2l	equ	0xFD9
  5243                           status	equ	0xFD8
  5244                           
  5245 ;; *************** function _vscp_getSubzone *****************
  5246 ;; Defined at:
  5247 ;;		line 2788 in file "../main.c"
  5248 ;; Parameters:    Size  Location     Type
  5249 ;;		None
  5250 ;; Auto vars:     Size  Location     Type
  5251 ;;		None
  5252 ;; Return value:  Size  Location     Type
  5253 ;;                  1    wreg      unsigned char 
  5254 ;; Registers used:
  5255 ;;		wreg, status,2, cstack
  5256 ;; Tracked objects:
  5257 ;;		On entry : F/0
  5258 ;;		On exit  : 0/0
  5259 ;;		Unchanged: 0/0
  5260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5261 ;;      Params:         0       0       0       0       0       0       0
  5262 ;;      Locals:         0       0       0       0       0       0       0
  5263 ;;      Temps:          0       0       0       0       0       0       0
  5264 ;;      Totals:         0       0       0       0       0       0       0
  5265 ;;Total ram usage:        0 bytes
  5266 ;; Hardware stack levels used:    1
  5267 ;; Hardware stack levels required when called:    3
  5268 ;; This function calls:
  5269 ;;		_Read_b_eep
  5270 ;; This function is called by:
  5271 ;;		_vscp_doOneSecondWork
  5272 ;; This function uses a non-reentrant model
  5273 ;;
  5274                           
  5275                           	psect	text23
  5276  005754                     __ptext23:
  5277                           	opt stack 0
  5278  005754                     _vscp_getSubzone:
  5279                           	opt stack 26
  5280                           
  5281                           ; BSR set to: 0
  5282                           ;main.c: 2789: return Read_b_eep(0x42);
  5283                           
  5284                           ;incstack = 0
  5285                           ;incstack = 0
  5286  005754  6A17               	clrf	?_Read_b_eep+1,c
  5287  005756  0E42               	movlw	66
  5288  005758  6E16               	movwf	?_Read_b_eep,c
  5289  00575A  EF8F  F02B         	goto	_Read_b_eep	;wreg free
  5290  00575E                     __end_of_vscp_getSubzone:
  5291                           	opt stack 0
  5292                           tblptru	equ	0xFF8
  5293                           tblptrh	equ	0xFF7
  5294                           tblptrl	equ	0xFF6
  5295                           tablat	equ	0xFF5
  5296                           prodh	equ	0xFF4
  5297                           prodl	equ	0xFF3
  5298                           intcon	equ	0xFF2
  5299                           postinc0	equ	0xFEE
  5300                           wreg	equ	0xFE8
  5301                           indf1	equ	0xFE7
  5302                           postdec1	equ	0xFE5
  5303                           fsr1h	equ	0xFE2
  5304                           fsr1l	equ	0xFE1
  5305                           indf2	equ	0xFDF
  5306                           postinc2	equ	0xFDE
  5307                           postdec2	equ	0xFDD
  5308                           plusw2	equ	0xFDB
  5309                           fsr2h	equ	0xFDA
  5310                           fsr2l	equ	0xFD9
  5311                           status	equ	0xFD8
  5312                           
  5313 ;; *************** function _vscp_getZone *****************
  5314 ;; Defined at:
  5315 ;;		line 2779 in file "../main.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;		None
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;		None
  5320 ;; Return value:  Size  Location     Type
  5321 ;;                  1    wreg      unsigned char 
  5322 ;; Registers used:
  5323 ;;		wreg, status,2, cstack
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5329 ;;      Params:         0       0       0       0       0       0       0
  5330 ;;      Locals:         0       0       0       0       0       0       0
  5331 ;;      Temps:          0       0       0       0       0       0       0
  5332 ;;      Totals:         0       0       0       0       0       0       0
  5333 ;;Total ram usage:        0 bytes
  5334 ;; Hardware stack levels used:    1
  5335 ;; Hardware stack levels required when called:    3
  5336 ;; This function calls:
  5337 ;;		_Read_b_eep
  5338 ;; This function is called by:
  5339 ;;		_vscp_doOneSecondWork
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343                           	psect	text24
  5344  00575E                     __ptext24:
  5345                           	opt stack 0
  5346  00575E                     _vscp_getZone:
  5347                           	opt stack 26
  5348                           
  5349                           ;main.c: 2780: return Read_b_eep(0x41);
  5350                           
  5351                           ;incstack = 0
  5352                           ;incstack = 0
  5353  00575E  6A17               	clrf	?_Read_b_eep+1,c
  5354  005760  0E41               	movlw	65
  5355  005762  6E16               	movwf	?_Read_b_eep,c
  5356  005764  EF8F  F02B         	goto	_Read_b_eep	;wreg free
  5357  005768                     __end_of_vscp_getZone:
  5358                           	opt stack 0
  5359                           tblptru	equ	0xFF8
  5360                           tblptrh	equ	0xFF7
  5361                           tblptrl	equ	0xFF6
  5362                           tablat	equ	0xFF5
  5363                           prodh	equ	0xFF4
  5364                           prodl	equ	0xFF3
  5365                           intcon	equ	0xFF2
  5366                           postinc0	equ	0xFEE
  5367                           wreg	equ	0xFE8
  5368                           indf1	equ	0xFE7
  5369                           postdec1	equ	0xFE5
  5370                           fsr1h	equ	0xFE2
  5371                           fsr1l	equ	0xFE1
  5372                           indf2	equ	0xFDF
  5373                           postinc2	equ	0xFDE
  5374                           postdec2	equ	0xFDD
  5375                           plusw2	equ	0xFDB
  5376                           fsr2h	equ	0xFDA
  5377                           fsr2l	equ	0xFD9
  5378                           status	equ	0xFD8
  5379                           
  5380 ;; *************** function _doOneSecondWork *****************
  5381 ;; Defined at:
  5382 ;;		line 562 in file "../main.c"
  5383 ;; Parameters:    Size  Location     Type
  5384 ;;		None
  5385 ;; Auto vars:     Size  Location     Type
  5386 ;;  setpoint        2   47[BANK0 ] short 
  5387 ;;  i               1   49[BANK0 ] unsigned char 
  5388 ;;  tmp             1   46[BANK0 ] unsigned char 
  5389 ;; Return value:  Size  Location     Type
  5390 ;;		None               void
  5391 ;; Registers used:
  5392 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5393 ;; Tracked objects:
  5394 ;;		On entry : F/1
  5395 ;;		On exit  : F/0
  5396 ;;		Unchanged: 0/0
  5397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5398 ;;      Params:         0       0       0       0       0       0       0
  5399 ;;      Locals:         0       4       0       0       0       0       0
  5400 ;;      Temps:          0       7       0       0       0       0       0
  5401 ;;      Totals:         0      11       0       0       0       0       0
  5402 ;;Total ram usage:       11 bytes
  5403 ;; Hardware stack levels used:    1
  5404 ;; Hardware stack levels required when called:    8
  5405 ;; This function calls:
  5406 ;;		_Busy_eep
  5407 ;;		_Write_b_eep
  5408 ;;		_Read_b_eep
  5409 ;;		_sendTempEvent
  5410 ;;		_vscp_sendEvent
  5411 ;;		___wmul
  5412 ;; This function is called by:
  5413 ;;		_main
  5414 ;; This function uses a non-reentrant model
  5415 ;;
  5416                           
  5417                           	psect	text25
  5418  002A58                     __ptext25:
  5419                           	opt stack 0
  5420  002A58                     _doOneSecondWork:
  5421                           	opt stack 22
  5422                           
  5423                           ; BSR set to: 1
  5424                           ;main.c: 563: uint8_t tmp;
  5425                           ;main.c: 564: uint8_t i;
  5426                           ;main.c: 565: int16_t setpoint;
  5427                           ;main.c: 567: for (i = 0; i < 6; i++) {
  5428                           
  5429                           ;incstack = 0
  5430                           ;incstack = 0
  5431  002A58  0100               	movlb	0	; () banked
  5432  002A5A  6B91               	clrf	doOneSecondWork@i& (0+255),b
  5433  002A5C                     l11269:
  5434                           
  5435                           ; BSR set to: 0
  5436                           ;main.c: 573: if (current_temp[ i ] < ((int16_t)( (((uint16_t)Read_b_eep(0x7F + 2*i))<<8
      +                          ) + (uint16_t)Read_b_eep(0x80 + 2*i)) ) ) {
  5437  002A5C  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5438  002A5E  0D02               	mullw	2
  5439  002A60  0E7F               	movlw	127
  5440  002A62  24F3               	addwf	prodl,w,c
  5441  002A64  6E16               	movwf	?_Read_b_eep,c
  5442  002A66  0E00               	movlw	0
  5443  002A68  20F4               	addwfc	prodh,w,c
  5444  002A6A  6E17               	movwf	?_Read_b_eep+1,c
  5445  002A6C  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5446  002A70  0100               	movlb	0	; () banked
  5447  002A72  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5448  002A74  6B87               	clrf	??_doOneSecondWork& (0+255),b
  5449  002A76  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5450  002A78  0D02               	mullw	2
  5451  002A7A  0E80               	movlw	128
  5452  002A7C  24F3               	addwf	prodl,w,c
  5453  002A7E  6E16               	movwf	?_Read_b_eep,c
  5454  002A80  0E00               	movlw	0
  5455  002A82  20F4               	addwfc	prodh,w,c
  5456  002A84  6E17               	movwf	?_Read_b_eep+1,c
  5457  002A86  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5458  002A8A  0100               	movlb	0	; () banked
  5459  002A8C  2787               	addwf	??_doOneSecondWork& (0+255),f,b
  5460  002A8E  0E00               	movlw	0
  5461  002A90  2388               	addwfc	(??_doOneSecondWork+1)& (0+255),f,b
  5462  002A92  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5463  002A94  0D02               	mullw	2
  5464  002A96  DA2C               	call	PL2	;call to abstracted procedure
  5465  002A98  CFDE F089          	movff	postinc2,??_doOneSecondWork+2
  5466  002A9C  CFDD F08A          	movff	postdec2,??_doOneSecondWork+3
  5467  002AA0  DAB0               	call	PL54	;call to abstracted procedure
  5468  002AA2  E214               	bc	l211
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;main.c: 576: (Busy_eep(), Write_b_eep(0x7F + 2*i,((uint16_t)current_temp[ i ]) >> 8));
  5472  002AA4  ECC7  F02B         	call	_Busy_eep	;wreg free
  5473  002AA8  DA6E               	call	PL20	;call to abstracted procedure
  5474  002AAA  0E7F               	movlw	127
  5475  002AAC  DA64               	call	PL14	;call to abstracted procedure
  5476  002AAE  DA20               	call	PL2	;call to abstracted procedure
  5477  002AB0  DA94               	call	PL40	;call to abstracted procedure
  5478  002AB2  ECA3  F029         	call	_Write_b_eep	;wreg free
  5479                           
  5480                           ;main.c: 577: (Busy_eep(), Write_b_eep(0x80 + 2*i,((uint16_t)current_temp[ i ]) & 0xff));
  5481  002AB6  ECC7  F02B         	call	_Busy_eep	;wreg free
  5482  002ABA  DA65               	call	PL20	;call to abstracted procedure
  5483  002ABC  0E80               	movlw	128
  5484  002ABE  DA5B               	call	PL14	;call to abstracted procedure
  5485  002AC0  0101               	movlb	1	; () banked
  5486  002AC2  DA16               	call	PL2	;call to abstracted procedure
  5487  002AC4  50DF               	movf	indf2,w,c
  5488  002AC6  6E10               	movwf	?_Write_b_eep+2,c
  5489  002AC8  ECA3  F029         	call	_Write_b_eep	;wreg free
  5490  002ACC                     l211:
  5491                           
  5492                           ;main.c: 578: }
  5493                           ;main.c: 584: if (current_temp[ i ] > ((int16_t)( (((uint16_t)Read_b_eep(0x8B + 2*i))<<8
      +                          ) + (uint16_t)Read_b_eep(0x8C + 2*i)) ) ) {
  5494  002ACC  0100               	movlb	0	; () banked
  5495  002ACE  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5496  002AD0  0D02               	mullw	2
  5497  002AD2  DA0E               	call	PL2	;call to abstracted procedure
  5498  002AD4  CFDE F087          	movff	postinc2,??_doOneSecondWork
  5499  002AD8  CFDD F088          	movff	postdec2,??_doOneSecondWork+1
  5500  002ADC  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5501  002ADE  0D02               	mullw	2
  5502  002AE0  0E8B               	movlw	139
  5503  002AE2  24F3               	addwf	prodl,w,c
  5504  002AE4  6E16               	movwf	?_Read_b_eep,c
  5505  002AE6  0E00               	movlw	0
  5506  002AE8  20F4               	addwfc	prodh,w,c
  5507  002AEA  6E17               	movwf	?_Read_b_eep+1,c
  5508  002AEC  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5509  002AF0  0100               	movlb	0	; () banked
  5510  002AF2  6F8A               	movwf	(??_doOneSecondWork+3)& (0+255),b
  5511  002AF4  6B89               	clrf	(??_doOneSecondWork+2)& (0+255),b
  5512  002AF6  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5513  002AF8  0D02               	mullw	2
  5514  002AFA  0E8C               	movlw	140
  5515  002AFC  24F3               	addwf	prodl,w,c
  5516  002AFE  6E16               	movwf	?_Read_b_eep,c
  5517  002B00  0E00               	movlw	0
  5518  002B02  20F4               	addwfc	prodh,w,c
  5519  002B04  6E17               	movwf	?_Read_b_eep+1,c
  5520  002B06  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5521  002B0A  0100               	movlb	0	; () banked
  5522  002B0C  2789               	addwf	(??_doOneSecondWork+2)& (0+255),f,b
  5523  002B0E  0E00               	movlw	0
  5524  002B10  238A               	addwfc	(??_doOneSecondWork+3)& (0+255),f,b
  5525  002B12  DA77               	call	PL54	;call to abstracted procedure
  5526  002B14  E214               	bc	l11283
  5527                           
  5528                           ; BSR set to: 0
  5529                           ;main.c: 587: (Busy_eep(), Write_b_eep(0x8B + 2*i,((uint16_t)current_temp[ i ]) >> 8));
  5530  002B16  ECC7  F02B         	call	_Busy_eep	;wreg free
  5531  002B1A  DA35               	call	PL20	;call to abstracted procedure
  5532  002B1C  0E8B               	movlw	139
  5533  002B1E  DA2B               	call	PL14	;call to abstracted procedure
  5534  002B20  D9E7               	call	PL2	;call to abstracted procedure
  5535  002B22  DA5B               	call	PL40	;call to abstracted procedure
  5536  002B24  ECA3  F029         	call	_Write_b_eep	;wreg free
  5537                           
  5538                           ;main.c: 588: (Busy_eep(), Write_b_eep(0x8C + 2*i,((uint16_t)current_temp[ i ]) & 0xff));
  5539  002B28  ECC7  F02B         	call	_Busy_eep	;wreg free
  5540  002B2C  DA2C               	call	PL20	;call to abstracted procedure
  5541  002B2E  0E8C               	movlw	140
  5542  002B30  DA22               	call	PL14	;call to abstracted procedure
  5543  002B32  0101               	movlb	1	; () banked
  5544  002B34  D9DD               	call	PL2	;call to abstracted procedure
  5545  002B36  50DF               	movf	indf2,w,c
  5546  002B38  6E10               	movwf	?_Write_b_eep+2,c
  5547  002B3A  ECA3  F029         	call	_Write_b_eep	;wreg free
  5548  002B3E                     l11283:
  5549                           
  5550                           ;main.c: 589: }
  5551                           ;main.c: 594: tmp = Read_b_eep(0x49 + i);
  5552  002B3E  0E49               	movlw	73
  5553  002B40  DA69               	call	PL72	;call to abstracted procedure
  5554  002B42  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5555  002B46  0100               	movlb	0	; () banked
  5556  002B48  6F8E               	movwf	doOneSecondWork@tmp& (0+255),b
  5557                           
  5558                           ; BSR set to: 0
  5559                           ;main.c: 595: if (tmp && (seconds_temp[i] > tmp)) {
  5560  002B4A  518E               	movf	doOneSecondWork@tmp& (0+255),w,b
  5561  002B4C  E016               	bz	l11293
  5562                           
  5563                           ; BSR set to: 0
  5564  002B4E  0E0C               	movlw	low _seconds_temp
  5565  002B50  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5566  002B52  6ED9               	movwf	fsr2l,c
  5567  002B54  6ADA               	clrf	fsr2h,c
  5568  002B56  0E01               	movlw	high _seconds_temp
  5569  002B58  22DA               	addwfc	fsr2h,f,c
  5570  002B5A  50DF               	movf	indf2,w,c
  5571  002B5C  618E               	cpfslt	doOneSecondWork@tmp& (0+255),b
  5572  002B5E  D00D               	goto	l11293
  5573                           
  5574                           ; BSR set to: 0
  5575                           ;main.c: 598: if (sendTempEvent(i)) {
  5576  002B60  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5577  002B62  EC83  F026         	call	_sendTempEvent
  5578  002B66  0900               	iorlw	0
  5579  002B68  E008               	bz	l11293
  5580                           
  5581                           ;main.c: 599: seconds_temp[i] = 0;
  5582  002B6A  0E0C               	movlw	low _seconds_temp
  5583  002B6C  0100               	movlb	0	; () banked
  5584  002B6E  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5585  002B70  6ED9               	movwf	fsr2l,c
  5586  002B72  6ADA               	clrf	fsr2h,c
  5587  002B74  0E01               	movlw	high _seconds_temp
  5588  002B76  22DA               	addwfc	fsr2h,f,c
  5589  002B78  6ADF               	clrf	indf2,c
  5590  002B7A                     l11293:
  5591                           
  5592                           ;main.c: 600: }
  5593                           ;main.c: 602: }
  5594                           ;main.c: 607: if (0x80 & Read_b_eep(0x43 + i)) {
  5595  002B7A  0E43               	movlw	67
  5596  002B7C  DA4B               	call	PL72	;call to abstracted procedure
  5597  002B7E  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5598  002B82  0100               	movlb	0	; () banked
  5599  002B84  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5600  002B86  AF87               	btfss	??_doOneSecondWork& (0+255),7,b
  5601  002B88  D072               	goto	l11347
  5602                           
  5603                           ; BSR set to: 0
  5604                           ;main.c: 610: if (low_alarm & (1 << i)) {
  5605  002B8A  C091  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  5606  002B8E  0E01               	movlw	1
  5607  002B90  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5608  002B92  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  5609  002B94  D002               	goto	u8324
  5610  002B96                     u8325:
  5611  002B96  90D8               	bcf	status,0,c
  5612  002B98  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5613  002B9A                     u8324:
  5614  002B9A  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  5615  002B9C  D7FC               	goto	u8325
  5616  002B9E  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5617  002BA0  15B8               	andwf	_low_alarm& (0+255),w,b
  5618  002BA2  E030               	bz	l11321
  5619                           
  5620                           ; BSR set to: 0
  5621                           ;main.c: 613: if (Read_b_eep(0x43 + i) & (1<<3)) {
  5622  002BA4  D9C9               	call	PL8	;call to abstracted procedure
  5623  002BA6  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5624  002BAA  0100               	movlb	0	; () banked
  5625  002BAC  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5626  002BAE  A787               	btfss	??_doOneSecondWork& (0+255),3,b
  5627  002BB0  D029               	goto	l11321
  5628                           
  5629                           ; BSR set to: 0
  5630                           ;main.c: 615: vscp_omsg.priority = 0x00;
  5631  002BB2  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
  5632                           
  5633                           ; BSR set to: 0
  5634                           ;main.c: 616: vscp_omsg.flags = 0x80 + 3;
  5635  002BB4  0E83               	movlw	131
  5636  002BB6  6FCB               	movwf	_vscp_omsg& (0+255),b
  5637                           
  5638                           ; BSR set to: 0
  5639                           ;main.c: 619: if (Read_b_eep(0x43 + i) & (1<<5)) {
  5640  002BB8  D9BF               	call	PL8	;call to abstracted procedure
  5641  002BBA  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5642  002BBE  0100               	movlb	0	; () banked
  5643  002BC0  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5644  002BC2  AB87               	btfss	??_doOneSecondWork& (0+255),5,b
  5645  002BC4  D011               	goto	l11311
  5646                           
  5647                           ; BSR set to: 0
  5648                           ;main.c: 621: if (Read_b_eep(0x43 + i) & (1<<6)) {
  5649  002BC6  0E43               	movlw	67
  5650  002BC8  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5651  002BCA  6E16               	movwf	?_Read_b_eep,c
  5652  002BCC  6A17               	clrf	?_Read_b_eep+1,c
  5653  002BCE  0E00               	movlw	0
  5654  002BD0  2217               	addwfc	?_Read_b_eep+1,f,c
  5655  002BD2  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5656  002BD6  0100               	movlb	0	; () banked
  5657  002BD8  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5658  002BDA  AD87               	btfss	??_doOneSecondWork& (0+255),6,b
  5659  002BDC  D003               	goto	l11309
  5660                           
  5661                           ; BSR set to: 0
  5662                           ;main.c: 622: vscp_omsg.vscp_class = 30;
  5663  002BDE  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5664                           
  5665                           ;main.c: 623: vscp_omsg.vscp_type = 5;
  5666  002BE0  DA2B               	call	PL86	;call to abstracted procedure
  5667  002BE2  D006               	goto	L4
  5668  002BE4                     l11309:
  5669                           
  5670                           ; BSR set to: 0
  5671                           ;main.c: 625: else {
  5672                           ;main.c: 626: vscp_omsg.vscp_class = 30;
  5673                           
  5674                           ;main.c: 627: vscp_omsg.vscp_type = 6;
  5675  002BE4  DA2C               	call	PL90	;call to abstracted procedure
  5676  002BE6  D004               	goto	L4
  5677  002BE8                     l11311:
  5678                           
  5679                           ; BSR set to: 0
  5680                           ;main.c: 631: else {
  5681                           ;main.c: 633: vscp_omsg.vscp_class = 1;
  5682  002BE8  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5683  002BEA  0E01               	movlw	1
  5684  002BEC  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  5685                           
  5686                           ;main.c: 634: vscp_omsg.vscp_type = 2;
  5687  002BEE  0E02               	movlw	2
  5688  002BF0                     L4:
  5689                           
  5690                           ; BSR set to: 0
  5691                           ;main.c: 635: }
  5692                           ;main.c: 637: vscp_omsg.data[ 0 ] = i;
  5693                           
  5694                           ; BSR set to: 0
  5695                           ;main.c: 638: vscp_omsg.data[ 1 ] =
  5696                           ;main.c: 639: Read_b_eep(0x73 + 2*i);
  5697  002BF0  D986               	call	PL4	;call to abstracted procedure
  5698  002BF2  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5699                           
  5700                           ; BSR set to: 0
  5701                           ;main.c: 640: vscp_omsg.data[ 2 ] =
  5702                           ;main.c: 641: Read_b_eep(0x74 + 2*i);
  5703  002BF6  D992               	call	PL6	;call to abstracted procedure
  5704  002BF8  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5705  002BFC  0100               	movlb	0	; () banked
  5706  002BFE  6FD3               	movwf	(_vscp_omsg+8)& (0+255),b
  5707                           
  5708                           ; BSR set to: 0
  5709                           ;main.c: 646: vscp_sendEvent();
  5710  002C00  ECEE  F029         	call	_vscp_sendEvent	;wreg free
  5711  002C04                     l11321:
  5712                           
  5713                           ;main.c: 648: }
  5714                           ;main.c: 649: }
  5715                           ;main.c: 652: if (high_alarm & (1 << i)) {
  5716  002C04  D9A0               	call	PL10	;call to abstracted procedure
  5717  002C06  15B7               	andwf	_high_alarm& (0+255),w,b
  5718  002C08  E032               	bz	l11347
  5719                           
  5720                           ; BSR set to: 0
  5721                           ;main.c: 655: if ((Read_b_eep(0x43 + i) & (1<<4))) {
  5722  002C0A  D996               	call	PL8	;call to abstracted procedure
  5723  002C0C  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5724  002C10  0100               	movlb	0	; () banked
  5725  002C12  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5726  002C14  A987               	btfss	??_doOneSecondWork& (0+255),4,b
  5727  002C16  D02B               	goto	l11347
  5728                           
  5729                           ; BSR set to: 0
  5730                           ;main.c: 657: vscp_omsg.priority = 0x00;
  5731  002C18  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
  5732                           
  5733                           ; BSR set to: 0
  5734                           ;main.c: 658: vscp_omsg.flags = 0x80 + 3;
  5735  002C1A  0E83               	movlw	131
  5736  002C1C  6FCB               	movwf	_vscp_omsg& (0+255),b
  5737                           
  5738                           ; BSR set to: 0
  5739                           ;main.c: 660: if (Read_b_eep(0x43 + i) & (1<<5)) {
  5740  002C1E  D98C               	call	PL8	;call to abstracted procedure
  5741  002C20  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5742  002C24  0100               	movlb	0	; () banked
  5743  002C26  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5744  002C28  AB87               	btfss	??_doOneSecondWork& (0+255),5,b
  5745  002C2A  D013               	goto	l11337
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;main.c: 662: if (Read_b_eep(0x43 + i) & (1<<6)) {
  5749  002C2C  0E43               	movlw	67
  5750  002C2E  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5751  002C30  6E16               	movwf	?_Read_b_eep,c
  5752  002C32  6A17               	clrf	?_Read_b_eep+1,c
  5753  002C34  0E00               	movlw	0
  5754  002C36  2217               	addwfc	?_Read_b_eep+1,f,c
  5755  002C38  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5756  002C3C  0100               	movlb	0	; () banked
  5757  002C3E  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5758  002C40  AD87               	btfss	??_doOneSecondWork& (0+255),6,b
  5759  002C42  D005               	goto	l11335
  5760                           
  5761                           ; BSR set to: 0
  5762                           ;main.c: 663: vscp_omsg.vscp_class = 30;
  5763  002C44  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5764  002C46  0E1E               	movlw	30
  5765  002C48  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  5766                           
  5767                           ;main.c: 664: vscp_omsg.vscp_type = 6;
  5768  002C4A  0E06               	movlw	6
  5769  002C4C  D006               	goto	L5
  5770  002C4E                     l11335:
  5771                           
  5772                           ; BSR set to: 0
  5773                           ;main.c: 666: else {
  5774                           ;main.c: 667: vscp_omsg.vscp_class = 30;
  5775                           
  5776                           ;main.c: 668: vscp_omsg.vscp_type = 5;
  5777  002C4E  D9F0               	call	PL84	;call to abstracted procedure
  5778  002C50  D004               	goto	L5
  5779  002C52                     l11337:
  5780                           
  5781                           ; BSR set to: 0
  5782                           ;main.c: 671: else {
  5783                           ;main.c: 673: vscp_omsg.vscp_class = 1;
  5784  002C52  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5785  002C54  0E01               	movlw	1
  5786  002C56  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  5787                           
  5788                           ;main.c: 674: vscp_omsg.vscp_type = 2;
  5789  002C58  0E02               	movlw	2
  5790  002C5A                     L5:
  5791                           
  5792                           ; BSR set to: 0
  5793                           ;main.c: 675: }
  5794                           ;main.c: 677: vscp_omsg.data[ 0 ] = i;
  5795                           
  5796                           ; BSR set to: 0
  5797                           ;main.c: 678: vscp_omsg.data[ 1 ] =
  5798                           ;main.c: 679: Read_b_eep(0x73 + 2*i);
  5799  002C5A  D951               	call	PL4	;call to abstracted procedure
  5800  002C5C  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5801                           
  5802                           ; BSR set to: 0
  5803                           ;main.c: 680: vscp_omsg.data[ 2 ] =
  5804                           ;main.c: 681: Read_b_eep(0x74 + 2*i);
  5805  002C60  D95D               	call	PL6	;call to abstracted procedure
  5806  002C62  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5807  002C66  0100               	movlb	0	; () banked
  5808  002C68  6FD3               	movwf	(_vscp_omsg+8)& (0+255),b
  5809                           
  5810                           ; BSR set to: 0
  5811                           ;main.c: 686: vscp_sendEvent();
  5812  002C6A  ECEE  F029         	call	_vscp_sendEvent	;wreg free
  5813  002C6E                     l11347:
  5814                           
  5815                           ;main.c: 687: }
  5816                           ;main.c: 688: }
  5817                           ;main.c: 689: }
  5818                           ;main.c: 695: if (low_alarm & (1 << i)) {
  5819  002C6E  D96B               	call	PL10	;call to abstracted procedure
  5820  002C70  15B8               	andwf	_low_alarm& (0+255),w,b
  5821  002C72  E03C               	bz	l11355
  5822                           
  5823                           ; BSR set to: 0
  5824                           ;main.c: 698: setpoint = ((int16_t)( (((uint16_t)Read_b_eep(0x5B + 2*i))<<8) + (uint16_t
      +                          )Read_b_eep(0x5C + 2*i)) ) +
  5825                           ;main.c: 700: (int8_t) Read_b_eep(0x97 + i);
  5826  002C74  D9D6               	call	PL76	;call to abstracted procedure
  5827  002C76  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5828  002C7A  0100               	movlb	0	; () banked
  5829  002C7C  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5830  002C7E  90D8               	bcf	status,0,c
  5831  002C80  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  5832  002C82  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5833  002C84  6B89               	clrf	(??_doOneSecondWork+2)& (0+255),b
  5834  002C86  3789               	rlcf	(??_doOneSecondWork+2)& (0+255),f,b
  5835  002C88  0E5B               	movlw	91
  5836  002C8A  2588               	addwf	(??_doOneSecondWork+1)& (0+255),w,b
  5837  002C8C  6E16               	movwf	?_Read_b_eep,c
  5838  002C8E  0E00               	movlw	0
  5839  002C90  2189               	addwfc	(??_doOneSecondWork+2)& (0+255),w,b
  5840  002C92  6E17               	movwf	?_Read_b_eep+1,c
  5841  002C94  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5842  002C98  0100               	movlb	0	; () banked
  5843  002C9A  6F8B               	movwf	(??_doOneSecondWork+4)& (0+255),b
  5844  002C9C  6B8A               	clrf	(??_doOneSecondWork+3)& (0+255),b
  5845  002C9E  90D8               	bcf	status,0,c
  5846  002CA0  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  5847  002CA2  6F8C               	movwf	(??_doOneSecondWork+5)& (0+255),b
  5848  002CA4  6B8D               	clrf	(??_doOneSecondWork+6)& (0+255),b
  5849  002CA6  378D               	rlcf	(??_doOneSecondWork+6)& (0+255),f,b
  5850  002CA8  0E5C               	movlw	92
  5851  002CAA  258C               	addwf	(??_doOneSecondWork+5)& (0+255),w,b
  5852  002CAC  6E16               	movwf	?_Read_b_eep,c
  5853  002CAE  0E00               	movlw	0
  5854  002CB0  218D               	addwfc	(??_doOneSecondWork+6)& (0+255),w,b
  5855  002CB2  6E17               	movwf	?_Read_b_eep+1,c
  5856  002CB4  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5857  002CB8  0100               	movlb	0	; () banked
  5858  002CBA  278A               	addwf	(??_doOneSecondWork+3)& (0+255),f,b
  5859  002CBC  0E00               	movlw	0
  5860  002CBE  238B               	addwfc	(??_doOneSecondWork+4)& (0+255),f,b
  5861  002CC0  5187               	movf	??_doOneSecondWork& (0+255),w,b
  5862  002CC2  258A               	addwf	(??_doOneSecondWork+3)& (0+255),w,b
  5863  002CC4  6F8F               	movwf	doOneSecondWork@setpoint& (0+255),b
  5864  002CC6  0E00               	movlw	0
  5865  002CC8  218B               	addwfc	(??_doOneSecondWork+4)& (0+255),w,b
  5866  002CCA  6F90               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  5867                           
  5868                           ; BSR set to: 0
  5869                           ;main.c: 705: if (current_temp[ i ] > (setpoint * 100)) {
  5870  002CCC  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5871  002CCE  0D02               	mullw	2
  5872  002CD0  0101               	movlb	1	; () banked
  5873  002CD2  D90E               	call	PL2	;call to abstracted procedure
  5874  002CD4  CFDE F087          	movff	postinc2,??_doOneSecondWork
  5875  002CD8  D98A               	call	PL50	;call to abstracted procedure
  5876  002CDA  ECBD  F029         	call	___wmul	;wreg free
  5877  002CDE  D973               	call	PL36	;call to abstracted procedure
  5878  002CE0  E263               	bc	l230
  5879  002CE2                     l11353:
  5880                           
  5881                           ;main.c: 708: low_alarm &= ~(1 << i);
  5882  002CE2  C091  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  5883  002CE6  D93C               	call	PL12	;call to abstracted procedure
  5884  002CE8  17B8               	andwf	_low_alarm& (0+255),f,b
  5885  002CEA  D05E               	goto	l230
  5886  002CEC                     l11355:
  5887                           
  5888                           ; BSR set to: 0
  5889                           ;main.c: 713: else {
  5890                           ;main.c: 717: setpoint = ((int16_t)( (((uint16_t)Read_b_eep(0x5B + 2*i))<<8) + (uint16_t
      +                          )Read_b_eep(0x5C + 2*i)) );
  5891  002CEC  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5892  002CEE  0D02               	mullw	2
  5893  002CF0  0E5C               	movlw	92
  5894  002CF2  24F3               	addwf	prodl,w,c
  5895  002CF4  6E16               	movwf	?_Read_b_eep,c
  5896  002CF6  0E00               	movlw	0
  5897  002CF8  20F4               	addwfc	prodh,w,c
  5898  002CFA  6E17               	movwf	?_Read_b_eep+1,c
  5899  002CFC  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5900  002D00  0100               	movlb	0	; () banked
  5901  002D02  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5902  002D04  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5903  002D06  0D02               	mullw	2
  5904  002D08  0E5B               	movlw	91
  5905  002D0A  24F3               	addwf	prodl,w,c
  5906  002D0C  6E16               	movwf	?_Read_b_eep,c
  5907  002D0E  0E00               	movlw	0
  5908  002D10  20F4               	addwfc	prodh,w,c
  5909  002D12  6E17               	movwf	?_Read_b_eep+1,c
  5910  002D14  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5911  002D18  0100               	movlb	0	; () banked
  5912  002D1A  6F90               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  5913  002D1C  5187               	movf	??_doOneSecondWork& (0+255),w,b
  5914  002D1E  6F8F               	movwf	doOneSecondWork@setpoint& (0+255),b
  5915                           
  5916                           ; BSR set to: 0
  5917                           ;main.c: 720: if (current_temp[ i ] < (setpoint * 100)) {
  5918  002D20  C08F  F00E         	movff	doOneSecondWork@setpoint,?___wmul
  5919  002D24  C090  F00F         	movff	doOneSecondWork@setpoint+1,?___wmul+1
  5920  002D28  6A11               	clrf	?___wmul+3,c
  5921  002D2A  0E64               	movlw	100
  5922  002D2C  6E10               	movwf	?___wmul+2,c
  5923  002D2E  ECBD  F029         	call	___wmul	;wreg free
  5924  002D32  0100               	movlb	0	; () banked
  5925  002D34  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5926  002D36  0D02               	mullw	2
  5927  002D38  D8DB               	call	PL2	;call to abstracted procedure
  5928  002D3A  D92C               	call	PL22	;call to abstracted procedure
  5929  002D3C  E235               	bc	l230
  5930                           
  5931                           ; BSR set to: 0
  5932                           ;main.c: 723: low_alarm |= (1 << i);
  5933  002D3E  D937               	call	PL28	;call to abstracted procedure
  5934  002D40  13B8               	iorwf	_low_alarm& (0+255),f,b
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;main.c: 728: vscp_alarmstatus |= 1;
  5938  002D42  804A               	bsf	_vscp_alarmstatus,0,c
  5939                           
  5940                           ; BSR set to: 0
  5941                           ;main.c: 731: if ( Read_b_eep(i + 0x43) & (1<<3) ) {
  5942  002D44  D8F9               	call	PL8	;call to abstracted procedure
  5943  002D46  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5944  002D4A  0100               	movlb	0	; () banked
  5945  002D4C  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5946  002D4E  A787               	btfss	??_doOneSecondWork& (0+255),3,b
  5947  002D50  D02B               	goto	l230
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;main.c: 733: vscp_omsg.priority = 0x00;
  5951  002D52  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
  5952                           
  5953                           ; BSR set to: 0
  5954                           ;main.c: 734: vscp_omsg.flags = 0x80 + 3;
  5955  002D54  0E83               	movlw	131
  5956  002D56  6FCB               	movwf	_vscp_omsg& (0+255),b
  5957                           
  5958                           ; BSR set to: 0
  5959                           ;main.c: 737: if (Read_b_eep(0x43 + i) & (1<<5)) {
  5960  002D58  D8EF               	call	PL8	;call to abstracted procedure
  5961  002D5A  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5962  002D5E  0100               	movlb	0	; () banked
  5963  002D60  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5964  002D62  AB87               	btfss	??_doOneSecondWork& (0+255),5,b
  5965  002D64  D011               	goto	l11377
  5966                           
  5967                           ; BSR set to: 0
  5968                           ;main.c: 739: if (Read_b_eep(0x43 + i) & (1<<6)) {
  5969  002D66  0E43               	movlw	67
  5970  002D68  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5971  002D6A  6E16               	movwf	?_Read_b_eep,c
  5972  002D6C  6A17               	clrf	?_Read_b_eep+1,c
  5973  002D6E  0E00               	movlw	0
  5974  002D70  2217               	addwfc	?_Read_b_eep+1,f,c
  5975  002D72  EC8F  F02B         	call	_Read_b_eep	;wreg free
  5976  002D76  0100               	movlb	0	; () banked
  5977  002D78  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5978  002D7A  AD87               	btfss	??_doOneSecondWork& (0+255),6,b
  5979  002D7C  D003               	goto	l11375
  5980                           
  5981                           ; BSR set to: 0
  5982                           ;main.c: 740: vscp_omsg.vscp_class = 30;
  5983  002D7E  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5984                           
  5985                           ;main.c: 741: vscp_omsg.vscp_type = 5;
  5986  002D80  D95B               	call	PL86	;call to abstracted procedure
  5987  002D82  D006               	goto	L6
  5988  002D84                     l11375:
  5989                           
  5990                           ; BSR set to: 0
  5991                           ;main.c: 743: else {
  5992                           ;main.c: 744: vscp_omsg.vscp_class = 30;
  5993                           
  5994                           ;main.c: 745: vscp_omsg.vscp_type = 6;
  5995  002D84  D95C               	call	PL90	;call to abstracted procedure
  5996  002D86  D004               	goto	L6
  5997  002D88                     l11377:
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;main.c: 749: else {
  6001                           ;main.c: 750: vscp_omsg.vscp_class = 1;
  6002  002D88  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6003  002D8A  0E01               	movlw	1
  6004  002D8C  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6005                           
  6006                           ;main.c: 751: vscp_omsg.vscp_type = 2;
  6007  002D8E  0E02               	movlw	2
  6008  002D90                     L6:
  6009                           
  6010                           ; BSR set to: 0
  6011                           ;main.c: 752: }
  6012                           ;main.c: 754: vscp_omsg.data[ 0 ] = i;
  6013                           
  6014                           ; BSR set to: 0
  6015                           ;main.c: 755: vscp_omsg.data[ 1 ] = Read_b_eep(0x73 + 2 * i);
  6016  002D90  D8B6               	call	PL4	;call to abstracted procedure
  6017  002D92  EC8F  F02B         	call	_Read_b_eep	;wreg free
  6018                           
  6019                           ; BSR set to: 0
  6020                           ;main.c: 756: vscp_omsg.data[ 2 ] = Read_b_eep(0x74 + 2 * i);
  6021  002D96  D8C2               	call	PL6	;call to abstracted procedure
  6022  002D98  EC8F  F02B         	call	_Read_b_eep	;wreg free
  6023  002D9C  0100               	movlb	0	; () banked
  6024  002D9E  6FD3               	movwf	(_vscp_omsg+8)& (0+255),b
  6025                           
  6026                           ; BSR set to: 0
  6027                           ;main.c: 759: if (!vscp_sendEvent()) {
  6028  002DA0  ECEE  F029         	call	_vscp_sendEvent	;wreg free
  6029  002DA4  0900               	iorlw	0
  6030  002DA6  E09D               	bz	l11353
  6031  002DA8                     l230:
  6032                           
  6033                           ;main.c: 763: }
  6034                           ;main.c: 765: }
  6035                           ;main.c: 766: }
  6036                           ;main.c: 767: }
  6037                           ;main.c: 772: if (high_alarm & (1 << i)) {
  6038  002DA8  D8CE               	call	PL10	;call to abstracted procedure
  6039  002DAA  15B7               	andwf	_high_alarm& (0+255),w,b
  6040  002DAC  E03F               	bz	l11395
  6041                           
  6042                           ; BSR set to: 0
  6043                           ;main.c: 776: setpoint = ((int16_t)( (((uint16_t)Read_b_eep(0x67 + 2 * i))<<8) + (uint16
      +                          _t)Read_b_eep(0x68 + 2 * i)) ) -
  6044                           ;main.c: 778: (int8_t)Read_b_eep(0x97 + i);
  6045  002DAE  90D8               	bcf	status,0,c
  6046  002DB0  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  6047  002DB2  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6048  002DB4  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6049  002DB6  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6050  002DB8  0E67               	movlw	103
  6051  002DBA  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6052  002DBC  6E16               	movwf	?_Read_b_eep,c
  6053  002DBE  0E00               	movlw	0
  6054  002DC0  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6055  002DC2  6E17               	movwf	?_Read_b_eep+1,c
  6056  002DC4  EC8F  F02B         	call	_Read_b_eep	;wreg free
  6057  002DC8  0100               	movlb	0	; () banked
  6058  002DCA  6F8A               	movwf	(??_doOneSecondWork+3)& (0+255),b
  6059  002DCC  6B89               	clrf	(??_doOneSecondWork+2)& (0+255),b
  6060  002DCE  90D8               	bcf	status,0,c
  6061  002DD0  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  6062  002DD2  6F8B               	movwf	(??_doOneSecondWork+4)& (0+255),b
  6063  002DD4  6B8C               	clrf	(??_doOneSecondWork+5)& (0+255),b
  6064  002DD6  378C               	rlcf	(??_doOneSecondWork+5)& (0+255),f,b
  6065  002DD8  0E68               	movlw	104
  6066  002DDA  258B               	addwf	(??_doOneSecondWork+4)& (0+255),w,b
  6067  002DDC  6E16               	movwf	?_Read_b_eep,c
  6068  002DDE  0E00               	movlw	0
  6069  002DE0  218C               	addwfc	(??_doOneSecondWork+5)& (0+255),w,b
  6070  002DE2  6E17               	movwf	?_Read_b_eep+1,c
  6071  002DE4  EC8F  F02B         	call	_Read_b_eep	;wreg free
  6072  002DE8  0100               	movlb	0	; () banked
  6073  002DEA  2789               	addwf	(??_doOneSecondWork+2)& (0+255),f,b
  6074  002DEC  0E00               	movlw	0
  6075  002DEE  238A               	addwfc	(??_doOneSecondWork+3)& (0+255),f,b
  6076  002DF0  D918               	call	PL76	;call to abstracted procedure
  6077  002DF2  EC8F  F02B         	call	_Read_b_eep	;wreg free
  6078  002DF6  0100               	movlb	0	; () banked
  6079  002DF8  5D89               	subwf	(??_doOneSecondWork+2)& (0+255),w,b
  6080  002DFA  6F8F               	movwf	doOneSecondWork@setpoint& (0+255),b
  6081  002DFC  518A               	movf	(??_doOneSecondWork+3)& (0+255),w,b
  6082  002DFE  A0D8               	btfss	status,0,c
  6083  002E00  058A               	decf	(??_doOneSecondWork+3)& (0+255),w,b
  6084  002E02  6F90               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  6085                           
  6086                           ; BSR set to: 0
  6087                           ;main.c: 781: if (current_temp[ i ] < (setpoint * 100) ) {
  6088  002E04  C08F  F00E         	movff	doOneSecondWork@setpoint,?___wmul
  6089  002E08  C090  F00F         	movff	doOneSecondWork@setpoint+1,?___wmul+1
  6090  002E0C  6A11               	clrf	?___wmul+3,c
  6091  002E0E  0E64               	movlw	100
  6092  002E10  6E10               	movwf	?___wmul+2,c
  6093  002E12  ECBD  F029         	call	___wmul	;wreg free
  6094  002E16  0100               	movlb	0	; () banked
  6095  002E18  5191               	movf	doOneSecondWork@i& (0+255),w,b
  6096  002E1A  0D02               	mullw	2
  6097  002E1C  D869               	call	PL2	;call to abstracted procedure
  6098  002E1E  D8BA               	call	PL22	;call to abstracted procedure
  6099  002E20  E261               	bc	l11429
  6100  002E22                     l11393:
  6101                           
  6102                           ;main.c: 784: high_alarm &= ~(1 << i);
  6103  002E22  C091  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  6104  002E26  D89C               	call	PL12	;call to abstracted procedure
  6105  002E28  17B7               	andwf	_high_alarm& (0+255),f,b
  6106  002E2A  D05C               	goto	l11429
  6107  002E2C                     l11395:
  6108                           
  6109                           ; BSR set to: 0
  6110                           ;main.c: 789: else {
  6111                           ;main.c: 794: setpoint = ((int16_t)( (((uint16_t)Read_b_eep(0x67 + 2 * i))<<8) + (uint16
      +                          _t)Read_b_eep(0x68 + 2 * i)) );
  6112  002E2C  5191               	movf	doOneSecondWork@i& (0+255),w,b
  6113  002E2E  0D02               	mullw	2
  6114  002E30  0E68               	movlw	104
  6115  002E32  24F3               	addwf	prodl,w,c
  6116  002E34  6E16               	movwf	?_Read_b_eep,c
  6117  002E36  0E00               	movlw	0
  6118  002E38  20F4               	addwfc	prodh,w,c
  6119  002E3A  6E17               	movwf	?_Read_b_eep+1,c
  6120  002E3C  EC8F  F02B         	call	_Read_b_eep	;wreg free
  6121  002E40  0100               	movlb	0	; () banked
  6122  002E42  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6123  002E44  5191               	movf	doOneSecondWork@i& (0+255),w,b
  6124  002E46  0D02               	mullw	2
  6125  002E48  0E67               	movlw	103
  6126  002E4A  24F3               	addwf	prodl,w,c
  6127  002E4C  6E16               	movwf	?_Read_b_eep,c
  6128  002E4E  0E00               	movlw	0
  6129  002E50  20F4               	addwfc	prodh,w,c
  6130  002E52  6E17               	movwf	?_Read_b_eep+1,c
  6131  002E54  EC8F  F02B         	call	_Read_b_eep	;wreg free
  6132  002E58  0100               	movlb	0	; () banked
  6133  002E5A  6F90               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  6134  002E5C  5187               	movf	??_doOneSecondWork& (0+255),w,b
  6135  002E5E  6F8F               	movwf	doOneSecondWork@setpoint& (0+255),b
  6136                           
  6137                           ; BSR set to: 0
  6138                           ;main.c: 797: if (current_temp[ i ] > (setpoint * 100)) {
  6139  002E60  5191               	movf	doOneSecondWork@i& (0+255),w,b
  6140  002E62  0D02               	mullw	2
  6141  002E64  0101               	movlb	1	; () banked
  6142  002E66  D844               	call	PL2	;call to abstracted procedure
  6143  002E68  CFDE F087          	movff	postinc2,??_doOneSecondWork
  6144  002E6C  D8C0               	call	PL50	;call to abstracted procedure
  6145  002E6E  ECBD  F029         	call	___wmul	;wreg free
  6146  002E72  D8A9               	call	PL36	;call to abstracted procedure
  6147  002E74  E237               	bc	l11429
  6148                           
  6149                           ; BSR set to: 0
  6150                           ;main.c: 800: high_alarm |= (1 << i);
  6151  002E76  D89B               	call	PL28	;call to abstracted procedure
  6152  002E78  13B7               	iorwf	_high_alarm& (0+255),f,b
  6153                           
  6154                           ; BSR set to: 0
  6155                           ;main.c: 806: vscp_alarmstatus |= 2;
  6156  002E7A  824A               	bsf	_vscp_alarmstatus,1,c
  6157                           
  6158                           ; BSR set to: 0
  6159                           ;main.c: 809: if (Read_b_eep(0x43 + i) & (1<<4)) {
  6160  002E7C  D85D               	call	PL8	;call to abstracted procedure
  6161  002E7E  EC8F  F02B         	call	_Read_b_eep	;wreg free
  6162  002E82  0100               	movlb	0	; () banked
  6163  002E84  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6164  002E86  A987               	btfss	??_doOneSecondWork& (0+255),4,b
  6165  002E88  D02D               	goto	l11429
  6166                           
  6167                           ; BSR set to: 0
  6168                           ;main.c: 811: vscp_omsg.priority = 0x00;
  6169  002E8A  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;main.c: 812: vscp_omsg.flags = 0x80 + 3;
  6173  002E8C  0E83               	movlw	131
  6174  002E8E  6FCB               	movwf	_vscp_omsg& (0+255),b
  6175                           
  6176                           ; BSR set to: 0
  6177                           ;main.c: 814: if (Read_b_eep(0x43 + i) & (1<<5)) {
  6178  002E90  D853               	call	PL8	;call to abstracted procedure
  6179  002E92  EC8F  F02B         	call	_Read_b_eep	;wreg free
  6180  002E96  0100               	movlb	0	; () banked
  6181  002E98  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6182  002E9A  AB87               	btfss	??_doOneSecondWork& (0+255),5,b
  6183  002E9C  D013               	goto	l11417
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;main.c: 816: if (Read_b_eep(0x43 + i) & (1<<6)) {
  6187  002E9E  0E43               	movlw	67
  6188  002EA0  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  6189  002EA2  6E16               	movwf	?_Read_b_eep,c
  6190  002EA4  6A17               	clrf	?_Read_b_eep+1,c
  6191  002EA6  0E00               	movlw	0
  6192  002EA8  2217               	addwfc	?_Read_b_eep+1,f,c
  6193  002EAA  EC8F  F02B         	call	_Read_b_eep	;wreg free
  6194  002EAE  0100               	movlb	0	; () banked
  6195  002EB0  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6196  002EB2  AD87               	btfss	??_doOneSecondWork& (0+255),6,b
  6197  002EB4  D005               	goto	l11415
  6198                           
  6199                           ; BSR set to: 0
  6200                           ;main.c: 817: vscp_omsg.vscp_class = 30;
  6201  002EB6  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6202  002EB8  0E1E               	movlw	30
  6203  002EBA  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6204                           
  6205                           ;main.c: 818: vscp_omsg.vscp_type = 6;
  6206  002EBC  0E06               	movlw	6
  6207  002EBE  D006               	goto	L7
  6208  002EC0                     l11415:
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;main.c: 820: else {
  6212                           ;main.c: 821: vscp_omsg.vscp_class = 30;
  6213                           
  6214                           ;main.c: 822: vscp_omsg.vscp_type = 5;
  6215  002EC0  D8B7               	call	PL84	;call to abstracted procedure
  6216  002EC2  D004               	goto	L7
  6217  002EC4                     l11417:
  6218                           
  6219                           ; BSR set to: 0
  6220                           ;main.c: 825: else {
  6221                           ;main.c: 826: vscp_omsg.vscp_class = 1;
  6222  002EC4  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6223  002EC6  0E01               	movlw	1
  6224  002EC8  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6225                           
  6226                           ;main.c: 827: vscp_omsg.vscp_type = 2;
  6227  002ECA  0E02               	movlw	2
  6228  002ECC                     L7:
  6229                           
  6230                           ; BSR set to: 0
  6231                           ;main.c: 828: }
  6232                           ;main.c: 830: vscp_omsg.data[ 0 ] = i;
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;main.c: 831: vscp_omsg.data[ 1 ] = Read_b_eep(0x73 + 2 * i);
  6236  002ECC  D818               	call	PL4	;call to abstracted procedure
  6237  002ECE  EC8F  F02B         	call	_Read_b_eep	;wreg free
  6238                           
  6239                           ; BSR set to: 0
  6240                           ;main.c: 832: vscp_omsg.data[ 2 ] = Read_b_eep(0x74 + 2 * i);
  6241  002ED2  D824               	call	PL6	;call to abstracted procedure
  6242  002ED4  EC8F  F02B         	call	_Read_b_eep	;wreg free
  6243  002ED8  0100               	movlb	0	; () banked
  6244  002EDA  6FD3               	movwf	(_vscp_omsg+8)& (0+255),b
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;main.c: 835: if (!vscp_sendEvent()) {
  6248  002EDC  ECEE  F029         	call	_vscp_sendEvent	;wreg free
  6249  002EE0  0900               	iorlw	0
  6250  002EE2  E09F               	bz	l11393
  6251  002EE4                     l11429:
  6252  002EE4  0100               	movlb	0	; () banked
  6253  002EE6  2B91               	incf	doOneSecondWork@i& (0+255),f,b
  6254  002EE8  0E05               	movlw	5
  6255  002EEA  6591               	cpfsgt	doOneSecondWork@i& (0+255),b
  6256  002EEC  D5B7               	goto	l11269
  6257                           
  6258                           ; BSR set to: 0
  6259  002EEE  0C05               	retlw	5
  6260  002EF0                     __end_of_doOneSecondWork:
  6261                           	opt stack 0
  6262  002EF0                     PL2:
  6263                           	opt stack 23
  6264  002EF0  0E00               	movlw	low _current_temp
  6265  002EF2  24F3               	addwf	prodl,w,c
  6266  002EF4  6ED9               	movwf	fsr2l,c
  6267  002EF6  0E01               	movlw	high _current_temp
  6268  002EF8  20F4               	addwfc	prodh,w,c
  6269  002EFA  6EDA               	movwf	fsr2h,c
  6270  002EFC  0012               	return	
  6271  002EFE                     __end_ofPL2:
  6272                           	opt stack 0
  6273  002EFE                     PL4:
  6274                           	opt stack 22
  6275  002EFE  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  6276  002F00  C091  F0D1         	movff	doOneSecondWork@i,_vscp_omsg+6
  6277  002F04  90D8               	bcf	status,0,c
  6278  002F06  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  6279  002F08  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6280  002F0A  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6281  002F0C  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6282  002F0E  0E73               	movlw	115
  6283  002F10  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6284  002F12  6E16               	movwf	?_Read_b_eep,c
  6285  002F14  0E00               	movlw	0
  6286  002F16  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6287  002F18  6E17               	movwf	?_Read_b_eep+1,c
  6288  002F1A  0012               	return	
  6289  002F1C                     __end_ofPL4:
  6290                           	opt stack 0
  6291  002F1C                     PL6:
  6292                           	opt stack 22
  6293  002F1C  0100               	movlb	0	; () banked
  6294  002F1E  6FD2               	movwf	(_vscp_omsg+7)& (0+255),b
  6295  002F20  90D8               	bcf	status,0,c
  6296  002F22  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  6297  002F24  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6298  002F26  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6299  002F28  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6300  002F2A  0E74               	movlw	116
  6301  002F2C  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6302  002F2E  6E16               	movwf	?_Read_b_eep,c
  6303  002F30  0E00               	movlw	0
  6304  002F32  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6305  002F34  6E17               	movwf	?_Read_b_eep+1,c
  6306  002F36  0012               	return	
  6307  002F38                     __end_ofPL6:
  6308                           	opt stack 0
  6309  002F38                     PL8:
  6310                           	opt stack 22
  6311  002F38  0E43               	movlw	67
  6312  002F3A  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  6313  002F3C  6E16               	movwf	?_Read_b_eep,c
  6314  002F3E  6A17               	clrf	?_Read_b_eep+1,c
  6315  002F40  0E00               	movlw	0
  6316  002F42  2217               	addwfc	?_Read_b_eep+1,f,c
  6317  002F44  0C00               	retlw	0
  6318  002F46                     __end_ofPL8:
  6319                           	opt stack 0
  6320  002F46                     PL10:
  6321                           	opt stack 22
  6322  002F46  C091  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  6323  002F4A  0E01               	movlw	1
  6324  002F4C  0100               	movlb	0	; () banked
  6325  002F4E  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6326  002F50  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  6327  002F52  D002               	goto	u8374
  6328  002F54                     u8375:
  6329  002F54  90D8               	bcf	status,0,c
  6330  002F56  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6331  002F58                     u8374:
  6332  002F58  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  6333  002F5A  D7FC               	goto	u8375
  6334  002F5C  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6335  002F5E  0012               	return	
  6336  002F60                     __end_ofPL10:
  6337                           	opt stack 0
  6338  002F60                     PL12:
  6339                           	opt stack 22
  6340  002F60  0E01               	movlw	1
  6341  002F62  0100               	movlb	0	; () banked
  6342  002F64  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6343  002F66  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  6344  002F68  D002               	goto	u8454
  6345  002F6A                     u8455:
  6346  002F6A  90D8               	bcf	status,0,c
  6347  002F6C  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6348  002F6E                     u8454:
  6349  002F6E  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  6350  002F70  D7FC               	goto	u8455
  6351  002F72  1D88               	comf	(??_doOneSecondWork+1)& (0+255),w,b
  6352  002F74  0012               	return	
  6353  002F76                     __end_ofPL12:
  6354                           	opt stack 0
  6355  002F76                     PL14:
  6356                           	opt stack 22
  6357  002F76  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6358  002F78  6E0E               	movwf	?_Write_b_eep,c
  6359  002F7A  0E00               	movlw	0
  6360  002F7C  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6361  002F7E  6E0F               	movwf	?_Write_b_eep+1,c
  6362  002F80  5191               	movf	doOneSecondWork@i& (0+255),w,b
  6363  002F82  0D02               	mullw	2
  6364  002F84  0012               	return	
  6365  002F86                     __end_ofPL14:
  6366                           	opt stack 0
  6367  002F86                     PL20:
  6368                           	opt stack 22
  6369  002F86  90D8               	bcf	status,0,c
  6370  002F88  0100               	movlb	0	; () banked
  6371  002F8A  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  6372  002F8C  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6373  002F8E  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6374  002F90  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6375  002F92  0012               	return	
  6376  002F94                     __end_ofPL20:
  6377                           	opt stack 0
  6378  002F94                     PL22:
  6379                           	opt stack 22
  6380  002F94  CFDE F087          	movff	postinc2,??_doOneSecondWork
  6381  002F98  CFDD F088          	movff	postdec2,??_doOneSecondWork+1
  6382  002F9C  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6383  002F9E  0A80               	xorlw	128
  6384  002FA0  6F89               	movwf	(??_doOneSecondWork+2)& (0+255),b
  6385  002FA2  500E               	movf	?___wmul,w,c
  6386  002FA4  5D87               	subwf	??_doOneSecondWork& (0+255),w,b
  6387  002FA6  500F               	movf	?___wmul+1,w,c
  6388  002FA8  0A80               	xorlw	128
  6389  002FAA  5989               	subwfb	(??_doOneSecondWork+2)& (0+255),w,b
  6390  002FAC  0012               	return	
  6391  002FAE                     __end_ofPL22:
  6392                           	opt stack 0
  6393  002FAE                     PL28:
  6394                           	opt stack 22
  6395  002FAE  C091  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  6396  002FB2  0E01               	movlw	1
  6397  002FB4  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6398  002FB6  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  6399  002FB8  D002               	goto	u8474
  6400  002FBA                     u8475:
  6401  002FBA  90D8               	bcf	status,0,c
  6402  002FBC  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6403  002FBE                     u8474:
  6404  002FBE  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  6405  002FC0  D7FC               	goto	u8475
  6406  002FC2  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6407  002FC4  0012               	return	
  6408  002FC6                     __end_ofPL28:
  6409                           	opt stack 0
  6410  002FC6                     PL36:
  6411                           	opt stack 22
  6412  002FC6  500F               	movf	?___wmul+1,w,c
  6413  002FC8  0A80               	xorlw	128
  6414  002FCA  0100               	movlb	0	; () banked
  6415  002FCC  6F89               	movwf	(??_doOneSecondWork+2)& (0+255),b
  6416  002FCE  5187               	movf	??_doOneSecondWork& (0+255),w,b
  6417  002FD0  5C0E               	subwf	?___wmul,w,c
  6418  002FD2  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6419  002FD4  0A80               	xorlw	128
  6420  002FD6  5989               	subwfb	(??_doOneSecondWork+2)& (0+255),w,b
  6421  002FD8  0012               	return	
  6422  002FDA                     __end_ofPL36:
  6423                           	opt stack 0
  6424  002FDA                     PL40:
  6425                           	opt stack 22
  6426  002FDA  CFDE F089          	movff	postinc2,??_doOneSecondWork+2
  6427  002FDE  CFDD F08A          	movff	postdec2,??_doOneSecondWork+3
  6428  002FE2  C08A  F089         	movff	??_doOneSecondWork+3,??_doOneSecondWork+2
  6429  002FE6  6B8A               	clrf	(??_doOneSecondWork+3)& (0+255),b
  6430  002FE8  5189               	movf	(??_doOneSecondWork+2)& (0+255),w,b
  6431  002FEA  6E10               	movwf	?_Write_b_eep+2,c
  6432  002FEC  0012               	return	
  6433  002FEE                     __end_ofPL40:
  6434                           	opt stack 0
  6435  002FEE                     PL50:
  6436                           	opt stack 22
  6437  002FEE  CFDD F088          	movff	postdec2,??_doOneSecondWork+1
  6438  002FF2  C08F  F00E         	movff	doOneSecondWork@setpoint,?___wmul
  6439  002FF6  C090  F00F         	movff	doOneSecondWork@setpoint+1,?___wmul+1
  6440  002FFA  6A11               	clrf	?___wmul+3,c
  6441  002FFC  0E64               	movlw	100
  6442  002FFE  6E10               	movwf	?___wmul+2,c
  6443  003000  0C64               	retlw	100
  6444  003002                     __end_ofPL50:
  6445                           	opt stack 0
  6446  003002                     PL54:
  6447                           	opt stack 22
  6448  003002  518A               	movf	(??_doOneSecondWork+3)& (0+255),w,b
  6449  003004  0A80               	xorlw	128
  6450  003006  6F8B               	movwf	(??_doOneSecondWork+4)& (0+255),b
  6451  003008  5187               	movf	??_doOneSecondWork& (0+255),w,b
  6452  00300A  5D89               	subwf	(??_doOneSecondWork+2)& (0+255),w,b
  6453  00300C  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6454  00300E  0A80               	xorlw	128
  6455  003010  598B               	subwfb	(??_doOneSecondWork+4)& (0+255),w,b
  6456  003012  0012               	return	
  6457  003014                     __end_ofPL54:
  6458                           	opt stack 0
  6459  003014                     PL72:
  6460                           	opt stack 22
  6461  003014  0100               	movlb	0	; () banked
  6462  003016  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  6463  003018  6E16               	movwf	?_Read_b_eep,c
  6464  00301A  6A17               	clrf	?_Read_b_eep+1,c
  6465  00301C  0E00               	movlw	0
  6466  00301E  2217               	addwfc	?_Read_b_eep+1,f,c
  6467  003020  0C00               	retlw	0
  6468  003022                     __end_ofPL72:
  6469                           	opt stack 0
  6470  003022                     PL76:
  6471                           	opt stack 22
  6472  003022  0E97               	movlw	151
  6473  003024  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  6474  003026  6E16               	movwf	?_Read_b_eep,c
  6475  003028  6A17               	clrf	?_Read_b_eep+1,c
  6476  00302A  0E00               	movlw	0
  6477  00302C  2217               	addwfc	?_Read_b_eep+1,f,c
  6478  00302E  0C00               	retlw	0
  6479  003030                     __end_ofPL76:
  6480                           	opt stack 0
  6481  003030                     PL84:
  6482                           	opt stack 22
  6483  003030  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6484  003032  0E1E               	movlw	30
  6485  003034  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6486  003036  0C05               	retlw	5
  6487  003038                     __end_ofPL84:
  6488                           	opt stack 0
  6489  003038                     PL86:
  6490                           	opt stack 22
  6491  003038  0E1E               	movlw	30
  6492  00303A  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6493  00303C  0C05               	retlw	5
  6494  00303E                     __end_ofPL86:
  6495                           	opt stack 0
  6496  00303E                     PL90:
  6497                           	opt stack 22
  6498  00303E  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6499  003040  0E1E               	movlw	30
  6500  003042  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6501  003044  0C06               	retlw	6
  6502  003046                     __end_ofPL90:
  6503                           	opt stack 0
  6504                           tblptru	equ	0xFF8
  6505                           tblptrh	equ	0xFF7
  6506                           tblptrl	equ	0xFF6
  6507                           tablat	equ	0xFF5
  6508                           prodh	equ	0xFF4
  6509                           prodl	equ	0xFF3
  6510                           intcon	equ	0xFF2
  6511                           postinc0	equ	0xFEE
  6512                           wreg	equ	0xFE8
  6513                           indf1	equ	0xFE7
  6514                           postdec1	equ	0xFE5
  6515                           fsr1h	equ	0xFE2
  6516                           fsr1l	equ	0xFE1
  6517                           indf2	equ	0xFDF
  6518                           postinc2	equ	0xFDE
  6519                           postdec2	equ	0xFDD
  6520                           plusw2	equ	0xFDB
  6521                           fsr2h	equ	0xFDA
  6522                           fsr2l	equ	0xFD9
  6523                           status	equ	0xFD8
  6524                           
  6525 ;; *************** function _vscp_error *****************
  6526 ;; Defined at:
  6527 ;;		line 197 in file "../../vscp_firmware/common/vscp_firmware.c"
  6528 ;; Parameters:    Size  Location     Type
  6529 ;;		None
  6530 ;; Auto vars:     Size  Location     Type
  6531 ;;		None
  6532 ;; Return value:  Size  Location     Type
  6533 ;;		None               void
  6534 ;; Registers used:
  6535 ;;		None
  6536 ;; Tracked objects:
  6537 ;;		On entry : 0/0
  6538 ;;		On exit  : 0/0
  6539 ;;		Unchanged: 0/0
  6540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6541 ;;      Params:         0       0       0       0       0       0       0
  6542 ;;      Locals:         0       0       0       0       0       0       0
  6543 ;;      Temps:          0       0       0       0       0       0       0
  6544 ;;      Totals:         0       0       0       0       0       0       0
  6545 ;;Total ram usage:        0 bytes
  6546 ;; Hardware stack levels used:    1
  6547 ;; Hardware stack levels required when called:    2
  6548 ;; This function calls:
  6549 ;;		Nothing
  6550 ;; This function is called by:
  6551 ;;		_main
  6552 ;; This function uses a non-reentrant model
  6553 ;;
  6554                           
  6555                           	psect	text26
  6556  005794                     __ptext26:
  6557                           	opt stack 0
  6558  005794                     _vscp_error:
  6559                           	opt stack 28
  6560                           
  6561                           ;vscp_firmware.c: 198: vscp_initledfunc = 0x00;
  6562                           
  6563                           ; BSR set to: 0
  6564                           ;incstack = 0
  6565                           ;incstack = 0
  6566  005794  6A4D               	clrf	_vscp_initledfunc,c
  6567  005796  0012               	return	
  6568  005798                     __end_of_vscp_error:
  6569                           	opt stack 0
  6570                           tblptru	equ	0xFF8
  6571                           tblptrh	equ	0xFF7
  6572                           tblptrl	equ	0xFF6
  6573                           tablat	equ	0xFF5
  6574                           prodh	equ	0xFF4
  6575                           prodl	equ	0xFF3
  6576                           intcon	equ	0xFF2
  6577                           postinc0	equ	0xFEE
  6578                           wreg	equ	0xFE8
  6579                           indf1	equ	0xFE7
  6580                           postdec1	equ	0xFE5
  6581                           fsr1h	equ	0xFE2
  6582                           fsr1l	equ	0xFE1
  6583                           indf2	equ	0xFDF
  6584                           postinc2	equ	0xFDE
  6585                           postdec2	equ	0xFDD
  6586                           plusw2	equ	0xFDB
  6587                           fsr2h	equ	0xFDA
  6588                           fsr2l	equ	0xFD9
  6589                           status	equ	0xFD8
  6590                           
  6591 ;; *************** function _handle_sync *****************
  6592 ;; Defined at:
  6593 ;;		line 1303 in file "../main.c"
  6594 ;; Parameters:    Size  Location     Type
  6595 ;;		None
  6596 ;; Auto vars:     Size  Location     Type
  6597 ;;  i               1   41[BANK0 ] unsigned char 
  6598 ;; Return value:  Size  Location     Type
  6599 ;;		None               void
  6600 ;; Registers used:
  6601 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6602 ;; Tracked objects:
  6603 ;;		On entry : F/0
  6604 ;;		On exit  : F/0
  6605 ;;		Unchanged: 0/0
  6606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6607 ;;      Params:         0       0       0       0       0       0       0
  6608 ;;      Locals:         0       1       0       0       0       0       0
  6609 ;;      Temps:          0       2       0       0       0       0       0
  6610 ;;      Totals:         0       3       0       0       0       0       0
  6611 ;;Total ram usage:        3 bytes
  6612 ;; Hardware stack levels used:    1
  6613 ;; Hardware stack levels required when called:    8
  6614 ;; This function calls:
  6615 ;;		_Read_b_eep
  6616 ;;		_sendTempEvent
  6617 ;; This function is called by:
  6618 ;;		_main
  6619 ;; This function uses a non-reentrant model
  6620 ;;
  6621                           
  6622                           	psect	text27
  6623  004C0C                     __ptext27:
  6624                           	opt stack 0
  6625  004C0C                     _handle_sync:
  6626                           	opt stack 22
  6627                           
  6628                           ; BSR set to: 0
  6629                           ;main.c: 1304: uint8_t i;
  6630                           ;main.c: 1306: for (i = 0; i < 6; i++) {
  6631                           
  6632                           ;incstack = 0
  6633                           ;incstack = 0
  6634  004C0C  6B89               	clrf	handle_sync@i& (0+255),b
  6635  004C0E                     l11245:
  6636                           
  6637                           ; BSR set to: 0
  6638                           ;main.c: 1308: if ( ( ( 0xff == vscp_imsg.data[ 1 ] ) ||
  6639                           ;main.c: 1309: ( Read_b_eep(0x73 + 2*i) == vscp_imsg.data[ 1 ] ) ) &&
  6640                           ;main.c: 1310: ( ( 0xff == vscp_imsg.data[ 2 ] ) ||
  6641                           ;main.c: 1311: ( Read_b_eep(0x74 + 2*i) == vscp_imsg.data[ 2 ] ) ) ) {
  6642  004C0E  29C4               	incf	(_vscp_imsg+7)& (0+255),w,b
  6643  004C10  E010               	bz	l11249
  6644                           
  6645                           ; BSR set to: 0
  6646  004C12  90D8               	bcf	status,0,c
  6647  004C14  3589               	rlcf	handle_sync@i& (0+255),w,b
  6648  004C16  6F87               	movwf	??_handle_sync& (0+255),b
  6649  004C18  6B88               	clrf	(??_handle_sync+1)& (0+255),b
  6650  004C1A  3788               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6651  004C1C  0E73               	movlw	115
  6652  004C1E  2587               	addwf	??_handle_sync& (0+255),w,b
  6653  004C20  6E16               	movwf	?_Read_b_eep,c
  6654  004C22  0E00               	movlw	0
  6655  004C24  2188               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6656  004C26  6E17               	movwf	?_Read_b_eep+1,c
  6657  004C28  EC8F  F02B         	call	_Read_b_eep	;wreg free
  6658  004C2C  0100               	movlb	0	; () banked
  6659  004C2E  19C4               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  6660  004C30  E128               	bnz	l11259
  6661  004C32                     l11249:
  6662                           
  6663                           ; BSR set to: 0
  6664  004C32  29C5               	incf	(_vscp_imsg+8)& (0+255),w,b
  6665  004C34  E010               	bz	l296
  6666                           
  6667                           ; BSR set to: 0
  6668  004C36  90D8               	bcf	status,0,c
  6669  004C38  3589               	rlcf	handle_sync@i& (0+255),w,b
  6670  004C3A  6F87               	movwf	??_handle_sync& (0+255),b
  6671  004C3C  6B88               	clrf	(??_handle_sync+1)& (0+255),b
  6672  004C3E  3788               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6673  004C40  0E74               	movlw	116
  6674  004C42  2587               	addwf	??_handle_sync& (0+255),w,b
  6675  004C44  6E16               	movwf	?_Read_b_eep,c
  6676  004C46  0E00               	movlw	0
  6677  004C48  2188               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6678  004C4A  6E17               	movwf	?_Read_b_eep+1,c
  6679  004C4C  EC8F  F02B         	call	_Read_b_eep	;wreg free
  6680  004C50  0100               	movlb	0	; () banked
  6681  004C52  19C5               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  6682  004C54  E116               	bnz	l11259
  6683  004C56                     l296:
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;main.c: 1314: timeout_clock = 0;
  6687  004C56  0101               	movlb	1	; () banked
  6688  004C58  6B16               	clrf	_timeout_clock& (0+255),b	;volatile
  6689  004C5A  6B17               	clrf	(_timeout_clock+1)& (0+255),b	;volatile
  6690  004C5C  6B18               	clrf	(_timeout_clock+2)& (0+255),b	;volatile
  6691  004C5E  6B19               	clrf	(_timeout_clock+3)& (0+255),b	;volatile
  6692                           
  6693                           ;main.c: 1315: while (!sendTempEvent(i)) {
  6694  004C60  D00A               	goto	l11257
  6695  004C62                     l11253:
  6696                           
  6697                           ;main.c: 1316: if (timeout_clock > 1000) break;
  6698  004C62  0EE9               	movlw	233
  6699  004C64  0101               	movlb	1	; () banked
  6700  004C66  5D16               	subwf	_timeout_clock& (0+255),w,b	;volatile
  6701  004C68  0E03               	movlw	3
  6702  004C6A  5917               	subwfb	(_timeout_clock+1)& (0+255),w,b	;volatile
  6703  004C6C  0E00               	movlw	0
  6704  004C6E  5918               	subwfb	(_timeout_clock+2)& (0+255),w,b	;volatile
  6705  004C70  0E00               	movlw	0
  6706  004C72  5919               	subwfb	(_timeout_clock+3)& (0+255),w,b	;volatile
  6707  004C74  E206               	bc	l11259
  6708  004C76                     l11257:
  6709                           
  6710                           ; BSR set to: 1
  6711  004C76  0100               	movlb	0	; () banked
  6712  004C78  5189               	movf	handle_sync@i& (0+255),w,b
  6713  004C7A  EC83  F026         	call	_sendTempEvent
  6714  004C7E  0900               	iorlw	0
  6715  004C80  E0F0               	bz	l11253
  6716  004C82                     l11259:
  6717  004C82  0100               	movlb	0	; () banked
  6718  004C84  2B89               	incf	handle_sync@i& (0+255),f,b
  6719                           
  6720                           ; BSR set to: 0
  6721  004C86  0E05               	movlw	5
  6722  004C88  6589               	cpfsgt	handle_sync@i& (0+255),b
  6723  004C8A  D7C1               	goto	l11245
  6724                           
  6725                           ; BSR set to: 0
  6726  004C8C  0C05               	retlw	5
  6727  004C8E                     __end_of_handle_sync:
  6728                           	opt stack 0
  6729                           tblptru	equ	0xFF8
  6730                           tblptrh	equ	0xFF7
  6731                           tblptrl	equ	0xFF6
  6732                           tablat	equ	0xFF5
  6733                           prodh	equ	0xFF4
  6734                           prodl	equ	0xFF3
  6735                           intcon	equ	0xFF2
  6736                           postinc0	equ	0xFEE
  6737                           wreg	equ	0xFE8
  6738                           indf1	equ	0xFE7
  6739                           postdec1	equ	0xFE5
  6740                           fsr1h	equ	0xFE2
  6741                           fsr1l	equ	0xFE1
  6742                           indf2	equ	0xFDF
  6743                           postinc2	equ	0xFDE
  6744                           postdec2	equ	0xFDD
  6745                           plusw2	equ	0xFDB
  6746                           fsr2h	equ	0xFDA
  6747                           fsr2l	equ	0xFD9
  6748                           status	equ	0xFD8
  6749                           
  6750 ;; *************** function _sendTempEvent *****************
  6751 ;; Defined at:
  6752 ;;		line 853 in file "../main.c"
  6753 ;; Parameters:    Size  Location     Type
  6754 ;;  i               1    wreg     unsigned char 
  6755 ;; Auto vars:     Size  Location     Type
  6756 ;;  i               1   38[BANK0 ] unsigned char 
  6757 ;; Return value:  Size  Location     Type
  6758 ;;                  1    wreg      unsigned char 
  6759 ;; Registers used:
  6760 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6761 ;; Tracked objects:
  6762 ;;		On entry : F/0
  6763 ;;		On exit  : 0/0
  6764 ;;		Unchanged: 0/0
  6765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6766 ;;      Params:         0       0       0       0       0       0       0
  6767 ;;      Locals:         0       1       0       0       0       0       0
  6768 ;;      Temps:          0       1       0       0       0       0       0
  6769 ;;      Totals:         0       2       0       0       0       0       0
  6770 ;;Total ram usage:        2 bytes
  6771 ;; Hardware stack levels used:    1
  6772 ;; Hardware stack levels required when called:    7
  6773 ;; This function calls:
  6774 ;;		_Read_b_eep
  6775 ;;		_vscp_sendEvent
  6776 ;;		_setEventData
  6777 ;; This function is called by:
  6778 ;;		_doOneSecondWork
  6779 ;;		_handle_sync
  6780 ;; This function uses a non-reentrant model
  6781 ;;
  6782                           
  6783                           	psect	text28
  6784  004D06                     __ptext28:
  6785                           	opt stack 0
  6786  004D06                     _sendTempEvent:
  6787                           	opt stack 22
  6788                           
  6789                           ; BSR set to: 0
  6790                           ;incstack = 0
  6791                           ;incstack = 0
  6792                           ;sendTempEvent@i stored from wreg
  6793  004D06  CFE8 F086          	movff	wreg,sendTempEvent@i
  6794                           
  6795                           ; BSR set to: 0
  6796                           ;main.c: 854: vscp_omsg.priority = 0x03;
  6797  004D0A  0E03               	movlw	3
  6798  004D0C  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  6799                           
  6800                           ;main.c: 855: vscp_omsg.flags = 0x80 + 4;
  6801  004D0E  0E84               	movlw	132
  6802  004D10  6FCB               	movwf	_vscp_omsg& (0+255),b
  6803                           
  6804                           ;main.c: 856: vscp_omsg.vscp_class = 10;
  6805  004D12  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6806  004D14  0E0A               	movlw	10
  6807  004D16  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6808                           
  6809                           ;main.c: 857: vscp_omsg.vscp_type = 6;
  6810  004D18  0E06               	movlw	6
  6811  004D1A  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  6812                           
  6813                           ; BSR set to: 0
  6814                           ;main.c: 860: vscp_omsg.data[ 0 ] = 0x80 |
  6815                           ;main.c: 861: ((0x03 & Read_b_eep(i + 0x43)) << 3) |
  6816                           ;main.c: 862: i;
  6817  004D1C  D828               	call	PL68	;call to abstracted procedure
  6818  004D1E  EC8F  F02B         	call	_Read_b_eep	;wreg free
  6819  004D22  0100               	movlb	0	; () banked
  6820  004D24  6F85               	movwf	??_sendTempEvent& (0+255),b
  6821  004D26  0E03               	movlw	3
  6822  004D28  1785               	andwf	??_sendTempEvent& (0+255),f,b
  6823  004D2A  90D8               	bcf	status,0,c
  6824  004D2C  3785               	rlcf	??_sendTempEvent& (0+255),f,b
  6825  004D2E  90D8               	bcf	status,0,c
  6826  004D30  3785               	rlcf	??_sendTempEvent& (0+255),f,b
  6827  004D32  90D8               	bcf	status,0,c
  6828  004D34  3585               	rlcf	??_sendTempEvent& (0+255),w,b
  6829  004D36  1186               	iorwf	sendTempEvent@i& (0+255),w,b
  6830  004D38  0980               	iorlw	128
  6831  004D3A  6FD1               	movwf	(_vscp_omsg+6)& (0+255),b
  6832                           
  6833                           ; BSR set to: 0
  6834                           ;main.c: 864: vscp_omsg.data[ 1 ] = 0x82;
  6835  004D3C  0E82               	movlw	130
  6836  004D3E  6FD2               	movwf	(_vscp_omsg+7)& (0+255),b
  6837                           
  6838                           ; BSR set to: 0
  6839                           ;main.c: 866: setEventData( current_temp[i],
  6840                           ;main.c: 867: ( 0x03 & Read_b_eep(i + 0x43) ) );
  6841  004D40  5186               	movf	sendTempEvent@i& (0+255),w,b
  6842  004D42  0D02               	mullw	2
  6843  004D44  EC78  F017         	call	PL2	;call to abstracted procedure
  6844  004D48  CFDE F07C          	movff	postinc2,?_setEventData
  6845  004D4C  CFDD F07D          	movff	postdec2,?_setEventData+1
  6846  004D50  D80E               	call	PL68	;call to abstracted procedure
  6847  004D52  EC8F  F02B         	call	_Read_b_eep	;wreg free
  6848  004D56  0B03               	andlw	3
  6849  004D58  0100               	movlb	0	; () banked
  6850  004D5A  6F7E               	movwf	(?_setEventData+2)& (0+255),b
  6851  004D5C  ECDB  F023         	call	_setEventData	;wreg free
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;main.c: 870: if (!vscp_sendEvent()) {
  6855  004D60  ECEE  F029         	call	_vscp_sendEvent	;wreg free
  6856  004D64  0900               	iorlw	0
  6857                           
  6858                           ;main.c: 871: return 0;
  6859  004D66  0E00               	movlw	0
  6860  004D68  A4D8               	btfss	status,2,c
  6861                           
  6862                           ;main.c: 872: }
  6863                           ;main.c: 874: return 1;
  6864  004D6A  0E01               	movlw	1
  6865  004D6C  0012               	return	
  6866  004D6E                     __end_of_sendTempEvent:
  6867                           	opt stack 0
  6868  004D6E                     PL68:
  6869                           	opt stack 22
  6870  004D6E  0E43               	movlw	67
  6871  004D70  2586               	addwf	sendTempEvent@i& (0+255),w,b
  6872  004D72  6E16               	movwf	?_Read_b_eep,c
  6873  004D74  6A17               	clrf	?_Read_b_eep+1,c
  6874  004D76  0E00               	movlw	0
  6875  004D78  2217               	addwfc	?_Read_b_eep+1,f,c
  6876  004D7A  0C00               	retlw	0
  6877  004D7C                     __end_ofPL68:
  6878                           	opt stack 0
  6879                           tblptru	equ	0xFF8
  6880                           tblptrh	equ	0xFF7
  6881                           tblptrl	equ	0xFF6
  6882                           tablat	equ	0xFF5
  6883                           prodh	equ	0xFF4
  6884                           prodl	equ	0xFF3
  6885                           intcon	equ	0xFF2
  6886                           postinc0	equ	0xFEE
  6887                           wreg	equ	0xFE8
  6888                           indf1	equ	0xFE7
  6889                           postdec1	equ	0xFE5
  6890                           fsr1h	equ	0xFE2
  6891                           fsr1l	equ	0xFE1
  6892                           indf2	equ	0xFDF
  6893                           postinc2	equ	0xFDE
  6894                           postdec2	equ	0xFDD
  6895                           plusw2	equ	0xFDB
  6896                           fsr2h	equ	0xFDA
  6897                           fsr2l	equ	0xFD9
  6898                           status	equ	0xFD8
  6899                           
  6900 ;; *************** function _setEventData *****************
  6901 ;; Defined at:
  6902 ;;		line 882 in file "../main.c"
  6903 ;; Parameters:    Size  Location     Type
  6904 ;;  v               2   28[BANK0 ] int 
  6905 ;;  unit            1   30[BANK0 ] unsigned char 
  6906 ;; Auto vars:     Size  Location     Type
  6907 ;;  newval          4   31[BANK0 ] unsigned char 
  6908 ;;  ival            2   35[BANK0 ] int 
  6909 ;; Return value:  Size  Location     Type
  6910 ;;		None               void
  6911 ;; Registers used:
  6912 ;;		wreg, status,2, status,0, cstack
  6913 ;; Tracked objects:
  6914 ;;		On entry : F/0
  6915 ;;		On exit  : F/0
  6916 ;;		Unchanged: 0/0
  6917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6918 ;;      Params:         0       3       0       0       0       0       0
  6919 ;;      Locals:         0       6       0       0       0       0       0
  6920 ;;      Temps:          0       0       0       0       0       0       0
  6921 ;;      Totals:         0       9       0       0       0       0       0
  6922 ;;Total ram usage:        9 bytes
  6923 ;; Hardware stack levels used:    1
  6924 ;; Hardware stack levels required when called:    5
  6925 ;; This function calls:
  6926 ;;		_Celsius2Kelvin
  6927 ;;		_Celsius2Fahrenheit
  6928 ;;		___awtofl
  6929 ;;		___fltol
  6930 ;; This function is called by:
  6931 ;;		_sendTempEvent
  6932 ;; This function uses a non-reentrant model
  6933 ;;
  6934                           
  6935                           	psect	text29
  6936  0047B6                     __ptext29:
  6937                           	opt stack 0
  6938  0047B6                     _setEventData:
  6939                           	opt stack 23
  6940                           
  6941                           ; BSR set to: 0
  6942                           ;main.c: 883: double newval;
  6943                           ;main.c: 884: int ival;
  6944                           ;main.c: 886: if (0 == unit) {
  6945                           
  6946                           ;incstack = 0
  6947                           ;incstack = 0
  6948  0047B6  677E               	tstfsz	setEventData@unit& (0+255),b
  6949  0047B8  D019               	goto	l11623
  6950                           
  6951                           ; BSR set to: 0
  6952                           ;main.c: 888: newval = Celsius2Kelvin(v);
  6953  0047BA  C07C  F018         	movff	setEventData@v,?___awtofl
  6954  0047BE  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  6955  0047C2  EC6C  F029         	call	___awtofl	;wreg free
  6956  0047C6  C01B  F02F         	movff	?___awtofl+3,?_Celsius2Kelvin+3
  6957  0047CA  C01A  F02E         	movff	?___awtofl+2,?_Celsius2Kelvin+2
  6958  0047CE  C019  F02D         	movff	?___awtofl+1,?_Celsius2Kelvin+1
  6959  0047D2  C018  F02C         	movff	?___awtofl,?_Celsius2Kelvin
  6960  0047D6  EC89  F029         	call	_Celsius2Kelvin	;wreg free
  6961  0047DA  C02F  F082         	movff	?_Celsius2Kelvin+3,setEventData@newval+3
  6962  0047DE  C02E  F081         	movff	?_Celsius2Kelvin+2,setEventData@newval+2
  6963  0047E2  C02D  F080         	movff	?_Celsius2Kelvin+1,setEventData@newval+1
  6964  0047E6  C02C  F07F         	movff	?_Celsius2Kelvin,setEventData@newval
  6965                           
  6966                           ;main.c: 889: } else if (2 == unit) {
  6967  0047EA  D02A               	goto	l256
  6968  0047EC                     l11623:
  6969                           
  6970                           ; BSR set to: 0
  6971  0047EC  517E               	movf	setEventData@unit& (0+255),w,b
  6972  0047EE  0A02               	xorlw	2
  6973  0047F0  E119               	bnz	l11627
  6974                           
  6975                           ; BSR set to: 0
  6976                           ;main.c: 891: newval = Celsius2Fahrenheit(v);
  6977  0047F2  C07C  F018         	movff	setEventData@v,?___awtofl
  6978  0047F6  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  6979  0047FA  EC6C  F029         	call	___awtofl	;wreg free
  6980  0047FE  C01B  F079         	movff	?___awtofl+3,?_Celsius2Fahrenheit+3
  6981  004802  C01A  F078         	movff	?___awtofl+2,?_Celsius2Fahrenheit+2
  6982  004806  C019  F077         	movff	?___awtofl+1,?_Celsius2Fahrenheit+1
  6983  00480A  C018  F076         	movff	?___awtofl,?_Celsius2Fahrenheit
  6984  00480E  ECF9  F026         	call	_Celsius2Fahrenheit	;wreg free
  6985  004812  C079  F082         	movff	?_Celsius2Fahrenheit+3,setEventData@newval+3
  6986  004816  C078  F081         	movff	?_Celsius2Fahrenheit+2,setEventData@newval+2
  6987  00481A  C077  F080         	movff	?_Celsius2Fahrenheit+1,setEventData@newval+1
  6988  00481E  C076  F07F         	movff	?_Celsius2Fahrenheit,setEventData@newval
  6989                           
  6990                           ;main.c: 892: } else {
  6991  004822  D00E               	goto	l256
  6992  004824                     l11627:
  6993                           
  6994                           ; BSR set to: 0
  6995                           ;main.c: 894: newval = v;
  6996  004824  C07C  F018         	movff	setEventData@v,?___awtofl
  6997  004828  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  6998  00482C  EC6C  F029         	call	___awtofl	;wreg free
  6999  004830  C01B  F082         	movff	?___awtofl+3,setEventData@newval+3
  7000  004834  C01A  F081         	movff	?___awtofl+2,setEventData@newval+2
  7001  004838  C019  F080         	movff	?___awtofl+1,setEventData@newval+1
  7002  00483C  C018  F07F         	movff	?___awtofl,setEventData@newval
  7003  004840                     l256:
  7004                           
  7005                           ;main.c: 895: }
  7006                           ;main.c: 897: ival = (int) newval;
  7007  004840  C07F  F076         	movff	setEventData@newval,?___fltol
  7008  004844  C080  F077         	movff	setEventData@newval+1,?___fltol+1
  7009  004848  C081  F078         	movff	setEventData@newval+2,?___fltol+2
  7010  00484C  C082  F079         	movff	setEventData@newval+3,?___fltol+3
  7011  004850  EC29  F025         	call	___fltol	;wreg free
  7012  004854  C076  F083         	movff	?___fltol,setEventData@ival
  7013  004858  C077  F084         	movff	?___fltol+1,setEventData@ival+1
  7014                           
  7015                           ; BSR set to: 0
  7016                           ;main.c: 899: vscp_omsg.data[ 2 ] = ((ival & 0xff00) >> 8);
  7017  00485C  5184               	movf	(setEventData@ival+1)& (0+255),w,b
  7018  00485E  6FD3               	movwf	(_vscp_omsg+8)& (0+255),b
  7019                           
  7020                           ; BSR set to: 0
  7021                           ;main.c: 900: vscp_omsg.data[ 3 ] = (ival & 0xff);
  7022  004860  C083  F0D4         	movff	setEventData@ival,_vscp_omsg+9
  7023                           
  7024                           ; BSR set to: 0
  7025  004864  0012               	return	
  7026  004866                     __end_of_setEventData:
  7027                           	opt stack 0
  7028                           tblptru	equ	0xFF8
  7029                           tblptrh	equ	0xFF7
  7030                           tblptrl	equ	0xFF6
  7031                           tablat	equ	0xFF5
  7032                           prodh	equ	0xFF4
  7033                           prodl	equ	0xFF3
  7034                           intcon	equ	0xFF2
  7035                           postinc0	equ	0xFEE
  7036                           wreg	equ	0xFE8
  7037                           indf1	equ	0xFE7
  7038                           postdec1	equ	0xFE5
  7039                           fsr1h	equ	0xFE2
  7040                           fsr1l	equ	0xFE1
  7041                           indf2	equ	0xFDF
  7042                           postinc2	equ	0xFDE
  7043                           postdec2	equ	0xFDD
  7044                           plusw2	equ	0xFDB
  7045                           fsr2h	equ	0xFDA
  7046                           fsr2l	equ	0xFD9
  7047                           status	equ	0xFD8
  7048                           
  7049 ;; *************** function _Celsius2Fahrenheit *****************
  7050 ;; Defined at:
  7051 ;;		line 42 in file "../ntc.c"
  7052 ;; Parameters:    Size  Location     Type
  7053 ;;  tc              4   22[BANK0 ] int 
  7054 ;; Auto vars:     Size  Location     Type
  7055 ;;		None
  7056 ;; Return value:  Size  Location     Type
  7057 ;;                  4   22[BANK0 ] int 
  7058 ;; Registers used:
  7059 ;;		wreg, status,2, status,0, cstack
  7060 ;; Tracked objects:
  7061 ;;		On entry : 0/0
  7062 ;;		On exit  : 0/0
  7063 ;;		Unchanged: 0/0
  7064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7065 ;;      Params:         0       4       0       0       0       0       0
  7066 ;;      Locals:         0       0       0       0       0       0       0
  7067 ;;      Temps:          0       0       0       0       0       0       0
  7068 ;;      Totals:         0       4       0       0       0       0       0
  7069 ;;Total ram usage:        4 bytes
  7070 ;; Hardware stack levels used:    1
  7071 ;; Hardware stack levels required when called:    4
  7072 ;; This function calls:
  7073 ;;		___fladd
  7074 ;;		___fldiv
  7075 ;;		___flmul
  7076 ;; This function is called by:
  7077 ;;		_setEventData
  7078 ;; This function uses a non-reentrant model
  7079 ;;
  7080                           
  7081                           	psect	text30
  7082  004DF2                     __ptext30:
  7083                           	opt stack 0
  7084  004DF2                     _Celsius2Fahrenheit:
  7085                           	opt stack 23
  7086                           
  7087                           ;ntc.c: 43: return ( (9 * tc + 16000) / 5);
  7088                           
  7089                           ; BSR set to: 0
  7090                           ;incstack = 0
  7091                           ;incstack = 0
  7092  004DF2  6A21               	clrf	?___fladd+4,c
  7093  004DF4  6A22               	clrf	?___fladd+5,c
  7094  004DF6  0E7A               	movlw	122
  7095  004DF8  6E23               	movwf	?___fladd+6,c
  7096  004DFA  0E46               	movlw	70
  7097  004DFC  6E24               	movwf	?___fladd+7,c
  7098  004DFE  0100               	movlb	0	; () banked
  7099  004E00  6B64               	clrf	(?___flmul+4)& (0+255),b
  7100  004E02  6B65               	clrf	(?___flmul+5)& (0+255),b
  7101  004E04  0E10               	movlw	16
  7102  004E06  6F66               	movwf	(?___flmul+6)& (0+255),b
  7103  004E08  0E41               	movlw	65
  7104  004E0A  6F67               	movwf	(?___flmul+7)& (0+255),b
  7105  004E0C  C076  F060         	movff	Celsius2Fahrenheit@tc,?___flmul
  7106  004E10  C077  F061         	movff	Celsius2Fahrenheit@tc+1,?___flmul+1
  7107  004E14  C078  F062         	movff	Celsius2Fahrenheit@tc+2,?___flmul+2
  7108  004E18  C079  F063         	movff	Celsius2Fahrenheit@tc+3,?___flmul+3
  7109  004E1C  ECA8  F021         	call	___flmul	;wreg free
  7110  004E20  C063  F020         	movff	?___flmul+3,?___fladd+3
  7111  004E24  C062  F01F         	movff	?___flmul+2,?___fladd+2
  7112  004E28  C061  F01E         	movff	?___flmul+1,?___fladd+1
  7113  004E2C  C060  F01D         	movff	?___flmul,?___fladd
  7114  004E30  ECB9  F01D         	call	___fladd	;wreg free
  7115  004E34  C020  F02F         	movff	?___fladd+3,?___fldiv+3
  7116  004E38  C01F  F02E         	movff	?___fladd+2,?___fldiv+2
  7117  004E3C  C01E  F02D         	movff	?___fladd+1,?___fldiv+1
  7118  004E40  C01D  F02C         	movff	?___fladd,?___fldiv
  7119  004E44  6A30               	clrf	?___fldiv+4,c
  7120  004E46  6A31               	clrf	?___fldiv+5,c
  7121  004E48  0EA0               	movlw	160
  7122  004E4A  6E32               	movwf	?___fldiv+6,c
  7123  004E4C  0E40               	movlw	64
  7124  004E4E  6E33               	movwf	?___fldiv+7,c
  7125  004E50  EC33  F024         	call	___fldiv	;wreg free
  7126  004E54  C02F  F079         	movff	?___fldiv+3,?_Celsius2Fahrenheit+3
  7127  004E58  C02E  F078         	movff	?___fldiv+2,?_Celsius2Fahrenheit+2
  7128  004E5C  C02D  F077         	movff	?___fldiv+1,?_Celsius2Fahrenheit+1
  7129  004E60  C02C  F076         	movff	?___fldiv,?_Celsius2Fahrenheit
  7130  004E64  0012               	return	
  7131  004E66                     __end_of_Celsius2Fahrenheit:
  7132                           	opt stack 0
  7133                           tblptru	equ	0xFF8
  7134                           tblptrh	equ	0xFF7
  7135                           tblptrl	equ	0xFF6
  7136                           tablat	equ	0xFF5
  7137                           prodh	equ	0xFF4
  7138                           prodl	equ	0xFF3
  7139                           intcon	equ	0xFF2
  7140                           postinc0	equ	0xFEE
  7141                           wreg	equ	0xFE8
  7142                           indf1	equ	0xFE7
  7143                           postdec1	equ	0xFE5
  7144                           fsr1h	equ	0xFE2
  7145                           fsr1l	equ	0xFE1
  7146                           indf2	equ	0xFDF
  7147                           postinc2	equ	0xFDE
  7148                           postdec2	equ	0xFDD
  7149                           plusw2	equ	0xFDB
  7150                           fsr2h	equ	0xFDA
  7151                           fsr2l	equ	0xFD9
  7152                           status	equ	0xFD8
  7153                           
  7154 ;; *************** function ___fladd *****************
  7155 ;; Defined at:
  7156 ;;		line 89 in file "/opt/microchip/xc8/v1.21/sources/common/fladd.c"
  7157 ;; Parameters:    Size  Location     Type
  7158 ;;  f1              4   28[COMRAM] int 
  7159 ;;  f2              4   32[COMRAM] int 
  7160 ;; Auto vars:     Size  Location     Type
  7161 ;;  exp1            1   42[COMRAM] unsigned char 
  7162 ;;  exp2            1   41[COMRAM] unsigned char 
  7163 ;;  sign            1   40[COMRAM] unsigned char 
  7164 ;; Return value:  Size  Location     Type
  7165 ;;                  4   28[COMRAM] unsigned char 
  7166 ;; Registers used:
  7167 ;;		wreg, status,2, status,0, cstack
  7168 ;; Tracked objects:
  7169 ;;		On entry : 0/0
  7170 ;;		On exit  : 0/0
  7171 ;;		Unchanged: 0/0
  7172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7173 ;;      Params:         8       0       0       0       0       0       0
  7174 ;;      Locals:         6       0       0       0       0       0       0
  7175 ;;      Temps:          1       0       0       0       0       0       0
  7176 ;;      Totals:        15       0       0       0       0       0       0
  7177 ;;Total ram usage:       15 bytes
  7178 ;; Hardware stack levels used:    1
  7179 ;; Hardware stack levels required when called:    3
  7180 ;; This function calls:
  7181 ;;		___flpack
  7182 ;; This function is called by:
  7183 ;;		_doWork
  7184 ;;		_Celsius2Fahrenheit
  7185 ;;		_Celsius2Kelvin
  7186 ;;		___asfladd
  7187 ;;		_floor
  7188 ;;		___flsub
  7189 ;;		_log
  7190 ;;		_eval_poly
  7191 ;; This function uses a non-reentrant model
  7192 ;;
  7193                           
  7194                           	psect	text31
  7195  003B72                     __ptext31:
  7196                           	opt stack 0
  7197  003B72                     ___fladd:
  7198                           	opt stack 25
  7199                           
  7200                           ;incstack = 0
  7201                           ;incstack = 0
  7202  003B72  341F               	rlcf	(___fladd@f1+2)& (0+255),w,c
  7203  003B74  3420               	rlcf	(___fladd@f1+3)& (0+255),w,c
  7204  003B76  6E2B               	movwf	___fladd@exp1,c
  7205  003B78  3423               	rlcf	(___fladd@f2+2)& (0+255),w,c
  7206  003B7A  3424               	rlcf	(___fladd@f2+3)& (0+255),w,c
  7207  003B7C  6E2A               	movwf	___fladd@exp2,c
  7208  003B7E  502B               	movf	___fladd@exp1,w,c
  7209  003B80  E009               	bz	l1592
  7210  003B82  502A               	movf	___fladd@exp2,w,c
  7211  003B84  602B               	cpfslt	___fladd@exp1,c
  7212  003B86  D00F               	goto	l12983
  7213  003B88  502B               	movf	___fladd@exp1,w,c
  7214  003B8A  5C2A               	subwf	___fladd@exp2,w,c
  7215  003B8C  6E25               	movwf	??___fladd& (0+255),c
  7216  003B8E  0E21               	movlw	33
  7217  003B90  5C25               	subwf	??___fladd,w,c
  7218  003B92  E309               	bnc	l12983
  7219  003B94                     l1592:
  7220  003B94  C021  F01D         	movff	___fladd@f2,?___fladd
  7221  003B98  C022  F01E         	movff	___fladd@f2+1,?___fladd+1
  7222  003B9C  C023  F01F         	movff	___fladd@f2+2,?___fladd+2
  7223  003BA0  C024  F020         	movff	___fladd@f2+3,?___fladd+3
  7224  003BA4  D087               	goto	l1593
  7225  003BA6                     l12983:
  7226  003BA6  502A               	movf	___fladd@exp2,w,c
  7227  003BA8  E009               	bz	l1596
  7228  003BAA  502B               	movf	___fladd@exp1,w,c
  7229  003BAC  602A               	cpfslt	___fladd@exp2,c
  7230  003BAE  D00F               	goto	l12989
  7231  003BB0  502A               	movf	___fladd@exp2,w,c
  7232  003BB2  5C2B               	subwf	___fladd@exp1,w,c
  7233  003BB4  6E25               	movwf	??___fladd& (0+255),c
  7234  003BB6  0E21               	movlw	33
  7235  003BB8  5C25               	subwf	??___fladd,w,c
  7236  003BBA  E309               	bnc	l12989
  7237  003BBC                     l1596:
  7238  003BBC  C01D  F01D         	movff	___fladd@f1,?___fladd
  7239  003BC0  C01E  F01E         	movff	___fladd@f1+1,?___fladd+1
  7240  003BC4  C01F  F01F         	movff	___fladd@f1+2,?___fladd+2
  7241  003BC8  C020  F020         	movff	___fladd@f1+3,?___fladd+3
  7242  003BCC  D073               	goto	l1593
  7243  003BCE                     l12989:
  7244  003BCE  0E06               	movlw	6
  7245  003BD0  6E29               	movwf	___fladd@sign,c
  7246  003BD2  BE20               	btfsc	___fladd@f1+3,7,c
  7247  003BD4  8E29               	bsf	___fladd@sign,7,c
  7248  003BD6  BE24               	btfsc	___fladd@f2+3,7,c
  7249  003BD8  8C29               	bsf	___fladd@sign,6,c
  7250  003BDA  8E1F               	bsf	___fladd@f1+2,7,c
  7251  003BDC  6A20               	clrf	___fladd@f1+3,c
  7252  003BDE  8E23               	bsf	___fladd@f2+2,7,c
  7253  003BE0  6A24               	clrf	___fladd@f2+3,c
  7254  003BE2  502A               	movf	___fladd@exp2,w,c
  7255  003BE4  602B               	cpfslt	___fladd@exp1,c
  7256  003BE6  D018               	goto	l13015
  7257  003BE8                     l13005:
  7258  003BE8  90D8               	bcf	status,0,c
  7259  003BEA  3621               	rlcf	___fladd@f2,f,c
  7260  003BEC  3622               	rlcf	___fladd@f2+1,f,c
  7261  003BEE  3623               	rlcf	___fladd@f2+2,f,c
  7262  003BF0  3624               	rlcf	___fladd@f2+3,f,c
  7263  003BF2  062A               	decf	___fladd@exp2,f,c
  7264  003BF4  502A               	movf	___fladd@exp2,w,c
  7265  003BF6  182B               	xorwf	___fladd@exp1,w,c
  7266  003BF8  E00B               	bz	l13013
  7267  003BFA  0629               	decf	___fladd@sign,f,c
  7268  003BFC  5029               	movf	___fladd@sign& (0+255),w,c
  7269  003BFE  0B07               	andlw	7
  7270  003C00  E007               	bz	l13013
  7271  003C02  D7F2               	goto	l13005
  7272  003C04                     l13011:
  7273  003C04  90D8               	bcf	status,0,c
  7274  003C06  3220               	rrcf	___fladd@f1+3,f,c
  7275  003C08  321F               	rrcf	___fladd@f1+2,f,c
  7276  003C0A  321E               	rrcf	___fladd@f1+1,f,c
  7277  003C0C  321D               	rrcf	___fladd@f1,f,c
  7278  003C0E  2A2B               	incf	___fladd@exp1,f,c
  7279  003C10                     l13013:
  7280  003C10  502A               	movf	___fladd@exp2,w,c
  7281  003C12  622B               	cpfseq	___fladd@exp1,c
  7282  003C14  D7F7               	goto	l13011
  7283  003C16  D01A               	goto	l1607
  7284  003C18                     l13015:
  7285  003C18  502B               	movf	___fladd@exp1,w,c
  7286  003C1A  602A               	cpfslt	___fladd@exp2,c
  7287  003C1C  D017               	goto	l1607
  7288  003C1E                     l13017:
  7289  003C1E  90D8               	bcf	status,0,c
  7290  003C20  361D               	rlcf	___fladd@f1,f,c
  7291  003C22  361E               	rlcf	___fladd@f1+1,f,c
  7292  003C24  361F               	rlcf	___fladd@f1+2,f,c
  7293  003C26  3620               	rlcf	___fladd@f1+3,f,c
  7294  003C28  062B               	decf	___fladd@exp1,f,c
  7295  003C2A  502A               	movf	___fladd@exp2,w,c
  7296  003C2C  182B               	xorwf	___fladd@exp1,w,c
  7297  003C2E  E00B               	bz	l13025
  7298  003C30  0629               	decf	___fladd@sign,f,c
  7299  003C32  5029               	movf	___fladd@sign& (0+255),w,c
  7300  003C34  0B07               	andlw	7
  7301  003C36  E007               	bz	l13025
  7302  003C38  D7F2               	goto	l13017
  7303  003C3A                     l13023:
  7304  003C3A  90D8               	bcf	status,0,c
  7305  003C3C  3224               	rrcf	___fladd@f2+3,f,c
  7306  003C3E  3223               	rrcf	___fladd@f2+2,f,c
  7307  003C40  3222               	rrcf	___fladd@f2+1,f,c
  7308  003C42  3221               	rrcf	___fladd@f2,f,c
  7309  003C44  2A2A               	incf	___fladd@exp2,f,c
  7310  003C46                     l13025:
  7311  003C46  502A               	movf	___fladd@exp2,w,c
  7312  003C48  622B               	cpfseq	___fladd@exp1,c
  7313  003C4A  D7F7               	goto	l13023
  7314  003C4C                     l1607:
  7315  003C4C  AE29               	btfss	___fladd@sign,7,c
  7316  003C4E  D009               	goto	l13029
  7317  003C50  1E1D               	comf	___fladd@f1,f,c
  7318  003C52  1E1E               	comf	___fladd@f1+1,f,c
  7319  003C54  1E1F               	comf	___fladd@f1+2,f,c
  7320  003C56  1E20               	comf	___fladd@f1+3,f,c
  7321  003C58  2A1D               	incf	___fladd@f1,f,c
  7322  003C5A  0E00               	movlw	0
  7323  003C5C  221E               	addwfc	___fladd@f1+1,f,c
  7324  003C5E  221F               	addwfc	___fladd@f1+2,f,c
  7325  003C60  2220               	addwfc	___fladd@f1+3,f,c
  7326  003C62                     l13029:
  7327  003C62  AC29               	btfss	___fladd@sign,6,c
  7328  003C64  D002               	goto	l13033
  7329  003C66  1E21               	comf	___fladd@f2,f,c
  7330  003C68  D826               	call	PL58	;call to abstracted procedure
  7331  003C6A                     l13033:
  7332  003C6A  6A29               	clrf	___fladd@sign,c
  7333  003C6C  501D               	movf	___fladd@f1,w,c
  7334  003C6E  2621               	addwf	___fladd@f2,f,c
  7335  003C70  501E               	movf	___fladd@f1+1,w,c
  7336  003C72  2222               	addwfc	___fladd@f2+1,f,c
  7337  003C74  501F               	movf	___fladd@f1+2,w,c
  7338  003C76  2223               	addwfc	___fladd@f2+2,f,c
  7339  003C78  5020               	movf	___fladd@f1+3,w,c
  7340  003C7A  2224               	addwfc	___fladd@f2+3,f,c
  7341  003C7C  AE24               	btfss	___fladd@f2+3,7,c
  7342  003C7E  D004               	goto	l13041
  7343  003C80  1E21               	comf	___fladd@f2,f,c
  7344  003C82  D819               	call	PL58	;call to abstracted procedure
  7345  003C84  0E01               	movlw	1
  7346  003C86  6E29               	movwf	___fladd@sign,c
  7347  003C88                     l13041:
  7348  003C88  C021  F00E         	movff	___fladd@f2,?___flpack
  7349  003C8C  C022  F00F         	movff	___fladd@f2+1,?___flpack+1
  7350  003C90  C023  F010         	movff	___fladd@f2+2,?___flpack+2
  7351  003C94  C024  F011         	movff	___fladd@f2+3,?___flpack+3
  7352  003C98  C02B  F012         	movff	___fladd@exp1,?___flpack+4
  7353  003C9C  C029  F013         	movff	___fladd@sign,?___flpack+5
  7354  003CA0  ECC8  F022         	call	___flpack	;wreg free
  7355  003CA4  C011  F020         	movff	?___flpack+3,?___fladd+3
  7356  003CA8  C010  F01F         	movff	?___flpack+2,?___fladd+2
  7357  003CAC  C00F  F01E         	movff	?___flpack+1,?___fladd+1
  7358  003CB0  C00E  F01D         	movff	?___flpack,?___fladd
  7359  003CB4                     l1593:
  7360  003CB4  0012               	return	
  7361  003CB6                     __end_of___fladd:
  7362                           	opt stack 0
  7363  003CB6                     PL58:
  7364                           	opt stack 25
  7365  003CB6  1E22               	comf	___fladd@f2+1,f,c
  7366  003CB8  1E23               	comf	___fladd@f2+2,f,c
  7367  003CBA  1E24               	comf	___fladd@f2+3,f,c
  7368  003CBC  2A21               	incf	___fladd@f2,f,c
  7369  003CBE  0E00               	movlw	0
  7370  003CC0  2222               	addwfc	___fladd@f2+1,f,c
  7371  003CC2  2223               	addwfc	___fladd@f2+2,f,c
  7372  003CC4  2224               	addwfc	___fladd@f2+3,f,c
  7373  003CC6  0C00               	retlw	0
  7374  003CC8                     __end_ofPL58:
  7375                           	opt stack 0
  7376                           tblptru	equ	0xFF8
  7377                           tblptrh	equ	0xFF7
  7378                           tblptrl	equ	0xFF6
  7379                           tablat	equ	0xFF5
  7380                           prodh	equ	0xFF4
  7381                           prodl	equ	0xFF3
  7382                           intcon	equ	0xFF2
  7383                           postinc0	equ	0xFEE
  7384                           wreg	equ	0xFE8
  7385                           indf1	equ	0xFE7
  7386                           postdec1	equ	0xFE5
  7387                           fsr1h	equ	0xFE2
  7388                           fsr1l	equ	0xFE1
  7389                           indf2	equ	0xFDF
  7390                           postinc2	equ	0xFDE
  7391                           postdec2	equ	0xFDD
  7392                           plusw2	equ	0xFDB
  7393                           fsr2h	equ	0xFDA
  7394                           fsr2l	equ	0xFD9
  7395                           status	equ	0xFD8
  7396                           
  7397 ;; *************** function _Celsius2Kelvin *****************
  7398 ;; Defined at:
  7399 ;;		line 61 in file "../ntc.c"
  7400 ;; Parameters:    Size  Location     Type
  7401 ;;  tc              4   43[COMRAM] unsigned char 
  7402 ;; Auto vars:     Size  Location     Type
  7403 ;;		None
  7404 ;; Return value:  Size  Location     Type
  7405 ;;                  4   43[COMRAM] unsigned char 
  7406 ;; Registers used:
  7407 ;;		wreg, status,2, status,0, cstack
  7408 ;; Tracked objects:
  7409 ;;		On entry : 0/0
  7410 ;;		On exit  : 0/0
  7411 ;;		Unchanged: 0/0
  7412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7413 ;;      Params:         4       0       0       0       0       0       0
  7414 ;;      Locals:         0       0       0       0       0       0       0
  7415 ;;      Temps:          0       0       0       0       0       0       0
  7416 ;;      Totals:         4       0       0       0       0       0       0
  7417 ;;Total ram usage:        4 bytes
  7418 ;; Hardware stack levels used:    1
  7419 ;; Hardware stack levels required when called:    4
  7420 ;; This function calls:
  7421 ;;		___fladd
  7422 ;; This function is called by:
  7423 ;;		_setEventData
  7424 ;; This function uses a non-reentrant model
  7425 ;;
  7426                           
  7427                           	psect	text32
  7428  005312                     __ptext32:
  7429                           	opt stack 0
  7430  005312                     _Celsius2Kelvin:
  7431                           	opt stack 23
  7432                           
  7433                           ;ntc.c: 62: return (27316.0 + tc);
  7434                           
  7435                           ;incstack = 0
  7436                           ;incstack = 0
  7437  005312  C02C  F01D         	movff	Celsius2Kelvin@tc,?___fladd
  7438  005316  C02D  F01E         	movff	Celsius2Kelvin@tc+1,?___fladd+1
  7439  00531A  C02E  F01F         	movff	Celsius2Kelvin@tc+2,?___fladd+2
  7440  00531E  C02F  F020         	movff	Celsius2Kelvin@tc+3,?___fladd+3
  7441  005322  6A21               	clrf	?___fladd+4,c
  7442  005324  0E68               	movlw	104
  7443  005326  6E22               	movwf	?___fladd+5,c
  7444  005328  0ED5               	movlw	213
  7445  00532A  6E23               	movwf	?___fladd+6,c
  7446  00532C  0E46               	movlw	70
  7447  00532E  6E24               	movwf	?___fladd+7,c
  7448  005330  ECB9  F01D         	call	___fladd	;wreg free
  7449  005334  C020  F02F         	movff	?___fladd+3,?_Celsius2Kelvin+3
  7450  005338  C01F  F02E         	movff	?___fladd+2,?_Celsius2Kelvin+2
  7451  00533C  C01E  F02D         	movff	?___fladd+1,?_Celsius2Kelvin+1
  7452  005340  C01D  F02C         	movff	?___fladd,?_Celsius2Kelvin
  7453  005344  0012               	return	
  7454  005346                     __end_of_Celsius2Kelvin:
  7455                           	opt stack 0
  7456                           tblptru	equ	0xFF8
  7457                           tblptrh	equ	0xFF7
  7458                           tblptrl	equ	0xFF6
  7459                           tablat	equ	0xFF5
  7460                           prodh	equ	0xFF4
  7461                           prodl	equ	0xFF3
  7462                           intcon	equ	0xFF2
  7463                           postinc0	equ	0xFEE
  7464                           wreg	equ	0xFE8
  7465                           indf1	equ	0xFE7
  7466                           postdec1	equ	0xFE5
  7467                           fsr1h	equ	0xFE2
  7468                           fsr1l	equ	0xFE1
  7469                           indf2	equ	0xFDF
  7470                           postinc2	equ	0xFDE
  7471                           postdec2	equ	0xFDD
  7472                           plusw2	equ	0xFDB
  7473                           fsr2h	equ	0xFDA
  7474                           fsr2l	equ	0xFD9
  7475                           status	equ	0xFD8
  7476                           
  7477 ;; *************** function _vscp_handleProtocolEvent *****************
  7478 ;; Defined at:
  7479 ;;		line 789 in file "../../vscp_firmware/common/vscp_firmware.c"
  7480 ;; Parameters:    Size  Location     Type
  7481 ;;		None
  7482 ;; Auto vars:     Size  Location     Type
  7483 ;;  bytes           1   44[BANK0 ] unsigned char 
  7484 ;;  page_save       2   40[BANK0 ] unsigned short 
  7485 ;;  i               1   50[BANK0 ] unsigned char 
  7486 ;;  bytes           2   54[BANK0 ] unsigned short 
  7487 ;;  page_save       2   38[BANK0 ] unsigned short 
  7488 ;;  byte            1   53[BANK0 ] unsigned char 
  7489 ;;  cb              1   49[BANK0 ] unsigned char 
  7490 ;;  bytes_this_t    1   48[BANK0 ] unsigned char 
  7491 ;;  j               1   58[BANK0 ] unsigned char 
  7492 ;;  i               1   56[BANK0 ] unsigned char 
  7493 ;;  k               1   51[BANK0 ] unsigned char 
  7494 ;;  i               1   52[BANK0 ] unsigned char 
  7495 ;;  len             1   47[BANK0 ] unsigned char 
  7496 ;;  pos             1   46[BANK0 ] unsigned char 
  7497 ;;  i               1   57[BANK0 ] unsigned char 
  7498 ;;  len             1   45[BANK0 ] unsigned char 
  7499 ;;  pos             1   43[BANK0 ] unsigned char 
  7500 ;;  offset          1   42[BANK0 ] unsigned char 
  7501 ;; Return value:  Size  Location     Type
  7502 ;;		None               void
  7503 ;; Registers used:
  7504 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7505 ;; Tracked objects:
  7506 ;;		On entry : F/0
  7507 ;;		On exit  : 0/0
  7508 ;;		Unchanged: 0/0
  7509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7510 ;;      Params:         0       0       0       0       0       0       0
  7511 ;;      Locals:         0      21       0       0       0       0       0
  7512 ;;      Temps:          0       7       0       0       0       0       0
  7513 ;;      Totals:         0      28       0       0       0       0       0
  7514 ;;Total ram usage:       28 bytes
  7515 ;; Hardware stack levels used:    1
  7516 ;; Hardware stack levels required when called:    8
  7517 ;; This function calls:
  7518 ;;		_vscp_init
  7519 ;;		_vscp_sendEvent
  7520 ;;		_vscp_readAppReg
  7521 ;;		_vscp_writeAppReg
  7522 ;;		_vscp_getGUID
  7523 ;;		_vscp_getMDF_URL
  7524 ;;		_vscp_getMatrixInfo
  7525 ;;		_vscp_goBootloaderMode
  7526 ;;		_vscp_handleHeartbeat
  7527 ;;		_vscp_handleSetNickname
  7528 ;;		_vscp_handleDropNickname
  7529 ;;		_vscp_newNodeOnline
  7530 ;;		_vscp_readRegister
  7531 ;;		_vscp_readStdReg
  7532 ;;		_vscp_writeRegister
  7533 ;;		_vscp_writeStdReg
  7534 ;;		___lbmod
  7535 ;; This function is called by:
  7536 ;;		_main
  7537 ;; This function uses a non-reentrant model
  7538 ;;
  7539                           
  7540                           	psect	text33
  7541  00242A                     __ptext33:
  7542                           	opt stack 0
  7543  00242A                     _vscp_handleProtocolEvent:
  7544                           	opt stack 22
  7545                           
  7546                           ; BSR set to: 0
  7547                           ;vscp_firmware.c: 791: if (0 == vscp_imsg.vscp_class) {
  7548                           
  7549                           ;incstack = 0
  7550                           ;incstack = 0
  7551  00242A  51C0               	movf	(_vscp_imsg+3)& (0+255),w,b
  7552  00242C  11BF               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  7553  00242E  E101 D2C0          	bz	l11231
  7554  002432  D2EF               	goto	l1256
  7555  002434                     l10813:
  7556                           
  7557                           ; BSR set to: 0
  7558                           ;vscp_firmware.c: 798: vscp_handleHeartbeat();
  7559  002434  ECD8  F02B         	call	_vscp_handleHeartbeat	;wreg free
  7560                           
  7561                           ;vscp_firmware.c: 799: break;
  7562  002438  D2EC               	goto	l1256
  7563  00243A                     l10815:
  7564                           
  7565                           ; BSR set to: 0
  7566                           ;vscp_firmware.c: 803: vscp_newNodeOnline();
  7567  00243A  EC30  F02A         	call	_vscp_newNodeOnline	;wreg free
  7568                           
  7569                           ;vscp_firmware.c: 804: break;
  7570  00243E  D2E9               	goto	l1256
  7571  002440                     l10817:
  7572                           
  7573                           ; BSR set to: 0
  7574                           ;vscp_firmware.c: 808: vscp_handleSetNickname();
  7575  002440  ECEB  F02A         	call	_vscp_handleSetNickname	;wreg free
  7576                           
  7577                           ;vscp_firmware.c: 809: break;
  7578  002444  D2E6               	goto	l1256
  7579  002446                     l10819:
  7580                           
  7581                           ; BSR set to: 0
  7582                           ;vscp_firmware.c: 813: vscp_handleDropNickname();
  7583  002446  ECD6  F029         	call	_vscp_handleDropNickname	;wreg free
  7584                           
  7585                           ;vscp_firmware.c: 814: break;
  7586  00244A  D2E3               	goto	l1256
  7587  00244C                     l10821:
  7588                           
  7589                           ; BSR set to: 0
  7590                           ;vscp_firmware.c: 818: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  7591                           ;vscp_firmware.c: 819: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7592  00244C  51BD               	movf	_vscp_imsg& (0+255),w,b
  7593  00244E  0B0F               	andlw	15
  7594  002450  0A02               	xorlw	2
  7595  002452  E001 D2DE          	bnz	l1256
  7596                           
  7597                           ; BSR set to: 0
  7598  002456  51BB               	movf	_vscp_nickname& (0+255),w,b
  7599  002458  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  7600  00245C  62DF               	cpfseq	indf2,c
  7601  00245E  D2D9               	goto	l1256
  7602                           
  7603                           ; BSR set to: 0
  7604                           ;vscp_firmware.c: 821: if (vscp_imsg.data[ 1 ] < 0x80) {
  7605  002460  0E80               	movlw	128
  7606  002462  61C4               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7607  002464  D012               	goto	l10841
  7608                           
  7609                           ; BSR set to: 0
  7610                           ;vscp_firmware.c: 824: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  7611  002466  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  7612  002468  EC87  F00A         	call	_vscp_readAppReg
  7613  00246C                     L8:
  7614  00246C  0100               	movlb	0	; () banked
  7615  00246E  6FD2               	movwf	(_vscp_omsg+7)& (0+255),b
  7616                           
  7617                           ; BSR set to: 0
  7618                           ;vscp_firmware.c: 827: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  7619  002470  C0C4  F0D1         	movff	_vscp_imsg+7,_vscp_omsg+6
  7620                           
  7621                           ; BSR set to: 0
  7622                           ;vscp_firmware.c: 829: vscp_omsg.priority = 0x03;
  7623  002474  0E03               	movlw	3
  7624  002476  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  7625                           
  7626                           ; BSR set to: 0
  7627                           ;vscp_firmware.c: 830: vscp_omsg.flags = 0x80 + 2;
  7628  002478  0E82               	movlw	130
  7629  00247A  6FCB               	movwf	_vscp_omsg& (0+255),b
  7630                           
  7631                           ; BSR set to: 0
  7632                           ;vscp_firmware.c: 831: vscp_omsg.vscp_class = 0;
  7633  00247C  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  7634  00247E  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  7635                           
  7636                           ; BSR set to: 0
  7637                           ;vscp_firmware.c: 832: vscp_omsg.vscp_type = 10;
  7638  002480  0E0A               	movlw	10
  7639  002482  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  7640  002484                     l10839:
  7641                           
  7642                           ; BSR set to: 0
  7643                           ;vscp_firmware.c: 835: vscp_sendEvent();
  7644  002484  ECEE  F029         	call	_vscp_sendEvent	;wreg free
  7645                           
  7646                           ;vscp_firmware.c: 836: }
  7647  002488  D2C4               	goto	l1256
  7648  00248A                     l10841:
  7649                           
  7650                           ; BSR set to: 0
  7651                           ;vscp_firmware.c: 837: else {
  7652                           ;vscp_firmware.c: 840: vscp_omsg.data[ 1 ] =
  7653                           ;vscp_firmware.c: 841: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  7654  00248A  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  7655  00248C  EC36  F01C         	call	_vscp_readStdReg
  7656  002490  D7ED               	goto	L8
  7657  002492                     l10855:
  7658                           
  7659                           ; BSR set to: 0
  7660                           ;vscp_firmware.c: 859: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  7661                           ;vscp_firmware.c: 860: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7662  002492  51BD               	movf	_vscp_imsg& (0+255),w,b
  7663  002494  0B0F               	andlw	15
  7664  002496  0A03               	xorlw	3
  7665  002498  E001 D2BB          	bnz	l1256
  7666                           
  7667                           ; BSR set to: 0
  7668  00249C  51BB               	movf	_vscp_nickname& (0+255),w,b
  7669  00249E  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  7670  0024A2  62DF               	cpfseq	indf2,c
  7671  0024A4  D2B6               	goto	l1256
  7672                           
  7673                           ; BSR set to: 0
  7674                           ;vscp_firmware.c: 862: if (vscp_imsg.data[ 1 ] < 0x80) {
  7675  0024A6  0E80               	movlw	128
  7676  0024A8  61C4               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7677  0024AA  D006               	goto	l10875
  7678                           
  7679                           ; BSR set to: 0
  7680                           ;vscp_firmware.c: 865: vscp_omsg.data[ 1 ] =
  7681                           ;vscp_firmware.c: 866: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7682  0024AC  C0C5  F021         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  7683  0024B0  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  7684  0024B2  EC37  F003         	call	_vscp_writeAppReg
  7685  0024B6  D7DA               	goto	L8
  7686  0024B8                     l10875:
  7687                           
  7688                           ; BSR set to: 0
  7689                           ;vscp_firmware.c: 880: else {
  7690                           ;vscp_firmware.c: 883: vscp_omsg.data[ 1 ] =
  7691                           ;vscp_firmware.c: 884: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7692  0024B8  C0C5  F019         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  7693  0024BC  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  7694  0024BE  EC16  F020         	call	_vscp_writeStdReg
  7695  0024C2  D7D4               	goto	L8
  7696  0024C4                     l10889:
  7697                           
  7698                           ; BSR set to: 0
  7699                           ;vscp_firmware.c: 902: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  7700                           ;vscp_firmware.c: 904: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  7701                           ;vscp_firmware.c: 905: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  7702                           ;vscp_firmware.c: 906: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  7703                           ;vscp_firmware.c: 907: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  7704                           ;vscp_firmware.c: 908: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  7705                           ;vscp_firmware.c: 909: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  7706  0024C4  51BB               	movf	_vscp_nickname& (0+255),w,b
  7707  0024C6  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  7708  0024CA  62DF               	cpfseq	indf2,c
  7709  0024CC  D2A2               	goto	l1256
  7710                           
  7711                           ; BSR set to: 0
  7712  0024CE  0E00               	movlw	0
  7713  0024D0  EC85  F02B         	call	_vscp_getGUID
  7714  0024D4  0100               	movlb	0	; () banked
  7715  0024D6  19C5               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7716  0024D8  E001 D29B          	bnz	l1256
  7717                           
  7718                           ; BSR set to: 0
  7719  0024DC  0E03               	movlw	3
  7720  0024DE  EC85  F02B         	call	_vscp_getGUID
  7721  0024E2  0100               	movlb	0	; () banked
  7722  0024E4  19C6               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7723  0024E6  E001 D294          	bnz	l1256
  7724                           
  7725                           ; BSR set to: 0
  7726  0024EA  0E05               	movlw	5
  7727  0024EC  EC85  F02B         	call	_vscp_getGUID
  7728  0024F0  0100               	movlb	0	; () banked
  7729  0024F2  19C7               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7730  0024F4  E001 D28D          	bnz	l1256
  7731                           
  7732                           ; BSR set to: 0
  7733  0024F8  0E07               	movlw	7
  7734  0024FA  EC85  F02B         	call	_vscp_getGUID
  7735  0024FE  0100               	movlb	0	; () banked
  7736  002500  19C8               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  7737  002502  E001 D286          	bnz	l1256
  7738                           
  7739                           ; BSR set to: 0
  7740  002506  5047               	movf	_vscp_page_select+1,w,c
  7741  002508  19C9               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  7742  00250A  E001 D282          	bnz	l1256
  7743                           
  7744                           ; BSR set to: 0
  7745  00250E  5046               	movf	_vscp_page_select,w,c
  7746  002510  EE20  F0CA         	lfsr	2,_vscp_imsg+13
  7747  002514  62DF               	cpfseq	indf2,c
  7748  002516  D27D               	goto	l1256
  7749                           
  7750                           ; BSR set to: 0
  7751                           ;vscp_firmware.c: 911: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  7752  002518  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  7753  00251A  ECCA  F02A         	call	_vscp_goBootloaderMode
  7754  00251E  D279               	goto	l1256
  7755  002520                     l10905:
  7756                           
  7757                           ; BSR set to: 0
  7758                           ;vscp_firmware.c: 920: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  7759                           ;vscp_firmware.c: 921: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  7760                           ;vscp_firmware.c: 922: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  7761                           ;vscp_firmware.c: 923: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  7762  002520  0E00               	movlw	0
  7763  002522  EC85  F02B         	call	_vscp_getGUID
  7764  002526  0100               	movlb	0	; () banked
  7765  002528  19C4               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7766  00252A  E173               	bnz	l10949
  7767                           
  7768                           ; BSR set to: 0
  7769  00252C  0E01               	movlw	1
  7770  00252E  EC85  F02B         	call	_vscp_getGUID
  7771  002532  0100               	movlb	0	; () banked
  7772  002534  19C5               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7773  002536  E16D               	bnz	l10949
  7774                           
  7775                           ; BSR set to: 0
  7776  002538  0E02               	movlw	2
  7777  00253A  EC85  F02B         	call	_vscp_getGUID
  7778  00253E  0100               	movlb	0	; () banked
  7779  002540  19C6               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7780  002542  E167               	bnz	l10949
  7781                           
  7782                           ; BSR set to: 0
  7783  002544  0E03               	movlw	3
  7784  002546  EC85  F02B         	call	_vscp_getGUID
  7785  00254A  0100               	movlb	0	; () banked
  7786  00254C  19C7               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7787  00254E  E161               	bnz	l10949
  7788                           
  7789                           ; BSR set to: 0
  7790                           ;vscp_firmware.c: 924: vscp_guid_reset |= 0x10;
  7791  002550  884C               	bsf	_vscp_guid_reset,4,c
  7792  002552  D05F               	goto	l10949
  7793  002554                     l10915:
  7794                           
  7795                           ; BSR set to: 0
  7796                           ;vscp_firmware.c: 929: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  7797                           ;vscp_firmware.c: 930: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  7798                           ;vscp_firmware.c: 931: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  7799                           ;vscp_firmware.c: 932: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  7800  002554  0E04               	movlw	4
  7801  002556  EC85  F02B         	call	_vscp_getGUID
  7802  00255A  0100               	movlb	0	; () banked
  7803  00255C  19C4               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7804  00255E  E159               	bnz	l10949
  7805                           
  7806                           ; BSR set to: 0
  7807  002560  0E05               	movlw	5
  7808  002562  EC85  F02B         	call	_vscp_getGUID
  7809  002566  0100               	movlb	0	; () banked
  7810  002568  19C5               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7811  00256A  E153               	bnz	l10949
  7812                           
  7813                           ; BSR set to: 0
  7814  00256C  0E06               	movlw	6
  7815  00256E  EC85  F02B         	call	_vscp_getGUID
  7816  002572  0100               	movlb	0	; () banked
  7817  002574  19C6               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7818  002576  E14D               	bnz	l10949
  7819                           
  7820                           ; BSR set to: 0
  7821  002578  0E07               	movlw	7
  7822  00257A  EC85  F02B         	call	_vscp_getGUID
  7823  00257E  0100               	movlb	0	; () banked
  7824  002580  19C7               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7825  002582  E147               	bnz	l10949
  7826                           
  7827                           ; BSR set to: 0
  7828                           ;vscp_firmware.c: 933: vscp_guid_reset |= 0x20;
  7829  002584  8A4C               	bsf	_vscp_guid_reset,5,c
  7830  002586  D045               	goto	l10949
  7831  002588                     l10925:
  7832                           
  7833                           ; BSR set to: 0
  7834                           ;vscp_firmware.c: 938: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  7835                           ;vscp_firmware.c: 939: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  7836                           ;vscp_firmware.c: 940: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  7837                           ;vscp_firmware.c: 941: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  7838  002588  0E08               	movlw	8
  7839  00258A  EC85  F02B         	call	_vscp_getGUID
  7840  00258E  0100               	movlb	0	; () banked
  7841  002590  19C4               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7842  002592  E13F               	bnz	l10949
  7843                           
  7844                           ; BSR set to: 0
  7845  002594  0E09               	movlw	9
  7846  002596  EC85  F02B         	call	_vscp_getGUID
  7847  00259A  0100               	movlb	0	; () banked
  7848  00259C  19C5               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7849  00259E  E139               	bnz	l10949
  7850                           
  7851                           ; BSR set to: 0
  7852  0025A0  0E0A               	movlw	10
  7853  0025A2  EC85  F02B         	call	_vscp_getGUID
  7854  0025A6  0100               	movlb	0	; () banked
  7855  0025A8  19C6               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7856  0025AA  E133               	bnz	l10949
  7857                           
  7858                           ; BSR set to: 0
  7859  0025AC  0E0B               	movlw	11
  7860  0025AE  EC85  F02B         	call	_vscp_getGUID
  7861  0025B2  0100               	movlb	0	; () banked
  7862  0025B4  19C7               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7863  0025B6  E12D               	bnz	l10949
  7864                           
  7865                           ; BSR set to: 0
  7866                           ;vscp_firmware.c: 942: vscp_guid_reset |= 0x40;
  7867  0025B8  8C4C               	bsf	_vscp_guid_reset,6,c
  7868  0025BA  D02B               	goto	l10949
  7869  0025BC                     l10935:
  7870                           
  7871                           ; BSR set to: 0
  7872                           ;vscp_firmware.c: 947: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  7873                           ;vscp_firmware.c: 948: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  7874                           ;vscp_firmware.c: 949: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  7875                           ;vscp_firmware.c: 950: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  7876  0025BC  0E0C               	movlw	12
  7877  0025BE  EC85  F02B         	call	_vscp_getGUID
  7878  0025C2  0100               	movlb	0	; () banked
  7879  0025C4  19C4               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7880  0025C6  E125               	bnz	l10949
  7881                           
  7882                           ; BSR set to: 0
  7883  0025C8  0E0D               	movlw	13
  7884  0025CA  EC85  F02B         	call	_vscp_getGUID
  7885  0025CE  0100               	movlb	0	; () banked
  7886  0025D0  19C5               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7887  0025D2  E11F               	bnz	l10949
  7888                           
  7889                           ; BSR set to: 0
  7890  0025D4  0E0E               	movlw	14
  7891  0025D6  EC85  F02B         	call	_vscp_getGUID
  7892  0025DA  0100               	movlb	0	; () banked
  7893  0025DC  19C6               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7894  0025DE  E119               	bnz	l10949
  7895                           
  7896                           ; BSR set to: 0
  7897  0025E0  0E0F               	movlw	15
  7898  0025E2  EC85  F02B         	call	_vscp_getGUID
  7899  0025E6  0100               	movlb	0	; () banked
  7900  0025E8  19C7               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7901  0025EA  E113               	bnz	l10949
  7902                           
  7903                           ; BSR set to: 0
  7904                           ;vscp_firmware.c: 951: vscp_guid_reset |= 0x80;
  7905  0025EC  8E4C               	bsf	_vscp_guid_reset,7,c
  7906  0025EE  D011               	goto	l10949
  7907  0025F0                     l1196:
  7908                           
  7909                           ; BSR set to: 0
  7910                           ;vscp_firmware.c: 956: vscp_guid_reset = 0;
  7911  0025F0  6A4C               	clrf	_vscp_guid_reset,c
  7912                           
  7913                           ;vscp_firmware.c: 957: break;
  7914  0025F2  D00F               	goto	l10949
  7915  0025F4                     l10947:
  7916                           
  7917                           ; BSR set to: 0
  7918  0025F4  39C3               	swapf	(_vscp_imsg+6)& (0+255),w,b
  7919  0025F6  0B0F               	andlw	15
  7920  0025F8  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7921  0025FA  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7922                           
  7923                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7924                           ; Switch size 1, requested type "space"
  7925                           ; Number of cases is 1, Range of values is 0 to 0
  7926                           ; switch strategies available:
  7927                           ; Name         Instructions Cycles
  7928                           ; simple_byte            4     3 (average)
  7929                           ;	Chosen strategy is simple_byte
  7930  0025FC  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7931  0025FE  E1F8               	bnz	l1196
  7932                           
  7933                           ; BSR set to: 0
  7934                           ; Switch size 1, requested type "space"
  7935                           ; Number of cases is 4, Range of values is 0 to 3
  7936                           ; switch strategies available:
  7937                           ; Name         Instructions Cycles
  7938                           ; simple_byte           13     7 (average)
  7939                           ;	Chosen strategy is simple_byte
  7940  002600  517F               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  7941  002602  E08E               	bz	l10905
  7942  002604  0A01               	xorlw	1	; case 1
  7943  002606  E0A6               	bz	l10915
  7944  002608  0A03               	xorlw	3	; case 2
  7945  00260A  E0BE               	bz	l10925
  7946  00260C  0A01               	xorlw	1	; case 3
  7947  00260E  E0D6               	bz	l10935
  7948  002610  D7EF               	goto	l1196
  7949  002612                     l10949:
  7950                           
  7951                           ; BSR set to: 0
  7952                           ;vscp_firmware.c: 960: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  7953  002612  504C               	movf	_vscp_guid_reset,w,c
  7954  002614  0BF0               	andlw	240
  7955  002616  0AF0               	xorlw	240
  7956  002618  E001 D1FB          	bnz	l1256
  7957                           
  7958                           ; BSR set to: 0
  7959                           ;vscp_firmware.c: 962: vscp_init();
  7960  00261C  EC6C  F028         	call	_vscp_init	;wreg free
  7961  002620  D1F8               	goto	l1256
  7962  002622                     l10953:
  7963                           
  7964                           ; BSR set to: 0
  7965                           ;vscp_firmware.c: 968: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7966  002622  51BB               	movf	_vscp_nickname& (0+255),w,b
  7967  002624  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  7968  002628  62DF               	cpfseq	indf2,c
  7969  00262A  D1F3               	goto	l1256
  7970                           
  7971                           ; BSR set to: 0
  7972                           ;vscp_firmware.c: 970: uint8_t i;
  7973                           ;vscp_firmware.c: 971: uint8_t pos = 0;
  7974  00262C  6B8B               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  7975                           
  7976                           ;vscp_firmware.c: 972: uint8_t offset = vscp_imsg.data[ 1 ];
  7977  00262E  C0C4  F08A         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  7978                           
  7979                           ;vscp_firmware.c: 973: uint8_t len = vscp_imsg.data[ 2 ];
  7980  002632  C0C5  F08D         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  7981                           
  7982                           ;vscp_firmware.c: 975: for (i = 0; i < len; i++) {
  7983  002636  6B99               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  7984  002638  D045               	goto	l10985
  7985  00263A                     l10957:
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;vscp_firmware.c: 976: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  7989  00263A  518A               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  7990  00263C  2599               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  7991  00263E  EC34  F02B         	call	_vscp_readRegister
  7992  002642  0100               	movlb	0	; () banked
  7993  002644  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7994  002646  0E07               	movlw	7
  7995  002648  6E0E               	movwf	?___lbmod,c
  7996  00264A  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7997  00264C  EC5A  F02A         	call	___lbmod
  7998  002650  0100               	movlb	0	; () banked
  7999  002652  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8000  002654  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8001  002656  0FD2               	addlw	low (_vscp_omsg+7)
  8002  002658  6ED9               	movwf	fsr2l,c
  8003  00265A  6ADA               	clrf	fsr2h,c
  8004  00265C  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8005                           
  8006                           ; BSR set to: 0
  8007                           ;vscp_firmware.c: 978: if ( (i % 7) == 6 || i == (len - 1) ) {
  8008  002660  0E07               	movlw	7
  8009  002662  6E0E               	movwf	?___lbmod,c
  8010  002664  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8011  002666  EC5A  F02A         	call	___lbmod
  8012  00266A  0A06               	xorlw	6
  8013  00266C  E00B               	bz	l10963
  8014  00266E  0EFF               	movlw	255
  8015  002670  0100               	movlb	0	; () banked
  8016  002672  258D               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  8017  002674  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8018  002676  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8019  002678  0EFF               	movlw	255
  8020  00267A  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8021  00267C  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8022  00267E  197F               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8023  002680  1180               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8024  002682  E11F               	bnz	l10983
  8025  002684                     l10963:
  8026                           
  8027                           ;vscp_firmware.c: 980: uint8_t bytes;
  8028                           ;vscp_firmware.c: 982: if ( ( i % 7 ) == 6 ) {
  8029  002684  0E07               	movlw	7
  8030  002686  6E0E               	movwf	?___lbmod,c
  8031  002688  0100               	movlb	0	; () banked
  8032  00268A  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8033  00268C  EC5A  F02A         	call	___lbmod
  8034  002690  0A06               	xorlw	6
  8035  002692  E103               	bnz	l10967
  8036                           
  8037                           ;vscp_firmware.c: 983: bytes = 7;
  8038  002694  0E07               	movlw	7
  8039  002696  0100               	movlb	0	; () banked
  8040  002698  D009               	goto	L9
  8041  00269A                     l10967:
  8042                           
  8043                           ;vscp_firmware.c: 985: else {
  8044                           ;vscp_firmware.c: 986: bytes = ( i % 7 ) + 1;
  8045  00269A  0E07               	movlw	7
  8046  00269C  6E0E               	movwf	?___lbmod,c
  8047  00269E  0100               	movlb	0	; () banked
  8048  0026A0  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8049  0026A2  EC5A  F02A         	call	___lbmod
  8050  0026A6  0100               	movlb	0	; () banked
  8051  0026A8  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8052  0026AA  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8053  0026AC                     L9:
  8054  0026AC  6F8C               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  8055                           
  8056                           ; BSR set to: 0
  8057                           ;vscp_firmware.c: 987: }
  8058                           ;vscp_firmware.c: 989: vscp_omsg.flags = 0x80 + bytes + 1;
  8059  0026AE  518C               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  8060  0026B0  0F81               	addlw	129
  8061  0026B2  6FCB               	movwf	_vscp_omsg& (0+255),b
  8062                           
  8063                           ; BSR set to: 0
  8064                           ;vscp_firmware.c: 990: vscp_omsg.priority = 0x07;
  8065                           
  8066                           ; BSR set to: 0
  8067                           ;vscp_firmware.c: 991: vscp_omsg.vscp_class = 0;
  8068                           
  8069                           ; BSR set to: 0
  8070                           ;vscp_firmware.c: 992: vscp_omsg.vscp_type = 26;
  8071  0026B4  D9C5               	call	PL70	;call to abstracted procedure
  8072                           
  8073                           ; BSR set to: 0
  8074                           ;vscp_firmware.c: 993: vscp_omsg.data[ 0 ] = pos;
  8075  0026B6  C08B  F0D1         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+6
  8076                           
  8077                           ; BSR set to: 0
  8078                           ;vscp_firmware.c: 996: vscp_sendEvent();
  8079  0026BA  ECEE  F029         	call	_vscp_sendEvent	;wreg free
  8080                           
  8081                           ;vscp_firmware.c: 997: pos++;
  8082  0026BE  0100               	movlb	0	; () banked
  8083  0026C0  2B8B               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  8084  0026C2                     l10983:
  8085                           
  8086                           ; BSR set to: 0
  8087  0026C2  2B99               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  8088  0026C4                     l10985:
  8089                           
  8090                           ; BSR set to: 0
  8091  0026C4  518D               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  8092  0026C6  5D99               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8093  0026C8  E301 D1A3          	bc	l1256
  8094  0026CC  D7B6               	goto	l10957
  8095  0026CE                     l10987:
  8096                           
  8097                           ; BSR set to: 0
  8098                           ;vscp_firmware.c: 1005: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8099  0026CE  51BB               	movf	_vscp_nickname& (0+255),w,b
  8100  0026D0  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  8101  0026D4  62DF               	cpfseq	indf2,c
  8102  0026D6  D19D               	goto	l1256
  8103                           
  8104                           ; BSR set to: 0
  8105                           ;vscp_firmware.c: 1006: uint8_t i;
  8106                           ;vscp_firmware.c: 1007: uint8_t pos = vscp_imsg.data[ 1 ];
  8107  0026D8  C0C4  F08E         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1034
  8108                           
  8109                           ; BSR set to: 0
  8110                           ;vscp_firmware.c: 1008: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  8111  0026DC  51BD               	movf	_vscp_imsg& (0+255),w,b
  8112  0026DE  0FFE               	addlw	254
  8113  0026E0  0B07               	andlw	7
  8114  0026E2  6F8F               	movwf	vscp_handleProtocolEvent@len_1035& (0+255),b
  8115                           
  8116                           ; BSR set to: 0
  8117                           ;vscp_firmware.c: 1010: for (i = 0; i < len; i++) {
  8118  0026E4  6B94               	clrf	vscp_handleProtocolEvent@i_1033& (0+255),b
  8119  0026E6  D018               	goto	l11001
  8120  0026E8                     l10995:
  8121                           
  8122                           ; BSR set to: 0
  8123                           ;vscp_firmware.c: 1012: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  8124  0026E8  5194               	movf	vscp_handleProtocolEvent@i_1033& (0+255),w,b
  8125  0026EA  0FC5               	addlw	low (_vscp_imsg+8)
  8126  0026EC  6ED9               	movwf	fsr2l,c
  8127  0026EE  6ADA               	clrf	fsr2h,c
  8128  0026F0  50DF               	movf	indf2,w,c
  8129  0026F2  6E25               	movwf	?_vscp_writeRegister,c
  8130  0026F4  518E               	movf	vscp_handleProtocolEvent@pos_1034& (0+255),w,b
  8131  0026F6  2594               	addwf	vscp_handleProtocolEvent@i_1033& (0+255),w,b
  8132  0026F8  ECB9  F02A         	call	_vscp_writeRegister
  8133                           
  8134                           ;vscp_firmware.c: 1013: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  8135  0026FC  0100               	movlb	0	; () banked
  8136  0026FE  518E               	movf	vscp_handleProtocolEvent@pos_1034& (0+255),w,b
  8137  002700  2594               	addwf	vscp_handleProtocolEvent@i_1033& (0+255),w,b
  8138  002702  EC34  F02B         	call	_vscp_readRegister
  8139  002706  0100               	movlb	0	; () banked
  8140  002708  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8141  00270A  5194               	movf	vscp_handleProtocolEvent@i_1033& (0+255),w,b
  8142  00270C  0FD2               	addlw	low (_vscp_omsg+7)
  8143  00270E  6ED9               	movwf	fsr2l,c
  8144  002710  6ADA               	clrf	fsr2h,c
  8145  002712  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8146                           
  8147                           ; BSR set to: 0
  8148  002716  2B94               	incf	vscp_handleProtocolEvent@i_1033& (0+255),f,b
  8149  002718                     l11001:
  8150                           
  8151                           ; BSR set to: 0
  8152  002718  518F               	movf	vscp_handleProtocolEvent@len_1035& (0+255),w,b
  8153  00271A  5D94               	subwf	vscp_handleProtocolEvent@i_1033& (0+255),w,b
  8154  00271C  E3E5               	bnc	l10995
  8155                           
  8156                           ; BSR set to: 0
  8157                           ;vscp_firmware.c: 1014: }
  8158                           ;vscp_firmware.c: 1016: vscp_omsg.priority = 0x07;
  8159                           
  8160                           ; BSR set to: 0
  8161                           ;vscp_firmware.c: 1017: vscp_omsg.vscp_class = 0;
  8162                           
  8163                           ;vscp_firmware.c: 1018: vscp_omsg.vscp_type = 26;
  8164  00271E  D990               	call	PL70	;call to abstracted procedure
  8165                           
  8166                           ; BSR set to: 0
  8167                           ;vscp_firmware.c: 1019: vscp_omsg.data[ 0 ] = 0;
  8168  002720  6BD1               	clrf	(_vscp_omsg+6)& (0+255),b
  8169                           
  8170                           ; BSR set to: 0
  8171                           ;vscp_firmware.c: 1020: vscp_omsg.flags = 0x80 + len + 1;
  8172  002722  518F               	movf	vscp_handleProtocolEvent@len_1035& (0+255),w,b
  8173  002724  0F81               	addlw	129
  8174  002726  6FCB               	movwf	_vscp_omsg& (0+255),b
  8175  002728  D6AD               	goto	l10839
  8176  00272A                     l11013:
  8177                           
  8178                           ; BSR set to: 0
  8179                           ;vscp_firmware.c: 1030: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8180  00272A  51BB               	movf	_vscp_nickname& (0+255),w,b
  8181  00272C  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  8182  002730  62DF               	cpfseq	indf2,c
  8183  002732  D16F               	goto	l1256
  8184                           
  8185                           ; BSR set to: 0
  8186                           ;vscp_firmware.c: 1032: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8187                           ;vscp_firmware.c: 1033: vscp_imsg.data[ 1 ],
  8188                           ;vscp_firmware.c: 1034: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  8189  002734  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  8190  002736  EC87  F00A         	call	_vscp_readAppReg
  8191  00273A  0100               	movlb	0	; () banked
  8192  00273C  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8193  00273E  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8194  002740  6E21               	movwf	?_vscp_writeAppReg,c
  8195  002742  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  8196  002744  EC37  F003         	call	_vscp_writeAppReg
  8197  002748  D691               	goto	L8
  8198  00274A                     l11029:
  8199                           
  8200                           ; BSR set to: 0
  8201                           ;vscp_firmware.c: 1050: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8202  00274A  51BB               	movf	_vscp_nickname& (0+255),w,b
  8203  00274C  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  8204  002750  62DF               	cpfseq	indf2,c
  8205  002752  D15F               	goto	l1256
  8206                           
  8207                           ; BSR set to: 0
  8208                           ;vscp_firmware.c: 1052: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8209                           ;vscp_firmware.c: 1053: vscp_imsg.data[ 1 ],
  8210                           ;vscp_firmware.c: 1054: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  8211  002754  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  8212  002756  EC87  F00A         	call	_vscp_readAppReg
  8213  00275A  0100               	movlb	0	; () banked
  8214  00275C  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8215  00275E  057F               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  8216  002760  6E21               	movwf	?_vscp_writeAppReg,c
  8217  002762  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  8218  002764  EC37  F003         	call	_vscp_writeAppReg
  8219  002768  D681               	goto	L8
  8220  00276A                     l11045:
  8221                           
  8222                           ; BSR set to: 0
  8223                           ;vscp_firmware.c: 1070: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  8224                           ;vscp_firmware.c: 1071: (0xff == vscp_imsg.data[ 0 ])) {
  8225  00276A  51C3               	movf	(_vscp_imsg+6)& (0+255),w,b
  8226  00276C  19BB               	xorwf	_vscp_nickname& (0+255),w,b
  8227  00276E  E003               	bz	l1220
  8228                           
  8229                           ; BSR set to: 0
  8230  002770  29C3               	incf	(_vscp_imsg+6)& (0+255),w,b
  8231  002772  E001 D14E          	bnz	l1256
  8232  002776                     l1220:
  8233                           
  8234                           ; BSR set to: 0
  8235                           ;vscp_firmware.c: 1073: uint8_t i, j, k = 0;
  8236  002776  6B93               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  8237                           
  8238                           ; BSR set to: 0
  8239                           ;vscp_firmware.c: 1077: vscp_omsg.priority = 0x03;
  8240  002778  0E03               	movlw	3
  8241  00277A  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  8242                           
  8243                           ;vscp_firmware.c: 1078: vscp_omsg.flags = 0x80 + 8;
  8244  00277C  0E88               	movlw	136
  8245  00277E  6FCB               	movwf	_vscp_omsg& (0+255),b
  8246                           
  8247                           ; BSR set to: 0
  8248                           ;vscp_firmware.c: 1079: vscp_omsg.vscp_class = 0;
  8249  002780  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  8250  002782  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  8251                           
  8252                           ;vscp_firmware.c: 1080: vscp_omsg.vscp_type = 32;
  8253  002784  0E20               	movlw	32
  8254  002786  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  8255                           
  8256                           ; BSR set to: 0
  8257                           ;vscp_firmware.c: 1082: for (i = 0; i < 3; i++)
  8258  002788  6B98               	clrf	vscp_handleProtocolEvent@i_1036& (0+255),b
  8259  00278A                     l1221:
  8260                           
  8261                           ; BSR set to: 0
  8262                           ;vscp_firmware.c: 1083: {
  8263                           ;vscp_firmware.c: 1084: vscp_omsg.data[0] = i;
  8264                           
  8265                           ; BSR set to: 0
  8266                           ;vscp_firmware.c: 1086: for (j = 1; j < 8; j++) {
  8267  00278A  D961               	call	PL88	;call to abstracted procedure
  8268  00278C                     l11065:
  8269                           
  8270                           ; BSR set to: 0
  8271                           ;vscp_firmware.c: 1087: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  8272  00278C  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8273  00278E  0FD1               	addlw	low (_vscp_omsg+6)
  8274  002790  6ED9               	movwf	fsr2l,c
  8275  002792  6ADA               	clrf	fsr2h,c
  8276  002794  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8277  002796  080F               	sublw	15
  8278  002798  EC85  F02B         	call	_vscp_getGUID
  8279  00279C  6EDF               	movwf	indf2,c
  8280  00279E  0100               	movlb	0	; () banked
  8281  0027A0  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8282                           
  8283                           ; BSR set to: 0
  8284                           ;vscp_firmware.c: 1088: if (k > 16)
  8285  0027A2  0E10               	movlw	16
  8286  0027A4  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8287  0027A6  D001               	goto	l11073
  8288  0027A8  D004               	goto	l11077
  8289  0027AA                     l11073:
  8290                           
  8291                           ; BSR set to: 0
  8292  0027AA  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8293                           
  8294                           ; BSR set to: 0
  8295  0027AC  0E07               	movlw	7
  8296  0027AE  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8297  0027B0  D7ED               	goto	l11065
  8298  0027B2                     l11077:
  8299                           
  8300                           ; BSR set to: 0
  8301                           ;vscp_firmware.c: 1090: }
  8302                           ;vscp_firmware.c: 1092: if (k > 16)
  8303  0027B2  0E10               	movlw	16
  8304  0027B4  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8305  0027B6  D001               	goto	l11081
  8306  0027B8  D007               	goto	l1222
  8307  0027BA                     l11081:
  8308                           
  8309                           ; BSR set to: 0
  8310                           ;vscp_firmware.c: 1095: vscp_sendEvent();
  8311  0027BA  ECEE  F029         	call	_vscp_sendEvent	;wreg free
  8312  0027BE  0100               	movlb	0	; () banked
  8313  0027C0  2B98               	incf	vscp_handleProtocolEvent@i_1036& (0+255),f,b
  8314                           
  8315                           ; BSR set to: 0
  8316  0027C2  0E02               	movlw	2
  8317  0027C4  6598               	cpfsgt	vscp_handleProtocolEvent@i_1036& (0+255),b
  8318  0027C6  D7E1               	goto	l1221
  8319  0027C8                     l1222:
  8320                           
  8321                           ; BSR set to: 0
  8322                           ;vscp_firmware.c: 1096: }
  8323                           ;vscp_firmware.c: 1098: for (j = 0; j < 5; j++)
  8324  0027C8  6B9A               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  8325  0027CA                     l11091:
  8326                           
  8327                           ; BSR set to: 0
  8328                           ;vscp_firmware.c: 1099: {
  8329                           ;vscp_firmware.c: 1100: if (vscp_getMDF_URL(j) > 0)
  8330  0027CA  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8331  0027CC  EC4E  F02B         	call	_vscp_getMDF_URL
  8332  0027D0  0900               	iorlw	0
  8333  0027D2  E008               	bz	l11095
  8334                           
  8335                           ; BSR set to: 0
  8336                           ;vscp_firmware.c: 1101: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  8337  0027D4  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8338  0027D6  0FD4               	addlw	low (_vscp_omsg+9)
  8339  0027D8  6ED9               	movwf	fsr2l,c
  8340  0027DA  6ADA               	clrf	fsr2h,c
  8341  0027DC  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8342  0027DE  EC4E  F02B         	call	_vscp_getMDF_URL
  8343  0027E2  D005               	goto	L10
  8344  0027E4                     l11095:
  8345                           
  8346                           ; BSR set to: 0
  8347                           ;vscp_firmware.c: 1102: else
  8348                           ;vscp_firmware.c: 1103: vscp_omsg.data[3 + j] = 0;
  8349  0027E4  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8350  0027E6  0FD4               	addlw	low (_vscp_omsg+9)
  8351  0027E8  6ED9               	movwf	fsr2l,c
  8352  0027EA  6ADA               	clrf	fsr2h,c
  8353  0027EC  0E00               	movlw	0
  8354  0027EE                     L10:
  8355  0027EE  6EDF               	movwf	indf2,c
  8356                           
  8357                           ; BSR set to: 0
  8358  0027F0  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8359                           
  8360                           ; BSR set to: 0
  8361  0027F2  0E04               	movlw	4
  8362  0027F4  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8363  0027F6  D7E9               	goto	l11091
  8364                           
  8365                           ; BSR set to: 0
  8366                           ;vscp_firmware.c: 1104: }
  8367                           ;vscp_firmware.c: 1106: vscp_sendEvent();
  8368  0027F8  ECEE  F029         	call	_vscp_sendEvent	;wreg free
  8369                           
  8370                           ;vscp_firmware.c: 1108: k = 5;
  8371  0027FC  0E05               	movlw	5
  8372  0027FE  0100               	movlb	0	; () banked
  8373  002800  6F93               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  8374                           
  8375                           ; BSR set to: 0
  8376                           ;vscp_firmware.c: 1109: for (i = 3; i < 7; i++)
  8377  002802  0E03               	movlw	3
  8378  002804  6F98               	movwf	vscp_handleProtocolEvent@i_1036& (0+255),b
  8379  002806                     l1231:
  8380                           
  8381                           ; BSR set to: 0
  8382                           ;vscp_firmware.c: 1110: {
  8383                           ;vscp_firmware.c: 1111: vscp_omsg.data[0] = i;
  8384                           
  8385                           ; BSR set to: 0
  8386                           ;vscp_firmware.c: 1113: for (j = 1; j < 8; j++) {
  8387  002806  D923               	call	PL88	;call to abstracted procedure
  8388  002808                     l11117:
  8389                           
  8390                           ; BSR set to: 0
  8391                           ;vscp_firmware.c: 1114: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  8392  002808  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8393  00280A  0FD1               	addlw	low (_vscp_omsg+6)
  8394  00280C  6ED9               	movwf	fsr2l,c
  8395  00280E  6ADA               	clrf	fsr2h,c
  8396  002810  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8397  002812  EC4E  F02B         	call	_vscp_getMDF_URL
  8398  002816  6EDF               	movwf	indf2,c
  8399                           
  8400                           ; BSR set to: 0
  8401  002818  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8402                           
  8403                           ; BSR set to: 0
  8404  00281A  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8405                           
  8406                           ; BSR set to: 0
  8407  00281C  0E07               	movlw	7
  8408  00281E  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8409  002820  D7F3               	goto	l11117
  8410                           
  8411                           ; BSR set to: 0
  8412                           ;vscp_firmware.c: 1115: }
  8413                           ;vscp_firmware.c: 1116: vscp_sendEvent();
  8414  002822  ECEE  F029         	call	_vscp_sendEvent	;wreg free
  8415  002826  0100               	movlb	0	; () banked
  8416  002828  2B98               	incf	vscp_handleProtocolEvent@i_1036& (0+255),f,b
  8417                           
  8418                           ; BSR set to: 0
  8419  00282A  0E06               	movlw	6
  8420  00282C  6598               	cpfsgt	vscp_handleProtocolEvent@i_1036& (0+255),b
  8421  00282E  D7EB               	goto	l1231
  8422  002830  D0F0               	goto	l1256
  8423  002832                     l11131:
  8424                           
  8425                           ; BSR set to: 0
  8426                           ;vscp_firmware.c: 1125: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8427  002832  51BB               	movf	_vscp_nickname& (0+255),w,b
  8428  002834  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  8429  002838  62DF               	cpfseq	indf2,c
  8430  00283A  D0EB               	goto	l1256
  8431                           
  8432                           ; BSR set to: 0
  8433                           ;vscp_firmware.c: 1127: vscp_omsg.priority = 0x03;
  8434  00283C  0E03               	movlw	3
  8435  00283E  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  8436                           
  8437                           ;vscp_firmware.c: 1128: vscp_omsg.flags = 0x80 + 7;
  8438  002840  0E87               	movlw	135
  8439  002842  6FCB               	movwf	_vscp_omsg& (0+255),b
  8440                           
  8441                           ; BSR set to: 0
  8442                           ;vscp_firmware.c: 1129: vscp_omsg.vscp_class = 0;
  8443  002844  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  8444  002846  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  8445                           
  8446                           ;vscp_firmware.c: 1130: vscp_omsg.vscp_type = 34;
  8447  002848  0E22               	movlw	34
  8448  00284A  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  8449                           
  8450                           ; BSR set to: 0
  8451                           ;vscp_firmware.c: 1132: vscp_getMatrixInfo((char *) vscp_omsg.data);
  8452  00284C  0ED1               	movlw	(_vscp_omsg+6)& (0+255)
  8453  00284E  EC41  F02B         	call	_vscp_getMatrixInfo
  8454  002852  D618               	goto	l10839
  8455  002854                     l11141:
  8456                           
  8457                           ; BSR set to: 0
  8458                           ;vscp_firmware.c: 1148: if ( vscp_nickname == vscp_imsg.data[0] ) {
  8459  002854  51BB               	movf	_vscp_nickname& (0+255),w,b
  8460  002856  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  8461  00285A  62DF               	cpfseq	indf2,c
  8462  00285C  D0DA               	goto	l1256
  8463                           
  8464                           ; BSR set to: 0
  8465                           ;vscp_firmware.c: 1151: uint8_t byte = 0;
  8466  00285E  6B95               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  8467                           
  8468                           ; BSR set to: 0
  8469                           ;vscp_firmware.c: 1152: uint8_t bytes_this_time, cb;
  8470                           ;vscp_firmware.c: 1156: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  8471  002860  C0BD  F07F         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  8472  002864  0E0F               	movlw	15
  8473  002866  177F               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8474  002868  0E04               	movlw	4
  8475  00286A  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8476  00286C  E312               	bnc	l11157
  8477                           
  8478                           ; BSR set to: 0
  8479                           ;vscp_firmware.c: 1159: bytes = (uint16_t)vscp_imsg.data[4];
  8480  00286E  C0C7  F096         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1040
  8481  002872  6B97               	clrf	(vscp_handleProtocolEvent@bytes_1040+1)& (0+255),b
  8482                           
  8483                           ; BSR set to: 0
  8484                           ;vscp_firmware.c: 1161: if (bytes == 0) bytes = 256;
  8485  002874  5197               	movf	(vscp_handleProtocolEvent@bytes_1040+1)& (0+255),w,b
  8486  002876  1196               	iorwf	vscp_handleProtocolEvent@bytes_1040& (0+255),w,b
  8487  002878  E103               	bnz	l11153
  8488                           
  8489                           ; BSR set to: 0
  8490  00287A  0E01               	movlw	1
  8491  00287C  6F97               	movwf	(vscp_handleProtocolEvent@bytes_1040+1)& (0+255),b
  8492  00287E  6B96               	clrf	vscp_handleProtocolEvent@bytes_1040& (0+255),b
  8493  002880                     l11153:
  8494                           
  8495                           ; BSR set to: 0
  8496                           ;vscp_firmware.c: 1163: if (bytes > 256) bytes = 256;
  8497  002880  0E01               	movlw	1
  8498  002882  5D96               	subwf	vscp_handleProtocolEvent@bytes_1040& (0+255),w,b
  8499  002884  0E01               	movlw	1
  8500  002886  5997               	subwfb	(vscp_handleProtocolEvent@bytes_1040+1)& (0+255),w,b
  8501  002888  E307               	bnc	l11159
  8502                           
  8503                           ; BSR set to: 0
  8504  00288A  0E01               	movlw	1
  8505  00288C  6F97               	movwf	(vscp_handleProtocolEvent@bytes_1040+1)& (0+255),b
  8506  00288E  0E00               	movlw	0
  8507  002890  D002               	goto	L12
  8508  002892                     l11157:
  8509                           
  8510                           ; BSR set to: 0
  8511                           ;vscp_firmware.c: 1165: else {
  8512                           ;vscp_firmware.c: 1166: bytes = 1;
  8513  002892  6B97               	clrf	(vscp_handleProtocolEvent@bytes_1040+1)& (0+255),b
  8514  002894  0E01               	movlw	1
  8515  002896                     L12:
  8516  002896  6F96               	movwf	vscp_handleProtocolEvent@bytes_1040& (0+255),b
  8517  002898                     l11159:
  8518                           
  8519                           ; BSR set to: 0
  8520                           ;vscp_firmware.c: 1167: }
  8521                           ;vscp_firmware.c: 1170: page_save = vscp_page_select;
  8522  002898  C046  F086         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  8523  00289C  C047  F087         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  8524                           
  8525                           ; BSR set to: 0
  8526                           ;vscp_firmware.c: 1175: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  8527  0028A0  D8B9               	call	PL30	;call to abstracted procedure
  8528                           
  8529                           ; BSR set to: 0
  8530                           ;vscp_firmware.c: 1178: vscp_omsg.priority = 0x07;
  8531  0028A2  0E07               	movlw	7
  8532  0028A4  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  8533                           
  8534                           ; BSR set to: 0
  8535                           ;vscp_firmware.c: 1179: vscp_omsg.vscp_class = 0;
  8536                           
  8537                           ; BSR set to: 0
  8538                           ;vscp_firmware.c: 1180: vscp_omsg.vscp_type = 39;
  8539                           
  8540                           ; BSR set to: 0
  8541                           ;vscp_firmware.c: 1181: vscp_omsg.data[0] = 0;
  8542                           
  8543                           ; BSR set to: 0
  8544                           ;vscp_firmware.c: 1182: vscp_omsg.data[1] = vscp_imsg.data[1];
  8545                           
  8546                           ; BSR set to: 0
  8547                           ;vscp_firmware.c: 1183: vscp_omsg.data[2] = vscp_imsg.data[2];
  8548  0028A6  D8C2               	call	PL46	;call to abstracted procedure
  8549  0028A8                     l11175:
  8550                           
  8551                           ; BSR set to: 0
  8552                           ;vscp_firmware.c: 1187: if ( ( bytes - byte ) >= 4 ) {
  8553  0028A8  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8554  0028AA  5D96               	subwf	vscp_handleProtocolEvent@bytes_1040& (0+255),w,b
  8555  0028AC  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8556  0028AE  0E00               	movlw	0
  8557  0028B0  5997               	subwfb	(vscp_handleProtocolEvent@bytes_1040+1)& (0+255),w,b
  8558  0028B2  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8559  0028B4  0E04               	movlw	4
  8560  0028B6  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8561  0028B8  0E00               	movlw	0
  8562  0028BA  5980               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8563  0028BC  E302               	bnc	l11179
  8564                           
  8565                           ; BSR set to: 0
  8566                           ;vscp_firmware.c: 1188: bytes_this_time = 4;
  8567  0028BE  0E04               	movlw	4
  8568  0028C0  D002               	goto	L13
  8569  0028C2                     l11179:
  8570                           
  8571                           ; BSR set to: 0
  8572                           ;vscp_firmware.c: 1190: else {
  8573                           ;vscp_firmware.c: 1191: bytes_this_time = (bytes - byte);
  8574  0028C2  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8575  0028C4  5D96               	subwf	vscp_handleProtocolEvent@bytes_1040& (0+255),w,b
  8576  0028C6                     L13:
  8577  0028C6  6F90               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  8578                           
  8579                           ; BSR set to: 0
  8580                           ;vscp_firmware.c: 1192: }
  8581                           ;vscp_firmware.c: 1195: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  8582  0028C8  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8583  0028CA  0F84               	addlw	132
  8584  0028CC  6FCB               	movwf	_vscp_omsg& (0+255),b
  8585                           
  8586                           ;vscp_firmware.c: 1196: vscp_omsg.data[3] =
  8587                           ;vscp_firmware.c: 1197: vscp_imsg.data[3] + byte;
  8588  0028CE  51C6               	movf	(_vscp_imsg+9)& (0+255),w,b
  8589  0028D0  2595               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8590  0028D2  6FD4               	movwf	(_vscp_omsg+9)& (0+255),b
  8591                           
  8592                           ; BSR set to: 0
  8593                           ;vscp_firmware.c: 1200: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  8594  0028D4  6B91               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  8595  0028D6  D00E               	goto	l11187
  8596  0028D8                     l11183:
  8597                           
  8598                           ; BSR set to: 0
  8599                           ;vscp_firmware.c: 1201: vscp_omsg.data[ (4 + cb) ] =
  8600                           ;vscp_firmware.c: 1202: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  8601  0028D8  51C6               	movf	(_vscp_imsg+9)& (0+255),w,b
  8602  0028DA  2595               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8603  0028DC  2591               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8604  0028DE  EC34  F02B         	call	_vscp_readRegister
  8605  0028E2  0100               	movlb	0	; () banked
  8606  0028E4  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8607  0028E6  5191               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8608  0028E8  0FD5               	addlw	low (_vscp_omsg+10)
  8609  0028EA  6ED9               	movwf	fsr2l,c
  8610  0028EC  6ADA               	clrf	fsr2h,c
  8611  0028EE  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8612                           
  8613                           ; BSR set to: 0
  8614  0028F2  2B91               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  8615  0028F4                     l11187:
  8616                           
  8617                           ; BSR set to: 0
  8618  0028F4  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8619  0028F6  5D91               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8620  0028F8  E3EF               	bnc	l11183
  8621                           
  8622                           ; BSR set to: 0
  8623                           ;vscp_firmware.c: 1203: }
  8624                           ;vscp_firmware.c: 1206: vscp_sendEvent();
  8625  0028FA  ECEE  F029         	call	_vscp_sendEvent	;wreg free
  8626                           
  8627                           ;vscp_firmware.c: 1209: byte += bytes_this_time;
  8628  0028FE  0100               	movlb	0	; () banked
  8629  002900  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8630  002902  2795               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  8631                           
  8632                           ; BSR set to: 0
  8633                           ;vscp_firmware.c: 1212: vscp_omsg.data[0] += 1;
  8634  002904  2BD1               	incf	(_vscp_omsg+6)& (0+255),f,b
  8635                           
  8636                           ; BSR set to: 0
  8637                           ;vscp_firmware.c: 1214: } while (byte < bytes);
  8638  002906  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8639  002908  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8640  00290A  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8641  00290C  5196               	movf	vscp_handleProtocolEvent@bytes_1040& (0+255),w,b
  8642  00290E  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8643  002910  5197               	movf	(vscp_handleProtocolEvent@bytes_1040+1)& (0+255),w,b
  8644  002912  5980               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8645  002914  E3C9               	bnc	l11175
  8646                           
  8647                           ; BSR set to: 0
  8648                           ;vscp_firmware.c: 1217: vscp_page_select = page_save;
  8649  002916  C086  F046         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  8650  00291A  C087  F047         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  8651  00291E  D079               	goto	l1256
  8652  002920                     l11197:
  8653                           
  8654                           ; BSR set to: 0
  8655                           ;vscp_firmware.c: 1224: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  8656  002920  51BB               	movf	_vscp_nickname& (0+255),w,b
  8657  002922  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  8658  002926  62DF               	cpfseq	indf2,c
  8659  002928  D074               	goto	l1256
  8660                           
  8661                           ; BSR set to: 0
  8662                           ;vscp_firmware.c: 1226: uint8_t i;
  8663                           ;vscp_firmware.c: 1227: uint16_t page_save;
  8664                           ;vscp_firmware.c: 1230: page_save = vscp_page_select;
  8665  00292A  C046  F088         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1045
  8666  00292E  C047  F089         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1045+1
  8667                           
  8668                           ; BSR set to: 0
  8669                           ;vscp_firmware.c: 1234: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  8670  002932  D870               	call	PL30	;call to abstracted procedure
  8671                           
  8672                           ; BSR set to: 0
  8673                           ;vscp_firmware.c: 1236: for (i = vscp_imsg.data[ 3 ];
  8674  002934  C0C6  F092         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1044
  8675                           
  8676                           ;vscp_firmware.c: 1239: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  8677                           ;vscp_firmware.c: 1240: i++) {
  8678  002938  D014               	goto	l11209
  8679  00293A                     l11205:
  8680                           
  8681                           ; BSR set to: 0
  8682                           ;vscp_firmware.c: 1241: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  8683                           ;vscp_firmware.c: 1242: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  8684  00293A  51C6               	movf	(_vscp_imsg+9)& (0+255),w,b
  8685  00293C  08C7               	sublw	low (_vscp_imsg+10)
  8686  00293E  2592               	addwf	vscp_handleProtocolEvent@i_1044& (0+255),w,b
  8687  002940  6ED9               	movwf	fsr2l,c
  8688  002942  6ADA               	clrf	fsr2h,c
  8689  002944  50DF               	movf	indf2,w,c
  8690  002946  6E25               	movwf	?_vscp_writeRegister,c
  8691  002948  5192               	movf	vscp_handleProtocolEvent@i_1044& (0+255),w,b
  8692  00294A  ECB9  F02A         	call	_vscp_writeRegister
  8693  00294E  0100               	movlb	0	; () banked
  8694  002950  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8695  002952  51C6               	movf	(_vscp_imsg+9)& (0+255),w,b
  8696  002954  08D5               	sublw	low (_vscp_omsg+10)
  8697  002956  2592               	addwf	vscp_handleProtocolEvent@i_1044& (0+255),w,b
  8698  002958  6ED9               	movwf	fsr2l,c
  8699  00295A  6ADA               	clrf	fsr2h,c
  8700  00295C  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8701                           
  8702                           ; BSR set to: 0
  8703  002960  2B92               	incf	vscp_handleProtocolEvent@i_1044& (0+255),f,b
  8704  002962                     l11209:
  8705                           
  8706                           ; BSR set to: 0
  8707  002962  51BD               	movf	_vscp_imsg& (0+255),w,b
  8708  002964  0B0F               	andlw	15
  8709  002966  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8710  002968  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8711  00296A  51C6               	movf	(_vscp_imsg+9)& (0+255),w,b
  8712  00296C  277F               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8713  00296E  0E00               	movlw	0
  8714  002970  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8715  002972  0EFC               	movlw	252
  8716  002974  257F               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8717  002976  6F81               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  8718  002978  0EFF               	movlw	255
  8719  00297A  2180               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8720  00297C  6F82               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  8721  00297E  5192               	movf	vscp_handleProtocolEvent@i_1044& (0+255),w,b
  8722  002980  6F83               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  8723  002982  6B84               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  8724  002984  5184               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  8725  002986  0A80               	xorlw	128
  8726  002988  6F85               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  8727  00298A  5181               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  8728  00298C  5D83               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  8729  00298E  5182               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  8730  002990  0A80               	xorlw	128
  8731  002992  5985               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  8732  002994  E3D2               	bnc	l11205
  8733                           
  8734                           ; BSR set to: 0
  8735                           ;vscp_firmware.c: 1243: }
  8736                           ;vscp_firmware.c: 1246: vscp_page_select = page_save;
  8737  002996  C088  F046         	movff	vscp_handleProtocolEvent@page_save_1045,_vscp_page_select
  8738  00299A  C089  F047         	movff	vscp_handleProtocolEvent@page_save_1045+1,_vscp_page_select+1
  8739                           
  8740                           ; BSR set to: 0
  8741                           ;vscp_firmware.c: 1248: vscp_omsg.priority = 0x07;
  8742  00299E  0E07               	movlw	7
  8743  0029A0  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  8744                           
  8745                           ; BSR set to: 0
  8746                           ;vscp_firmware.c: 1249: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  8747  0029A2  51BD               	movf	_vscp_imsg& (0+255),w,b
  8748  0029A4  0B0F               	andlw	15
  8749  0029A6  0F80               	addlw	128
  8750  0029A8  6FCB               	movwf	_vscp_omsg& (0+255),b
  8751                           
  8752                           ; BSR set to: 0
  8753                           ;vscp_firmware.c: 1250: vscp_omsg.vscp_class = 0;
  8754                           
  8755                           ; BSR set to: 0
  8756                           ;vscp_firmware.c: 1251: vscp_omsg.vscp_type = 39;
  8757                           
  8758                           ; BSR set to: 0
  8759                           ;vscp_firmware.c: 1252: vscp_omsg.data[0] = 0;
  8760                           
  8761                           ; BSR set to: 0
  8762                           ;vscp_firmware.c: 1253: vscp_omsg.data[1] = vscp_imsg.data[1];
  8763                           
  8764                           ; BSR set to: 0
  8765                           ;vscp_firmware.c: 1254: vscp_omsg.data[2] = vscp_imsg.data[2];
  8766  0029AA  D840               	call	PL46	;call to abstracted procedure
  8767                           
  8768                           ; BSR set to: 0
  8769                           ;vscp_firmware.c: 1255: vscp_omsg.data[3] = vscp_imsg.data[3];
  8770  0029AC  C0C6  F0D4         	movff	_vscp_imsg+9,_vscp_omsg+9
  8771  0029B0  D569               	goto	l10839
  8772  0029B2                     l11231:
  8773                           
  8774                           ; BSR set to: 0
  8775  0029B2  51C1               	movf	(_vscp_imsg+4)& (0+255),w,b
  8776                           
  8777                           ; Switch size 1, requested type "space"
  8778                           ; Number of cases is 16, Range of values is 1 to 38
  8779                           ; switch strategies available:
  8780                           ; Name         Instructions Cycles
  8781                           ; simple_byte           49    25 (average)
  8782                           ;	Chosen strategy is simple_byte
  8783  0029B4  0A01               	xorlw	1	; case 1
  8784  0029B6  E101 D53D          	bz	l10813
  8785  0029BA  0A03               	xorlw	3	; case 2
  8786  0029BC  E101 D53D          	bz	l10815
  8787  0029C0  0A04               	xorlw	4	; case 6
  8788  0029C2  E101 D53D          	bz	l10817
  8789  0029C6  0A0E               	xorlw	14	; case 8
  8790  0029C8  E101 D53D          	bz	l10819
  8791  0029CC  0A01               	xorlw	1	; case 9
  8792  0029CE  E101 D53D          	bz	l10821
  8793  0029D2  0A02               	xorlw	2	; case 11
  8794  0029D4  E101 D55D          	bz	l10855
  8795  0029D8  0A07               	xorlw	7	; case 12
  8796  0029DA  E101 D573          	bz	l10889
  8797  0029DE  0A1B               	xorlw	27	; case 23
  8798  0029E0  E101 D608          	bz	l10947
  8799  0029E4  0A0F               	xorlw	15	; case 24
  8800  0029E6  E101 D61C          	bz	l10953
  8801  0029EA  0A01               	xorlw	1	; case 25
  8802  0029EC  E101 D66F          	bz	l10987
  8803  0029F0  0A04               	xorlw	4	; case 29
  8804  0029F2  E101 D69A          	bz	l11013
  8805  0029F6  0A03               	xorlw	3	; case 30
  8806  0029F8  E101 D6A7          	bz	l11029
  8807  0029FC  0A01               	xorlw	1	; case 31
  8808  0029FE  E101 D6B4          	bz	l11045
  8809  002A02  0A3E               	xorlw	62	; case 33
  8810  002A04  E101 D715          	bz	l11131
  8811  002A08  0A04               	xorlw	4	; case 37
  8812  002A0A  E101 D723          	bz	l11141
  8813  002A0E  0A03               	xorlw	3	; case 38
  8814  002A10  E087               	bz	l11197
  8815  002A12                     l1256:
  8816  002A12  0012               	return	
  8817  002A14                     __end_of_vscp_handleProtocolEvent:
  8818                           	opt stack 0
  8819  002A14                     PL30:
  8820                           	opt stack 22
  8821  002A14  51C5               	movf	(_vscp_imsg+8)& (0+255),w,b
  8822  002A16  C0C4  F07F         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8823  002A1A  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8824  002A1C  C07F  F080         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8825  002A20  6B7F               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8826  002A22  117F               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8827  002A24  6E46               	movwf	_vscp_page_select,c
  8828  002A26  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8829  002A28  6E47               	movwf	_vscp_page_select+1,c
  8830  002A2A  0012               	return	
  8831  002A2C                     __end_ofPL30:
  8832                           	opt stack 0
  8833  002A2C                     PL46:
  8834                           	opt stack 22
  8835  002A2C  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  8836  002A2E  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  8837  002A30  0E27               	movlw	39
  8838  002A32  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  8839  002A34  6BD1               	clrf	(_vscp_omsg+6)& (0+255),b
  8840  002A36  C0C4  F0D2         	movff	_vscp_imsg+7,_vscp_omsg+7
  8841  002A3A  C0C5  F0D3         	movff	_vscp_imsg+8,_vscp_omsg+8
  8842  002A3E  0012               	return	
  8843  002A40                     __end_ofPL46:
  8844                           	opt stack 0
  8845  002A40                     PL70:
  8846                           	opt stack 22
  8847  002A40  0E07               	movlw	7
  8848  002A42  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  8849  002A44  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  8850  002A46  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  8851  002A48  0E1A               	movlw	26
  8852  002A4A  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  8853  002A4C  0C1A               	retlw	26
  8854  002A4E                     __end_ofPL70:
  8855                           	opt stack 0
  8856  002A4E                     PL88:
  8857                           	opt stack 22
  8858  002A4E  C098  F0D1         	movff	vscp_handleProtocolEvent@i_1036,_vscp_omsg+6
  8859  002A52  0E01               	movlw	1
  8860  002A54  6F9A               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8861  002A56  0C01               	retlw	1
  8862  002A58                     __end_ofPL88:
  8863                           	opt stack 0
  8864                           tblptru	equ	0xFF8
  8865                           tblptrh	equ	0xFF7
  8866                           tblptrl	equ	0xFF6
  8867                           tablat	equ	0xFF5
  8868                           prodh	equ	0xFF4
  8869                           prodl	equ	0xFF3
  8870                           intcon	equ	0xFF2
  8871                           postinc0	equ	0xFEE
  8872                           wreg	equ	0xFE8
  8873                           indf1	equ	0xFE7
  8874                           postdec1	equ	0xFE5
  8875                           fsr1h	equ	0xFE2
  8876                           fsr1l	equ	0xFE1
  8877                           indf2	equ	0xFDF
  8878                           postinc2	equ	0xFDE
  8879                           postdec2	equ	0xFDD
  8880                           plusw2	equ	0xFDB
  8881                           fsr2h	equ	0xFDA
  8882                           fsr2l	equ	0xFD9
  8883                           status	equ	0xFD8
  8884                           
  8885 ;; *************** function ___lbmod *****************
  8886 ;; Defined at:
  8887 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/common/lbmod.c"
  8888 ;; Parameters:    Size  Location     Type
  8889 ;;  dividend        1    wreg     unsigned char 
  8890 ;;  divisor         1   13[COMRAM] unsigned char 
  8891 ;; Auto vars:     Size  Location     Type
  8892 ;;  dividend        1   14[COMRAM] unsigned char 
  8893 ;;  rem             1   16[COMRAM] unsigned char 
  8894 ;;  counter         1   15[COMRAM] unsigned char 
  8895 ;; Return value:  Size  Location     Type
  8896 ;;                  1    wreg      unsigned char 
  8897 ;; Registers used:
  8898 ;;		wreg, status,2, status,0
  8899 ;; Tracked objects:
  8900 ;;		On entry : F/0
  8901 ;;		On exit  : 0/0
  8902 ;;		Unchanged: 0/0
  8903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8904 ;;      Params:         1       0       0       0       0       0       0
  8905 ;;      Locals:         3       0       0       0       0       0       0
  8906 ;;      Temps:          0       0       0       0       0       0       0
  8907 ;;      Totals:         4       0       0       0       0       0       0
  8908 ;;Total ram usage:        4 bytes
  8909 ;; Hardware stack levels used:    1
  8910 ;; Hardware stack levels required when called:    2
  8911 ;; This function calls:
  8912 ;;		Nothing
  8913 ;; This function is called by:
  8914 ;;		_vscp_handleProtocolEvent
  8915 ;; This function uses a non-reentrant model
  8916 ;;
  8917                           
  8918                           	psect	text34
  8919  0054B4                     __ptext34:
  8920                           	opt stack 0
  8921  0054B4                     ___lbmod:
  8922                           	opt stack 27
  8923                           
  8924                           ;incstack = 0
  8925                           ;incstack = 0
  8926                           ;___lbmod@dividend stored from wreg
  8927  0054B4  CFE8 F00F          	movff	wreg,___lbmod@dividend
  8928                           
  8929                           ; BSR set to: 0
  8930  0054B8  0E08               	movlw	8
  8931  0054BA  6E10               	movwf	___lbmod@counter,c
  8932                           
  8933                           ; BSR set to: 0
  8934  0054BC  6A11               	clrf	___lbmod@rem,c
  8935  0054BE                     l10283:
  8936  0054BE  90D8               	bcf	status,0,c
  8937  0054C0  340F               	rlcf	___lbmod@dividend& (0+255),w,c
  8938  0054C2  3411               	rlcf	___lbmod@rem& (0+255),w,c
  8939  0054C4  6E11               	movwf	___lbmod@rem,c
  8940  0054C6  90D8               	bcf	status,0,c
  8941  0054C8  360F               	rlcf	___lbmod@dividend,f,c
  8942  0054CA  500E               	movf	___lbmod@divisor,w,c
  8943  0054CC  5C11               	subwf	___lbmod@rem,w,c
  8944  0054CE  E302               	bnc	l10291
  8945  0054D0  500E               	movf	___lbmod@divisor,w,c
  8946  0054D2  5E11               	subwf	___lbmod@rem,f,c
  8947  0054D4                     l10291:
  8948  0054D4  2E10               	decfsz	___lbmod@counter,f,c
  8949  0054D6  D7F3               	goto	l10283
  8950  0054D8  5011               	movf	___lbmod@rem,w,c
  8951  0054DA  0012               	return	
  8952  0054DC                     __end_of___lbmod:
  8953                           	opt stack 0
  8954                           tblptru	equ	0xFF8
  8955                           tblptrh	equ	0xFF7
  8956                           tblptrl	equ	0xFF6
  8957                           tablat	equ	0xFF5
  8958                           prodh	equ	0xFF4
  8959                           prodl	equ	0xFF3
  8960                           intcon	equ	0xFF2
  8961                           postinc0	equ	0xFEE
  8962                           wreg	equ	0xFE8
  8963                           indf1	equ	0xFE7
  8964                           postdec1	equ	0xFE5
  8965                           fsr1h	equ	0xFE2
  8966                           fsr1l	equ	0xFE1
  8967                           indf2	equ	0xFDF
  8968                           postinc2	equ	0xFDE
  8969                           postdec2	equ	0xFDD
  8970                           plusw2	equ	0xFDB
  8971                           fsr2h	equ	0xFDA
  8972                           fsr2l	equ	0xFD9
  8973                           status	equ	0xFD8
  8974                           
  8975 ;; *************** function _vscp_writeRegister *****************
  8976 ;; Defined at:
  8977 ;;		line 690 in file "../../vscp_firmware/common/vscp_firmware.c"
  8978 ;; Parameters:    Size  Location     Type
  8979 ;;  reg             1    wreg     unsigned char 
  8980 ;;  value           1   36[COMRAM] unsigned char 
  8981 ;; Auto vars:     Size  Location     Type
  8982 ;;  reg             1   37[COMRAM] unsigned char 
  8983 ;; Return value:  Size  Location     Type
  8984 ;;                  1    wreg      unsigned char 
  8985 ;; Registers used:
  8986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8987 ;; Tracked objects:
  8988 ;;		On entry : F/0
  8989 ;;		On exit  : 0/0
  8990 ;;		Unchanged: 0/0
  8991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8992 ;;      Params:         1       0       0       0       0       0       0
  8993 ;;      Locals:         1       0       0       0       0       0       0
  8994 ;;      Temps:          0       0       0       0       0       0       0
  8995 ;;      Totals:         2       0       0       0       0       0       0
  8996 ;;Total ram usage:        2 bytes
  8997 ;; Hardware stack levels used:    1
  8998 ;; Hardware stack levels required when called:    6
  8999 ;; This function calls:
  9000 ;;		_vscp_writeAppReg
  9001 ;;		_vscp_writeStdReg
  9002 ;; This function is called by:
  9003 ;;		_vscp_handleProtocolEvent
  9004 ;; This function uses a non-reentrant model
  9005 ;;
  9006                           
  9007                           	psect	text35
  9008  005572                     __ptext35:
  9009                           	opt stack 0
  9010  005572                     _vscp_writeRegister:
  9011                           	opt stack 23
  9012                           
  9013                           ;incstack = 0
  9014                           ;incstack = 0
  9015                           ;vscp_writeRegister@reg stored from wreg
  9016  005572  CFE8 F026          	movff	wreg,vscp_writeRegister@reg
  9017                           
  9018                           ; BSR set to: 0
  9019                           ;vscp_firmware.c: 691: if (reg >= 0x80) {
  9020  005576  0E7F               	movlw	127
  9021  005578  6426               	cpfsgt	vscp_writeRegister@reg,c
  9022  00557A  D006               	goto	l12821
  9023                           
  9024                           ; BSR set to: 0
  9025                           ;vscp_firmware.c: 692: return vscp_writeStdReg(reg, value);
  9026  00557C  C025  F019         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  9027  005580  5026               	movf	vscp_writeRegister@reg,w,c
  9028  005582  EC16  F020         	call	_vscp_writeStdReg
  9029  005586  D005               	goto	l1134
  9030  005588                     l12821:
  9031                           
  9032                           ; BSR set to: 0
  9033                           ;vscp_firmware.c: 694: else {
  9034                           ;vscp_firmware.c: 695: return vscp_writeAppReg(reg, value);
  9035  005588  C025  F021         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  9036  00558C  5026               	movf	vscp_writeRegister@reg,w,c
  9037  00558E  EC37  F003         	call	_vscp_writeAppReg
  9038  005592                     l1134:
  9039  005592  0012               	return	
  9040  005594                     __end_of_vscp_writeRegister:
  9041                           	opt stack 0
  9042                           tblptru	equ	0xFF8
  9043                           tblptrh	equ	0xFF7
  9044                           tblptrl	equ	0xFF6
  9045                           tablat	equ	0xFF5
  9046                           prodh	equ	0xFF4
  9047                           prodl	equ	0xFF3
  9048                           intcon	equ	0xFF2
  9049                           postinc0	equ	0xFEE
  9050                           wreg	equ	0xFE8
  9051                           indf1	equ	0xFE7
  9052                           postdec1	equ	0xFE5
  9053                           fsr1h	equ	0xFE2
  9054                           fsr1l	equ	0xFE1
  9055                           indf2	equ	0xFDF
  9056                           postinc2	equ	0xFDE
  9057                           postdec2	equ	0xFDD
  9058                           plusw2	equ	0xFDB
  9059                           fsr2h	equ	0xFDA
  9060                           fsr2l	equ	0xFD9
  9061                           status	equ	0xFD8
  9062                           
  9063 ;; *************** function _vscp_writeStdReg *****************
  9064 ;; Defined at:
  9065 ;;		line 704 in file "../../vscp_firmware/common/vscp_firmware.c"
  9066 ;; Parameters:    Size  Location     Type
  9067 ;;  reg             1    wreg     unsigned char 
  9068 ;;  value           1   24[COMRAM] unsigned char 
  9069 ;; Auto vars:     Size  Location     Type
  9070 ;;  reg             1   30[COMRAM] unsigned char 
  9071 ;;  rv              1   29[COMRAM] unsigned char 
  9072 ;; Return value:  Size  Location     Type
  9073 ;;                  1    wreg      unsigned char 
  9074 ;; Registers used:
  9075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9076 ;; Tracked objects:
  9077 ;;		On entry : F/0
  9078 ;;		On exit  : 0/0
  9079 ;;		Unchanged: 0/0
  9080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9081 ;;      Params:         1       0       0       0       0       0       0
  9082 ;;      Locals:         2       0       0       0       0       0       0
  9083 ;;      Temps:          4       0       0       0       0       0       0
  9084 ;;      Totals:         7       0       0       0       0       0       0
  9085 ;;Total ram usage:        7 bytes
  9086 ;; Hardware stack levels used:    1
  9087 ;; Hardware stack levels required when called:    5
  9088 ;; This function calls:
  9089 ;;		_vscp_getGUID
  9090 ;;		_vscp_setGUID
  9091 ;;		_vscp_getUserID
  9092 ;;		_vscp_setUserID
  9093 ;;		_vscp_getManufacturerId
  9094 ;;		_vscp_setManufacturerId
  9095 ;;		_vscp_restoreDefaults
  9096 ;; This function is called by:
  9097 ;;		_vscp_writeRegister
  9098 ;;		_vscp_handleProtocolEvent
  9099 ;; This function uses a non-reentrant model
  9100 ;;
  9101                           
  9102                           	psect	text36
  9103  00402C                     __ptext36:
  9104                           	opt stack 0
  9105  00402C                     _vscp_writeStdReg:
  9106                           	opt stack 24
  9107                           
  9108                           ;incstack = 0
  9109                           ;incstack = 0
  9110                           ;vscp_writeStdReg@reg stored from wreg
  9111  00402C  CFE8 F01F          	movff	wreg,vscp_writeStdReg@reg
  9112                           
  9113                           ; BSR set to: 0
  9114                           ;vscp_firmware.c: 705: uint8_t rv = ~value;
  9115  004030  1C19               	comf	vscp_writeStdReg@value,w,c
  9116  004032  6E1E               	movwf	vscp_writeStdReg@rv,c
  9117                           
  9118                           ;vscp_firmware.c: 707: if ( reg == 0x83 ) {
  9119  004034  501F               	movf	vscp_writeStdReg@reg,w,c
  9120  004036  0A83               	xorlw	131
  9121  004038  E102               	bnz	l12829
  9122                           
  9123                           ; BSR set to: 0
  9124                           ;vscp_firmware.c: 708: rv = vscp_errorcnt = 0;
  9125  00403A  6A4B               	clrf	_vscp_errorcnt,c
  9126  00403C  D07E               	goto	l1162
  9127  00403E                     l12829:
  9128                           
  9129                           ; BSR set to: 0
  9130                           ;vscp_firmware.c: 710: else if ((reg >= (0x84)) &&
  9131                           ;vscp_firmware.c: 711: (reg < 0x89)) {
  9132  00403E  0E83               	movlw	131
  9133  004040  641F               	cpfsgt	vscp_writeStdReg@reg,c
  9134  004042  D00E               	goto	l12835
  9135                           
  9136                           ; BSR set to: 0
  9137  004044  0E89               	movlw	137
  9138  004046  601F               	cpfslt	vscp_writeStdReg@reg,c
  9139  004048  D00B               	goto	l12835
  9140                           
  9141                           ; BSR set to: 0
  9142                           ;vscp_firmware.c: 714: vscp_setUserID((reg - 0x84), value);
  9143  00404A  C019  F012         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  9144  00404E  501F               	movf	vscp_writeStdReg@reg,w,c
  9145  004050  0F7C               	addlw	124
  9146  004052  EC26  F02B         	call	_vscp_setUserID
  9147                           
  9148                           ;vscp_firmware.c: 715: rv = vscp_getUserID((reg - 0x84));
  9149  004056  501F               	movf	vscp_writeStdReg@reg,w,c
  9150  004058  0F7C               	addlw	124
  9151  00405A  EC7B  F02B         	call	_vscp_getUserID
  9152  00405E  D06B               	goto	L19
  9153  004060                     l12835:
  9154                           
  9155                           ; BSR set to: 0
  9156                           ;vscp_firmware.c: 718: else if (0x92 == reg) {
  9157  004060  501F               	movf	vscp_writeStdReg@reg,w,c
  9158  004062  0A92               	xorlw	146
  9159  004064  E10D               	bnz	l12841
  9160                           
  9161                           ; BSR set to: 0
  9162                           ;vscp_firmware.c: 721: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  9163  004066  5019               	movf	vscp_writeStdReg@value,w,c
  9164  004068  6E1B               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9165  00406A  6A1A               	clrf	??_vscp_writeStdReg& (0+255),c
  9166  00406C  5046               	movf	_vscp_page_select,w,c
  9167  00406E  6E1C               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  9168  004070  6A1D               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  9169  004072  101A               	iorwf	??_vscp_writeStdReg,w,c
  9170  004074  6E46               	movwf	_vscp_page_select,c
  9171  004076  501B               	movf	??_vscp_writeStdReg+1,w,c
  9172  004078  101D               	iorwf	??_vscp_writeStdReg+3,w,c
  9173  00407A  6E47               	movwf	_vscp_page_select+1,c
  9174                           
  9175                           ; BSR set to: 0
  9176                           ;vscp_firmware.c: 722: rv = (vscp_page_select >> 8) & 0xff;
  9177  00407C  5047               	movf	_vscp_page_select+1,w,c
  9178  00407E  D05B               	goto	L19
  9179  004080                     l12841:
  9180                           
  9181                           ; BSR set to: 0
  9182                           ;vscp_firmware.c: 724: else if (0x93 == reg) {
  9183  004080  501F               	movf	vscp_writeStdReg@reg,w,c
  9184  004082  0A93               	xorlw	147
  9185  004084  E10B               	bnz	l12847
  9186                           
  9187                           ; BSR set to: 0
  9188                           ;vscp_firmware.c: 727: vscp_page_select = (vscp_page_select & 0xff00) | value;
  9189  004086  6A1A               	clrf	??_vscp_writeStdReg& (0+255),c
  9190  004088  5047               	movf	_vscp_page_select+1,w,c
  9191  00408A  6E1B               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9192  00408C  5019               	movf	vscp_writeStdReg@value,w,c
  9193  00408E  101A               	iorwf	??_vscp_writeStdReg,w,c
  9194  004090  6E46               	movwf	_vscp_page_select,c
  9195  004092  501B               	movf	??_vscp_writeStdReg+1,w,c
  9196  004094  6E47               	movwf	_vscp_page_select+1,c
  9197                           
  9198                           ; BSR set to: 0
  9199                           ;vscp_firmware.c: 728: rv = (vscp_page_select & 0xff);
  9200  004096  C046  F01E         	movff	_vscp_page_select,vscp_writeStdReg@rv
  9201                           
  9202                           ;vscp_firmware.c: 729: }
  9203  00409A  D050               	goto	l12889
  9204  00409C                     l12847:
  9205                           
  9206                           ; BSR set to: 0
  9207                           ;vscp_firmware.c: 734: else if ((reg > 0x88) && (reg < 0x91)) {
  9208  00409C  0E88               	movlw	136
  9209  00409E  641F               	cpfsgt	vscp_writeStdReg@reg,c
  9210  0040A0  D019               	goto	l12859
  9211                           
  9212                           ; BSR set to: 0
  9213  0040A2  0E91               	movlw	145
  9214  0040A4  601F               	cpfslt	vscp_writeStdReg@reg,c
  9215  0040A6  D016               	goto	l12859
  9216                           
  9217                           ; BSR set to: 0
  9218                           ;vscp_firmware.c: 736: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9219                           ;vscp_firmware.c: 737: (0xff != (vscp_page_select & 0xff))) {
  9220  0040A8  C047  F01A         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9221  0040AC  C01A  F01B         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9222  0040B0  6A1C               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9223  0040B2  281B               	incf	??_vscp_writeStdReg+1,w,c
  9224  0040B4  E102               	bnz	l12855
  9225                           
  9226                           ; BSR set to: 0
  9227  0040B6  2846               	incf	_vscp_page_select,w,c
  9228  0040B8  E002               	bz	l12857
  9229  0040BA                     l12855:
  9230                           
  9231                           ; BSR set to: 0
  9232                           ;vscp_firmware.c: 739: rv = ~value;
  9233  0040BA  1C19               	comf	vscp_writeStdReg@value,w,c
  9234  0040BC  D03C               	goto	L19
  9235  0040BE                     l12857:
  9236                           
  9237                           ; BSR set to: 0
  9238                           ;vscp_firmware.c: 741: else {
  9239                           ;vscp_firmware.c: 743: vscp_setManufacturerId(reg - 0x89, value);
  9240  0040BE  C019  F012         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  9241  0040C2  501F               	movf	vscp_writeStdReg@reg,w,c
  9242  0040C4  0F77               	addlw	119
  9243  0040C6  EC18  F02B         	call	_vscp_setManufacturerId
  9244                           
  9245                           ;vscp_firmware.c: 744: rv = vscp_getManufacturerId(reg - 0x89);
  9246  0040CA  501F               	movf	vscp_writeStdReg@reg,w,c
  9247  0040CC  0F77               	addlw	119
  9248  0040CE  EC71  F02B         	call	_vscp_getManufacturerId
  9249  0040D2  D031               	goto	L19
  9250  0040D4                     l12859:
  9251                           
  9252                           ; BSR set to: 0
  9253                           ;vscp_firmware.c: 747: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  9254  0040D4  0ECF               	movlw	207
  9255  0040D6  641F               	cpfsgt	vscp_writeStdReg@reg,c
  9256  0040D8  D017               	goto	l12871
  9257                           
  9258                           ; BSR set to: 0
  9259  0040DA  0EE0               	movlw	224
  9260  0040DC  601F               	cpfslt	vscp_writeStdReg@reg,c
  9261  0040DE  D014               	goto	l12871
  9262                           
  9263                           ; BSR set to: 0
  9264                           ;vscp_firmware.c: 749: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9265                           ;vscp_firmware.c: 750: (0xff != (vscp_page_select & 0xff))) {
  9266  0040E0  C047  F01A         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9267  0040E4  C01A  F01B         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9268  0040E8  6A1C               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9269  0040EA  281B               	incf	??_vscp_writeStdReg+1,w,c
  9270  0040EC  E1E6               	bnz	l12855
  9271                           
  9272                           ; BSR set to: 0
  9273  0040EE  2846               	incf	_vscp_page_select,w,c
  9274  0040F0  E1E4               	bnz	l12855
  9275                           
  9276                           ; BSR set to: 0
  9277                           ;vscp_firmware.c: 754: else {
  9278                           ;vscp_firmware.c: 755: vscp_setGUID(reg - 0xD0, value);
  9279  0040F2  C019  F012         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  9280  0040F6  501F               	movf	vscp_writeStdReg@reg,w,c
  9281  0040F8  0F30               	addlw	48
  9282  0040FA  EC81  F02A         	call	_vscp_setGUID
  9283                           
  9284                           ;vscp_firmware.c: 756: rv = vscp_getGUID(reg - 0xD0);
  9285  0040FE  501F               	movf	vscp_writeStdReg@reg,w,c
  9286  004100  0F30               	addlw	48
  9287  004102  EC85  F02B         	call	_vscp_getGUID
  9288  004106  D017               	goto	L19
  9289  004108                     l12871:
  9290                           
  9291                           ; BSR set to: 0
  9292                           ;vscp_firmware.c: 760: else if ( 0xA2 == reg ) {
  9293  004108  501F               	movf	vscp_writeStdReg@reg,w,c
  9294  00410A  0AA2               	xorlw	162
  9295  00410C  E1D6               	bnz	l12855
  9296                           
  9297                           ; BSR set to: 0
  9298                           ;vscp_firmware.c: 761: if ( 0x55 == value ) {
  9299  00410E  5019               	movf	vscp_writeStdReg@value,w,c
  9300  004110  0A55               	xorlw	85
  9301  004112  E105               	bnz	l12879
  9302                           
  9303                           ; BSR set to: 0
  9304                           ;vscp_firmware.c: 762: vscp_configtimer = 0;
  9305  004114  0101               	movlb	1	; () banked
  9306  004116  6B1C               	clrf	_vscp_configtimer& (0+255),b	;volatile
  9307  004118  6B1D               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  9308                           
  9309                           ; BSR set to: 1
  9310                           ;vscp_firmware.c: 763: rv = 0x55;
  9311  00411A  0E55               	movlw	85
  9312  00411C  D00C               	goto	L19
  9313  00411E                     l12879:
  9314                           
  9315                           ; BSR set to: 0
  9316                           ;vscp_firmware.c: 765: else if ( 0xaa == value ) {
  9317  00411E  5019               	movf	vscp_writeStdReg@value,w,c
  9318  004120  0AAA               	xorlw	170
  9319  004122  E10C               	bnz	l12889
  9320                           
  9321                           ; BSR set to: 0
  9322                           ;vscp_firmware.c: 766: if ( vscp_configtimer < 1000 ) {
  9323  004124  0EE8               	movlw	232
  9324  004126  0101               	movlb	1	; () banked
  9325  004128  5D1C               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  9326  00412A  0E03               	movlw	3
  9327  00412C  591D               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  9328  00412E  E205               	bc	l1162
  9329                           
  9330                           ; BSR set to: 1
  9331                           ;vscp_firmware.c: 767: vscp_restoreDefaults();
  9332  004130  ECC3  F02B         	call	_vscp_restoreDefaults	;wreg free
  9333                           
  9334                           ; BSR set to: 0
  9335                           ;vscp_firmware.c: 768: rv = 0xaa;
  9336  004134  0EAA               	movlw	170
  9337  004136                     L19:
  9338  004136  6E1E               	movwf	vscp_writeStdReg@rv,c
  9339                           
  9340                           ;vscp_firmware.c: 769: }
  9341  004138  D001               	goto	l12889
  9342  00413A                     l1162:
  9343                           
  9344                           ; BSR set to: 1
  9345                           ;vscp_firmware.c: 770: else {
  9346                           ;vscp_firmware.c: 771: rv = 0;
  9347  00413A  6A1E               	clrf	vscp_writeStdReg@rv,c
  9348  00413C                     l12889:
  9349                           
  9350                           ;vscp_firmware.c: 779: }
  9351                           ;vscp_firmware.c: 781: return rv;
  9352  00413C  501E               	movf	vscp_writeStdReg@rv,w,c
  9353  00413E  0012               	return	
  9354  004140                     __end_of_vscp_writeStdReg:
  9355                           	opt stack 0
  9356                           tblptru	equ	0xFF8
  9357                           tblptrh	equ	0xFF7
  9358                           tblptrl	equ	0xFF6
  9359                           tablat	equ	0xFF5
  9360                           prodh	equ	0xFF4
  9361                           prodl	equ	0xFF3
  9362                           intcon	equ	0xFF2
  9363                           postinc0	equ	0xFEE
  9364                           wreg	equ	0xFE8
  9365                           indf1	equ	0xFE7
  9366                           postdec1	equ	0xFE5
  9367                           fsr1h	equ	0xFE2
  9368                           fsr1l	equ	0xFE1
  9369                           indf2	equ	0xFDF
  9370                           postinc2	equ	0xFDE
  9371                           postdec2	equ	0xFDD
  9372                           plusw2	equ	0xFDB
  9373                           fsr2h	equ	0xFDA
  9374                           fsr2l	equ	0xFD9
  9375                           status	equ	0xFD8
  9376                           
  9377 ;; *************** function _vscp_restoreDefaults *****************
  9378 ;; Defined at:
  9379 ;;		line 2901 in file "../main.c"
  9380 ;; Parameters:    Size  Location     Type
  9381 ;;		None
  9382 ;; Auto vars:     Size  Location     Type
  9383 ;;		None
  9384 ;; Return value:  Size  Location     Type
  9385 ;;		None               void
  9386 ;; Registers used:
  9387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9388 ;; Tracked objects:
  9389 ;;		On entry : F/1
  9390 ;;		On exit  : F/0
  9391 ;;		Unchanged: 0/0
  9392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9393 ;;      Params:         0       0       0       0       0       0       0
  9394 ;;      Locals:         0       0       0       0       0       0       0
  9395 ;;      Temps:          0       0       0       0       0       0       0
  9396 ;;      Totals:         0       0       0       0       0       0       0
  9397 ;;Total ram usage:        0 bytes
  9398 ;; Hardware stack levels used:    1
  9399 ;; Hardware stack levels required when called:    4
  9400 ;; This function calls:
  9401 ;;		_init_app_eeprom
  9402 ;;		_init_app_ram
  9403 ;; This function is called by:
  9404 ;;		_vscp_writeStdReg
  9405 ;; This function uses a non-reentrant model
  9406 ;;
  9407                           
  9408                           	psect	text37
  9409  005786                     __ptext37:
  9410                           	opt stack 0
  9411  005786                     _vscp_restoreDefaults:
  9412                           	opt stack 24
  9413                           
  9414                           ; BSR set to: 1
  9415                           ;main.c: 2902: init_app_eeprom();
  9416                           
  9417                           ;incstack = 0
  9418                           ;incstack = 0
  9419  005786  EC5D  F00E         	call	_init_app_eeprom	;wreg free
  9420                           
  9421                           ;main.c: 2903: init_app_ram();
  9422  00578A  EFF4  F028         	goto	_init_app_ram	;wreg free
  9423  00578E                     __end_of_vscp_restoreDefaults:
  9424                           	opt stack 0
  9425                           tblptru	equ	0xFF8
  9426                           tblptrh	equ	0xFF7
  9427                           tblptrl	equ	0xFF6
  9428                           tablat	equ	0xFF5
  9429                           prodh	equ	0xFF4
  9430                           prodl	equ	0xFF3
  9431                           intcon	equ	0xFF2
  9432                           postinc0	equ	0xFEE
  9433                           wreg	equ	0xFE8
  9434                           indf1	equ	0xFE7
  9435                           postdec1	equ	0xFE5
  9436                           fsr1h	equ	0xFE2
  9437                           fsr1l	equ	0xFE1
  9438                           indf2	equ	0xFDF
  9439                           postinc2	equ	0xFDE
  9440                           postdec2	equ	0xFDD
  9441                           plusw2	equ	0xFDB
  9442                           fsr2h	equ	0xFDA
  9443                           fsr2l	equ	0xFD9
  9444                           status	equ	0xFD8
  9445                           
  9446 ;; *************** function _vscp_setManufacturerId *****************
  9447 ;; Defined at:
  9448 ;;		line 2705 in file "../main.c"
  9449 ;; Parameters:    Size  Location     Type
  9450 ;;  idx             1    wreg     unsigned char 
  9451 ;;  data            1   17[COMRAM] unsigned char 
  9452 ;; Auto vars:     Size  Location     Type
  9453 ;;  idx             1   18[COMRAM] unsigned char 
  9454 ;; Return value:  Size  Location     Type
  9455 ;;		None               void
  9456 ;; Registers used:
  9457 ;;		wreg, status,2, status,0, cstack
  9458 ;; Tracked objects:
  9459 ;;		On entry : F/0
  9460 ;;		On exit  : 0/0
  9461 ;;		Unchanged: 0/0
  9462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9463 ;;      Params:         1       0       0       0       0       0       0
  9464 ;;      Locals:         1       0       0       0       0       0       0
  9465 ;;      Temps:          0       0       0       0       0       0       0
  9466 ;;      Totals:         2       0       0       0       0       0       0
  9467 ;;Total ram usage:        2 bytes
  9468 ;; Hardware stack levels used:    1
  9469 ;; Hardware stack levels required when called:    3
  9470 ;; This function calls:
  9471 ;;		_Busy_eep
  9472 ;;		_Write_b_eep
  9473 ;; This function is called by:
  9474 ;;		_vscp_writeStdReg
  9475 ;; This function uses a non-reentrant model
  9476 ;;
  9477                           
  9478                           	psect	text38
  9479  005630                     __ptext38:
  9480                           	opt stack 0
  9481  005630                     _vscp_setManufacturerId:
  9482                           	opt stack 25
  9483                           
  9484                           ; BSR set to: 0
  9485                           ;incstack = 0
  9486                           ;incstack = 0
  9487                           ;vscp_setManufacturerId@idx stored from wreg
  9488  005630  CFE8 F013          	movff	wreg,vscp_setManufacturerId@idx
  9489                           
  9490                           ; BSR set to: 0
  9491                           ;main.c: 2706: (Busy_eep(), Write_b_eep(0x0A + idx,data));
  9492  005634  ECC7  F02B         	call	_Busy_eep	;wreg free
  9493  005638  0E0A               	movlw	10
  9494  00563A  2413               	addwf	vscp_setManufacturerId@idx,w,c
  9495  00563C  6E0E               	movwf	?_Write_b_eep,c
  9496  00563E  6A0F               	clrf	?_Write_b_eep+1,c
  9497  005640  0E00               	movlw	0
  9498  005642  220F               	addwfc	?_Write_b_eep+1,f,c
  9499  005644  C012  F010         	movff	vscp_setManufacturerId@data,?_Write_b_eep+2
  9500  005648  EFA3  F029         	goto	_Write_b_eep	;wreg free
  9501  00564C                     __end_of_vscp_setManufacturerId:
  9502                           	opt stack 0
  9503                           tblptru	equ	0xFF8
  9504                           tblptrh	equ	0xFF7
  9505                           tblptrl	equ	0xFF6
  9506                           tablat	equ	0xFF5
  9507                           prodh	equ	0xFF4
  9508                           prodl	equ	0xFF3
  9509                           intcon	equ	0xFF2
  9510                           postinc0	equ	0xFEE
  9511                           wreg	equ	0xFE8
  9512                           indf1	equ	0xFE7
  9513                           postdec1	equ	0xFE5
  9514                           fsr1h	equ	0xFE2
  9515                           fsr1l	equ	0xFE1
  9516                           indf2	equ	0xFDF
  9517                           postinc2	equ	0xFDE
  9518                           postdec2	equ	0xFDD
  9519                           plusw2	equ	0xFDB
  9520                           fsr2h	equ	0xFDA
  9521                           fsr2l	equ	0xFD9
  9522                           status	equ	0xFD8
  9523                           
  9524 ;; *************** function _vscp_setUserID *****************
  9525 ;; Defined at:
  9526 ;;		line 2683 in file "../main.c"
  9527 ;; Parameters:    Size  Location     Type
  9528 ;;  idx             1    wreg     unsigned char 
  9529 ;;  data            1   17[COMRAM] unsigned char 
  9530 ;; Auto vars:     Size  Location     Type
  9531 ;;  idx             1   18[COMRAM] unsigned char 
  9532 ;; Return value:  Size  Location     Type
  9533 ;;		None               void
  9534 ;; Registers used:
  9535 ;;		wreg, status,2, status,0, cstack
  9536 ;; Tracked objects:
  9537 ;;		On entry : F/0
  9538 ;;		On exit  : 0/0
  9539 ;;		Unchanged: 0/0
  9540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9541 ;;      Params:         1       0       0       0       0       0       0
  9542 ;;      Locals:         1       0       0       0       0       0       0
  9543 ;;      Temps:          0       0       0       0       0       0       0
  9544 ;;      Totals:         2       0       0       0       0       0       0
  9545 ;;Total ram usage:        2 bytes
  9546 ;; Hardware stack levels used:    1
  9547 ;; Hardware stack levels required when called:    3
  9548 ;; This function calls:
  9549 ;;		_Busy_eep
  9550 ;;		_Write_b_eep
  9551 ;; This function is called by:
  9552 ;;		_vscp_writeStdReg
  9553 ;; This function uses a non-reentrant model
  9554 ;;
  9555                           
  9556                           	psect	text39
  9557  00564C                     __ptext39:
  9558                           	opt stack 0
  9559  00564C                     _vscp_setUserID:
  9560                           	opt stack 25
  9561                           
  9562                           ;incstack = 0
  9563                           ;incstack = 0
  9564                           ;vscp_setUserID@idx stored from wreg
  9565  00564C  CFE8 F013          	movff	wreg,vscp_setUserID@idx
  9566                           
  9567                           ; BSR set to: 0
  9568                           ;main.c: 2684: (Busy_eep(), Write_b_eep(idx + 0x05,data));
  9569  005650  ECC7  F02B         	call	_Busy_eep	;wreg free
  9570  005654  0E05               	movlw	5
  9571  005656  2413               	addwf	vscp_setUserID@idx,w,c
  9572  005658  6E0E               	movwf	?_Write_b_eep,c
  9573  00565A  6A0F               	clrf	?_Write_b_eep+1,c
  9574  00565C  0E00               	movlw	0
  9575  00565E  220F               	addwfc	?_Write_b_eep+1,f,c
  9576  005660  C012  F010         	movff	vscp_setUserID@data,?_Write_b_eep+2
  9577  005664  EFA3  F029         	goto	_Write_b_eep	;wreg free
  9578  005668                     __end_of_vscp_setUserID:
  9579                           	opt stack 0
  9580                           tblptru	equ	0xFF8
  9581                           tblptrh	equ	0xFF7
  9582                           tblptrl	equ	0xFF6
  9583                           tablat	equ	0xFF5
  9584                           prodh	equ	0xFF4
  9585                           prodl	equ	0xFF3
  9586                           intcon	equ	0xFF2
  9587                           postinc0	equ	0xFEE
  9588                           wreg	equ	0xFE8
  9589                           indf1	equ	0xFE7
  9590                           postdec1	equ	0xFE5
  9591                           fsr1h	equ	0xFE2
  9592                           fsr1l	equ	0xFE1
  9593                           indf2	equ	0xFDF
  9594                           postinc2	equ	0xFDE
  9595                           postdec2	equ	0xFDD
  9596                           plusw2	equ	0xFDB
  9597                           fsr2h	equ	0xFDA
  9598                           fsr2l	equ	0xFD9
  9599                           status	equ	0xFD8
  9600                           
  9601 ;; *************** function _vscp_setGUID *****************
  9602 ;; Defined at:
  9603 ;;		line 2652 in file "../main.c"
  9604 ;; Parameters:    Size  Location     Type
  9605 ;;  idx             1    wreg     unsigned char 
  9606 ;;  data            1   17[COMRAM] unsigned char 
  9607 ;; Auto vars:     Size  Location     Type
  9608 ;;  idx             1   18[COMRAM] unsigned char 
  9609 ;; Return value:  Size  Location     Type
  9610 ;;		None               void
  9611 ;; Registers used:
  9612 ;;		wreg, status,2, status,0, cstack
  9613 ;; Tracked objects:
  9614 ;;		On entry : F/0
  9615 ;;		On exit  : 0/0
  9616 ;;		Unchanged: 0/0
  9617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9618 ;;      Params:         1       0       0       0       0       0       0
  9619 ;;      Locals:         1       0       0       0       0       0       0
  9620 ;;      Temps:          0       0       0       0       0       0       0
  9621 ;;      Totals:         2       0       0       0       0       0       0
  9622 ;;Total ram usage:        2 bytes
  9623 ;; Hardware stack levels used:    1
  9624 ;; Hardware stack levels required when called:    3
  9625 ;; This function calls:
  9626 ;;		_Busy_eep
  9627 ;;		_Write_b_eep
  9628 ;; This function is called by:
  9629 ;;		_vscp_writeStdReg
  9630 ;; This function uses a non-reentrant model
  9631 ;;
  9632                           
  9633                           	psect	text40
  9634  005502                     __ptext40:
  9635                           	opt stack 0
  9636  005502                     _vscp_setGUID:
  9637                           	opt stack 25
  9638                           
  9639                           ;incstack = 0
  9640                           ;incstack = 0
  9641                           ;vscp_setGUID@idx stored from wreg
  9642  005502  CFE8 F013          	movff	wreg,vscp_setGUID@idx
  9643                           
  9644                           ; BSR set to: 0
  9645                           ;main.c: 2653: if ( idx>15 ) return;
  9646  005506  0E0F               	movlw	15
  9647  005508  6413               	cpfsgt	vscp_setGUID@idx,c
  9648  00550A  D001               	goto	l9183
  9649  00550C  D00C               	goto	l553
  9650  00550E                     l9183:
  9651                           
  9652                           ; BSR set to: 0
  9653                           ;main.c: 2654: (Busy_eep(), Write_b_eep(0x12 + idx,data));
  9654  00550E  ECC7  F02B         	call	_Busy_eep	;wreg free
  9655  005512  0E12               	movlw	18
  9656  005514  2413               	addwf	vscp_setGUID@idx,w,c
  9657  005516  6E0E               	movwf	?_Write_b_eep,c
  9658  005518  6A0F               	clrf	?_Write_b_eep+1,c
  9659  00551A  0E00               	movlw	0
  9660  00551C  220F               	addwfc	?_Write_b_eep+1,f,c
  9661  00551E  C012  F010         	movff	vscp_setGUID@data,?_Write_b_eep+2
  9662  005522  ECA3  F029         	call	_Write_b_eep	;wreg free
  9663  005526                     l553:
  9664  005526  0012               	return	
  9665  005528                     __end_of_vscp_setGUID:
  9666                           	opt stack 0
  9667                           tblptru	equ	0xFF8
  9668                           tblptrh	equ	0xFF7
  9669                           tblptrl	equ	0xFF6
  9670                           tablat	equ	0xFF5
  9671                           prodh	equ	0xFF4
  9672                           prodl	equ	0xFF3
  9673                           intcon	equ	0xFF2
  9674                           postinc0	equ	0xFEE
  9675                           wreg	equ	0xFE8
  9676                           indf1	equ	0xFE7
  9677                           postdec1	equ	0xFE5
  9678                           fsr1h	equ	0xFE2
  9679                           fsr1l	equ	0xFE1
  9680                           indf2	equ	0xFDF
  9681                           postinc2	equ	0xFDE
  9682                           postdec2	equ	0xFDD
  9683                           plusw2	equ	0xFDB
  9684                           fsr2h	equ	0xFDA
  9685                           fsr2l	equ	0xFD9
  9686                           status	equ	0xFD8
  9687                           
  9688 ;; *************** function _vscp_writeAppReg *****************
  9689 ;; Defined at:
  9690 ;;		line 1943 in file "../main.c"
  9691 ;; Parameters:    Size  Location     Type
  9692 ;;  reg             1    wreg     unsigned char 
  9693 ;;  val             1   32[COMRAM] unsigned char 
  9694 ;; Auto vars:     Size  Location     Type
  9695 ;;  reg             1   34[COMRAM] unsigned char 
  9696 ;;  pos             1   33[COMRAM] unsigned char 
  9697 ;;  rv              1   35[COMRAM] unsigned char 
  9698 ;; Return value:  Size  Location     Type
  9699 ;;                  1    wreg      unsigned char 
  9700 ;; Registers used:
  9701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9702 ;; Tracked objects:
  9703 ;;		On entry : F/0
  9704 ;;		On exit  : 0/0
  9705 ;;		Unchanged: 0/0
  9706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9707 ;;      Params:         1       0       0       0       0       0       0
  9708 ;;      Locals:         3       0       0       0       0       0       0
  9709 ;;      Temps:          0       0       0       0       0       0       0
  9710 ;;      Totals:         4       0       0       0       0       0       0
  9711 ;;Total ram usage:        4 bytes
  9712 ;; Hardware stack levels used:    1
  9713 ;; Hardware stack levels required when called:    4
  9714 ;; This function calls:
  9715 ;;		_Busy_eep
  9716 ;;		_Write_b_eep
  9717 ;;		_Read_b_eep
  9718 ;;		_writeCoeffs2Ram
  9719 ;; This function is called by:
  9720 ;;		_vscp_writeRegister
  9721 ;;		_vscp_handleProtocolEvent
  9722 ;; This function uses a non-reentrant model
  9723 ;;
  9724                           
  9725                           	psect	text41
  9726  00066E                     __ptext41:
  9727                           	opt stack 0
  9728  00066E                     _vscp_writeAppReg:
  9729                           	opt stack 24
  9730                           
  9731                           ;incstack = 0
  9732                           ;incstack = 0
  9733                           ;vscp_writeAppReg@reg stored from wreg
  9734  00066E  CFE8 F023          	movff	wreg,vscp_writeAppReg@reg
  9735                           
  9736                           ; BSR set to: 0
  9737                           ;main.c: 1944: uint8_t rv;
  9738                           ;main.c: 1951: rv = ~val;
  9739  000672  1C21               	comf	vscp_writeAppReg@val,w,c
  9740  000674  6E24               	movwf	vscp_writeAppReg@rv,c
  9741                           
  9742                           ;main.c: 1953: if (0 == vscp_page_select) {
  9743  000676  5047               	movf	_vscp_page_select+1,w,c
  9744  000678  1046               	iorwf	_vscp_page_select,w,c
  9745  00067A  E102 EFFA  F008    	bz	l12469
  9746  000680  EF40  F00A         	goto	l12471
  9747  000684                     l11903:
  9748                           
  9749                           ; BSR set to: 0
  9750                           ;main.c: 1959: (Busy_eep(), Write_b_eep(0x41,val));
  9751  000684  ECC7  F02B         	call	_Busy_eep	;wreg free
  9752  000688  6A0F               	clrf	?_Write_b_eep+1,c
  9753  00068A  0E41               	movlw	65
  9754  00068C  6E0E               	movwf	?_Write_b_eep,c
  9755  00068E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9756  000692  ECA3  F029         	call	_Write_b_eep	;wreg free
  9757                           
  9758                           ;main.c: 1960: rv = Read_b_eep(0x41);
  9759  000696  6A17               	clrf	?_Read_b_eep+1,c
  9760  000698  0E41               	movlw	65
  9761  00069A  6E16               	movwf	?_Read_b_eep,c
  9762  00069C  EC8F  F02B         	call	_Read_b_eep	;wreg free
  9763  0006A0  EF7C  F00A         	goto	L20
  9764  0006A4                     l11909:
  9765                           
  9766                           ; BSR set to: 0
  9767                           ;main.c: 1965: (Busy_eep(), Write_b_eep(0x42,val));
  9768  0006A4  ECC7  F02B         	call	_Busy_eep	;wreg free
  9769  0006A8  6A0F               	clrf	?_Write_b_eep+1,c
  9770  0006AA  0E42               	movlw	66
  9771  0006AC  6E0E               	movwf	?_Write_b_eep,c
  9772  0006AE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9773  0006B2  ECA3  F029         	call	_Write_b_eep	;wreg free
  9774                           
  9775                           ;main.c: 1966: rv = Read_b_eep(0x42);
  9776  0006B6  6A17               	clrf	?_Read_b_eep+1,c
  9777  0006B8  0E42               	movlw	66
  9778  0006BA  6E16               	movwf	?_Read_b_eep,c
  9779  0006BC  EC8F  F02B         	call	_Read_b_eep	;wreg free
  9780  0006C0  EF7C  F00A         	goto	L20
  9781  0006C4                     l11915:
  9782                           
  9783                           ; BSR set to: 0
  9784                           ;main.c: 1975: (Busy_eep(), Write_b_eep(0x43,val));
  9785  0006C4  ECC7  F02B         	call	_Busy_eep	;wreg free
  9786  0006C8  6A0F               	clrf	?_Write_b_eep+1,c
  9787  0006CA  0E43               	movlw	67
  9788  0006CC  6E0E               	movwf	?_Write_b_eep,c
  9789  0006CE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9790  0006D2  ECA3  F029         	call	_Write_b_eep	;wreg free
  9791                           
  9792                           ;main.c: 1976: rv = Read_b_eep(0x43);
  9793  0006D6  6A17               	clrf	?_Read_b_eep+1,c
  9794  0006D8  0E43               	movlw	67
  9795  0006DA  6E16               	movwf	?_Read_b_eep,c
  9796  0006DC  EC8F  F02B         	call	_Read_b_eep	;wreg free
  9797  0006E0  EF7C  F00A         	goto	L20
  9798  0006E4                     l11921:
  9799                           
  9800                           ; BSR set to: 0
  9801                           ;main.c: 1981: (Busy_eep(), Write_b_eep(0x44,val));
  9802  0006E4  ECC7  F02B         	call	_Busy_eep	;wreg free
  9803  0006E8  6A0F               	clrf	?_Write_b_eep+1,c
  9804  0006EA  0E44               	movlw	68
  9805  0006EC  6E0E               	movwf	?_Write_b_eep,c
  9806  0006EE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9807  0006F2  ECA3  F029         	call	_Write_b_eep	;wreg free
  9808                           
  9809                           ;main.c: 1982: rv = Read_b_eep(0x44);
  9810  0006F6  6A17               	clrf	?_Read_b_eep+1,c
  9811  0006F8  0E44               	movlw	68
  9812  0006FA  6E16               	movwf	?_Read_b_eep,c
  9813  0006FC  EC8F  F02B         	call	_Read_b_eep	;wreg free
  9814  000700  EF7C  F00A         	goto	L20
  9815  000704                     l11927:
  9816                           
  9817                           ; BSR set to: 0
  9818                           ;main.c: 1987: (Busy_eep(), Write_b_eep(0x45,val));
  9819  000704  ECC7  F02B         	call	_Busy_eep	;wreg free
  9820  000708  6A0F               	clrf	?_Write_b_eep+1,c
  9821  00070A  0E45               	movlw	69
  9822  00070C  6E0E               	movwf	?_Write_b_eep,c
  9823  00070E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9824  000712  ECA3  F029         	call	_Write_b_eep	;wreg free
  9825                           
  9826                           ;main.c: 1988: rv = Read_b_eep(0x45);
  9827  000716  6A17               	clrf	?_Read_b_eep+1,c
  9828  000718  0E45               	movlw	69
  9829  00071A  6E16               	movwf	?_Read_b_eep,c
  9830  00071C  EC8F  F02B         	call	_Read_b_eep	;wreg free
  9831  000720  EF7C  F00A         	goto	L20
  9832  000724                     l11933:
  9833                           
  9834                           ; BSR set to: 0
  9835                           ;main.c: 1993: (Busy_eep(), Write_b_eep(0x46,val));
  9836  000724  ECC7  F02B         	call	_Busy_eep	;wreg free
  9837  000728  6A0F               	clrf	?_Write_b_eep+1,c
  9838  00072A  0E46               	movlw	70
  9839  00072C  6E0E               	movwf	?_Write_b_eep,c
  9840  00072E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9841  000732  ECA3  F029         	call	_Write_b_eep	;wreg free
  9842                           
  9843                           ;main.c: 1994: rv = Read_b_eep(0x46);
  9844  000736  6A17               	clrf	?_Read_b_eep+1,c
  9845  000738  0E46               	movlw	70
  9846  00073A  6E16               	movwf	?_Read_b_eep,c
  9847  00073C  EC8F  F02B         	call	_Read_b_eep	;wreg free
  9848  000740  EF7C  F00A         	goto	L20
  9849  000744                     l11939:
  9850                           
  9851                           ; BSR set to: 0
  9852                           ;main.c: 1999: (Busy_eep(), Write_b_eep(0x47,val));
  9853  000744  ECC7  F02B         	call	_Busy_eep	;wreg free
  9854  000748  6A0F               	clrf	?_Write_b_eep+1,c
  9855  00074A  0E47               	movlw	71
  9856  00074C  6E0E               	movwf	?_Write_b_eep,c
  9857  00074E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9858  000752  ECA3  F029         	call	_Write_b_eep	;wreg free
  9859                           
  9860                           ;main.c: 2000: rv = Read_b_eep(0x47);
  9861  000756  6A17               	clrf	?_Read_b_eep+1,c
  9862  000758  0E47               	movlw	71
  9863  00075A  6E16               	movwf	?_Read_b_eep,c
  9864  00075C  EC8F  F02B         	call	_Read_b_eep	;wreg free
  9865  000760  EF7C  F00A         	goto	L20
  9866  000764                     l11945:
  9867                           
  9868                           ; BSR set to: 0
  9869                           ;main.c: 2005: (Busy_eep(), Write_b_eep(0x48,val));
  9870  000764  ECC7  F02B         	call	_Busy_eep	;wreg free
  9871  000768  6A0F               	clrf	?_Write_b_eep+1,c
  9872  00076A  0E48               	movlw	72
  9873  00076C  6E0E               	movwf	?_Write_b_eep,c
  9874  00076E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9875  000772  ECA3  F029         	call	_Write_b_eep	;wreg free
  9876                           
  9877                           ;main.c: 2006: rv = Read_b_eep(0x48);
  9878  000776  6A17               	clrf	?_Read_b_eep+1,c
  9879  000778  0E48               	movlw	72
  9880  00077A  6E16               	movwf	?_Read_b_eep,c
  9881  00077C  EC8F  F02B         	call	_Read_b_eep	;wreg free
  9882  000780  EF7C  F00A         	goto	L20
  9883  000784                     l11951:
  9884                           
  9885                           ; BSR set to: 0
  9886                           ;main.c: 2015: (Busy_eep(), Write_b_eep(0x49,val));
  9887  000784  ECC7  F02B         	call	_Busy_eep	;wreg free
  9888  000788  6A0F               	clrf	?_Write_b_eep+1,c
  9889  00078A  0E49               	movlw	73
  9890  00078C  6E0E               	movwf	?_Write_b_eep,c
  9891  00078E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9892  000792  ECA3  F029         	call	_Write_b_eep	;wreg free
  9893                           
  9894                           ;main.c: 2016: rv = Read_b_eep(0x49);
  9895  000796  6A17               	clrf	?_Read_b_eep+1,c
  9896  000798  0E49               	movlw	73
  9897  00079A  6E16               	movwf	?_Read_b_eep,c
  9898  00079C  EC8F  F02B         	call	_Read_b_eep	;wreg free
  9899  0007A0  EF7C  F00A         	goto	L20
  9900  0007A4                     l11957:
  9901                           
  9902                           ; BSR set to: 0
  9903                           ;main.c: 2021: (Busy_eep(), Write_b_eep(0x4A,val));
  9904  0007A4  ECC7  F02B         	call	_Busy_eep	;wreg free
  9905  0007A8  6A0F               	clrf	?_Write_b_eep+1,c
  9906  0007AA  0E4A               	movlw	74
  9907  0007AC  6E0E               	movwf	?_Write_b_eep,c
  9908  0007AE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9909  0007B2  ECA3  F029         	call	_Write_b_eep	;wreg free
  9910                           
  9911                           ;main.c: 2022: rv = Read_b_eep(0x4A);
  9912  0007B6  6A17               	clrf	?_Read_b_eep+1,c
  9913  0007B8  0E4A               	movlw	74
  9914  0007BA  6E16               	movwf	?_Read_b_eep,c
  9915  0007BC  EC8F  F02B         	call	_Read_b_eep	;wreg free
  9916  0007C0  EF7C  F00A         	goto	L20
  9917  0007C4                     l11963:
  9918                           
  9919                           ; BSR set to: 0
  9920                           ;main.c: 2027: (Busy_eep(), Write_b_eep(0x4B,val));
  9921  0007C4  ECC7  F02B         	call	_Busy_eep	;wreg free
  9922  0007C8  6A0F               	clrf	?_Write_b_eep+1,c
  9923  0007CA  0E4B               	movlw	75
  9924  0007CC  6E0E               	movwf	?_Write_b_eep,c
  9925  0007CE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9926  0007D2  ECA3  F029         	call	_Write_b_eep	;wreg free
  9927                           
  9928                           ;main.c: 2028: rv = Read_b_eep(0x4B);
  9929  0007D6  6A17               	clrf	?_Read_b_eep+1,c
  9930  0007D8  0E4B               	movlw	75
  9931  0007DA  6E16               	movwf	?_Read_b_eep,c
  9932  0007DC  EC8F  F02B         	call	_Read_b_eep	;wreg free
  9933  0007E0  EF7C  F00A         	goto	L20
  9934  0007E4                     l11969:
  9935                           
  9936                           ; BSR set to: 0
  9937                           ;main.c: 2033: (Busy_eep(), Write_b_eep(0x4C,val));
  9938  0007E4  ECC7  F02B         	call	_Busy_eep	;wreg free
  9939  0007E8  6A0F               	clrf	?_Write_b_eep+1,c
  9940  0007EA  0E4C               	movlw	76
  9941  0007EC  6E0E               	movwf	?_Write_b_eep,c
  9942  0007EE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9943  0007F2  ECA3  F029         	call	_Write_b_eep	;wreg free
  9944                           
  9945                           ;main.c: 2034: rv = Read_b_eep(0x4C);
  9946  0007F6  6A17               	clrf	?_Read_b_eep+1,c
  9947  0007F8  0E4C               	movlw	76
  9948  0007FA  6E16               	movwf	?_Read_b_eep,c
  9949  0007FC  EC8F  F02B         	call	_Read_b_eep	;wreg free
  9950  000800  EF7C  F00A         	goto	L20
  9951  000804                     l11975:
  9952                           
  9953                           ; BSR set to: 0
  9954                           ;main.c: 2039: (Busy_eep(), Write_b_eep(0x4D,val));
  9955  000804  ECC7  F02B         	call	_Busy_eep	;wreg free
  9956  000808  6A0F               	clrf	?_Write_b_eep+1,c
  9957  00080A  0E4D               	movlw	77
  9958  00080C  6E0E               	movwf	?_Write_b_eep,c
  9959  00080E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9960  000812  ECA3  F029         	call	_Write_b_eep	;wreg free
  9961                           
  9962                           ;main.c: 2040: rv = Read_b_eep(0x4D);
  9963  000816  6A17               	clrf	?_Read_b_eep+1,c
  9964  000818  0E4D               	movlw	77
  9965  00081A  6E16               	movwf	?_Read_b_eep,c
  9966  00081C  EC8F  F02B         	call	_Read_b_eep	;wreg free
  9967  000820  EF7C  F00A         	goto	L20
  9968  000824                     l11981:
  9969                           
  9970                           ; BSR set to: 0
  9971                           ;main.c: 2045: (Busy_eep(), Write_b_eep(0x4E,val));
  9972  000824  ECC7  F02B         	call	_Busy_eep	;wreg free
  9973  000828  6A0F               	clrf	?_Write_b_eep+1,c
  9974  00082A  0E4E               	movlw	78
  9975  00082C  6E0E               	movwf	?_Write_b_eep,c
  9976  00082E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9977  000832  ECA3  F029         	call	_Write_b_eep	;wreg free
  9978                           
  9979                           ;main.c: 2046: rv = Read_b_eep(0x4E);
  9980  000836  6A17               	clrf	?_Read_b_eep+1,c
  9981  000838  0E4E               	movlw	78
  9982  00083A  6E16               	movwf	?_Read_b_eep,c
  9983  00083C  EC8F  F02B         	call	_Read_b_eep	;wreg free
  9984  000840  EF7C  F00A         	goto	L20
  9985  000844                     l11987:
  9986                           
  9987                           ; BSR set to: 0
  9988                           ;main.c: 2055: (Busy_eep(), Write_b_eep(0x4F,val));
  9989  000844  ECC7  F02B         	call	_Busy_eep	;wreg free
  9990  000848  6A0F               	clrf	?_Write_b_eep+1,c
  9991  00084A  0E4F               	movlw	79
  9992  00084C  6E0E               	movwf	?_Write_b_eep,c
  9993  00084E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9994  000852  ECA3  F029         	call	_Write_b_eep	;wreg free
  9995                           
  9996                           ;main.c: 2056: rv = Read_b_eep(0x4F);
  9997  000856  6A17               	clrf	?_Read_b_eep+1,c
  9998  000858  0E4F               	movlw	79
  9999  00085A  6E16               	movwf	?_Read_b_eep,c
 10000  00085C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10001  000860  EF7C  F00A         	goto	L20
 10002  000864                     l11993:
 10003                           
 10004                           ; BSR set to: 0
 10005                           ;main.c: 2061: (Busy_eep(), Write_b_eep(0x50,val));
 10006  000864  ECC7  F02B         	call	_Busy_eep	;wreg free
 10007  000868  6A0F               	clrf	?_Write_b_eep+1,c
 10008  00086A  0E50               	movlw	80
 10009  00086C  6E0E               	movwf	?_Write_b_eep,c
 10010  00086E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10011  000872  ECA3  F029         	call	_Write_b_eep	;wreg free
 10012                           
 10013                           ;main.c: 2062: rv = Read_b_eep(0x50);
 10014  000876  6A17               	clrf	?_Read_b_eep+1,c
 10015  000878  0E50               	movlw	80
 10016  00087A  6E16               	movwf	?_Read_b_eep,c
 10017  00087C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10018  000880  EF7C  F00A         	goto	L20
 10019  000884                     l11999:
 10020                           
 10021                           ; BSR set to: 0
 10022                           ;main.c: 2067: (Busy_eep(), Write_b_eep(0x51,val));
 10023  000884  ECC7  F02B         	call	_Busy_eep	;wreg free
 10024  000888  6A0F               	clrf	?_Write_b_eep+1,c
 10025  00088A  0E51               	movlw	81
 10026  00088C  6E0E               	movwf	?_Write_b_eep,c
 10027  00088E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10028  000892  ECA3  F029         	call	_Write_b_eep	;wreg free
 10029                           
 10030                           ;main.c: 2068: rv = Read_b_eep(0x51);
 10031  000896  6A17               	clrf	?_Read_b_eep+1,c
 10032  000898  0E51               	movlw	81
 10033  00089A  6E16               	movwf	?_Read_b_eep,c
 10034  00089C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10035  0008A0  EF7C  F00A         	goto	L20
 10036  0008A4                     l12005:
 10037                           
 10038                           ; BSR set to: 0
 10039                           ;main.c: 2073: (Busy_eep(), Write_b_eep(0x52,val));
 10040  0008A4  ECC7  F02B         	call	_Busy_eep	;wreg free
 10041  0008A8  6A0F               	clrf	?_Write_b_eep+1,c
 10042  0008AA  0E52               	movlw	82
 10043  0008AC  6E0E               	movwf	?_Write_b_eep,c
 10044  0008AE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10045  0008B2  ECA3  F029         	call	_Write_b_eep	;wreg free
 10046                           
 10047                           ;main.c: 2074: rv = Read_b_eep(0x52);
 10048  0008B6  6A17               	clrf	?_Read_b_eep+1,c
 10049  0008B8  0E52               	movlw	82
 10050  0008BA  6E16               	movwf	?_Read_b_eep,c
 10051  0008BC  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10052  0008C0  EF7C  F00A         	goto	L20
 10053  0008C4                     l12011:
 10054                           
 10055                           ; BSR set to: 0
 10056                           ;main.c: 2079: (Busy_eep(), Write_b_eep(0x53,val));
 10057  0008C4  ECC7  F02B         	call	_Busy_eep	;wreg free
 10058  0008C8  6A0F               	clrf	?_Write_b_eep+1,c
 10059  0008CA  0E53               	movlw	83
 10060  0008CC  6E0E               	movwf	?_Write_b_eep,c
 10061  0008CE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10062  0008D2  ECA3  F029         	call	_Write_b_eep	;wreg free
 10063                           
 10064                           ;main.c: 2080: rv = Read_b_eep(0x53);
 10065  0008D6  6A17               	clrf	?_Read_b_eep+1,c
 10066  0008D8  0E53               	movlw	83
 10067  0008DA  6E16               	movwf	?_Read_b_eep,c
 10068  0008DC  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10069  0008E0  EF7C  F00A         	goto	L20
 10070  0008E4                     l12017:
 10071                           
 10072                           ; BSR set to: 0
 10073                           ;main.c: 2085: (Busy_eep(), Write_b_eep(0x54,val));
 10074  0008E4  ECC7  F02B         	call	_Busy_eep	;wreg free
 10075  0008E8  6A0F               	clrf	?_Write_b_eep+1,c
 10076  0008EA  0E54               	movlw	84
 10077  0008EC  6E0E               	movwf	?_Write_b_eep,c
 10078  0008EE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10079  0008F2  ECA3  F029         	call	_Write_b_eep	;wreg free
 10080                           
 10081                           ;main.c: 2086: rv = Read_b_eep(0x54);
 10082  0008F6  6A17               	clrf	?_Read_b_eep+1,c
 10083  0008F8  0E54               	movlw	84
 10084  0008FA  6E16               	movwf	?_Read_b_eep,c
 10085  0008FC  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10086  000900  EF7C  F00A         	goto	L20
 10087  000904                     l12023:
 10088                           
 10089                           ; BSR set to: 0
 10090                           ;main.c: 2091: (Busy_eep(), Write_b_eep(0x55,val));
 10091  000904  ECC7  F02B         	call	_Busy_eep	;wreg free
 10092  000908  6A0F               	clrf	?_Write_b_eep+1,c
 10093  00090A  0E55               	movlw	85
 10094  00090C  6E0E               	movwf	?_Write_b_eep,c
 10095  00090E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10096  000912  ECA3  F029         	call	_Write_b_eep	;wreg free
 10097                           
 10098                           ;main.c: 2092: rv = Read_b_eep(0x55);
 10099  000916  6A17               	clrf	?_Read_b_eep+1,c
 10100  000918  0E55               	movlw	85
 10101  00091A  6E16               	movwf	?_Read_b_eep,c
 10102  00091C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10103  000920  EF7C  F00A         	goto	L20
 10104  000924                     l12029:
 10105                           
 10106                           ; BSR set to: 0
 10107                           ;main.c: 2097: (Busy_eep(), Write_b_eep(0x56,val));
 10108  000924  ECC7  F02B         	call	_Busy_eep	;wreg free
 10109  000928  6A0F               	clrf	?_Write_b_eep+1,c
 10110  00092A  0E56               	movlw	86
 10111  00092C  6E0E               	movwf	?_Write_b_eep,c
 10112  00092E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10113  000932  ECA3  F029         	call	_Write_b_eep	;wreg free
 10114                           
 10115                           ;main.c: 2098: rv = Read_b_eep(0x56);
 10116  000936  6A17               	clrf	?_Read_b_eep+1,c
 10117  000938  0E56               	movlw	86
 10118  00093A  6E16               	movwf	?_Read_b_eep,c
 10119  00093C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10120  000940  EF7C  F00A         	goto	L20
 10121  000944                     l12035:
 10122                           
 10123                           ; BSR set to: 0
 10124                           ;main.c: 2103: (Busy_eep(), Write_b_eep(0x57,val));
 10125  000944  ECC7  F02B         	call	_Busy_eep	;wreg free
 10126  000948  6A0F               	clrf	?_Write_b_eep+1,c
 10127  00094A  0E57               	movlw	87
 10128  00094C  6E0E               	movwf	?_Write_b_eep,c
 10129  00094E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10130  000952  ECA3  F029         	call	_Write_b_eep	;wreg free
 10131                           
 10132                           ;main.c: 2104: rv = Read_b_eep(0x57);
 10133  000956  6A17               	clrf	?_Read_b_eep+1,c
 10134  000958  0E57               	movlw	87
 10135  00095A  6E16               	movwf	?_Read_b_eep,c
 10136  00095C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10137  000960  EF7C  F00A         	goto	L20
 10138  000964                     l12041:
 10139                           
 10140                           ; BSR set to: 0
 10141                           ;main.c: 2109: (Busy_eep(), Write_b_eep(0x58,val));
 10142  000964  ECC7  F02B         	call	_Busy_eep	;wreg free
 10143  000968  6A0F               	clrf	?_Write_b_eep+1,c
 10144  00096A  0E58               	movlw	88
 10145  00096C  6E0E               	movwf	?_Write_b_eep,c
 10146  00096E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10147  000972  ECA3  F029         	call	_Write_b_eep	;wreg free
 10148                           
 10149                           ;main.c: 2110: rv = Read_b_eep(0x58);
 10150  000976  6A17               	clrf	?_Read_b_eep+1,c
 10151  000978  0E58               	movlw	88
 10152  00097A  6E16               	movwf	?_Read_b_eep,c
 10153  00097C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10154  000980  EF7C  F00A         	goto	L20
 10155  000984                     l12047:
 10156                           
 10157                           ; BSR set to: 0
 10158                           ;main.c: 2115: (Busy_eep(), Write_b_eep(0x59,val));
 10159  000984  ECC7  F02B         	call	_Busy_eep	;wreg free
 10160  000988  6A0F               	clrf	?_Write_b_eep+1,c
 10161  00098A  0E59               	movlw	89
 10162  00098C  6E0E               	movwf	?_Write_b_eep,c
 10163  00098E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10164  000992  ECA3  F029         	call	_Write_b_eep	;wreg free
 10165                           
 10166                           ;main.c: 2116: rv = Read_b_eep(0x59);
 10167  000996  6A17               	clrf	?_Read_b_eep+1,c
 10168  000998  0E59               	movlw	89
 10169  00099A  6E16               	movwf	?_Read_b_eep,c
 10170  00099C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10171  0009A0  EF7C  F00A         	goto	L20
 10172  0009A4                     l12053:
 10173                           
 10174                           ; BSR set to: 0
 10175                           ;main.c: 2121: (Busy_eep(), Write_b_eep(0x5A,val));
 10176  0009A4  ECC7  F02B         	call	_Busy_eep	;wreg free
 10177  0009A8  6A0F               	clrf	?_Write_b_eep+1,c
 10178  0009AA  0E5A               	movlw	90
 10179  0009AC  6E0E               	movwf	?_Write_b_eep,c
 10180  0009AE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10181  0009B2  ECA3  F029         	call	_Write_b_eep	;wreg free
 10182                           
 10183                           ;main.c: 2122: rv = Read_b_eep(0x5A);
 10184  0009B6  6A17               	clrf	?_Read_b_eep+1,c
 10185  0009B8  0E5A               	movlw	90
 10186  0009BA  6E16               	movwf	?_Read_b_eep,c
 10187  0009BC  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10188  0009C0  EF7C  F00A         	goto	L20
 10189  0009C4                     l12059:
 10190                           
 10191                           ; BSR set to: 0
 10192                           ;main.c: 2131: (Busy_eep(), Write_b_eep(0x5B,val));
 10193  0009C4  ECC7  F02B         	call	_Busy_eep	;wreg free
 10194  0009C8  6A0F               	clrf	?_Write_b_eep+1,c
 10195  0009CA  0E5B               	movlw	91
 10196  0009CC  6E0E               	movwf	?_Write_b_eep,c
 10197  0009CE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10198  0009D2  ECA3  F029         	call	_Write_b_eep	;wreg free
 10199                           
 10200                           ;main.c: 2132: rv = Read_b_eep(0x5B);
 10201  0009D6  6A17               	clrf	?_Read_b_eep+1,c
 10202  0009D8  0E5B               	movlw	91
 10203  0009DA  6E16               	movwf	?_Read_b_eep,c
 10204  0009DC  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10205  0009E0  EF7C  F00A         	goto	L20
 10206  0009E4                     l12065:
 10207                           
 10208                           ; BSR set to: 0
 10209                           ;main.c: 2137: (Busy_eep(), Write_b_eep(0x5C,val));
 10210  0009E4  ECC7  F02B         	call	_Busy_eep	;wreg free
 10211  0009E8  6A0F               	clrf	?_Write_b_eep+1,c
 10212  0009EA  0E5C               	movlw	92
 10213  0009EC  6E0E               	movwf	?_Write_b_eep,c
 10214  0009EE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10215  0009F2  ECA3  F029         	call	_Write_b_eep	;wreg free
 10216                           
 10217                           ;main.c: 2138: rv = Read_b_eep(0x5C);
 10218  0009F6  6A17               	clrf	?_Read_b_eep+1,c
 10219  0009F8  0E5C               	movlw	92
 10220  0009FA  6E16               	movwf	?_Read_b_eep,c
 10221  0009FC  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10222  000A00  EF7C  F00A         	goto	L20
 10223  000A04                     l12071:
 10224                           
 10225                           ; BSR set to: 0
 10226                           ;main.c: 2143: (Busy_eep(), Write_b_eep(0x5D,val));
 10227  000A04  ECC7  F02B         	call	_Busy_eep	;wreg free
 10228  000A08  6A0F               	clrf	?_Write_b_eep+1,c
 10229  000A0A  0E5D               	movlw	93
 10230  000A0C  6E0E               	movwf	?_Write_b_eep,c
 10231  000A0E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10232  000A12  ECA3  F029         	call	_Write_b_eep	;wreg free
 10233                           
 10234                           ;main.c: 2144: rv = Read_b_eep(0x5D);
 10235  000A16  6A17               	clrf	?_Read_b_eep+1,c
 10236  000A18  0E5D               	movlw	93
 10237  000A1A  6E16               	movwf	?_Read_b_eep,c
 10238  000A1C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10239  000A20  EF7C  F00A         	goto	L20
 10240  000A24                     l12077:
 10241                           
 10242                           ; BSR set to: 0
 10243                           ;main.c: 2149: (Busy_eep(), Write_b_eep(0x5E,val));
 10244  000A24  ECC7  F02B         	call	_Busy_eep	;wreg free
 10245  000A28  6A0F               	clrf	?_Write_b_eep+1,c
 10246  000A2A  0E5E               	movlw	94
 10247  000A2C  6E0E               	movwf	?_Write_b_eep,c
 10248  000A2E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10249  000A32  ECA3  F029         	call	_Write_b_eep	;wreg free
 10250                           
 10251                           ;main.c: 2150: rv = Read_b_eep(0x5E);
 10252  000A36  6A17               	clrf	?_Read_b_eep+1,c
 10253  000A38  0E5E               	movlw	94
 10254  000A3A  6E16               	movwf	?_Read_b_eep,c
 10255  000A3C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10256  000A40  EF7C  F00A         	goto	L20
 10257  000A44                     l12083:
 10258                           
 10259                           ; BSR set to: 0
 10260                           ;main.c: 2155: (Busy_eep(), Write_b_eep(0x5F,val));
 10261  000A44  ECC7  F02B         	call	_Busy_eep	;wreg free
 10262  000A48  6A0F               	clrf	?_Write_b_eep+1,c
 10263  000A4A  0E5F               	movlw	95
 10264  000A4C  6E0E               	movwf	?_Write_b_eep,c
 10265  000A4E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10266  000A52  ECA3  F029         	call	_Write_b_eep	;wreg free
 10267                           
 10268                           ;main.c: 2156: rv = Read_b_eep(0x5F);
 10269  000A56  6A17               	clrf	?_Read_b_eep+1,c
 10270  000A58  0E5F               	movlw	95
 10271  000A5A  6E16               	movwf	?_Read_b_eep,c
 10272  000A5C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10273  000A60  EF7C  F00A         	goto	L20
 10274  000A64                     l12089:
 10275                           
 10276                           ; BSR set to: 0
 10277                           ;main.c: 2161: (Busy_eep(), Write_b_eep(0x60,val));
 10278  000A64  ECC7  F02B         	call	_Busy_eep	;wreg free
 10279  000A68  6A0F               	clrf	?_Write_b_eep+1,c
 10280  000A6A  0E60               	movlw	96
 10281  000A6C  6E0E               	movwf	?_Write_b_eep,c
 10282  000A6E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10283  000A72  ECA3  F029         	call	_Write_b_eep	;wreg free
 10284                           
 10285                           ;main.c: 2162: rv = Read_b_eep(0x60);
 10286  000A76  6A17               	clrf	?_Read_b_eep+1,c
 10287  000A78  0E60               	movlw	96
 10288  000A7A  6E16               	movwf	?_Read_b_eep,c
 10289  000A7C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10290  000A80  EF7C  F00A         	goto	L20
 10291  000A84                     l12095:
 10292                           
 10293                           ; BSR set to: 0
 10294                           ;main.c: 2167: (Busy_eep(), Write_b_eep(0x61,val));
 10295  000A84  ECC7  F02B         	call	_Busy_eep	;wreg free
 10296  000A88  6A0F               	clrf	?_Write_b_eep+1,c
 10297  000A8A  0E61               	movlw	97
 10298  000A8C  6E0E               	movwf	?_Write_b_eep,c
 10299  000A8E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10300  000A92  ECA3  F029         	call	_Write_b_eep	;wreg free
 10301                           
 10302                           ;main.c: 2168: rv = Read_b_eep(0x61);
 10303  000A96  6A17               	clrf	?_Read_b_eep+1,c
 10304  000A98  0E61               	movlw	97
 10305  000A9A  6E16               	movwf	?_Read_b_eep,c
 10306  000A9C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10307  000AA0  EF7C  F00A         	goto	L20
 10308  000AA4                     l12101:
 10309                           
 10310                           ; BSR set to: 0
 10311                           ;main.c: 2173: (Busy_eep(), Write_b_eep(0x62,val));
 10312  000AA4  ECC7  F02B         	call	_Busy_eep	;wreg free
 10313  000AA8  6A0F               	clrf	?_Write_b_eep+1,c
 10314  000AAA  0E62               	movlw	98
 10315  000AAC  6E0E               	movwf	?_Write_b_eep,c
 10316  000AAE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10317  000AB2  ECA3  F029         	call	_Write_b_eep	;wreg free
 10318                           
 10319                           ;main.c: 2174: rv = Read_b_eep(0x62);
 10320  000AB6  6A17               	clrf	?_Read_b_eep+1,c
 10321  000AB8  0E62               	movlw	98
 10322  000ABA  6E16               	movwf	?_Read_b_eep,c
 10323  000ABC  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10324  000AC0  EF7C  F00A         	goto	L20
 10325  000AC4                     l12107:
 10326                           
 10327                           ; BSR set to: 0
 10328                           ;main.c: 2179: (Busy_eep(), Write_b_eep(0x63,val));
 10329  000AC4  ECC7  F02B         	call	_Busy_eep	;wreg free
 10330  000AC8  6A0F               	clrf	?_Write_b_eep+1,c
 10331  000ACA  0E63               	movlw	99
 10332  000ACC  6E0E               	movwf	?_Write_b_eep,c
 10333  000ACE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10334  000AD2  ECA3  F029         	call	_Write_b_eep	;wreg free
 10335                           
 10336                           ;main.c: 2180: rv = Read_b_eep(0x63);
 10337  000AD6  6A17               	clrf	?_Read_b_eep+1,c
 10338  000AD8  0E63               	movlw	99
 10339  000ADA  6E16               	movwf	?_Read_b_eep,c
 10340  000ADC  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10341  000AE0  EF7C  F00A         	goto	L20
 10342  000AE4                     l12113:
 10343                           
 10344                           ; BSR set to: 0
 10345                           ;main.c: 2185: (Busy_eep(), Write_b_eep(0x64,val));
 10346  000AE4  ECC7  F02B         	call	_Busy_eep	;wreg free
 10347  000AE8  6A0F               	clrf	?_Write_b_eep+1,c
 10348  000AEA  0E64               	movlw	100
 10349  000AEC  6E0E               	movwf	?_Write_b_eep,c
 10350  000AEE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10351  000AF2  ECA3  F029         	call	_Write_b_eep	;wreg free
 10352                           
 10353                           ;main.c: 2186: rv = Read_b_eep(0x64);
 10354  000AF6  6A17               	clrf	?_Read_b_eep+1,c
 10355  000AF8  0E64               	movlw	100
 10356  000AFA  6E16               	movwf	?_Read_b_eep,c
 10357  000AFC  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10358  000B00  EF7C  F00A         	goto	L20
 10359  000B04                     l12119:
 10360                           
 10361                           ; BSR set to: 0
 10362                           ;main.c: 2191: (Busy_eep(), Write_b_eep(0x65,val));
 10363  000B04  ECC7  F02B         	call	_Busy_eep	;wreg free
 10364  000B08  6A0F               	clrf	?_Write_b_eep+1,c
 10365  000B0A  0E65               	movlw	101
 10366  000B0C  6E0E               	movwf	?_Write_b_eep,c
 10367  000B0E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10368  000B12  ECA3  F029         	call	_Write_b_eep	;wreg free
 10369                           
 10370                           ;main.c: 2192: rv = Read_b_eep(0x65);
 10371  000B16  6A17               	clrf	?_Read_b_eep+1,c
 10372  000B18  0E65               	movlw	101
 10373  000B1A  6E16               	movwf	?_Read_b_eep,c
 10374  000B1C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10375  000B20  EF7C  F00A         	goto	L20
 10376  000B24                     l12125:
 10377                           
 10378                           ; BSR set to: 0
 10379                           ;main.c: 2197: (Busy_eep(), Write_b_eep(0x66,val));
 10380  000B24  ECC7  F02B         	call	_Busy_eep	;wreg free
 10381  000B28  6A0F               	clrf	?_Write_b_eep+1,c
 10382  000B2A  0E66               	movlw	102
 10383  000B2C  6E0E               	movwf	?_Write_b_eep,c
 10384  000B2E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10385  000B32  ECA3  F029         	call	_Write_b_eep	;wreg free
 10386                           
 10387                           ;main.c: 2198: rv = Read_b_eep(0x66);
 10388  000B36  6A17               	clrf	?_Read_b_eep+1,c
 10389  000B38  0E66               	movlw	102
 10390  000B3A  6E16               	movwf	?_Read_b_eep,c
 10391  000B3C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10392  000B40  EF7C  F00A         	goto	L20
 10393  000B44                     l12131:
 10394                           
 10395                           ; BSR set to: 0
 10396                           ;main.c: 2207: (Busy_eep(), Write_b_eep(0x67,val));
 10397  000B44  ECC7  F02B         	call	_Busy_eep	;wreg free
 10398  000B48  6A0F               	clrf	?_Write_b_eep+1,c
 10399  000B4A  0E67               	movlw	103
 10400  000B4C  6E0E               	movwf	?_Write_b_eep,c
 10401  000B4E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10402  000B52  ECA3  F029         	call	_Write_b_eep	;wreg free
 10403                           
 10404                           ;main.c: 2208: rv = Read_b_eep(0x67);
 10405  000B56  6A17               	clrf	?_Read_b_eep+1,c
 10406  000B58  0E67               	movlw	103
 10407  000B5A  6E16               	movwf	?_Read_b_eep,c
 10408  000B5C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10409  000B60  EF7C  F00A         	goto	L20
 10410  000B64                     l12137:
 10411                           
 10412                           ; BSR set to: 0
 10413                           ;main.c: 2213: (Busy_eep(), Write_b_eep(0x68,val));
 10414  000B64  ECC7  F02B         	call	_Busy_eep	;wreg free
 10415  000B68  6A0F               	clrf	?_Write_b_eep+1,c
 10416  000B6A  0E68               	movlw	104
 10417  000B6C  6E0E               	movwf	?_Write_b_eep,c
 10418  000B6E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10419  000B72  ECA3  F029         	call	_Write_b_eep	;wreg free
 10420                           
 10421                           ;main.c: 2214: rv = Read_b_eep(0x68);
 10422  000B76  6A17               	clrf	?_Read_b_eep+1,c
 10423  000B78  0E68               	movlw	104
 10424  000B7A  6E16               	movwf	?_Read_b_eep,c
 10425  000B7C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10426  000B80  EF7C  F00A         	goto	L20
 10427  000B84                     l12143:
 10428                           
 10429                           ; BSR set to: 0
 10430                           ;main.c: 2219: (Busy_eep(), Write_b_eep(0x69,val));
 10431  000B84  ECC7  F02B         	call	_Busy_eep	;wreg free
 10432  000B88  6A0F               	clrf	?_Write_b_eep+1,c
 10433  000B8A  0E69               	movlw	105
 10434  000B8C  6E0E               	movwf	?_Write_b_eep,c
 10435  000B8E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10436  000B92  ECA3  F029         	call	_Write_b_eep	;wreg free
 10437                           
 10438                           ;main.c: 2220: rv = Read_b_eep(0x69);
 10439  000B96  6A17               	clrf	?_Read_b_eep+1,c
 10440  000B98  0E69               	movlw	105
 10441  000B9A  6E16               	movwf	?_Read_b_eep,c
 10442  000B9C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10443  000BA0  EF7C  F00A         	goto	L20
 10444  000BA4                     l12149:
 10445                           
 10446                           ; BSR set to: 0
 10447                           ;main.c: 2225: (Busy_eep(), Write_b_eep(0x6A,val));
 10448  000BA4  ECC7  F02B         	call	_Busy_eep	;wreg free
 10449  000BA8  6A0F               	clrf	?_Write_b_eep+1,c
 10450  000BAA  0E6A               	movlw	106
 10451  000BAC  6E0E               	movwf	?_Write_b_eep,c
 10452  000BAE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10453  000BB2  ECA3  F029         	call	_Write_b_eep	;wreg free
 10454                           
 10455                           ;main.c: 2226: rv = Read_b_eep(0x6A);
 10456  000BB6  6A17               	clrf	?_Read_b_eep+1,c
 10457  000BB8  0E6A               	movlw	106
 10458  000BBA  6E16               	movwf	?_Read_b_eep,c
 10459  000BBC  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10460  000BC0  EF7C  F00A         	goto	L20
 10461  000BC4                     l12155:
 10462                           
 10463                           ; BSR set to: 0
 10464                           ;main.c: 2231: (Busy_eep(), Write_b_eep(0x6B,val));
 10465  000BC4  ECC7  F02B         	call	_Busy_eep	;wreg free
 10466  000BC8  6A0F               	clrf	?_Write_b_eep+1,c
 10467  000BCA  0E6B               	movlw	107
 10468  000BCC  6E0E               	movwf	?_Write_b_eep,c
 10469  000BCE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10470  000BD2  ECA3  F029         	call	_Write_b_eep	;wreg free
 10471                           
 10472                           ;main.c: 2232: rv = Read_b_eep(0x6B);
 10473  000BD6  6A17               	clrf	?_Read_b_eep+1,c
 10474  000BD8  0E6B               	movlw	107
 10475  000BDA  6E16               	movwf	?_Read_b_eep,c
 10476  000BDC  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10477  000BE0  EF7C  F00A         	goto	L20
 10478  000BE4                     l12161:
 10479                           
 10480                           ; BSR set to: 0
 10481                           ;main.c: 2237: (Busy_eep(), Write_b_eep(0x6C,val));
 10482  000BE4  ECC7  F02B         	call	_Busy_eep	;wreg free
 10483  000BE8  6A0F               	clrf	?_Write_b_eep+1,c
 10484  000BEA  0E6C               	movlw	108
 10485  000BEC  6E0E               	movwf	?_Write_b_eep,c
 10486  000BEE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10487  000BF2  ECA3  F029         	call	_Write_b_eep	;wreg free
 10488                           
 10489                           ;main.c: 2238: rv = Read_b_eep(0x6C);
 10490  000BF6  6A17               	clrf	?_Read_b_eep+1,c
 10491  000BF8  0E6C               	movlw	108
 10492  000BFA  6E16               	movwf	?_Read_b_eep,c
 10493  000BFC  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10494  000C00  EF7C  F00A         	goto	L20
 10495  000C04                     l12167:
 10496                           
 10497                           ; BSR set to: 0
 10498                           ;main.c: 2243: (Busy_eep(), Write_b_eep(0x6D,val));
 10499  000C04  ECC7  F02B         	call	_Busy_eep	;wreg free
 10500  000C08  6A0F               	clrf	?_Write_b_eep+1,c
 10501  000C0A  0E6D               	movlw	109
 10502  000C0C  6E0E               	movwf	?_Write_b_eep,c
 10503  000C0E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10504  000C12  ECA3  F029         	call	_Write_b_eep	;wreg free
 10505                           
 10506                           ;main.c: 2244: rv = Read_b_eep(0x6D);
 10507  000C16  6A17               	clrf	?_Read_b_eep+1,c
 10508  000C18  0E6D               	movlw	109
 10509  000C1A  6E16               	movwf	?_Read_b_eep,c
 10510  000C1C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10511  000C20  EF7C  F00A         	goto	L20
 10512  000C24                     l12173:
 10513                           
 10514                           ; BSR set to: 0
 10515                           ;main.c: 2249: (Busy_eep(), Write_b_eep(0x6E,val));
 10516  000C24  ECC7  F02B         	call	_Busy_eep	;wreg free
 10517  000C28  6A0F               	clrf	?_Write_b_eep+1,c
 10518  000C2A  0E6E               	movlw	110
 10519  000C2C  6E0E               	movwf	?_Write_b_eep,c
 10520  000C2E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10521  000C32  ECA3  F029         	call	_Write_b_eep	;wreg free
 10522                           
 10523                           ;main.c: 2250: rv = Read_b_eep(0x6E);
 10524  000C36  6A17               	clrf	?_Read_b_eep+1,c
 10525  000C38  0E6E               	movlw	110
 10526  000C3A  6E16               	movwf	?_Read_b_eep,c
 10527  000C3C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10528  000C40  EF7C  F00A         	goto	L20
 10529  000C44                     l12179:
 10530                           
 10531                           ; BSR set to: 0
 10532                           ;main.c: 2255: (Busy_eep(), Write_b_eep(0x6F,val));
 10533  000C44  ECC7  F02B         	call	_Busy_eep	;wreg free
 10534  000C48  6A0F               	clrf	?_Write_b_eep+1,c
 10535  000C4A  0E6F               	movlw	111
 10536  000C4C  6E0E               	movwf	?_Write_b_eep,c
 10537  000C4E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10538  000C52  ECA3  F029         	call	_Write_b_eep	;wreg free
 10539                           
 10540                           ;main.c: 2256: rv = Read_b_eep(0x6F);
 10541  000C56  6A17               	clrf	?_Read_b_eep+1,c
 10542  000C58  0E6F               	movlw	111
 10543  000C5A  6E16               	movwf	?_Read_b_eep,c
 10544  000C5C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10545  000C60  EF7C  F00A         	goto	L20
 10546  000C64                     l12185:
 10547                           
 10548                           ; BSR set to: 0
 10549                           ;main.c: 2261: (Busy_eep(), Write_b_eep(0x70,val));
 10550  000C64  ECC7  F02B         	call	_Busy_eep	;wreg free
 10551  000C68  6A0F               	clrf	?_Write_b_eep+1,c
 10552  000C6A  0E70               	movlw	112
 10553  000C6C  6E0E               	movwf	?_Write_b_eep,c
 10554  000C6E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10555  000C72  ECA3  F029         	call	_Write_b_eep	;wreg free
 10556                           
 10557                           ;main.c: 2262: rv = Read_b_eep(0x70);
 10558  000C76  6A17               	clrf	?_Read_b_eep+1,c
 10559  000C78  0E70               	movlw	112
 10560  000C7A  6E16               	movwf	?_Read_b_eep,c
 10561  000C7C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10562  000C80  EF7C  F00A         	goto	L20
 10563  000C84                     l12191:
 10564                           
 10565                           ; BSR set to: 0
 10566                           ;main.c: 2267: (Busy_eep(), Write_b_eep(0x71,val));
 10567  000C84  ECC7  F02B         	call	_Busy_eep	;wreg free
 10568  000C88  6A0F               	clrf	?_Write_b_eep+1,c
 10569  000C8A  0E71               	movlw	113
 10570  000C8C  6E0E               	movwf	?_Write_b_eep,c
 10571  000C8E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10572  000C92  ECA3  F029         	call	_Write_b_eep	;wreg free
 10573                           
 10574                           ;main.c: 2268: rv = Read_b_eep(0x71);
 10575  000C96  6A17               	clrf	?_Read_b_eep+1,c
 10576  000C98  0E71               	movlw	113
 10577  000C9A  6E16               	movwf	?_Read_b_eep,c
 10578  000C9C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10579  000CA0  EF7C  F00A         	goto	L20
 10580  000CA4                     l12197:
 10581                           
 10582                           ; BSR set to: 0
 10583                           ;main.c: 2273: (Busy_eep(), Write_b_eep(0x72,val));
 10584  000CA4  ECC7  F02B         	call	_Busy_eep	;wreg free
 10585  000CA8  6A0F               	clrf	?_Write_b_eep+1,c
 10586  000CAA  0E72               	movlw	114
 10587  000CAC  6E0E               	movwf	?_Write_b_eep,c
 10588  000CAE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10589  000CB2  ECA3  F029         	call	_Write_b_eep	;wreg free
 10590                           
 10591                           ;main.c: 2274: rv = Read_b_eep(0x72);
 10592  000CB6  6A17               	clrf	?_Read_b_eep+1,c
 10593  000CB8  0E72               	movlw	114
 10594  000CBA  6E16               	movwf	?_Read_b_eep,c
 10595  000CBC  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10596  000CC0  EF7C  F00A         	goto	L20
 10597  000CC4                     l12203:
 10598                           
 10599                           ; BSR set to: 0
 10600                           ;main.c: 2283: (Busy_eep(), Write_b_eep(0x73,val));
 10601  000CC4  ECC7  F02B         	call	_Busy_eep	;wreg free
 10602  000CC8  6A0F               	clrf	?_Write_b_eep+1,c
 10603  000CCA  0E73               	movlw	115
 10604  000CCC  6E0E               	movwf	?_Write_b_eep,c
 10605  000CCE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10606  000CD2  ECA3  F029         	call	_Write_b_eep	;wreg free
 10607                           
 10608                           ;main.c: 2284: rv = Read_b_eep(0x73);
 10609  000CD6  6A17               	clrf	?_Read_b_eep+1,c
 10610  000CD8  0E73               	movlw	115
 10611  000CDA  6E16               	movwf	?_Read_b_eep,c
 10612  000CDC  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10613  000CE0  EF7C  F00A         	goto	L20
 10614  000CE4                     l12209:
 10615                           
 10616                           ; BSR set to: 0
 10617                           ;main.c: 2289: (Busy_eep(), Write_b_eep(0x74,val));
 10618  000CE4  ECC7  F02B         	call	_Busy_eep	;wreg free
 10619  000CE8  6A0F               	clrf	?_Write_b_eep+1,c
 10620  000CEA  0E74               	movlw	116
 10621  000CEC  6E0E               	movwf	?_Write_b_eep,c
 10622  000CEE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10623  000CF2  ECA3  F029         	call	_Write_b_eep	;wreg free
 10624                           
 10625                           ;main.c: 2290: rv = Read_b_eep(0x74);
 10626  000CF6  6A17               	clrf	?_Read_b_eep+1,c
 10627  000CF8  0E74               	movlw	116
 10628  000CFA  6E16               	movwf	?_Read_b_eep,c
 10629  000CFC  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10630  000D00  D3FB               	goto	L20
 10631  000D02                     l12215:
 10632                           
 10633                           ; BSR set to: 0
 10634                           ;main.c: 2295: (Busy_eep(), Write_b_eep(0x75,val));
 10635  000D02  ECC7  F02B         	call	_Busy_eep	;wreg free
 10636  000D06  6A0F               	clrf	?_Write_b_eep+1,c
 10637  000D08  0E75               	movlw	117
 10638  000D0A  6E0E               	movwf	?_Write_b_eep,c
 10639  000D0C  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10640  000D10  ECA3  F029         	call	_Write_b_eep	;wreg free
 10641                           
 10642                           ;main.c: 2296: rv = Read_b_eep(0x75);
 10643  000D14  6A17               	clrf	?_Read_b_eep+1,c
 10644  000D16  0E75               	movlw	117
 10645  000D18  6E16               	movwf	?_Read_b_eep,c
 10646  000D1A  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10647  000D1E  D3EC               	goto	L20
 10648  000D20                     l12221:
 10649                           
 10650                           ; BSR set to: 0
 10651                           ;main.c: 2301: (Busy_eep(), Write_b_eep(0x76,val));
 10652  000D20  ECC7  F02B         	call	_Busy_eep	;wreg free
 10653  000D24  6A0F               	clrf	?_Write_b_eep+1,c
 10654  000D26  0E76               	movlw	118
 10655  000D28  6E0E               	movwf	?_Write_b_eep,c
 10656  000D2A  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10657  000D2E  ECA3  F029         	call	_Write_b_eep	;wreg free
 10658                           
 10659                           ;main.c: 2302: rv = Read_b_eep(0x76);
 10660  000D32  6A17               	clrf	?_Read_b_eep+1,c
 10661  000D34  0E76               	movlw	118
 10662  000D36  6E16               	movwf	?_Read_b_eep,c
 10663  000D38  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10664  000D3C  D3DD               	goto	L20
 10665  000D3E                     l12227:
 10666                           
 10667                           ; BSR set to: 0
 10668                           ;main.c: 2307: (Busy_eep(), Write_b_eep(0x77,val));
 10669  000D3E  ECC7  F02B         	call	_Busy_eep	;wreg free
 10670  000D42  6A0F               	clrf	?_Write_b_eep+1,c
 10671  000D44  0E77               	movlw	119
 10672  000D46  6E0E               	movwf	?_Write_b_eep,c
 10673  000D48  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10674  000D4C  ECA3  F029         	call	_Write_b_eep	;wreg free
 10675                           
 10676                           ;main.c: 2308: rv = Read_b_eep(0x77);
 10677  000D50  6A17               	clrf	?_Read_b_eep+1,c
 10678  000D52  0E77               	movlw	119
 10679  000D54  6E16               	movwf	?_Read_b_eep,c
 10680  000D56  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10681  000D5A  D3CE               	goto	L20
 10682  000D5C                     l12233:
 10683                           
 10684                           ; BSR set to: 0
 10685                           ;main.c: 2313: (Busy_eep(), Write_b_eep(0x78,val));
 10686  000D5C  ECC7  F02B         	call	_Busy_eep	;wreg free
 10687  000D60  6A0F               	clrf	?_Write_b_eep+1,c
 10688  000D62  0E78               	movlw	120
 10689  000D64  6E0E               	movwf	?_Write_b_eep,c
 10690  000D66  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10691  000D6A  ECA3  F029         	call	_Write_b_eep	;wreg free
 10692                           
 10693                           ;main.c: 2314: rv = Read_b_eep(0x78);
 10694  000D6E  6A17               	clrf	?_Read_b_eep+1,c
 10695  000D70  0E78               	movlw	120
 10696  000D72  6E16               	movwf	?_Read_b_eep,c
 10697  000D74  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10698  000D78  D3BF               	goto	L20
 10699  000D7A                     l12239:
 10700                           
 10701                           ; BSR set to: 0
 10702                           ;main.c: 2319: (Busy_eep(), Write_b_eep(0x79,val));
 10703  000D7A  ECC7  F02B         	call	_Busy_eep	;wreg free
 10704  000D7E  6A0F               	clrf	?_Write_b_eep+1,c
 10705  000D80  0E79               	movlw	121
 10706  000D82  6E0E               	movwf	?_Write_b_eep,c
 10707  000D84  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10708  000D88  ECA3  F029         	call	_Write_b_eep	;wreg free
 10709                           
 10710                           ;main.c: 2320: rv = Read_b_eep(0x79);
 10711  000D8C  6A17               	clrf	?_Read_b_eep+1,c
 10712  000D8E  0E79               	movlw	121
 10713  000D90  6E16               	movwf	?_Read_b_eep,c
 10714  000D92  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10715  000D96  D3B0               	goto	L20
 10716  000D98                     l12245:
 10717                           
 10718                           ; BSR set to: 0
 10719                           ;main.c: 2325: (Busy_eep(), Write_b_eep(0x7A,val));
 10720  000D98  ECC7  F02B         	call	_Busy_eep	;wreg free
 10721  000D9C  6A0F               	clrf	?_Write_b_eep+1,c
 10722  000D9E  0E7A               	movlw	122
 10723  000DA0  6E0E               	movwf	?_Write_b_eep,c
 10724  000DA2  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10725  000DA6  ECA3  F029         	call	_Write_b_eep	;wreg free
 10726                           
 10727                           ;main.c: 2326: rv = Read_b_eep(0x7A);
 10728  000DAA  6A17               	clrf	?_Read_b_eep+1,c
 10729  000DAC  0E7A               	movlw	122
 10730  000DAE  6E16               	movwf	?_Read_b_eep,c
 10731  000DB0  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10732  000DB4  D3A1               	goto	L20
 10733  000DB6                     l12251:
 10734                           
 10735                           ; BSR set to: 0
 10736                           ;main.c: 2331: (Busy_eep(), Write_b_eep(0x7B,val));
 10737  000DB6  ECC7  F02B         	call	_Busy_eep	;wreg free
 10738  000DBA  6A0F               	clrf	?_Write_b_eep+1,c
 10739  000DBC  0E7B               	movlw	123
 10740  000DBE  6E0E               	movwf	?_Write_b_eep,c
 10741  000DC0  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10742  000DC4  ECA3  F029         	call	_Write_b_eep	;wreg free
 10743                           
 10744                           ;main.c: 2332: rv = Read_b_eep(0x7B);
 10745  000DC8  6A17               	clrf	?_Read_b_eep+1,c
 10746  000DCA  0E7B               	movlw	123
 10747  000DCC  6E16               	movwf	?_Read_b_eep,c
 10748  000DCE  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10749  000DD2  D392               	goto	L20
 10750  000DD4                     l12257:
 10751                           
 10752                           ; BSR set to: 0
 10753                           ;main.c: 2337: (Busy_eep(), Write_b_eep(0x7C,val));
 10754  000DD4  ECC7  F02B         	call	_Busy_eep	;wreg free
 10755  000DD8  6A0F               	clrf	?_Write_b_eep+1,c
 10756  000DDA  0E7C               	movlw	124
 10757  000DDC  6E0E               	movwf	?_Write_b_eep,c
 10758  000DDE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10759  000DE2  ECA3  F029         	call	_Write_b_eep	;wreg free
 10760                           
 10761                           ;main.c: 2338: rv = Read_b_eep(0x7C);
 10762  000DE6  6A17               	clrf	?_Read_b_eep+1,c
 10763  000DE8  0E7C               	movlw	124
 10764  000DEA  6E16               	movwf	?_Read_b_eep,c
 10765  000DEC  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10766  000DF0  D383               	goto	L20
 10767  000DF2                     l12263:
 10768                           
 10769                           ; BSR set to: 0
 10770                           ;main.c: 2343: (Busy_eep(), Write_b_eep(0x7D,val));
 10771  000DF2  ECC7  F02B         	call	_Busy_eep	;wreg free
 10772  000DF6  6A0F               	clrf	?_Write_b_eep+1,c
 10773  000DF8  0E7D               	movlw	125
 10774  000DFA  6E0E               	movwf	?_Write_b_eep,c
 10775  000DFC  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10776  000E00  ECA3  F029         	call	_Write_b_eep	;wreg free
 10777                           
 10778                           ;main.c: 2344: rv = Read_b_eep(0x7D);
 10779  000E04  6A17               	clrf	?_Read_b_eep+1,c
 10780  000E06  0E7D               	movlw	125
 10781  000E08  6E16               	movwf	?_Read_b_eep,c
 10782  000E0A  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10783  000E0E  D374               	goto	L20
 10784  000E10                     l12269:
 10785                           
 10786                           ; BSR set to: 0
 10787                           ;main.c: 2349: (Busy_eep(), Write_b_eep(0x7E,val));
 10788  000E10  ECC7  F02B         	call	_Busy_eep	;wreg free
 10789  000E14  6A0F               	clrf	?_Write_b_eep+1,c
 10790  000E16  0E7E               	movlw	126
 10791  000E18  6E0E               	movwf	?_Write_b_eep,c
 10792  000E1A  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10793  000E1E  ECA3  F029         	call	_Write_b_eep	;wreg free
 10794                           
 10795                           ;main.c: 2350: rv = Read_b_eep(0x7E);
 10796  000E22  6A17               	clrf	?_Read_b_eep+1,c
 10797  000E24  0E7E               	movlw	126
 10798  000E26  6E16               	movwf	?_Read_b_eep,c
 10799  000E28  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10800  000E2C  D365               	goto	L20
 10801  000E2E                     l12275:
 10802                           
 10803                           ; BSR set to: 0
 10804                           ;main.c: 2359: (Busy_eep(), Write_b_eep(0x7F,val));
 10805  000E2E  ECC7  F02B         	call	_Busy_eep	;wreg free
 10806  000E32  6A0F               	clrf	?_Write_b_eep+1,c
 10807  000E34  0E7F               	movlw	127
 10808  000E36  6E0E               	movwf	?_Write_b_eep,c
 10809  000E38  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10810  000E3C  ECA3  F029         	call	_Write_b_eep	;wreg free
 10811                           
 10812                           ;main.c: 2360: rv = Read_b_eep(0x7F);
 10813  000E40  6A17               	clrf	?_Read_b_eep+1,c
 10814  000E42  0E7F               	movlw	127
 10815  000E44  6E16               	movwf	?_Read_b_eep,c
 10816  000E46  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10817  000E4A  D356               	goto	L20
 10818  000E4C                     l12281:
 10819                           
 10820                           ; BSR set to: 0
 10821                           ;main.c: 2365: (Busy_eep(), Write_b_eep(0x80,val));
 10822  000E4C  ECC7  F02B         	call	_Busy_eep	;wreg free
 10823  000E50  6A0F               	clrf	?_Write_b_eep+1,c
 10824  000E52  0E80               	movlw	128
 10825  000E54  6E0E               	movwf	?_Write_b_eep,c
 10826  000E56  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10827  000E5A  ECA3  F029         	call	_Write_b_eep	;wreg free
 10828                           
 10829                           ;main.c: 2366: rv = Read_b_eep(0x80);
 10830  000E5E  6A17               	clrf	?_Read_b_eep+1,c
 10831  000E60  0E80               	movlw	128
 10832  000E62  6E16               	movwf	?_Read_b_eep,c
 10833  000E64  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10834  000E68  D347               	goto	L20
 10835  000E6A                     l12287:
 10836                           
 10837                           ; BSR set to: 0
 10838                           ;main.c: 2371: (Busy_eep(), Write_b_eep(0x81,val));
 10839  000E6A  ECC7  F02B         	call	_Busy_eep	;wreg free
 10840  000E6E  6A0F               	clrf	?_Write_b_eep+1,c
 10841  000E70  0E81               	movlw	129
 10842  000E72  6E0E               	movwf	?_Write_b_eep,c
 10843  000E74  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10844  000E78  ECA3  F029         	call	_Write_b_eep	;wreg free
 10845                           
 10846                           ;main.c: 2372: rv = Read_b_eep(0x81);
 10847  000E7C  6A17               	clrf	?_Read_b_eep+1,c
 10848  000E7E  0E81               	movlw	129
 10849  000E80  6E16               	movwf	?_Read_b_eep,c
 10850  000E82  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10851  000E86  D338               	goto	L20
 10852  000E88                     l12293:
 10853                           
 10854                           ; BSR set to: 0
 10855                           ;main.c: 2377: (Busy_eep(), Write_b_eep(0x82,val));
 10856  000E88  ECC7  F02B         	call	_Busy_eep	;wreg free
 10857  000E8C  6A0F               	clrf	?_Write_b_eep+1,c
 10858  000E8E  0E82               	movlw	130
 10859  000E90  6E0E               	movwf	?_Write_b_eep,c
 10860  000E92  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10861  000E96  ECA3  F029         	call	_Write_b_eep	;wreg free
 10862                           
 10863                           ;main.c: 2378: rv = Read_b_eep(0x82);
 10864  000E9A  6A17               	clrf	?_Read_b_eep+1,c
 10865  000E9C  0E82               	movlw	130
 10866  000E9E  6E16               	movwf	?_Read_b_eep,c
 10867  000EA0  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10868  000EA4  D329               	goto	L20
 10869  000EA6                     l12299:
 10870                           
 10871                           ; BSR set to: 0
 10872                           ;main.c: 2383: (Busy_eep(), Write_b_eep(0x83,val));
 10873  000EA6  ECC7  F02B         	call	_Busy_eep	;wreg free
 10874  000EAA  6A0F               	clrf	?_Write_b_eep+1,c
 10875  000EAC  0E83               	movlw	131
 10876  000EAE  6E0E               	movwf	?_Write_b_eep,c
 10877  000EB0  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10878  000EB4  ECA3  F029         	call	_Write_b_eep	;wreg free
 10879                           
 10880                           ;main.c: 2384: rv = Read_b_eep(0x83);
 10881  000EB8  6A17               	clrf	?_Read_b_eep+1,c
 10882  000EBA  0E83               	movlw	131
 10883  000EBC  6E16               	movwf	?_Read_b_eep,c
 10884  000EBE  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10885  000EC2  D31A               	goto	L20
 10886  000EC4                     l12305:
 10887                           
 10888                           ; BSR set to: 0
 10889                           ;main.c: 2389: (Busy_eep(), Write_b_eep(0x84,val));
 10890  000EC4  ECC7  F02B         	call	_Busy_eep	;wreg free
 10891  000EC8  6A0F               	clrf	?_Write_b_eep+1,c
 10892  000ECA  0E84               	movlw	132
 10893  000ECC  6E0E               	movwf	?_Write_b_eep,c
 10894  000ECE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10895  000ED2  ECA3  F029         	call	_Write_b_eep	;wreg free
 10896                           
 10897                           ;main.c: 2390: rv = Read_b_eep(0x84);
 10898  000ED6  6A17               	clrf	?_Read_b_eep+1,c
 10899  000ED8  0E84               	movlw	132
 10900  000EDA  6E16               	movwf	?_Read_b_eep,c
 10901  000EDC  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10902  000EE0  D30B               	goto	L20
 10903  000EE2                     l12311:
 10904                           
 10905                           ; BSR set to: 0
 10906                           ;main.c: 2395: (Busy_eep(), Write_b_eep(0x85,val));
 10907  000EE2  ECC7  F02B         	call	_Busy_eep	;wreg free
 10908  000EE6  6A0F               	clrf	?_Write_b_eep+1,c
 10909  000EE8  0E85               	movlw	133
 10910  000EEA  6E0E               	movwf	?_Write_b_eep,c
 10911  000EEC  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10912  000EF0  ECA3  F029         	call	_Write_b_eep	;wreg free
 10913                           
 10914                           ;main.c: 2396: rv = Read_b_eep(0x85);
 10915  000EF4  6A17               	clrf	?_Read_b_eep+1,c
 10916  000EF6  0E85               	movlw	133
 10917  000EF8  6E16               	movwf	?_Read_b_eep,c
 10918  000EFA  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10919  000EFE  D2FC               	goto	L20
 10920  000F00                     l12317:
 10921                           
 10922                           ; BSR set to: 0
 10923                           ;main.c: 2401: (Busy_eep(), Write_b_eep(0x86,val));
 10924  000F00  ECC7  F02B         	call	_Busy_eep	;wreg free
 10925  000F04  6A0F               	clrf	?_Write_b_eep+1,c
 10926  000F06  0E86               	movlw	134
 10927  000F08  6E0E               	movwf	?_Write_b_eep,c
 10928  000F0A  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10929  000F0E  ECA3  F029         	call	_Write_b_eep	;wreg free
 10930                           
 10931                           ;main.c: 2402: rv = Read_b_eep(0x86);
 10932  000F12  6A17               	clrf	?_Read_b_eep+1,c
 10933  000F14  0E86               	movlw	134
 10934  000F16  6E16               	movwf	?_Read_b_eep,c
 10935  000F18  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10936  000F1C  D2ED               	goto	L20
 10937  000F1E                     l12323:
 10938                           
 10939                           ; BSR set to: 0
 10940                           ;main.c: 2407: (Busy_eep(), Write_b_eep(0x87,val));
 10941  000F1E  ECC7  F02B         	call	_Busy_eep	;wreg free
 10942  000F22  6A0F               	clrf	?_Write_b_eep+1,c
 10943  000F24  0E87               	movlw	135
 10944  000F26  6E0E               	movwf	?_Write_b_eep,c
 10945  000F28  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10946  000F2C  ECA3  F029         	call	_Write_b_eep	;wreg free
 10947                           
 10948                           ;main.c: 2408: rv = Read_b_eep(0x87);
 10949  000F30  6A17               	clrf	?_Read_b_eep+1,c
 10950  000F32  0E87               	movlw	135
 10951  000F34  6E16               	movwf	?_Read_b_eep,c
 10952  000F36  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10953  000F3A  D2DE               	goto	L20
 10954  000F3C                     l12329:
 10955                           
 10956                           ; BSR set to: 0
 10957                           ;main.c: 2413: (Busy_eep(), Write_b_eep(0x88,val));
 10958  000F3C  ECC7  F02B         	call	_Busy_eep	;wreg free
 10959  000F40  6A0F               	clrf	?_Write_b_eep+1,c
 10960  000F42  0E88               	movlw	136
 10961  000F44  6E0E               	movwf	?_Write_b_eep,c
 10962  000F46  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10963  000F4A  ECA3  F029         	call	_Write_b_eep	;wreg free
 10964                           
 10965                           ;main.c: 2414: rv = Read_b_eep(0x88);
 10966  000F4E  6A17               	clrf	?_Read_b_eep+1,c
 10967  000F50  0E88               	movlw	136
 10968  000F52  6E16               	movwf	?_Read_b_eep,c
 10969  000F54  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10970  000F58  D2CF               	goto	L20
 10971  000F5A                     l12335:
 10972                           
 10973                           ; BSR set to: 0
 10974                           ;main.c: 2419: (Busy_eep(), Write_b_eep(0x89,val));
 10975  000F5A  ECC7  F02B         	call	_Busy_eep	;wreg free
 10976  000F5E  6A0F               	clrf	?_Write_b_eep+1,c
 10977  000F60  0E89               	movlw	137
 10978  000F62  6E0E               	movwf	?_Write_b_eep,c
 10979  000F64  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10980  000F68  ECA3  F029         	call	_Write_b_eep	;wreg free
 10981                           
 10982                           ;main.c: 2420: rv = Read_b_eep(0x89);
 10983  000F6C  6A17               	clrf	?_Read_b_eep+1,c
 10984  000F6E  0E89               	movlw	137
 10985  000F70  6E16               	movwf	?_Read_b_eep,c
 10986  000F72  EC8F  F02B         	call	_Read_b_eep	;wreg free
 10987  000F76  D2C0               	goto	L20
 10988  000F78                     l12341:
 10989                           
 10990                           ; BSR set to: 0
 10991                           ;main.c: 2425: (Busy_eep(), Write_b_eep(0x8A,val));
 10992  000F78  ECC7  F02B         	call	_Busy_eep	;wreg free
 10993  000F7C  6A0F               	clrf	?_Write_b_eep+1,c
 10994  000F7E  0E8A               	movlw	138
 10995  000F80  6E0E               	movwf	?_Write_b_eep,c
 10996  000F82  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10997  000F86  ECA3  F029         	call	_Write_b_eep	;wreg free
 10998                           
 10999                           ;main.c: 2426: rv = Read_b_eep(0x8A);
 11000  000F8A  6A17               	clrf	?_Read_b_eep+1,c
 11001  000F8C  0E8A               	movlw	138
 11002  000F8E  6E16               	movwf	?_Read_b_eep,c
 11003  000F90  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11004  000F94  D2B1               	goto	L20
 11005  000F96                     l12347:
 11006                           
 11007                           ; BSR set to: 0
 11008                           ;main.c: 2435: (Busy_eep(), Write_b_eep(0x8B,val));
 11009  000F96  ECC7  F02B         	call	_Busy_eep	;wreg free
 11010  000F9A  6A0F               	clrf	?_Write_b_eep+1,c
 11011  000F9C  0E8B               	movlw	139
 11012  000F9E  6E0E               	movwf	?_Write_b_eep,c
 11013  000FA0  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11014  000FA4  ECA3  F029         	call	_Write_b_eep	;wreg free
 11015                           
 11016                           ;main.c: 2436: rv = Read_b_eep(0x8B);
 11017  000FA8  6A17               	clrf	?_Read_b_eep+1,c
 11018  000FAA  0E8B               	movlw	139
 11019  000FAC  6E16               	movwf	?_Read_b_eep,c
 11020  000FAE  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11021  000FB2  D2A2               	goto	L20
 11022  000FB4                     l12353:
 11023                           
 11024                           ; BSR set to: 0
 11025                           ;main.c: 2441: (Busy_eep(), Write_b_eep(0x8C,val));
 11026  000FB4  ECC7  F02B         	call	_Busy_eep	;wreg free
 11027  000FB8  6A0F               	clrf	?_Write_b_eep+1,c
 11028  000FBA  0E8C               	movlw	140
 11029  000FBC  6E0E               	movwf	?_Write_b_eep,c
 11030  000FBE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11031  000FC2  ECA3  F029         	call	_Write_b_eep	;wreg free
 11032                           
 11033                           ;main.c: 2442: rv = Read_b_eep(0x8C);
 11034  000FC6  6A17               	clrf	?_Read_b_eep+1,c
 11035  000FC8  0E8C               	movlw	140
 11036  000FCA  6E16               	movwf	?_Read_b_eep,c
 11037  000FCC  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11038  000FD0  D293               	goto	L20
 11039  000FD2                     l12359:
 11040                           
 11041                           ; BSR set to: 0
 11042                           ;main.c: 2447: (Busy_eep(), Write_b_eep(0x8D,val));
 11043  000FD2  ECC7  F02B         	call	_Busy_eep	;wreg free
 11044  000FD6  6A0F               	clrf	?_Write_b_eep+1,c
 11045  000FD8  0E8D               	movlw	141
 11046  000FDA  6E0E               	movwf	?_Write_b_eep,c
 11047  000FDC  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11048  000FE0  ECA3  F029         	call	_Write_b_eep	;wreg free
 11049                           
 11050                           ;main.c: 2448: rv = Read_b_eep(0x8D);
 11051  000FE4  6A17               	clrf	?_Read_b_eep+1,c
 11052  000FE6  0E8D               	movlw	141
 11053  000FE8  6E16               	movwf	?_Read_b_eep,c
 11054  000FEA  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11055  000FEE  D284               	goto	L20
 11056  000FF0                     l12365:
 11057                           
 11058                           ; BSR set to: 0
 11059                           ;main.c: 2453: (Busy_eep(), Write_b_eep(0x8E,val));
 11060  000FF0  ECC7  F02B         	call	_Busy_eep	;wreg free
 11061  000FF4  6A0F               	clrf	?_Write_b_eep+1,c
 11062  000FF6  0E8E               	movlw	142
 11063  000FF8  6E0E               	movwf	?_Write_b_eep,c
 11064  000FFA  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11065  000FFE  ECA3  F029         	call	_Write_b_eep	;wreg free
 11066                           
 11067                           ;main.c: 2454: rv = Read_b_eep(0x8E);
 11068  001002  6A17               	clrf	?_Read_b_eep+1,c
 11069  001004  0E8E               	movlw	142
 11070  001006  6E16               	movwf	?_Read_b_eep,c
 11071  001008  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11072  00100C  D275               	goto	L20
 11073  00100E                     l12371:
 11074                           
 11075                           ; BSR set to: 0
 11076                           ;main.c: 2459: (Busy_eep(), Write_b_eep(0x8F,val));
 11077  00100E  ECC7  F02B         	call	_Busy_eep	;wreg free
 11078  001012  6A0F               	clrf	?_Write_b_eep+1,c
 11079  001014  0E8F               	movlw	143
 11080  001016  6E0E               	movwf	?_Write_b_eep,c
 11081  001018  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11082  00101C  ECA3  F029         	call	_Write_b_eep	;wreg free
 11083                           
 11084                           ;main.c: 2460: rv = Read_b_eep(0x8F);
 11085  001020  6A17               	clrf	?_Read_b_eep+1,c
 11086  001022  0E8F               	movlw	143
 11087  001024  6E16               	movwf	?_Read_b_eep,c
 11088  001026  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11089  00102A  D266               	goto	L20
 11090  00102C                     l12377:
 11091                           
 11092                           ; BSR set to: 0
 11093                           ;main.c: 2465: (Busy_eep(), Write_b_eep(0x90,val));
 11094  00102C  ECC7  F02B         	call	_Busy_eep	;wreg free
 11095  001030  6A0F               	clrf	?_Write_b_eep+1,c
 11096  001032  0E90               	movlw	144
 11097  001034  6E0E               	movwf	?_Write_b_eep,c
 11098  001036  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11099  00103A  ECA3  F029         	call	_Write_b_eep	;wreg free
 11100                           
 11101                           ;main.c: 2466: rv = Read_b_eep(0x90);
 11102  00103E  6A17               	clrf	?_Read_b_eep+1,c
 11103  001040  0E90               	movlw	144
 11104  001042  6E16               	movwf	?_Read_b_eep,c
 11105  001044  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11106  001048  D257               	goto	L20
 11107  00104A                     l12383:
 11108                           
 11109                           ; BSR set to: 0
 11110                           ;main.c: 2471: (Busy_eep(), Write_b_eep(0x91,val));
 11111  00104A  ECC7  F02B         	call	_Busy_eep	;wreg free
 11112  00104E  6A0F               	clrf	?_Write_b_eep+1,c
 11113  001050  0E91               	movlw	145
 11114  001052  6E0E               	movwf	?_Write_b_eep,c
 11115  001054  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11116  001058  ECA3  F029         	call	_Write_b_eep	;wreg free
 11117                           
 11118                           ;main.c: 2472: rv = Read_b_eep(0x91);
 11119  00105C  6A17               	clrf	?_Read_b_eep+1,c
 11120  00105E  0E91               	movlw	145
 11121  001060  6E16               	movwf	?_Read_b_eep,c
 11122  001062  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11123  001066  D248               	goto	L20
 11124  001068                     l12389:
 11125                           
 11126                           ; BSR set to: 0
 11127                           ;main.c: 2477: (Busy_eep(), Write_b_eep(0x92,val));
 11128  001068  ECC7  F02B         	call	_Busy_eep	;wreg free
 11129  00106C  6A0F               	clrf	?_Write_b_eep+1,c
 11130  00106E  0E92               	movlw	146
 11131  001070  6E0E               	movwf	?_Write_b_eep,c
 11132  001072  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11133  001076  ECA3  F029         	call	_Write_b_eep	;wreg free
 11134                           
 11135                           ;main.c: 2478: rv = Read_b_eep(0x92);
 11136  00107A  6A17               	clrf	?_Read_b_eep+1,c
 11137  00107C  0E92               	movlw	146
 11138  00107E  6E16               	movwf	?_Read_b_eep,c
 11139  001080  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11140  001084  D239               	goto	L20
 11141  001086                     l12395:
 11142                           
 11143                           ; BSR set to: 0
 11144                           ;main.c: 2483: (Busy_eep(), Write_b_eep(0x93,val));
 11145  001086  ECC7  F02B         	call	_Busy_eep	;wreg free
 11146  00108A  6A0F               	clrf	?_Write_b_eep+1,c
 11147  00108C  0E93               	movlw	147
 11148  00108E  6E0E               	movwf	?_Write_b_eep,c
 11149  001090  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11150  001094  ECA3  F029         	call	_Write_b_eep	;wreg free
 11151                           
 11152                           ;main.c: 2484: rv = Read_b_eep(0x93);
 11153  001098  6A17               	clrf	?_Read_b_eep+1,c
 11154  00109A  0E93               	movlw	147
 11155  00109C  6E16               	movwf	?_Read_b_eep,c
 11156  00109E  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11157  0010A2  D22A               	goto	L20
 11158  0010A4                     l12401:
 11159                           
 11160                           ; BSR set to: 0
 11161                           ;main.c: 2489: (Busy_eep(), Write_b_eep(0x94,val));
 11162  0010A4  ECC7  F02B         	call	_Busy_eep	;wreg free
 11163  0010A8  6A0F               	clrf	?_Write_b_eep+1,c
 11164  0010AA  0E94               	movlw	148
 11165  0010AC  6E0E               	movwf	?_Write_b_eep,c
 11166  0010AE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11167  0010B2  ECA3  F029         	call	_Write_b_eep	;wreg free
 11168                           
 11169                           ;main.c: 2490: rv = Read_b_eep(0x94);
 11170  0010B6  6A17               	clrf	?_Read_b_eep+1,c
 11171  0010B8  0E94               	movlw	148
 11172  0010BA  6E16               	movwf	?_Read_b_eep,c
 11173  0010BC  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11174  0010C0  D21B               	goto	L20
 11175  0010C2                     l12407:
 11176                           
 11177                           ; BSR set to: 0
 11178                           ;main.c: 2495: (Busy_eep(), Write_b_eep(0x95,val));
 11179  0010C2  ECC7  F02B         	call	_Busy_eep	;wreg free
 11180  0010C6  6A0F               	clrf	?_Write_b_eep+1,c
 11181  0010C8  0E95               	movlw	149
 11182  0010CA  6E0E               	movwf	?_Write_b_eep,c
 11183  0010CC  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11184  0010D0  ECA3  F029         	call	_Write_b_eep	;wreg free
 11185                           
 11186                           ;main.c: 2496: rv = Read_b_eep(0x95);
 11187  0010D4  6A17               	clrf	?_Read_b_eep+1,c
 11188  0010D6  0E95               	movlw	149
 11189  0010D8  6E16               	movwf	?_Read_b_eep,c
 11190  0010DA  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11191  0010DE  D20C               	goto	L20
 11192  0010E0                     l12413:
 11193                           
 11194                           ; BSR set to: 0
 11195                           ;main.c: 2501: (Busy_eep(), Write_b_eep(0x96,val));
 11196  0010E0  ECC7  F02B         	call	_Busy_eep	;wreg free
 11197  0010E4  6A0F               	clrf	?_Write_b_eep+1,c
 11198  0010E6  0E96               	movlw	150
 11199  0010E8  6E0E               	movwf	?_Write_b_eep,c
 11200  0010EA  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11201  0010EE  ECA3  F029         	call	_Write_b_eep	;wreg free
 11202                           
 11203                           ;main.c: 2502: rv = Read_b_eep(0x96);
 11204  0010F2  6A17               	clrf	?_Read_b_eep+1,c
 11205  0010F4  0E96               	movlw	150
 11206  0010F6  6E16               	movwf	?_Read_b_eep,c
 11207  0010F8  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11208  0010FC  D1FD               	goto	L20
 11209  0010FE                     l12419:
 11210                           
 11211                           ; BSR set to: 0
 11212                           ;main.c: 2511: (Busy_eep(), Write_b_eep(0x97,val));
 11213  0010FE  ECC7  F02B         	call	_Busy_eep	;wreg free
 11214  001102  6A0F               	clrf	?_Write_b_eep+1,c
 11215  001104  0E97               	movlw	151
 11216  001106  6E0E               	movwf	?_Write_b_eep,c
 11217  001108  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11218  00110C  ECA3  F029         	call	_Write_b_eep	;wreg free
 11219                           
 11220                           ;main.c: 2512: rv = Read_b_eep(0x97);
 11221  001110  6A17               	clrf	?_Read_b_eep+1,c
 11222  001112  0E97               	movlw	151
 11223  001114  6E16               	movwf	?_Read_b_eep,c
 11224  001116  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11225  00111A  D1EE               	goto	L20
 11226  00111C                     l12425:
 11227                           
 11228                           ; BSR set to: 0
 11229                           ;main.c: 2517: (Busy_eep(), Write_b_eep(0x98,val));
 11230  00111C  ECC7  F02B         	call	_Busy_eep	;wreg free
 11231  001120  6A0F               	clrf	?_Write_b_eep+1,c
 11232  001122  0E98               	movlw	152
 11233  001124  6E0E               	movwf	?_Write_b_eep,c
 11234  001126  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11235  00112A  ECA3  F029         	call	_Write_b_eep	;wreg free
 11236                           
 11237                           ;main.c: 2518: rv = Read_b_eep(0x98);
 11238  00112E  6A17               	clrf	?_Read_b_eep+1,c
 11239  001130  0E98               	movlw	152
 11240  001132  6E16               	movwf	?_Read_b_eep,c
 11241  001134  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11242  001138  D1DF               	goto	L20
 11243  00113A                     l12431:
 11244                           
 11245                           ; BSR set to: 0
 11246                           ;main.c: 2523: (Busy_eep(), Write_b_eep(0x99,val));
 11247  00113A  ECC7  F02B         	call	_Busy_eep	;wreg free
 11248  00113E  6A0F               	clrf	?_Write_b_eep+1,c
 11249  001140  0E99               	movlw	153
 11250  001142  6E0E               	movwf	?_Write_b_eep,c
 11251  001144  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11252  001148  ECA3  F029         	call	_Write_b_eep	;wreg free
 11253  00114C  6A17               	clrf	?_Read_b_eep+1,c
 11254  00114E  0E99               	movlw	153
 11255  001150  6E16               	movwf	?_Read_b_eep,c
 11256  001152  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11257  001156                     l520:
 11258                           
 11259                           ;main.c: 2528: (Busy_eep(), Write_b_eep(0x9A,val));
 11260  001156  ECC7  F02B         	call	_Busy_eep	;wreg free
 11261  00115A  6A0F               	clrf	?_Write_b_eep+1,c
 11262  00115C  0E9A               	movlw	154
 11263  00115E  6E0E               	movwf	?_Write_b_eep,c
 11264  001160  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11265  001164  ECA3  F029         	call	_Write_b_eep	;wreg free
 11266                           
 11267                           ;main.c: 2529: rv = Read_b_eep(0x9A);
 11268  001168  6A17               	clrf	?_Read_b_eep+1,c
 11269  00116A  0E9A               	movlw	154
 11270  00116C  6E16               	movwf	?_Read_b_eep,c
 11271  00116E  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11272  001172  D1C2               	goto	L20
 11273  001174                     l12441:
 11274                           
 11275                           ; BSR set to: 0
 11276                           ;main.c: 2534: (Busy_eep(), Write_b_eep(0x9B,val));
 11277  001174  ECC7  F02B         	call	_Busy_eep	;wreg free
 11278  001178  6A0F               	clrf	?_Write_b_eep+1,c
 11279  00117A  0E9B               	movlw	155
 11280  00117C  6E0E               	movwf	?_Write_b_eep,c
 11281  00117E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11282  001182  ECA3  F029         	call	_Write_b_eep	;wreg free
 11283                           
 11284                           ;main.c: 2535: rv = Read_b_eep(0x9B);
 11285  001186  6A17               	clrf	?_Read_b_eep+1,c
 11286  001188  0E9B               	movlw	155
 11287  00118A  6E16               	movwf	?_Read_b_eep,c
 11288  00118C  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11289  001190  D1B3               	goto	L20
 11290  001192                     l12447:
 11291                           
 11292                           ; BSR set to: 0
 11293                           ;main.c: 2540: (Busy_eep(), Write_b_eep(0x9C,val));
 11294  001192  ECC7  F02B         	call	_Busy_eep	;wreg free
 11295  001196  6A0F               	clrf	?_Write_b_eep+1,c
 11296  001198  0E9C               	movlw	156
 11297  00119A  6E0E               	movwf	?_Write_b_eep,c
 11298  00119C  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11299  0011A0  ECA3  F029         	call	_Write_b_eep	;wreg free
 11300                           
 11301                           ;main.c: 2541: rv = Read_b_eep(0x9C);
 11302  0011A4  6A17               	clrf	?_Read_b_eep+1,c
 11303  0011A6  0E9C               	movlw	156
 11304  0011A8  6E16               	movwf	?_Read_b_eep,c
 11305  0011AA  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11306  0011AE  D1A4               	goto	L20
 11307  0011B0                     l523:
 11308                           
 11309                           ; BSR set to: 0
 11310                           ;main.c: 2546: rv = 0;
 11311  0011B0  6A24               	clrf	vscp_writeAppReg@rv,c
 11312                           
 11313                           ;main.c: 2547: break;
 11314  0011B2  D1A3               	goto	l12503
 11315  0011B4                     l12453:
 11316                           
 11317                           ; BSR set to: 0
 11318                           ;main.c: 2556: (Busy_eep(), Write_b_eep(0xF2,val));
 11319  0011B4  ECC7  F02B         	call	_Busy_eep	;wreg free
 11320  0011B8  6A0F               	clrf	?_Write_b_eep+1,c
 11321  0011BA  0EF2               	movlw	242
 11322  0011BC  6E0E               	movwf	?_Write_b_eep,c
 11323  0011BE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11324  0011C2  ECA3  F029         	call	_Write_b_eep	;wreg free
 11325                           
 11326                           ;main.c: 2557: rv = Read_b_eep(0xF2);
 11327  0011C6  6A17               	clrf	?_Read_b_eep+1,c
 11328  0011C8  0EF2               	movlw	242
 11329  0011CA  6E16               	movwf	?_Read_b_eep,c
 11330  0011CC  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11331  0011D0  D193               	goto	L20
 11332  0011D2                     l12459:
 11333                           
 11334                           ; BSR set to: 0
 11335                           ;main.c: 2562: (Busy_eep(), Write_b_eep(0xF3,val));
 11336  0011D2  ECC7  F02B         	call	_Busy_eep	;wreg free
 11337  0011D6  6A0F               	clrf	?_Write_b_eep+1,c
 11338  0011D8  0EF3               	movlw	243
 11339  0011DA  6E0E               	movwf	?_Write_b_eep,c
 11340  0011DC  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11341  0011E0  ECA3  F029         	call	_Write_b_eep	;wreg free
 11342                           
 11343                           ;main.c: 2563: rv = Read_b_eep(0xF3);
 11344  0011E4  6A17               	clrf	?_Read_b_eep+1,c
 11345  0011E6  0EF3               	movlw	243
 11346  0011E8  6E16               	movwf	?_Read_b_eep,c
 11347  0011EA  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11348  0011EE  D184               	goto	L20
 11349  0011F0                     l12465:
 11350                           
 11351                           ; BSR set to: 0
 11352                           ;main.c: 2567: rv = ~val;
 11353  0011F0  1C21               	comf	vscp_writeAppReg@val,w,c
 11354  0011F2  D182               	goto	L20
 11355  0011F4                     l12469:
 11356                           
 11357                           ; BSR set to: 0
 11358  0011F4  5023               	movf	vscp_writeAppReg@reg,w,c
 11359                           
 11360                           ; Switch size 1, requested type "space"
 11361                           ; Number of cases is 96, Range of values is 0 to 119
 11362                           ; switch strategies available:
 11363                           ; Name         Instructions Cycles
 11364                           ; simple_byte          289   145 (average)
 11365                           ;	Chosen strategy is simple_byte
 11366  0011F6  E102 EF42  F003    	bz	l11903
 11367  0011FC  0A01               	xorlw	1	; case 1
 11368  0011FE  E102 EF52  F003    	bz	l11909
 11369  001204  0A03               	xorlw	3	; case 2
 11370  001206  E102 EF62  F003    	bz	l11915
 11371  00120C  0A01               	xorlw	1	; case 3
 11372  00120E  E102 EF72  F003    	bz	l11921
 11373  001214  0A07               	xorlw	7	; case 4
 11374  001216  E102 EF82  F003    	bz	l11927
 11375  00121C  0A01               	xorlw	1	; case 5
 11376  00121E  E102 EF92  F003    	bz	l11933
 11377  001224  0A03               	xorlw	3	; case 6
 11378  001226  E102 EFA2  F003    	bz	l11939
 11379  00122C  0A01               	xorlw	1	; case 7
 11380  00122E  E102 EFB2  F003    	bz	l11945
 11381  001234  0A13               	xorlw	19	; case 20
 11382  001236  E102 EFC2  F003    	bz	l11951
 11383  00123C  0A01               	xorlw	1	; case 21
 11384  00123E  E102 EFD2  F003    	bz	l11957
 11385  001244  0A03               	xorlw	3	; case 22
 11386  001246  E102 EFE2  F003    	bz	l11963
 11387  00124C  0A01               	xorlw	1	; case 23
 11388  00124E  E102 EFF2  F003    	bz	l11969
 11389  001254  0A0F               	xorlw	15	; case 24
 11390  001256  E102 EF02  F004    	bz	l11975
 11391  00125C  0A01               	xorlw	1	; case 25
 11392  00125E  E102 EF12  F004    	bz	l11981
 11393  001264  0A3F               	xorlw	63	; case 38
 11394  001266  E102 EF22  F004    	bz	l11987
 11395  00126C  0A01               	xorlw	1	; case 39
 11396  00126E  E102 EF32  F004    	bz	l11993
 11397  001274  0A0F               	xorlw	15	; case 40
 11398  001276  E102 EF42  F004    	bz	l11999
 11399  00127C  0A01               	xorlw	1	; case 41
 11400  00127E  E102 EF52  F004    	bz	l12005
 11401  001284  0A03               	xorlw	3	; case 42
 11402  001286  E102 EF62  F004    	bz	l12011
 11403  00128C  0A01               	xorlw	1	; case 43
 11404  00128E  E102 EF72  F004    	bz	l12017
 11405  001294  0A07               	xorlw	7	; case 44
 11406  001296  E102 EF82  F004    	bz	l12023
 11407  00129C  0A01               	xorlw	1	; case 45
 11408  00129E  E102 EF92  F004    	bz	l12029
 11409  0012A4  0A03               	xorlw	3	; case 46
 11410  0012A6  E102 EFA2  F004    	bz	l12035
 11411  0012AC  0A01               	xorlw	1	; case 47
 11412  0012AE  E102 EFB2  F004    	bz	l12041
 11413  0012B4  0A1F               	xorlw	31	; case 48
 11414  0012B6  E102 EFC2  F004    	bz	l12047
 11415  0012BC  0A01               	xorlw	1	; case 49
 11416  0012BE  E102 EFD2  F004    	bz	l12053
 11417  0012C4  0A03               	xorlw	3	; case 50
 11418  0012C6  E102 EFE2  F004    	bz	l12059
 11419  0012CC  0A01               	xorlw	1	; case 51
 11420  0012CE  E102 EFF2  F004    	bz	l12065
 11421  0012D4  0A07               	xorlw	7	; case 52
 11422  0012D6  E102 EF02  F005    	bz	l12071
 11423  0012DC  0A01               	xorlw	1	; case 53
 11424  0012DE  E102 EF12  F005    	bz	l12077
 11425  0012E4  0A03               	xorlw	3	; case 54
 11426  0012E6  E102 EF22  F005    	bz	l12083
 11427  0012EC  0A01               	xorlw	1	; case 55
 11428  0012EE  E102 EF32  F005    	bz	l12089
 11429  0012F4  0A0F               	xorlw	15	; case 56
 11430  0012F6  E102 EF42  F005    	bz	l12095
 11431  0012FC  0A01               	xorlw	1	; case 57
 11432  0012FE  E102 EF52  F005    	bz	l12101
 11433  001304  0A03               	xorlw	3	; case 58
 11434  001306  E102 EF62  F005    	bz	l12107
 11435  00130C  0A01               	xorlw	1	; case 59
 11436  00130E  E102 EF72  F005    	bz	l12113
 11437  001314  0A07               	xorlw	7	; case 60
 11438  001316  E102 EF82  F005    	bz	l12119
 11439  00131C  0A01               	xorlw	1	; case 61
 11440  00131E  E101 D401          	bz	l12125
 11441  001322  0A03               	xorlw	3	; case 62
 11442  001324  E101 D40E          	bz	l12131
 11443  001328  0A01               	xorlw	1	; case 63
 11444  00132A  E101 D41B          	bz	l12137
 11445  00132E  0A7F               	xorlw	127	; case 64
 11446  001330  E101 D428          	bz	l12143
 11447  001334  0A01               	xorlw	1	; case 65
 11448  001336  E101 D435          	bz	l12149
 11449  00133A  0A03               	xorlw	3	; case 66
 11450  00133C  E101 D442          	bz	l12155
 11451  001340  0A01               	xorlw	1	; case 67
 11452  001342  E101 D44F          	bz	l12161
 11453  001346  0A07               	xorlw	7	; case 68
 11454  001348  E101 D45C          	bz	l12167
 11455  00134C  0A01               	xorlw	1	; case 69
 11456  00134E  E101 D469          	bz	l12173
 11457  001352  0A03               	xorlw	3	; case 70
 11458  001354  E101 D476          	bz	l12179
 11459  001358  0A01               	xorlw	1	; case 71
 11460  00135A  E101 D483          	bz	l12185
 11461  00135E  0A0F               	xorlw	15	; case 72
 11462  001360  E101 D490          	bz	l12191
 11463  001364  0A01               	xorlw	1	; case 73
 11464  001366  E101 D49D          	bz	l12197
 11465  00136A  0A03               	xorlw	3	; case 74
 11466  00136C  E101 D4AA          	bz	l12203
 11467  001370  0A01               	xorlw	1	; case 75
 11468  001372  E101 D4B7          	bz	l12209
 11469  001376  0A07               	xorlw	7	; case 76
 11470  001378  E101 D4C3          	bz	l12215
 11471  00137C  0A01               	xorlw	1	; case 77
 11472  00137E  E101 D4CF          	bz	l12221
 11473  001382  0A03               	xorlw	3	; case 78
 11474  001384  E101 D4DB          	bz	l12227
 11475  001388  0A01               	xorlw	1	; case 79
 11476  00138A  E101 D4E7          	bz	l12233
 11477  00138E  0A1F               	xorlw	31	; case 80
 11478  001390  E101 D4F3          	bz	l12239
 11479  001394  0A01               	xorlw	1	; case 81
 11480  001396  E101 D4FF          	bz	l12245
 11481  00139A  0A03               	xorlw	3	; case 82
 11482  00139C  E101 D50B          	bz	l12251
 11483  0013A0  0A01               	xorlw	1	; case 83
 11484  0013A2  E101 D517          	bz	l12257
 11485  0013A6  0A07               	xorlw	7	; case 84
 11486  0013A8  E101 D523          	bz	l12263
 11487  0013AC  0A01               	xorlw	1	; case 85
 11488  0013AE  E101 D52F          	bz	l12269
 11489  0013B2  0A03               	xorlw	3	; case 86
 11490  0013B4  E101 D53B          	bz	l12275
 11491  0013B8  0A01               	xorlw	1	; case 87
 11492  0013BA  E101 D547          	bz	l12281
 11493  0013BE  0A0F               	xorlw	15	; case 88
 11494  0013C0  E101 D553          	bz	l12287
 11495  0013C4  0A01               	xorlw	1	; case 89
 11496  0013C6  E101 D55F          	bz	l12293
 11497  0013CA  0A03               	xorlw	3	; case 90
 11498  0013CC  E101 D56B          	bz	l12299
 11499  0013D0  0A01               	xorlw	1	; case 91
 11500  0013D2  E101 D577          	bz	l12305
 11501  0013D6  0A07               	xorlw	7	; case 92
 11502  0013D8  E101 D583          	bz	l12311
 11503  0013DC  0A01               	xorlw	1	; case 93
 11504  0013DE  E101 D58F          	bz	l12317
 11505  0013E2  0A03               	xorlw	3	; case 94
 11506  0013E4  E101 D59B          	bz	l12323
 11507  0013E8  0A01               	xorlw	1	; case 95
 11508  0013EA  E101 D5A7          	bz	l12329
 11509  0013EE  0A3F               	xorlw	63	; case 96
 11510  0013F0  E101 D5B3          	bz	l12335
 11511  0013F4  0A01               	xorlw	1	; case 97
 11512  0013F6  E101 D5BF          	bz	l12341
 11513  0013FA  0A03               	xorlw	3	; case 98
 11514  0013FC  E101 D5CB          	bz	l12347
 11515  001400  0A01               	xorlw	1	; case 99
 11516  001402  E101 D5D7          	bz	l12353
 11517  001406  0A07               	xorlw	7	; case 100
 11518  001408  E101 D5E3          	bz	l12359
 11519  00140C  0A01               	xorlw	1	; case 101
 11520  00140E  E101 D5EF          	bz	l12365
 11521  001412  0A03               	xorlw	3	; case 102
 11522  001414  E101 D5FB          	bz	l12371
 11523  001418  0A01               	xorlw	1	; case 103
 11524  00141A  E101 D607          	bz	l12377
 11525  00141E  0A0F               	xorlw	15	; case 104
 11526  001420  E101 D613          	bz	l12383
 11527  001424  0A01               	xorlw	1	; case 105
 11528  001426  E101 D61F          	bz	l12389
 11529  00142A  0A03               	xorlw	3	; case 106
 11530  00142C  E101 D62B          	bz	l12395
 11531  001430  0A01               	xorlw	1	; case 107
 11532  001432  E101 D637          	bz	l12401
 11533  001436  0A07               	xorlw	7	; case 108
 11534  001438  E101 D643          	bz	l12407
 11535  00143C  0A01               	xorlw	1	; case 109
 11536  00143E  E101 D64F          	bz	l12413
 11537  001442  0A03               	xorlw	3	; case 110
 11538  001444  E101 D65B          	bz	l12419
 11539  001448  0A01               	xorlw	1	; case 111
 11540  00144A  E101 D667          	bz	l12425
 11541  00144E  0A1F               	xorlw	31	; case 112
 11542  001450  E101 D673          	bz	l12431
 11543  001454  0A01               	xorlw	1	; case 113
 11544  001456  E101 D67E          	bz	l520
 11545  00145A  0A03               	xorlw	3	; case 114
 11546  00145C  E101 D68A          	bz	l12441
 11547  001460  0A01               	xorlw	1	; case 115
 11548  001462  E101 D696          	bz	l12447
 11549  001466  0A07               	xorlw	7	; case 116
 11550  001468  E101 D6A2          	bz	l523
 11551  00146C  0A01               	xorlw	1	; case 117
 11552  00146E  E101 D69F          	bz	l523
 11553  001472  0A03               	xorlw	3	; case 118
 11554  001474  E101 D69E          	bz	l12453
 11555  001478  0A01               	xorlw	1	; case 119
 11556  00147A  E101 D6AA          	bz	l12459
 11557  00147E  D6B8               	goto	l12465
 11558  001480                     l12471:
 11559                           
 11560                           ; BSR set to: 0
 11561                           ;main.c: 2571: else if (1 == vscp_page_select) {
 11562  001480  0446               	decf	_vscp_page_select,w,c
 11563  001482  1047               	iorwf	_vscp_page_select+1,w,c
 11564  001484  E13A               	bnz	l12503
 11565                           
 11566                           ; BSR set to: 0
 11567                           ;main.c: 2574: if (reg < 72) {
 11568  001486  0E48               	movlw	72
 11569  001488  6023               	cpfslt	vscp_writeAppReg@reg,c
 11570  00148A  D012               	goto	l12483
 11571                           
 11572                           ; BSR set to: 0
 11573                           ;main.c: 2575: (Busy_eep(), Write_b_eep(0xAA + reg,val));
 11574  00148C  ECC7  F02B         	call	_Busy_eep	;wreg free
 11575  001490  0EAA               	movlw	170
 11576  001492  D835               	call	PL60	;call to abstracted procedure
 11577  001494  ECA3  F029         	call	_Write_b_eep	;wreg free
 11578                           
 11579                           ;main.c: 2576: rv = Read_b_eep(0xAA + reg);
 11580  001498  0EAA               	movlw	170
 11581  00149A  2423               	addwf	vscp_writeAppReg@reg,w,c
 11582  00149C  6E16               	movwf	?_Read_b_eep,c
 11583  00149E  6A17               	clrf	?_Read_b_eep+1,c
 11584  0014A0  0E00               	movlw	0
 11585  0014A2  2217               	addwfc	?_Read_b_eep+1,f,c
 11586  0014A4  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11587  0014A8  6E24               	movwf	vscp_writeAppReg@rv,c
 11588                           
 11589                           ;main.c: 2577: writeCoeffs2Ram();
 11590  0014AA  ECD9  F024         	call	_writeCoeffs2Ram	;wreg free
 11591                           
 11592                           ;main.c: 2578: }
 11593  0014AE  D025               	goto	l12503
 11594  0014B0                     l12483:
 11595                           
 11596                           ; BSR set to: 0
 11597                           ;main.c: 2580: else if (reg < 84) {
 11598  0014B0  0E54               	movlw	84
 11599  0014B2  6023               	cpfslt	vscp_writeAppReg@reg,c
 11600  0014B4  D010               	goto	l12495
 11601                           
 11602                           ; BSR set to: 0
 11603                           ;main.c: 2582: uint8_t pos = reg - 72;
 11604  0014B6  5023               	movf	vscp_writeAppReg@reg,w,c
 11605  0014B8  0FB8               	addlw	184
 11606  0014BA  6E22               	movwf	vscp_writeAppReg@pos,c
 11607                           
 11608                           ; BSR set to: 0
 11609                           ;main.c: 2583: if ( pos % 2 ) {
 11610  0014BC  A022               	btfss	vscp_writeAppReg@pos,0,c
 11611  0014BE  D002               	goto	l12491
 11612                           
 11613                           ; BSR set to: 0
 11614                           ;main.c: 2584: pos--;
 11615  0014C0  0622               	decf	vscp_writeAppReg@pos,f,c
 11616                           
 11617                           ;main.c: 2585: }
 11618  0014C2  D001               	goto	l12493
 11619  0014C4                     l12491:
 11620                           
 11621                           ; BSR set to: 0
 11622                           ;main.c: 2586: else {
 11623                           ;main.c: 2587: pos++;
 11624  0014C4  2A22               	incf	vscp_writeAppReg@pos,f,c
 11625  0014C6                     l12493:
 11626                           
 11627                           ; BSR set to: 0
 11628                           ;main.c: 2588: }
 11629                           ;main.c: 2589: rv = adc[ pos ];
 11630  0014C6  0E9E               	movlw	low _adc
 11631  0014C8  2422               	addwf	vscp_writeAppReg@pos,w,c
 11632  0014CA  6ED9               	movwf	fsr2l,c
 11633  0014CC  6ADA               	clrf	fsr2h,c
 11634  0014CE  0E01               	movlw	high _adc
 11635  0014D0  22DA               	addwfc	fsr2h,f,c
 11636  0014D2  50DF               	movf	indf2,w,c
 11637  0014D4  D011               	goto	L20
 11638  0014D6                     l12495:
 11639                           
 11640                           ; BSR set to: 0
 11641                           ;main.c: 2592: else if (reg < 98) {
 11642  0014D6  0E62               	movlw	98
 11643  0014D8  6023               	cpfslt	vscp_writeAppReg@reg,c
 11644  0014DA  D00F               	goto	l12503
 11645                           
 11646                           ; BSR set to: 0
 11647                           ;main.c: 2593: (Busy_eep(), Write_b_eep(0x9E + reg - 84,val));
 11648  0014DC  ECC7  F02B         	call	_Busy_eep	;wreg free
 11649  0014E0  0E4A               	movlw	74
 11650  0014E2  D80D               	call	PL60	;call to abstracted procedure
 11651  0014E4  ECA3  F029         	call	_Write_b_eep	;wreg free
 11652                           
 11653                           ;main.c: 2594: rv = Read_b_eep(0x9E + reg - 84) ;
 11654  0014E8  0E4A               	movlw	74
 11655  0014EA  2423               	addwf	vscp_writeAppReg@reg,w,c
 11656  0014EC  6E16               	movwf	?_Read_b_eep,c
 11657  0014EE  6A17               	clrf	?_Read_b_eep+1,c
 11658  0014F0  0E00               	movlw	0
 11659  0014F2  2217               	addwfc	?_Read_b_eep+1,f,c
 11660  0014F4  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11661  0014F8                     L20:
 11662  0014F8  6E24               	movwf	vscp_writeAppReg@rv,c
 11663  0014FA                     l12503:
 11664                           
 11665                           ;main.c: 2595: }
 11666                           ;main.c: 2596: }
 11667                           ;main.c: 2598: return rv;
 11668  0014FA  5024               	movf	vscp_writeAppReg@rv,w,c
 11669  0014FC  0012               	return	
 11670  0014FE                     __end_of_vscp_writeAppReg:
 11671                           	opt stack 0
 11672  0014FE                     PL60:
 11673                           	opt stack 24
 11674  0014FE  2423               	addwf	vscp_writeAppReg@reg,w,c
 11675  001500  6E0E               	movwf	?_Write_b_eep,c
 11676  001502  6A0F               	clrf	?_Write_b_eep+1,c
 11677  001504  0E00               	movlw	0
 11678  001506  220F               	addwfc	?_Write_b_eep+1,f,c
 11679  001508  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11680  00150C  0C00               	retlw	0
 11681  00150E                     __end_ofPL60:
 11682                           	opt stack 0
 11683                           tblptru	equ	0xFF8
 11684                           tblptrh	equ	0xFF7
 11685                           tblptrl	equ	0xFF6
 11686                           tablat	equ	0xFF5
 11687                           prodh	equ	0xFF4
 11688                           prodl	equ	0xFF3
 11689                           intcon	equ	0xFF2
 11690                           postinc0	equ	0xFEE
 11691                           wreg	equ	0xFE8
 11692                           indf1	equ	0xFE7
 11693                           postdec1	equ	0xFE5
 11694                           fsr1h	equ	0xFE2
 11695                           fsr1l	equ	0xFE1
 11696                           indf2	equ	0xFDF
 11697                           postinc2	equ	0xFDE
 11698                           postdec2	equ	0xFDD
 11699                           plusw2	equ	0xFDB
 11700                           fsr2h	equ	0xFDA
 11701                           fsr2l	equ	0xFD9
 11702                           status	equ	0xFD8
 11703                           
 11704 ;; *************** function _writeCoeffs2Ram *****************
 11705 ;; Defined at:
 11706 ;;		line 1014 in file "../main.c"
 11707 ;; Parameters:    Size  Location     Type
 11708 ;;		None
 11709 ;; Auto vars:     Size  Location     Type
 11710 ;;  c               3   25[COMRAM] unsigned char [3]
 11711 ;;  j               2   30[COMRAM] int 
 11712 ;;  i               2   28[COMRAM] int 
 11713 ;; Return value:  Size  Location     Type
 11714 ;;		None               void
 11715 ;; Registers used:
 11716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11717 ;; Tracked objects:
 11718 ;;		On entry : 0/0
 11719 ;;		On exit  : F/1
 11720 ;;		Unchanged: 0/0
 11721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11722 ;;      Params:         0       0       0       0       0       0       0
 11723 ;;      Locals:         7       0       0       0       0       0       0
 11724 ;;      Temps:          2       0       0       0       0       0       0
 11725 ;;      Totals:         9       0       0       0       0       0       0
 11726 ;;Total ram usage:        9 bytes
 11727 ;; Hardware stack levels used:    1
 11728 ;; Hardware stack levels required when called:    3
 11729 ;; This function calls:
 11730 ;;		_Read_b_eep
 11731 ;;		___wmul
 11732 ;; This function is called by:
 11733 ;;		_vscp_writeAppReg
 11734 ;; This function uses a non-reentrant model
 11735 ;;
 11736                           
 11737                           	psect	text42
 11738  0049B2                     __ptext42:
 11739                           	opt stack 0
 11740  0049B2                     _writeCoeffs2Ram:
 11741                           	opt stack 24
 11742                           
 11743                           ;main.c: 1015: int i, j;
 11744                           ;main.c: 1016: uint8_t c[3];
 11745                           ;main.c: 1018: for (i = 0; i < 6; i++) {
 11746                           
 11747                           ;incstack = 0
 11748                           ;incstack = 0
 11749  0049B2  6A1D               	clrf	writeCoeffs2Ram@i,c
 11750  0049B4  6A1E               	clrf	writeCoeffs2Ram@i+1,c
 11751  0049B6                     l11647:
 11752                           
 11753                           ;main.c: 1019: for (j = 2; j > 0; j--) {
 11754  0049B6  6A20               	clrf	writeCoeffs2Ram@j+1,c
 11755  0049B8  0E02               	movlw	2
 11756  0049BA  6E1F               	movwf	writeCoeffs2Ram@j,c
 11757  0049BC                     l11653:
 11758                           
 11759                           ;main.c: 1021: c[2 - j] = Read_b_eep(0xAA + i * 3 + j);
 11760  0049BC  501F               	movf	writeCoeffs2Ram@j,w,c
 11761  0049BE  0802               	sublw	2
 11762  0049C0  6E18               	movwf	??_writeCoeffs2Ram& (0+255),c
 11763  0049C2  5018               	movf	??_writeCoeffs2Ram,w,c
 11764  0049C4  0F1A               	addlw	low writeCoeffs2Ram@c
 11765  0049C6  6ED9               	movwf	fsr2l,c
 11766  0049C8  6ADA               	clrf	fsr2h,c
 11767  0049CA  C01D  F00E         	movff	writeCoeffs2Ram@i,?___wmul
 11768  0049CE  C01E  F00F         	movff	writeCoeffs2Ram@i+1,?___wmul+1
 11769  0049D2  6A11               	clrf	?___wmul+3,c
 11770  0049D4  0E03               	movlw	3
 11771  0049D6  6E10               	movwf	?___wmul+2,c
 11772  0049D8  ECBD  F029         	call	___wmul	;wreg free
 11773  0049DC  501F               	movf	writeCoeffs2Ram@j,w,c
 11774  0049DE  260E               	addwf	?___wmul,f,c
 11775  0049E0  5020               	movf	writeCoeffs2Ram@j+1,w,c
 11776  0049E2  220F               	addwfc	?___wmul+1,f,c
 11777  0049E4  0EAA               	movlw	170
 11778  0049E6  240E               	addwf	?___wmul,w,c
 11779  0049E8  6E16               	movwf	?_Read_b_eep,c
 11780  0049EA  0E00               	movlw	0
 11781  0049EC  200F               	addwfc	?___wmul+1,w,c
 11782  0049EE  6E17               	movwf	?_Read_b_eep+1,c
 11783  0049F0  EC8F  F02B         	call	_Read_b_eep	;wreg free
 11784  0049F4  6EDF               	movwf	indf2,c
 11785  0049F6  061F               	decf	writeCoeffs2Ram@j,f,c
 11786  0049F8  A0D8               	btfss	status,0,c
 11787  0049FA  0620               	decf	writeCoeffs2Ram@j+1,f,c
 11788  0049FC  5020               	movf	writeCoeffs2Ram@j+1,w,c
 11789  0049FE  0A80               	xorlw	128
 11790  004A00  0F80               	addlw	-128
 11791  004A02  0E01               	movlw	1
 11792  004A04  B4D8               	btfsc	status,2,c
 11793  004A06  5C1F               	subwf	writeCoeffs2Ram@j,w,c
 11794  004A08  E2D9               	bc	l11653
 11795                           
 11796                           ;main.c: 1022: }
 11797                           ;main.c: 1023: sh_coefficients[i] = *((double*) c);
 11798  004A0A  C01D  F018         	movff	writeCoeffs2Ram@i,??_writeCoeffs2Ram
 11799  004A0E  C01E  F019         	movff	writeCoeffs2Ram@i+1,??_writeCoeffs2Ram+1
 11800  004A12  90D8               	bcf	status,0,c
 11801  004A14  3618               	rlcf	??_writeCoeffs2Ram,f,c
 11802  004A16  3619               	rlcf	??_writeCoeffs2Ram+1,f,c
 11803  004A18  90D8               	bcf	status,0,c
 11804  004A1A  3618               	rlcf	??_writeCoeffs2Ram,f,c
 11805  004A1C  3619               	rlcf	??_writeCoeffs2Ram+1,f,c
 11806  004A1E  0101               	movlb	1	; () banked
 11807  004A20  0E22               	movlw	low _sh_coefficients
 11808  004A22  2418               	addwf	??_writeCoeffs2Ram,w,c
 11809  004A24  6ED9               	movwf	fsr2l,c
 11810  004A26  0E01               	movlw	high _sh_coefficients
 11811  004A28  2019               	addwfc	??_writeCoeffs2Ram+1,w,c
 11812  004A2A  6EDA               	movwf	fsr2h,c
 11813  004A2C  C01A  FFDE         	movff	writeCoeffs2Ram@c,postinc2
 11814  004A30  C01B  FFDE         	movff	writeCoeffs2Ram@c+1,postinc2
 11815  004A34  C01C  FFDE         	movff	writeCoeffs2Ram@c+2,postinc2
 11816  004A38  C01D  FFDE         	movff	writeCoeffs2Ram@c+3,postinc2
 11817                           
 11818                           ; BSR set to: 1
 11819  004A3C  4A1D               	infsnz	writeCoeffs2Ram@i,f,c
 11820  004A3E  2A1E               	incf	writeCoeffs2Ram@i+1,f,c
 11821                           
 11822                           ; BSR set to: 1
 11823  004A40  501E               	movf	writeCoeffs2Ram@i+1,w,c
 11824  004A42  0A80               	xorlw	128
 11825  004A44  0F80               	addlw	-128
 11826  004A46  0E06               	movlw	6
 11827  004A48  B4D8               	btfsc	status,2,c
 11828  004A4A  5C1D               	subwf	writeCoeffs2Ram@i,w,c
 11829  004A4C  B0D8               	btfsc	status,0,c
 11830                           
 11831                           ; BSR set to: 1
 11832  004A4E  0012               	return	
 11833  004A50  D7B2               	goto	l11647
 11834  004A52                     __end_of_writeCoeffs2Ram:
 11835                           	opt stack 0
 11836                           tblptru	equ	0xFF8
 11837                           tblptrh	equ	0xFF7
 11838                           tblptrl	equ	0xFF6
 11839                           tablat	equ	0xFF5
 11840                           prodh	equ	0xFF4
 11841                           prodl	equ	0xFF3
 11842                           intcon	equ	0xFF2
 11843                           postinc0	equ	0xFEE
 11844                           wreg	equ	0xFE8
 11845                           indf1	equ	0xFE7
 11846                           postdec1	equ	0xFE5
 11847                           fsr1h	equ	0xFE2
 11848                           fsr1l	equ	0xFE1
 11849                           indf2	equ	0xFDF
 11850                           postinc2	equ	0xFDE
 11851                           postdec2	equ	0xFDD
 11852                           plusw2	equ	0xFDB
 11853                           fsr2h	equ	0xFDA
 11854                           fsr2l	equ	0xFD9
 11855                           status	equ	0xFD8
 11856                           
 11857 ;; *************** function ___wmul *****************
 11858 ;; Defined at:
 11859 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/common/wmul.c"
 11860 ;; Parameters:    Size  Location     Type
 11861 ;;  multiplier      2   13[COMRAM] unsigned int 
 11862 ;;  multiplicand    2   15[COMRAM] unsigned int 
 11863 ;; Auto vars:     Size  Location     Type
 11864 ;;  product         2   19[COMRAM] unsigned int 
 11865 ;; Return value:  Size  Location     Type
 11866 ;;                  2   13[COMRAM] unsigned int 
 11867 ;; Registers used:
 11868 ;;		wreg, status,2, status,0, prodl, prodh
 11869 ;; Tracked objects:
 11870 ;;		On entry : 0/1
 11871 ;;		On exit  : 0/0
 11872 ;;		Unchanged: 0/0
 11873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11874 ;;      Params:         4       0       0       0       0       0       0
 11875 ;;      Locals:         4       0       0       0       0       0       0
 11876 ;;      Temps:          0       0       0       0       0       0       0
 11877 ;;      Totals:         8       0       0       0       0       0       0
 11878 ;;Total ram usage:        8 bytes
 11879 ;; Hardware stack levels used:    1
 11880 ;; Hardware stack levels required when called:    2
 11881 ;; This function calls:
 11882 ;;		Nothing
 11883 ;; This function is called by:
 11884 ;;		_doOneSecondWork
 11885 ;;		_writeCoeffs2Ram
 11886 ;; This function uses a non-reentrant model
 11887 ;;
 11888                           
 11889                           	psect	text43
 11890  00537A                     __ptext43:
 11891                           	opt stack 0
 11892  00537A                     ___wmul:
 11893                           	opt stack 27
 11894                           
 11895                           ; BSR set to: 1
 11896                           ;incstack = 0
 11897                           ;incstack = 0
 11898  00537A  500E               	movf	___wmul@multiplier,w,c
 11899  00537C  0210               	mulwf	___wmul@multiplicand,c
 11900  00537E  CFF3 F014          	movff	prodl,___wmul@product
 11901  005382  CFF4 F015          	movff	prodh,___wmul@product+1
 11902  005386  500E               	movf	___wmul@multiplier,w,c
 11903  005388  0211               	mulwf	___wmul@multiplicand+1,c
 11904  00538A  D808               	call	PL64	;call to abstracted procedure
 11905  00538C  500F               	movf	___wmul@multiplier+1,w,c
 11906  00538E  0210               	mulwf	___wmul@multiplicand,c
 11907  005390  D805               	call	PL64	;call to abstracted procedure
 11908  005392  C014  F00E         	movff	___wmul@product,?___wmul
 11909  005396  C015  F00F         	movff	___wmul@product+1,?___wmul+1
 11910  00539A  0012               	return	
 11911  00539C                     __end_of___wmul:
 11912                           	opt stack 0
 11913  00539C                     PL64:
 11914                           	opt stack 27
 11915  00539C  CFF3 FFF4          	movff	prodl,prodh
 11916  0053A0  6AF3               	clrf	prodl,c
 11917  0053A2  50F3               	movf	prodl,w,c
 11918  0053A4  2614               	addwf	___wmul@product,f,c
 11919  0053A6  50F4               	movf	prodh,w,c
 11920  0053A8  2215               	addwfc	___wmul@product+1,f,c
 11921  0053AA  0012               	return	
 11922  0053AC                     __end_ofPL64:
 11923                           	opt stack 0
 11924                           tblptru	equ	0xFF8
 11925                           tblptrh	equ	0xFF7
 11926                           tblptrl	equ	0xFF6
 11927                           tablat	equ	0xFF5
 11928                           prodh	equ	0xFF4
 11929                           prodl	equ	0xFF3
 11930                           intcon	equ	0xFF2
 11931                           postinc0	equ	0xFEE
 11932                           wreg	equ	0xFE8
 11933                           indf1	equ	0xFE7
 11934                           postdec1	equ	0xFE5
 11935                           fsr1h	equ	0xFE2
 11936                           fsr1l	equ	0xFE1
 11937                           indf2	equ	0xFDF
 11938                           postinc2	equ	0xFDE
 11939                           postdec2	equ	0xFDD
 11940                           plusw2	equ	0xFDB
 11941                           fsr2h	equ	0xFDA
 11942                           fsr2l	equ	0xFD9
 11943                           status	equ	0xFD8
 11944                           
 11945 ;; *************** function _vscp_readRegister *****************
 11946 ;; Defined at:
 11947 ;;		line 550 in file "../../vscp_firmware/common/vscp_firmware.c"
 11948 ;; Parameters:    Size  Location     Type
 11949 ;;  reg             1    wreg     unsigned char 
 11950 ;; Auto vars:     Size  Location     Type
 11951 ;;  reg             1   41[COMRAM] unsigned char 
 11952 ;; Return value:  Size  Location     Type
 11953 ;;                  1    wreg      unsigned char 
 11954 ;; Registers used:
 11955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11956 ;; Tracked objects:
 11957 ;;		On entry : F/0
 11958 ;;		On exit  : 0/0
 11959 ;;		Unchanged: 0/0
 11960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11961 ;;      Params:         0       0       0       0       0       0       0
 11962 ;;      Locals:         1       0       0       0       0       0       0
 11963 ;;      Temps:          0       0       0       0       0       0       0
 11964 ;;      Totals:         1       0       0       0       0       0       0
 11965 ;;Total ram usage:        1 bytes
 11966 ;; Hardware stack levels used:    1
 11967 ;; Hardware stack levels required when called:    5
 11968 ;; This function calls:
 11969 ;;		_vscp_readAppReg
 11970 ;;		_vscp_readStdReg
 11971 ;; This function is called by:
 11972 ;;		_vscp_handleProtocolEvent
 11973 ;; This function uses a non-reentrant model
 11974 ;;
 11975                           
 11976                           	psect	text44
 11977  005668                     __ptext44:
 11978                           	opt stack 0
 11979  005668                     _vscp_readRegister:
 11980                           	opt stack 24
 11981                           
 11982                           ;incstack = 0
 11983                           ;incstack = 0
 11984                           ;vscp_readRegister@reg stored from wreg
 11985  005668  CFE8 F02A          	movff	wreg,vscp_readRegister@reg
 11986                           
 11987                           ; BSR set to: 0
 11988                           ;vscp_firmware.c: 551: if (reg >= 0x80) {
 11989  00566C  0E7F               	movlw	127
 11990  00566E  642A               	cpfsgt	vscp_readRegister@reg,c
 11991  005670  D004               	goto	l12711
 11992                           
 11993                           ; BSR set to: 0
 11994                           ;vscp_firmware.c: 552: return vscp_readStdReg(reg);
 11995  005672  502A               	movf	vscp_readRegister@reg,w,c
 11996  005674  EC36  F01C         	call	_vscp_readStdReg
 11997  005678  D003               	goto	l1089
 11998  00567A                     l12711:
 11999                           
 12000                           ; BSR set to: 0
 12001                           ;vscp_firmware.c: 554: else {
 12002                           ;vscp_firmware.c: 555: return vscp_readAppReg(reg);
 12003  00567A  502A               	movf	vscp_readRegister@reg,w,c
 12004  00567C  EC87  F00A         	call	_vscp_readAppReg
 12005  005680                     l1089:
 12006  005680  0012               	return	
 12007  005682                     __end_of_vscp_readRegister:
 12008                           	opt stack 0
 12009                           tblptru	equ	0xFF8
 12010                           tblptrh	equ	0xFF7
 12011                           tblptrl	equ	0xFF6
 12012                           tablat	equ	0xFF5
 12013                           prodh	equ	0xFF4
 12014                           prodl	equ	0xFF3
 12015                           intcon	equ	0xFF2
 12016                           postinc0	equ	0xFEE
 12017                           wreg	equ	0xFE8
 12018                           indf1	equ	0xFE7
 12019                           postdec1	equ	0xFE5
 12020                           fsr1h	equ	0xFE2
 12021                           fsr1l	equ	0xFE1
 12022                           indf2	equ	0xFDF
 12023                           postinc2	equ	0xFDE
 12024                           postdec2	equ	0xFDD
 12025                           plusw2	equ	0xFDB
 12026                           fsr2h	equ	0xFDA
 12027                           fsr2l	equ	0xFD9
 12028                           status	equ	0xFD8
 12029                           
 12030 ;; *************** function _vscp_readStdReg *****************
 12031 ;; Defined at:
 12032 ;;		line 564 in file "../../vscp_firmware/common/vscp_firmware.c"
 12033 ;; Parameters:    Size  Location     Type
 12034 ;;  reg             1    wreg     unsigned char 
 12035 ;; Auto vars:     Size  Location     Type
 12036 ;;  reg             1   40[COMRAM] unsigned char 
 12037 ;;  code            4   33[COMRAM] unsigned long 
 12038 ;;  idx             1   38[COMRAM] unsigned char 
 12039 ;;  code            4   29[COMRAM] unsigned long 
 12040 ;;  idx             1   37[COMRAM] unsigned char 
 12041 ;;  rv              1   39[COMRAM] unsigned char 
 12042 ;; Return value:  Size  Location     Type
 12043 ;;                  1    wreg      unsigned char 
 12044 ;; Registers used:
 12045 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12046 ;; Tracked objects:
 12047 ;;		On entry : F/0
 12048 ;;		On exit  : 0/0
 12049 ;;		Unchanged: 0/0
 12050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12051 ;;      Params:         0       0       0       0       0       0       0
 12052 ;;      Locals:        12       0       0       0       0       0       0
 12053 ;;      Temps:          5       0       0       0       0       0       0
 12054 ;;      Totals:        17       0       0       0       0       0       0
 12055 ;;Total ram usage:       17 bytes
 12056 ;; Hardware stack levels used:    1
 12057 ;; Hardware stack levels required when called:    4
 12058 ;; This function calls:
 12059 ;;		_vscp_getMajorVersion
 12060 ;;		_vscp_getMinorVersion
 12061 ;;		_vscp_getSubMinorVersion
 12062 ;;		_vscp_getGUID
 12063 ;;		_vscp_getMDF_URL
 12064 ;;		_vscp_getUserID
 12065 ;;		_vscp_getManufacturerId
 12066 ;;		_vscp_getBootLoaderAlgorithm
 12067 ;;		_vscp_getBufferSize
 12068 ;;		_vscp_getRegisterPagesUsed
 12069 ;;		_vscp_getFamilyCode
 12070 ;;		_vscp_getFamilyType
 12071 ;; This function is called by:
 12072 ;;		_vscp_readRegister
 12073 ;;		_vscp_handleProtocolEvent
 12074 ;; This function uses a non-reentrant model
 12075 ;;
 12076                           
 12077                           	psect	text45
 12078  00386C                     __ptext45:
 12079                           	opt stack 0
 12080  00386C                     _vscp_readStdReg:
 12081                           	opt stack 25
 12082                           
 12083                           ;incstack = 0
 12084                           ;incstack = 0
 12085                           ;vscp_readStdReg@reg stored from wreg
 12086  00386C  CFE8 F029          	movff	wreg,vscp_readStdReg@reg
 12087                           
 12088                           ; BSR set to: 0
 12089                           ;vscp_firmware.c: 565: uint8_t rv = 0;
 12090  003870  6A28               	clrf	vscp_readStdReg@rv,c
 12091                           
 12092                           ; BSR set to: 0
 12093                           ;vscp_firmware.c: 567: if (0x80 == reg) {
 12094  003872  5029               	movf	vscp_readStdReg@reg,w,c
 12095  003874  0A80               	xorlw	128
 12096  003876  E104               	bnz	l12721
 12097                           
 12098                           ; BSR set to: 0
 12099                           ;vscp_firmware.c: 570: rv = vscp_alarmstatus;
 12100  003878  C04A  F028         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 12101                           
 12102                           ;vscp_firmware.c: 571: vscp_alarmstatus = 0x00;
 12103  00387C  6A4A               	clrf	_vscp_alarmstatus,c
 12104                           
 12105                           ;vscp_firmware.c: 573: }
 12106  00387E  D0B4               	goto	l12809
 12107  003880                     l12721:
 12108                           
 12109                           ; BSR set to: 0
 12110                           ;vscp_firmware.c: 574: else if (0x81 == reg) {
 12111  003880  5029               	movf	vscp_readStdReg@reg,w,c
 12112  003882  0A81               	xorlw	129
 12113  003884  E102               	bnz	l12725
 12114                           
 12115                           ; BSR set to: 0
 12116                           ;vscp_firmware.c: 577: rv = 1;
 12117  003886  0E01               	movlw	1
 12118  003888  D076               	goto	L31
 12119  00388A                     l12725:
 12120                           
 12121                           ; BSR set to: 0
 12122                           ;vscp_firmware.c: 580: else if (0x82 == reg) {
 12123  00388A  5029               	movf	vscp_readStdReg@reg,w,c
 12124  00388C  0A82               	xorlw	130
 12125  00388E  E102               	bnz	l12729
 12126                           
 12127                           ; BSR set to: 0
 12128                           ;vscp_firmware.c: 583: rv = 6;
 12129  003890  0E06               	movlw	6
 12130  003892  D071               	goto	L31
 12131  003894                     l12729:
 12132                           
 12133                           ; BSR set to: 0
 12134                           ;vscp_firmware.c: 586: else if (0x83 == reg) {
 12135  003894  5029               	movf	vscp_readStdReg@reg,w,c
 12136  003896  0A83               	xorlw	131
 12137  003898  E103               	bnz	l12733
 12138                           
 12139                           ; BSR set to: 0
 12140                           ;vscp_firmware.c: 589: rv = vscp_errorcnt;
 12141  00389A  C04B  F028         	movff	_vscp_errorcnt,vscp_readStdReg@rv
 12142                           
 12143                           ;vscp_firmware.c: 591: }
 12144  00389E  D0A4               	goto	l12809
 12145  0038A0                     l12733:
 12146                           
 12147                           ; BSR set to: 0
 12148                           ;vscp_firmware.c: 592: else if (0x94 == reg) {
 12149  0038A0  5029               	movf	vscp_readStdReg@reg,w,c
 12150  0038A2  0A94               	xorlw	148
 12151  0038A4  E103               	bnz	l12737
 12152                           
 12153                           ; BSR set to: 0
 12154                           ;vscp_firmware.c: 595: rv = vscp_getMajorVersion();
 12155  0038A6  ECD7  F02B         	call	_vscp_getMajorVersion	;wreg free
 12156  0038AA  D065               	goto	L31
 12157  0038AC                     l12737:
 12158                           
 12159                           ; BSR set to: 0
 12160                           ;vscp_firmware.c: 598: else if (0x95 == reg) {
 12161  0038AC  5029               	movf	vscp_readStdReg@reg,w,c
 12162  0038AE  0A95               	xorlw	149
 12163  0038B0  E103               	bnz	l12741
 12164                           
 12165                           ; BSR set to: 0
 12166                           ;vscp_firmware.c: 601: rv = vscp_getMinorVersion();
 12167  0038B2  ECD6  F02B         	call	_vscp_getMinorVersion	;wreg free
 12168  0038B6  D05F               	goto	L31
 12169  0038B8                     l12741:
 12170                           
 12171                           ; BSR set to: 0
 12172                           ;vscp_firmware.c: 604: else if (0x96 == reg) {
 12173  0038B8  5029               	movf	vscp_readStdReg@reg,w,c
 12174  0038BA  0A96               	xorlw	150
 12175  0038BC  E103               	bnz	l12745
 12176                           
 12177                           ; BSR set to: 0
 12178                           ;vscp_firmware.c: 607: rv = vscp_getSubMinorVersion();
 12179  0038BE  ECD5  F02B         	call	_vscp_getSubMinorVersion	;wreg free
 12180  0038C2  D059               	goto	L31
 12181  0038C4                     l12745:
 12182                           
 12183                           ; BSR set to: 0
 12184                           ;vscp_firmware.c: 610: else if (reg < 0x89) {
 12185  0038C4  0E89               	movlw	137
 12186  0038C6  6029               	cpfslt	vscp_readStdReg@reg,c
 12187  0038C8  D005               	goto	l12749
 12188                           
 12189                           ; BSR set to: 0
 12190                           ;vscp_firmware.c: 613: rv = vscp_getUserID(reg - 0x84);
 12191  0038CA  5029               	movf	vscp_readStdReg@reg,w,c
 12192  0038CC  0F7C               	addlw	124
 12193  0038CE  EC7B  F02B         	call	_vscp_getUserID
 12194  0038D2  D051               	goto	L31
 12195  0038D4                     l12749:
 12196                           
 12197                           ; BSR set to: 0
 12198                           ;vscp_firmware.c: 616: else if ((reg > 0x88) &&
 12199                           ;vscp_firmware.c: 617: (reg < 0x91)) {
 12200  0038D4  0E88               	movlw	136
 12201  0038D6  6429               	cpfsgt	vscp_readStdReg@reg,c
 12202  0038D8  D008               	goto	l12755
 12203                           
 12204                           ; BSR set to: 0
 12205  0038DA  0E91               	movlw	145
 12206  0038DC  6029               	cpfslt	vscp_readStdReg@reg,c
 12207  0038DE  D005               	goto	l12755
 12208                           
 12209                           ; BSR set to: 0
 12210                           ;vscp_firmware.c: 620: rv = vscp_getManufacturerId(reg - 0x89);
 12211  0038E0  5029               	movf	vscp_readStdReg@reg,w,c
 12212  0038E2  0F77               	addlw	119
 12213  0038E4  EC71  F02B         	call	_vscp_getManufacturerId
 12214  0038E8  D046               	goto	L31
 12215  0038EA                     l12755:
 12216                           
 12217                           ; BSR set to: 0
 12218                           ;vscp_firmware.c: 623: else if (0x91 == reg) {
 12219  0038EA  5029               	movf	vscp_readStdReg@reg,w,c
 12220  0038EC  0A91               	xorlw	145
 12221  0038EE  E103               	bnz	l12759
 12222                           
 12223                           ; BSR set to: 0
 12224                           ;vscp_firmware.c: 626: rv = vscp_nickname;
 12225  0038F0  C0BB  F028         	movff	_vscp_nickname,vscp_readStdReg@rv
 12226                           
 12227                           ;vscp_firmware.c: 628: }
 12228  0038F4  D079               	goto	l12809
 12229  0038F6                     l12759:
 12230                           
 12231                           ; BSR set to: 0
 12232                           ;vscp_firmware.c: 629: else if (0x93 == reg) {
 12233  0038F6  5029               	movf	vscp_readStdReg@reg,w,c
 12234  0038F8  0A93               	xorlw	147
 12235  0038FA  E103               	bnz	l12763
 12236                           
 12237                           ; BSR set to: 0
 12238                           ;vscp_firmware.c: 632: rv = (vscp_page_select & 0xff);
 12239  0038FC  C046  F028         	movff	_vscp_page_select,vscp_readStdReg@rv
 12240                           
 12241                           ;vscp_firmware.c: 634: }
 12242  003900  D073               	goto	l12809
 12243  003902                     l12763:
 12244                           
 12245                           ; BSR set to: 0
 12246                           ;vscp_firmware.c: 636: else if (0x92 == reg) {
 12247  003902  5029               	movf	vscp_readStdReg@reg,w,c
 12248  003904  0A92               	xorlw	146
 12249  003906  E102               	bnz	l12767
 12250                           
 12251                           ; BSR set to: 0
 12252                           ;vscp_firmware.c: 639: rv = (vscp_page_select >> 8) & 0xff;
 12253  003908  5047               	movf	_vscp_page_select+1,w,c
 12254  00390A  D035               	goto	L31
 12255  00390C                     l12767:
 12256                           
 12257                           ; BSR set to: 0
 12258                           ;vscp_firmware.c: 642: else if (0x97 == reg) {
 12259  00390C  5029               	movf	vscp_readStdReg@reg,w,c
 12260  00390E  0A97               	xorlw	151
 12261  003910  E103               	bnz	l12771
 12262                           
 12263                           ; BSR set to: 0
 12264                           ;vscp_firmware.c: 644: rv = vscp_getBootLoaderAlgorithm();
 12265  003912  ECD4  F02B         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 12266  003916  D02F               	goto	L31
 12267  003918                     l12771:
 12268                           
 12269                           ; BSR set to: 0
 12270                           ;vscp_firmware.c: 646: else if (0x98 == reg) {
 12271  003918  5029               	movf	vscp_readStdReg@reg,w,c
 12272  00391A  0A98               	xorlw	152
 12273  00391C  E103               	bnz	l12775
 12274                           
 12275                           ; BSR set to: 0
 12276                           ;vscp_firmware.c: 648: rv = vscp_getBufferSize();
 12277  00391E  ECD3  F02B         	call	_vscp_getBufferSize	;wreg free
 12278  003922  D029               	goto	L31
 12279  003924                     l12775:
 12280                           
 12281                           ; BSR set to: 0
 12282                           ;vscp_firmware.c: 650: else if (0x99 == reg) {
 12283  003924  5029               	movf	vscp_readStdReg@reg,w,c
 12284  003926  0A99               	xorlw	153
 12285  003928  E103               	bnz	l12779
 12286                           
 12287                           ; BSR set to: 0
 12288                           ;vscp_firmware.c: 652: rv = vscp_getRegisterPagesUsed();
 12289  00392A  ECD2  F02B         	call	_vscp_getRegisterPagesUsed	;wreg free
 12290  00392E  D023               	goto	L31
 12291  003930                     l12779:
 12292                           
 12293                           ; BSR set to: 0
 12294                           ;vscp_firmware.c: 654: else if ( ( reg >= 0x9A ) &&
 12295                           ;vscp_firmware.c: 655: ( reg < ( 0x9A + 4 ) ) ) {
 12296  003930  0E99               	movlw	153
 12297  003932  6429               	cpfsgt	vscp_readStdReg@reg,c
 12298  003934  D022               	goto	l12789
 12299                           
 12300                           ; BSR set to: 0
 12301  003936  0E9E               	movlw	158
 12302  003938  6029               	cpfslt	vscp_readStdReg@reg,c
 12303  00393A  D01F               	goto	l12789
 12304                           
 12305                           ; BSR set to: 0
 12306                           ;vscp_firmware.c: 657: uint32_t code = vscp_getFamilyCode();
 12307  00393C  ECB9  F02B         	call	_vscp_getFamilyCode	;wreg free
 12308  003940  C011  F021         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 12309  003944  C010  F020         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 12310  003948  C00F  F01F         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 12311  00394C  C00E  F01E         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 12312                           
 12313                           ; BSR set to: 0
 12314                           ;vscp_firmware.c: 658: uint8_t idx = reg - 0x9A;
 12315  003950  5029               	movf	vscp_readStdReg@reg,w,c
 12316  003952  0F66               	addlw	102
 12317  003954  6E26               	movwf	vscp_readStdReg@idx,c
 12318                           
 12319                           ; BSR set to: 0
 12320                           ;vscp_firmware.c: 659: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 12321  003956  5026               	movf	vscp_readStdReg@idx,w,c
 12322  003958  D849               	call	PL42	;call to abstracted procedure
 12323  00395A  C01E  F01A         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 12324  00395E  C01F  F01B         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 12325  003962  C020  F01C         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 12326  003966  C021  F01D         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 12327  00396A  2AE8               	incf	wreg,f,c
 12328  00396C  D001               	goto	u9450
 12329  00396E                     u9455:
 12330  00396E  D848               	call	PL80	;call to abstracted procedure
 12331  003970                     u9450:
 12332  003970  2EE8               	decfsz	wreg,f,c
 12333  003972  D7FD               	goto	u9455
 12334  003974  D024               	goto	L32
 12335  003976                     L31:
 12336  003976  6E28               	movwf	vscp_readStdReg@rv,c
 12337                           
 12338                           ;vscp_firmware.c: 660: }
 12339  003978  D037               	goto	l12809
 12340  00397A                     l12789:
 12341                           
 12342                           ; BSR set to: 0
 12343                           ;vscp_firmware.c: 661: else if ( ( reg >= 0x9E ) &&
 12344                           ;vscp_firmware.c: 662: ( reg < ( 0x9E + 4 ) ) ) {
 12345  00397A  0E9D               	movlw	157
 12346  00397C  6429               	cpfsgt	vscp_readStdReg@reg,c
 12347  00397E  D021               	goto	l12799
 12348                           
 12349                           ; BSR set to: 0
 12350  003980  0EA2               	movlw	162
 12351  003982  6029               	cpfslt	vscp_readStdReg@reg,c
 12352  003984  D01E               	goto	l12799
 12353                           
 12354                           ; BSR set to: 0
 12355                           ;vscp_firmware.c: 664: uint32_t code = vscp_getFamilyType();
 12356  003986  ECB4  F02B         	call	_vscp_getFamilyType	;wreg free
 12357  00398A  C011  F025         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1018+3
 12358  00398E  C010  F024         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1018+2
 12359  003992  C00F  F023         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1018+1
 12360  003996  C00E  F022         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1018
 12361                           
 12362                           ; BSR set to: 0
 12363                           ;vscp_firmware.c: 665: uint8_t idx = reg - 0x9E;
 12364  00399A  5029               	movf	vscp_readStdReg@reg,w,c
 12365  00399C  0F62               	addlw	98
 12366  00399E  6E27               	movwf	vscp_readStdReg@idx_1019,c
 12367                           
 12368                           ; BSR set to: 0
 12369                           ;vscp_firmware.c: 666: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 12370  0039A0  5027               	movf	vscp_readStdReg@idx_1019,w,c
 12371  0039A2  D824               	call	PL42	;call to abstracted procedure
 12372  0039A4  C022  F01A         	movff	vscp_readStdReg@code_1018,??_vscp_readStdReg+1
 12373  0039A8  C023  F01B         	movff	vscp_readStdReg@code_1018+1,??_vscp_readStdReg+2
 12374  0039AC  C024  F01C         	movff	vscp_readStdReg@code_1018+2,??_vscp_readStdReg+3
 12375  0039B0  C025  F01D         	movff	vscp_readStdReg@code_1018+3,??_vscp_readStdReg+4
 12376  0039B4  2AE8               	incf	wreg,f,c
 12377  0039B6  D001               	goto	u9480
 12378  0039B8                     u9485:
 12379  0039B8  D823               	call	PL80	;call to abstracted procedure
 12380  0039BA                     u9480:
 12381  0039BA  2EE8               	decfsz	wreg,f,c
 12382  0039BC  D7FD               	goto	u9485
 12383  0039BE                     L32:
 12384  0039BE  501A               	movf	??_vscp_readStdReg+1,w,c
 12385  0039C0  D7DA               	goto	L31
 12386  0039C2                     l12799:
 12387                           
 12388                           ; BSR set to: 0
 12389                           ;vscp_firmware.c: 668: else if ((reg > (0xD0 - 1)) &&
 12390                           ;vscp_firmware.c: 669: (reg < 0xE0)) {
 12391  0039C2  0ECF               	movlw	207
 12392  0039C4  6429               	cpfsgt	vscp_readStdReg@reg,c
 12393  0039C6  D008               	goto	l12805
 12394                           
 12395                           ; BSR set to: 0
 12396  0039C8  0EE0               	movlw	224
 12397  0039CA  6029               	cpfslt	vscp_readStdReg@reg,c
 12398  0039CC  D005               	goto	l12805
 12399                           
 12400                           ; BSR set to: 0
 12401                           ;vscp_firmware.c: 672: rv = vscp_getGUID(reg - 0xD0);
 12402  0039CE  5029               	movf	vscp_readStdReg@reg,w,c
 12403  0039D0  0F30               	addlw	48
 12404  0039D2  EC85  F02B         	call	_vscp_getGUID
 12405  0039D6  D7CF               	goto	L31
 12406  0039D8                     l12805:
 12407                           
 12408                           ; BSR set to: 0
 12409                           ;vscp_firmware.c: 675: else if ( reg >= 0xE0 ) {
 12410  0039D8  0EDF               	movlw	223
 12411  0039DA  6429               	cpfsgt	vscp_readStdReg@reg,c
 12412  0039DC  D005               	goto	l12809
 12413                           
 12414                           ; BSR set to: 0
 12415                           ;vscp_firmware.c: 678: rv = vscp_getMDF_URL(reg - 0xE0);
 12416  0039DE  5029               	movf	vscp_readStdReg@reg,w,c
 12417  0039E0  0F20               	addlw	32
 12418  0039E2  EC4E  F02B         	call	_vscp_getMDF_URL
 12419  0039E6  D7C7               	goto	L31
 12420  0039E8                     l12809:
 12421                           
 12422                           ;vscp_firmware.c: 680: }
 12423                           ;vscp_firmware.c: 682: return rv;
 12424  0039E8  5028               	movf	vscp_readStdReg@rv,w,c
 12425  0039EA  0012               	return	
 12426  0039EC                     __end_of_vscp_readStdReg:
 12427                           	opt stack 0
 12428  0039EC                     PL42:
 12429                           	opt stack 25
 12430  0039EC  0803               	sublw	3
 12431  0039EE  6E19               	movwf	??_vscp_readStdReg& (0+255),c
 12432  0039F0  90D8               	bcf	status,0,c
 12433  0039F2  3619               	rlcf	??_vscp_readStdReg,f,c
 12434  0039F4  90D8               	bcf	status,0,c
 12435  0039F6  3619               	rlcf	??_vscp_readStdReg,f,c
 12436  0039F8  90D8               	bcf	status,0,c
 12437  0039FA  3619               	rlcf	??_vscp_readStdReg,f,c
 12438  0039FC  5019               	movf	??_vscp_readStdReg,w,c
 12439  0039FE  0012               	return	
 12440  003A00                     __end_ofPL42:
 12441                           	opt stack 0
 12442  003A00                     PL80:
 12443                           	opt stack 25
 12444  003A00  90D8               	bcf	status,0,c
 12445  003A02  321D               	rrcf	??_vscp_readStdReg+4,f,c
 12446  003A04  321C               	rrcf	??_vscp_readStdReg+3,f,c
 12447  003A06  321B               	rrcf	??_vscp_readStdReg+2,f,c
 12448  003A08  321A               	rrcf	??_vscp_readStdReg+1,f,c
 12449  003A0A  0012               	return	
 12450  003A0C                     __end_ofPL80:
 12451                           	opt stack 0
 12452                           tblptru	equ	0xFF8
 12453                           tblptrh	equ	0xFF7
 12454                           tblptrl	equ	0xFF6
 12455                           tablat	equ	0xFF5
 12456                           prodh	equ	0xFF4
 12457                           prodl	equ	0xFF3
 12458                           intcon	equ	0xFF2
 12459                           postinc0	equ	0xFEE
 12460                           wreg	equ	0xFE8
 12461                           indf1	equ	0xFE7
 12462                           postdec1	equ	0xFE5
 12463                           fsr1h	equ	0xFE2
 12464                           fsr1l	equ	0xFE1
 12465                           indf2	equ	0xFDF
 12466                           postinc2	equ	0xFDE
 12467                           postdec2	equ	0xFDD
 12468                           plusw2	equ	0xFDB
 12469                           fsr2h	equ	0xFDA
 12470                           fsr2l	equ	0xFD9
 12471                           status	equ	0xFD8
 12472                           
 12473 ;; *************** function _vscp_getFamilyType *****************
 12474 ;; Defined at:
 12475 ;;		line 2892 in file "../main.c"
 12476 ;; Parameters:    Size  Location     Type
 12477 ;;		None
 12478 ;; Auto vars:     Size  Location     Type
 12479 ;;		None
 12480 ;; Return value:  Size  Location     Type
 12481 ;;                  4   13[COMRAM] unsigned long 
 12482 ;; Registers used:
 12483 ;;		None
 12484 ;; Tracked objects:
 12485 ;;		On entry : F/0
 12486 ;;		On exit  : F/0
 12487 ;;		Unchanged: F/0
 12488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12489 ;;      Params:         4       0       0       0       0       0       0
 12490 ;;      Locals:         0       0       0       0       0       0       0
 12491 ;;      Temps:          0       0       0       0       0       0       0
 12492 ;;      Totals:         4       0       0       0       0       0       0
 12493 ;;Total ram usage:        4 bytes
 12494 ;; Hardware stack levels used:    1
 12495 ;; Hardware stack levels required when called:    2
 12496 ;; This function calls:
 12497 ;;		Nothing
 12498 ;; This function is called by:
 12499 ;;		_vscp_readStdReg
 12500 ;; This function uses a non-reentrant model
 12501 ;;
 12502                           
 12503                           	psect	text46
 12504  005768                     __ptext46:
 12505                           	opt stack 0
 12506  005768                     _vscp_getFamilyType:
 12507                           	opt stack 26
 12508                           
 12509                           ; BSR set to: 0
 12510                           ;main.c: 2893: return 0;
 12511                           
 12512                           ;incstack = 0
 12513                           ;incstack = 0
 12514  005768  6A0E               	clrf	?_vscp_getFamilyType,c
 12515  00576A  6A0F               	clrf	?_vscp_getFamilyType+1,c
 12516  00576C  6A10               	clrf	?_vscp_getFamilyType+2,c
 12517  00576E  6A11               	clrf	?_vscp_getFamilyType+3,c
 12518                           
 12519                           ; BSR set to: 0
 12520  005770  0012               	return	
 12521  005772                     __end_of_vscp_getFamilyType:
 12522                           	opt stack 0
 12523                           tblptru	equ	0xFF8
 12524                           tblptrh	equ	0xFF7
 12525                           tblptrl	equ	0xFF6
 12526                           tablat	equ	0xFF5
 12527                           prodh	equ	0xFF4
 12528                           prodl	equ	0xFF3
 12529                           intcon	equ	0xFF2
 12530                           postinc0	equ	0xFEE
 12531                           wreg	equ	0xFE8
 12532                           indf1	equ	0xFE7
 12533                           postdec1	equ	0xFE5
 12534                           fsr1h	equ	0xFE2
 12535                           fsr1l	equ	0xFE1
 12536                           indf2	equ	0xFDF
 12537                           postinc2	equ	0xFDE
 12538                           postdec2	equ	0xFDD
 12539                           plusw2	equ	0xFDB
 12540                           fsr2h	equ	0xFDA
 12541                           fsr2l	equ	0xFD9
 12542                           status	equ	0xFD8
 12543                           
 12544 ;; *************** function _vscp_getFamilyCode *****************
 12545 ;; Defined at:
 12546 ;;		line 2882 in file "../main.c"
 12547 ;; Parameters:    Size  Location     Type
 12548 ;;		None
 12549 ;; Auto vars:     Size  Location     Type
 12550 ;;		None
 12551 ;; Return value:  Size  Location     Type
 12552 ;;                  4   13[COMRAM] unsigned long 
 12553 ;; Registers used:
 12554 ;;		None
 12555 ;; Tracked objects:
 12556 ;;		On entry : F/0
 12557 ;;		On exit  : F/0
 12558 ;;		Unchanged: F/0
 12559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12560 ;;      Params:         4       0       0       0       0       0       0
 12561 ;;      Locals:         0       0       0       0       0       0       0
 12562 ;;      Temps:          0       0       0       0       0       0       0
 12563 ;;      Totals:         4       0       0       0       0       0       0
 12564 ;;Total ram usage:        4 bytes
 12565 ;; Hardware stack levels used:    1
 12566 ;; Hardware stack levels required when called:    2
 12567 ;; This function calls:
 12568 ;;		Nothing
 12569 ;; This function is called by:
 12570 ;;		_vscp_readStdReg
 12571 ;; This function uses a non-reentrant model
 12572 ;;
 12573                           
 12574                           	psect	text47
 12575  005772                     __ptext47:
 12576                           	opt stack 0
 12577  005772                     _vscp_getFamilyCode:
 12578                           	opt stack 26
 12579                           
 12580                           ; BSR set to: 0
 12581                           ;main.c: 2883: return 0L;
 12582                           
 12583                           ; BSR set to: 0
 12584                           ;incstack = 0
 12585                           ;incstack = 0
 12586  005772  6A0E               	clrf	?_vscp_getFamilyCode,c
 12587  005774  6A0F               	clrf	?_vscp_getFamilyCode+1,c
 12588  005776  6A10               	clrf	?_vscp_getFamilyCode+2,c
 12589  005778  6A11               	clrf	?_vscp_getFamilyCode+3,c
 12590                           
 12591                           ; BSR set to: 0
 12592  00577A  0012               	return	
 12593  00577C                     __end_of_vscp_getFamilyCode:
 12594                           	opt stack 0
 12595                           tblptru	equ	0xFF8
 12596                           tblptrh	equ	0xFF7
 12597                           tblptrl	equ	0xFF6
 12598                           tablat	equ	0xFF5
 12599                           prodh	equ	0xFF4
 12600                           prodl	equ	0xFF3
 12601                           intcon	equ	0xFF2
 12602                           postinc0	equ	0xFEE
 12603                           wreg	equ	0xFE8
 12604                           indf1	equ	0xFE7
 12605                           postdec1	equ	0xFE5
 12606                           fsr1h	equ	0xFE2
 12607                           fsr1l	equ	0xFE1
 12608                           indf2	equ	0xFDF
 12609                           postinc2	equ	0xFDE
 12610                           postdec2	equ	0xFDD
 12611                           plusw2	equ	0xFDB
 12612                           fsr2h	equ	0xFDA
 12613                           fsr2l	equ	0xFD9
 12614                           status	equ	0xFD8
 12615                           
 12616 ;; *************** function _vscp_getRegisterPagesUsed *****************
 12617 ;; Defined at:
 12618 ;;		line 2770 in file "../main.c"
 12619 ;; Parameters:    Size  Location     Type
 12620 ;;		None
 12621 ;; Auto vars:     Size  Location     Type
 12622 ;;		None
 12623 ;; Return value:  Size  Location     Type
 12624 ;;                  1    wreg      unsigned char 
 12625 ;; Registers used:
 12626 ;;		wreg
 12627 ;; Tracked objects:
 12628 ;;		On entry : F/0
 12629 ;;		On exit  : F/0
 12630 ;;		Unchanged: F/0
 12631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12632 ;;      Params:         0       0       0       0       0       0       0
 12633 ;;      Locals:         0       0       0       0       0       0       0
 12634 ;;      Temps:          0       0       0       0       0       0       0
 12635 ;;      Totals:         0       0       0       0       0       0       0
 12636 ;;Total ram usage:        0 bytes
 12637 ;; Hardware stack levels used:    1
 12638 ;; Hardware stack levels required when called:    2
 12639 ;; This function calls:
 12640 ;;		Nothing
 12641 ;; This function is called by:
 12642 ;;		_vscp_readStdReg
 12643 ;; This function uses a non-reentrant model
 12644 ;;
 12645                           
 12646                           	psect	text48
 12647  0057A4                     __ptext48:
 12648                           	opt stack 0
 12649  0057A4                     _vscp_getRegisterPagesUsed:
 12650                           	opt stack 26
 12651                           
 12652                           ; BSR set to: 0
 12653                           
 12654                           ; BSR set to: 0
 12655                           ;main.c: 2771: return 1;
 12656                           
 12657                           ; BSR set to: 0
 12658                           ;incstack = 0
 12659                           ;incstack = 0
 12660  0057A4  0C01               	retlw	1
 12661  0057A6                     __end_of_vscp_getRegisterPagesUsed:
 12662                           	opt stack 0
 12663                           tblptru	equ	0xFF8
 12664                           tblptrh	equ	0xFF7
 12665                           tblptrl	equ	0xFF6
 12666                           tablat	equ	0xFF5
 12667                           prodh	equ	0xFF4
 12668                           prodl	equ	0xFF3
 12669                           intcon	equ	0xFF2
 12670                           postinc0	equ	0xFEE
 12671                           wreg	equ	0xFE8
 12672                           indf1	equ	0xFE7
 12673                           postdec1	equ	0xFE5
 12674                           fsr1h	equ	0xFE2
 12675                           fsr1l	equ	0xFE1
 12676                           indf2	equ	0xFDF
 12677                           postinc2	equ	0xFDE
 12678                           postdec2	equ	0xFDD
 12679                           plusw2	equ	0xFDB
 12680                           fsr2h	equ	0xFDA
 12681                           fsr2l	equ	0xFD9
 12682                           status	equ	0xFD8
 12683                           
 12684 ;; *************** function _vscp_getBufferSize *****************
 12685 ;; Defined at:
 12686 ;;		line 2723 in file "../main.c"
 12687 ;; Parameters:    Size  Location     Type
 12688 ;;		None
 12689 ;; Auto vars:     Size  Location     Type
 12690 ;;		None
 12691 ;; Return value:  Size  Location     Type
 12692 ;;                  1    wreg      unsigned char 
 12693 ;; Registers used:
 12694 ;;		wreg
 12695 ;; Tracked objects:
 12696 ;;		On entry : F/0
 12697 ;;		On exit  : F/0
 12698 ;;		Unchanged: F/0
 12699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12700 ;;      Params:         0       0       0       0       0       0       0
 12701 ;;      Locals:         0       0       0       0       0       0       0
 12702 ;;      Temps:          0       0       0       0       0       0       0
 12703 ;;      Totals:         0       0       0       0       0       0       0
 12704 ;;Total ram usage:        0 bytes
 12705 ;; Hardware stack levels used:    1
 12706 ;; Hardware stack levels required when called:    2
 12707 ;; This function calls:
 12708 ;;		Nothing
 12709 ;; This function is called by:
 12710 ;;		_vscp_readStdReg
 12711 ;; This function uses a non-reentrant model
 12712 ;;
 12713                           
 12714                           	psect	text49
 12715  0057A6                     __ptext49:
 12716                           	opt stack 0
 12717  0057A6                     _vscp_getBufferSize:
 12718                           	opt stack 26
 12719                           
 12720                           ; BSR set to: 0
 12721                           
 12722                           ; BSR set to: 0
 12723                           ;main.c: 2724: return 8;
 12724                           
 12725                           ; BSR set to: 0
 12726                           ;incstack = 0
 12727                           ;incstack = 0
 12728  0057A6  0C08               	retlw	8
 12729  0057A8                     __end_of_vscp_getBufferSize:
 12730                           	opt stack 0
 12731                           tblptru	equ	0xFF8
 12732                           tblptrh	equ	0xFF7
 12733                           tblptrl	equ	0xFF6
 12734                           tablat	equ	0xFF5
 12735                           prodh	equ	0xFF4
 12736                           prodl	equ	0xFF3
 12737                           intcon	equ	0xFF2
 12738                           postinc0	equ	0xFEE
 12739                           wreg	equ	0xFE8
 12740                           indf1	equ	0xFE7
 12741                           postdec1	equ	0xFE5
 12742                           fsr1h	equ	0xFE2
 12743                           fsr1l	equ	0xFE1
 12744                           indf2	equ	0xFDF
 12745                           postinc2	equ	0xFDE
 12746                           postdec2	equ	0xFDD
 12747                           plusw2	equ	0xFDB
 12748                           fsr2h	equ	0xFDA
 12749                           fsr2l	equ	0xFD9
 12750                           status	equ	0xFD8
 12751                           
 12752 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 12753 ;; Defined at:
 12754 ;;		line 2714 in file "../main.c"
 12755 ;; Parameters:    Size  Location     Type
 12756 ;;		None
 12757 ;; Auto vars:     Size  Location     Type
 12758 ;;		None
 12759 ;; Return value:  Size  Location     Type
 12760 ;;                  1    wreg      unsigned char 
 12761 ;; Registers used:
 12762 ;;		wreg
 12763 ;; Tracked objects:
 12764 ;;		On entry : F/0
 12765 ;;		On exit  : F/0
 12766 ;;		Unchanged: F/0
 12767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12768 ;;      Params:         0       0       0       0       0       0       0
 12769 ;;      Locals:         0       0       0       0       0       0       0
 12770 ;;      Temps:          0       0       0       0       0       0       0
 12771 ;;      Totals:         0       0       0       0       0       0       0
 12772 ;;Total ram usage:        0 bytes
 12773 ;; Hardware stack levels used:    1
 12774 ;; Hardware stack levels required when called:    2
 12775 ;; This function calls:
 12776 ;;		Nothing
 12777 ;; This function is called by:
 12778 ;;		_vscp_readStdReg
 12779 ;; This function uses a non-reentrant model
 12780 ;;
 12781                           
 12782                           	psect	text50
 12783  0057A8                     __ptext50:
 12784                           	opt stack 0
 12785  0057A8                     _vscp_getBootLoaderAlgorithm:
 12786                           	opt stack 26
 12787                           
 12788                           ; BSR set to: 0
 12789                           
 12790                           ; BSR set to: 0
 12791                           ;main.c: 2715: return 0x01;
 12792                           
 12793                           ; BSR set to: 0
 12794                           ;incstack = 0
 12795                           ;incstack = 0
 12796  0057A8  0C01               	retlw	1
 12797  0057AA                     __end_of_vscp_getBootLoaderAlgorithm:
 12798                           	opt stack 0
 12799                           tblptru	equ	0xFF8
 12800                           tblptrh	equ	0xFF7
 12801                           tblptrl	equ	0xFF6
 12802                           tablat	equ	0xFF5
 12803                           prodh	equ	0xFF4
 12804                           prodl	equ	0xFF3
 12805                           intcon	equ	0xFF2
 12806                           postinc0	equ	0xFEE
 12807                           wreg	equ	0xFE8
 12808                           indf1	equ	0xFE7
 12809                           postdec1	equ	0xFE5
 12810                           fsr1h	equ	0xFE2
 12811                           fsr1l	equ	0xFE1
 12812                           indf2	equ	0xFDF
 12813                           postinc2	equ	0xFDE
 12814                           postdec2	equ	0xFDD
 12815                           plusw2	equ	0xFDB
 12816                           fsr2h	equ	0xFDA
 12817                           fsr2l	equ	0xFD9
 12818                           status	equ	0xFD8
 12819                           
 12820 ;; *************** function _vscp_getManufacturerId *****************
 12821 ;; Defined at:
 12822 ;;		line 2694 in file "../main.c"
 12823 ;; Parameters:    Size  Location     Type
 12824 ;;  idx             1    wreg     unsigned char 
 12825 ;; Auto vars:     Size  Location     Type
 12826 ;;  idx             1   23[COMRAM] unsigned char 
 12827 ;; Return value:  Size  Location     Type
 12828 ;;                  1    wreg      unsigned char 
 12829 ;; Registers used:
 12830 ;;		wreg, status,2, status,0, cstack
 12831 ;; Tracked objects:
 12832 ;;		On entry : 0/0
 12833 ;;		On exit  : 0/0
 12834 ;;		Unchanged: 0/0
 12835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12836 ;;      Params:         0       0       0       0       0       0       0
 12837 ;;      Locals:         1       0       0       0       0       0       0
 12838 ;;      Temps:          0       0       0       0       0       0       0
 12839 ;;      Totals:         1       0       0       0       0       0       0
 12840 ;;Total ram usage:        1 bytes
 12841 ;; Hardware stack levels used:    1
 12842 ;; Hardware stack levels required when called:    3
 12843 ;; This function calls:
 12844 ;;		_Read_b_eep
 12845 ;; This function is called by:
 12846 ;;		_vscp_readStdReg
 12847 ;;		_vscp_writeStdReg
 12848 ;; This function uses a non-reentrant model
 12849 ;;
 12850                           
 12851                           	psect	text51
 12852  0056E2                     __ptext51:
 12853                           	opt stack 0
 12854  0056E2                     _vscp_getManufacturerId:
 12855                           	opt stack 25
 12856                           
 12857                           ; BSR set to: 0
 12858                           ;incstack = 0
 12859                           ;incstack = 0
 12860                           ;vscp_getManufacturerId@idx stored from wreg
 12861  0056E2  CFE8 F018          	movff	wreg,vscp_getManufacturerId@idx
 12862                           
 12863                           ;main.c: 2695: return Read_b_eep(0x0A + idx);
 12864  0056E6  0E0A               	movlw	10
 12865  0056E8  2418               	addwf	vscp_getManufacturerId@idx,w,c
 12866  0056EA  6E16               	movwf	?_Read_b_eep,c
 12867  0056EC  6A17               	clrf	?_Read_b_eep+1,c
 12868  0056EE  0E00               	movlw	0
 12869  0056F0  2217               	addwfc	?_Read_b_eep+1,f,c
 12870  0056F2  EF8F  F02B         	goto	_Read_b_eep	;wreg free
 12871  0056F6                     __end_of_vscp_getManufacturerId:
 12872                           	opt stack 0
 12873                           tblptru	equ	0xFF8
 12874                           tblptrh	equ	0xFF7
 12875                           tblptrl	equ	0xFF6
 12876                           tablat	equ	0xFF5
 12877                           prodh	equ	0xFF4
 12878                           prodl	equ	0xFF3
 12879                           intcon	equ	0xFF2
 12880                           postinc0	equ	0xFEE
 12881                           wreg	equ	0xFE8
 12882                           indf1	equ	0xFE7
 12883                           postdec1	equ	0xFE5
 12884                           fsr1h	equ	0xFE2
 12885                           fsr1l	equ	0xFE1
 12886                           indf2	equ	0xFDF
 12887                           postinc2	equ	0xFDE
 12888                           postdec2	equ	0xFDD
 12889                           plusw2	equ	0xFDB
 12890                           fsr2h	equ	0xFDA
 12891                           fsr2l	equ	0xFD9
 12892                           status	equ	0xFD8
 12893                           
 12894 ;; *************** function _vscp_getUserID *****************
 12895 ;; Defined at:
 12896 ;;		line 2674 in file "../main.c"
 12897 ;; Parameters:    Size  Location     Type
 12898 ;;  idx             1    wreg     unsigned char 
 12899 ;; Auto vars:     Size  Location     Type
 12900 ;;  idx             1   23[COMRAM] unsigned char 
 12901 ;; Return value:  Size  Location     Type
 12902 ;;                  1    wreg      unsigned char 
 12903 ;; Registers used:
 12904 ;;		wreg, status,2, status,0, cstack
 12905 ;; Tracked objects:
 12906 ;;		On entry : 0/0
 12907 ;;		On exit  : 0/0
 12908 ;;		Unchanged: 0/0
 12909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12910 ;;      Params:         0       0       0       0       0       0       0
 12911 ;;      Locals:         1       0       0       0       0       0       0
 12912 ;;      Temps:          0       0       0       0       0       0       0
 12913 ;;      Totals:         1       0       0       0       0       0       0
 12914 ;;Total ram usage:        1 bytes
 12915 ;; Hardware stack levels used:    1
 12916 ;; Hardware stack levels required when called:    3
 12917 ;; This function calls:
 12918 ;;		_Read_b_eep
 12919 ;; This function is called by:
 12920 ;;		_vscp_readStdReg
 12921 ;;		_vscp_writeStdReg
 12922 ;; This function uses a non-reentrant model
 12923 ;;
 12924                           
 12925                           	psect	text52
 12926  0056F6                     __ptext52:
 12927                           	opt stack 0
 12928  0056F6                     _vscp_getUserID:
 12929                           	opt stack 25
 12930                           
 12931                           ;incstack = 0
 12932                           ;incstack = 0
 12933                           ;vscp_getUserID@idx stored from wreg
 12934  0056F6  CFE8 F018          	movff	wreg,vscp_getUserID@idx
 12935                           
 12936                           ;main.c: 2675: return Read_b_eep(0x05 + idx);
 12937  0056FA  0E05               	movlw	5
 12938  0056FC  2418               	addwf	vscp_getUserID@idx,w,c
 12939  0056FE  6E16               	movwf	?_Read_b_eep,c
 12940  005700  6A17               	clrf	?_Read_b_eep+1,c
 12941  005702  0E00               	movlw	0
 12942  005704  2217               	addwfc	?_Read_b_eep+1,f,c
 12943  005706  EF8F  F02B         	goto	_Read_b_eep	;wreg free
 12944  00570A                     __end_of_vscp_getUserID:
 12945                           	opt stack 0
 12946                           tblptru	equ	0xFF8
 12947                           tblptrh	equ	0xFF7
 12948                           tblptrl	equ	0xFF6
 12949                           tablat	equ	0xFF5
 12950                           prodh	equ	0xFF4
 12951                           prodl	equ	0xFF3
 12952                           intcon	equ	0xFF2
 12953                           postinc0	equ	0xFEE
 12954                           wreg	equ	0xFE8
 12955                           indf1	equ	0xFE7
 12956                           postdec1	equ	0xFE5
 12957                           fsr1h	equ	0xFE2
 12958                           fsr1l	equ	0xFE1
 12959                           indf2	equ	0xFDF
 12960                           postinc2	equ	0xFDE
 12961                           postdec2	equ	0xFDD
 12962                           plusw2	equ	0xFDB
 12963                           fsr2h	equ	0xFDA
 12964                           fsr2l	equ	0xFD9
 12965                           status	equ	0xFD8
 12966                           
 12967 ;; *************** function _vscp_getMDF_URL *****************
 12968 ;; Defined at:
 12969 ;;		line 2665 in file "../main.c"
 12970 ;; Parameters:    Size  Location     Type
 12971 ;;  idx             1    wreg     unsigned char 
 12972 ;; Auto vars:     Size  Location     Type
 12973 ;;  idx             1   14[COMRAM] unsigned char 
 12974 ;; Return value:  Size  Location     Type
 12975 ;;                  1    wreg      unsigned char 
 12976 ;; Registers used:
 12977 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 12978 ;; Tracked objects:
 12979 ;;		On entry : F/0
 12980 ;;		On exit  : F/0
 12981 ;;		Unchanged: F/0
 12982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12983 ;;      Params:         0       0       0       0       0       0       0
 12984 ;;      Locals:         1       0       0       0       0       0       0
 12985 ;;      Temps:          1       0       0       0       0       0       0
 12986 ;;      Totals:         2       0       0       0       0       0       0
 12987 ;;Total ram usage:        2 bytes
 12988 ;; Hardware stack levels used:    1
 12989 ;; Hardware stack levels required when called:    2
 12990 ;; This function calls:
 12991 ;;		Nothing
 12992 ;; This function is called by:
 12993 ;;		_vscp_readStdReg
 12994 ;;		_vscp_handleProtocolEvent
 12995 ;; This function uses a non-reentrant model
 12996 ;;
 12997                           
 12998                           	psect	text53
 12999  00569C                     __ptext53:
 13000                           	opt stack 0
 13001  00569C                     _vscp_getMDF_URL:
 13002                           	opt stack 26
 13003                           
 13004                           ;incstack = 0
 13005                           ;incstack = 0
 13006                           ;vscp_getMDF_URL@idx stored from wreg
 13007  00569C  CFE8 F00F          	movff	wreg,vscp_getMDF_URL@idx
 13008                           
 13009                           ; BSR set to: 0
 13010                           ;main.c: 2666: return vscp_deviceURL[ idx ];
 13011  0056A0  500F               	movf	vscp_getMDF_URL@idx,w,c
 13012  0056A2  0F00               	addlw	low _vscp_deviceURL
 13013  0056A4  6E0E               	movwf	??_vscp_getMDF_URL& (0+255),c
 13014  0056A6  C00E  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 13015  0056AA  0E06               	movlw	high __smallconst
 13016  0056AC  6EF7               	movwf	tblptrh,c
 13017  0056AE  0008               	tblrd		*
 13018  0056B0  50F5               	movf	tablat,w,c
 13019                           
 13020                           ; BSR set to: 0
 13021  0056B2  0012               	return	
 13022  0056B4                     __end_of_vscp_getMDF_URL:
 13023                           	opt stack 0
 13024                           tblptru	equ	0xFF8
 13025                           tblptrh	equ	0xFF7
 13026                           tblptrl	equ	0xFF6
 13027                           tablat	equ	0xFF5
 13028                           prodh	equ	0xFF4
 13029                           prodl	equ	0xFF3
 13030                           intcon	equ	0xFF2
 13031                           postinc0	equ	0xFEE
 13032                           wreg	equ	0xFE8
 13033                           indf1	equ	0xFE7
 13034                           postdec1	equ	0xFE5
 13035                           fsr1h	equ	0xFE2
 13036                           fsr1l	equ	0xFE1
 13037                           indf2	equ	0xFDF
 13038                           postinc2	equ	0xFDE
 13039                           postdec2	equ	0xFDD
 13040                           plusw2	equ	0xFDB
 13041                           fsr2h	equ	0xFDA
 13042                           fsr2l	equ	0xFD9
 13043                           status	equ	0xFD8
 13044                           
 13045 ;; *************** function _vscp_getGUID *****************
 13046 ;; Defined at:
 13047 ;;		line 2642 in file "../main.c"
 13048 ;; Parameters:    Size  Location     Type
 13049 ;;  idx             1    wreg     unsigned char 
 13050 ;; Auto vars:     Size  Location     Type
 13051 ;;  idx             1   23[COMRAM] unsigned char 
 13052 ;; Return value:  Size  Location     Type
 13053 ;;                  1    wreg      unsigned char 
 13054 ;; Registers used:
 13055 ;;		wreg, status,2, status,0, cstack
 13056 ;; Tracked objects:
 13057 ;;		On entry : 0/0
 13058 ;;		On exit  : 0/0
 13059 ;;		Unchanged: 0/0
 13060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13061 ;;      Params:         0       0       0       0       0       0       0
 13062 ;;      Locals:         1       0       0       0       0       0       0
 13063 ;;      Temps:          0       0       0       0       0       0       0
 13064 ;;      Totals:         1       0       0       0       0       0       0
 13065 ;;Total ram usage:        1 bytes
 13066 ;; Hardware stack levels used:    1
 13067 ;; Hardware stack levels required when called:    3
 13068 ;; This function calls:
 13069 ;;		_Read_b_eep
 13070 ;; This function is called by:
 13071 ;;		_vscp_readStdReg
 13072 ;;		_vscp_writeStdReg
 13073 ;;		_vscp_handleProtocolEvent
 13074 ;; This function uses a non-reentrant model
 13075 ;;
 13076                           
 13077                           	psect	text54
 13078  00570A                     __ptext54:
 13079                           	opt stack 0
 13080  00570A                     _vscp_getGUID:
 13081                           	opt stack 25
 13082                           
 13083                           ; BSR set to: 0
 13084                           ;incstack = 0
 13085                           ;incstack = 0
 13086                           ;vscp_getGUID@idx stored from wreg
 13087  00570A  CFE8 F018          	movff	wreg,vscp_getGUID@idx
 13088                           
 13089                           ;main.c: 2643: return Read_b_eep(0x12 + idx);
 13090  00570E  0E12               	movlw	18
 13091  005710  2418               	addwf	vscp_getGUID@idx,w,c
 13092  005712  6E16               	movwf	?_Read_b_eep,c
 13093  005714  6A17               	clrf	?_Read_b_eep+1,c
 13094  005716  0E00               	movlw	0
 13095  005718  2217               	addwfc	?_Read_b_eep+1,f,c
 13096  00571A  EF8F  F02B         	goto	_Read_b_eep	;wreg free
 13097  00571E                     __end_of_vscp_getGUID:
 13098                           	opt stack 0
 13099                           tblptru	equ	0xFF8
 13100                           tblptrh	equ	0xFF7
 13101                           tblptrl	equ	0xFF6
 13102                           tablat	equ	0xFF5
 13103                           prodh	equ	0xFF4
 13104                           prodl	equ	0xFF3
 13105                           intcon	equ	0xFF2
 13106                           postinc0	equ	0xFEE
 13107                           wreg	equ	0xFE8
 13108                           indf1	equ	0xFE7
 13109                           postdec1	equ	0xFE5
 13110                           fsr1h	equ	0xFE2
 13111                           fsr1l	equ	0xFE1
 13112                           indf2	equ	0xFDF
 13113                           postinc2	equ	0xFDE
 13114                           postdec2	equ	0xFDD
 13115                           plusw2	equ	0xFDB
 13116                           fsr2h	equ	0xFDA
 13117                           fsr2l	equ	0xFD9
 13118                           status	equ	0xFD8
 13119                           
 13120 ;; *************** function _vscp_getSubMinorVersion *****************
 13121 ;; Defined at:
 13122 ;;		line 2631 in file "../main.c"
 13123 ;; Parameters:    Size  Location     Type
 13124 ;;		None
 13125 ;; Auto vars:     Size  Location     Type
 13126 ;;		None
 13127 ;; Return value:  Size  Location     Type
 13128 ;;                  1    wreg      unsigned char 
 13129 ;; Registers used:
 13130 ;;		wreg
 13131 ;; Tracked objects:
 13132 ;;		On entry : F/0
 13133 ;;		On exit  : F/0
 13134 ;;		Unchanged: F/0
 13135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13136 ;;      Params:         0       0       0       0       0       0       0
 13137 ;;      Locals:         0       0       0       0       0       0       0
 13138 ;;      Temps:          0       0       0       0       0       0       0
 13139 ;;      Totals:         0       0       0       0       0       0       0
 13140 ;;Total ram usage:        0 bytes
 13141 ;; Hardware stack levels used:    1
 13142 ;; Hardware stack levels required when called:    2
 13143 ;; This function calls:
 13144 ;;		Nothing
 13145 ;; This function is called by:
 13146 ;;		_vscp_readStdReg
 13147 ;; This function uses a non-reentrant model
 13148 ;;
 13149                           
 13150                           	psect	text55
 13151  0057AA                     __ptext55:
 13152                           	opt stack 0
 13153  0057AA                     _vscp_getSubMinorVersion:
 13154                           	opt stack 26
 13155                           
 13156                           ; BSR set to: 0
 13157                           
 13158                           ; BSR set to: 0
 13159                           ;main.c: 2632: return 2;
 13160                           
 13161                           ;incstack = 0
 13162                           ;incstack = 0
 13163  0057AA  0C02               	retlw	2
 13164  0057AC                     __end_of_vscp_getSubMinorVersion:
 13165                           	opt stack 0
 13166                           tblptru	equ	0xFF8
 13167                           tblptrh	equ	0xFF7
 13168                           tblptrl	equ	0xFF6
 13169                           tablat	equ	0xFF5
 13170                           prodh	equ	0xFF4
 13171                           prodl	equ	0xFF3
 13172                           intcon	equ	0xFF2
 13173                           postinc0	equ	0xFEE
 13174                           wreg	equ	0xFE8
 13175                           indf1	equ	0xFE7
 13176                           postdec1	equ	0xFE5
 13177                           fsr1h	equ	0xFE2
 13178                           fsr1l	equ	0xFE1
 13179                           indf2	equ	0xFDF
 13180                           postinc2	equ	0xFDE
 13181                           postdec2	equ	0xFDD
 13182                           plusw2	equ	0xFDB
 13183                           fsr2h	equ	0xFDA
 13184                           fsr2l	equ	0xFD9
 13185                           status	equ	0xFD8
 13186                           
 13187 ;; *************** function _vscp_getMinorVersion *****************
 13188 ;; Defined at:
 13189 ;;		line 2622 in file "../main.c"
 13190 ;; Parameters:    Size  Location     Type
 13191 ;;		None
 13192 ;; Auto vars:     Size  Location     Type
 13193 ;;		None
 13194 ;; Return value:  Size  Location     Type
 13195 ;;                  1    wreg      unsigned char 
 13196 ;; Registers used:
 13197 ;;		wreg
 13198 ;; Tracked objects:
 13199 ;;		On entry : F/0
 13200 ;;		On exit  : F/0
 13201 ;;		Unchanged: F/0
 13202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13203 ;;      Params:         0       0       0       0       0       0       0
 13204 ;;      Locals:         0       0       0       0       0       0       0
 13205 ;;      Temps:          0       0       0       0       0       0       0
 13206 ;;      Totals:         0       0       0       0       0       0       0
 13207 ;;Total ram usage:        0 bytes
 13208 ;; Hardware stack levels used:    1
 13209 ;; Hardware stack levels required when called:    2
 13210 ;; This function calls:
 13211 ;;		Nothing
 13212 ;; This function is called by:
 13213 ;;		_vscp_readStdReg
 13214 ;; This function uses a non-reentrant model
 13215 ;;
 13216                           
 13217                           	psect	text56
 13218  0057AC                     __ptext56:
 13219                           	opt stack 0
 13220  0057AC                     _vscp_getMinorVersion:
 13221                           	opt stack 26
 13222                           
 13223                           ; BSR set to: 0
 13224                           
 13225                           ; BSR set to: 0
 13226                           ;main.c: 2623: return 2;
 13227                           
 13228                           ; BSR set to: 0
 13229                           ;incstack = 0
 13230                           ;incstack = 0
 13231  0057AC  0C02               	retlw	2
 13232  0057AE                     __end_of_vscp_getMinorVersion:
 13233                           	opt stack 0
 13234                           tblptru	equ	0xFF8
 13235                           tblptrh	equ	0xFF7
 13236                           tblptrl	equ	0xFF6
 13237                           tablat	equ	0xFF5
 13238                           prodh	equ	0xFF4
 13239                           prodl	equ	0xFF3
 13240                           intcon	equ	0xFF2
 13241                           postinc0	equ	0xFEE
 13242                           wreg	equ	0xFE8
 13243                           indf1	equ	0xFE7
 13244                           postdec1	equ	0xFE5
 13245                           fsr1h	equ	0xFE2
 13246                           fsr1l	equ	0xFE1
 13247                           indf2	equ	0xFDF
 13248                           postinc2	equ	0xFDE
 13249                           postdec2	equ	0xFDD
 13250                           plusw2	equ	0xFDB
 13251                           fsr2h	equ	0xFDA
 13252                           fsr2l	equ	0xFD9
 13253                           status	equ	0xFD8
 13254                           
 13255 ;; *************** function _vscp_getMajorVersion *****************
 13256 ;; Defined at:
 13257 ;;		line 2613 in file "../main.c"
 13258 ;; Parameters:    Size  Location     Type
 13259 ;;		None
 13260 ;; Auto vars:     Size  Location     Type
 13261 ;;		None
 13262 ;; Return value:  Size  Location     Type
 13263 ;;                  1    wreg      unsigned char 
 13264 ;; Registers used:
 13265 ;;		wreg
 13266 ;; Tracked objects:
 13267 ;;		On entry : F/0
 13268 ;;		On exit  : F/0
 13269 ;;		Unchanged: F/0
 13270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13271 ;;      Params:         0       0       0       0       0       0       0
 13272 ;;      Locals:         0       0       0       0       0       0       0
 13273 ;;      Temps:          0       0       0       0       0       0       0
 13274 ;;      Totals:         0       0       0       0       0       0       0
 13275 ;;Total ram usage:        0 bytes
 13276 ;; Hardware stack levels used:    1
 13277 ;; Hardware stack levels required when called:    2
 13278 ;; This function calls:
 13279 ;;		Nothing
 13280 ;; This function is called by:
 13281 ;;		_vscp_readStdReg
 13282 ;; This function uses a non-reentrant model
 13283 ;;
 13284                           
 13285                           	psect	text57
 13286  0057AE                     __ptext57:
 13287                           	opt stack 0
 13288  0057AE                     _vscp_getMajorVersion:
 13289                           	opt stack 26
 13290                           
 13291                           ; BSR set to: 0
 13292                           
 13293                           ; BSR set to: 0
 13294                           ;main.c: 2614: return 1;
 13295                           
 13296                           ; BSR set to: 0
 13297                           ;incstack = 0
 13298                           ;incstack = 0
 13299  0057AE  0C01               	retlw	1
 13300  0057B0                     __end_of_vscp_getMajorVersion:
 13301                           	opt stack 0
 13302                           tblptru	equ	0xFF8
 13303                           tblptrh	equ	0xFF7
 13304                           tblptrl	equ	0xFF6
 13305                           tablat	equ	0xFF5
 13306                           prodh	equ	0xFF4
 13307                           prodl	equ	0xFF3
 13308                           intcon	equ	0xFF2
 13309                           postinc0	equ	0xFEE
 13310                           wreg	equ	0xFE8
 13311                           indf1	equ	0xFE7
 13312                           postdec1	equ	0xFE5
 13313                           fsr1h	equ	0xFE2
 13314                           fsr1l	equ	0xFE1
 13315                           indf2	equ	0xFDF
 13316                           postinc2	equ	0xFDE
 13317                           postdec2	equ	0xFDD
 13318                           plusw2	equ	0xFDB
 13319                           fsr2h	equ	0xFDA
 13320                           fsr2l	equ	0xFD9
 13321                           status	equ	0xFD8
 13322                           
 13323 ;; *************** function _vscp_newNodeOnline *****************
 13324 ;; Defined at:
 13325 ;;		line 491 in file "../../vscp_firmware/common/vscp_firmware.c"
 13326 ;; Parameters:    Size  Location     Type
 13327 ;;		None
 13328 ;; Auto vars:     Size  Location     Type
 13329 ;;		None
 13330 ;; Return value:  Size  Location     Type
 13331 ;;		None               void
 13332 ;; Registers used:
 13333 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13334 ;; Tracked objects:
 13335 ;;		On entry : F/0
 13336 ;;		On exit  : 0/0
 13337 ;;		Unchanged: 0/0
 13338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13339 ;;      Params:         0       0       0       0       0       0       0
 13340 ;;      Locals:         0       0       0       0       0       0       0
 13341 ;;      Temps:          1       0       0       0       0       0       0
 13342 ;;      Totals:         1       0       0       0       0       0       0
 13343 ;;Total ram usage:        1 bytes
 13344 ;; Hardware stack levels used:    1
 13345 ;; Hardware stack levels required when called:    7
 13346 ;; This function calls:
 13347 ;;		_vscp_sendEvent
 13348 ;; This function is called by:
 13349 ;;		_vscp_handleProtocolEvent
 13350 ;; This function uses a non-reentrant model
 13351 ;;
 13352                           
 13353                           	psect	text58
 13354  005460                     __ptext58:
 13355                           	opt stack 0
 13356  005460                     _vscp_newNodeOnline:
 13357                           	opt stack 22
 13358                           
 13359                           ; BSR set to: 0
 13360                           ;vscp_firmware.c: 492: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 13361                           ;vscp_firmware.c: 493: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 13362                           
 13363                           ; BSR set to: 0
 13364                           ;incstack = 0
 13365                           ;incstack = 0
 13366  005460  C0BD  F044         	movff	_vscp_imsg,??_vscp_newNodeOnline
 13367  005464  0E0F               	movlw	15
 13368  005466  1644               	andwf	??_vscp_newNodeOnline,f,c
 13369  005468  0444               	decf	??_vscp_newNodeOnline,w,c
 13370  00546A  E10E               	bnz	l1076
 13371                           
 13372                           ; BSR set to: 0
 13373  00546C  51BB               	movf	_vscp_nickname& (0+255),w,b
 13374  00546E  EE20  F0C3         	lfsr	2,_vscp_imsg+6
 13375  005472  62DF               	cpfseq	indf2,c
 13376  005474  D009               	goto	l1076
 13377                           
 13378                           ; BSR set to: 0
 13379                           ;vscp_firmware.c: 499: vscp_omsg.flags = 0x80;
 13380  005476  0E80               	movlw	128
 13381  005478  6FCB               	movwf	_vscp_omsg& (0+255),b
 13382                           
 13383                           ; BSR set to: 0
 13384                           ;vscp_firmware.c: 500: vscp_omsg.priority = 0x00;
 13385  00547A  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
 13386                           
 13387                           ; BSR set to: 0
 13388                           ;vscp_firmware.c: 501: vscp_omsg.vscp_class = 0;
 13389  00547C  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
 13390  00547E  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
 13391                           
 13392                           ;vscp_firmware.c: 502: vscp_omsg.vscp_type = 3;
 13393  005480  0E03               	movlw	3
 13394  005482  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
 13395                           
 13396                           ; BSR set to: 0
 13397                           ;vscp_firmware.c: 503: vscp_sendEvent();
 13398  005484  ECEE  F029         	call	_vscp_sendEvent	;wreg free
 13399  005488                     l1076:
 13400  005488  0012               	return	
 13401  00548A                     __end_of_vscp_newNodeOnline:
 13402                           	opt stack 0
 13403                           tblptru	equ	0xFF8
 13404                           tblptrh	equ	0xFF7
 13405                           tblptrl	equ	0xFF6
 13406                           tablat	equ	0xFF5
 13407                           prodh	equ	0xFF4
 13408                           prodl	equ	0xFF3
 13409                           intcon	equ	0xFF2
 13410                           postinc0	equ	0xFEE
 13411                           wreg	equ	0xFE8
 13412                           indf1	equ	0xFE7
 13413                           postdec1	equ	0xFE5
 13414                           fsr1h	equ	0xFE2
 13415                           fsr1l	equ	0xFE1
 13416                           indf2	equ	0xFDF
 13417                           postinc2	equ	0xFDE
 13418                           postdec2	equ	0xFDD
 13419                           plusw2	equ	0xFDB
 13420                           fsr2h	equ	0xFDA
 13421                           fsr2l	equ	0xFD9
 13422                           status	equ	0xFD8
 13423                           
 13424 ;; *************** function _vscp_handleDropNickname *****************
 13425 ;; Defined at:
 13426 ;;		line 425 in file "../../vscp_firmware/common/vscp_firmware.c"
 13427 ;; Parameters:    Size  Location     Type
 13428 ;;		None
 13429 ;; Auto vars:     Size  Location     Type
 13430 ;;  bytes           1   23[COMRAM] unsigned char 
 13431 ;; Return value:  Size  Location     Type
 13432 ;;		None               void
 13433 ;; Registers used:
 13434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13435 ;; Tracked objects:
 13436 ;;		On entry : F/0
 13437 ;;		On exit  : E/0
 13438 ;;		Unchanged: 0/0
 13439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13440 ;;      Params:         0       0       0       0       0       0       0
 13441 ;;      Locals:         1       0       0       0       0       0       0
 13442 ;;      Temps:          0       0       0       0       0       0       0
 13443 ;;      Totals:         1       0       0       0       0       0       0
 13444 ;;Total ram usage:        1 bytes
 13445 ;; Hardware stack levels used:    1
 13446 ;; Hardware stack levels required when called:    5
 13447 ;; This function calls:
 13448 ;;		_vscp_init
 13449 ;;		_vscp_writeNicknamePermanent
 13450 ;; This function is called by:
 13451 ;;		_vscp_handleProtocolEvent
 13452 ;; This function uses a non-reentrant model
 13453 ;;
 13454                           
 13455                           	psect	text59
 13456  0053AC                     __ptext59:
 13457                           	opt stack 0
 13458  0053AC                     _vscp_handleDropNickname:
 13459                           	opt stack 24
 13460                           
 13461                           ; BSR set to: 0
 13462                           ;vscp_firmware.c: 426: uint8_t bytes = vscp_imsg.flags & 0x0f;
 13463                           
 13464                           ;incstack = 0
 13465                           ;incstack = 0
 13466  0053AC  51BD               	movf	_vscp_imsg& (0+255),w,b
 13467  0053AE  0B0F               	andlw	15
 13468  0053B0  6E18               	movwf	vscp_handleDropNickname@bytes,c
 13469                           
 13470                           ; BSR set to: 0
 13471                           ;vscp_firmware.c: 432: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 13472  0053B2  5018               	movf	vscp_handleDropNickname@bytes,w,c
 13473  0053B4  E012               	bz	l1072
 13474                           
 13475                           ; BSR set to: 0
 13476  0053B6  51BB               	movf	_vscp_nickname& (0+255),w,b
 13477  0053B8  EE20  F0C3         	lfsr	2,_vscp_imsg+6
 13478  0053BC  62DF               	cpfseq	indf2,c
 13479  0053BE  D00D               	goto	l1072
 13480                           
 13481                           ; BSR set to: 0
 13482                           ;vscp_firmware.c: 465: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 13483  0053C0  0418               	decf	vscp_handleDropNickname@bytes,w,c
 13484  0053C2  E005               	bz	l1071
 13485                           
 13486                           ; BSR set to: 0
 13487  0053C4  0E01               	movlw	1
 13488  0053C6  6418               	cpfsgt	vscp_handleDropNickname@bytes,c
 13489  0053C8  D008               	goto	l1072
 13490                           
 13491                           ; BSR set to: 0
 13492  0053CA  67C4               	tstfsz	(_vscp_imsg+7)& (0+255),b
 13493  0053CC  D006               	goto	l1072
 13494  0053CE                     l1071:
 13495                           
 13496                           ; BSR set to: 0
 13497                           ;vscp_firmware.c: 467: vscp_nickname = 0xff;
 13498  0053CE  69BB               	setf	_vscp_nickname& (0+255),b
 13499                           
 13500                           ; BSR set to: 0
 13501                           ;vscp_firmware.c: 468: vscp_writeNicknamePermanent(0xff);
 13502  0053D0  0EFF               	movlw	255
 13503  0053D2  EC66  F02B         	call	_vscp_writeNicknamePermanent
 13504                           
 13505                           ;vscp_firmware.c: 469: vscp_init();
 13506  0053D6  EC6C  F028         	call	_vscp_init	;wreg free
 13507  0053DA                     l1072:
 13508  0053DA  0012               	return	
 13509  0053DC                     __end_of_vscp_handleDropNickname:
 13510                           	opt stack 0
 13511                           tblptru	equ	0xFF8
 13512                           tblptrh	equ	0xFF7
 13513                           tblptrl	equ	0xFF6
 13514                           tablat	equ	0xFF5
 13515                           prodh	equ	0xFF4
 13516                           prodl	equ	0xFF3
 13517                           intcon	equ	0xFF2
 13518                           postinc0	equ	0xFEE
 13519                           wreg	equ	0xFE8
 13520                           indf1	equ	0xFE7
 13521                           postdec1	equ	0xFE5
 13522                           fsr1h	equ	0xFE2
 13523                           fsr1l	equ	0xFE1
 13524                           indf2	equ	0xFDF
 13525                           postinc2	equ	0xFDE
 13526                           postdec2	equ	0xFDD
 13527                           plusw2	equ	0xFDB
 13528                           fsr2h	equ	0xFDA
 13529                           fsr2l	equ	0xFD9
 13530                           status	equ	0xFD8
 13531                           
 13532 ;; *************** function _vscp_init *****************
 13533 ;; Defined at:
 13534 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 13535 ;; Parameters:    Size  Location     Type
 13536 ;;		None
 13537 ;; Auto vars:     Size  Location     Type
 13538 ;;		None
 13539 ;; Return value:  Size  Location     Type
 13540 ;;		None               void
 13541 ;; Registers used:
 13542 ;;		wreg, status,2, cstack
 13543 ;; Tracked objects:
 13544 ;;		On entry : 0/0
 13545 ;;		On exit  : F/1
 13546 ;;		Unchanged: 0/0
 13547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13548 ;;      Params:         0       0       0       0       0       0       0
 13549 ;;      Locals:         0       0       0       0       0       0       0
 13550 ;;      Temps:          0       0       0       0       0       0       0
 13551 ;;      Totals:         0       0       0       0       0       0       0
 13552 ;;Total ram usage:        0 bytes
 13553 ;; Hardware stack levels used:    1
 13554 ;; Hardware stack levels required when called:    4
 13555 ;; This function calls:
 13556 ;;		_vscp_readNicknamePermanent
 13557 ;; This function is called by:
 13558 ;;		_main
 13559 ;;		_vscp_handleDropNickname
 13560 ;;		_vscp_handleProtocolEvent
 13561 ;; This function uses a non-reentrant model
 13562 ;;
 13563                           
 13564                           	psect	text60
 13565  0050D8                     __ptext60:
 13566                           	opt stack 0
 13567  0050D8                     _vscp_init:
 13568                           	opt stack 24
 13569                           
 13570                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 13571                           
 13572                           ;incstack = 0
 13573                           ;incstack = 0
 13574  0050D8  0E02               	movlw	2
 13575  0050DA  6E4D               	movwf	_vscp_initledfunc,c
 13576                           
 13577                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 13578  0050DC  ECBE  F02B         	call	_vscp_readNicknamePermanent	;wreg free
 13579  0050E0  0100               	movlb	0	; () banked
 13580  0050E2  6FBB               	movwf	_vscp_nickname& (0+255),b
 13581                           
 13582                           ; BSR set to: 0
 13583                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 13584  0050E4  67BB               	tstfsz	_vscp_nickname& (0+255),b
 13585  0050E6  D001               	goto	l1016
 13586                           
 13587                           ; BSR set to: 0
 13588  0050E8  69BB               	setf	_vscp_nickname& (0+255),b
 13589  0050EA                     l1016:
 13590                           
 13591                           ; BSR set to: 0
 13592                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 13593  0050EA  6BBD               	clrf	_vscp_imsg& (0+255),b
 13594                           
 13595                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 13596  0050EC  6BBE               	clrf	(_vscp_imsg+1)& (0+255),b
 13597                           
 13598                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 13599  0050EE  6BBF               	clrf	(_vscp_imsg+2)& (0+255),b
 13600  0050F0  6BC0               	clrf	(_vscp_imsg+3)& (0+255),b
 13601                           
 13602                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 13603  0050F2  6BC1               	clrf	(_vscp_imsg+4)& (0+255),b
 13604                           
 13605                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 13606  0050F4  6BCB               	clrf	_vscp_omsg& (0+255),b
 13607                           
 13608                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 13609  0050F6  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
 13610                           
 13611                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 13612  0050F8  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
 13613  0050FA  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
 13614                           
 13615                           ;vscp_firmware.c: 138: vscp_omsg.vscp_type = 0;
 13616  0050FC  6BCF               	clrf	(_vscp_omsg+4)& (0+255),b
 13617                           
 13618                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 13619  0050FE  6A4B               	clrf	_vscp_errorcnt,c
 13620                           
 13621                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 13622  005100  6A4A               	clrf	_vscp_alarmstatus,c
 13623                           
 13624                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 13625  005102  6A4F               	clrf	_vscp_probe_address,c
 13626                           
 13627                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 13628  005104  6BBC               	clrf	_vscp_node_state& (0+255),b
 13629                           
 13630                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 13631  005106  6A4E               	clrf	_vscp_node_substate,c
 13632                           
 13633                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 13634  005108  6A50               	clrf	_vscp_probe_cnt,c
 13635                           
 13636                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 13637  00510A  6A46               	clrf	_vscp_page_select,c
 13638  00510C  6A47               	clrf	_vscp_page_select+1,c
 13639                           
 13640                           ;vscp_firmware.c: 153: vscp_timer = 0;
 13641  00510E  0101               	movlb	1	; () banked
 13642  005110  6B1E               	clrf	_vscp_timer& (0+255),b	;volatile
 13643  005112  6B1F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 13644                           
 13645                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 13646  005114  6B1C               	clrf	_vscp_configtimer& (0+255),b	;volatile
 13647  005116  6B1D               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 13648                           
 13649                           ;vscp_firmware.c: 155: vscp_second = 0;
 13650  005118  6A51               	clrf	_vscp_second,c
 13651                           
 13652                           ;vscp_firmware.c: 156: vscp_minute = 0;
 13653  00511A  6B21               	clrf	_vscp_minute& (0+255),b
 13654                           
 13655                           ;vscp_firmware.c: 157: vscp_hour = 0;
 13656  00511C  6B20               	clrf	_vscp_hour& (0+255),b
 13657                           
 13658                           ; BSR set to: 1
 13659  00511E  0012               	return	
 13660  005120                     __end_of_vscp_init:
 13661                           	opt stack 0
 13662                           tblptru	equ	0xFF8
 13663                           tblptrh	equ	0xFF7
 13664                           tblptrl	equ	0xFF6
 13665                           tablat	equ	0xFF5
 13666                           prodh	equ	0xFF4
 13667                           prodl	equ	0xFF3
 13668                           intcon	equ	0xFF2
 13669                           postinc0	equ	0xFEE
 13670                           wreg	equ	0xFE8
 13671                           indf1	equ	0xFE7
 13672                           postdec1	equ	0xFE5
 13673                           fsr1h	equ	0xFE2
 13674                           fsr1l	equ	0xFE1
 13675                           indf2	equ	0xFDF
 13676                           postinc2	equ	0xFDE
 13677                           postdec2	equ	0xFDD
 13678                           plusw2	equ	0xFDB
 13679                           fsr2h	equ	0xFDA
 13680                           fsr2l	equ	0xFD9
 13681                           status	equ	0xFD8
 13682                           
 13683 ;; *************** function _vscp_readNicknamePermanent *****************
 13684 ;; Defined at:
 13685 ;;		line 2816 in file "../main.c"
 13686 ;; Parameters:    Size  Location     Type
 13687 ;;		None
 13688 ;; Auto vars:     Size  Location     Type
 13689 ;;		None
 13690 ;; Return value:  Size  Location     Type
 13691 ;;                  1    wreg      unsigned char 
 13692 ;; Registers used:
 13693 ;;		wreg, status,2, cstack
 13694 ;; Tracked objects:
 13695 ;;		On entry : 0/0
 13696 ;;		On exit  : 0/0
 13697 ;;		Unchanged: 0/0
 13698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13699 ;;      Params:         0       0       0       0       0       0       0
 13700 ;;      Locals:         0       0       0       0       0       0       0
 13701 ;;      Temps:          0       0       0       0       0       0       0
 13702 ;;      Totals:         0       0       0       0       0       0       0
 13703 ;;Total ram usage:        0 bytes
 13704 ;; Hardware stack levels used:    1
 13705 ;; Hardware stack levels required when called:    3
 13706 ;; This function calls:
 13707 ;;		_Read_b_eep
 13708 ;; This function is called by:
 13709 ;;		_vscp_init
 13710 ;; This function uses a non-reentrant model
 13711 ;;
 13712                           
 13713                           	psect	text61
 13714  00577C                     __ptext61:
 13715                           	opt stack 0
 13716  00577C                     _vscp_readNicknamePermanent:
 13717                           	opt stack 24
 13718                           
 13719                           ;main.c: 2817: return Read_b_eep(0x01);
 13720                           
 13721                           ; BSR set to: 1
 13722                           ;incstack = 0
 13723                           ;incstack = 0
 13724  00577C  6A17               	clrf	?_Read_b_eep+1,c
 13725  00577E  0E01               	movlw	1
 13726  005780  6E16               	movwf	?_Read_b_eep,c
 13727  005782  EF8F  F02B         	goto	_Read_b_eep	;wreg free
 13728  005786                     __end_of_vscp_readNicknamePermanent:
 13729                           	opt stack 0
 13730                           tblptru	equ	0xFF8
 13731                           tblptrh	equ	0xFF7
 13732                           tblptrl	equ	0xFF6
 13733                           tablat	equ	0xFF5
 13734                           prodh	equ	0xFF4
 13735                           prodl	equ	0xFF3
 13736                           intcon	equ	0xFF2
 13737                           postinc0	equ	0xFEE
 13738                           wreg	equ	0xFE8
 13739                           indf1	equ	0xFE7
 13740                           postdec1	equ	0xFE5
 13741                           fsr1h	equ	0xFE2
 13742                           fsr1l	equ	0xFE1
 13743                           indf2	equ	0xFDF
 13744                           postinc2	equ	0xFDE
 13745                           postdec2	equ	0xFDD
 13746                           plusw2	equ	0xFDB
 13747                           fsr2h	equ	0xFDA
 13748                           fsr2l	equ	0xFD9
 13749                           status	equ	0xFD8
 13750                           
 13751 ;; *************** function _Read_b_eep *****************
 13752 ;; Defined at:
 13753 ;;		line 24 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/EEP/read_B.c"
 13754 ;; Parameters:    Size  Location     Type
 13755 ;;  badd            2   21[COMRAM] unsigned int 
 13756 ;; Auto vars:     Size  Location     Type
 13757 ;;		None
 13758 ;; Return value:  Size  Location     Type
 13759 ;;                  1    wreg      unsigned char 
 13760 ;; Registers used:
 13761 ;;		wreg, status,2
 13762 ;; Tracked objects:
 13763 ;;		On entry : 0/0
 13764 ;;		On exit  : 0/0
 13765 ;;		Unchanged: 0/0
 13766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13767 ;;      Params:         2       0       0       0       0       0       0
 13768 ;;      Locals:         0       0       0       0       0       0       0
 13769 ;;      Temps:          0       0       0       0       0       0       0
 13770 ;;      Totals:         2       0       0       0       0       0       0
 13771 ;;Total ram usage:        2 bytes
 13772 ;; Hardware stack levels used:    1
 13773 ;; Hardware stack levels required when called:    2
 13774 ;; This function calls:
 13775 ;;		Nothing
 13776 ;; This function is called by:
 13777 ;;		_doWork
 13778 ;;		_doOneSecondWork
 13779 ;;		_sendTempEvent
 13780 ;;		_getCalibrationValue
 13781 ;;		_writeCoeffs2Ram
 13782 ;;		_handle_sync
 13783 ;;		_vscp_readAppReg
 13784 ;;		_vscp_writeAppReg
 13785 ;;		_vscp_getGUID
 13786 ;;		_vscp_getUserID
 13787 ;;		_vscp_getManufacturerId
 13788 ;;		_vscp_getZone
 13789 ;;		_vscp_getSubzone
 13790 ;;		_vscp_readNicknamePermanent
 13791 ;;		_vscp_getControlByte
 13792 ;; This function uses a non-reentrant model
 13793 ;;
 13794                           
 13795                           	psect	text62
 13796  00571E                     __ptext62:
 13797                           	opt stack 0
 13798  00571E                     _Read_b_eep:
 13799                           	opt stack 26
 13800                           
 13801                           ;incstack = 0
 13802                           ;incstack = 0
 13803  00571E  C016  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 13804  005722  9CA6               	bcf	4006,6,c	;volatile
 13805  005724  9EA6               	bcf	4006,7,c	;volatile
 13806  005726  80A6               	bsf	4006,0,c	;volatile
 13807  005728  F000               	nop		;# 
 13808  00572A  F000               	nop		;# 
 13809  00572C  50A8               	movf	4008,w,c	;volatile
 13810  00572E  0012               	return	
 13811  005730                     __end_of_Read_b_eep:
 13812                           	opt stack 0
 13813                           tblptru	equ	0xFF8
 13814                           tblptrh	equ	0xFF7
 13815                           tblptrl	equ	0xFF6
 13816                           tablat	equ	0xFF5
 13817                           prodh	equ	0xFF4
 13818                           prodl	equ	0xFF3
 13819                           intcon	equ	0xFF2
 13820                           postinc0	equ	0xFEE
 13821                           wreg	equ	0xFE8
 13822                           indf1	equ	0xFE7
 13823                           postdec1	equ	0xFE5
 13824                           fsr1h	equ	0xFE2
 13825                           fsr1l	equ	0xFE1
 13826                           indf2	equ	0xFDF
 13827                           postinc2	equ	0xFDE
 13828                           postdec2	equ	0xFDD
 13829                           plusw2	equ	0xFDB
 13830                           fsr2h	equ	0xFDA
 13831                           fsr2l	equ	0xFD9
 13832                           status	equ	0xFD8
 13833                           
 13834 ;; *************** function _vscp_handleSetNickname *****************
 13835 ;; Defined at:
 13836 ;;		line 409 in file "../../vscp_firmware/common/vscp_firmware.c"
 13837 ;; Parameters:    Size  Location     Type
 13838 ;;		None
 13839 ;; Auto vars:     Size  Location     Type
 13840 ;;		None
 13841 ;; Return value:  Size  Location     Type
 13842 ;;		None               void
 13843 ;; Registers used:
 13844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13845 ;; Tracked objects:
 13846 ;;		On entry : F/0
 13847 ;;		On exit  : 0/0
 13848 ;;		Unchanged: 0/0
 13849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13850 ;;      Params:         0       0       0       0       0       0       0
 13851 ;;      Locals:         0       0       0       0       0       0       0
 13852 ;;      Temps:          0       0       0       0       0       0       0
 13853 ;;      Totals:         0       0       0       0       0       0       0
 13854 ;;Total ram usage:        0 bytes
 13855 ;; Hardware stack levels used:    1
 13856 ;; Hardware stack levels required when called:    4
 13857 ;; This function calls:
 13858 ;;		_vscp_writeNicknamePermanent
 13859 ;; This function is called by:
 13860 ;;		_vscp_handleProtocolEvent
 13861 ;; This function uses a non-reentrant model
 13862 ;;
 13863                           
 13864                           	psect	text63
 13865  0055D6                     __ptext63:
 13866                           	opt stack 0
 13867  0055D6                     _vscp_handleSetNickname:
 13868                           	opt stack 25
 13869                           
 13870                           ; BSR set to: 0
 13871                           ;vscp_firmware.c: 410: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 13872                           ;vscp_firmware.c: 411: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 13873                           
 13874                           ;incstack = 0
 13875                           ;incstack = 0
 13876  0055D6  51BD               	movf	_vscp_imsg& (0+255),w,b
 13877  0055D8  0B0F               	andlw	15
 13878  0055DA  0A02               	xorlw	2
 13879  0055DC  E10A               	bnz	l1065
 13880                           
 13881                           ; BSR set to: 0
 13882  0055DE  51BB               	movf	_vscp_nickname& (0+255),w,b
 13883  0055E0  EE20  F0C3         	lfsr	2,_vscp_imsg+6
 13884  0055E4  62DF               	cpfseq	indf2,c
 13885  0055E6  D005               	goto	l1065
 13886                           
 13887                           ; BSR set to: 0
 13888                           ;vscp_firmware.c: 414: vscp_nickname = vscp_imsg.data[ 1 ];
 13889  0055E8  C0C4  F0BB         	movff	_vscp_imsg+7,_vscp_nickname
 13890                           
 13891                           ; BSR set to: 0
 13892                           ;vscp_firmware.c: 415: vscp_writeNicknamePermanent(vscp_nickname);
 13893  0055EC  51BB               	movf	_vscp_nickname& (0+255),w,b
 13894  0055EE  EC66  F02B         	call	_vscp_writeNicknamePermanent
 13895  0055F2                     l1065:
 13896  0055F2  0012               	return	
 13897  0055F4                     __end_of_vscp_handleSetNickname:
 13898                           	opt stack 0
 13899                           tblptru	equ	0xFF8
 13900                           tblptrh	equ	0xFF7
 13901                           tblptrl	equ	0xFF6
 13902                           tablat	equ	0xFF5
 13903                           prodh	equ	0xFF4
 13904                           prodl	equ	0xFF3
 13905                           intcon	equ	0xFF2
 13906                           postinc0	equ	0xFEE
 13907                           wreg	equ	0xFE8
 13908                           indf1	equ	0xFE7
 13909                           postdec1	equ	0xFE5
 13910                           fsr1h	equ	0xFE2
 13911                           fsr1l	equ	0xFE1
 13912                           indf2	equ	0xFDF
 13913                           postinc2	equ	0xFDE
 13914                           postdec2	equ	0xFDD
 13915                           plusw2	equ	0xFDB
 13916                           fsr2h	equ	0xFDA
 13917                           fsr2l	equ	0xFD9
 13918                           status	equ	0xFD8
 13919                           
 13920 ;; *************** function _vscp_handleHeartbeat *****************
 13921 ;; Defined at:
 13922 ;;		line 400 in file "../../vscp_firmware/common/vscp_firmware.c"
 13923 ;; Parameters:    Size  Location     Type
 13924 ;;		None
 13925 ;; Auto vars:     Size  Location     Type
 13926 ;;		None
 13927 ;; Return value:  Size  Location     Type
 13928 ;;		None               void
 13929 ;; Registers used:
 13930 ;;		None
 13931 ;; Tracked objects:
 13932 ;;		On entry : F/0
 13933 ;;		On exit  : F/0
 13934 ;;		Unchanged: F/0
 13935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13936 ;;      Params:         0       0       0       0       0       0       0
 13937 ;;      Locals:         0       0       0       0       0       0       0
 13938 ;;      Temps:          0       0       0       0       0       0       0
 13939 ;;      Totals:         0       0       0       0       0       0       0
 13940 ;;Total ram usage:        0 bytes
 13941 ;; Hardware stack levels used:    1
 13942 ;; Hardware stack levels required when called:    2
 13943 ;; This function calls:
 13944 ;;		Nothing
 13945 ;; This function is called by:
 13946 ;;		_vscp_handleProtocolEvent
 13947 ;; This function uses a non-reentrant model
 13948 ;;
 13949                           
 13950                           	psect	text64
 13951  0057B0                     __ptext64:
 13952                           	opt stack 0
 13953  0057B0                     _vscp_handleHeartbeat:
 13954                           	opt stack 27
 13955                           
 13956                           ; BSR set to: 0
 13957                           
 13958                           ;incstack = 0
 13959                           ;incstack = 0
 13960  0057B0  0012               	return	
 13961  0057B2                     __end_of_vscp_handleHeartbeat:
 13962                           	opt stack 0
 13963                           tblptru	equ	0xFF8
 13964                           tblptrh	equ	0xFF7
 13965                           tblptrl	equ	0xFF6
 13966                           tablat	equ	0xFF5
 13967                           prodh	equ	0xFF4
 13968                           prodl	equ	0xFF3
 13969                           intcon	equ	0xFF2
 13970                           postinc0	equ	0xFEE
 13971                           wreg	equ	0xFE8
 13972                           indf1	equ	0xFE7
 13973                           postdec1	equ	0xFE5
 13974                           fsr1h	equ	0xFE2
 13975                           fsr1l	equ	0xFE1
 13976                           indf2	equ	0xFDF
 13977                           postinc2	equ	0xFDE
 13978                           postdec2	equ	0xFDD
 13979                           plusw2	equ	0xFDB
 13980                           fsr2h	equ	0xFDA
 13981                           fsr2l	equ	0xFD9
 13982                           status	equ	0xFD8
 13983                           
 13984 ;; *************** function _vscp_goBootloaderMode *****************
 13985 ;; Defined at:
 13986 ;;		line 2797 in file "../main.c"
 13987 ;; Parameters:    Size  Location     Type
 13988 ;;  algorithm       1    wreg     unsigned char 
 13989 ;; Auto vars:     Size  Location     Type
 13990 ;;  algorithm       1   17[COMRAM] unsigned char 
 13991 ;; Return value:  Size  Location     Type
 13992 ;;		None               void
 13993 ;; Registers used:
 13994 ;;		wreg, status,2, status,0, cstack
 13995 ;; Tracked objects:
 13996 ;;		On entry : F/0
 13997 ;;		On exit  : 0/0
 13998 ;;		Unchanged: 0/0
 13999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14000 ;;      Params:         0       0       0       0       0       0       0
 14001 ;;      Locals:         1       0       0       0       0       0       0
 14002 ;;      Temps:          0       0       0       0       0       0       0
 14003 ;;      Totals:         1       0       0       0       0       0       0
 14004 ;;Total ram usage:        1 bytes
 14005 ;; Hardware stack levels used:    1
 14006 ;; Hardware stack levels required when called:    3
 14007 ;; This function calls:
 14008 ;;		_Busy_eep
 14009 ;;		_Write_b_eep
 14010 ;;		_ECANSetOperationMode
 14011 ;; This function is called by:
 14012 ;;		_vscp_handleProtocolEvent
 14013 ;; This function uses a non-reentrant model
 14014 ;;
 14015                           
 14016                           	psect	text65
 14017  005594                     __ptext65:
 14018                           	opt stack 0
 14019  005594                     _vscp_goBootloaderMode:
 14020                           	opt stack 26
 14021                           
 14022                           ; BSR set to: 0
 14023                           ;incstack = 0
 14024                           ;incstack = 0
 14025                           ;vscp_goBootloaderMode@algorithm stored from wreg
 14026  005594  CFE8 F012          	movff	wreg,vscp_goBootloaderMode@algorithm
 14027                           
 14028                           ; BSR set to: 0
 14029                           ;main.c: 2798: if ( 0x01 != algorithm ) return;
 14030  005598  0412               	decf	vscp_goBootloaderMode@algorithm,w,c
 14031  00559A  E10C               	bnz	l595
 14032                           
 14033                           ; BSR set to: 0
 14034                           ;main.c: 2802: (Busy_eep(), Write_b_eep(0x00,0xff));
 14035  00559C  ECC7  F02B         	call	_Busy_eep	;wreg free
 14036  0055A0  6A0F               	clrf	?_Write_b_eep+1,c
 14037  0055A2  6A0E               	clrf	?_Write_b_eep,c
 14038  0055A4  0EFF               	movlw	255
 14039  0055A6  6810               	setf	?_Write_b_eep+2,c
 14040  0055A8  ECA3  F029         	call	_Write_b_eep	;wreg free
 14041                           
 14042                           ;main.c: 2805: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 14043  0055AC  0E80               	movlw	128
 14044  0055AE  EC5A  F02B         	call	_ECANSetOperationMode
 14045  0055B2  00FF               	reset		;# 
 14046  0055B4                     l595:
 14047  0055B4  0012               	return	
 14048  0055B6                     __end_of_vscp_goBootloaderMode:
 14049                           	opt stack 0
 14050                           tblptru	equ	0xFF8
 14051                           tblptrh	equ	0xFF7
 14052                           tblptrl	equ	0xFF6
 14053                           tablat	equ	0xFF5
 14054                           prodh	equ	0xFF4
 14055                           prodl	equ	0xFF3
 14056                           intcon	equ	0xFF2
 14057                           postinc0	equ	0xFEE
 14058                           wreg	equ	0xFE8
 14059                           indf1	equ	0xFE7
 14060                           postdec1	equ	0xFE5
 14061                           fsr1h	equ	0xFE2
 14062                           fsr1l	equ	0xFE1
 14063                           indf2	equ	0xFDF
 14064                           postinc2	equ	0xFDE
 14065                           postdec2	equ	0xFDD
 14066                           plusw2	equ	0xFDB
 14067                           fsr2h	equ	0xFDA
 14068                           fsr2l	equ	0xFD9
 14069                           status	equ	0xFD8
 14070                           
 14071 ;; *************** function _vscp_getMatrixInfo *****************
 14072 ;; Defined at:
 14073 ;;		line 2732 in file "../main.c"
 14074 ;; Parameters:    Size  Location     Type
 14075 ;;  pData           1    wreg     PTR unsigned char 
 14076 ;;		 -> vscp_omsg(14), 
 14077 ;; Auto vars:     Size  Location     Type
 14078 ;;  pData           1   13[COMRAM] PTR unsigned char 
 14079 ;;		 -> vscp_omsg(14), 
 14080 ;;  i               1   14[COMRAM] unsigned char 
 14081 ;; Return value:  Size  Location     Type
 14082 ;;		None               void
 14083 ;; Registers used:
 14084 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14085 ;; Tracked objects:
 14086 ;;		On entry : F/0
 14087 ;;		On exit  : F/0
 14088 ;;		Unchanged: F/0
 14089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14090 ;;      Params:         0       0       0       0       0       0       0
 14091 ;;      Locals:         2       0       0       0       0       0       0
 14092 ;;      Temps:          0       0       0       0       0       0       0
 14093 ;;      Totals:         2       0       0       0       0       0       0
 14094 ;;Total ram usage:        2 bytes
 14095 ;; Hardware stack levels used:    1
 14096 ;; Hardware stack levels required when called:    2
 14097 ;; This function calls:
 14098 ;;		Nothing
 14099 ;; This function is called by:
 14100 ;;		_vscp_handleProtocolEvent
 14101 ;; This function uses a non-reentrant model
 14102 ;;
 14103                           
 14104                           	psect	text66
 14105  005682                     __ptext66:
 14106                           	opt stack 0
 14107  005682                     _vscp_getMatrixInfo:
 14108                           	opt stack 27
 14109                           
 14110                           ;incstack = 0
 14111                           ;incstack = 0
 14112                           ;vscp_getMatrixInfo@pData stored from wreg
 14113  005682  CFE8 F00E          	movff	wreg,vscp_getMatrixInfo@pData
 14114                           
 14115                           ; BSR set to: 0
 14116                           ;main.c: 2733: uint8_t i;
 14117                           ;main.c: 2737: for (i = 0; i < 8; i++) {
 14118  005686  6A0F               	clrf	vscp_getMatrixInfo@i,c
 14119  005688                     l9221:
 14120                           
 14121                           ; BSR set to: 0
 14122                           ;main.c: 2738: pData[ i ] = 0;
 14123  005688  500E               	movf	vscp_getMatrixInfo@pData,w,c
 14124  00568A  240F               	addwf	vscp_getMatrixInfo@i,w,c
 14125  00568C  6ED9               	movwf	fsr2l,c
 14126  00568E  6ADA               	clrf	fsr2h,c
 14127  005690  6ADF               	clrf	indf2,c
 14128                           
 14129                           ; BSR set to: 0
 14130  005692  2A0F               	incf	vscp_getMatrixInfo@i,f,c
 14131                           
 14132                           ; BSR set to: 0
 14133  005694  0E07               	movlw	7
 14134  005696  640F               	cpfsgt	vscp_getMatrixInfo@i,c
 14135  005698  D7F7               	goto	l9221
 14136                           
 14137                           ; BSR set to: 0
 14138  00569A  0C07               	retlw	7
 14139  00569C                     __end_of_vscp_getMatrixInfo:
 14140                           	opt stack 0
 14141                           tblptru	equ	0xFF8
 14142                           tblptrh	equ	0xFF7
 14143                           tblptrl	equ	0xFF6
 14144                           tablat	equ	0xFF5
 14145                           prodh	equ	0xFF4
 14146                           prodl	equ	0xFF3
 14147                           intcon	equ	0xFF2
 14148                           postinc0	equ	0xFEE
 14149                           wreg	equ	0xFE8
 14150                           indf1	equ	0xFE7
 14151                           postdec1	equ	0xFE5
 14152                           fsr1h	equ	0xFE2
 14153                           fsr1l	equ	0xFE1
 14154                           indf2	equ	0xFDF
 14155                           postinc2	equ	0xFDE
 14156                           postdec2	equ	0xFDD
 14157                           plusw2	equ	0xFDB
 14158                           fsr2h	equ	0xFDA
 14159                           fsr2l	equ	0xFD9
 14160                           status	equ	0xFD8
 14161                           
 14162 ;; *************** function _vscp_handleProbeState *****************
 14163 ;; Defined at:
 14164 ;;		line 206 in file "../../vscp_firmware/common/vscp_firmware.c"
 14165 ;; Parameters:    Size  Location     Type
 14166 ;;		None
 14167 ;; Auto vars:     Size  Location     Type
 14168 ;;		None
 14169 ;; Return value:  Size  Location     Type
 14170 ;;		None               void
 14171 ;; Registers used:
 14172 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14173 ;; Tracked objects:
 14174 ;;		On entry : 0/0
 14175 ;;		On exit  : F/0
 14176 ;;		Unchanged: 0/0
 14177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14178 ;;      Params:         0       0       0       0       0       0       0
 14179 ;;      Locals:         0       0       0       0       0       0       0
 14180 ;;      Temps:          0       0       0       0       0       0       0
 14181 ;;      Totals:         0       0       0       0       0       0       0
 14182 ;;Total ram usage:        0 bytes
 14183 ;; Hardware stack levels used:    1
 14184 ;; Hardware stack levels required when called:    8
 14185 ;; This function calls:
 14186 ;;		_vscp_goActiveState
 14187 ;;		_vscp_sendEvent
 14188 ;;		_vscp_writeNicknamePermanent
 14189 ;; This function is called by:
 14190 ;;		_main
 14191 ;; This function uses a non-reentrant model
 14192 ;;
 14193                           
 14194                           	psect	text67
 14195  004416                     __ptext67:
 14196                           	opt stack 0
 14197  004416                     _vscp_handleProbeState:
 14198                           	opt stack 22
 14199                           
 14200                           ;vscp_firmware.c: 207: switch (vscp_node_substate) {
 14201                           
 14202                           ; BSR set to: 0
 14203                           ;incstack = 0
 14204                           ;incstack = 0
 14205  004416  D055               	goto	l10807
 14206  004418                     l10739:
 14207                           
 14208                           ;vscp_firmware.c: 211: if (0xff != vscp_probe_address) {
 14209  004418  284F               	incf	_vscp_probe_address,w,c
 14210  00441A  E012               	bz	l10755
 14211                           
 14212                           ;vscp_firmware.c: 213: vscp_omsg.flags = 0x80 + 1;
 14213  00441C  0E81               	movlw	129
 14214  00441E  0100               	movlb	0	; () banked
 14215  004420  6FCB               	movwf	_vscp_omsg& (0+255),b
 14216                           
 14217                           ; BSR set to: 0
 14218                           ;vscp_firmware.c: 214: vscp_omsg.priority = 0x00;
 14219  004422  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
 14220                           
 14221                           ; BSR set to: 0
 14222                           ;vscp_firmware.c: 215: vscp_omsg.vscp_class = 0;
 14223  004424  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
 14224  004426  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
 14225                           
 14226                           ;vscp_firmware.c: 216: vscp_omsg.vscp_type = 2;
 14227  004428  0E02               	movlw	2
 14228  00442A  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
 14229                           
 14230                           ; BSR set to: 0
 14231                           ;vscp_firmware.c: 217: vscp_omsg.data[ 0 ] = vscp_probe_address;
 14232  00442C  C04F  F0D1         	movff	_vscp_probe_address,_vscp_omsg+6
 14233                           
 14234                           ; BSR set to: 0
 14235                           ;vscp_firmware.c: 220: vscp_sendEvent();
 14236  004430  ECEE  F029         	call	_vscp_sendEvent	;wreg free
 14237                           
 14238                           ;vscp_firmware.c: 222: vscp_node_substate = 0x01;
 14239  004434  0E01               	movlw	1
 14240  004436  6E4E               	movwf	_vscp_node_substate,c
 14241  004438                     l10753:
 14242                           
 14243                           ;vscp_firmware.c: 223: vscp_timer = 0;
 14244  004438  0101               	movlb	1	; () banked
 14245  00443A  6B1E               	clrf	_vscp_timer& (0+255),b	;volatile
 14246  00443C  6B1F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14247                           
 14248                           ;vscp_firmware.c: 225: }
 14249  00443E  D047               	goto	l1031
 14250  004440                     l10755:
 14251                           
 14252                           ;vscp_firmware.c: 226: else {
 14253                           ;vscp_firmware.c: 229: vscp_node_state = 0x04;
 14254  004440  0E04               	movlw	4
 14255  004442  0100               	movlb	0	; () banked
 14256  004444  6FBC               	movwf	_vscp_node_state& (0+255),b
 14257                           
 14258                           ;vscp_firmware.c: 232: vscp_omsg.flags = 0x80 + 1;
 14259  004446  0E81               	movlw	129
 14260  004448  6FCB               	movwf	_vscp_omsg& (0+255),b
 14261                           
 14262                           ; BSR set to: 0
 14263                           ;vscp_firmware.c: 233: vscp_omsg.data[ 0 ] = 0xff;
 14264  00444A  69D1               	setf	(_vscp_omsg+6)& (0+255),b
 14265                           
 14266                           ;vscp_firmware.c: 234: vscp_omsg.priority = 0x07;
 14267  00444C  0E07               	movlw	7
 14268  00444E  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
 14269                           
 14270                           ; BSR set to: 0
 14271                           ;vscp_firmware.c: 235: vscp_omsg.vscp_class = 0;
 14272  004450  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
 14273  004452  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
 14274                           
 14275                           ;vscp_firmware.c: 236: vscp_omsg.vscp_type = 3;
 14276  004454  0E03               	movlw	3
 14277  004456  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
 14278                           
 14279                           ; BSR set to: 0
 14280                           ;vscp_firmware.c: 239: vscp_sendEvent();
 14281  004458  ECEE  F029         	call	_vscp_sendEvent	;wreg free
 14282  00445C  D038               	goto	l1031
 14283  00445E                     l1032:
 14284                           
 14285                           ;vscp_firmware.c: 246: if (vscp_imsg.flags & 0x80) {
 14286  00445E  0100               	movlb	0	; () banked
 14287  004460  AFBD               	btfss	_vscp_imsg& (0+255),7,b
 14288  004462  D00F               	goto	l10779
 14289                           
 14290                           ; BSR set to: 0
 14291                           ;vscp_firmware.c: 249: if ((0 == vscp_imsg.vscp_class) &&
 14292                           ;vscp_firmware.c: 250: (3 == vscp_imsg.vscp_type)) {
 14293  004464  51C0               	movf	(_vscp_imsg+3)& (0+255),w,b
 14294  004466  11BF               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 14295  004468  E132               	bnz	l1031
 14296                           
 14297                           ; BSR set to: 0
 14298  00446A  51C1               	movf	(_vscp_imsg+4)& (0+255),w,b
 14299  00446C  0A03               	xorlw	3
 14300  00446E  E12F               	bnz	l1031
 14301                           
 14302                           ; BSR set to: 0
 14303                           ;vscp_firmware.c: 253: if (0 == vscp_probe_address) {
 14304  004470  664F               	tstfsz	_vscp_probe_address,c
 14305  004472  D003               	goto	l10773
 14306                           
 14307                           ; BSR set to: 0
 14308                           ;vscp_firmware.c: 257: vscp_node_state = 0x02;
 14309  004474  0E02               	movlw	2
 14310  004476  6FBC               	movwf	_vscp_node_state& (0+255),b
 14311  004478  D7DF               	goto	l10753
 14312  00447A                     l10773:
 14313                           
 14314                           ; BSR set to: 0
 14315                           ;vscp_firmware.c: 261: else {
 14316                           ;vscp_firmware.c: 264: vscp_probe_address++;
 14317  00447A  2A4F               	incf	_vscp_probe_address,f,c
 14318                           
 14319                           ; BSR set to: 0
 14320                           ;vscp_firmware.c: 265: vscp_node_substate = 0x00;
 14321  00447C  6A4E               	clrf	_vscp_node_substate,c
 14322  00447E                     l10777:
 14323                           
 14324                           ;vscp_firmware.c: 266: vscp_probe_cnt = 0;
 14325  00447E  6A50               	clrf	_vscp_probe_cnt,c
 14326  004480  D026               	goto	l1031
 14327  004482                     l10779:
 14328                           
 14329                           ; BSR set to: 0
 14330                           ;vscp_firmware.c: 271: else {
 14331                           ;vscp_firmware.c: 273: if (vscp_timer > 1000) {
 14332  004482  0EE9               	movlw	233
 14333  004484  0101               	movlb	1	; () banked
 14334  004486  5D1E               	subwf	_vscp_timer& (0+255),w,b	;volatile
 14335  004488  0E03               	movlw	3
 14336  00448A  591F               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 14337  00448C  E320               	bnc	l1031
 14338                           
 14339                           ; BSR set to: 1
 14340                           ;vscp_firmware.c: 275: vscp_probe_cnt++;
 14341  00448E  2A50               	incf	_vscp_probe_cnt,f,c
 14342                           
 14343                           ; BSR set to: 1
 14344                           ;vscp_firmware.c: 277: if (vscp_probe_cnt >= 3) {
 14345  004490  0E02               	movlw	2
 14346  004492  6450               	cpfsgt	_vscp_probe_cnt,c
 14347  004494  D014               	goto	l1039
 14348                           
 14349                           ; BSR set to: 1
 14350                           ;vscp_firmware.c: 280: if (0 == vscp_probe_address) {
 14351  004496  664F               	tstfsz	_vscp_probe_address,c
 14352  004498  D005               	goto	l1040
 14353                           
 14354                           ; BSR set to: 1
 14355                           ;vscp_firmware.c: 283: vscp_probe_address++;
 14356  00449A  2A4F               	incf	_vscp_probe_address,f,c
 14357                           
 14358                           ; BSR set to: 1
 14359                           ;vscp_firmware.c: 284: vscp_node_substate = 0x00;
 14360  00449C  6A4E               	clrf	_vscp_node_substate,c
 14361                           
 14362                           ; BSR set to: 1
 14363                           ;vscp_firmware.c: 285: vscp_timer = 0;
 14364  00449E  6B1E               	clrf	_vscp_timer& (0+255),b	;volatile
 14365  0044A0  6B1F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14366  0044A2  D7ED               	goto	l10777
 14367  0044A4                     l1040:
 14368                           
 14369                           ; BSR set to: 1
 14370                           ;vscp_firmware.c: 289: else {
 14371                           ;vscp_firmware.c: 292: vscp_nickname = vscp_probe_address;
 14372  0044A4  C04F  F0BB         	movff	_vscp_probe_address,_vscp_nickname
 14373                           
 14374                           ; BSR set to: 1
 14375                           ;vscp_firmware.c: 293: vscp_node_state = 0x03;
 14376  0044A8  0E03               	movlw	3
 14377  0044AA  0100               	movlb	0	; () banked
 14378  0044AC  6FBC               	movwf	_vscp_node_state& (0+255),b
 14379                           
 14380                           ; BSR set to: 0
 14381                           ;vscp_firmware.c: 294: vscp_node_substate = 0x00;
 14382  0044AE  6A4E               	clrf	_vscp_node_substate,c
 14383                           
 14384                           ; BSR set to: 0
 14385                           ;vscp_firmware.c: 295: vscp_writeNicknamePermanent(vscp_nickname);
 14386  0044B0  51BB               	movf	_vscp_nickname& (0+255),w,b
 14387  0044B2  EC66  F02B         	call	_vscp_writeNicknamePermanent
 14388                           
 14389                           ;vscp_firmware.c: 298: vscp_probe_cnt = 0;
 14390  0044B6  6A50               	clrf	_vscp_probe_cnt,c
 14391                           
 14392                           ;vscp_firmware.c: 299: vscp_goActiveState();
 14393  0044B8  ECFA  F02A         	call	_vscp_goActiveState	;wreg free
 14394  0044BC  D008               	goto	l1031
 14395  0044BE                     l1039:
 14396                           
 14397                           ;vscp_firmware.c: 303: else {
 14398                           ;vscp_firmware.c: 304: vscp_node_substate = 0x00;
 14399  0044BE  6A4E               	clrf	_vscp_node_substate,c
 14400  0044C0  D006               	goto	l1031
 14401  0044C2                     l10807:
 14402  0044C2  504E               	movf	_vscp_node_substate,w,c
 14403                           
 14404                           ; Switch size 1, requested type "space"
 14405                           ; Number of cases is 3, Range of values is 0 to 2
 14406                           ; switch strategies available:
 14407                           ; Name         Instructions Cycles
 14408                           ; simple_byte           10     6 (average)
 14409                           ;	Chosen strategy is simple_byte
 14410  0044C4  E0A9               	bz	l10739
 14411  0044C6  0A01               	xorlw	1	; case 1
 14412  0044C8  E0CA               	bz	l1032
 14413  0044CA  0A03               	xorlw	3	; case 2
 14414  0044CC  E1F8               	bnz	l1039
 14415  0044CE                     l1031:
 14416                           
 14417                           ;vscp_firmware.c: 319: vscp_imsg.flags = 0;
 14418  0044CE  0100               	movlb	0	; () banked
 14419  0044D0  6BBD               	clrf	_vscp_imsg& (0+255),b
 14420                           
 14421                           ; BSR set to: 0
 14422  0044D2  0012               	return	
 14423  0044D4                     __end_of_vscp_handleProbeState:
 14424                           	opt stack 0
 14425                           tblptru	equ	0xFF8
 14426                           tblptrh	equ	0xFF7
 14427                           tblptrl	equ	0xFF6
 14428                           tablat	equ	0xFF5
 14429                           prodh	equ	0xFF4
 14430                           prodl	equ	0xFF3
 14431                           intcon	equ	0xFF2
 14432                           postinc0	equ	0xFEE
 14433                           wreg	equ	0xFE8
 14434                           indf1	equ	0xFE7
 14435                           postdec1	equ	0xFE5
 14436                           fsr1h	equ	0xFE2
 14437                           fsr1l	equ	0xFE1
 14438                           indf2	equ	0xFDF
 14439                           postinc2	equ	0xFDE
 14440                           postdec2	equ	0xFDD
 14441                           plusw2	equ	0xFDB
 14442                           fsr2h	equ	0xFDA
 14443                           fsr2l	equ	0xFD9
 14444                           status	equ	0xFD8
 14445                           
 14446 ;; *************** function _vscp_goActiveState *****************
 14447 ;; Defined at:
 14448 ;;		line 362 in file "../../vscp_firmware/common/vscp_firmware.c"
 14449 ;; Parameters:    Size  Location     Type
 14450 ;;		None
 14451 ;; Auto vars:     Size  Location     Type
 14452 ;;		None
 14453 ;; Return value:  Size  Location     Type
 14454 ;;		None               void
 14455 ;; Registers used:
 14456 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14457 ;; Tracked objects:
 14458 ;;		On entry : 0/0
 14459 ;;		On exit  : 0/0
 14460 ;;		Unchanged: 0/0
 14461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14462 ;;      Params:         0       0       0       0       0       0       0
 14463 ;;      Locals:         0       0       0       0       0       0       0
 14464 ;;      Temps:          0       0       0       0       0       0       0
 14465 ;;      Totals:         0       0       0       0       0       0       0
 14466 ;;Total ram usage:        0 bytes
 14467 ;; Hardware stack levels used:    1
 14468 ;; Hardware stack levels required when called:    7
 14469 ;; This function calls:
 14470 ;;		_vscp_sendEvent
 14471 ;; This function is called by:
 14472 ;;		_main
 14473 ;;		_vscp_handleProbeState
 14474 ;; This function uses a non-reentrant model
 14475 ;;
 14476                           
 14477                           	psect	text68
 14478  0055F4                     __ptext68:
 14479                           	opt stack 0
 14480  0055F4                     _vscp_goActiveState:
 14481                           	opt stack 22
 14482                           
 14483                           ;vscp_firmware.c: 363: vscp_omsg.flags = 0x80 + 1;
 14484                           
 14485                           ; BSR set to: 0
 14486                           ;incstack = 0
 14487                           ;incstack = 0
 14488  0055F4  0E81               	movlw	129
 14489  0055F6  0100               	movlb	0	; () banked
 14490  0055F8  6FCB               	movwf	_vscp_omsg& (0+255),b
 14491                           
 14492                           ; BSR set to: 0
 14493                           ;vscp_firmware.c: 364: vscp_omsg.priority = 0x00;
 14494  0055FA  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
 14495                           
 14496                           ; BSR set to: 0
 14497                           ;vscp_firmware.c: 365: vscp_omsg.vscp_class = 0;
 14498  0055FC  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
 14499  0055FE  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
 14500                           
 14501                           ;vscp_firmware.c: 366: vscp_omsg.vscp_type = 2;
 14502  005600  0E02               	movlw	2
 14503  005602  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
 14504                           
 14505                           ; BSR set to: 0
 14506                           ;vscp_firmware.c: 367: vscp_omsg.data[ 0 ] = vscp_nickname;
 14507  005604  C0BB  F0D1         	movff	_vscp_nickname,_vscp_omsg+6
 14508                           
 14509                           ; BSR set to: 0
 14510                           ;vscp_firmware.c: 370: vscp_sendEvent();
 14511  005608  ECEE  F029         	call	_vscp_sendEvent	;wreg free
 14512                           
 14513                           ;vscp_firmware.c: 372: vscp_initledfunc = 0x01;
 14514  00560C  0E01               	movlw	1
 14515  00560E  6E4D               	movwf	_vscp_initledfunc,c
 14516  005610  0C01               	retlw	1
 14517  005612                     __end_of_vscp_goActiveState:
 14518                           	opt stack 0
 14519                           tblptru	equ	0xFF8
 14520                           tblptrh	equ	0xFF7
 14521                           tblptrl	equ	0xFF6
 14522                           tablat	equ	0xFF5
 14523                           prodh	equ	0xFF4
 14524                           prodl	equ	0xFF3
 14525                           intcon	equ	0xFF2
 14526                           postinc0	equ	0xFEE
 14527                           wreg	equ	0xFE8
 14528                           indf1	equ	0xFE7
 14529                           postdec1	equ	0xFE5
 14530                           fsr1h	equ	0xFE2
 14531                           fsr1l	equ	0xFE1
 14532                           indf2	equ	0xFDF
 14533                           postinc2	equ	0xFDE
 14534                           postdec2	equ	0xFDD
 14535                           plusw2	equ	0xFDB
 14536                           fsr2h	equ	0xFDA
 14537                           fsr2l	equ	0xFD9
 14538                           status	equ	0xFD8
 14539                           
 14540 ;; *************** function _vscp_sendEvent *****************
 14541 ;; Defined at:
 14542 ;;		line 1280 in file "../../vscp_firmware/common/vscp_firmware.c"
 14543 ;; Parameters:    Size  Location     Type
 14544 ;;		None
 14545 ;; Auto vars:     Size  Location     Type
 14546 ;;  rv              1   66[COMRAM] unsigned char 
 14547 ;; Return value:  Size  Location     Type
 14548 ;;                  1    wreg      unsigned char 
 14549 ;; Registers used:
 14550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14551 ;; Tracked objects:
 14552 ;;		On entry : F/0
 14553 ;;		On exit  : 0/0
 14554 ;;		Unchanged: 0/0
 14555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14556 ;;      Params:         0       0       0       0       0       0       0
 14557 ;;      Locals:         1       0       0       0       0       0       0
 14558 ;;      Temps:          0       0       0       0       0       0       0
 14559 ;;      Totals:         1       0       0       0       0       0       0
 14560 ;;Total ram usage:        1 bytes
 14561 ;; Hardware stack levels used:    1
 14562 ;; Hardware stack levels required when called:    6
 14563 ;; This function calls:
 14564 ;;		_sendVSCPFrame
 14565 ;; This function is called by:
 14566 ;;		_doOneSecondWork
 14567 ;;		_sendTempEvent
 14568 ;;		_vscp_handleProbeState
 14569 ;;		_vscp_goActiveState
 14570 ;;		_vscp_sendHeartBeat
 14571 ;;		_vscp_newNodeOnline
 14572 ;;		_vscp_handleProtocolEvent
 14573 ;; This function uses a non-reentrant model
 14574 ;;
 14575                           
 14576                           	psect	text69
 14577  0053DC                     __ptext69:
 14578                           	opt stack 0
 14579  0053DC                     _vscp_sendEvent:
 14580                           	opt stack 22
 14581                           
 14582                           ; BSR set to: 0
 14583                           ;vscp_firmware.c: 1281: int8_t rv;
 14584                           ;vscp_firmware.c: 1283: if ( !(rv = sendVSCPFrame( vscp_omsg.vscp_class,
 14585                           ;vscp_firmware.c: 1284: vscp_omsg.vscp_type,
 14586                           ;vscp_firmware.c: 1285: vscp_nickname,
 14587                           ;vscp_firmware.c: 1286: vscp_omsg.priority,
 14588                           ;vscp_firmware.c: 1287: (vscp_omsg.flags & 0x0f),
 14589                           ;vscp_firmware.c: 1288: vscp_omsg.data ) ) ) {
 14590                           
 14591                           ;incstack = 0
 14592                           ;incstack = 0
 14593  0053DC  C0CD  F060         	movff	_vscp_omsg+2,?_sendVSCPFrame
 14594  0053E0  C0CE  F061         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 14595  0053E4  C0CF  F062         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 14596  0053E8  C0BB  F063         	movff	_vscp_nickname,?_sendVSCPFrame+3
 14597  0053EC  C0CC  F064         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 14598  0053F0  51CB               	movf	_vscp_omsg& (0+255),w,b
 14599  0053F2  0B0F               	andlw	15
 14600  0053F4  6F65               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 14601  0053F6  0ED1               	movlw	low (_vscp_omsg+6)
 14602  0053F8  6F66               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 14603  0053FA  EC26  F023         	call	_sendVSCPFrame	;wreg free
 14604  0053FE  6E43               	movwf	vscp_sendEvent@rv,c
 14605  005400  6643               	tstfsz	vscp_sendEvent@rv& (0+255),c
 14606  005402  D001               	goto	l11615
 14607                           
 14608                           ;vscp_firmware.c: 1289: vscp_errorcnt++;
 14609  005404  2A4B               	incf	_vscp_errorcnt,f,c
 14610  005406                     l11615:
 14611                           
 14612                           ;vscp_firmware.c: 1290: }
 14613                           ;vscp_firmware.c: 1292: return rv;
 14614  005406  5043               	movf	vscp_sendEvent@rv,w,c
 14615  005408  0012               	return	
 14616  00540A                     __end_of_vscp_sendEvent:
 14617                           	opt stack 0
 14618                           tblptru	equ	0xFF8
 14619                           tblptrh	equ	0xFF7
 14620                           tblptrl	equ	0xFF6
 14621                           tablat	equ	0xFF5
 14622                           prodh	equ	0xFF4
 14623                           prodl	equ	0xFF3
 14624                           intcon	equ	0xFF2
 14625                           postinc0	equ	0xFEE
 14626                           wreg	equ	0xFE8
 14627                           indf1	equ	0xFE7
 14628                           postdec1	equ	0xFE5
 14629                           fsr1h	equ	0xFE2
 14630                           fsr1l	equ	0xFE1
 14631                           indf2	equ	0xFDF
 14632                           postinc2	equ	0xFDE
 14633                           postdec2	equ	0xFDD
 14634                           plusw2	equ	0xFDB
 14635                           fsr2h	equ	0xFDA
 14636                           fsr2l	equ	0xFD9
 14637                           status	equ	0xFD8
 14638                           
 14639 ;; *************** function _sendVSCPFrame *****************
 14640 ;; Defined at:
 14641 ;;		line 2916 in file "../main.c"
 14642 ;; Parameters:    Size  Location     Type
 14643 ;;  vscpclass       2    0[BANK0 ] unsigned short 
 14644 ;;  vscptype        1    2[BANK0 ] unsigned char 
 14645 ;;  nodeid          1    3[BANK0 ] unsigned char 
 14646 ;;  priority        1    4[BANK0 ] unsigned char 
 14647 ;;  size            1    5[BANK0 ] unsigned char 
 14648 ;;  pData           1    6[BANK0 ] PTR unsigned char 
 14649 ;;		 -> vscp_omsg(14), 
 14650 ;; Auto vars:     Size  Location     Type
 14651 ;;  id              4   27[BANK0 ] unsigned long 
 14652 ;; Return value:  Size  Location     Type
 14653 ;;                  1    wreg      unsigned char 
 14654 ;; Registers used:
 14655 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14656 ;; Tracked objects:
 14657 ;;		On entry : F/0
 14658 ;;		On exit  : F/0
 14659 ;;		Unchanged: 0/0
 14660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14661 ;;      Params:         0       7       0       0       0       0       0
 14662 ;;      Locals:         0       4       0       0       0       0       0
 14663 ;;      Temps:          0      20       0       0       0       0       0
 14664 ;;      Totals:         0      31       0       0       0       0       0
 14665 ;;Total ram usage:       31 bytes
 14666 ;; Hardware stack levels used:    1
 14667 ;; Hardware stack levels required when called:    5
 14668 ;; This function calls:
 14669 ;;		_sendCANFrame
 14670 ;; This function is called by:
 14671 ;;		_vscp_sendEvent
 14672 ;; This function uses a non-reentrant model
 14673 ;;
 14674                           
 14675                           	psect	text70
 14676  00464C                     __ptext70:
 14677                           	opt stack 0
 14678  00464C                     _sendVSCPFrame:
 14679                           	opt stack 22
 14680                           
 14681                           ; BSR set to: 0
 14682                           ;main.c: 2917: uint32_t id = ((uint32_t) priority << 26) |
 14683                           ;main.c: 2918: ((uint32_t) vscpclass << 16) |
 14684                           ;main.c: 2919: ((uint32_t) vscptype << 8) |
 14685                           ;main.c: 2920: nodeid;
 14686                           
 14687                           ;incstack = 0
 14688                           ;incstack = 0
 14689  00464C  C062  F067         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 14690  004650  6B68               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 14691  004652  6B69               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 14692  004654  6B6A               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 14693  004656  C069  F06A         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 14694  00465A  C068  F069         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 14695  00465E  C067  F068         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 14696  004662  6B67               	clrf	??_sendVSCPFrame& (0+255),b
 14697  004664  5160               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 14698  004666  6F6B               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 14699  004668  5161               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 14700  00466A  6F6C               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 14701  00466C  6B6D               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 14702  00466E  6B6E               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 14703  004670  C06C  F06E         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 14704  004674  C06B  F06D         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 14705  004678  6B6C               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 14706  00467A  6B6B               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 14707  00467C  C064  F06F         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 14708  004680  6B70               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 14709  004682  6B71               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 14710  004684  6B72               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 14711  004686  0E1A               	movlw	26
 14712  004688                     u9025:
 14713  004688  90D8               	bcf	status,0,c
 14714  00468A  376F               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 14715  00468C  3770               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 14716  00468E  3771               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 14717  004690  3772               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 14718  004692  2EE8               	decfsz	wreg,f,c
 14719  004694  D7F9               	goto	u9025
 14720  004696  516B               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 14721  004698  116F               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 14722  00469A  6F73               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 14723  00469C  516C               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 14724  00469E  1170               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 14725  0046A0  6F74               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 14726  0046A2  516D               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 14727  0046A4  1171               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 14728  0046A6  6F75               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 14729  0046A8  516E               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 14730  0046AA  1172               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 14731  0046AC  6F76               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 14732  0046AE  5167               	movf	??_sendVSCPFrame& (0+255),w,b
 14733  0046B0  1173               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 14734  0046B2  6F77               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 14735  0046B4  5168               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 14736  0046B6  1174               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 14737  0046B8  6F78               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 14738  0046BA  5169               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 14739  0046BC  1175               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 14740  0046BE  6F79               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 14741  0046C0  516A               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 14742  0046C2  1176               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 14743  0046C4  6F7A               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 14744  0046C6  5163               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 14745  0046C8  1177               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 14746  0046CA  6F7B               	movwf	sendVSCPFrame@id& (0+255),b
 14747  0046CC  5178               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 14748  0046CE  6F7C               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 14749  0046D0  5179               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 14750  0046D2  6F7D               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 14751  0046D4  517A               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 14752  0046D6  6F7E               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 14753                           
 14754                           ; BSR set to: 0
 14755                           ;main.c: 2922: if (!sendCANFrame(id, size, pData)) {
 14756  0046D8  C07B  F03C         	movff	sendVSCPFrame@id,?_sendCANFrame
 14757  0046DC  C07C  F03D         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 14758  0046E0  C07D  F03E         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 14759  0046E4  C07E  F03F         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 14760  0046E8  C065  F040         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 14761  0046EC  C066  F041         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 14762  0046F0  EC90  F028         	call	_sendCANFrame	;wreg free
 14763  0046F4  0900               	iorlw	0
 14764  0046F6  E103               	bnz	l12551
 14765                           
 14766                           ; BSR set to: 0
 14767                           ;main.c: 2924: vscp_errorcnt++;
 14768  0046F8  2A4B               	incf	_vscp_errorcnt,f,c
 14769                           
 14770                           ; BSR set to: 0
 14771                           ;main.c: 2925: return 0;
 14772  0046FA  0E00               	movlw	0
 14773  0046FC  D001               	goto	l631
 14774  0046FE                     l12551:
 14775                           
 14776                           ; BSR set to: 0
 14777                           ;main.c: 2926: }
 14778                           ;main.c: 2928: return 1;
 14779  0046FE  0E01               	movlw	1
 14780  004700                     l631:
 14781                           
 14782                           ; BSR set to: 0
 14783  004700  0012               	return	
 14784  004702                     __end_of_sendVSCPFrame:
 14785                           	opt stack 0
 14786                           tblptru	equ	0xFF8
 14787                           tblptrh	equ	0xFF7
 14788                           tblptrl	equ	0xFF6
 14789                           tablat	equ	0xFF5
 14790                           prodh	equ	0xFF4
 14791                           prodl	equ	0xFF3
 14792                           intcon	equ	0xFF2
 14793                           postinc0	equ	0xFEE
 14794                           wreg	equ	0xFE8
 14795                           indf1	equ	0xFE7
 14796                           postdec1	equ	0xFE5
 14797                           fsr1h	equ	0xFE2
 14798                           fsr1l	equ	0xFE1
 14799                           indf2	equ	0xFDF
 14800                           postinc2	equ	0xFDE
 14801                           postdec2	equ	0xFDD
 14802                           plusw2	equ	0xFDB
 14803                           fsr2h	equ	0xFDA
 14804                           fsr2l	equ	0xFD9
 14805                           status	equ	0xFD8
 14806                           
 14807 ;; *************** function _sendCANFrame *****************
 14808 ;; Defined at:
 14809 ;;		line 2963 in file "../main.c"
 14810 ;; Parameters:    Size  Location     Type
 14811 ;;  id              4   59[COMRAM] unsigned long 
 14812 ;;  dlc             1   63[COMRAM] unsigned char 
 14813 ;;  pdata           1   64[COMRAM] PTR unsigned char 
 14814 ;;		 -> vscp_omsg(14), 
 14815 ;; Auto vars:     Size  Location     Type
 14816 ;;  rv              1   65[COMRAM] unsigned char 
 14817 ;; Return value:  Size  Location     Type
 14818 ;;                  1    wreg      unsigned char 
 14819 ;; Registers used:
 14820 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14821 ;; Tracked objects:
 14822 ;;		On entry : F/0
 14823 ;;		On exit  : F/0
 14824 ;;		Unchanged: 0/0
 14825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14826 ;;      Params:         6       0       0       0       0       0       0
 14827 ;;      Locals:         1       0       0       0       0       0       0
 14828 ;;      Temps:          0       0       0       0       0       0       0
 14829 ;;      Totals:         7       0       0       0       0       0       0
 14830 ;;Total ram usage:        7 bytes
 14831 ;; Hardware stack levels used:    1
 14832 ;; Hardware stack levels required when called:    4
 14833 ;; This function calls:
 14834 ;;		_ECANSendMessage
 14835 ;; This function is called by:
 14836 ;;		_sendVSCPFrame
 14837 ;; This function uses a non-reentrant model
 14838 ;;
 14839                           
 14840                           	psect	text71
 14841  005120                     __ptext71:
 14842                           	opt stack 0
 14843  005120                     _sendCANFrame:
 14844                           	opt stack 22
 14845                           
 14846                           ; BSR set to: 0
 14847                           ;main.c: 2964: uint8_t rv = 0;
 14848                           
 14849                           ; BSR set to: 0
 14850                           ;incstack = 0
 14851                           ;incstack = 0
 14852  005120  6A42               	clrf	sendCANFrame@rv,c
 14853                           
 14854                           ;main.c: 2966: sendTimer = 0;
 14855  005122  0101               	movlb	1	; () banked
 14856  005124  6B1A               	clrf	_sendTimer& (0+255),b	;volatile
 14857  005126  6B1B               	clrf	(_sendTimer+1)& (0+255),b	;volatile
 14858                           
 14859                           ;main.c: 2967: while ( sendTimer < 1000 ) {
 14860  005128  D015               	goto	l12561
 14861  00512A                     l12557:
 14862                           
 14863                           ; BSR set to: 1
 14864                           ;main.c: 2968: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 14865  00512A  C03C  F018         	movff	sendCANFrame@id,?_ECANSendMessage
 14866  00512E  C03D  F019         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 14867  005132  C03E  F01A         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 14868  005136  C03F  F01B         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 14869  00513A  C041  F01C         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 14870  00513E  C040  F01D         	movff	sendCANFrame@dlc,?_ECANSendMessage+5
 14871  005142  0E20               	movlw	32
 14872  005144  6E1E               	movwf	?_ECANSendMessage+6,c
 14873  005146  EC06  F01D         	call	_ECANSendMessage	;wreg free
 14874  00514A  0900               	iorlw	0
 14875  00514C  E003               	bz	l12561
 14876                           
 14877                           ;main.c: 2969: rv = 1;
 14878  00514E  0E01               	movlw	1
 14879  005150  6E42               	movwf	sendCANFrame@rv,c
 14880                           
 14881                           ;main.c: 2970: break;
 14882  005152  D006               	goto	l641
 14883  005154                     l12561:
 14884  005154  0EE8               	movlw	232
 14885  005156  0101               	movlb	1	; () banked
 14886  005158  5D1A               	subwf	_sendTimer& (0+255),w,b	;volatile
 14887  00515A  0E03               	movlw	3
 14888  00515C  591B               	subwfb	(_sendTimer+1)& (0+255),w,b	;volatile
 14889  00515E  E3E5               	bnc	l12557
 14890  005160                     l641:
 14891                           
 14892                           ;main.c: 2971: }
 14893                           ;main.c: 2972: }
 14894                           ;main.c: 2974: vscp_omsg.flags = 0;
 14895  005160  0100               	movlb	0	; () banked
 14896  005162  6BCB               	clrf	_vscp_omsg& (0+255),b
 14897                           
 14898                           ; BSR set to: 0
 14899                           ;main.c: 2976: return rv;
 14900  005164  5042               	movf	sendCANFrame@rv,w,c
 14901                           
 14902                           ; BSR set to: 0
 14903  005166  0012               	return	
 14904  005168                     __end_of_sendCANFrame:
 14905                           	opt stack 0
 14906                           tblptru	equ	0xFF8
 14907                           tblptrh	equ	0xFF7
 14908                           tblptrl	equ	0xFF6
 14909                           tablat	equ	0xFF5
 14910                           prodh	equ	0xFF4
 14911                           prodl	equ	0xFF3
 14912                           intcon	equ	0xFF2
 14913                           postinc0	equ	0xFEE
 14914                           wreg	equ	0xFE8
 14915                           indf1	equ	0xFE7
 14916                           postdec1	equ	0xFE5
 14917                           fsr1h	equ	0xFE2
 14918                           fsr1l	equ	0xFE1
 14919                           indf2	equ	0xFDF
 14920                           postinc2	equ	0xFDE
 14921                           postdec2	equ	0xFDD
 14922                           plusw2	equ	0xFDB
 14923                           fsr2h	equ	0xFDA
 14924                           fsr2l	equ	0xFD9
 14925                           status	equ	0xFD8
 14926                           
 14927 ;; *************** function _ECANSendMessage *****************
 14928 ;; Defined at:
 14929 ;;		line 617 in file "../ECAN.c"
 14930 ;; Parameters:    Size  Location     Type
 14931 ;;  id              4   23[COMRAM] unsigned long 
 14932 ;;  data            1   27[COMRAM] PTR unsigned char 
 14933 ;;		 -> vscp_omsg(14), 
 14934 ;;  dataLen         1   28[COMRAM] unsigned char 
 14935 ;;  msgFlags        1   29[COMRAM] enum E16306
 14936 ;; Auto vars:     Size  Location     Type
 14937 ;;  pb             18   31[COMRAM] PTR unsigned char [9]
 14938 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 14939 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 14940 ;;		 -> B0CON(1), 
 14941 ;;  ptr             2   57[COMRAM] PTR unsigned char 
 14942 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 14943 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 14944 ;;		 -> B0CON(1), 
 14945 ;;  tempPtr         2   53[COMRAM] PTR unsigned char 
 14946 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 14947 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 14948 ;;		 -> B0CON(1), 
 14949 ;;  i               1   56[COMRAM] unsigned char 
 14950 ;;  temp            1   55[COMRAM] unsigned char 
 14951 ;;  tempBSEL0       1   52[COMRAM] struct .
 14952 ;;  j               1   51[COMRAM] unsigned char 
 14953 ;;  buffers         1   50[COMRAM] unsigned char 
 14954 ;;  mode            1   49[COMRAM] unsigned char 
 14955 ;; Return value:  Size  Location     Type
 14956 ;;                  1    wreg      enum E15660
 14957 ;; Registers used:
 14958 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14959 ;; Tracked objects:
 14960 ;;		On entry : E/1
 14961 ;;		On exit  : 3/1
 14962 ;;		Unchanged: 0/0
 14963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14964 ;;      Params:         7       0       0       0       0       0       0
 14965 ;;      Locals:        28       0       0       0       0       0       0
 14966 ;;      Temps:          1       0       0       0       0       0       0
 14967 ;;      Totals:        36       0       0       0       0       0       0
 14968 ;;Total ram usage:       36 bytes
 14969 ;; Hardware stack levels used:    1
 14970 ;; Hardware stack levels required when called:    3
 14971 ;; This function calls:
 14972 ;;		__CANIDToRegs
 14973 ;; This function is called by:
 14974 ;;		_sendCANFrame
 14975 ;; This function uses a non-reentrant model
 14976 ;;
 14977                           
 14978                           	psect	text72
 14979  003A0C                     __ptext72:
 14980                           	opt stack 0
 14981  003A0C                     _ECANSendMessage:
 14982                           	opt stack 22
 14983                           
 14984                           ;ECAN.c: 619: BYTE mode;
 14985                           ;ECAN.c: 620: BYTE buffers;
 14986                           ;ECAN.c: 628: BYTE i,j;
 14987                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 14988                           ;ECAN.c: 630: BYTE* pb[9];
 14989                           ;ECAN.c: 631: BYTE temp;
 14990                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 14991                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 14992                           
 14993                           ; BSR set to: 0
 14994                           ;incstack = 0
 14995                           ;incstack = 0
 14996  003A0C  0E0F               	movlw	15	;volatile
 14997  003A0E  6E21               	movwf	ECANSendMessage@pb+1,c
 14998  003A10  0E40               	movlw	64	;volatile
 14999  003A12  6E20               	movwf	ECANSendMessage@pb,c
 15000                           
 15001                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 15002  003A14  0E0F               	movlw	15	;volatile
 15003  003A16  6E23               	movwf	ECANSendMessage@pb+3,c
 15004  003A18  0E30               	movlw	48	;volatile
 15005  003A1A  6E22               	movwf	ECANSendMessage@pb+2,c
 15006                           
 15007                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 15008  003A1C  0E0F               	movlw	15	;volatile
 15009  003A1E  6E25               	movwf	ECANSendMessage@pb+5,c
 15010  003A20  0E20               	movlw	32	;volatile
 15011  003A22  6E24               	movwf	ECANSendMessage@pb+4,c
 15012                           
 15013                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 15014  003A24  0E0E               	movlw	14	;volatile
 15015  003A26  6E27               	movwf	ECANSendMessage@pb+7,c
 15016  003A28  0E20               	movlw	32	;volatile
 15017  003A2A  6E26               	movwf	ECANSendMessage@pb+6,c
 15018                           
 15019                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 15020  003A2C  0E0E               	movlw	14	;volatile
 15021  003A2E  6E29               	movwf	ECANSendMessage@pb+9,c
 15022  003A30  0E30               	movlw	48	;volatile
 15023  003A32  6E28               	movwf	ECANSendMessage@pb+8,c
 15024                           
 15025                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 15026  003A34  0E0E               	movlw	14	;volatile
 15027  003A36  6E2B               	movwf	ECANSendMessage@pb+11,c
 15028  003A38  0E40               	movlw	64	;volatile
 15029  003A3A  6E2A               	movwf	ECANSendMessage@pb+10,c
 15030                           
 15031                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 15032  003A3C  0E0E               	movlw	14	;volatile
 15033  003A3E  6E2D               	movwf	ECANSendMessage@pb+13,c
 15034  003A40  0E50               	movlw	80	;volatile
 15035  003A42  6E2C               	movwf	ECANSendMessage@pb+12,c
 15036                           
 15037                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 15038  003A44  0E0E               	movlw	14	;volatile
 15039  003A46  6E2F               	movwf	ECANSendMessage@pb+15,c
 15040  003A48  0E60               	movlw	96	;volatile
 15041  003A4A  6E2E               	movwf	ECANSendMessage@pb+14,c
 15042                           
 15043                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 15044  003A4C  0E0E               	movlw	14	;volatile
 15045  003A4E  6E31               	movwf	ECANSendMessage@pb+17,c
 15046  003A50  0E70               	movlw	112	;volatile
 15047  003A52  6E30               	movwf	ECANSendMessage@pb+16,c
 15048                           
 15049                           ; BSR set to: 14
 15050                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 15051  003A54  5077               	movf	3959,w,c	;volatile
 15052  003A56  0BC0               	andlw	192
 15053  003A58  6E32               	movwf	ECANSendMessage@mode,c
 15054                           
 15055                           ; BSR set to: 14
 15056                           ;ECAN.c: 660: if ( mode == 0x00 )
 15057  003A5A  6632               	tstfsz	ECANSendMessage@mode,c
 15058  003A5C  D002               	goto	l12575
 15059                           
 15060                           ; BSR set to: 14
 15061                           ;ECAN.c: 661: buffers = 2;
 15062  003A5E  0E02               	movlw	2
 15063  003A60  D001               	goto	L33
 15064  003A62                     l12575:
 15065                           
 15066                           ; BSR set to: 14
 15067                           ;ECAN.c: 662: else
 15068                           ;ECAN.c: 663: buffers = 8;
 15069  003A62  0E08               	movlw	8
 15070  003A64                     L33:
 15071  003A64  6E33               	movwf	ECANSendMessage@buffers,c
 15072                           
 15073                           ; BSR set to: 14
 15074                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 15075  003A66  010D               	movlb	13	; () banked
 15076  003A68  90D8               	bcf	status,0,c
 15077  003A6A  31F8               	rrcf	248,w,b	;volatile
 15078  003A6C  6E35               	movwf	ECANSendMessage@tempBSEL0,c
 15079                           
 15080                           ; BSR set to: 13
 15081                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 15082  003A6E  6A39               	clrf	ECANSendMessage@i,c
 15083  003A70  D07B               	goto	l12635
 15084  003A72                     l12581:
 15085                           
 15086                           ;ECAN.c: 688: {
 15087                           ;ECAN.c: 693: ptr = pb[i];
 15088  003A72  5039               	movf	ECANSendMessage@i,w,c
 15089  003A74  0D02               	mullw	2
 15090  003A76  50F3               	movf	prodl,w,c
 15091  003A78  0F20               	addlw	low ECANSendMessage@pb
 15092  003A7A  6ED9               	movwf	fsr2l,c
 15093  003A7C  6ADA               	clrf	fsr2h,c
 15094  003A7E  CFDE F03A          	movff	postinc2,ECANSendMessage@ptr
 15095  003A82  CFDD F03B          	movff	postdec2,ECANSendMessage@ptr+1
 15096                           
 15097                           ;ECAN.c: 694: tempPtr = ptr;
 15098  003A86  C03A  F036         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 15099  003A8A  C03B  F037         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 15100                           
 15101                           ;ECAN.c: 702: if ( i > 2 )
 15102  003A8E  0E02               	movlw	2
 15103  003A90  6439               	cpfsgt	ECANSendMessage@i,c
 15104  003A92  D004               	goto	l12593
 15105                           
 15106                           ;ECAN.c: 703: {
 15107                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 15108  003A94  90D8               	bcf	status,0,c
 15109  003A96  3235               	rrcf	ECANSendMessage@tempBSEL0,f,c
 15110                           
 15111                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 15112  003A98  A035               	btfss	ECANSendMessage@tempBSEL0,0,c
 15113  003A9A  D065               	goto	l12633
 15114  003A9C                     l12593:
 15115                           
 15116                           ;ECAN.c: 714: }
 15117                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 15118  003A9C  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15119  003AA0  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15120  003AA4  50DF               	movf	indf2,w,c
 15121  003AA6  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15122  003AA8  B61F               	btfsc	??_ECANSendMessage,3,c
 15123  003AAA  D05D               	goto	l12633
 15124                           
 15125                           ;ECAN.c: 721: {
 15126                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 15127  003AAC  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15128  003AB0  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15129  003AB4  0EFC               	movlw	252
 15130  003AB6  16DF               	andwf	indf2,f,c
 15131                           
 15132                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 15133  003AB8  C01E  F01F         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 15134  003ABC  0E03               	movlw	3
 15135  003ABE  161F               	andwf	??_ECANSendMessage,f,c
 15136  003AC0  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15137  003AC4  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15138  003AC8  501F               	movf	??_ECANSendMessage,w,c
 15139  003ACA  12DF               	iorwf	indf2,f,c
 15140                           
 15141                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 15142  003ACC  AC1E               	btfss	ECANSendMessage@msgFlags,6,c
 15143  003ACE  D004               	goto	l829
 15144                           
 15145                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 15146  003AD0  501D               	movf	ECANSendMessage@dataLen,w,c
 15147  003AD2  0940               	iorlw	64
 15148  003AD4  6E38               	movwf	ECANSendMessage@temp,c
 15149  003AD6  D002               	goto	l12603
 15150  003AD8                     l829:
 15151                           
 15152                           ;ECAN.c: 729: else
 15153                           ;ECAN.c: 730: temp = dataLen;
 15154  003AD8  C01D  F038         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 15155  003ADC                     l12603:
 15156                           
 15157                           ;ECAN.c: 732: *(ptr+5) = temp;
 15158  003ADC  EE20 F005          	lfsr	2,5
 15159  003AE0  503A               	movf	ECANSendMessage@ptr,w,c
 15160  003AE2  26D9               	addwf	fsr2l,f,c
 15161  003AE4  503B               	movf	ECANSendMessage@ptr+1,w,c
 15162  003AE6  22DA               	addwfc	fsr2h,f,c
 15163  003AE8  C038  FFDF         	movff	ECANSendMessage@temp,indf2
 15164                           
 15165                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 15166  003AEC  AA1E               	btfss	ECANSendMessage@msgFlags,5,c
 15167  003AEE  D003               	goto	l831
 15168                           
 15169                           ;ECAN.c: 736: temp = 1;
 15170  003AF0  0E01               	movlw	1
 15171  003AF2  6E38               	movwf	ECANSendMessage@temp,c
 15172  003AF4  D001               	goto	l12609
 15173  003AF6                     l831:
 15174                           
 15175                           ;ECAN.c: 738: else
 15176                           ;ECAN.c: 739: temp = 0;
 15177  003AF6  6A38               	clrf	ECANSendMessage@temp,c
 15178  003AF8                     l12609:
 15179                           
 15180                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 15181  003AF8  283A               	incf	ECANSendMessage@ptr,w,c
 15182  003AFA  6E0E               	movwf	?__CANIDToRegs,c
 15183  003AFC  0E00               	movlw	0
 15184  003AFE  203B               	addwfc	ECANSendMessage@ptr+1,w,c
 15185  003B00  6E0F               	movwf	?__CANIDToRegs+1,c
 15186  003B02  C018  F010         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 15187  003B06  C019  F011         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 15188  003B0A  C01A  F012         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 15189  003B0E  C01B  F013         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 15190  003B12  C038  F014         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 15191  003B16  ECA0  F020         	call	__CANIDToRegs	;wreg free
 15192                           
 15193                           ;ECAN.c: 745: ptr += 6;
 15194  003B1A  0E06               	movlw	6
 15195  003B1C  263A               	addwf	ECANSendMessage@ptr,f,c
 15196  003B1E  0E00               	movlw	0
 15197  003B20  223B               	addwfc	ECANSendMessage@ptr+1,f,c
 15198                           
 15199                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 15200  003B22  6A34               	clrf	ECANSendMessage@j,c
 15201  003B24  D00D               	goto	l12623
 15202  003B26                     l12615:
 15203                           
 15204                           ;ECAN.c: 748: *ptr++ = *data++;
 15205  003B26  501C               	movf	ECANSendMessage@data,w,c
 15206  003B28  6ED9               	movwf	fsr2l,c
 15207  003B2A  6ADA               	clrf	fsr2h,c
 15208  003B2C  C03A  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 15209  003B30  C03B  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 15210  003B34  CFDF FFE7          	movff	indf2,indf1
 15211  003B38  2A1C               	incf	ECANSendMessage@data,f,c
 15212  003B3A  4A3A               	infsnz	ECANSendMessage@ptr,f,c
 15213  003B3C  2A3B               	incf	ECANSendMessage@ptr+1,f,c
 15214  003B3E  2A34               	incf	ECANSendMessage@j,f,c
 15215  003B40                     l12623:
 15216  003B40  501D               	movf	ECANSendMessage@dataLen,w,c
 15217  003B42  5C34               	subwf	ECANSendMessage@j,w,c
 15218  003B44  E3F0               	bnc	l12615
 15219                           
 15220                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 15221  003B46  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15222  003B4A  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15223  003B4E  50DF               	movf	indf2,w,c
 15224  003B50  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15225  003B52  B41F               	btfsc	??_ECANSendMessage,2,c
 15226  003B54  D006               	goto	l12629
 15227                           
 15228                           ;ECAN.c: 753: *tempPtr |= 0x08;
 15229  003B56  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15230  003B5A  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15231  003B5E  0E00               	movlw	0
 15232  003B60  86DB               	bsf	plusw2,3,c
 15233  003B62                     l12629:
 15234                           
 15235                           ;ECAN.c: 755: return TRUE;
 15236  003B62  0E01               	movlw	1
 15237  003B64  D005               	goto	l837
 15238  003B66                     l12633:
 15239  003B66  2A39               	incf	ECANSendMessage@i,f,c
 15240  003B68                     l12635:
 15241  003B68  5033               	movf	ECANSendMessage@buffers,w,c
 15242  003B6A  5C39               	subwf	ECANSendMessage@i,w,c
 15243  003B6C  E382               	bnc	l12581
 15244                           
 15245                           ;ECAN.c: 756: }
 15246                           ;ECAN.c: 757: }
 15247                           ;ECAN.c: 760: return FALSE;
 15248  003B6E  0E00               	movlw	0
 15249  003B70                     l837:
 15250  003B70  0012               	return	
 15251  003B72                     __end_of_ECANSendMessage:
 15252                           	opt stack 0
 15253                           tblptru	equ	0xFF8
 15254                           tblptrh	equ	0xFF7
 15255                           tblptrl	equ	0xFF6
 15256                           tablat	equ	0xFF5
 15257                           prodh	equ	0xFF4
 15258                           prodl	equ	0xFF3
 15259                           intcon	equ	0xFF2
 15260                           postinc0	equ	0xFEE
 15261                           wreg	equ	0xFE8
 15262                           indf1	equ	0xFE7
 15263                           postdec1	equ	0xFE5
 15264                           fsr1h	equ	0xFE2
 15265                           fsr1l	equ	0xFE1
 15266                           indf2	equ	0xFDF
 15267                           postinc2	equ	0xFDE
 15268                           postdec2	equ	0xFDD
 15269                           plusw2	equ	0xFDB
 15270                           fsr2h	equ	0xFDA
 15271                           fsr2l	equ	0xFD9
 15272                           status	equ	0xFD8
 15273                           
 15274 ;; *************** function __CANIDToRegs *****************
 15275 ;; Defined at:
 15276 ;;		line 1099 in file "../ECAN.c"
 15277 ;; Parameters:    Size  Location     Type
 15278 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 15279 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15280 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15281 ;;		 -> B0CON(1), 
 15282 ;;  val             4   15[COMRAM] unsigned long 
 15283 ;;  type            1   19[COMRAM] unsigned char 
 15284 ;; Auto vars:     Size  Location     Type
 15285 ;;  Value           1   22[COMRAM] PTR struct _CAN_MESSAGE_
 15286 ;;		 -> _CANIDToRegs@val(4), 
 15287 ;; Return value:  Size  Location     Type
 15288 ;;		None               void
 15289 ;; Registers used:
 15290 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15291 ;; Tracked objects:
 15292 ;;		On entry : 3/D
 15293 ;;		On exit  : 3/1
 15294 ;;		Unchanged: 2/0
 15295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15296 ;;      Params:         7       0       0       0       0       0       0
 15297 ;;      Locals:         1       0       0       0       0       0       0
 15298 ;;      Temps:          2       0       0       0       0       0       0
 15299 ;;      Totals:        10       0       0       0       0       0       0
 15300 ;;Total ram usage:       10 bytes
 15301 ;; Hardware stack levels used:    1
 15302 ;; Hardware stack levels required when called:    2
 15303 ;; This function calls:
 15304 ;;		Nothing
 15305 ;; This function is called by:
 15306 ;;		_ECANSendMessage
 15307 ;; This function uses a non-reentrant model
 15308 ;;
 15309                           
 15310                           	psect	text73
 15311  004140                     __ptext73:
 15312                           	opt stack 0
 15313  004140                     __CANIDToRegs:
 15314                           	opt stack 22
 15315                           
 15316                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 15317                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 15318                           
 15319                           ;incstack = 0
 15320                           ;incstack = 0
 15321  004140  0E10               	movlw	low __CANIDToRegs@val
 15322  004142  6E17               	movwf	__CANIDToRegs@Value,c
 15323                           
 15324                           ;ECAN.c: 1104: if ( type == 0 )
 15325  004144  6614               	tstfsz	__CANIDToRegs@type,c
 15326  004146  D022               	goto	l12651
 15327                           
 15328                           ;ECAN.c: 1105: {
 15329                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 15330  004148  5017               	movf	__CANIDToRegs@Value,w,c
 15331  00414A  6ED9               	movwf	fsr2l,c
 15332  00414C  6ADA               	clrf	fsr2h,c
 15333  00414E  50DF               	movf	indf2,w,c
 15334  004150  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15335  004152  90D8               	bcf	status,0,c
 15336  004154  3215               	rrcf	??__CANIDToRegs,f,c
 15337  004156  90D8               	bcf	status,0,c
 15338  004158  3215               	rrcf	??__CANIDToRegs,f,c
 15339  00415A  90D8               	bcf	status,0,c
 15340  00415C  3015               	rrcf	??__CANIDToRegs,w,c
 15341                           
 15342                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 15343  00415E  D862               	call	PL26	;call to abstracted procedure
 15344  004160  2AD9               	incf	fsr2l,f,c
 15345  004162  6ADA               	clrf	fsr2h,c
 15346  004164  D872               	call	PL78	;call to abstracted procedure
 15347  004166                     u9165:
 15348  004166  90D8               	bcf	status,0,c
 15349  004168  3615               	rlcf	??__CANIDToRegs,f,c
 15350  00416A  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 15351  00416C  D7FC               	goto	u9165
 15352  00416E  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15353                           
 15354                           ;ECAN.c: 1109: ptr++;
 15355                           
 15356                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 15357  004172  D846               	call	PL16	;call to abstracted procedure
 15358  004174  D86A               	call	PL78	;call to abstracted procedure
 15359  004176                     u9175:
 15360  004176  90D8               	bcf	status,0,c
 15361  004178  3615               	rlcf	??__CANIDToRegs,f,c
 15362  00417A  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 15363  00417C  D7FC               	goto	u9175
 15364  00417E  5015               	movf	??__CANIDToRegs,w,c
 15365  004180  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15366  004184  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15367  004188  6EDF               	movwf	indf2,c
 15368                           
 15369                           ;ECAN.c: 1111: }
 15370  00418A  D039               	goto	l891
 15371  00418C                     l12651:
 15372                           
 15373                           ;ECAN.c: 1112: else
 15374                           ;ECAN.c: 1113: {
 15375                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 15376  00418C  5017               	movf	__CANIDToRegs@Value,w,c
 15377  00418E  D842               	call	PL24	;call to abstracted procedure
 15378  004190  0E05               	movlw	5
 15379  004192  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 15380  004194                     u9185:
 15381  004194  90D8               	bcf	status,0,c
 15382  004196  3215               	rrcf	??__CANIDToRegs,f,c
 15383  004198  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 15384  00419A  D7FC               	goto	u9185
 15385  00419C  5015               	movf	??__CANIDToRegs,w,c
 15386                           
 15387                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 15388  00419E  D842               	call	PL26	;call to abstracted procedure
 15389  0041A0  0E03               	movlw	3
 15390  0041A2  D849               	call	PL38	;call to abstracted procedure
 15391  0041A4  3615               	rlcf	??__CANIDToRegs,f,c
 15392  0041A6  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15393                           
 15394                           ;ECAN.c: 1117: ptr++;
 15395                           
 15396                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 15397  0041AA  D82A               	call	PL16	;call to abstracted procedure
 15398  0041AC  0E02               	movlw	2
 15399  0041AE  D843               	call	PL38	;call to abstracted procedure
 15400  0041B0  3415               	rlcf	??__CANIDToRegs,w,c
 15401  0041B2  0BE0               	andlw	224
 15402  0041B4  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15403  0041B8  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15404  0041BC  6EDF               	movwf	indf2,c
 15405                           
 15406                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 15407  0041BE  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15408  0041C2  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15409  0041C6  0E00               	movlw	0
 15410  0041C8  86DB               	bsf	plusw2,3,c
 15411                           
 15412                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 15413  0041CA  5017               	movf	__CANIDToRegs@Value,w,c
 15414  0041CC  D823               	call	PL24	;call to abstracted procedure
 15415  0041CE  0E03               	movlw	3
 15416  0041D0  1615               	andwf	??__CANIDToRegs,f,c
 15417  0041D2  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15418                           
 15419                           ;ECAN.c: 1122: ptr++;
 15420                           
 15421                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 15422  0041D6  D814               	call	PL16	;call to abstracted procedure
 15423  0041D8  2AD9               	incf	fsr2l,f,c
 15424  0041DA  6ADA               	clrf	fsr2h,c
 15425  0041DC  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 15426  0041E0  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 15427  0041E4  CFDF FFE7          	movff	indf2,indf1
 15428                           
 15429                           ;ECAN.c: 1124: ptr++;
 15430  0041E8  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 15431  0041EA  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 15432                           
 15433                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 15434  0041EC  5017               	movf	__CANIDToRegs@Value,w,c
 15435  0041EE  6ED9               	movwf	fsr2l,c
 15436  0041F0  6ADA               	clrf	fsr2h,c
 15437  0041F2  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 15438  0041F6  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 15439  0041FA  CFDF FFE7          	movff	indf2,indf1
 15440  0041FE                     l891:
 15441  0041FE  0012               	return	
 15442  004200                     __end_of__CANIDToRegs:
 15443                           	opt stack 0
 15444  004200                     PL16:
 15445                           	opt stack 22
 15446  004200  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15447  004204  5015               	movf	??__CANIDToRegs,w,c
 15448  004206  12DF               	iorwf	indf2,f,c
 15449  004208  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 15450  00420A  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 15451  00420C  5017               	movf	__CANIDToRegs@Value,w,c
 15452  00420E  6ED9               	movwf	fsr2l,c
 15453  004210  6ADA               	clrf	fsr2h,c
 15454  004212  0012               	return	
 15455  004214                     __end_ofPL16:
 15456                           	opt stack 0
 15457  004214                     PL24:
 15458                           	opt stack 22
 15459  004214  6ED9               	movwf	fsr2l,c
 15460  004216  6ADA               	clrf	fsr2h,c
 15461  004218  0E02               	movlw	2
 15462  00421A  26D9               	addwf	fsr2l,f,c
 15463  00421C  6ADA               	clrf	fsr2h,c
 15464  00421E  50DF               	movf	indf2,w,c
 15465  004220  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15466  004222  0012               	return	
 15467  004224                     __end_ofPL24:
 15468                           	opt stack 0
 15469  004224                     PL26:
 15470                           	opt stack 22
 15471  004224  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15472  004228  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15473  00422C  6EDF               	movwf	indf2,c
 15474  00422E  5017               	movf	__CANIDToRegs@Value,w,c
 15475  004230  6ED9               	movwf	fsr2l,c
 15476  004232  6ADA               	clrf	fsr2h,c
 15477  004234  0012               	return	
 15478  004236                     __end_ofPL26:
 15479                           	opt stack 0
 15480  004236                     PL38:
 15481                           	opt stack 22
 15482  004236  26D9               	addwf	fsr2l,f,c
 15483  004238  6ADA               	clrf	fsr2h,c
 15484  00423A  50DF               	movf	indf2,w,c
 15485  00423C  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15486  00423E  90D8               	bcf	status,0,c
 15487  004240  3615               	rlcf	??__CANIDToRegs,f,c
 15488  004242  90D8               	bcf	status,0,c
 15489  004244  3615               	rlcf	??__CANIDToRegs,f,c
 15490  004246  90D8               	bcf	status,0,c
 15491  004248  0012               	return	
 15492  00424A                     __end_ofPL38:
 15493                           	opt stack 0
 15494  00424A                     PL78:
 15495                           	opt stack 22
 15496  00424A  50DF               	movf	indf2,w,c
 15497  00424C  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15498  00424E  0E05               	movlw	5
 15499  004250  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 15500  004252  0C05               	retlw	5
 15501  004254                     __end_ofPL78:
 15502                           	opt stack 0
 15503                           tblptru	equ	0xFF8
 15504                           tblptrh	equ	0xFF7
 15505                           tblptrl	equ	0xFF6
 15506                           tablat	equ	0xFF5
 15507                           prodh	equ	0xFF4
 15508                           prodl	equ	0xFF3
 15509                           intcon	equ	0xFF2
 15510                           postinc0	equ	0xFEE
 15511                           wreg	equ	0xFE8
 15512                           indf1	equ	0xFE7
 15513                           postdec1	equ	0xFE5
 15514                           fsr1h	equ	0xFE2
 15515                           fsr1l	equ	0xFE1
 15516                           indf2	equ	0xFDF
 15517                           postinc2	equ	0xFDE
 15518                           postdec2	equ	0xFDD
 15519                           plusw2	equ	0xFDB
 15520                           fsr2h	equ	0xFDA
 15521                           fsr2l	equ	0xFD9
 15522                           status	equ	0xFD8
 15523                           
 15524 ;; *************** function _vscp_getEvent *****************
 15525 ;; Defined at:
 15526 ;;		line 1300 in file "../../vscp_firmware/common/vscp_firmware.c"
 15527 ;; Parameters:    Size  Location     Type
 15528 ;;		None
 15529 ;; Auto vars:     Size  Location     Type
 15530 ;;  rv              1   49[COMRAM] unsigned char 
 15531 ;; Return value:  Size  Location     Type
 15532 ;;                  1    wreg      unsigned char 
 15533 ;; Registers used:
 15534 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15535 ;; Tracked objects:
 15536 ;;		On entry : F/0
 15537 ;;		On exit  : 0/0
 15538 ;;		Unchanged: 0/0
 15539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15540 ;;      Params:         0       0       0       0       0       0       0
 15541 ;;      Locals:         1       0       0       0       0       0       0
 15542 ;;      Temps:          0       0       0       0       0       0       0
 15543 ;;      Totals:         1       0       0       0       0       0       0
 15544 ;;Total ram usage:        1 bytes
 15545 ;; Hardware stack levels used:    1
 15546 ;; Hardware stack levels required when called:    6
 15547 ;; This function calls:
 15548 ;;		_getVSCPFrame
 15549 ;; This function is called by:
 15550 ;;		_main
 15551 ;; This function uses a non-reentrant model
 15552 ;;
 15553                           
 15554                           	psect	text74
 15555  00548A                     __ptext74:
 15556                           	opt stack 0
 15557  00548A                     _vscp_getEvent:
 15558                           	opt stack 24
 15559                           
 15560                           ; BSR set to: 0
 15561                           ;vscp_firmware.c: 1301: int8_t rv;
 15562                           ;vscp_firmware.c: 1307: if (vscp_imsg.flags & 0x80) return !0;
 15563                           
 15564                           ;incstack = 0
 15565                           ;incstack = 0
 15566  00548A  BFBD               	btfsc	_vscp_imsg& (0+255),7,b
 15567  00548C  D012               	goto	l1264
 15568                           
 15569                           ; BSR set to: 0
 15570                           ;vscp_firmware.c: 1310: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 15571                           ;vscp_firmware.c: 1311: &vscp_imsg.vscp_type,
 15572                           ;vscp_firmware.c: 1312: &vscp_imsg.oaddr,
 15573                           ;vscp_firmware.c: 1313: &vscp_imsg.priority,
 15574                           ;vscp_firmware.c: 1314: &vscp_imsg.flags,
 15575                           ;vscp_firmware.c: 1315: vscp_imsg.data ) ) ) {
 15576  00548E  0EC1               	movlw	low (_vscp_imsg+4)
 15577  005490  6E24               	movwf	?_getVSCPFrame,c
 15578  005492  0EC2               	movlw	low (_vscp_imsg+5)
 15579  005494  6E25               	movwf	?_getVSCPFrame+1,c
 15580  005496  0EBE               	movlw	low (_vscp_imsg+1)
 15581  005498  6E26               	movwf	?_getVSCPFrame+2,c
 15582  00549A  0EBD               	movlw	low _vscp_imsg
 15583  00549C  6E27               	movwf	?_getVSCPFrame+3,c
 15584  00549E  0EC3               	movlw	low (_vscp_imsg+6)
 15585  0054A0  6E28               	movwf	?_getVSCPFrame+4,c
 15586  0054A2  0EBF               	movlw	(_vscp_imsg+2)& (0+255)
 15587  0054A4  EC47  F026         	call	_getVSCPFrame
 15588  0054A8  6E32               	movwf	vscp_getEvent@rv,c
 15589  0054AA  5032               	movf	vscp_getEvent@rv& (0+255),w,c
 15590  0054AC  E002               	bz	l1264
 15591                           
 15592                           ;vscp_firmware.c: 1317: vscp_imsg.flags |= 0x80;
 15593  0054AE  0100               	movlb	0	; () banked
 15594  0054B0  8FBD               	bsf	_vscp_imsg& (0+255),7,b
 15595  0054B2                     l1264:
 15596  0054B2  0012               	return	
 15597  0054B4                     __end_of_vscp_getEvent:
 15598                           	opt stack 0
 15599                           tblptru	equ	0xFF8
 15600                           tblptrh	equ	0xFF7
 15601                           tblptrl	equ	0xFF6
 15602                           tablat	equ	0xFF5
 15603                           prodh	equ	0xFF4
 15604                           prodl	equ	0xFF3
 15605                           intcon	equ	0xFF2
 15606                           postinc0	equ	0xFEE
 15607                           wreg	equ	0xFE8
 15608                           indf1	equ	0xFE7
 15609                           postdec1	equ	0xFE5
 15610                           fsr1h	equ	0xFE2
 15611                           fsr1l	equ	0xFE1
 15612                           indf2	equ	0xFDF
 15613                           postinc2	equ	0xFDE
 15614                           postdec2	equ	0xFDD
 15615                           plusw2	equ	0xFDB
 15616                           fsr2h	equ	0xFDA
 15617                           fsr2l	equ	0xFD9
 15618                           status	equ	0xFD8
 15619                           
 15620 ;; *************** function _getVSCPFrame *****************
 15621 ;; Defined at:
 15622 ;;		line 2942 in file "../main.c"
 15623 ;; Parameters:    Size  Location     Type
 15624 ;;  pvscpclass      1    wreg     PTR unsigned short 
 15625 ;;		 -> vscp_imsg(14), 
 15626 ;;  pvscptype       1   35[COMRAM] PTR unsigned char 
 15627 ;;		 -> vscp_imsg(14), 
 15628 ;;  pNodeId         1   36[COMRAM] PTR unsigned char 
 15629 ;;		 -> vscp_imsg(14), 
 15630 ;;  pPriority       1   37[COMRAM] PTR unsigned char 
 15631 ;;		 -> vscp_imsg(14), 
 15632 ;;  pSize           1   38[COMRAM] PTR unsigned char 
 15633 ;;		 -> vscp_imsg(14), 
 15634 ;;  pData           1   39[COMRAM] PTR unsigned char 
 15635 ;;		 -> vscp_imsg(14), 
 15636 ;; Auto vars:     Size  Location     Type
 15637 ;;  pvscpclass      1   44[COMRAM] PTR unsigned short 
 15638 ;;		 -> vscp_imsg(14), 
 15639 ;;  id              4   45[COMRAM] unsigned long 
 15640 ;; Return value:  Size  Location     Type
 15641 ;;                  1    wreg      unsigned char 
 15642 ;; Registers used:
 15643 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15644 ;; Tracked objects:
 15645 ;;		On entry : F/0
 15646 ;;		On exit  : 0/0
 15647 ;;		Unchanged: 0/0
 15648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15649 ;;      Params:         5       0       0       0       0       0       0
 15650 ;;      Locals:         5       0       0       0       0       0       0
 15651 ;;      Temps:          4       0       0       0       0       0       0
 15652 ;;      Totals:        14       0       0       0       0       0       0
 15653 ;;Total ram usage:       14 bytes
 15654 ;; Hardware stack levels used:    1
 15655 ;; Hardware stack levels required when called:    5
 15656 ;; This function calls:
 15657 ;;		_getCANFrame
 15658 ;; This function is called by:
 15659 ;;		_vscp_getEvent
 15660 ;; This function uses a non-reentrant model
 15661 ;;
 15662                           
 15663                           	psect	text75
 15664  004C8E                     __ptext75:
 15665                           	opt stack 0
 15666  004C8E                     _getVSCPFrame:
 15667                           	opt stack 24
 15668                           
 15669                           ;incstack = 0
 15670                           ;incstack = 0
 15671                           ;getVSCPFrame@pvscpclass stored from wreg
 15672  004C8E  CFE8 F02D          	movff	wreg,getVSCPFrame@pvscpclass
 15673                           
 15674                           ; BSR set to: 0
 15675                           ;main.c: 2943: uint32_t id;
 15676                           ;main.c: 2945: if (!getCANFrame(&id, pSize, pData)) {
 15677  004C92  C027  F020         	movff	getVSCPFrame@pSize,?_getCANFrame
 15678  004C96  C028  F021         	movff	getVSCPFrame@pData,?_getCANFrame+1
 15679  004C9A  0E2E               	movlw	getVSCPFrame@id& (0+255)
 15680  004C9C  EC05  F02A         	call	_getCANFrame
 15681  004CA0  0900               	iorlw	0
 15682  004CA2  E102               	bnz	l9321
 15683                           
 15684                           ;main.c: 2946: return 0;
 15685  004CA4  0E00               	movlw	0
 15686  004CA6  D02E               	goto	l635
 15687  004CA8                     l9321:
 15688                           
 15689                           ;main.c: 2947: }
 15690                           ;main.c: 2949: *pNodeId = id & 0x0ff;
 15691  004CA8  5025               	movf	getVSCPFrame@pNodeId,w,c
 15692  004CAA  6ED9               	movwf	fsr2l,c
 15693  004CAC  6ADA               	clrf	fsr2h,c
 15694  004CAE  C02E  FFDF         	movff	getVSCPFrame@id,indf2
 15695                           
 15696                           ;main.c: 2950: *pvscptype = (id >> 8) & 0xff;
 15697  004CB2  5024               	movf	getVSCPFrame@pvscptype,w,c
 15698  004CB4  6ED9               	movwf	fsr2l,c
 15699  004CB6  6ADA               	clrf	fsr2h,c
 15700  004CB8  C02F  FFDF         	movff	getVSCPFrame@id+1,indf2
 15701                           
 15702                           ;main.c: 2951: *pvscpclass = (id >> 16) & 0x1ff;
 15703  004CBC  5030               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 15704  004CBE  6E29               	movwf	??_getVSCPFrame& (0+255),c
 15705  004CC0  0E01               	movlw	1
 15706  004CC2  1431               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 15707  004CC4  6E2A               	movwf	(??_getVSCPFrame+1)& (0+255),c
 15708  004CC6  502D               	movf	getVSCPFrame@pvscpclass,w,c
 15709  004CC8  6ED9               	movwf	fsr2l,c
 15710  004CCA  6ADA               	clrf	fsr2h,c
 15711  004CCC  C029  FFDE         	movff	??_getVSCPFrame,postinc2
 15712  004CD0  C02A  FFDD         	movff	??_getVSCPFrame+1,postdec2
 15713                           
 15714                           ;main.c: 2952: *pPriority = (uint16_t) (0x07 & (id >> 26));
 15715  004CD4  5026               	movf	getVSCPFrame@pPriority,w,c
 15716  004CD6  6ED9               	movwf	fsr2l,c
 15717  004CD8  6ADA               	clrf	fsr2h,c
 15718  004CDA  C02E  F029         	movff	getVSCPFrame@id,??_getVSCPFrame
 15719  004CDE  C02F  F02A         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 15720  004CE2  C030  F02B         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 15721  004CE6  C031  F02C         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 15722  004CEA  0E1B               	movlw	27
 15723  004CEC  D005               	goto	u5530
 15724  004CEE                     u5535:
 15725  004CEE  90D8               	bcf	status,0,c
 15726  004CF0  322C               	rrcf	??_getVSCPFrame+3,f,c
 15727  004CF2  322B               	rrcf	??_getVSCPFrame+2,f,c
 15728  004CF4  322A               	rrcf	??_getVSCPFrame+1,f,c
 15729  004CF6  3229               	rrcf	??_getVSCPFrame,f,c
 15730  004CF8                     u5530:
 15731  004CF8  2EE8               	decfsz	wreg,f,c
 15732  004CFA  D7F9               	goto	u5535
 15733  004CFC  5029               	movf	??_getVSCPFrame,w,c
 15734  004CFE  0B07               	andlw	7
 15735  004D00  6EDF               	movwf	indf2,c
 15736                           
 15737                           ;main.c: 2954: return 1;
 15738  004D02  0E01               	movlw	1
 15739  004D04                     l635:
 15740  004D04  0012               	return	
 15741  004D06                     __end_of_getVSCPFrame:
 15742                           	opt stack 0
 15743                           tblptru	equ	0xFF8
 15744                           tblptrh	equ	0xFF7
 15745                           tblptrl	equ	0xFF6
 15746                           tablat	equ	0xFF5
 15747                           prodh	equ	0xFF4
 15748                           prodl	equ	0xFF3
 15749                           intcon	equ	0xFF2
 15750                           postinc0	equ	0xFEE
 15751                           wreg	equ	0xFE8
 15752                           indf1	equ	0xFE7
 15753                           postdec1	equ	0xFE5
 15754                           fsr1h	equ	0xFE2
 15755                           fsr1l	equ	0xFE1
 15756                           indf2	equ	0xFDF
 15757                           postinc2	equ	0xFDE
 15758                           postdec2	equ	0xFDD
 15759                           plusw2	equ	0xFDB
 15760                           fsr2h	equ	0xFDA
 15761                           fsr2l	equ	0xFD9
 15762                           status	equ	0xFD8
 15763                           
 15764 ;; *************** function _getCANFrame *****************
 15765 ;; Defined at:
 15766 ;;		line 2984 in file "../main.c"
 15767 ;; Parameters:    Size  Location     Type
 15768 ;;  pid             1    wreg     PTR unsigned long 
 15769 ;;		 -> getVSCPFrame@id(4), 
 15770 ;;  pdlc            1   31[COMRAM] PTR unsigned char 
 15771 ;;		 -> vscp_imsg(14), 
 15772 ;;  pdata           1   32[COMRAM] PTR unsigned char 
 15773 ;;		 -> vscp_imsg(14), 
 15774 ;; Auto vars:     Size  Location     Type
 15775 ;;  pid             1   33[COMRAM] PTR unsigned long 
 15776 ;;		 -> getVSCPFrame@id(4), 
 15777 ;;  flags           1   34[COMRAM] enum E16392
 15778 ;; Return value:  Size  Location     Type
 15779 ;;                  1    wreg      unsigned char 
 15780 ;; Registers used:
 15781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15782 ;; Tracked objects:
 15783 ;;		On entry : F/0
 15784 ;;		On exit  : 0/0
 15785 ;;		Unchanged: 0/0
 15786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15787 ;;      Params:         2       0       0       0       0       0       0
 15788 ;;      Locals:         2       0       0       0       0       0       0
 15789 ;;      Temps:          0       0       0       0       0       0       0
 15790 ;;      Totals:         4       0       0       0       0       0       0
 15791 ;;Total ram usage:        4 bytes
 15792 ;; Hardware stack levels used:    1
 15793 ;; Hardware stack levels required when called:    4
 15794 ;; This function calls:
 15795 ;;		_ECANReceiveMessage
 15796 ;; This function is called by:
 15797 ;;		_getVSCPFrame
 15798 ;; This function uses a non-reentrant model
 15799 ;;
 15800                           
 15801                           	psect	text76
 15802  00540A                     __ptext76:
 15803                           	opt stack 0
 15804  00540A                     _getCANFrame:
 15805                           	opt stack 24
 15806                           
 15807                           ;incstack = 0
 15808                           ;incstack = 0
 15809                           ;getCANFrame@pid stored from wreg
 15810  00540A  CFE8 F022          	movff	wreg,getCANFrame@pid
 15811                           
 15812                           ; BSR set to: 0
 15813                           ;main.c: 2985: ECAN_RX_MSG_FLAGS flags;
 15814                           ;main.c: 2989: if (vscp_imsg.flags & 0x80) return 0;
 15815  00540E  AFBD               	btfss	_vscp_imsg& (0+255),7,b
 15816  005410  D002               	goto	l9337
 15817  005412                     l9333:
 15818  005412  0E00               	movlw	0
 15819  005414  D00F               	goto	l646
 15820  005416                     l9337:
 15821                           
 15822                           ; BSR set to: 0
 15823                           ;main.c: 2991: if (ECANReceiveMessage((unsigned long *) pid, (BYTE*) pdata, (BYTE*) pdlc
      +                          , &flags)) {
 15824  005416  C021  F015         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 15825  00541A  C020  F016         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 15826  00541E  0E23               	movlw	low getCANFrame@flags
 15827  005420  6E17               	movwf	?_ECANReceiveMessage+2,c
 15828  005422  5022               	movf	getCANFrame@pid,w,c
 15829  005424  EC40  F01A         	call	_ECANReceiveMessage
 15830  005428  0900               	iorlw	0
 15831  00542A  E0F3               	bz	l9333
 15832                           
 15833                           ;main.c: 2993: if (flags & ECAN_RX_RTR_FRAME) return 0;
 15834  00542C  AC23               	btfss	getCANFrame@flags,6,c
 15835                           
 15836                           ;main.c: 2996: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 15837  00542E  AA23               	btfss	getCANFrame@flags,5,c
 15838  005430  D7F0               	goto	l9333
 15839                           
 15840                           ;main.c: 2998: return 1;
 15841  005432  0E01               	movlw	1
 15842  005434                     l646:
 15843  005434  0012               	return	
 15844  005436                     __end_of_getCANFrame:
 15845                           	opt stack 0
 15846                           tblptru	equ	0xFF8
 15847                           tblptrh	equ	0xFF7
 15848                           tblptrl	equ	0xFF6
 15849                           tablat	equ	0xFF5
 15850                           prodh	equ	0xFF4
 15851                           prodl	equ	0xFF3
 15852                           intcon	equ	0xFF2
 15853                           postinc0	equ	0xFEE
 15854                           wreg	equ	0xFE8
 15855                           indf1	equ	0xFE7
 15856                           postdec1	equ	0xFE5
 15857                           fsr1h	equ	0xFE2
 15858                           fsr1l	equ	0xFE1
 15859                           indf2	equ	0xFDF
 15860                           postinc2	equ	0xFDE
 15861                           postdec2	equ	0xFDD
 15862                           plusw2	equ	0xFDB
 15863                           fsr2h	equ	0xFDA
 15864                           fsr2l	equ	0xFD9
 15865                           status	equ	0xFD8
 15866                           
 15867 ;; *************** function _ECANReceiveMessage *****************
 15868 ;; Defined at:
 15869 ;;		line 803 in file "../ECAN.c"
 15870 ;; Parameters:    Size  Location     Type
 15871 ;;  id              1    wreg     PTR unsigned long 
 15872 ;;		 -> getVSCPFrame@id(4), 
 15873 ;;  data            1   20[COMRAM] PTR unsigned char 
 15874 ;;		 -> vscp_imsg(14), 
 15875 ;;  dataLen         1   21[COMRAM] PTR unsigned char 
 15876 ;;		 -> vscp_imsg(14), 
 15877 ;;  msgFlags        1   22[COMRAM] PTR enum E16324
 15878 ;;		 -> getCANFrame@flags(1), 
 15879 ;; Auto vars:     Size  Location     Type
 15880 ;;  id              1   25[COMRAM] PTR unsigned long 
 15881 ;;		 -> getVSCPFrame@id(4), 
 15882 ;;  ptr             2   29[COMRAM] PTR unsigned char 
 15883 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 15884 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 15885 ;;  savedPtr        2   23[COMRAM] PTR unsigned char 
 15886 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 15887 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 15888 ;;  temp            1   28[COMRAM] struct .
 15889 ;;  mode            1   27[COMRAM] unsigned char 
 15890 ;;  i               1   26[COMRAM] unsigned char 
 15891 ;; Return value:  Size  Location     Type
 15892 ;;                  1    wreg      enum E15660
 15893 ;; Registers used:
 15894 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 15895 ;; Tracked objects:
 15896 ;;		On entry : F/0
 15897 ;;		On exit  : 0/0
 15898 ;;		Unchanged: 0/0
 15899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15900 ;;      Params:         3       0       0       0       0       0       0
 15901 ;;      Locals:         8       0       0       0       0       0       0
 15902 ;;      Temps:          0       0       0       0       0       0       0
 15903 ;;      Totals:        11       0       0       0       0       0       0
 15904 ;;Total ram usage:       11 bytes
 15905 ;; Hardware stack levels used:    1
 15906 ;; Hardware stack levels required when called:    3
 15907 ;; This function calls:
 15908 ;;		__ECANPointBuffer
 15909 ;;		__RegsToCANID
 15910 ;; This function is called by:
 15911 ;;		_getCANFrame
 15912 ;; This function uses a non-reentrant model
 15913 ;;
 15914                           
 15915                           	psect	text77
 15916  003480                     __ptext77:
 15917                           	opt stack 0
 15918  003480                     _ECANReceiveMessage:
 15919                           	opt stack 24
 15920                           
 15921                           ;incstack = 0
 15922                           ;incstack = 0
 15923                           ;ECANReceiveMessage@id stored from wreg
 15924  003480  CFE8 F01A          	movff	wreg,ECANReceiveMessage@id
 15925                           
 15926                           ; BSR set to: 0
 15927                           ;ECAN.c: 805: BYTE mode;
 15928                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 15929                           ;ECAN.c: 809: char i;
 15930                           ;ECAN.c: 810: BYTE_VAL temp;
 15931                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 15932  003484  6A48               	clrf	__ECANRxFilterHitInfo,c
 15933                           
 15934                           ; BSR set to: 0
 15935                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 15936  003486  5077               	movf	3959,w,c	;volatile
 15937  003488  0BC0               	andlw	192
 15938  00348A  6E1C               	movwf	ECANReceiveMessage@mode,c
 15939                           
 15940                           ; BSR set to: 0
 15941                           ;ECAN.c: 816: if ( mode == 0x00 )
 15942  00348C  661C               	tstfsz	ECANReceiveMessage@mode,c
 15943  00348E  D032               	goto	l9469
 15944                           
 15945                           ; BSR set to: 0
 15946                           ;ECAN.c: 822: {
 15947                           ;ECAN.c: 824: if ( RXB0FUL )
 15948  003490  AE60               	btfss	3936,7,c	;volatile
 15949  003492  D012               	goto	l842
 15950                           
 15951                           ; BSR set to: 0
 15952                           ;ECAN.c: 825: {
 15953                           ;ECAN.c: 827: RXB0IF = 0;
 15954  003494  90A4               	bcf	4004,0,c	;volatile
 15955                           
 15956                           ;ECAN.c: 830: if ( RXB0OVFL )
 15957  003496  AE74               	btfss	3956,7,c	;volatile
 15958  003498  D006               	goto	l9445
 15959                           
 15960                           ; BSR set to: 0
 15961                           ;ECAN.c: 831: {
 15962                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 15963  00349A  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 15964  00349C  6ED9               	movwf	fsr2l,c
 15965  00349E  6ADA               	clrf	fsr2h,c
 15966  0034A0  0E00               	movlw	0
 15967  0034A2  86DB               	bsf	plusw2,3,c
 15968                           
 15969                           ; BSR set to: 0
 15970                           ;ECAN.c: 833: RXB0OVFL = 0;
 15971  0034A4  9E74               	bcf	3956,7,c	;volatile
 15972  0034A6                     l9445:
 15973                           
 15974                           ; BSR set to: 0
 15975                           ;ECAN.c: 834: }
 15976                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 15977  0034A6  A060               	btfss	3936,0,c	;volatile
 15978  0034A8  D002               	bra	u5705
 15979  0034AA  8048               	bsf	__ECANRxFilterHitInfo,0,c
 15980  0034AC  D001               	bra	u5707
 15981  0034AE                     u5705:
 15982  0034AE  9048               	bcf	__ECANRxFilterHitInfo,0,c
 15983  0034B0                     u5707:
 15984                           
 15985                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 15986  0034B0  0E0F               	movlw	15	;volatile
 15987  0034B2  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 15988  0034B4  0E60               	movlw	96	;volatile
 15989  0034B6  D01A               	goto	L34
 15990  0034B8                     l842:
 15991                           
 15992                           ; BSR set to: 0
 15993                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 15994  0034B8  010F               	movlb	15	; () banked
 15995  0034BA  AF50               	btfss	80,7,b	;volatile
 15996  0034BC  D019               	goto	l9463
 15997                           
 15998                           ; BSR set to: 15
 15999                           ;ECAN.c: 842: {
 16000                           ;ECAN.c: 844: RXB1IF = 0;
 16001  0034BE  92A4               	bcf	4004,1,c	;volatile
 16002                           
 16003                           ;ECAN.c: 847: if ( RXB1OVFL )
 16004  0034C0  AC74               	btfss	3956,6,c	;volatile
 16005  0034C2  D006               	goto	l9455
 16006                           
 16007                           ; BSR set to: 15
 16008                           ;ECAN.c: 848: {
 16009                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 16010  0034C4  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16011  0034C6  6ED9               	movwf	fsr2l,c
 16012  0034C8  6ADA               	clrf	fsr2h,c
 16013  0034CA  0E00               	movlw	0
 16014  0034CC  86DB               	bsf	plusw2,3,c
 16015                           
 16016                           ; BSR set to: 15
 16017                           ;ECAN.c: 850: RXB1OVFL = 0;
 16018  0034CE  9C74               	bcf	3956,6,c	;volatile
 16019  0034D0                     l9455:
 16020                           
 16021                           ; BSR set to: 15
 16022                           ;ECAN.c: 851: }
 16023                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 16024  0034D0  5150               	movf	80,w,b	;volatile
 16025  0034D2  0B07               	andlw	7
 16026  0034D4  6E48               	movwf	__ECANRxFilterHitInfo,c
 16027                           
 16028                           ; BSR set to: 15
 16029                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 16030  0034D6  0E02               	movlw	2
 16031  0034D8  6048               	cpfslt	__ECANRxFilterHitInfo,c
 16032  0034DA  D005               	goto	l9461
 16033                           
 16034                           ; BSR set to: 15
 16035                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 16036  0034DC  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16037  0034DE  6ED9               	movwf	fsr2l,c
 16038  0034E0  6ADA               	clrf	fsr2h,c
 16039  0034E2  0E00               	movlw	0
 16040  0034E4  8EDB               	bsf	plusw2,7,c
 16041  0034E6                     l9461:
 16042                           
 16043                           ; BSR set to: 15
 16044                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 16045  0034E6  0E0F               	movlw	15	;volatile
 16046  0034E8  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16047  0034EA  0E50               	movlw	80	;volatile
 16048  0034EC                     L34:
 16049  0034EC  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16050                           
 16051                           ;ECAN.c: 860: }
 16052  0034EE  D065               	goto	l9523
 16053  0034F0                     l9463:
 16054                           
 16055                           ;ECAN.c: 861: else
 16056                           ;ECAN.c: 862: return FALSE;
 16057  0034F0  0E00               	movlw	0
 16058  0034F2  D0C2               	goto	l849
 16059  0034F4                     l9469:
 16060                           
 16061                           ; BSR set to: 0
 16062                           ;ECAN.c: 869: else if ( mode == 0x40 )
 16063  0034F4  501C               	movf	ECANReceiveMessage@mode,w,c
 16064  0034F6  0A40               	xorlw	64
 16065  0034F8  E146               	bnz	l852
 16066                           
 16067                           ; BSR set to: 0
 16068                           ;ECAN.c: 875: {
 16069                           ;ECAN.c: 876: if ( RXB0FUL )
 16070  0034FA  AE60               	btfss	3936,7,c	;volatile
 16071  0034FC  D004               	goto	l853
 16072                           
 16073                           ; BSR set to: 0
 16074                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 16075  0034FE  0E0F               	movlw	15	;volatile
 16076  003500  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16077  003502  0E60               	movlw	96	;volatile
 16078  003504  D03E               	goto	L41
 16079  003506                     l853:
 16080                           
 16081                           ; BSR set to: 0
 16082                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 16083  003506  010F               	movlb	15	; () banked
 16084  003508  AF50               	btfss	80,7,b	;volatile
 16085  00350A  D004               	goto	l855
 16086                           
 16087                           ; BSR set to: 15
 16088                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 16089  00350C  0E0F               	movlw	15	;volatile
 16090  00350E  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16091  003510  0E50               	movlw	80	;volatile
 16092  003512  D037               	goto	L41
 16093  003514                     l855:
 16094                           
 16095                           ; BSR set to: 15
 16096                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 16097  003514  010D               	movlb	13
 16098  003516  B5F8               	btfsc	248,2,b	;volatile
 16099  003518  D007               	goto	l857
 16100  00351A  010E               	movlb	14
 16101  00351C  AF20               	btfss	32,7,b	;volatile
 16102  00351E  D004               	goto	l857
 16103                           
 16104                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 16105  003520  0E0E               	movlw	14	;volatile
 16106  003522  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16107  003524  0E20               	movlw	32	;volatile
 16108  003526  D02D               	goto	L41
 16109  003528                     l857:
 16110                           
 16111                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 16112  003528  010D               	movlb	13
 16113  00352A  B7F8               	btfsc	248,3,b	;volatile
 16114  00352C  D007               	goto	l859
 16115  00352E  010E               	movlb	14
 16116  003530  AF30               	btfss	48,7,b	;volatile
 16117  003532  D004               	goto	l859
 16118                           
 16119                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 16120  003534  0E0E               	movlw	14	;volatile
 16121  003536  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16122  003538  0E30               	movlw	48	;volatile
 16123  00353A  D023               	goto	L41
 16124  00353C                     l859:
 16125                           
 16126                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 16127  00353C  010D               	movlb	13
 16128  00353E  B9F8               	btfsc	248,4,b	;volatile
 16129  003540  D007               	goto	l861
 16130  003542  010E               	movlb	14
 16131  003544  AF40               	btfss	64,7,b	;volatile
 16132  003546  D004               	goto	l861
 16133                           
 16134                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 16135  003548  0E0E               	movlw	14	;volatile
 16136  00354A  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16137  00354C  0E40               	movlw	64	;volatile
 16138  00354E  D019               	goto	L41
 16139  003550                     l861:
 16140                           
 16141                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 16142  003550  010D               	movlb	13
 16143  003552  BBF8               	btfsc	248,5,b	;volatile
 16144  003554  D005               	goto	l863
 16145  003556  010E               	movlb	14
 16146  003558  AF50               	btfss	80,7,b	;volatile
 16147  00355A  D002               	goto	l863
 16148                           
 16149                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 16150  00355C  0E0E               	movlw	14	;volatile
 16151  00355E  D7D7               	goto	L42
 16152  003560                     l863:
 16153                           
 16154                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 16155  003560  010D               	movlb	13
 16156  003562  BDF8               	btfsc	248,6,b	;volatile
 16157  003564  D005               	goto	l865
 16158  003566  010E               	movlb	14
 16159  003568  AF60               	btfss	96,7,b	;volatile
 16160  00356A  D002               	goto	l865
 16161                           
 16162                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 16163  00356C  0E0E               	movlw	14	;volatile
 16164  00356E  D7C8               	goto	L43
 16165  003570                     l865:
 16166                           
 16167                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 16168  003570  010D               	movlb	13
 16169  003572  BFF8               	btfsc	248,7,b	;volatile
 16170  003574  D7BD               	goto	l9463
 16171  003576  010E               	movlb	14
 16172  003578  AF70               	btfss	112,7,b	;volatile
 16173  00357A  D7BA               	goto	l9463
 16174                           
 16175                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 16176  00357C  0E0E               	movlw	14	;volatile
 16177  00357E  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16178  003580  0E70               	movlw	112	;volatile
 16179  003582                     L41:
 16180  003582  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16181  003584  D00A               	goto	l9513
 16182  003586                     l852:
 16183                           
 16184                           ; BSR set to: 0
 16185                           ;ECAN.c: 910: else
 16186                           ;ECAN.c: 915: {
 16187                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 16188  003586  AE74               	btfss	3956,7,c	;volatile
 16189  003588  D7B3               	goto	l9463
 16190                           
 16191                           ; BSR set to: 0
 16192                           ;ECAN.c: 917: {
 16193                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 16194  00358A  506F               	movf	3951,w,c	;volatile
 16195  00358C  0B07               	andlw	7
 16196  00358E  ECBE  F026         	call	__ECANPointBuffer
 16197  003592  C00E  F01E         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 16198  003596  C00F  F01F         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 16199  00359A                     l9513:
 16200                           
 16201                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 16202  00359A  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 16203  00359E  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 16204  0035A2  50DF               	movf	indf2,w,c
 16205  0035A4  0B1F               	andlw	31
 16206  0035A6  6E48               	movwf	__ECANRxFilterHitInfo,c
 16207                           
 16208                           ;ECAN.c: 932: RXB1IF = 0;
 16209  0035A8  92A4               	bcf	4004,1,c	;volatile
 16210                           
 16211                           ;ECAN.c: 934: if ( RXB1OVFL )
 16212  0035AA  AC74               	btfss	3956,6,c	;volatile
 16213  0035AC  D006               	goto	l9523
 16214                           
 16215                           ;ECAN.c: 935: {
 16216                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 16217  0035AE  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16218  0035B0  6ED9               	movwf	fsr2l,c
 16219  0035B2  6ADA               	clrf	fsr2h,c
 16220  0035B4  0E00               	movlw	0
 16221  0035B6  86DB               	bsf	plusw2,3,c
 16222                           
 16223                           ;ECAN.c: 937: RXB1OVFL = 0;
 16224  0035B8  9C74               	bcf	3956,6,c	;volatile
 16225  0035BA                     l9523:
 16226                           
 16227                           ;ECAN.c: 942: savedPtr = ptr;
 16228  0035BA  C01E  F018         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 16229  0035BE  C01F  F019         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 16230                           
 16231                           ;ECAN.c: 943: *msgFlags = 0;
 16232  0035C2  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16233  0035C4  6ED9               	movwf	fsr2l,c
 16234  0035C6  6ADA               	clrf	fsr2h,c
 16235  0035C8  6ADF               	clrf	indf2,c
 16236                           
 16237                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 16238  0035CA  EE20 F005          	lfsr	2,5
 16239  0035CE  D855               	call	PL74	;call to abstracted procedure
 16240                           
 16241                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 16242  0035D0  5016               	movf	ECANReceiveMessage@dataLen,w,c
 16243  0035D2  6ED9               	movwf	fsr2l,c
 16244  0035D4  6ADA               	clrf	fsr2h,c
 16245  0035D6  501D               	movf	ECANReceiveMessage@temp,w,c
 16246  0035D8  0B0F               	andlw	15
 16247  0035DA  6EDF               	movwf	indf2,c
 16248                           
 16249                           ;ECAN.c: 950: if ( temp.bits.b6 )
 16250  0035DC  AC1D               	btfss	ECANReceiveMessage@temp,6,c
 16251  0035DE  D005               	goto	l873
 16252                           
 16253                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 16254  0035E0  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16255  0035E2  6ED9               	movwf	fsr2l,c
 16256  0035E4  6ADA               	clrf	fsr2h,c
 16257  0035E6  0E00               	movlw	0
 16258  0035E8  8CDB               	bsf	plusw2,6,c
 16259  0035EA                     l873:
 16260                           
 16261                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 16262  0035EA  EE20 F002          	lfsr	2,2
 16263  0035EE  D845               	call	PL74	;call to abstracted procedure
 16264                           
 16265                           ;ECAN.c: 955: if ( temp.bits.b3 )
 16266  0035F0  A61D               	btfss	ECANReceiveMessage@temp,3,c
 16267  0035F2  D008               	goto	l874
 16268                           
 16269                           ;ECAN.c: 956: {
 16270                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 16271  0035F4  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16272  0035F6  6ED9               	movwf	fsr2l,c
 16273  0035F8  6ADA               	clrf	fsr2h,c
 16274  0035FA  0E00               	movlw	0
 16275  0035FC  8ADB               	bsf	plusw2,5,c
 16276                           
 16277                           ;ECAN.c: 958: temp.Val = 1;
 16278  0035FE  0E01               	movlw	1
 16279  003600  6E1D               	movwf	ECANReceiveMessage@temp,c
 16280                           
 16281                           ;ECAN.c: 959: }
 16282  003602  D001               	goto	l9541
 16283  003604                     l874:
 16284                           
 16285                           ;ECAN.c: 960: else
 16286                           ;ECAN.c: 961: temp.Val = 0;
 16287  003604  6A1D               	clrf	ECANReceiveMessage@temp,c
 16288  003606                     l9541:
 16289                           
 16290                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 16291  003606  281E               	incf	ECANReceiveMessage@ptr,w,c
 16292  003608  6E0E               	movwf	?__RegsToCANID,c
 16293  00360A  0E00               	movlw	0
 16294  00360C  201F               	addwfc	ECANReceiveMessage@ptr+1,w,c
 16295  00360E  6E0F               	movwf	?__RegsToCANID+1,c
 16296  003610  C01A  F010         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 16297  003614  C01D  F011         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 16298  003618  ECFB  F01E         	call	__RegsToCANID	;wreg free
 16299                           
 16300                           ;ECAN.c: 966: ptr += 6;
 16301  00361C  0E06               	movlw	6
 16302  00361E  261E               	addwf	ECANReceiveMessage@ptr,f,c
 16303  003620  0E00               	movlw	0
 16304  003622  221F               	addwfc	ECANReceiveMessage@ptr+1,f,c
 16305                           
 16306                           ;ECAN.c: 967: temp.Val = *dataLen;
 16307  003624  5016               	movf	ECANReceiveMessage@dataLen,w,c
 16308  003626  6ED9               	movwf	fsr2l,c
 16309  003628  6ADA               	clrf	fsr2h,c
 16310  00362A  50DF               	movf	indf2,w,c
 16311  00362C  6E1D               	movwf	ECANReceiveMessage@temp,c
 16312                           
 16313                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 16314  00362E  6A1B               	clrf	ECANReceiveMessage@i,c
 16315  003630  D00D               	goto	l9557
 16316  003632                     l9549:
 16317                           
 16318                           ;ECAN.c: 969: *data++ = *ptr++;
 16319  003632  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 16320  003636  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 16321  00363A  5015               	movf	ECANReceiveMessage@data,w,c
 16322  00363C  6EE1               	movwf	fsr1l,c
 16323  00363E  6AE2               	clrf	fsr1h,c
 16324  003640  CFDF FFE7          	movff	indf2,indf1
 16325  003644  4A1E               	infsnz	ECANReceiveMessage@ptr,f,c
 16326  003646  2A1F               	incf	ECANReceiveMessage@ptr+1,f,c
 16327  003648  2A15               	incf	ECANReceiveMessage@data,f,c
 16328  00364A  2A1B               	incf	ECANReceiveMessage@i,f,c
 16329  00364C                     l9557:
 16330  00364C  501D               	movf	ECANReceiveMessage@temp,w,c
 16331  00364E  5C1B               	subwf	ECANReceiveMessage@i,w,c
 16332  003650  E3F0               	bnc	l9549
 16333                           
 16334                           ;ECAN.c: 972: if ( IRXIF )
 16335  003652  AEA4               	btfss	4004,7,c	;volatile
 16336  003654  D006               	goto	l9563
 16337                           
 16338                           ;ECAN.c: 973: {
 16339                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 16340  003656  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16341  003658  6ED9               	movwf	fsr2l,c
 16342  00365A  6ADA               	clrf	fsr2h,c
 16343  00365C  0E00               	movlw	0
 16344  00365E  88DB               	bsf	plusw2,4,c
 16345                           
 16346                           ;ECAN.c: 975: IRXIF = 0;
 16347  003660  9EA4               	bcf	4004,7,c	;volatile
 16348  003662                     l9563:
 16349                           
 16350                           ;ECAN.c: 976: }
 16351                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 16352  003662  C018  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 16353  003666  C019  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 16354  00366A  0E7F               	movlw	127
 16355  00366C  16DF               	andwf	indf2,f,c
 16356                           
 16357                           ;ECAN.c: 983: if ( mode == 0x80 )
 16358  00366E  501C               	movf	ECANReceiveMessage@mode,w,c
 16359  003670  0A80               	xorlw	128
 16360  003672  B4D8               	btfsc	status,2,c
 16361                           
 16362                           ;ECAN.c: 984: FIFOEMPTY = 0;
 16363  003674  9E74               	bcf	3956,7,c	;volatile
 16364                           
 16365                           ;ECAN.c: 990: return TRUE;
 16366  003676  0E01               	movlw	1
 16367  003678                     l849:
 16368  003678  0012               	return	
 16369  00367A                     __end_of_ECANReceiveMessage:
 16370                           	opt stack 0
 16371  00367A                     PL74:
 16372                           	opt stack 24
 16373  00367A  501E               	movf	ECANReceiveMessage@ptr,w,c
 16374  00367C  26D9               	addwf	fsr2l,f,c
 16375  00367E  501F               	movf	ECANReceiveMessage@ptr+1,w,c
 16376  003680  22DA               	addwfc	fsr2h,f,c
 16377  003682  50DF               	movf	indf2,w,c
 16378  003684  6E1D               	movwf	ECANReceiveMessage@temp,c
 16379  003686  0012               	return	
 16380  003688                     __end_ofPL74:
 16381                           	opt stack 0
 16382                           tblptru	equ	0xFF8
 16383                           tblptrh	equ	0xFF7
 16384                           tblptrl	equ	0xFF6
 16385                           tablat	equ	0xFF5
 16386                           prodh	equ	0xFF4
 16387                           prodl	equ	0xFF3
 16388                           intcon	equ	0xFF2
 16389                           postinc0	equ	0xFEE
 16390                           wreg	equ	0xFE8
 16391                           indf1	equ	0xFE7
 16392                           postdec1	equ	0xFE5
 16393                           fsr1h	equ	0xFE2
 16394                           fsr1l	equ	0xFE1
 16395                           indf2	equ	0xFDF
 16396                           postinc2	equ	0xFDE
 16397                           postdec2	equ	0xFDD
 16398                           plusw2	equ	0xFDB
 16399                           fsr2h	equ	0xFDA
 16400                           fsr2l	equ	0xFD9
 16401                           status	equ	0xFD8
 16402                           
 16403 ;; *************** function __RegsToCANID *****************
 16404 ;; Defined at:
 16405 ;;		line 1156 in file "../ECAN.c"
 16406 ;; Parameters:    Size  Location     Type
 16407 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 16408 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16409 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16410 ;;  val             1   15[COMRAM] PTR unsigned long 
 16411 ;;		 -> getVSCPFrame@id(4), 
 16412 ;;  type            1   16[COMRAM] unsigned char 
 16413 ;; Auto vars:     Size  Location     Type
 16414 ;;  Value           1   19[COMRAM] PTR struct _CAN_MESSAGE_
 16415 ;;		 -> getVSCPFrame@id(4), 
 16416 ;; Return value:  Size  Location     Type
 16417 ;;		None               void
 16418 ;; Registers used:
 16419 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16420 ;; Tracked objects:
 16421 ;;		On entry : 0/0
 16422 ;;		On exit  : 0/0
 16423 ;;		Unchanged: 0/0
 16424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16425 ;;      Params:         4       0       0       0       0       0       0
 16426 ;;      Locals:         1       0       0       0       0       0       0
 16427 ;;      Temps:          2       0       0       0       0       0       0
 16428 ;;      Totals:         7       0       0       0       0       0       0
 16429 ;;Total ram usage:        7 bytes
 16430 ;; Hardware stack levels used:    1
 16431 ;; Hardware stack levels required when called:    2
 16432 ;; This function calls:
 16433 ;;		Nothing
 16434 ;; This function is called by:
 16435 ;;		_ECANReceiveMessage
 16436 ;; This function uses a non-reentrant model
 16437 ;;
 16438                           
 16439                           	psect	text78
 16440  003DF6                     __ptext78:
 16441                           	opt stack 0
 16442  003DF6                     __RegsToCANID:
 16443                           	opt stack 24
 16444                           
 16445                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 16446                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 16447                           
 16448                           ;incstack = 0
 16449                           ;incstack = 0
 16450  003DF6  C010  F014         	movff	__RegsToCANID@val,__RegsToCANID@Value
 16451                           
 16452                           ;ECAN.c: 1161: if ( type == 0 )
 16453  003DFA  6611               	tstfsz	__RegsToCANID@type,c
 16454  003DFC  D02B               	goto	l9633
 16455                           
 16456                           ;ECAN.c: 1162: {
 16457                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 16458  003DFE  5014               	movf	__RegsToCANID@Value,w,c
 16459  003E00  6ED9               	movwf	fsr2l,c
 16460  003E02  D862               	call	PL32	;call to abstracted procedure
 16461  003E04  3612               	rlcf	??__RegsToCANID,f,c
 16462  003E06  90D8               	bcf	status,0,c
 16463  003E08  3612               	rlcf	??__RegsToCANID,f,c
 16464  003E0A  90D8               	bcf	status,0,c
 16465  003E0C  3412               	rlcf	??__RegsToCANID,w,c
 16466  003E0E  6EDF               	movwf	indf2,c
 16467                           
 16468                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 16469  003E10  5014               	movf	__RegsToCANID@Value,w,c
 16470  003E12  6ED9               	movwf	fsr2l,c
 16471  003E14  6ADA               	clrf	fsr2h,c
 16472  003E16  2AD9               	incf	fsr2l,f,c
 16473  003E18  6ADA               	clrf	fsr2h,c
 16474  003E1A  D873               	call	PL52	;call to abstracted procedure
 16475  003E1C                     u6015:
 16476  003E1C  90D8               	bcf	status,0,c
 16477  003E1E  3212               	rrcf	??__RegsToCANID,f,c
 16478  003E20  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 16479  003E22  D7FC               	goto	u6015
 16480  003E24  5012               	movf	??__RegsToCANID,w,c
 16481                           
 16482                           ;ECAN.c: 1166: ptr++;
 16483                           
 16484                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 16485  003E26  D859               	call	PL34	;call to abstracted procedure
 16486  003E28  0E05               	movlw	5
 16487  003E2A  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 16488  003E2C                     u6025:
 16489  003E2C  90D8               	bcf	status,0,c
 16490  003E2E  3212               	rrcf	??__RegsToCANID,f,c
 16491  003E30  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 16492  003E32  D7FC               	goto	u6025
 16493  003E34  5014               	movf	__RegsToCANID@Value,w,c
 16494  003E36  6ED9               	movwf	fsr2l,c
 16495  003E38  6ADA               	clrf	fsr2h,c
 16496  003E3A  5012               	movf	??__RegsToCANID,w,c
 16497  003E3C  12DF               	iorwf	indf2,f,c
 16498                           
 16499                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 16500  003E3E  D83D               	call	PL18	;call to abstracted procedure
 16501  003E40  6ADF               	clrf	indf2,c
 16502                           
 16503                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 16504  003E42  5014               	movf	__RegsToCANID@Value,w,c
 16505  003E44  6ED9               	movwf	fsr2l,c
 16506  003E46  6ADA               	clrf	fsr2h,c
 16507  003E48  0E03               	movlw	3
 16508  003E4A  26D9               	addwf	fsr2l,f,c
 16509  003E4C  6ADA               	clrf	fsr2h,c
 16510  003E4E  0E00               	movlw	0
 16511  003E50  6EDF               	movwf	indf2,c
 16512                           
 16513                           ;ECAN.c: 1170: }
 16514  003E52  D032               	goto	l896
 16515  003E54                     l9633:
 16516                           
 16517                           ;ECAN.c: 1171: else
 16518                           ;ECAN.c: 1172: {
 16519                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 16520  003E54  D832               	call	PL18	;call to abstracted procedure
 16521  003E56  D855               	call	PL52	;call to abstracted procedure
 16522  003E58                     u6035:
 16523  003E58  90D8               	bcf	status,0,c
 16524  003E5A  3612               	rlcf	??__RegsToCANID,f,c
 16525  003E5C  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 16526  003E5E  D7FC               	goto	u6035
 16527  003E60  5012               	movf	??__RegsToCANID,w,c
 16528  003E62  6EDF               	movwf	indf2,c
 16529                           
 16530                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 16531  003E64  5014               	movf	__RegsToCANID@Value,w,c
 16532  003E66  6ED9               	movwf	fsr2l,c
 16533  003E68  6ADA               	clrf	fsr2h,c
 16534  003E6A  0E03               	movlw	3
 16535  003E6C  26D9               	addwf	fsr2l,f,c
 16536  003E6E  D82C               	call	PL32	;call to abstracted procedure
 16537  003E70  3212               	rrcf	??__RegsToCANID,f,c
 16538  003E72  90D8               	bcf	status,0,c
 16539  003E74  3212               	rrcf	??__RegsToCANID,f,c
 16540  003E76  90D8               	bcf	status,0,c
 16541  003E78  3012               	rrcf	??__RegsToCANID,w,c
 16542                           
 16543                           ;ECAN.c: 1176: ptr++;
 16544                           
 16545                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 16546  003E7A  D82F               	call	PL34	;call to abstracted procedure
 16547  003E7C  0E03               	movlw	3
 16548  003E7E  1612               	andwf	??__RegsToCANID,f,c
 16549  003E80  D81C               	call	PL18	;call to abstracted procedure
 16550  003E82  5012               	movf	??__RegsToCANID,w,c
 16551  003E84  12DF               	iorwf	indf2,f,c
 16552                           
 16553                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 16554  003E86  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 16555  003E8A  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 16556  003E8E  50DF               	movf	indf2,w,c
 16557  003E90  6E12               	movwf	??__RegsToCANID& (0+255),c
 16558  003E92  90D8               	bcf	status,0,c
 16559  003E94  3212               	rrcf	??__RegsToCANID,f,c
 16560  003E96  90D8               	bcf	status,0,c
 16561  003E98  3212               	rrcf	??__RegsToCANID,f,c
 16562  003E9A  90D8               	bcf	status,0,c
 16563  003E9C  3212               	rrcf	??__RegsToCANID,f,c
 16564  003E9E  0E1C               	movlw	28
 16565  003EA0  1612               	andwf	??__RegsToCANID,f,c
 16566  003EA2  D80B               	call	PL18	;call to abstracted procedure
 16567  003EA4  5012               	movf	??__RegsToCANID,w,c
 16568  003EA6  12DF               	iorwf	indf2,f,c
 16569                           
 16570                           ;ECAN.c: 1180: ptr++;
 16571                           
 16572                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 16573  003EA8  D822               	call	PL44	;call to abstracted procedure
 16574  003EAA  2AE1               	incf	fsr1l,f,c
 16575  003EAC  6AE2               	clrf	fsr1h,c
 16576  003EAE  CFDF FFE7          	movff	indf2,indf1
 16577                           
 16578                           ;ECAN.c: 1182: ptr++;
 16579                           
 16580                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 16581  003EB2  D81D               	call	PL44	;call to abstracted procedure
 16582  003EB4  CFDF FFE7          	movff	indf2,indf1
 16583  003EB8                     l896:
 16584  003EB8  0012               	return	
 16585  003EBA                     __end_of__RegsToCANID:
 16586                           	opt stack 0
 16587  003EBA                     PL18:
 16588                           	opt stack 24
 16589  003EBA  5014               	movf	__RegsToCANID@Value,w,c
 16590  003EBC  6ED9               	movwf	fsr2l,c
 16591  003EBE  6ADA               	clrf	fsr2h,c
 16592  003EC0  0E02               	movlw	2
 16593  003EC2  26D9               	addwf	fsr2l,f,c
 16594  003EC4  6ADA               	clrf	fsr2h,c
 16595  003EC6  0012               	return	
 16596  003EC8                     __end_ofPL18:
 16597                           	opt stack 0
 16598  003EC8                     PL32:
 16599                           	opt stack 24
 16600  003EC8  6ADA               	clrf	fsr2h,c
 16601  003ECA  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 16602  003ECE  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 16603  003ED2  50E7               	movf	indf1,w,c
 16604  003ED4  6E12               	movwf	??__RegsToCANID& (0+255),c
 16605  003ED6  90D8               	bcf	status,0,c
 16606  003ED8  0012               	return	
 16607  003EDA                     __end_ofPL32:
 16608                           	opt stack 0
 16609  003EDA                     PL34:
 16610                           	opt stack 24
 16611  003EDA  6EDF               	movwf	indf2,c
 16612  003EDC  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 16613  003EDE  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 16614  003EE0  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 16615  003EE4  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 16616  003EE8  50DF               	movf	indf2,w,c
 16617  003EEA  6E12               	movwf	??__RegsToCANID& (0+255),c
 16618  003EEC  0012               	return	
 16619  003EEE                     __end_ofPL34:
 16620                           	opt stack 0
 16621  003EEE                     PL44:
 16622                           	opt stack 24
 16623  003EEE  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 16624  003EF0  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 16625  003EF2  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 16626  003EF6  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 16627  003EFA  5014               	movf	__RegsToCANID@Value,w,c
 16628  003EFC  6EE1               	movwf	fsr1l,c
 16629  003EFE  6AE2               	clrf	fsr1h,c
 16630  003F00  0012               	return	
 16631  003F02                     __end_ofPL44:
 16632                           	opt stack 0
 16633  003F02                     PL52:
 16634                           	opt stack 24
 16635  003F02  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 16636  003F06  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 16637  003F0A  50E7               	movf	indf1,w,c
 16638  003F0C  6E12               	movwf	??__RegsToCANID& (0+255),c
 16639  003F0E  0E05               	movlw	5
 16640  003F10  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 16641  003F12  0C05               	retlw	5
 16642  003F14                     __end_ofPL52:
 16643                           	opt stack 0
 16644                           tblptru	equ	0xFF8
 16645                           tblptrh	equ	0xFF7
 16646                           tblptrl	equ	0xFF6
 16647                           tablat	equ	0xFF5
 16648                           prodh	equ	0xFF4
 16649                           prodl	equ	0xFF3
 16650                           intcon	equ	0xFF2
 16651                           postinc0	equ	0xFEE
 16652                           wreg	equ	0xFE8
 16653                           indf1	equ	0xFE7
 16654                           postdec1	equ	0xFE5
 16655                           fsr1h	equ	0xFE2
 16656                           fsr1l	equ	0xFE1
 16657                           indf2	equ	0xFDF
 16658                           postinc2	equ	0xFDE
 16659                           postdec2	equ	0xFDD
 16660                           plusw2	equ	0xFDB
 16661                           fsr2h	equ	0xFDA
 16662                           fsr2l	equ	0xFD9
 16663                           status	equ	0xFD8
 16664                           
 16665 ;; *************** function __ECANPointBuffer *****************
 16666 ;; Defined at:
 16667 ;;		line 1207 in file "../ECAN.c"
 16668 ;; Parameters:    Size  Location     Type
 16669 ;;  b               1    wreg     unsigned char 
 16670 ;; Auto vars:     Size  Location     Type
 16671 ;;  b               1   16[COMRAM] unsigned char 
 16672 ;;  pt              2   17[COMRAM] PTR unsigned char 
 16673 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16674 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16675 ;; Return value:  Size  Location     Type
 16676 ;;                  2   13[COMRAM] PTR unsigned char 
 16677 ;; Registers used:
 16678 ;;		wreg, status,2, status,0
 16679 ;; Tracked objects:
 16680 ;;		On entry : F/0
 16681 ;;		On exit  : 0/0
 16682 ;;		Unchanged: 0/0
 16683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16684 ;;      Params:         3       0       0       0       0       0       0
 16685 ;;      Locals:         3       0       0       0       0       0       0
 16686 ;;      Temps:          0       0       0       0       0       0       0
 16687 ;;      Totals:         6       0       0       0       0       0       0
 16688 ;;Total ram usage:        6 bytes
 16689 ;; Hardware stack levels used:    1
 16690 ;; Hardware stack levels required when called:    2
 16691 ;; This function calls:
 16692 ;;		Nothing
 16693 ;; This function is called by:
 16694 ;;		_ECANReceiveMessage
 16695 ;; This function uses a non-reentrant model
 16696 ;;
 16697                           
 16698                           	psect	text79
 16699  004D7C                     __ptext79:
 16700                           	opt stack 0
 16701  004D7C                     __ECANPointBuffer:
 16702                           	opt stack 24
 16703                           
 16704                           ;incstack = 0
 16705                           ;incstack = 0
 16706                           ;__ECANPointBuffer@b stored from wreg
 16707  004D7C  CFE8 F011          	movff	wreg,__ECANPointBuffer@b
 16708                           
 16709                           ; BSR set to: 0
 16710                           ;ECAN.c: 1208: BYTE* pt;
 16711                           ;ECAN.c: 1210: switch(b)
 16712  004D80  D024               	goto	l9619
 16713  004D82                     l9601:
 16714                           
 16715                           ; BSR set to: 0
 16716                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 16717  004D82  0E0F               	movlw	15	;volatile
 16718  004D84  6E13               	movwf	__ECANPointBuffer@pt+1,c
 16719  004D86  0E60               	movlw	96	;volatile
 16720  004D88  D01E               	goto	L50
 16721  004D8A                     l9603:
 16722                           
 16723                           ; BSR set to: 0
 16724                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 16725  004D8A  010F               	movlb	15	; () banked
 16726  004D8C  0E0F               	movlw	15	;volatile
 16727  004D8E  6E13               	movwf	__ECANPointBuffer@pt+1,c
 16728  004D90  0E50               	movlw	80	;volatile
 16729  004D92  D019               	goto	L50
 16730  004D94                     l9605:
 16731                           
 16732                           ; BSR set to: 0
 16733                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 16734  004D94  010E               	movlb	14	; () banked
 16735  004D96  0E0E               	movlw	14	;volatile
 16736  004D98  6E13               	movwf	__ECANPointBuffer@pt+1,c
 16737  004D9A  0E20               	movlw	32	;volatile
 16738  004D9C  D014               	goto	L50
 16739  004D9E                     l9607:
 16740                           
 16741                           ; BSR set to: 0
 16742                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 16743  004D9E  010E               	movlb	14	; () banked
 16744  004DA0  0E0E               	movlw	14	;volatile
 16745  004DA2  6E13               	movwf	__ECANPointBuffer@pt+1,c
 16746  004DA4  0E30               	movlw	48	;volatile
 16747  004DA6  D00F               	goto	L50
 16748  004DA8                     l9609:
 16749                           
 16750                           ; BSR set to: 0
 16751                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 16752  004DA8  010E               	movlb	14	; () banked
 16753  004DAA  0E0E               	movlw	14	;volatile
 16754  004DAC  6E13               	movwf	__ECANPointBuffer@pt+1,c
 16755  004DAE  0E40               	movlw	64	;volatile
 16756  004DB0  D00A               	goto	L50
 16757  004DB2                     l9611:
 16758                           
 16759                           ; BSR set to: 0
 16760                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 16761  004DB2  010E               	movlb	14	; () banked
 16762  004DB4  0E0E               	movlw	14	;volatile
 16763  004DB6  D7EB               	goto	L51
 16764  004DB8                     l9613:
 16765                           
 16766                           ; BSR set to: 0
 16767                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 16768  004DB8  010E               	movlb	14	; () banked
 16769  004DBA  0E0E               	movlw	14	;volatile
 16770  004DBC  D7E3               	goto	L52
 16771  004DBE                     l9615:
 16772                           
 16773                           ; BSR set to: 0
 16774                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 16775  004DBE  010E               	movlb	14	; () banked
 16776  004DC0  0E0E               	movlw	14	;volatile
 16777  004DC2  6E13               	movwf	__ECANPointBuffer@pt+1,c
 16778  004DC4  0E70               	movlw	112	;volatile
 16779  004DC6                     L50:
 16780  004DC6  6E12               	movwf	__ECANPointBuffer@pt,c
 16781                           
 16782                           ;ECAN.c: 1235: break;
 16783  004DC8  D00F               	goto	l901
 16784  004DCA                     l9619:
 16785                           
 16786                           ; BSR set to: 0
 16787  004DCA  5011               	movf	__ECANPointBuffer@b,w,c
 16788                           
 16789                           ; Switch size 1, requested type "space"
 16790                           ; Number of cases is 7, Range of values is 0 to 6
 16791                           ; switch strategies available:
 16792                           ; Name         Instructions Cycles
 16793                           ; simple_byte           22    12 (average)
 16794                           ;	Chosen strategy is simple_byte
 16795  004DCC  E0DA               	bz	l9601
 16796  004DCE  0A01               	xorlw	1	; case 1
 16797  004DD0  E0DC               	bz	l9603
 16798  004DD2  0A03               	xorlw	3	; case 2
 16799  004DD4  E0DF               	bz	l9605
 16800  004DD6  0A01               	xorlw	1	; case 3
 16801  004DD8  E0E2               	bz	l9607
 16802  004DDA  0A07               	xorlw	7	; case 4
 16803  004DDC  E0E5               	bz	l9609
 16804  004DDE  0A01               	xorlw	1	; case 5
 16805  004DE0  E0E8               	bz	l9611
 16806  004DE2  0A03               	xorlw	3	; case 6
 16807  004DE4  E0E9               	bz	l9613
 16808  004DE6  D7EB               	goto	l9615
 16809  004DE8                     l901:
 16810                           
 16811                           ;ECAN.c: 1237: return (pt);
 16812  004DE8  C012  F00E         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 16813  004DEC  C013  F00F         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 16814  004DF0  0012               	return	
 16815  004DF2                     __end_of__ECANPointBuffer:
 16816                           	opt stack 0
 16817                           tblptru	equ	0xFF8
 16818                           tblptrh	equ	0xFF7
 16819                           tblptrl	equ	0xFF6
 16820                           tablat	equ	0xFF5
 16821                           prodh	equ	0xFF4
 16822                           prodl	equ	0xFF3
 16823                           intcon	equ	0xFF2
 16824                           postinc0	equ	0xFEE
 16825                           wreg	equ	0xFE8
 16826                           indf1	equ	0xFE7
 16827                           postdec1	equ	0xFE5
 16828                           fsr1h	equ	0xFE2
 16829                           fsr1l	equ	0xFE1
 16830                           indf2	equ	0xFDF
 16831                           postinc2	equ	0xFDE
 16832                           postdec2	equ	0xFDD
 16833                           plusw2	equ	0xFDB
 16834                           fsr2h	equ	0xFDA
 16835                           fsr2l	equ	0xFD9
 16836                           status	equ	0xFD8
 16837                           
 16838 ;; *************** function _vscp_check_pstorage *****************
 16839 ;; Defined at:
 16840 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 16841 ;; Parameters:    Size  Location     Type
 16842 ;;		None
 16843 ;; Auto vars:     Size  Location     Type
 16844 ;;		None
 16845 ;; Return value:  Size  Location     Type
 16846 ;;                  1    wreg      unsigned char 
 16847 ;; Registers used:
 16848 ;;		wreg, status,2, status,0, cstack
 16849 ;; Tracked objects:
 16850 ;;		On entry : 0/0
 16851 ;;		On exit  : 0/0
 16852 ;;		Unchanged: 0/0
 16853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16854 ;;      Params:         0       0       0       0       0       0       0
 16855 ;;      Locals:         0       0       0       0       0       0       0
 16856 ;;      Temps:          0       0       0       0       0       0       0
 16857 ;;      Totals:         0       0       0       0       0       0       0
 16858 ;;Total ram usage:        0 bytes
 16859 ;; Hardware stack levels used:    1
 16860 ;; Hardware stack levels required when called:    5
 16861 ;; This function calls:
 16862 ;;		_vscp_writeNicknamePermanent
 16863 ;;		_vscp_setControlByte
 16864 ;;		_vscp_getControlByte
 16865 ;;		_vscp_init_pstorage
 16866 ;; This function is called by:
 16867 ;;		_main
 16868 ;; This function uses a non-reentrant model
 16869 ;;
 16870                           
 16871                           	psect	text80
 16872  00529E                     __ptext80:
 16873                           	opt stack 0
 16874  00529E                     _vscp_check_pstorage:
 16875                           	opt stack 25
 16876                           
 16877                           ;vscp_firmware.c: 170: if ( ( 0x55 ==
 16878                           ;vscp_firmware.c: 171: vscp_getControlByte( 0 ) ) &&
 16879                           ;vscp_firmware.c: 172: ( 0xAA ==
 16880                           ;vscp_firmware.c: 173: vscp_getControlByte( 1 ) ) ) {
 16881                           
 16882                           ;incstack = 0
 16883                           ;incstack = 0
 16884  00529E  0E00               	movlw	0
 16885  0052A0  ECDB  F02A         	call	_vscp_getControlByte
 16886  0052A4  0A55               	xorlw	85
 16887  0052A6  E107               	bnz	l10707
 16888  0052A8  0E01               	movlw	1
 16889  0052AA  ECDB  F02A         	call	_vscp_getControlByte
 16890  0052AE  0AAA               	xorlw	170
 16891  0052B0  E102               	bnz	l10707
 16892                           
 16893                           ;vscp_firmware.c: 174: return !0;
 16894  0052B2  0E01               	movlw	1
 16895  0052B4  D010               	goto	l1021
 16896  0052B6                     l10707:
 16897                           
 16898                           ;vscp_firmware.c: 175: }
 16899                           ;vscp_firmware.c: 178: vscp_init_pstorage();
 16900  0052B6  ECCC  F02B         	call	_vscp_init_pstorage	;wreg free
 16901                           
 16902                           ;vscp_firmware.c: 181: vscp_writeNicknamePermanent( 0xff );
 16903  0052BA  0EFF               	movlw	255
 16904  0052BC  EC66  F02B         	call	_vscp_writeNicknamePermanent
 16905                           
 16906                           ;vscp_firmware.c: 184: vscp_setControlByte( 0,
 16907                           ;vscp_firmware.c: 185: 0x55 );
 16908  0052C0  0E55               	movlw	85
 16909  0052C2  6E12               	movwf	?_vscp_setControlByte,c
 16910  0052C4  0E00               	movlw	0
 16911  0052C6  EC94  F02A         	call	_vscp_setControlByte
 16912                           
 16913                           ;vscp_firmware.c: 186: vscp_setControlByte( 1,
 16914                           ;vscp_firmware.c: 187: 0xAA );
 16915  0052CA  0EAA               	movlw	170
 16916  0052CC  6E12               	movwf	?_vscp_setControlByte,c
 16917  0052CE  0E01               	movlw	1
 16918  0052D0  EC94  F02A         	call	_vscp_setControlByte
 16919                           
 16920                           ;vscp_firmware.c: 189: return 0;
 16921  0052D4  0E00               	movlw	0
 16922  0052D6                     l1021:
 16923  0052D6  0012               	return	
 16924  0052D8                     __end_of_vscp_check_pstorage:
 16925                           	opt stack 0
 16926                           tblptru	equ	0xFF8
 16927                           tblptrh	equ	0xFF7
 16928                           tblptrl	equ	0xFF6
 16929                           tablat	equ	0xFF5
 16930                           prodh	equ	0xFF4
 16931                           prodl	equ	0xFF3
 16932                           intcon	equ	0xFF2
 16933                           postinc0	equ	0xFEE
 16934                           wreg	equ	0xFE8
 16935                           indf1	equ	0xFE7
 16936                           postdec1	equ	0xFE5
 16937                           fsr1h	equ	0xFE2
 16938                           fsr1l	equ	0xFE1
 16939                           indf2	equ	0xFDF
 16940                           postinc2	equ	0xFDE
 16941                           postdec2	equ	0xFDD
 16942                           plusw2	equ	0xFDB
 16943                           fsr2h	equ	0xFDA
 16944                           fsr2l	equ	0xFD9
 16945                           status	equ	0xFD8
 16946                           
 16947 ;; *************** function _vscp_init_pstorage *****************
 16948 ;; Defined at:
 16949 ;;		line 2873 in file "../main.c"
 16950 ;; Parameters:    Size  Location     Type
 16951 ;;		None
 16952 ;; Auto vars:     Size  Location     Type
 16953 ;;		None
 16954 ;; Return value:  Size  Location     Type
 16955 ;;		None               void
 16956 ;; Registers used:
 16957 ;;		wreg, status,2, cstack
 16958 ;; Tracked objects:
 16959 ;;		On entry : 0/0
 16960 ;;		On exit  : 0/0
 16961 ;;		Unchanged: 0/0
 16962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16963 ;;      Params:         0       0       0       0       0       0       0
 16964 ;;      Locals:         0       0       0       0       0       0       0
 16965 ;;      Temps:          0       0       0       0       0       0       0
 16966 ;;      Totals:         0       0       0       0       0       0       0
 16967 ;;Total ram usage:        0 bytes
 16968 ;; Hardware stack levels used:    1
 16969 ;; Hardware stack levels required when called:    4
 16970 ;; This function calls:
 16971 ;;		_init_app_eeprom
 16972 ;; This function is called by:
 16973 ;;		_vscp_check_pstorage
 16974 ;; This function uses a non-reentrant model
 16975 ;;
 16976                           
 16977                           	psect	text81
 16978  005798                     __ptext81:
 16979                           	opt stack 0
 16980  005798                     _vscp_init_pstorage:
 16981                           	opt stack 25
 16982                           
 16983                           ;main.c: 2874: init_app_eeprom();
 16984                           
 16985                           ;incstack = 0
 16986                           ;incstack = 0
 16987  005798  EF5D  F00E         	goto	_init_app_eeprom	;wreg free
 16988  00579C                     __end_of_vscp_init_pstorage:
 16989                           	opt stack 0
 16990                           tblptru	equ	0xFF8
 16991                           tblptrh	equ	0xFF7
 16992                           tblptrl	equ	0xFF6
 16993                           tablat	equ	0xFF5
 16994                           prodh	equ	0xFF4
 16995                           prodl	equ	0xFF3
 16996                           intcon	equ	0xFF2
 16997                           postinc0	equ	0xFEE
 16998                           wreg	equ	0xFE8
 16999                           indf1	equ	0xFE7
 17000                           postdec1	equ	0xFE5
 17001                           fsr1h	equ	0xFE2
 17002                           fsr1l	equ	0xFE1
 17003                           indf2	equ	0xFDF
 17004                           postinc2	equ	0xFDE
 17005                           postdec2	equ	0xFDD
 17006                           plusw2	equ	0xFDB
 17007                           fsr2h	equ	0xFDA
 17008                           fsr2l	equ	0xFD9
 17009                           status	equ	0xFD8
 17010                           
 17011 ;; *************** function _init_app_eeprom *****************
 17012 ;; Defined at:
 17013 ;;		line 1067 in file "../main.c"
 17014 ;; Parameters:    Size  Location     Type
 17015 ;;		None
 17016 ;; Auto vars:     Size  Location     Type
 17017 ;;		None
 17018 ;; Return value:  Size  Location     Type
 17019 ;;		None               void
 17020 ;; Registers used:
 17021 ;;		wreg, status,2, cstack
 17022 ;; Tracked objects:
 17023 ;;		On entry : 0/0
 17024 ;;		On exit  : 0/0
 17025 ;;		Unchanged: 0/0
 17026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17027 ;;      Params:         0       0       0       0       0       0       0
 17028 ;;      Locals:         0       0       0       0       0       0       0
 17029 ;;      Temps:          0       0       0       0       0       0       0
 17030 ;;      Totals:         0       0       0       0       0       0       0
 17031 ;;Total ram usage:        0 bytes
 17032 ;; Hardware stack levels used:    1
 17033 ;; Hardware stack levels required when called:    3
 17034 ;; This function calls:
 17035 ;;		_Busy_eep
 17036 ;;		_Write_b_eep
 17037 ;; This function is called by:
 17038 ;;		_main
 17039 ;;		_vscp_init_pstorage
 17040 ;;		_vscp_restoreDefaults
 17041 ;; This function uses a non-reentrant model
 17042 ;;
 17043                           
 17044                           	psect	text82
 17045  001CBA                     __ptext82:
 17046                           	opt stack 0
 17047  001CBA                     _init_app_eeprom:
 17048                           	opt stack 24
 17049                           
 17050                           ;main.c: 1069: (Busy_eep(), Write_b_eep(0x41,0));
 17051                           
 17052                           ;incstack = 0
 17053                           ;incstack = 0
 17054  001CBA  ECC7  F02B         	call	_Busy_eep	;wreg free
 17055  001CBE  6A0F               	clrf	?_Write_b_eep+1,c
 17056  001CC0  0E41               	movlw	65
 17057  001CC2  6E0E               	movwf	?_Write_b_eep,c
 17058  001CC4  0E00               	movlw	0
 17059  001CC6  6A10               	clrf	?_Write_b_eep+2,c
 17060  001CC8  ECA3  F029         	call	_Write_b_eep	;wreg free
 17061                           
 17062                           ;main.c: 1070: (Busy_eep(), Write_b_eep(0x41,0));
 17063  001CCC  ECC7  F02B         	call	_Busy_eep	;wreg free
 17064  001CD0  6A0F               	clrf	?_Write_b_eep+1,c
 17065  001CD2  0E41               	movlw	65
 17066  001CD4  6E0E               	movwf	?_Write_b_eep,c
 17067  001CD6  0E00               	movlw	0
 17068  001CD8  6A10               	clrf	?_Write_b_eep+2,c
 17069  001CDA  ECA3  F029         	call	_Write_b_eep	;wreg free
 17070                           
 17071                           ;main.c: 1072: (Busy_eep(), Write_b_eep(0x43,0b00000001));
 17072  001CDE  ECC7  F02B         	call	_Busy_eep	;wreg free
 17073  001CE2  6A0F               	clrf	?_Write_b_eep+1,c
 17074  001CE4  0E43               	movlw	67
 17075  001CE6  6E0E               	movwf	?_Write_b_eep,c
 17076  001CE8  0E01               	movlw	1
 17077  001CEA  6E10               	movwf	?_Write_b_eep+2,c
 17078  001CEC  ECA3  F029         	call	_Write_b_eep	;wreg free
 17079                           
 17080                           ;main.c: 1073: (Busy_eep(), Write_b_eep(0x44,0b00000001));
 17081  001CF0  ECC7  F02B         	call	_Busy_eep	;wreg free
 17082  001CF4  6A0F               	clrf	?_Write_b_eep+1,c
 17083  001CF6  0E44               	movlw	68
 17084  001CF8  6E0E               	movwf	?_Write_b_eep,c
 17085  001CFA  0E01               	movlw	1
 17086  001CFC  6E10               	movwf	?_Write_b_eep+2,c
 17087  001CFE  ECA3  F029         	call	_Write_b_eep	;wreg free
 17088                           
 17089                           ;main.c: 1074: (Busy_eep(), Write_b_eep(0x45,0b00000001));
 17090  001D02  ECC7  F02B         	call	_Busy_eep	;wreg free
 17091  001D06  6A0F               	clrf	?_Write_b_eep+1,c
 17092  001D08  0E45               	movlw	69
 17093  001D0A  6E0E               	movwf	?_Write_b_eep,c
 17094  001D0C  0E01               	movlw	1
 17095  001D0E  6E10               	movwf	?_Write_b_eep+2,c
 17096  001D10  ECA3  F029         	call	_Write_b_eep	;wreg free
 17097                           
 17098                           ;main.c: 1075: (Busy_eep(), Write_b_eep(0x46,0b00000001));
 17099  001D14  ECC7  F02B         	call	_Busy_eep	;wreg free
 17100  001D18  6A0F               	clrf	?_Write_b_eep+1,c
 17101  001D1A  0E46               	movlw	70
 17102  001D1C  6E0E               	movwf	?_Write_b_eep,c
 17103  001D1E  0E01               	movlw	1
 17104  001D20  6E10               	movwf	?_Write_b_eep+2,c
 17105  001D22  ECA3  F029         	call	_Write_b_eep	;wreg free
 17106                           
 17107                           ;main.c: 1076: (Busy_eep(), Write_b_eep(0x47,0b00000001));
 17108  001D26  ECC7  F02B         	call	_Busy_eep	;wreg free
 17109  001D2A  6A0F               	clrf	?_Write_b_eep+1,c
 17110  001D2C  0E47               	movlw	71
 17111  001D2E  6E0E               	movwf	?_Write_b_eep,c
 17112  001D30  0E01               	movlw	1
 17113  001D32  6E10               	movwf	?_Write_b_eep+2,c
 17114  001D34  ECA3  F029         	call	_Write_b_eep	;wreg free
 17115                           
 17116                           ;main.c: 1077: (Busy_eep(), Write_b_eep(0x48,0b00000001));
 17117  001D38  ECC7  F02B         	call	_Busy_eep	;wreg free
 17118  001D3C  6A0F               	clrf	?_Write_b_eep+1,c
 17119  001D3E  0E48               	movlw	72
 17120  001D40  6E0E               	movwf	?_Write_b_eep,c
 17121  001D42  0E01               	movlw	1
 17122  001D44  6E10               	movwf	?_Write_b_eep+2,c
 17123  001D46  ECA3  F029         	call	_Write_b_eep	;wreg free
 17124                           
 17125                           ;main.c: 1079: (Busy_eep(), Write_b_eep(0x49,30));
 17126  001D4A  ECC7  F02B         	call	_Busy_eep	;wreg free
 17127  001D4E  6A0F               	clrf	?_Write_b_eep+1,c
 17128  001D50  0E49               	movlw	73
 17129  001D52  6E0E               	movwf	?_Write_b_eep,c
 17130  001D54  0E1E               	movlw	30
 17131  001D56  6E10               	movwf	?_Write_b_eep+2,c
 17132  001D58  ECA3  F029         	call	_Write_b_eep	;wreg free
 17133                           
 17134                           ;main.c: 1080: (Busy_eep(), Write_b_eep(0x4A,0));
 17135  001D5C  ECC7  F02B         	call	_Busy_eep	;wreg free
 17136  001D60  6A0F               	clrf	?_Write_b_eep+1,c
 17137  001D62  0E4A               	movlw	74
 17138  001D64  6E0E               	movwf	?_Write_b_eep,c
 17139  001D66  0E00               	movlw	0
 17140  001D68  6A10               	clrf	?_Write_b_eep+2,c
 17141  001D6A  ECA3  F029         	call	_Write_b_eep	;wreg free
 17142                           
 17143                           ;main.c: 1081: (Busy_eep(), Write_b_eep(0x4B,0));
 17144  001D6E  ECC7  F02B         	call	_Busy_eep	;wreg free
 17145  001D72  6A0F               	clrf	?_Write_b_eep+1,c
 17146  001D74  0E4B               	movlw	75
 17147  001D76  6E0E               	movwf	?_Write_b_eep,c
 17148  001D78  0E00               	movlw	0
 17149  001D7A  6A10               	clrf	?_Write_b_eep+2,c
 17150  001D7C  ECA3  F029         	call	_Write_b_eep	;wreg free
 17151                           
 17152                           ;main.c: 1082: (Busy_eep(), Write_b_eep(0x4C,0));
 17153  001D80  ECC7  F02B         	call	_Busy_eep	;wreg free
 17154  001D84  6A0F               	clrf	?_Write_b_eep+1,c
 17155  001D86  0E4C               	movlw	76
 17156  001D88  6E0E               	movwf	?_Write_b_eep,c
 17157  001D8A  0E00               	movlw	0
 17158  001D8C  6A10               	clrf	?_Write_b_eep+2,c
 17159  001D8E  ECA3  F029         	call	_Write_b_eep	;wreg free
 17160                           
 17161                           ;main.c: 1083: (Busy_eep(), Write_b_eep(0x4D,0));
 17162  001D92  ECC7  F02B         	call	_Busy_eep	;wreg free
 17163  001D96  6A0F               	clrf	?_Write_b_eep+1,c
 17164  001D98  0E4D               	movlw	77
 17165  001D9A  6E0E               	movwf	?_Write_b_eep,c
 17166  001D9C  0E00               	movlw	0
 17167  001D9E  6A10               	clrf	?_Write_b_eep+2,c
 17168  001DA0  ECA3  F029         	call	_Write_b_eep	;wreg free
 17169                           
 17170                           ;main.c: 1084: (Busy_eep(), Write_b_eep(0x4E,0));
 17171  001DA4  ECC7  F02B         	call	_Busy_eep	;wreg free
 17172  001DA8  6A0F               	clrf	?_Write_b_eep+1,c
 17173  001DAA  0E4E               	movlw	78
 17174  001DAC  6E0E               	movwf	?_Write_b_eep,c
 17175  001DAE  0E00               	movlw	0
 17176  001DB0  6A10               	clrf	?_Write_b_eep+2,c
 17177  001DB2  ECA3  F029         	call	_Write_b_eep	;wreg free
 17178                           
 17179                           ;main.c: 1088: (Busy_eep(), Write_b_eep(0x4F,0x0F));
 17180  001DB6  ECC7  F02B         	call	_Busy_eep	;wreg free
 17181  001DBA  6A0F               	clrf	?_Write_b_eep+1,c
 17182  001DBC  0E4F               	movlw	79
 17183  001DBE  6E0E               	movwf	?_Write_b_eep,c
 17184  001DC0  0E0F               	movlw	15
 17185  001DC2  6E10               	movwf	?_Write_b_eep+2,c
 17186  001DC4  ECA3  F029         	call	_Write_b_eep	;wreg free
 17187                           
 17188                           ;main.c: 1089: (Busy_eep(), Write_b_eep(0x50,0x68));
 17189  001DC8  ECC7  F02B         	call	_Busy_eep	;wreg free
 17190  001DCC  6A0F               	clrf	?_Write_b_eep+1,c
 17191  001DCE  0E50               	movlw	80
 17192  001DD0  6E0E               	movwf	?_Write_b_eep,c
 17193  001DD2  0E68               	movlw	104
 17194  001DD4  6E10               	movwf	?_Write_b_eep+2,c
 17195  001DD6  ECA3  F029         	call	_Write_b_eep	;wreg free
 17196                           
 17197                           ;main.c: 1091: (Busy_eep(), Write_b_eep(0x51,0x0D));
 17198  001DDA  ECC7  F02B         	call	_Busy_eep	;wreg free
 17199  001DDE  6A0F               	clrf	?_Write_b_eep+1,c
 17200  001DE0  0E51               	movlw	81
 17201  001DE2  6E0E               	movwf	?_Write_b_eep,c
 17202  001DE4  0E0D               	movlw	13
 17203  001DE6  6E10               	movwf	?_Write_b_eep+2,c
 17204  001DE8  ECA3  F029         	call	_Write_b_eep	;wreg free
 17205                           
 17206                           ;main.c: 1092: (Busy_eep(), Write_b_eep(0x52,0x7F));
 17207  001DEC  ECC7  F02B         	call	_Busy_eep	;wreg free
 17208  001DF0  6A0F               	clrf	?_Write_b_eep+1,c
 17209  001DF2  0E52               	movlw	82
 17210  001DF4  6E0E               	movwf	?_Write_b_eep,c
 17211  001DF6  0E7F               	movlw	127
 17212  001DF8  6E10               	movwf	?_Write_b_eep+2,c
 17213  001DFA  ECA3  F029         	call	_Write_b_eep	;wreg free
 17214                           
 17215                           ;main.c: 1094: (Busy_eep(), Write_b_eep(0x53,0x0D));
 17216  001DFE  ECC7  F02B         	call	_Busy_eep	;wreg free
 17217  001E02  6A0F               	clrf	?_Write_b_eep+1,c
 17218  001E04  0E53               	movlw	83
 17219  001E06  6E0E               	movwf	?_Write_b_eep,c
 17220  001E08  0E0D               	movlw	13
 17221  001E0A  6E10               	movwf	?_Write_b_eep+2,c
 17222  001E0C  ECA3  F029         	call	_Write_b_eep	;wreg free
 17223                           
 17224                           ;main.c: 1095: (Busy_eep(), Write_b_eep(0x54,0x7F));
 17225  001E10  ECC7  F02B         	call	_Busy_eep	;wreg free
 17226  001E14  6A0F               	clrf	?_Write_b_eep+1,c
 17227  001E16  0E54               	movlw	84
 17228  001E18  6E0E               	movwf	?_Write_b_eep,c
 17229  001E1A  0E7F               	movlw	127
 17230  001E1C  6E10               	movwf	?_Write_b_eep+2,c
 17231  001E1E  ECA3  F029         	call	_Write_b_eep	;wreg free
 17232                           
 17233                           ;main.c: 1097: (Busy_eep(), Write_b_eep(0x55,0x0D));
 17234  001E22  ECC7  F02B         	call	_Busy_eep	;wreg free
 17235  001E26  6A0F               	clrf	?_Write_b_eep+1,c
 17236  001E28  0E55               	movlw	85
 17237  001E2A  6E0E               	movwf	?_Write_b_eep,c
 17238  001E2C  0E0D               	movlw	13
 17239  001E2E  6E10               	movwf	?_Write_b_eep+2,c
 17240  001E30  ECA3  F029         	call	_Write_b_eep	;wreg free
 17241                           
 17242                           ;main.c: 1098: (Busy_eep(), Write_b_eep(0x56,0x7F));
 17243  001E34  ECC7  F02B         	call	_Busy_eep	;wreg free
 17244  001E38  6A0F               	clrf	?_Write_b_eep+1,c
 17245  001E3A  0E56               	movlw	86
 17246  001E3C  6E0E               	movwf	?_Write_b_eep,c
 17247  001E3E  0E7F               	movlw	127
 17248  001E40  6E10               	movwf	?_Write_b_eep+2,c
 17249  001E42  ECA3  F029         	call	_Write_b_eep	;wreg free
 17250                           
 17251                           ;main.c: 1100: (Busy_eep(), Write_b_eep(0x57,0x0D));
 17252  001E46  ECC7  F02B         	call	_Busy_eep	;wreg free
 17253  001E4A  6A0F               	clrf	?_Write_b_eep+1,c
 17254  001E4C  0E57               	movlw	87
 17255  001E4E  6E0E               	movwf	?_Write_b_eep,c
 17256  001E50  0E0D               	movlw	13
 17257  001E52  6E10               	movwf	?_Write_b_eep+2,c
 17258  001E54  ECA3  F029         	call	_Write_b_eep	;wreg free
 17259                           
 17260                           ;main.c: 1101: (Busy_eep(), Write_b_eep(0x58,0x7F));
 17261  001E58  ECC7  F02B         	call	_Busy_eep	;wreg free
 17262  001E5C  6A0F               	clrf	?_Write_b_eep+1,c
 17263  001E5E  0E58               	movlw	88
 17264  001E60  6E0E               	movwf	?_Write_b_eep,c
 17265  001E62  0E7F               	movlw	127
 17266  001E64  6E10               	movwf	?_Write_b_eep+2,c
 17267  001E66  ECA3  F029         	call	_Write_b_eep	;wreg free
 17268                           
 17269                           ;main.c: 1103: (Busy_eep(), Write_b_eep(0x59,0x0D));
 17270  001E6A  ECC7  F02B         	call	_Busy_eep	;wreg free
 17271  001E6E  6A0F               	clrf	?_Write_b_eep+1,c
 17272  001E70  0E59               	movlw	89
 17273  001E72  6E0E               	movwf	?_Write_b_eep,c
 17274  001E74  0E0D               	movlw	13
 17275  001E76  6E10               	movwf	?_Write_b_eep+2,c
 17276  001E78  ECA3  F029         	call	_Write_b_eep	;wreg free
 17277                           
 17278                           ;main.c: 1104: (Busy_eep(), Write_b_eep(0x5A,0x7F));
 17279  001E7C  ECC7  F02B         	call	_Busy_eep	;wreg free
 17280  001E80  6A0F               	clrf	?_Write_b_eep+1,c
 17281  001E82  0E5A               	movlw	90
 17282  001E84  6E0E               	movwf	?_Write_b_eep,c
 17283  001E86  0E7F               	movlw	127
 17284  001E88  6E10               	movwf	?_Write_b_eep+2,c
 17285  001E8A  ECA3  F029         	call	_Write_b_eep	;wreg free
 17286                           
 17287                           ;main.c: 1108: (Busy_eep(), Write_b_eep(0x5B,0x80));
 17288  001E8E  ECC7  F02B         	call	_Busy_eep	;wreg free
 17289  001E92  6A0F               	clrf	?_Write_b_eep+1,c
 17290  001E94  0E5B               	movlw	91
 17291  001E96  6E0E               	movwf	?_Write_b_eep,c
 17292  001E98  0E80               	movlw	128
 17293  001E9A  6E10               	movwf	?_Write_b_eep+2,c
 17294  001E9C  ECA3  F029         	call	_Write_b_eep	;wreg free
 17295                           
 17296                           ;main.c: 1109: (Busy_eep(), Write_b_eep(0x5C,0xff));
 17297  001EA0  ECC7  F02B         	call	_Busy_eep	;wreg free
 17298  001EA4  6A0F               	clrf	?_Write_b_eep+1,c
 17299  001EA6  0E5C               	movlw	92
 17300  001EA8  6E0E               	movwf	?_Write_b_eep,c
 17301  001EAA  0EFF               	movlw	255
 17302  001EAC  6810               	setf	?_Write_b_eep+2,c
 17303  001EAE  ECA3  F029         	call	_Write_b_eep	;wreg free
 17304                           
 17305                           ;main.c: 1111: (Busy_eep(), Write_b_eep(0x5D,0x80));
 17306  001EB2  ECC7  F02B         	call	_Busy_eep	;wreg free
 17307  001EB6  6A0F               	clrf	?_Write_b_eep+1,c
 17308  001EB8  0E5D               	movlw	93
 17309  001EBA  6E0E               	movwf	?_Write_b_eep,c
 17310  001EBC  0E80               	movlw	128
 17311  001EBE  6E10               	movwf	?_Write_b_eep+2,c
 17312  001EC0  ECA3  F029         	call	_Write_b_eep	;wreg free
 17313                           
 17314                           ;main.c: 1112: (Busy_eep(), Write_b_eep(0x5E,0xff));
 17315  001EC4  ECC7  F02B         	call	_Busy_eep	;wreg free
 17316  001EC8  6A0F               	clrf	?_Write_b_eep+1,c
 17317  001ECA  0E5E               	movlw	94
 17318  001ECC  6E0E               	movwf	?_Write_b_eep,c
 17319  001ECE  0EFF               	movlw	255
 17320  001ED0  6810               	setf	?_Write_b_eep+2,c
 17321  001ED2  ECA3  F029         	call	_Write_b_eep	;wreg free
 17322                           
 17323                           ;main.c: 1114: (Busy_eep(), Write_b_eep(0x5F,0x80));
 17324  001ED6  ECC7  F02B         	call	_Busy_eep	;wreg free
 17325  001EDA  6A0F               	clrf	?_Write_b_eep+1,c
 17326  001EDC  0E5F               	movlw	95
 17327  001EDE  6E0E               	movwf	?_Write_b_eep,c
 17328  001EE0  0E80               	movlw	128
 17329  001EE2  6E10               	movwf	?_Write_b_eep+2,c
 17330  001EE4  ECA3  F029         	call	_Write_b_eep	;wreg free
 17331                           
 17332                           ;main.c: 1115: (Busy_eep(), Write_b_eep(0x60,0xff));
 17333  001EE8  ECC7  F02B         	call	_Busy_eep	;wreg free
 17334  001EEC  6A0F               	clrf	?_Write_b_eep+1,c
 17335  001EEE  0E60               	movlw	96
 17336  001EF0  6E0E               	movwf	?_Write_b_eep,c
 17337  001EF2  0EFF               	movlw	255
 17338  001EF4  6810               	setf	?_Write_b_eep+2,c
 17339  001EF6  ECA3  F029         	call	_Write_b_eep	;wreg free
 17340                           
 17341                           ;main.c: 1117: (Busy_eep(), Write_b_eep(0x61,0x80));
 17342  001EFA  ECC7  F02B         	call	_Busy_eep	;wreg free
 17343  001EFE  6A0F               	clrf	?_Write_b_eep+1,c
 17344  001F00  0E61               	movlw	97
 17345  001F02  6E0E               	movwf	?_Write_b_eep,c
 17346  001F04  0E80               	movlw	128
 17347  001F06  6E10               	movwf	?_Write_b_eep+2,c
 17348  001F08  ECA3  F029         	call	_Write_b_eep	;wreg free
 17349                           
 17350                           ;main.c: 1118: (Busy_eep(), Write_b_eep(0x62,0xff));
 17351  001F0C  ECC7  F02B         	call	_Busy_eep	;wreg free
 17352  001F10  6A0F               	clrf	?_Write_b_eep+1,c
 17353  001F12  0E62               	movlw	98
 17354  001F14  6E0E               	movwf	?_Write_b_eep,c
 17355  001F16  0EFF               	movlw	255
 17356  001F18  6810               	setf	?_Write_b_eep+2,c
 17357  001F1A  ECA3  F029         	call	_Write_b_eep	;wreg free
 17358                           
 17359                           ;main.c: 1120: (Busy_eep(), Write_b_eep(0x63,0x80));
 17360  001F1E  ECC7  F02B         	call	_Busy_eep	;wreg free
 17361  001F22  6A0F               	clrf	?_Write_b_eep+1,c
 17362  001F24  0E63               	movlw	99
 17363  001F26  6E0E               	movwf	?_Write_b_eep,c
 17364  001F28  0E80               	movlw	128
 17365  001F2A  6E10               	movwf	?_Write_b_eep+2,c
 17366  001F2C  ECA3  F029         	call	_Write_b_eep	;wreg free
 17367                           
 17368                           ;main.c: 1121: (Busy_eep(), Write_b_eep(0x64,0xff));
 17369  001F30  ECC7  F02B         	call	_Busy_eep	;wreg free
 17370  001F34  6A0F               	clrf	?_Write_b_eep+1,c
 17371  001F36  0E64               	movlw	100
 17372  001F38  6E0E               	movwf	?_Write_b_eep,c
 17373  001F3A  0EFF               	movlw	255
 17374  001F3C  6810               	setf	?_Write_b_eep+2,c
 17375  001F3E  ECA3  F029         	call	_Write_b_eep	;wreg free
 17376                           
 17377                           ;main.c: 1123: (Busy_eep(), Write_b_eep(0x65,0x80));
 17378  001F42  ECC7  F02B         	call	_Busy_eep	;wreg free
 17379  001F46  6A0F               	clrf	?_Write_b_eep+1,c
 17380  001F48  0E65               	movlw	101
 17381  001F4A  6E0E               	movwf	?_Write_b_eep,c
 17382  001F4C  0E80               	movlw	128
 17383  001F4E  6E10               	movwf	?_Write_b_eep+2,c
 17384  001F50  ECA3  F029         	call	_Write_b_eep	;wreg free
 17385                           
 17386                           ;main.c: 1124: (Busy_eep(), Write_b_eep(0x66,0xff));
 17387  001F54  ECC7  F02B         	call	_Busy_eep	;wreg free
 17388  001F58  6A0F               	clrf	?_Write_b_eep+1,c
 17389  001F5A  0E66               	movlw	102
 17390  001F5C  6E0E               	movwf	?_Write_b_eep,c
 17391  001F5E  0EFF               	movlw	255
 17392  001F60  6810               	setf	?_Write_b_eep+2,c
 17393  001F62  ECA3  F029         	call	_Write_b_eep	;wreg free
 17394                           
 17395                           ;main.c: 1128: (Busy_eep(), Write_b_eep(0x67,0x7f));
 17396  001F66  ECC7  F02B         	call	_Busy_eep	;wreg free
 17397  001F6A  6A0F               	clrf	?_Write_b_eep+1,c
 17398  001F6C  0E67               	movlw	103
 17399  001F6E  6E0E               	movwf	?_Write_b_eep,c
 17400  001F70  0E7F               	movlw	127
 17401  001F72  6E10               	movwf	?_Write_b_eep+2,c
 17402  001F74  ECA3  F029         	call	_Write_b_eep	;wreg free
 17403                           
 17404                           ;main.c: 1129: (Busy_eep(), Write_b_eep(0x68,0xff));
 17405  001F78  ECC7  F02B         	call	_Busy_eep	;wreg free
 17406  001F7C  6A0F               	clrf	?_Write_b_eep+1,c
 17407  001F7E  0E68               	movlw	104
 17408  001F80  6E0E               	movwf	?_Write_b_eep,c
 17409  001F82  0EFF               	movlw	255
 17410  001F84  6810               	setf	?_Write_b_eep+2,c
 17411  001F86  ECA3  F029         	call	_Write_b_eep	;wreg free
 17412                           
 17413                           ;main.c: 1131: (Busy_eep(), Write_b_eep(0x69,0x7f));
 17414  001F8A  ECC7  F02B         	call	_Busy_eep	;wreg free
 17415  001F8E  6A0F               	clrf	?_Write_b_eep+1,c
 17416  001F90  0E69               	movlw	105
 17417  001F92  6E0E               	movwf	?_Write_b_eep,c
 17418  001F94  0E7F               	movlw	127
 17419  001F96  6E10               	movwf	?_Write_b_eep+2,c
 17420  001F98  ECA3  F029         	call	_Write_b_eep	;wreg free
 17421                           
 17422                           ;main.c: 1132: (Busy_eep(), Write_b_eep(0x6A,0xff));
 17423  001F9C  ECC7  F02B         	call	_Busy_eep	;wreg free
 17424  001FA0  6A0F               	clrf	?_Write_b_eep+1,c
 17425  001FA2  0E6A               	movlw	106
 17426  001FA4  6E0E               	movwf	?_Write_b_eep,c
 17427  001FA6  0EFF               	movlw	255
 17428  001FA8  6810               	setf	?_Write_b_eep+2,c
 17429  001FAA  ECA3  F029         	call	_Write_b_eep	;wreg free
 17430                           
 17431                           ;main.c: 1134: (Busy_eep(), Write_b_eep(0x6B,0x7f));
 17432  001FAE  ECC7  F02B         	call	_Busy_eep	;wreg free
 17433  001FB2  6A0F               	clrf	?_Write_b_eep+1,c
 17434  001FB4  0E6B               	movlw	107
 17435  001FB6  6E0E               	movwf	?_Write_b_eep,c
 17436  001FB8  0E7F               	movlw	127
 17437  001FBA  6E10               	movwf	?_Write_b_eep+2,c
 17438  001FBC  ECA3  F029         	call	_Write_b_eep	;wreg free
 17439                           
 17440                           ;main.c: 1135: (Busy_eep(), Write_b_eep(0x6C,0xff));
 17441  001FC0  ECC7  F02B         	call	_Busy_eep	;wreg free
 17442  001FC4  6A0F               	clrf	?_Write_b_eep+1,c
 17443  001FC6  0E6C               	movlw	108
 17444  001FC8  6E0E               	movwf	?_Write_b_eep,c
 17445  001FCA  0EFF               	movlw	255
 17446  001FCC  6810               	setf	?_Write_b_eep+2,c
 17447  001FCE  ECA3  F029         	call	_Write_b_eep	;wreg free
 17448                           
 17449                           ;main.c: 1137: (Busy_eep(), Write_b_eep(0x6D,0x7f));
 17450  001FD2  ECC7  F02B         	call	_Busy_eep	;wreg free
 17451  001FD6  6A0F               	clrf	?_Write_b_eep+1,c
 17452  001FD8  0E6D               	movlw	109
 17453  001FDA  6E0E               	movwf	?_Write_b_eep,c
 17454  001FDC  0E7F               	movlw	127
 17455  001FDE  6E10               	movwf	?_Write_b_eep+2,c
 17456  001FE0  ECA3  F029         	call	_Write_b_eep	;wreg free
 17457                           
 17458                           ;main.c: 1138: (Busy_eep(), Write_b_eep(0x6E,0xff));
 17459  001FE4  ECC7  F02B         	call	_Busy_eep	;wreg free
 17460  001FE8  6A0F               	clrf	?_Write_b_eep+1,c
 17461  001FEA  0E6E               	movlw	110
 17462  001FEC  6E0E               	movwf	?_Write_b_eep,c
 17463  001FEE  0EFF               	movlw	255
 17464  001FF0  6810               	setf	?_Write_b_eep+2,c
 17465  001FF2  ECA3  F029         	call	_Write_b_eep	;wreg free
 17466                           
 17467                           ;main.c: 1140: (Busy_eep(), Write_b_eep(0x6F,0x7f));
 17468  001FF6  ECC7  F02B         	call	_Busy_eep	;wreg free
 17469  001FFA  6A0F               	clrf	?_Write_b_eep+1,c
 17470  001FFC  0E6F               	movlw	111
 17471  001FFE  6E0E               	movwf	?_Write_b_eep,c
 17472  002000  0E7F               	movlw	127
 17473  002002  6E10               	movwf	?_Write_b_eep+2,c
 17474  002004  ECA3  F029         	call	_Write_b_eep	;wreg free
 17475                           
 17476                           ;main.c: 1141: (Busy_eep(), Write_b_eep(0x70,0xff));
 17477  002008  ECC7  F02B         	call	_Busy_eep	;wreg free
 17478  00200C  6A0F               	clrf	?_Write_b_eep+1,c
 17479  00200E  0E70               	movlw	112
 17480  002010  6E0E               	movwf	?_Write_b_eep,c
 17481  002012  0EFF               	movlw	255
 17482  002014  6810               	setf	?_Write_b_eep+2,c
 17483  002016  ECA3  F029         	call	_Write_b_eep	;wreg free
 17484                           
 17485                           ;main.c: 1143: (Busy_eep(), Write_b_eep(0x71,0x7f));
 17486  00201A  ECC7  F02B         	call	_Busy_eep	;wreg free
 17487  00201E  6A0F               	clrf	?_Write_b_eep+1,c
 17488  002020  0E71               	movlw	113
 17489  002022  6E0E               	movwf	?_Write_b_eep,c
 17490  002024  0E7F               	movlw	127
 17491  002026  6E10               	movwf	?_Write_b_eep+2,c
 17492  002028  ECA3  F029         	call	_Write_b_eep	;wreg free
 17493                           
 17494                           ;main.c: 1144: (Busy_eep(), Write_b_eep(0x72,0xff));
 17495  00202C  ECC7  F02B         	call	_Busy_eep	;wreg free
 17496  002030  6A0F               	clrf	?_Write_b_eep+1,c
 17497  002032  0E72               	movlw	114
 17498  002034  6E0E               	movwf	?_Write_b_eep,c
 17499  002036  0EFF               	movlw	255
 17500  002038  6810               	setf	?_Write_b_eep+2,c
 17501  00203A  ECA3  F029         	call	_Write_b_eep	;wreg free
 17502                           
 17503                           ;main.c: 1148: (Busy_eep(), Write_b_eep(0x73,0));
 17504  00203E  ECC7  F02B         	call	_Busy_eep	;wreg free
 17505  002042  6A0F               	clrf	?_Write_b_eep+1,c
 17506  002044  0E73               	movlw	115
 17507  002046  6E0E               	movwf	?_Write_b_eep,c
 17508  002048  0E00               	movlw	0
 17509  00204A  6A10               	clrf	?_Write_b_eep+2,c
 17510  00204C  ECA3  F029         	call	_Write_b_eep	;wreg free
 17511                           
 17512                           ;main.c: 1149: (Busy_eep(), Write_b_eep(0x74,0));
 17513  002050  ECC7  F02B         	call	_Busy_eep	;wreg free
 17514  002054  6A0F               	clrf	?_Write_b_eep+1,c
 17515  002056  0E74               	movlw	116
 17516  002058  6E0E               	movwf	?_Write_b_eep,c
 17517  00205A  0E00               	movlw	0
 17518  00205C  6A10               	clrf	?_Write_b_eep+2,c
 17519  00205E  ECA3  F029         	call	_Write_b_eep	;wreg free
 17520                           
 17521                           ;main.c: 1151: (Busy_eep(), Write_b_eep(0x75,0));
 17522  002062  ECC7  F02B         	call	_Busy_eep	;wreg free
 17523  002066  6A0F               	clrf	?_Write_b_eep+1,c
 17524  002068  0E75               	movlw	117
 17525  00206A  6E0E               	movwf	?_Write_b_eep,c
 17526  00206C  0E00               	movlw	0
 17527  00206E  6A10               	clrf	?_Write_b_eep+2,c
 17528  002070  ECA3  F029         	call	_Write_b_eep	;wreg free
 17529                           
 17530                           ;main.c: 1152: (Busy_eep(), Write_b_eep(0x76,0));
 17531  002074  ECC7  F02B         	call	_Busy_eep	;wreg free
 17532  002078  6A0F               	clrf	?_Write_b_eep+1,c
 17533  00207A  0E76               	movlw	118
 17534  00207C  6E0E               	movwf	?_Write_b_eep,c
 17535  00207E  0E00               	movlw	0
 17536  002080  6A10               	clrf	?_Write_b_eep+2,c
 17537  002082  ECA3  F029         	call	_Write_b_eep	;wreg free
 17538                           
 17539                           ;main.c: 1154: (Busy_eep(), Write_b_eep(0x77,0));
 17540  002086  ECC7  F02B         	call	_Busy_eep	;wreg free
 17541  00208A  6A0F               	clrf	?_Write_b_eep+1,c
 17542  00208C  0E77               	movlw	119
 17543  00208E  6E0E               	movwf	?_Write_b_eep,c
 17544  002090  0E00               	movlw	0
 17545  002092  6A10               	clrf	?_Write_b_eep+2,c
 17546  002094  ECA3  F029         	call	_Write_b_eep	;wreg free
 17547                           
 17548                           ;main.c: 1155: (Busy_eep(), Write_b_eep(0x78,0));
 17549  002098  ECC7  F02B         	call	_Busy_eep	;wreg free
 17550  00209C  6A0F               	clrf	?_Write_b_eep+1,c
 17551  00209E  0E78               	movlw	120
 17552  0020A0  6E0E               	movwf	?_Write_b_eep,c
 17553  0020A2  0E00               	movlw	0
 17554  0020A4  6A10               	clrf	?_Write_b_eep+2,c
 17555  0020A6  ECA3  F029         	call	_Write_b_eep	;wreg free
 17556                           
 17557                           ;main.c: 1157: (Busy_eep(), Write_b_eep(0x79,0));
 17558  0020AA  ECC7  F02B         	call	_Busy_eep	;wreg free
 17559  0020AE  6A0F               	clrf	?_Write_b_eep+1,c
 17560  0020B0  0E79               	movlw	121
 17561  0020B2  6E0E               	movwf	?_Write_b_eep,c
 17562  0020B4  0E00               	movlw	0
 17563  0020B6  6A10               	clrf	?_Write_b_eep+2,c
 17564  0020B8  ECA3  F029         	call	_Write_b_eep	;wreg free
 17565                           
 17566                           ;main.c: 1158: (Busy_eep(), Write_b_eep(0x7A,0));
 17567  0020BC  ECC7  F02B         	call	_Busy_eep	;wreg free
 17568  0020C0  6A0F               	clrf	?_Write_b_eep+1,c
 17569  0020C2  0E7A               	movlw	122
 17570  0020C4  6E0E               	movwf	?_Write_b_eep,c
 17571  0020C6  0E00               	movlw	0
 17572  0020C8  6A10               	clrf	?_Write_b_eep+2,c
 17573  0020CA  ECA3  F029         	call	_Write_b_eep	;wreg free
 17574                           
 17575                           ;main.c: 1160: (Busy_eep(), Write_b_eep(0x7B,0));
 17576  0020CE  ECC7  F02B         	call	_Busy_eep	;wreg free
 17577  0020D2  6A0F               	clrf	?_Write_b_eep+1,c
 17578  0020D4  0E7B               	movlw	123
 17579  0020D6  6E0E               	movwf	?_Write_b_eep,c
 17580  0020D8  0E00               	movlw	0
 17581  0020DA  6A10               	clrf	?_Write_b_eep+2,c
 17582  0020DC  ECA3  F029         	call	_Write_b_eep	;wreg free
 17583                           
 17584                           ;main.c: 1161: (Busy_eep(), Write_b_eep(0x7C,0));
 17585  0020E0  ECC7  F02B         	call	_Busy_eep	;wreg free
 17586  0020E4  6A0F               	clrf	?_Write_b_eep+1,c
 17587  0020E6  0E7C               	movlw	124
 17588  0020E8  6E0E               	movwf	?_Write_b_eep,c
 17589  0020EA  0E00               	movlw	0
 17590  0020EC  6A10               	clrf	?_Write_b_eep+2,c
 17591  0020EE  ECA3  F029         	call	_Write_b_eep	;wreg free
 17592                           
 17593                           ;main.c: 1163: (Busy_eep(), Write_b_eep(0x7D,0));
 17594  0020F2  ECC7  F02B         	call	_Busy_eep	;wreg free
 17595  0020F6  6A0F               	clrf	?_Write_b_eep+1,c
 17596  0020F8  0E7D               	movlw	125
 17597  0020FA  6E0E               	movwf	?_Write_b_eep,c
 17598  0020FC  0E00               	movlw	0
 17599  0020FE  6A10               	clrf	?_Write_b_eep+2,c
 17600  002100  ECA3  F029         	call	_Write_b_eep	;wreg free
 17601                           
 17602                           ;main.c: 1164: (Busy_eep(), Write_b_eep(0x7E,0));
 17603  002104  ECC7  F02B         	call	_Busy_eep	;wreg free
 17604  002108  6A0F               	clrf	?_Write_b_eep+1,c
 17605  00210A  0E7E               	movlw	126
 17606  00210C  6E0E               	movwf	?_Write_b_eep,c
 17607  00210E  0E00               	movlw	0
 17608  002110  6A10               	clrf	?_Write_b_eep+2,c
 17609  002112  ECA3  F029         	call	_Write_b_eep	;wreg free
 17610                           
 17611                           ;main.c: 1168: (Busy_eep(), Write_b_eep(0x7F,0x7f));
 17612  002116  ECC7  F02B         	call	_Busy_eep	;wreg free
 17613  00211A  6A0F               	clrf	?_Write_b_eep+1,c
 17614  00211C  0E7F               	movlw	127
 17615  00211E  6E0E               	movwf	?_Write_b_eep,c
 17616  002120  6E10               	movwf	?_Write_b_eep+2,c
 17617  002122  ECA3  F029         	call	_Write_b_eep	;wreg free
 17618                           
 17619                           ;main.c: 1169: (Busy_eep(), Write_b_eep(0x80,0xff));
 17620  002126  ECC7  F02B         	call	_Busy_eep	;wreg free
 17621  00212A  6A0F               	clrf	?_Write_b_eep+1,c
 17622  00212C  0E80               	movlw	128
 17623  00212E  6E0E               	movwf	?_Write_b_eep,c
 17624  002130  0EFF               	movlw	255
 17625  002132  6810               	setf	?_Write_b_eep+2,c
 17626  002134  ECA3  F029         	call	_Write_b_eep	;wreg free
 17627                           
 17628                           ;main.c: 1171: (Busy_eep(), Write_b_eep(0x81,0x7f));
 17629  002138  ECC7  F02B         	call	_Busy_eep	;wreg free
 17630  00213C  6A0F               	clrf	?_Write_b_eep+1,c
 17631  00213E  0E81               	movlw	129
 17632  002140  6E0E               	movwf	?_Write_b_eep,c
 17633  002142  0E7F               	movlw	127
 17634  002144  6E10               	movwf	?_Write_b_eep+2,c
 17635  002146  ECA3  F029         	call	_Write_b_eep	;wreg free
 17636                           
 17637                           ;main.c: 1172: (Busy_eep(), Write_b_eep(0x82,0xff));
 17638  00214A  ECC7  F02B         	call	_Busy_eep	;wreg free
 17639  00214E  6A0F               	clrf	?_Write_b_eep+1,c
 17640  002150  0E82               	movlw	130
 17641  002152  6E0E               	movwf	?_Write_b_eep,c
 17642  002154  0EFF               	movlw	255
 17643  002156  6810               	setf	?_Write_b_eep+2,c
 17644  002158  ECA3  F029         	call	_Write_b_eep	;wreg free
 17645                           
 17646                           ;main.c: 1174: (Busy_eep(), Write_b_eep(0x83,0x7f));
 17647  00215C  ECC7  F02B         	call	_Busy_eep	;wreg free
 17648  002160  6A0F               	clrf	?_Write_b_eep+1,c
 17649  002162  0E83               	movlw	131
 17650  002164  6E0E               	movwf	?_Write_b_eep,c
 17651  002166  0E7F               	movlw	127
 17652  002168  6E10               	movwf	?_Write_b_eep+2,c
 17653  00216A  ECA3  F029         	call	_Write_b_eep	;wreg free
 17654                           
 17655                           ;main.c: 1175: (Busy_eep(), Write_b_eep(0x84,0xff));
 17656  00216E  ECC7  F02B         	call	_Busy_eep	;wreg free
 17657  002172  6A0F               	clrf	?_Write_b_eep+1,c
 17658  002174  0E84               	movlw	132
 17659  002176  6E0E               	movwf	?_Write_b_eep,c
 17660  002178  0EFF               	movlw	255
 17661  00217A  6810               	setf	?_Write_b_eep+2,c
 17662  00217C  ECA3  F029         	call	_Write_b_eep	;wreg free
 17663                           
 17664                           ;main.c: 1177: (Busy_eep(), Write_b_eep(0x85,0x7f));
 17665  002180  ECC7  F02B         	call	_Busy_eep	;wreg free
 17666  002184  6A0F               	clrf	?_Write_b_eep+1,c
 17667  002186  0E85               	movlw	133
 17668  002188  6E0E               	movwf	?_Write_b_eep,c
 17669  00218A  0E7F               	movlw	127
 17670  00218C  6E10               	movwf	?_Write_b_eep+2,c
 17671  00218E  ECA3  F029         	call	_Write_b_eep	;wreg free
 17672                           
 17673                           ;main.c: 1178: (Busy_eep(), Write_b_eep(0x86,0xff));
 17674  002192  ECC7  F02B         	call	_Busy_eep	;wreg free
 17675  002196  6A0F               	clrf	?_Write_b_eep+1,c
 17676  002198  0E86               	movlw	134
 17677  00219A  6E0E               	movwf	?_Write_b_eep,c
 17678  00219C  0EFF               	movlw	255
 17679  00219E  6810               	setf	?_Write_b_eep+2,c
 17680  0021A0  ECA3  F029         	call	_Write_b_eep	;wreg free
 17681                           
 17682                           ;main.c: 1180: (Busy_eep(), Write_b_eep(0x87,0x7f));
 17683  0021A4  ECC7  F02B         	call	_Busy_eep	;wreg free
 17684  0021A8  6A0F               	clrf	?_Write_b_eep+1,c
 17685  0021AA  0E87               	movlw	135
 17686  0021AC  6E0E               	movwf	?_Write_b_eep,c
 17687  0021AE  0E7F               	movlw	127
 17688  0021B0  6E10               	movwf	?_Write_b_eep+2,c
 17689  0021B2  ECA3  F029         	call	_Write_b_eep	;wreg free
 17690                           
 17691                           ;main.c: 1181: (Busy_eep(), Write_b_eep(0x88,0xff));
 17692  0021B6  ECC7  F02B         	call	_Busy_eep	;wreg free
 17693  0021BA  6A0F               	clrf	?_Write_b_eep+1,c
 17694  0021BC  0E88               	movlw	136
 17695  0021BE  6E0E               	movwf	?_Write_b_eep,c
 17696  0021C0  0EFF               	movlw	255
 17697  0021C2  6810               	setf	?_Write_b_eep+2,c
 17698  0021C4  ECA3  F029         	call	_Write_b_eep	;wreg free
 17699                           
 17700                           ;main.c: 1183: (Busy_eep(), Write_b_eep(0x89,0x7f));
 17701  0021C8  ECC7  F02B         	call	_Busy_eep	;wreg free
 17702  0021CC  6A0F               	clrf	?_Write_b_eep+1,c
 17703  0021CE  0E89               	movlw	137
 17704  0021D0  6E0E               	movwf	?_Write_b_eep,c
 17705  0021D2  0E7F               	movlw	127
 17706  0021D4  6E10               	movwf	?_Write_b_eep+2,c
 17707  0021D6  ECA3  F029         	call	_Write_b_eep	;wreg free
 17708                           
 17709                           ;main.c: 1184: (Busy_eep(), Write_b_eep(0x8A,0xff));
 17710  0021DA  ECC7  F02B         	call	_Busy_eep	;wreg free
 17711  0021DE  6A0F               	clrf	?_Write_b_eep+1,c
 17712  0021E0  0E8A               	movlw	138
 17713  0021E2  6E0E               	movwf	?_Write_b_eep,c
 17714  0021E4  0EFF               	movlw	255
 17715  0021E6  6810               	setf	?_Write_b_eep+2,c
 17716  0021E8  ECA3  F029         	call	_Write_b_eep	;wreg free
 17717                           
 17718                           ;main.c: 1188: (Busy_eep(), Write_b_eep(0x8B,0x80));
 17719  0021EC  ECC7  F02B         	call	_Busy_eep	;wreg free
 17720  0021F0  6A0F               	clrf	?_Write_b_eep+1,c
 17721  0021F2  0E8B               	movlw	139
 17722  0021F4  6E0E               	movwf	?_Write_b_eep,c
 17723  0021F6  0E80               	movlw	128
 17724  0021F8  6E10               	movwf	?_Write_b_eep+2,c
 17725  0021FA  ECA3  F029         	call	_Write_b_eep	;wreg free
 17726                           
 17727                           ;main.c: 1189: (Busy_eep(), Write_b_eep(0x8C,0x00));
 17728  0021FE  ECC7  F02B         	call	_Busy_eep	;wreg free
 17729  002202  6A0F               	clrf	?_Write_b_eep+1,c
 17730  002204  0E8C               	movlw	140
 17731  002206  6E0E               	movwf	?_Write_b_eep,c
 17732  002208  0E00               	movlw	0
 17733  00220A  6A10               	clrf	?_Write_b_eep+2,c
 17734  00220C  ECA3  F029         	call	_Write_b_eep	;wreg free
 17735                           
 17736                           ;main.c: 1191: (Busy_eep(), Write_b_eep(0x8D,0x80));
 17737  002210  ECC7  F02B         	call	_Busy_eep	;wreg free
 17738  002214  6A0F               	clrf	?_Write_b_eep+1,c
 17739  002216  0E8D               	movlw	141
 17740  002218  6E0E               	movwf	?_Write_b_eep,c
 17741  00221A  0E80               	movlw	128
 17742  00221C  6E10               	movwf	?_Write_b_eep+2,c
 17743  00221E  ECA3  F029         	call	_Write_b_eep	;wreg free
 17744                           
 17745                           ;main.c: 1192: (Busy_eep(), Write_b_eep(0x8E,0x00));
 17746  002222  ECC7  F02B         	call	_Busy_eep	;wreg free
 17747  002226  6A0F               	clrf	?_Write_b_eep+1,c
 17748  002228  0E8E               	movlw	142
 17749  00222A  6E0E               	movwf	?_Write_b_eep,c
 17750  00222C  0E00               	movlw	0
 17751  00222E  6A10               	clrf	?_Write_b_eep+2,c
 17752  002230  ECA3  F029         	call	_Write_b_eep	;wreg free
 17753                           
 17754                           ;main.c: 1194: (Busy_eep(), Write_b_eep(0x8F,0x80));
 17755  002234  ECC7  F02B         	call	_Busy_eep	;wreg free
 17756  002238  6A0F               	clrf	?_Write_b_eep+1,c
 17757  00223A  0E8F               	movlw	143
 17758  00223C  6E0E               	movwf	?_Write_b_eep,c
 17759  00223E  0E80               	movlw	128
 17760  002240  6E10               	movwf	?_Write_b_eep+2,c
 17761  002242  ECA3  F029         	call	_Write_b_eep	;wreg free
 17762                           
 17763                           ;main.c: 1195: (Busy_eep(), Write_b_eep(0x90,0x00));
 17764  002246  ECC7  F02B         	call	_Busy_eep	;wreg free
 17765  00224A  6A0F               	clrf	?_Write_b_eep+1,c
 17766  00224C  0E90               	movlw	144
 17767  00224E  6E0E               	movwf	?_Write_b_eep,c
 17768  002250  0E00               	movlw	0
 17769  002252  6A10               	clrf	?_Write_b_eep+2,c
 17770  002254  ECA3  F029         	call	_Write_b_eep	;wreg free
 17771                           
 17772                           ;main.c: 1197: (Busy_eep(), Write_b_eep(0x91,0x80));
 17773  002258  ECC7  F02B         	call	_Busy_eep	;wreg free
 17774  00225C  6A0F               	clrf	?_Write_b_eep+1,c
 17775  00225E  0E91               	movlw	145
 17776  002260  6E0E               	movwf	?_Write_b_eep,c
 17777  002262  0E80               	movlw	128
 17778  002264  6E10               	movwf	?_Write_b_eep+2,c
 17779  002266  ECA3  F029         	call	_Write_b_eep	;wreg free
 17780                           
 17781                           ;main.c: 1198: (Busy_eep(), Write_b_eep(0x92,0x00));
 17782  00226A  ECC7  F02B         	call	_Busy_eep	;wreg free
 17783  00226E  6A0F               	clrf	?_Write_b_eep+1,c
 17784  002270  0E92               	movlw	146
 17785  002272  6E0E               	movwf	?_Write_b_eep,c
 17786  002274  0E00               	movlw	0
 17787  002276  6A10               	clrf	?_Write_b_eep+2,c
 17788  002278  ECA3  F029         	call	_Write_b_eep	;wreg free
 17789                           
 17790                           ;main.c: 1200: (Busy_eep(), Write_b_eep(0x93,0x80));
 17791  00227C  ECC7  F02B         	call	_Busy_eep	;wreg free
 17792  002280  6A0F               	clrf	?_Write_b_eep+1,c
 17793  002282  0E93               	movlw	147
 17794  002284  6E0E               	movwf	?_Write_b_eep,c
 17795  002286  0E80               	movlw	128
 17796  002288  6E10               	movwf	?_Write_b_eep+2,c
 17797  00228A  ECA3  F029         	call	_Write_b_eep	;wreg free
 17798                           
 17799                           ;main.c: 1201: (Busy_eep(), Write_b_eep(0x94,0x00));
 17800  00228E  ECC7  F02B         	call	_Busy_eep	;wreg free
 17801  002292  6A0F               	clrf	?_Write_b_eep+1,c
 17802  002294  0E94               	movlw	148
 17803  002296  6E0E               	movwf	?_Write_b_eep,c
 17804  002298  0E00               	movlw	0
 17805  00229A  6A10               	clrf	?_Write_b_eep+2,c
 17806  00229C  ECA3  F029         	call	_Write_b_eep	;wreg free
 17807                           
 17808                           ;main.c: 1203: (Busy_eep(), Write_b_eep(0x95,0x80));
 17809  0022A0  ECC7  F02B         	call	_Busy_eep	;wreg free
 17810  0022A4  6A0F               	clrf	?_Write_b_eep+1,c
 17811  0022A6  0E95               	movlw	149
 17812  0022A8  6E0E               	movwf	?_Write_b_eep,c
 17813  0022AA  0E80               	movlw	128
 17814  0022AC  6E10               	movwf	?_Write_b_eep+2,c
 17815  0022AE  ECA3  F029         	call	_Write_b_eep	;wreg free
 17816                           
 17817                           ;main.c: 1204: (Busy_eep(), Write_b_eep(0x96,0x00));
 17818  0022B2  ECC7  F02B         	call	_Busy_eep	;wreg free
 17819  0022B6  6A0F               	clrf	?_Write_b_eep+1,c
 17820  0022B8  0E96               	movlw	150
 17821  0022BA  6E0E               	movwf	?_Write_b_eep,c
 17822  0022BC  0E00               	movlw	0
 17823  0022BE  6A10               	clrf	?_Write_b_eep+2,c
 17824  0022C0  ECA3  F029         	call	_Write_b_eep	;wreg free
 17825                           
 17826                           ;main.c: 1208: (Busy_eep(), Write_b_eep(0x97,2));
 17827  0022C4  ECC7  F02B         	call	_Busy_eep	;wreg free
 17828  0022C8  6A0F               	clrf	?_Write_b_eep+1,c
 17829  0022CA  0E97               	movlw	151
 17830  0022CC  6E0E               	movwf	?_Write_b_eep,c
 17831  0022CE  0E02               	movlw	2
 17832  0022D0  6E10               	movwf	?_Write_b_eep+2,c
 17833  0022D2  ECA3  F029         	call	_Write_b_eep	;wreg free
 17834                           
 17835                           ;main.c: 1209: (Busy_eep(), Write_b_eep(0x98,2));
 17836  0022D6  ECC7  F02B         	call	_Busy_eep	;wreg free
 17837  0022DA  6A0F               	clrf	?_Write_b_eep+1,c
 17838  0022DC  0E98               	movlw	152
 17839  0022DE  6E0E               	movwf	?_Write_b_eep,c
 17840  0022E0  0E02               	movlw	2
 17841  0022E2  6E10               	movwf	?_Write_b_eep+2,c
 17842  0022E4  ECA3  F029         	call	_Write_b_eep	;wreg free
 17843                           
 17844                           ;main.c: 1210: (Busy_eep(), Write_b_eep(0x99,2));
 17845  0022E8  ECC7  F02B         	call	_Busy_eep	;wreg free
 17846  0022EC  6A0F               	clrf	?_Write_b_eep+1,c
 17847  0022EE  0E99               	movlw	153
 17848  0022F0  6E0E               	movwf	?_Write_b_eep,c
 17849  0022F2  0E02               	movlw	2
 17850  0022F4  6E10               	movwf	?_Write_b_eep+2,c
 17851  0022F6  ECA3  F029         	call	_Write_b_eep	;wreg free
 17852                           
 17853                           ;main.c: 1211: (Busy_eep(), Write_b_eep(0x9A,2));
 17854  0022FA  ECC7  F02B         	call	_Busy_eep	;wreg free
 17855  0022FE  6A0F               	clrf	?_Write_b_eep+1,c
 17856  002300  0E9A               	movlw	154
 17857  002302  6E0E               	movwf	?_Write_b_eep,c
 17858  002304  0E02               	movlw	2
 17859  002306  6E10               	movwf	?_Write_b_eep+2,c
 17860  002308  ECA3  F029         	call	_Write_b_eep	;wreg free
 17861                           
 17862                           ;main.c: 1212: (Busy_eep(), Write_b_eep(0x9B,2));
 17863  00230C  ECC7  F02B         	call	_Busy_eep	;wreg free
 17864  002310  6A0F               	clrf	?_Write_b_eep+1,c
 17865  002312  0E9B               	movlw	155
 17866  002314  6E0E               	movwf	?_Write_b_eep,c
 17867  002316  0E02               	movlw	2
 17868  002318  6E10               	movwf	?_Write_b_eep+2,c
 17869  00231A  ECA3  F029         	call	_Write_b_eep	;wreg free
 17870                           
 17871                           ;main.c: 1213: (Busy_eep(), Write_b_eep(0x9C,2));
 17872  00231E  ECC7  F02B         	call	_Busy_eep	;wreg free
 17873  002322  6A0F               	clrf	?_Write_b_eep+1,c
 17874  002324  0E9C               	movlw	156
 17875  002326  6E0E               	movwf	?_Write_b_eep,c
 17876  002328  0E02               	movlw	2
 17877  00232A  6E10               	movwf	?_Write_b_eep+2,c
 17878  00232C  ECA3  F029         	call	_Write_b_eep	;wreg free
 17879                           
 17880                           ;main.c: 1217: (Busy_eep(), Write_b_eep(0xF2,0xc3));
 17881  002330  ECC7  F02B         	call	_Busy_eep	;wreg free
 17882  002334  6A0F               	clrf	?_Write_b_eep+1,c
 17883  002336  0EF2               	movlw	242
 17884  002338  6E0E               	movwf	?_Write_b_eep,c
 17885  00233A  0EC3               	movlw	195
 17886  00233C  6E10               	movwf	?_Write_b_eep+2,c
 17887  00233E  ECA3  F029         	call	_Write_b_eep	;wreg free
 17888                           
 17889                           ;main.c: 1218: (Busy_eep(), Write_b_eep(0xF3,0x50));
 17890  002342  ECC7  F02B         	call	_Busy_eep	;wreg free
 17891  002346  6A0F               	clrf	?_Write_b_eep+1,c
 17892  002348  0EF3               	movlw	243
 17893  00234A  6E0E               	movwf	?_Write_b_eep,c
 17894  00234C  0E50               	movlw	80
 17895  00234E  6E10               	movwf	?_Write_b_eep+2,c
 17896  002350  ECA3  F029         	call	_Write_b_eep	;wreg free
 17897                           
 17898                           ;main.c: 1222: (Busy_eep(), Write_b_eep(0x9E,0));
 17899  002354  ECC7  F02B         	call	_Busy_eep	;wreg free
 17900  002358  6A0F               	clrf	?_Write_b_eep+1,c
 17901  00235A  0E9E               	movlw	158
 17902  00235C  6E0E               	movwf	?_Write_b_eep,c
 17903  00235E  0E00               	movlw	0
 17904  002360  6A10               	clrf	?_Write_b_eep+2,c
 17905  002362  ECA3  F029         	call	_Write_b_eep	;wreg free
 17906                           
 17907                           ;main.c: 1223: (Busy_eep(), Write_b_eep(0x9F,0));
 17908  002366  ECC7  F02B         	call	_Busy_eep	;wreg free
 17909  00236A  6A0F               	clrf	?_Write_b_eep+1,c
 17910  00236C  0E9F               	movlw	159
 17911  00236E  6E0E               	movwf	?_Write_b_eep,c
 17912  002370  0E00               	movlw	0
 17913  002372  6A10               	clrf	?_Write_b_eep+2,c
 17914  002374  ECA3  F029         	call	_Write_b_eep	;wreg free
 17915                           
 17916                           ;main.c: 1224: (Busy_eep(), Write_b_eep(0xA0,0));
 17917  002378  ECC7  F02B         	call	_Busy_eep	;wreg free
 17918  00237C  6A0F               	clrf	?_Write_b_eep+1,c
 17919  00237E  0EA0               	movlw	160
 17920  002380  6E0E               	movwf	?_Write_b_eep,c
 17921  002382  0E00               	movlw	0
 17922  002384  6A10               	clrf	?_Write_b_eep+2,c
 17923  002386  ECA3  F029         	call	_Write_b_eep	;wreg free
 17924                           
 17925                           ;main.c: 1225: (Busy_eep(), Write_b_eep(0xA1,0));
 17926  00238A  ECC7  F02B         	call	_Busy_eep	;wreg free
 17927  00238E  6A0F               	clrf	?_Write_b_eep+1,c
 17928  002390  0EA1               	movlw	161
 17929  002392  6E0E               	movwf	?_Write_b_eep,c
 17930  002394  0E00               	movlw	0
 17931  002396  6A10               	clrf	?_Write_b_eep+2,c
 17932  002398  ECA3  F029         	call	_Write_b_eep	;wreg free
 17933                           
 17934                           ;main.c: 1226: (Busy_eep(), Write_b_eep(0xA2,0));
 17935  00239C  ECC7  F02B         	call	_Busy_eep	;wreg free
 17936  0023A0  6A0F               	clrf	?_Write_b_eep+1,c
 17937  0023A2  0EA2               	movlw	162
 17938  0023A4  6E0E               	movwf	?_Write_b_eep,c
 17939  0023A6  0E00               	movlw	0
 17940  0023A8  6A10               	clrf	?_Write_b_eep+2,c
 17941  0023AA  ECA3  F029         	call	_Write_b_eep	;wreg free
 17942                           
 17943                           ;main.c: 1227: (Busy_eep(), Write_b_eep(0xA3,0));
 17944  0023AE  ECC7  F02B         	call	_Busy_eep	;wreg free
 17945  0023B2  6A0F               	clrf	?_Write_b_eep+1,c
 17946  0023B4  0EA3               	movlw	163
 17947  0023B6  6E0E               	movwf	?_Write_b_eep,c
 17948  0023B8  0E00               	movlw	0
 17949  0023BA  6A10               	clrf	?_Write_b_eep+2,c
 17950  0023BC  ECA3  F029         	call	_Write_b_eep	;wreg free
 17951                           
 17952                           ;main.c: 1228: (Busy_eep(), Write_b_eep(0xA4,0));
 17953  0023C0  ECC7  F02B         	call	_Busy_eep	;wreg free
 17954  0023C4  6A0F               	clrf	?_Write_b_eep+1,c
 17955  0023C6  0EA4               	movlw	164
 17956  0023C8  6E0E               	movwf	?_Write_b_eep,c
 17957  0023CA  0E00               	movlw	0
 17958  0023CC  6A10               	clrf	?_Write_b_eep+2,c
 17959  0023CE  ECA3  F029         	call	_Write_b_eep	;wreg free
 17960                           
 17961                           ;main.c: 1229: (Busy_eep(), Write_b_eep(0xA5,0));
 17962  0023D2  ECC7  F02B         	call	_Busy_eep	;wreg free
 17963  0023D6  6A0F               	clrf	?_Write_b_eep+1,c
 17964  0023D8  0EA5               	movlw	165
 17965  0023DA  6E0E               	movwf	?_Write_b_eep,c
 17966  0023DC  0E00               	movlw	0
 17967  0023DE  6A10               	clrf	?_Write_b_eep+2,c
 17968  0023E0  ECA3  F029         	call	_Write_b_eep	;wreg free
 17969                           
 17970                           ;main.c: 1230: (Busy_eep(), Write_b_eep(0xA6,0));
 17971  0023E4  ECC7  F02B         	call	_Busy_eep	;wreg free
 17972  0023E8  6A0F               	clrf	?_Write_b_eep+1,c
 17973  0023EA  0EA6               	movlw	166
 17974  0023EC  6E0E               	movwf	?_Write_b_eep,c
 17975  0023EE  0E00               	movlw	0
 17976  0023F0  6A10               	clrf	?_Write_b_eep+2,c
 17977  0023F2  ECA3  F029         	call	_Write_b_eep	;wreg free
 17978                           
 17979                           ;main.c: 1231: (Busy_eep(), Write_b_eep(0xA7,0));
 17980  0023F6  ECC7  F02B         	call	_Busy_eep	;wreg free
 17981  0023FA  6A0F               	clrf	?_Write_b_eep+1,c
 17982  0023FC  0EA7               	movlw	167
 17983  0023FE  6E0E               	movwf	?_Write_b_eep,c
 17984  002400  0E00               	movlw	0
 17985  002402  6A10               	clrf	?_Write_b_eep+2,c
 17986  002404  ECA3  F029         	call	_Write_b_eep	;wreg free
 17987                           
 17988                           ;main.c: 1232: (Busy_eep(), Write_b_eep(0xA8,0));
 17989  002408  ECC7  F02B         	call	_Busy_eep	;wreg free
 17990  00240C  6A0F               	clrf	?_Write_b_eep+1,c
 17991  00240E  0EA8               	movlw	168
 17992  002410  6E0E               	movwf	?_Write_b_eep,c
 17993  002412  0E00               	movlw	0
 17994  002414  6A10               	clrf	?_Write_b_eep+2,c
 17995  002416  ECA3  F029         	call	_Write_b_eep	;wreg free
 17996                           
 17997                           ;main.c: 1233: (Busy_eep(), Write_b_eep(0xA9,0));
 17998  00241A  ECC7  F02B         	call	_Busy_eep	;wreg free
 17999  00241E  6A0F               	clrf	?_Write_b_eep+1,c
 18000  002420  0EA9               	movlw	169
 18001  002422  6E0E               	movwf	?_Write_b_eep,c
 18002  002424  6A10               	clrf	?_Write_b_eep+2,c
 18003  002426  EFA3  F029         	goto	_Write_b_eep	;wreg free
 18004  00242A                     __end_of_init_app_eeprom:
 18005                           	opt stack 0
 18006                           tblptru	equ	0xFF8
 18007                           tblptrh	equ	0xFF7
 18008                           tblptrl	equ	0xFF6
 18009                           tablat	equ	0xFF5
 18010                           prodh	equ	0xFF4
 18011                           prodl	equ	0xFF3
 18012                           intcon	equ	0xFF2
 18013                           postinc0	equ	0xFEE
 18014                           wreg	equ	0xFE8
 18015                           indf1	equ	0xFE7
 18016                           postdec1	equ	0xFE5
 18017                           fsr1h	equ	0xFE2
 18018                           fsr1l	equ	0xFE1
 18019                           indf2	equ	0xFDF
 18020                           postinc2	equ	0xFDE
 18021                           postdec2	equ	0xFDD
 18022                           plusw2	equ	0xFDB
 18023                           fsr2h	equ	0xFDA
 18024                           fsr2l	equ	0xFD9
 18025                           status	equ	0xFD8
 18026                           
 18027 ;; *************** function _vscp_getControlByte *****************
 18028 ;; Defined at:
 18029 ;;		line 2863 in file "../main.c"
 18030 ;; Parameters:    Size  Location     Type
 18031 ;;  idx             1    wreg     unsigned char 
 18032 ;; Auto vars:     Size  Location     Type
 18033 ;;  idx             1   23[COMRAM] unsigned char 
 18034 ;; Return value:  Size  Location     Type
 18035 ;;                  1    wreg      unsigned char 
 18036 ;; Registers used:
 18037 ;;		wreg, status,2, status,0, cstack
 18038 ;; Tracked objects:
 18039 ;;		On entry : 0/0
 18040 ;;		On exit  : 0/0
 18041 ;;		Unchanged: 0/0
 18042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18043 ;;      Params:         0       0       0       0       0       0       0
 18044 ;;      Locals:         1       0       0       0       0       0       0
 18045 ;;      Temps:          0       0       0       0       0       0       0
 18046 ;;      Totals:         1       0       0       0       0       0       0
 18047 ;;Total ram usage:        1 bytes
 18048 ;; Hardware stack levels used:    1
 18049 ;; Hardware stack levels required when called:    3
 18050 ;; This function calls:
 18051 ;;		_Read_b_eep
 18052 ;; This function is called by:
 18053 ;;		_vscp_check_pstorage
 18054 ;; This function uses a non-reentrant model
 18055 ;;
 18056                           
 18057                           	psect	text83
 18058  0055B6                     __ptext83:
 18059                           	opt stack 0
 18060  0055B6                     _vscp_getControlByte:
 18061                           	opt stack 26
 18062                           
 18063                           ;incstack = 0
 18064                           ;incstack = 0
 18065                           ;vscp_getControlByte@idx stored from wreg
 18066  0055B6  CFE8 F018          	movff	wreg,vscp_getControlByte@idx
 18067                           
 18068                           ;main.c: 2864: if ( idx > 1 ) return 0;
 18069  0055BA  0E01               	movlw	1
 18070  0055BC  6418               	cpfsgt	vscp_getControlByte@idx,c
 18071  0055BE  D002               	goto	l12537
 18072  0055C0  0E00               	movlw	0
 18073  0055C2  D008               	goto	l615
 18074  0055C4                     l12537:
 18075                           
 18076                           ;main.c: 2865: return Read_b_eep(0x03 + idx);
 18077  0055C4  0E03               	movlw	3
 18078  0055C6  2418               	addwf	vscp_getControlByte@idx,w,c
 18079  0055C8  6E16               	movwf	?_Read_b_eep,c
 18080  0055CA  6A17               	clrf	?_Read_b_eep+1,c
 18081  0055CC  0E00               	movlw	0
 18082  0055CE  2217               	addwfc	?_Read_b_eep+1,f,c
 18083  0055D0  EC8F  F02B         	call	_Read_b_eep	;wreg free
 18084  0055D4                     l615:
 18085  0055D4  0012               	return	
 18086  0055D6                     __end_of_vscp_getControlByte:
 18087                           	opt stack 0
 18088                           tblptru	equ	0xFF8
 18089                           tblptrh	equ	0xFF7
 18090                           tblptrl	equ	0xFF6
 18091                           tablat	equ	0xFF5
 18092                           prodh	equ	0xFF4
 18093                           prodl	equ	0xFF3
 18094                           intcon	equ	0xFF2
 18095                           postinc0	equ	0xFEE
 18096                           wreg	equ	0xFE8
 18097                           indf1	equ	0xFE7
 18098                           postdec1	equ	0xFE5
 18099                           fsr1h	equ	0xFE2
 18100                           fsr1l	equ	0xFE1
 18101                           indf2	equ	0xFDF
 18102                           postinc2	equ	0xFDE
 18103                           postdec2	equ	0xFDD
 18104                           plusw2	equ	0xFDB
 18105                           fsr2h	equ	0xFDA
 18106                           fsr2l	equ	0xFD9
 18107                           status	equ	0xFD8
 18108                           
 18109 ;; *************** function _vscp_setControlByte *****************
 18110 ;; Defined at:
 18111 ;;		line 2852 in file "../main.c"
 18112 ;; Parameters:    Size  Location     Type
 18113 ;;  ctrl            1    wreg     unsigned char 
 18114 ;;  idx             1   17[COMRAM] unsigned char 
 18115 ;; Auto vars:     Size  Location     Type
 18116 ;;  ctrl            1   18[COMRAM] unsigned char 
 18117 ;; Return value:  Size  Location     Type
 18118 ;;		None               void
 18119 ;; Registers used:
 18120 ;;		wreg, status,2, status,0, cstack
 18121 ;; Tracked objects:
 18122 ;;		On entry : 0/0
 18123 ;;		On exit  : 0/0
 18124 ;;		Unchanged: 0/0
 18125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18126 ;;      Params:         1       0       0       0       0       0       0
 18127 ;;      Locals:         1       0       0       0       0       0       0
 18128 ;;      Temps:          0       0       0       0       0       0       0
 18129 ;;      Totals:         2       0       0       0       0       0       0
 18130 ;;Total ram usage:        2 bytes
 18131 ;; Hardware stack levels used:    1
 18132 ;; Hardware stack levels required when called:    3
 18133 ;; This function calls:
 18134 ;;		_Busy_eep
 18135 ;;		_Write_b_eep
 18136 ;; This function is called by:
 18137 ;;		_vscp_check_pstorage
 18138 ;; This function uses a non-reentrant model
 18139 ;;
 18140                           
 18141                           	psect	text84
 18142  005528                     __ptext84:
 18143                           	opt stack 0
 18144  005528                     _vscp_setControlByte:
 18145                           	opt stack 26
 18146                           
 18147                           ;incstack = 0
 18148                           ;incstack = 0
 18149                           ;vscp_setControlByte@ctrl stored from wreg
 18150  005528  CFE8 F013          	movff	wreg,vscp_setControlByte@ctrl
 18151                           
 18152                           ;main.c: 2853: if ( idx > 1 ) return;
 18153  00552C  0E01               	movlw	1
 18154  00552E  6412               	cpfsgt	vscp_setControlByte@idx,c
 18155  005530  D001               	goto	l9265
 18156  005532  D00C               	goto	l611
 18157  005534                     l9265:
 18158                           
 18159                           ;main.c: 2854: (Busy_eep(), Write_b_eep(0x03 + idx,ctrl));
 18160  005534  ECC7  F02B         	call	_Busy_eep	;wreg free
 18161  005538  0E03               	movlw	3
 18162  00553A  2412               	addwf	vscp_setControlByte@idx,w,c
 18163  00553C  6E0E               	movwf	?_Write_b_eep,c
 18164  00553E  6A0F               	clrf	?_Write_b_eep+1,c
 18165  005540  0E00               	movlw	0
 18166  005542  220F               	addwfc	?_Write_b_eep+1,f,c
 18167  005544  C013  F010         	movff	vscp_setControlByte@ctrl,?_Write_b_eep+2
 18168  005548  ECA3  F029         	call	_Write_b_eep	;wreg free
 18169  00554C                     l611:
 18170  00554C  0012               	return	
 18171  00554E                     __end_of_vscp_setControlByte:
 18172                           	opt stack 0
 18173                           tblptru	equ	0xFF8
 18174                           tblptrh	equ	0xFF7
 18175                           tblptrl	equ	0xFF6
 18176                           tablat	equ	0xFF5
 18177                           prodh	equ	0xFF4
 18178                           prodl	equ	0xFF3
 18179                           intcon	equ	0xFF2
 18180                           postinc0	equ	0xFEE
 18181                           wreg	equ	0xFE8
 18182                           indf1	equ	0xFE7
 18183                           postdec1	equ	0xFE5
 18184                           fsr1h	equ	0xFE2
 18185                           fsr1l	equ	0xFE1
 18186                           indf2	equ	0xFDF
 18187                           postinc2	equ	0xFDE
 18188                           postdec2	equ	0xFDD
 18189                           plusw2	equ	0xFDB
 18190                           fsr2h	equ	0xFDA
 18191                           fsr2l	equ	0xFD9
 18192                           status	equ	0xFD8
 18193                           
 18194 ;; *************** function _vscp_writeNicknamePermanent *****************
 18195 ;; Defined at:
 18196 ;;		line 2825 in file "../main.c"
 18197 ;; Parameters:    Size  Location     Type
 18198 ;;  nickname        1    wreg     unsigned char 
 18199 ;; Auto vars:     Size  Location     Type
 18200 ;;  nickname        1   17[COMRAM] unsigned char 
 18201 ;; Return value:  Size  Location     Type
 18202 ;;		None               void
 18203 ;; Registers used:
 18204 ;;		wreg, status,2, cstack
 18205 ;; Tracked objects:
 18206 ;;		On entry : 0/0
 18207 ;;		On exit  : 0/0
 18208 ;;		Unchanged: 0/0
 18209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18210 ;;      Params:         0       0       0       0       0       0       0
 18211 ;;      Locals:         1       0       0       0       0       0       0
 18212 ;;      Temps:          0       0       0       0       0       0       0
 18213 ;;      Totals:         1       0       0       0       0       0       0
 18214 ;;Total ram usage:        1 bytes
 18215 ;; Hardware stack levels used:    1
 18216 ;; Hardware stack levels required when called:    3
 18217 ;; This function calls:
 18218 ;;		_Busy_eep
 18219 ;;		_Write_b_eep
 18220 ;; This function is called by:
 18221 ;;		_vscp_check_pstorage
 18222 ;;		_vscp_handleProbeState
 18223 ;;		_vscp_handleSetNickname
 18224 ;;		_vscp_handleDropNickname
 18225 ;; This function uses a non-reentrant model
 18226 ;;
 18227                           
 18228                           	psect	text85
 18229  0056CC                     __ptext85:
 18230                           	opt stack 0
 18231  0056CC                     _vscp_writeNicknamePermanent:
 18232                           	opt stack 25
 18233                           
 18234                           ;incstack = 0
 18235                           ;incstack = 0
 18236                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 18237  0056CC  CFE8 F012          	movff	wreg,vscp_writeNicknamePermanent@nickname
 18238                           
 18239                           ;main.c: 2826: (Busy_eep(), Write_b_eep(0x01,nickname));
 18240  0056D0  ECC7  F02B         	call	_Busy_eep	;wreg free
 18241  0056D4  6A0F               	clrf	?_Write_b_eep+1,c
 18242  0056D6  0E01               	movlw	1
 18243  0056D8  6E0E               	movwf	?_Write_b_eep,c
 18244  0056DA  C012  F010         	movff	vscp_writeNicknamePermanent@nickname,?_Write_b_eep+2
 18245  0056DE  EFA3  F029         	goto	_Write_b_eep	;wreg free
 18246  0056E2                     __end_of_vscp_writeNicknamePermanent:
 18247                           	opt stack 0
 18248                           tblptru	equ	0xFF8
 18249                           tblptrh	equ	0xFF7
 18250                           tblptrl	equ	0xFF6
 18251                           tablat	equ	0xFF5
 18252                           prodh	equ	0xFF4
 18253                           prodl	equ	0xFF3
 18254                           intcon	equ	0xFF2
 18255                           postinc0	equ	0xFEE
 18256                           wreg	equ	0xFE8
 18257                           indf1	equ	0xFE7
 18258                           postdec1	equ	0xFE5
 18259                           fsr1h	equ	0xFE2
 18260                           fsr1l	equ	0xFE1
 18261                           indf2	equ	0xFDF
 18262                           postinc2	equ	0xFDE
 18263                           postdec2	equ	0xFDD
 18264                           plusw2	equ	0xFDB
 18265                           fsr2h	equ	0xFDA
 18266                           fsr2l	equ	0xFD9
 18267                           status	equ	0xFD8
 18268                           
 18269 ;; *************** function _Write_b_eep *****************
 18270 ;; Defined at:
 18271 ;;		line 31 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/EEP/write_B.c"
 18272 ;; Parameters:    Size  Location     Type
 18273 ;;  badd            2   13[COMRAM] unsigned int 
 18274 ;;  bdat            1   15[COMRAM] unsigned char 
 18275 ;; Auto vars:     Size  Location     Type
 18276 ;;  GIE_BIT_VAL     1   16[COMRAM] unsigned char 
 18277 ;; Return value:  Size  Location     Type
 18278 ;;		None               void
 18279 ;; Registers used:
 18280 ;;		wreg, status,2
 18281 ;; Tracked objects:
 18282 ;;		On entry : 0/0
 18283 ;;		On exit  : 0/0
 18284 ;;		Unchanged: 0/0
 18285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18286 ;;      Params:         3       0       0       0       0       0       0
 18287 ;;      Locals:         1       0       0       0       0       0       0
 18288 ;;      Temps:          0       0       0       0       0       0       0
 18289 ;;      Totals:         4       0       0       0       0       0       0
 18290 ;;Total ram usage:        4 bytes
 18291 ;; Hardware stack levels used:    1
 18292 ;; Hardware stack levels required when called:    2
 18293 ;; This function calls:
 18294 ;;		Nothing
 18295 ;; This function is called by:
 18296 ;;		_main
 18297 ;;		_doOneSecondWork
 18298 ;;		_init_app_eeprom
 18299 ;;		_vscp_writeAppReg
 18300 ;;		_vscp_setGUID
 18301 ;;		_vscp_setUserID
 18302 ;;		_vscp_setManufacturerId
 18303 ;;		_vscp_goBootloaderMode
 18304 ;;		_vscp_writeNicknamePermanent
 18305 ;;		_vscp_setControlByte
 18306 ;; This function uses a non-reentrant model
 18307 ;;
 18308                           
 18309                           	psect	text86
 18310  005346                     __ptext86:
 18311                           	opt stack 0
 18312  005346                     _Write_b_eep:
 18313                           	opt stack 27
 18314                           
 18315                           ;incstack = 0
 18316                           ;incstack = 0
 18317  005346  C00E  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 18318  00534A  C010  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 18319  00534E  9EA6               	bcf	4006,7,c	;volatile
 18320  005350  9CA6               	bcf	4006,6,c	;volatile
 18321  005352  84A6               	bsf	4006,2,c	;volatile
 18322  005354  0E00               	movlw	0
 18323  005356  BEF2               	btfsc	intcon,7,c	;volatile
 18324  005358  0E01               	movlw	1
 18325  00535A  6E11               	movwf	Write_b_eep@GIE_BIT_VAL,c
 18326  00535C  9EF2               	bcf	intcon,7,c	;volatile
 18327  00535E  0E55               	movlw	85
 18328  005360  6EA7               	movwf	4007,c	;volatile
 18329  005362  0EAA               	movlw	170
 18330  005364  6EA7               	movwf	4007,c	;volatile
 18331  005366  82A6               	bsf	4006,1,c	;volatile
 18332  005368                     l1318:
 18333  005368  B2A6               	btfsc	4006,1,c	;volatile
 18334  00536A  D7FE               	goto	l1318
 18335  00536C  B011               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 18336  00536E  D002               	bra	u3865
 18337  005370  9EF2               	bcf	intcon,7,c	;volatile
 18338  005372  D001               	bra	u3866
 18339  005374                     u3865:
 18340  005374  8EF2               	bsf	intcon,7,c	;volatile
 18341  005376                     u3866:
 18342  005376  94A6               	bcf	4006,2,c	;volatile
 18343  005378  0012               	return	
 18344  00537A                     __end_of_Write_b_eep:
 18345                           	opt stack 0
 18346                           tblptru	equ	0xFF8
 18347                           tblptrh	equ	0xFF7
 18348                           tblptrl	equ	0xFF6
 18349                           tablat	equ	0xFF5
 18350                           prodh	equ	0xFF4
 18351                           prodl	equ	0xFF3
 18352                           intcon	equ	0xFF2
 18353                           postinc0	equ	0xFEE
 18354                           wreg	equ	0xFE8
 18355                           indf1	equ	0xFE7
 18356                           postdec1	equ	0xFE5
 18357                           fsr1h	equ	0xFE2
 18358                           fsr1l	equ	0xFE1
 18359                           indf2	equ	0xFDF
 18360                           postinc2	equ	0xFDE
 18361                           postdec2	equ	0xFDD
 18362                           plusw2	equ	0xFDB
 18363                           fsr2h	equ	0xFDA
 18364                           fsr2l	equ	0xFD9
 18365                           status	equ	0xFD8
 18366                           
 18367 ;; *************** function _Busy_eep *****************
 18368 ;; Defined at:
 18369 ;;		line 13 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/EEP/busy_eep.c"
 18370 ;; Parameters:    Size  Location     Type
 18371 ;;		None
 18372 ;; Auto vars:     Size  Location     Type
 18373 ;;		None
 18374 ;; Return value:  Size  Location     Type
 18375 ;;		None               void
 18376 ;; Registers used:
 18377 ;;		None
 18378 ;; Tracked objects:
 18379 ;;		On entry : 0/0
 18380 ;;		On exit  : 0/0
 18381 ;;		Unchanged: 0/0
 18382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18383 ;;      Params:         0       0       0       0       0       0       0
 18384 ;;      Locals:         0       0       0       0       0       0       0
 18385 ;;      Temps:          0       0       0       0       0       0       0
 18386 ;;      Totals:         0       0       0       0       0       0       0
 18387 ;;Total ram usage:        0 bytes
 18388 ;; Hardware stack levels used:    1
 18389 ;; Hardware stack levels required when called:    2
 18390 ;; This function calls:
 18391 ;;		Nothing
 18392 ;; This function is called by:
 18393 ;;		_main
 18394 ;;		_doOneSecondWork
 18395 ;;		_init_app_eeprom
 18396 ;;		_vscp_writeAppReg
 18397 ;;		_vscp_setGUID
 18398 ;;		_vscp_setUserID
 18399 ;;		_vscp_setManufacturerId
 18400 ;;		_vscp_goBootloaderMode
 18401 ;;		_vscp_writeNicknamePermanent
 18402 ;;		_vscp_setControlByte
 18403 ;; This function uses a non-reentrant model
 18404 ;;
 18405                           
 18406                           	psect	text87
 18407  00578E                     __ptext87:
 18408                           	opt stack 0
 18409  00578E                     _Busy_eep:
 18410                           	opt stack 27
 18411  00578E                     l1293:
 18412  00578E  A2A6               	btfss	4006,1,c	;volatile
 18413  005790  0012               	return	
 18414  005792  D7FD               	goto	l1293
 18415  005794                     __end_of_Busy_eep:
 18416                           	opt stack 0
 18417                           tblptru	equ	0xFF8
 18418                           tblptrh	equ	0xFF7
 18419                           tblptrl	equ	0xFF6
 18420                           tablat	equ	0xFF5
 18421                           prodh	equ	0xFF4
 18422                           prodl	equ	0xFF3
 18423                           intcon	equ	0xFF2
 18424                           postinc0	equ	0xFEE
 18425                           wreg	equ	0xFE8
 18426                           indf1	equ	0xFE7
 18427                           postdec1	equ	0xFE5
 18428                           fsr1h	equ	0xFE2
 18429                           fsr1l	equ	0xFE1
 18430                           indf2	equ	0xFDF
 18431                           postinc2	equ	0xFDE
 18432                           postdec2	equ	0xFDD
 18433                           plusw2	equ	0xFDB
 18434                           fsr2h	equ	0xFDA
 18435                           fsr2l	equ	0xFD9
 18436                           status	equ	0xFD8
 18437                           
 18438 ;; *************** function _init *****************
 18439 ;; Defined at:
 18440 ;;		line 926 in file "../main.c"
 18441 ;; Parameters:    Size  Location     Type
 18442 ;;		None
 18443 ;; Auto vars:     Size  Location     Type
 18444 ;;		None
 18445 ;; Return value:  Size  Location     Type
 18446 ;;		None               void
 18447 ;; Registers used:
 18448 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 18449 ;; Tracked objects:
 18450 ;;		On entry : 0/0
 18451 ;;		On exit  : 0/0
 18452 ;;		Unchanged: 0/0
 18453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18454 ;;      Params:         0       0       0       0       0       0       0
 18455 ;;      Locals:         0       0       0       0       0       0       0
 18456 ;;      Temps:          0       0       0       0       0       0       0
 18457 ;;      Totals:         0       0       0       0       0       0       0
 18458 ;;Total ram usage:        0 bytes
 18459 ;; Hardware stack levels used:    1
 18460 ;; Hardware stack levels required when called:    4
 18461 ;; This function calls:
 18462 ;;		_WriteTimer0
 18463 ;;		_ConvertADC
 18464 ;;		_init_app_ram
 18465 ;;		_OpenTimer0
 18466 ;;		_OpenADC
 18467 ;;		_ECANInitialize
 18468 ;; This function is called by:
 18469 ;;		_main
 18470 ;; This function uses a non-reentrant model
 18471 ;;
 18472                           
 18473                           	psect	text88
 18474  005262                     __ptext88:
 18475                           	opt stack 0
 18476  005262                     _init:
 18477                           	opt stack 26
 18478                           
 18479                           ;main.c: 930: init_app_ram();
 18480                           
 18481                           ;incstack = 0
 18482                           ;incstack = 0
 18483  005262  ECF4  F028         	call	_init_app_ram	;wreg free
 18484                           
 18485                           ; BSR set to: 0
 18486                           ;main.c: 938: TRISA = 0x07;
 18487  005266  0E07               	movlw	7
 18488  005268  6E92               	movwf	3986,c	;volatile
 18489                           
 18490                           ; BSR set to: 0
 18491                           ;main.c: 949: TRISB = 0x1B;
 18492  00526A  0E1B               	movlw	27
 18493  00526C  6E93               	movwf	3987,c	;volatile
 18494                           
 18495                           ; BSR set to: 0
 18496                           ;main.c: 959: TRISC = 0x01;
 18497  00526E  0E01               	movlw	1
 18498  005270  6E94               	movwf	3988,c	;volatile
 18499                           
 18500                           ; BSR set to: 0
 18501                           ;main.c: 960: PORTC = 0x00;
 18502  005272  6A82               	clrf	3970,c	;volatile
 18503                           
 18504                           ; BSR set to: 0
 18505                           ;main.c: 962: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 18506  005274  0E92               	movlw	146
 18507  005276  EC09  F02B         	call	_OpenTimer0
 18508                           
 18509                           ; BSR set to: 0
 18510                           ;main.c: 963: WriteTimer0(0xfb1d);
 18511  00527A  0EFB               	movlw	251
 18512  00527C  6E0F               	movwf	?_WriteTimer0+1,c
 18513  00527E  0E1D               	movlw	29
 18514  005280  6E0E               	movwf	?_WriteTimer0,c
 18515  005282  EC98  F02B         	call	_WriteTimer0	;wreg free
 18516                           
 18517                           ; BSR set to: 0
 18518                           ;main.c: 966: OpenADC(0b11101111 & 0b11111111 & 0b11111111,
 18519                           ;main.c: 967: 0b10000111 & 0b11111111 & 0b11110100 &
 18520                           ;main.c: 968: 0b11111110 & 0b11111101,
 18521                           ;main.c: 969: 15);
 18522  005286  0E84               	movlw	132
 18523  005288  6E0E               	movwf	?_OpenADC,c
 18524  00528A  0E0F               	movlw	15
 18525  00528C  6E0F               	movwf	?_OpenADC+1,c
 18526  00528E  0EEF               	movlw	239
 18527  005290  EC33  F027         	call	_OpenADC
 18528                           
 18529                           ; BSR set to: 0
 18530                           ;main.c: 978: ECANInitialize();
 18531  005294  EC78  F025         	call	_ECANInitialize	;wreg free
 18532                           
 18533                           ;main.c: 1002: INTCONbits.GIE = 1;
 18534  005298  8EF2               	bsf	intcon,7,c	;volatile
 18535                           
 18536                           ;main.c: 1004: ConvertADC();
 18537  00529A  EFCE  F02B         	goto	_ConvertADC	;wreg free
 18538  00529E                     __end_of_init:
 18539                           	opt stack 0
 18540                           tblptru	equ	0xFF8
 18541                           tblptrh	equ	0xFF7
 18542                           tblptrl	equ	0xFF6
 18543                           tablat	equ	0xFF5
 18544                           prodh	equ	0xFF4
 18545                           prodl	equ	0xFF3
 18546                           intcon	equ	0xFF2
 18547                           postinc0	equ	0xFEE
 18548                           wreg	equ	0xFE8
 18549                           indf1	equ	0xFE7
 18550                           postdec1	equ	0xFE5
 18551                           fsr1h	equ	0xFE2
 18552                           fsr1l	equ	0xFE1
 18553                           indf2	equ	0xFDF
 18554                           postinc2	equ	0xFDE
 18555                           postdec2	equ	0xFDD
 18556                           plusw2	equ	0xFDB
 18557                           fsr2h	equ	0xFDA
 18558                           fsr2l	equ	0xFD9
 18559                           status	equ	0xFD8
 18560                           
 18561 ;; *************** function _ECANInitialize *****************
 18562 ;; Defined at:
 18563 ;;		line 168 in file "../ECAN.c"
 18564 ;; Parameters:    Size  Location     Type
 18565 ;;		None
 18566 ;; Auto vars:     Size  Location     Type
 18567 ;;		None
 18568 ;; Return value:  Size  Location     Type
 18569 ;;		None               void
 18570 ;; Registers used:
 18571 ;;		wreg, status,2, status,0, cstack
 18572 ;; Tracked objects:
 18573 ;;		On entry : F/0
 18574 ;;		On exit  : 0/0
 18575 ;;		Unchanged: 0/0
 18576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18577 ;;      Params:         0       0       0       0       0       0       0
 18578 ;;      Locals:         0       0       0       0       0       0       0
 18579 ;;      Temps:          0       0       0       0       0       0       0
 18580 ;;      Totals:         0       0       0       0       0       0       0
 18581 ;;Total ram usage:        0 bytes
 18582 ;; Hardware stack levels used:    1
 18583 ;; Hardware stack levels required when called:    3
 18584 ;; This function calls:
 18585 ;;		_ECANSetOperationMode
 18586 ;; This function is called by:
 18587 ;;		_init
 18588 ;; This function uses a non-reentrant model
 18589 ;;
 18590                           
 18591                           	psect	text89
 18592  004AF0                     __ptext89:
 18593                           	opt stack 0
 18594  004AF0                     _ECANInitialize:
 18595                           	opt stack 26
 18596                           
 18597                           ; BSR set to: 0
 18598                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 18599                           
 18600                           ;incstack = 0
 18601                           ;incstack = 0
 18602  004AF0  0E80               	movlw	128
 18603  004AF2  EC5A  F02B         	call	_ECANSetOperationMode
 18604                           
 18605                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 18606  004AF6  0E09               	movlw	9
 18607  004AF8  6E70               	movwf	3952,c	;volatile
 18608                           
 18609                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 18610  004AFA  0EFC               	movlw	252
 18611  004AFC  6E71               	movwf	3953,c	;volatile
 18612                           
 18613                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 18614                           ;ECAN.c: 181: (0 << 6) |
 18615                           ;ECAN.c: 182: (2-1);
 18616  004AFE  0E01               	movlw	1
 18617  004B00  6E72               	movwf	3954,c	;volatile
 18618                           
 18619                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 18620  004B02  0E20               	movlw	32
 18621  004B04  6E73               	movwf	3955,c	;volatile
 18622                           
 18623                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 18624  004B06  8E77               	bsf	3959,7,c	;volatile
 18625                           
 18626                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 18627  004B08  9C77               	bcf	3959,6,c	;volatile
 18628                           
 18629                           ;ECAN.c: 205: RXB0CON = 0;
 18630  004B0A  6A60               	clrf	3936,c	;volatile
 18631                           
 18632                           ;ECAN.c: 211: RXB1CON = 0;
 18633  004B0C  010F               	movlb	15	; () banked
 18634  004B0E  6B50               	clrf	80,b	;volatile
 18635                           
 18636                           ; BSR set to: 15
 18637                           ;ECAN.c: 221: B0CON = 0;
 18638  004B10  010E               	movlb	14	; () banked
 18639  004B12  6B20               	clrf	32,b	;volatile
 18640                           
 18641                           ; BSR set to: 14
 18642                           ;ECAN.c: 231: B1CON = 0;
 18643  004B14  6B30               	clrf	48,b	;volatile
 18644                           
 18645                           ; BSR set to: 14
 18646                           ;ECAN.c: 241: B2CON = 0;
 18647  004B16  6B40               	clrf	64,b	;volatile
 18648                           
 18649                           ; BSR set to: 14
 18650                           ;ECAN.c: 254: B3CON = 0 << 2;
 18651  004B18  6B50               	clrf	80,b	;volatile
 18652                           
 18653                           ; BSR set to: 14
 18654                           ;ECAN.c: 264: B4CON = 0 << 2;
 18655  004B1A  6B60               	clrf	96,b	;volatile
 18656                           
 18657                           ; BSR set to: 14
 18658                           ;ECAN.c: 274: B5CON = 0 << 2;
 18659  004B1C  6B70               	clrf	112,b	;volatile
 18660                           
 18661                           ; BSR set to: 14
 18662                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 18663  004B1E  0EE0               	movlw	224
 18664  004B20  010D               	movlb	13	; () banked
 18665  004B22  6FF8               	movwf	248,b	;volatile
 18666                           
 18667                           ; BSR set to: 13
 18668                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 18669  004B24  010F               	movlb	15	; () banked
 18670  004B26  6B00               	clrf	0,b	;volatile
 18671                           
 18672                           ; BSR set to: 15
 18673  004B28  0E08               	movlw	8
 18674  004B2A  6F01               	movwf	1,b	;volatile
 18675                           
 18676                           ; BSR set to: 15
 18677  004B2C  6B02               	clrf	2,b	;volatile
 18678                           
 18679                           ; BSR set to: 15
 18680  004B2E  6B03               	clrf	3,b	;volatile
 18681                           
 18682                           ; BSR set to: 15
 18683                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 18684  004B30  6B04               	clrf	4,b	;volatile
 18685                           
 18686                           ; BSR set to: 15
 18687  004B32  0EE8               	movlw	232
 18688  004B34  6F05               	movwf	5,b	;volatile
 18689                           
 18690                           ; BSR set to: 15
 18691  004B36  0E1A               	movlw	26
 18692  004B38  6F06               	movwf	6,b	;volatile
 18693                           
 18694                           ; BSR set to: 15
 18695  004B3A  6B07               	clrf	7,b	;volatile
 18696                           
 18697                           ; BSR set to: 15
 18698                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 18699  004B3C  0E03               	movlw	3
 18700  004B3E  010D               	movlb	13	; () banked
 18701  004B40  6FD4               	movwf	212,b	;volatile
 18702                           
 18703                           ; BSR set to: 13
 18704                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 18705  004B42  6BD5               	clrf	213,b	;volatile
 18706                           
 18707                           ; BSR set to: 13
 18708                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 18709  004B44  6BE0               	clrf	224,b	;volatile
 18710                           
 18711                           ; BSR set to: 13
 18712                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 18713  004B46  0E11               	movlw	17
 18714  004B48  6FE1               	movwf	225,b	;volatile
 18715                           
 18716                           ; BSR set to: 13
 18717                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 18718  004B4A  6FE2               	movwf	226,b	;volatile
 18719                           
 18720                           ; BSR set to: 13
 18721                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 18722  004B4C  6BE3               	clrf	227,b	;volatile
 18723                           
 18724                           ; BSR set to: 13
 18725                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 18726  004B4E  6BE4               	clrf	228,b	;volatile
 18727                           
 18728                           ; BSR set to: 13
 18729                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 18730  004B50  6BE5               	clrf	229,b	;volatile
 18731                           
 18732                           ; BSR set to: 13
 18733                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 18734  004B52  6BE6               	clrf	230,b	;volatile
 18735                           
 18736                           ; BSR set to: 13
 18737                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 18738  004B54  6BE7               	clrf	231,b	;volatile
 18739                           
 18740                           ; BSR set to: 13
 18741                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 18742  004B56  0E54               	movlw	84
 18743  004B58  6FF0               	movwf	240,b	;volatile
 18744                           
 18745                           ; BSR set to: 13
 18746                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 18747  004B5A  0E05               	movlw	5
 18748  004B5C  6FF1               	movwf	241,b	;volatile
 18749                           
 18750                           ; BSR set to: 13
 18751                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18752  004B5E  6BF2               	clrf	242,b	;volatile
 18753                           
 18754                           ; BSR set to: 13
 18755                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18756  004B60  6BF2               	clrf	242,b	;volatile
 18757                           
 18758                           ; BSR set to: 13
 18759                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 18760  004B62  0E0F               	movlw	15
 18761  004B64  010F               	movlb	15	; () banked
 18762  004B66  6F18               	movwf	24,b	;volatile
 18763                           
 18764                           ; BSR set to: 15
 18765  004B68  0EE0               	movlw	224
 18766  004B6A  6F19               	movwf	25,b	;volatile
 18767                           
 18768                           ; BSR set to: 15
 18769  004B6C  6B1A               	clrf	26,b	;volatile
 18770                           
 18771                           ; BSR set to: 15
 18772  004B6E  6B1B               	clrf	27,b	;volatile
 18773                           
 18774                           ; BSR set to: 15
 18775                           ;ECAN.c: 482: RXM0EXIDM = 1;
 18776  004B70  8719               	bsf	25,3,b	;volatile
 18777                           
 18778                           ; BSR set to: 15
 18779                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 18780  004B72  0E0F               	movlw	15
 18781  004B74  6F1C               	movwf	28,b	;volatile
 18782                           
 18783                           ; BSR set to: 15
 18784  004B76  0EE0               	movlw	224
 18785  004B78  6F1D               	movwf	29,b	;volatile
 18786                           
 18787                           ; BSR set to: 15
 18788  004B7A  691E               	setf	30,b	;volatile
 18789                           
 18790                           ; BSR set to: 15
 18791  004B7C  6B1F               	clrf	31,b	;volatile
 18792                           
 18793                           ; BSR set to: 15
 18794                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 18795  004B7E  871D               	bsf	29,3,b	;volatile
 18796                           
 18797                           ; BSR set to: 15
 18798                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 18799  004B80  0E00               	movlw	0
 18800  004B82  EF5A  F02B         	goto	_ECANSetOperationMode
 18801  004B86                     __end_of_ECANInitialize:
 18802                           	opt stack 0
 18803                           tblptru	equ	0xFF8
 18804                           tblptrh	equ	0xFF7
 18805                           tblptrl	equ	0xFF6
 18806                           tablat	equ	0xFF5
 18807                           prodh	equ	0xFF4
 18808                           prodl	equ	0xFF3
 18809                           intcon	equ	0xFF2
 18810                           postinc0	equ	0xFEE
 18811                           wreg	equ	0xFE8
 18812                           indf1	equ	0xFE7
 18813                           postdec1	equ	0xFE5
 18814                           fsr1h	equ	0xFE2
 18815                           fsr1l	equ	0xFE1
 18816                           indf2	equ	0xFDF
 18817                           postinc2	equ	0xFDE
 18818                           postdec2	equ	0xFDD
 18819                           plusw2	equ	0xFDB
 18820                           fsr2h	equ	0xFDA
 18821                           fsr2l	equ	0xFD9
 18822                           status	equ	0xFD8
 18823                           
 18824 ;; *************** function _ECANSetOperationMode *****************
 18825 ;; Defined at:
 18826 ;;		line 1012 in file "../ECAN.c"
 18827 ;; Parameters:    Size  Location     Type
 18828 ;;  mode            1    wreg     enum E16337
 18829 ;; Auto vars:     Size  Location     Type
 18830 ;;  mode            1   13[COMRAM] enum E16337
 18831 ;; Return value:  Size  Location     Type
 18832 ;;		None               void
 18833 ;; Registers used:
 18834 ;;		wreg, status,2, status,0
 18835 ;; Tracked objects:
 18836 ;;		On entry : 0/0
 18837 ;;		On exit  : 0/0
 18838 ;;		Unchanged: 0/0
 18839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18840 ;;      Params:         0       0       0       0       0       0       0
 18841 ;;      Locals:         1       0       0       0       0       0       0
 18842 ;;      Temps:          0       0       0       0       0       0       0
 18843 ;;      Totals:         1       0       0       0       0       0       0
 18844 ;;Total ram usage:        1 bytes
 18845 ;; Hardware stack levels used:    1
 18846 ;; Hardware stack levels required when called:    2
 18847 ;; This function calls:
 18848 ;;		Nothing
 18849 ;; This function is called by:
 18850 ;;		_vscp_goBootloaderMode
 18851 ;;		_ECANInitialize
 18852 ;; This function uses a non-reentrant model
 18853 ;;
 18854                           
 18855                           	psect	text90
 18856  0056B4                     __ptext90:
 18857                           	opt stack 0
 18858  0056B4                     _ECANSetOperationMode:
 18859                           	opt stack 26
 18860                           
 18861                           ;incstack = 0
 18862                           ;incstack = 0
 18863                           ;ECANSetOperationMode@mode stored from wreg
 18864  0056B4  CFE8 F00E          	movff	wreg,ECANSetOperationMode@mode
 18865                           
 18866                           ;ECAN.c: 1013: CANCON &= 0x1F;
 18867  0056B8  0E1F               	movlw	31
 18868  0056BA  166F               	andwf	3951,f,c	;volatile
 18869                           
 18870                           ;ECAN.c: 1014: CANCON |= mode;
 18871  0056BC  500E               	movf	ECANSetOperationMode@mode,w,c
 18872  0056BE  126F               	iorwf	3951,f,c	;volatile
 18873  0056C0                     l9251:
 18874  0056C0  506F               	movf	3951,w,c	;volatile
 18875  0056C2  0BE0               	andlw	224
 18876  0056C4  180E               	xorwf	ECANSetOperationMode@mode,w,c
 18877  0056C6  B4D8               	btfsc	status,2,c
 18878  0056C8  0012               	return	
 18879  0056CA  D7FA               	goto	l9251
 18880  0056CC                     __end_of_ECANSetOperationMode:
 18881                           	opt stack 0
 18882                           tblptru	equ	0xFF8
 18883                           tblptrh	equ	0xFF7
 18884                           tblptrl	equ	0xFF6
 18885                           tablat	equ	0xFF5
 18886                           prodh	equ	0xFF4
 18887                           prodl	equ	0xFF3
 18888                           intcon	equ	0xFF2
 18889                           postinc0	equ	0xFEE
 18890                           wreg	equ	0xFE8
 18891                           indf1	equ	0xFE7
 18892                           postdec1	equ	0xFE5
 18893                           fsr1h	equ	0xFE2
 18894                           fsr1l	equ	0xFE1
 18895                           indf2	equ	0xFDF
 18896                           postinc2	equ	0xFDE
 18897                           postdec2	equ	0xFDD
 18898                           plusw2	equ	0xFDB
 18899                           fsr2h	equ	0xFDA
 18900                           fsr2l	equ	0xFD9
 18901                           status	equ	0xFD8
 18902                           
 18903 ;; *************** function _OpenADC *****************
 18904 ;; Defined at:
 18905 ;;		line 71 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/ADC/adcopen.c"
 18906 ;; Parameters:    Size  Location     Type
 18907 ;;  config          1    wreg     unsigned char 
 18908 ;;  config2         1   13[COMRAM] unsigned char 
 18909 ;;  portconfig      1   14[COMRAM] unsigned char 
 18910 ;; Auto vars:     Size  Location     Type
 18911 ;;  config          1   17[COMRAM] unsigned char 
 18912 ;; Return value:  Size  Location     Type
 18913 ;;		None               void
 18914 ;; Registers used:
 18915 ;;		wreg, status,2, status,0
 18916 ;; Tracked objects:
 18917 ;;		On entry : F/0
 18918 ;;		On exit  : F/0
 18919 ;;		Unchanged: F/0
 18920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18921 ;;      Params:         2       0       0       0       0       0       0
 18922 ;;      Locals:         1       0       0       0       0       0       0
 18923 ;;      Temps:          2       0       0       0       0       0       0
 18924 ;;      Totals:         5       0       0       0       0       0       0
 18925 ;;Total ram usage:        5 bytes
 18926 ;; Hardware stack levels used:    1
 18927 ;; Hardware stack levels required when called:    2
 18928 ;; This function calls:
 18929 ;;		Nothing
 18930 ;; This function is called by:
 18931 ;;		_init
 18932 ;; This function uses a non-reentrant model
 18933 ;;
 18934                           
 18935                           	psect	text91
 18936  004E66                     __ptext91:
 18937                           	opt stack 0
 18938  004E66                     _OpenADC:
 18939                           	opt stack 27
 18940                           
 18941                           ;incstack = 0
 18942                           ;incstack = 0
 18943                           ;OpenADC@config stored from wreg
 18944  004E66  CFE8 F012          	movff	wreg,OpenADC@config
 18945                           
 18946                           ; BSR set to: 0
 18947  004E6A  6AC2               	clrf	4034,c	;volatile
 18948  004E6C  6AC0               	clrf	4032,c	;volatile
 18949                           
 18950                           ; BSR set to: 0
 18951  004E6E  90D8               	bcf	status,0,c
 18952  004E70  300E               	rrcf	OpenADC@config2,w,c
 18953  004E72  0B3C               	andlw	60
 18954  004E74  6EC2               	movwf	4034,c	;volatile
 18955  004E76  C00E  F010         	movff	OpenADC@config2,??_OpenADC
 18956  004E7A  3A10               	swapf	??_OpenADC,f,c
 18957  004E7C  0EF0               	movlw	240
 18958  004E7E  1610               	andwf	??_OpenADC,f,c
 18959  004E80  0E30               	movlw	48
 18960  004E82  1610               	andwf	??_OpenADC,f,c
 18961  004E84  500F               	movf	OpenADC@portconfig,w,c
 18962  004E86  0B0F               	andlw	15
 18963  004E88  1010               	iorwf	??_OpenADC,w,c
 18964  004E8A  6EC1               	movwf	4033,c	;volatile
 18965  004E8C  C012  F010         	movff	OpenADC@config,??_OpenADC
 18966  004E90  90D8               	bcf	status,0,c
 18967  004E92  3610               	rlcf	??_OpenADC,f,c
 18968  004E94  90D8               	bcf	status,0,c
 18969  004E96  3610               	rlcf	??_OpenADC,f,c
 18970  004E98  0E38               	movlw	56
 18971  004E9A  1610               	andwf	??_OpenADC,f,c
 18972  004E9C  C012  F011         	movff	OpenADC@config,??_OpenADC+1
 18973  004EA0  3A11               	swapf	??_OpenADC+1,f,c
 18974  004EA2  0E0F               	movlw	15
 18975  004EA4  1611               	andwf	??_OpenADC+1,f,c
 18976  004EA6  0E07               	movlw	7
 18977  004EA8  1611               	andwf	??_OpenADC+1,f,c
 18978  004EAA  5012               	movf	OpenADC@config,w,c
 18979  004EAC  0B80               	andlw	128
 18980  004EAE  1011               	iorwf	??_OpenADC+1,w,c
 18981  004EB0  1010               	iorwf	??_OpenADC,w,c
 18982  004EB2  6EC0               	movwf	4032,c	;volatile
 18983                           
 18984                           ; BSR set to: 0
 18985  004EB4  AE0E               	btfss	OpenADC@config2,7,c
 18986  004EB6  D003               	goto	l1287
 18987                           
 18988                           ; BSR set to: 0
 18989  004EB8  9C9E               	bcf	3998,6,c	;volatile
 18990  004EBA  8C9D               	bsf	3997,6,c	;volatile
 18991  004EBC  8CF2               	bsf	intcon,6,c	;volatile
 18992  004EBE                     l1287:
 18993                           
 18994                           ; BSR set to: 0
 18995  004EBE  80C2               	bsf	4034,0,c	;volatile
 18996                           
 18997                           ; BSR set to: 0
 18998  004EC0  0012               	return	
 18999  004EC2                     __end_of_OpenADC:
 19000                           	opt stack 0
 19001                           tblptru	equ	0xFF8
 19002                           tblptrh	equ	0xFF7
 19003                           tblptrl	equ	0xFF6
 19004                           tablat	equ	0xFF5
 19005                           prodh	equ	0xFF4
 19006                           prodl	equ	0xFF3
 19007                           intcon	equ	0xFF2
 19008                           postinc0	equ	0xFEE
 19009                           wreg	equ	0xFE8
 19010                           indf1	equ	0xFE7
 19011                           postdec1	equ	0xFE5
 19012                           fsr1h	equ	0xFE2
 19013                           fsr1l	equ	0xFE1
 19014                           indf2	equ	0xFDF
 19015                           postinc2	equ	0xFDE
 19016                           postdec2	equ	0xFDD
 19017                           plusw2	equ	0xFDB
 19018                           fsr2h	equ	0xFDA
 19019                           fsr2l	equ	0xFD9
 19020                           status	equ	0xFD8
 19021                           
 19022 ;; *************** function _OpenTimer0 *****************
 19023 ;; Defined at:
 19024 ;;		line 19 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/Timers/t0open.c"
 19025 ;; Parameters:    Size  Location     Type
 19026 ;;  config          1    wreg     unsigned char 
 19027 ;; Auto vars:     Size  Location     Type
 19028 ;;  config          1   13[COMRAM] unsigned char 
 19029 ;; Return value:  Size  Location     Type
 19030 ;;		None               void
 19031 ;; Registers used:
 19032 ;;		wreg, status,2, status,0
 19033 ;; Tracked objects:
 19034 ;;		On entry : F/0
 19035 ;;		On exit  : F/0
 19036 ;;		Unchanged: F/0
 19037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19038 ;;      Params:         0       0       0       0       0       0       0
 19039 ;;      Locals:         1       0       0       0       0       0       0
 19040 ;;      Temps:          0       0       0       0       0       0       0
 19041 ;;      Totals:         1       0       0       0       0       0       0
 19042 ;;Total ram usage:        1 bytes
 19043 ;; Hardware stack levels used:    1
 19044 ;; Hardware stack levels required when called:    2
 19045 ;; This function calls:
 19046 ;;		Nothing
 19047 ;; This function is called by:
 19048 ;;		_init
 19049 ;; This function uses a non-reentrant model
 19050 ;;
 19051                           
 19052                           	psect	text92
 19053  005612                     __ptext92:
 19054                           	opt stack 0
 19055  005612                     _OpenTimer0:
 19056                           	opt stack 27
 19057                           
 19058                           ; BSR set to: 0
 19059                           ;incstack = 0
 19060                           ;incstack = 0
 19061                           ;OpenTimer0@config stored from wreg
 19062  005612  CFE8 F00E          	movff	wreg,OpenTimer0@config
 19063                           
 19064                           ; BSR set to: 0
 19065  005616  500E               	movf	OpenTimer0@config,w,c
 19066  005618  0B7F               	andlw	127
 19067  00561A  6ED5               	movwf	4053,c	;volatile
 19068                           
 19069                           ; BSR set to: 0
 19070  00561C  6AD7               	clrf	4055,c	;volatile
 19071                           
 19072                           ; BSR set to: 0
 19073  00561E  6AD6               	clrf	4054,c	;volatile
 19074                           
 19075                           ; BSR set to: 0
 19076  005620  94F2               	bcf	intcon,2,c	;volatile
 19077                           
 19078                           ; BSR set to: 0
 19079  005622  AE0E               	btfss	OpenTimer0@config,7,c
 19080  005624  D002               	goto	l1334
 19081                           
 19082                           ; BSR set to: 0
 19083  005626  8AF2               	bsf	intcon,5,c	;volatile
 19084  005628  D001               	goto	l1335
 19085  00562A                     l1334:
 19086                           
 19087                           ; BSR set to: 0
 19088  00562A  9AF2               	bcf	intcon,5,c	;volatile
 19089  00562C                     l1335:
 19090                           
 19091                           ; BSR set to: 0
 19092  00562C  8ED5               	bsf	4053,7,c	;volatile
 19093                           
 19094                           ; BSR set to: 0
 19095  00562E  0012               	return	
 19096  005630                     __end_of_OpenTimer0:
 19097                           	opt stack 0
 19098                           tblptru	equ	0xFF8
 19099                           tblptrh	equ	0xFF7
 19100                           tblptrl	equ	0xFF6
 19101                           tablat	equ	0xFF5
 19102                           prodh	equ	0xFF4
 19103                           prodl	equ	0xFF3
 19104                           intcon	equ	0xFF2
 19105                           postinc0	equ	0xFEE
 19106                           wreg	equ	0xFE8
 19107                           indf1	equ	0xFE7
 19108                           postdec1	equ	0xFE5
 19109                           fsr1h	equ	0xFE2
 19110                           fsr1l	equ	0xFE1
 19111                           indf2	equ	0xFDF
 19112                           postinc2	equ	0xFDE
 19113                           postdec2	equ	0xFDD
 19114                           plusw2	equ	0xFDB
 19115                           fsr2h	equ	0xFDA
 19116                           fsr2l	equ	0xFD9
 19117                           status	equ	0xFD8
 19118                           
 19119 ;; *************** function _init_app_ram *****************
 19120 ;; Defined at:
 19121 ;;		line 1032 in file "../main.c"
 19122 ;; Parameters:    Size  Location     Type
 19123 ;;		None
 19124 ;; Auto vars:     Size  Location     Type
 19125 ;;  i               1   13[COMRAM] unsigned char 
 19126 ;; Return value:  Size  Location     Type
 19127 ;;		None               void
 19128 ;; Registers used:
 19129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19130 ;; Tracked objects:
 19131 ;;		On entry : 0/1
 19132 ;;		On exit  : F/0
 19133 ;;		Unchanged: 0/0
 19134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19135 ;;      Params:         0       0       0       0       0       0       0
 19136 ;;      Locals:         1       0       0       0       0       0       0
 19137 ;;      Temps:          0       0       0       0       0       0       0
 19138 ;;      Totals:         1       0       0       0       0       0       0
 19139 ;;Total ram usage:        1 bytes
 19140 ;; Hardware stack levels used:    1
 19141 ;; Hardware stack levels required when called:    2
 19142 ;; This function calls:
 19143 ;;		Nothing
 19144 ;; This function is called by:
 19145 ;;		_init
 19146 ;;		_vscp_restoreDefaults
 19147 ;; This function uses a non-reentrant model
 19148 ;;
 19149                           
 19150                           	psect	text93
 19151  0051E8                     __ptext93:
 19152                           	opt stack 0
 19153  0051E8                     _init_app_ram:
 19154                           	opt stack 25
 19155                           
 19156                           ;main.c: 1033: char i;
 19157                           ;main.c: 1035: measurement_clock = 0;
 19158                           
 19159                           ; BSR set to: 0
 19160                           ;incstack = 0
 19161                           ;incstack = 0
 19162  0051E8  0101               	movlb	1	; () banked
 19163  0051EA  6B12               	clrf	_measurement_clock& (0+255),b	;volatile
 19164  0051EC  6B13               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 19165  0051EE  6B14               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 19166  0051F0  6B15               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 19167                           
 19168                           ;main.c: 1036: seconds = 0;
 19169  0051F2  0100               	movlb	0	; () banked
 19170  0051F4  6BB9               	clrf	_seconds& (0+255),b
 19171                           
 19172                           ;main.c: 1039: for (i = 0; i < 6; i++) {
 19173  0051F6  6A0E               	clrf	init_app_ram@i,c
 19174  0051F8                     l8171:
 19175                           
 19176                           ;main.c: 1040: seconds_temp[i] = 0;
 19177  0051F8  0E0C               	movlw	low _seconds_temp
 19178  0051FA  240E               	addwf	init_app_ram@i,w,c
 19179  0051FC  6ED9               	movwf	fsr2l,c
 19180  0051FE  6ADA               	clrf	fsr2h,c
 19181  005200  0E01               	movlw	high _seconds_temp
 19182  005202  22DA               	addwfc	fsr2h,f,c
 19183  005204  6ADF               	clrf	indf2,c
 19184                           
 19185                           ; BSR set to: 1
 19186                           ;main.c: 1041: current_temp[i] = 0;
 19187  005206  500E               	movf	init_app_ram@i,w,c
 19188  005208  0D02               	mullw	2
 19189  00520A  EC78  F017         	call	PL2	;call to abstracted procedure
 19190  00520E  6ADE               	clrf	postinc2,c
 19191  005210  6ADD               	clrf	postdec2,c
 19192                           
 19193                           ; BSR set to: 1
 19194  005212  2A0E               	incf	init_app_ram@i,f,c
 19195                           
 19196                           ; BSR set to: 1
 19197  005214  0E05               	movlw	5
 19198  005216  640E               	cpfsgt	init_app_ram@i,c
 19199  005218  D7EF               	goto	l8171
 19200                           
 19201                           ; BSR set to: 1
 19202                           ;main.c: 1042: }
 19203                           ;main.c: 1045: adc_conversion_flags = 0;
 19204  00521A  0100               	movlb	0	; () banked
 19205  00521C  6BB6               	clrf	_adc_conversion_flags& (0+255),b
 19206                           
 19207                           ;main.c: 1048: adc_series_counter = 0;
 19208  00521E  6A49               	clrf	_adc_series_counter,c
 19209                           
 19210                           ;main.c: 1051: low_alarm = 0;
 19211  005220  6BB8               	clrf	_low_alarm& (0+255),b
 19212                           
 19213                           ;main.c: 1054: high_alarm = 0;
 19214  005222  6BB7               	clrf	_high_alarm& (0+255),b
 19215                           
 19216                           ; BSR set to: 0
 19217  005224  0012               	return	
 19218  005226                     __end_of_init_app_ram:
 19219                           	opt stack 0
 19220                           tblptru	equ	0xFF8
 19221                           tblptrh	equ	0xFF7
 19222                           tblptrl	equ	0xFF6
 19223                           tablat	equ	0xFF5
 19224                           prodh	equ	0xFF4
 19225                           prodl	equ	0xFF3
 19226                           intcon	equ	0xFF2
 19227                           postinc0	equ	0xFEE
 19228                           wreg	equ	0xFE8
 19229                           indf1	equ	0xFE7
 19230                           postdec1	equ	0xFE5
 19231                           fsr1h	equ	0xFE2
 19232                           fsr1l	equ	0xFE1
 19233                           indf2	equ	0xFDF
 19234                           postinc2	equ	0xFDE
 19235                           postdec2	equ	0xFDD
 19236                           plusw2	equ	0xFDB
 19237                           fsr2h	equ	0xFDA
 19238                           fsr2l	equ	0xFD9
 19239                           status	equ	0xFD8
 19240                           
 19241 ;; *************** function _ConvertADC *****************
 19242 ;; Defined at:
 19243 ;;		line 23 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/ADC/adcconv.c"
 19244 ;; Parameters:    Size  Location     Type
 19245 ;;		None
 19246 ;; Auto vars:     Size  Location     Type
 19247 ;;		None
 19248 ;; Return value:  Size  Location     Type
 19249 ;;		None               void
 19250 ;; Registers used:
 19251 ;;		None
 19252 ;; Tracked objects:
 19253 ;;		On entry : 0/0
 19254 ;;		On exit  : 0/0
 19255 ;;		Unchanged: 0/0
 19256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19257 ;;      Params:         0       0       0       0       0       0       0
 19258 ;;      Locals:         0       0       0       0       0       0       0
 19259 ;;      Temps:          0       0       0       0       0       0       0
 19260 ;;      Totals:         0       0       0       0       0       0       0
 19261 ;;Total ram usage:        0 bytes
 19262 ;; Hardware stack levels used:    1
 19263 ;; Hardware stack levels required when called:    2
 19264 ;; This function calls:
 19265 ;;		Nothing
 19266 ;; This function is called by:
 19267 ;;		_init
 19268 ;; This function uses a non-reentrant model
 19269 ;;
 19270                           
 19271                           	psect	text94
 19272  00579C                     __ptext94:
 19273                           	opt stack 0
 19274  00579C                     _ConvertADC:
 19275                           	opt stack 27
 19276                           
 19277                           ; BSR set to: 0
 19278                           ;incstack = 0
 19279                           ;incstack = 0
 19280  00579C  82C2               	bsf	4034,1,c	;volatile
 19281  00579E  0012               	return	
 19282  0057A0                     __end_of_ConvertADC:
 19283                           	opt stack 0
 19284                           tblptru	equ	0xFF8
 19285                           tblptrh	equ	0xFF7
 19286                           tblptrl	equ	0xFF6
 19287                           tablat	equ	0xFF5
 19288                           prodh	equ	0xFF4
 19289                           prodl	equ	0xFF3
 19290                           intcon	equ	0xFF2
 19291                           postinc0	equ	0xFEE
 19292                           wreg	equ	0xFE8
 19293                           indf1	equ	0xFE7
 19294                           postdec1	equ	0xFE5
 19295                           fsr1h	equ	0xFE2
 19296                           fsr1l	equ	0xFE1
 19297                           indf2	equ	0xFDF
 19298                           postinc2	equ	0xFDE
 19299                           postdec2	equ	0xFDD
 19300                           plusw2	equ	0xFDB
 19301                           fsr2h	equ	0xFDA
 19302                           fsr2l	equ	0xFD9
 19303                           status	equ	0xFD8
 19304                           
 19305 ;; *************** function _WriteTimer0 *****************
 19306 ;; Defined at:
 19307 ;;		line 17 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/Timers/t0write.c"
 19308 ;; Parameters:    Size  Location     Type
 19309 ;;  timer0          2   13[COMRAM] unsigned int 
 19310 ;; Auto vars:     Size  Location     Type
 19311 ;;  timer           2   15[COMRAM] struct Timers
 19312 ;; Return value:  Size  Location     Type
 19313 ;;		None               void
 19314 ;; Registers used:
 19315 ;;		None
 19316 ;; Tracked objects:
 19317 ;;		On entry : F/0
 19318 ;;		On exit  : F/0
 19319 ;;		Unchanged: F/0
 19320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19321 ;;      Params:         2       0       0       0       0       0       0
 19322 ;;      Locals:         2       0       0       0       0       0       0
 19323 ;;      Temps:          0       0       0       0       0       0       0
 19324 ;;      Totals:         4       0       0       0       0       0       0
 19325 ;;Total ram usage:        4 bytes
 19326 ;; Hardware stack levels used:    1
 19327 ;; Hardware stack levels required when called:    2
 19328 ;; This function calls:
 19329 ;;		Nothing
 19330 ;; This function is called by:
 19331 ;;		_init
 19332 ;; This function uses a non-reentrant model
 19333 ;;
 19334                           
 19335                           	psect	text95
 19336  005730                     __ptext95:
 19337                           	opt stack 0
 19338  005730                     _WriteTimer0:
 19339                           	opt stack 27
 19340                           
 19341                           ; BSR set to: 0
 19342                           
 19343                           ;incstack = 0
 19344                           ;incstack = 0
 19345  005730  C00E  F010         	movff	WriteTimer0@timer0,WriteTimer0@timer
 19346  005734  C00F  F011         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 19347  005738  C011  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 19348  00573C  C010  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 19349                           
 19350                           ; BSR set to: 0
 19351  005740  0012               	return	
 19352  005742                     __end_of_WriteTimer0:
 19353                           	opt stack 0
 19354                           tblptru	equ	0xFF8
 19355                           tblptrh	equ	0xFF7
 19356                           tblptrl	equ	0xFF6
 19357                           tablat	equ	0xFF5
 19358                           prodh	equ	0xFF4
 19359                           prodl	equ	0xFF3
 19360                           intcon	equ	0xFF2
 19361                           postinc0	equ	0xFEE
 19362                           wreg	equ	0xFE8
 19363                           indf1	equ	0xFE7
 19364                           postdec1	equ	0xFE5
 19365                           fsr1h	equ	0xFE2
 19366                           fsr1l	equ	0xFE1
 19367                           indf2	equ	0xFDF
 19368                           postinc2	equ	0xFDE
 19369                           postdec2	equ	0xFDD
 19370                           plusw2	equ	0xFDB
 19371                           fsr2h	equ	0xFDA
 19372                           fsr2l	equ	0xFD9
 19373                           status	equ	0xFD8
 19374                           
 19375 ;; *************** function ___awtofl *****************
 19376 ;; Defined at:
 19377 ;;		line 32 in file "/opt/microchip/xc8/v1.21/sources/common/awtofl.c"
 19378 ;; Parameters:    Size  Location     Type
 19379 ;;  c               2   23[COMRAM] int 
 19380 ;; Auto vars:     Size  Location     Type
 19381 ;;  f1              4    0        int 
 19382 ;;  sign            1   29[COMRAM] unsigned char 
 19383 ;; Return value:  Size  Location     Type
 19384 ;;                  4   23[COMRAM] unsigned char 
 19385 ;; Registers used:
 19386 ;;		wreg, status,2, status,0, cstack
 19387 ;; Tracked objects:
 19388 ;;		On entry : F/0
 19389 ;;		On exit  : 0/0
 19390 ;;		Unchanged: 0/0
 19391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19392 ;;      Params:         4       0       0       0       0       0       0
 19393 ;;      Locals:         3       0       0       0       0       0       0
 19394 ;;      Temps:          0       0       0       0       0       0       0
 19395 ;;      Totals:         7       0       0       0       0       0       0
 19396 ;;Total ram usage:        7 bytes
 19397 ;; Hardware stack levels used:    1
 19398 ;; Hardware stack levels required when called:    3
 19399 ;; This function calls:
 19400 ;;		___flpack
 19401 ;; This function is called by:
 19402 ;;		_setEventData
 19403 ;;		_exp
 19404 ;;		_log
 19405 ;; This function uses a non-reentrant model
 19406 ;;
 19407                           
 19408                           	psect	text96
 19409  0052D8                     __ptext96:
 19410                           	opt stack 0
 19411  0052D8                     ___awtofl:
 19412                           	opt stack 25
 19413                           
 19414                           ; BSR set to: 0
 19415                           
 19416                           ; BSR set to: 0
 19417                           ;incstack = 0
 19418                           ;incstack = 0
 19419  0052D8  6A1E               	clrf	___awtofl@sign,c
 19420  0052DA  AE19               	btfss	___awtofl@c+1,7,c
 19421  0052DC  D005               	goto	l13149
 19422                           
 19423                           ; BSR set to: 0
 19424  0052DE  6C18               	negf	___awtofl@c,c
 19425  0052E0  1E19               	comf	___awtofl@c+1,f,c
 19426  0052E2  B0D8               	btfsc	status,0,c
 19427  0052E4  2A19               	incf	___awtofl@c+1,f,c
 19428  0052E6  2A1E               	incf	___awtofl@sign,f,c
 19429  0052E8                     l13149:
 19430                           
 19431                           ; BSR set to: 0
 19432  0052E8  C018  F00E         	movff	___awtofl@c,?___flpack
 19433  0052EC  C019  F00F         	movff	___awtofl@c+1,?___flpack+1
 19434  0052F0  6A10               	clrf	?___flpack+2,c
 19435  0052F2  6A11               	clrf	?___flpack+3,c
 19436  0052F4  0E96               	movlw	150
 19437  0052F6  6E12               	movwf	?___flpack+4,c
 19438  0052F8  C01E  F013         	movff	___awtofl@sign,?___flpack+5
 19439  0052FC  ECC8  F022         	call	___flpack	;wreg free
 19440  005300  C011  F01B         	movff	?___flpack+3,?___awtofl+3
 19441  005304  C010  F01A         	movff	?___flpack+2,?___awtofl+2
 19442  005308  C00F  F019         	movff	?___flpack+1,?___awtofl+1
 19443  00530C  C00E  F018         	movff	?___flpack,?___awtofl
 19444  005310  0012               	return	
 19445  005312                     __end_of___awtofl:
 19446                           	opt stack 0
 19447                           tblptru	equ	0xFF8
 19448                           tblptrh	equ	0xFF7
 19449                           tblptrl	equ	0xFF6
 19450                           tablat	equ	0xFF5
 19451                           prodh	equ	0xFF4
 19452                           prodl	equ	0xFF3
 19453                           intcon	equ	0xFF2
 19454                           postinc0	equ	0xFEE
 19455                           wreg	equ	0xFE8
 19456                           indf1	equ	0xFE7
 19457                           postdec1	equ	0xFE5
 19458                           fsr1h	equ	0xFE2
 19459                           fsr1l	equ	0xFE1
 19460                           indf2	equ	0xFDF
 19461                           postinc2	equ	0xFDE
 19462                           postdec2	equ	0xFDD
 19463                           plusw2	equ	0xFDB
 19464                           fsr2h	equ	0xFDA
 19465                           fsr2l	equ	0xFD9
 19466                           status	equ	0xFD8
 19467                           
 19468 ;; *************** function ___flmul *****************
 19469 ;; Defined at:
 19470 ;;		line 51 in file "/opt/microchip/xc8/v1.21/sources/common/flmul.c"
 19471 ;; Parameters:    Size  Location     Type
 19472 ;;  f1              4    0[BANK0 ] unsigned char 
 19473 ;;  f2              4    4[BANK0 ] unsigned char 
 19474 ;; Auto vars:     Size  Location     Type
 19475 ;;  f3_as_produc    4   16[BANK0 ] unsigned long 
 19476 ;;  sign            1   21[BANK0 ] unsigned char 
 19477 ;;  cntr            1   20[BANK0 ] unsigned char 
 19478 ;;  exp             1   15[BANK0 ] unsigned char 
 19479 ;; Return value:  Size  Location     Type
 19480 ;;                  4    0[BANK0 ] unsigned char 
 19481 ;; Registers used:
 19482 ;;		wreg, status,2, status,0, cstack
 19483 ;; Tracked objects:
 19484 ;;		On entry : 0/0
 19485 ;;		On exit  : 0/0
 19486 ;;		Unchanged: 0/0
 19487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19488 ;;      Params:         0       8       0       0       0       0       0
 19489 ;;      Locals:         0      14       0       0       0       0       0
 19490 ;;      Temps:          0       0       0       0       0       0       0
 19491 ;;      Totals:         0      22       0       0       0       0       0
 19492 ;;Total ram usage:       22 bytes
 19493 ;; Hardware stack levels used:    1
 19494 ;; Hardware stack levels required when called:    3
 19495 ;; This function calls:
 19496 ;;		___flpack
 19497 ;; This function is called by:
 19498 ;;		_doWork
 19499 ;;		_Celsius2Fahrenheit
 19500 ;;		___asflmul
 19501 ;;		_log
 19502 ;;		_eval_poly
 19503 ;; This function uses a non-reentrant model
 19504 ;;
 19505                           
 19506                           	psect	text97
 19507  004350                     __ptext97:
 19508                           	opt stack 0
 19509  004350                     ___flmul:
 19510                           	opt stack 26
 19511                           
 19512                           ;incstack = 0
 19513                           ;incstack = 0
 19514  004350  0100               	movlb	0	; () banked
 19515  004352  3562               	rlcf	(___flmul@f1+2)& (0+255),w,b
 19516  004354  3563               	rlcf	(___flmul@f1+3)& (0+255),w,b
 19517  004356  6F6F               	movwf	___flmul@exp& (0+255),b
 19518  004358  676F               	tstfsz	___flmul@exp& (0+255),b
 19519  00435A  D001               	goto	l13093
 19520  00435C  D006               	goto	u10070
 19521  00435E                     l13093:
 19522                           
 19523                           ; BSR set to: 0
 19524  00435E  0100               	movlb	0	; () banked
 19525  004360  3566               	rlcf	(___flmul@f2+2)& (0+255),w,b
 19526  004362  3567               	rlcf	(___flmul@f2+3)& (0+255),w,b
 19527  004364  6F75               	movwf	___flmul@sign& (0+255),b
 19528  004366  6775               	tstfsz	___flmul@sign& (0+255),b
 19529  004368  D005               	goto	l13097
 19530  00436A                     u10070:
 19531                           
 19532                           ; BSR set to: 0
 19533  00436A  6B60               	clrf	?___flmul& (0+255),b
 19534  00436C  6B61               	clrf	(?___flmul+1)& (0+255),b
 19535  00436E  6B62               	clrf	(?___flmul+2)& (0+255),b
 19536  004370  6B63               	clrf	(?___flmul+3)& (0+255),b
 19537  004372  D041               	goto	l1639
 19538  004374                     l13097:
 19539                           
 19540                           ; BSR set to: 0
 19541  004374  5175               	movf	___flmul@sign& (0+255),w,b
 19542  004376  0F7B               	addlw	123
 19543  004378  276F               	addwf	___flmul@exp& (0+255),f,b
 19544                           
 19545                           ; BSR set to: 0
 19546  00437A  C063  F075         	movff	___flmul@f1+3,___flmul@sign
 19547  00437E  0100               	movlb	0	; () banked
 19548  004380  5167               	movf	(___flmul@f2+3)& (0+255),w,b
 19549  004382  1B75               	xorwf	___flmul@sign& (0+255),f,b
 19550  004384  0E80               	movlw	128
 19551  004386  1775               	andwf	___flmul@sign& (0+255),f,b
 19552                           
 19553                           ; BSR set to: 0
 19554  004388  8F62               	bsf	(___flmul@f1+2)& (0+255),7,b
 19555                           
 19556                           ; BSR set to: 0
 19557  00438A  8F66               	bsf	(___flmul@f2+2)& (0+255),7,b
 19558  00438C  6B67               	clrf	(___flmul@f2+3)& (0+255),b
 19559                           
 19560                           ; BSR set to: 0
 19561  00438E  6B70               	clrf	___flmul@f3_as_product& (0+255),b
 19562  004390  6B71               	clrf	(___flmul@f3_as_product+1)& (0+255),b
 19563  004392  6B72               	clrf	(___flmul@f3_as_product+2)& (0+255),b
 19564  004394  6B73               	clrf	(___flmul@f3_as_product+3)& (0+255),b
 19565                           
 19566                           ; BSR set to: 0
 19567  004396  0E07               	movlw	7
 19568  004398  6F74               	movwf	___flmul@cntr& (0+255),b
 19569  00439A                     l13109:
 19570                           
 19571                           ; BSR set to: 0
 19572  00439A  A160               	btfss	___flmul@f1& (0+255),0,b
 19573  00439C  D002               	goto	l13113
 19574                           
 19575                           ; BSR set to: 0
 19576  00439E  5164               	movf	___flmul@f2& (0+255),w,b
 19577  0043A0  D82B               	call	PL62	;call to abstracted procedure
 19578  0043A2                     l13113:
 19579                           
 19580                           ; BSR set to: 0
 19581                           
 19582                           ; BSR set to: 0
 19583  0043A2  D832               	call	PL66	;call to abstracted procedure
 19584  0043A4  3764               	rlcf	___flmul@f2& (0+255),f,b
 19585  0043A6  3765               	rlcf	(___flmul@f2+1)& (0+255),f,b
 19586  0043A8  3766               	rlcf	(___flmul@f2+2)& (0+255),f,b
 19587  0043AA  3767               	rlcf	(___flmul@f2+3)& (0+255),f,b
 19588                           
 19589                           ; BSR set to: 0
 19590  0043AC  2F74               	decfsz	___flmul@cntr& (0+255),f,b
 19591  0043AE  D7F5               	goto	l13109
 19592                           
 19593                           ; BSR set to: 0
 19594  0043B0  0E11               	movlw	17
 19595  0043B2  6F74               	movwf	___flmul@cntr& (0+255),b
 19596  0043B4                     l13121:
 19597                           
 19598                           ; BSR set to: 0
 19599  0043B4  A160               	btfss	___flmul@f1& (0+255),0,b
 19600  0043B6  D002               	goto	l13125
 19601                           
 19602                           ; BSR set to: 0
 19603  0043B8  5164               	movf	___flmul@f2& (0+255),w,b
 19604  0043BA  D81E               	call	PL62	;call to abstracted procedure
 19605  0043BC                     l13125:
 19606                           
 19607                           ; BSR set to: 0
 19608                           
 19609                           ; BSR set to: 0
 19610  0043BC  D825               	call	PL66	;call to abstracted procedure
 19611  0043BE  3373               	rrcf	(___flmul@f3_as_product+3)& (0+255),f,b
 19612  0043C0  3372               	rrcf	(___flmul@f3_as_product+2)& (0+255),f,b
 19613  0043C2  3371               	rrcf	(___flmul@f3_as_product+1)& (0+255),f,b
 19614  0043C4  3370               	rrcf	___flmul@f3_as_product& (0+255),f,b
 19615                           
 19616                           ; BSR set to: 0
 19617  0043C6  2F74               	decfsz	___flmul@cntr& (0+255),f,b
 19618  0043C8  D7F5               	goto	l13121
 19619                           
 19620                           ; BSR set to: 0
 19621  0043CA  C070  F00E         	movff	___flmul@f3_as_product,?___flpack
 19622  0043CE  C071  F00F         	movff	___flmul@f3_as_product+1,?___flpack+1
 19623  0043D2  C072  F010         	movff	___flmul@f3_as_product+2,?___flpack+2
 19624  0043D6  C073  F011         	movff	___flmul@f3_as_product+3,?___flpack+3
 19625  0043DA  C06F  F012         	movff	___flmul@exp,?___flpack+4
 19626  0043DE  C075  F013         	movff	___flmul@sign,?___flpack+5
 19627  0043E2  ECC8  F022         	call	___flpack	;wreg free
 19628  0043E6  C011  F063         	movff	?___flpack+3,?___flmul+3
 19629  0043EA  C010  F062         	movff	?___flpack+2,?___flmul+2
 19630  0043EE  C00F  F061         	movff	?___flpack+1,?___flmul+1
 19631  0043F2  C00E  F060         	movff	?___flpack,?___flmul
 19632  0043F6                     l1639:
 19633  0043F6  0012               	return	
 19634  0043F8                     __end_of___flmul:
 19635                           	opt stack 0
 19636  0043F8                     PL62:
 19637                           	opt stack 26
 19638  0043F8  2770               	addwf	___flmul@f3_as_product& (0+255),f,b
 19639  0043FA  5165               	movf	(___flmul@f2+1)& (0+255),w,b
 19640  0043FC  2371               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
 19641  0043FE  5166               	movf	(___flmul@f2+2)& (0+255),w,b
 19642  004400  2372               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
 19643  004402  5167               	movf	(___flmul@f2+3)& (0+255),w,b
 19644  004404  2373               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
 19645  004406  0012               	return	
 19646  004408                     __end_ofPL62:
 19647                           	opt stack 0
 19648  004408                     PL66:
 19649                           	opt stack 26
 19650  004408  90D8               	bcf	status,0,c
 19651  00440A  3363               	rrcf	(___flmul@f1+3)& (0+255),f,b
 19652  00440C  3362               	rrcf	(___flmul@f1+2)& (0+255),f,b
 19653  00440E  3361               	rrcf	(___flmul@f1+1)& (0+255),f,b
 19654  004410  3360               	rrcf	___flmul@f1& (0+255),f,b
 19655  004412  90D8               	bcf	status,0,c
 19656  004414  0012               	return	
 19657  004416                     __end_ofPL66:
 19658                           	opt stack 0
 19659                           tblptru	equ	0xFF8
 19660                           tblptrh	equ	0xFF7
 19661                           tblptrl	equ	0xFF6
 19662                           tablat	equ	0xFF5
 19663                           prodh	equ	0xFF4
 19664                           prodl	equ	0xFF3
 19665                           intcon	equ	0xFF2
 19666                           postinc0	equ	0xFEE
 19667                           wreg	equ	0xFE8
 19668                           indf1	equ	0xFE7
 19669                           postdec1	equ	0xFE5
 19670                           fsr1h	equ	0xFE2
 19671                           fsr1l	equ	0xFE1
 19672                           indf2	equ	0xFDF
 19673                           postinc2	equ	0xFDE
 19674                           postdec2	equ	0xFDD
 19675                           plusw2	equ	0xFDB
 19676                           fsr2h	equ	0xFDA
 19677                           fsr2l	equ	0xFD9
 19678                           status	equ	0xFD8
 19679                           
 19680 ;; *************** function ___flpack *****************
 19681 ;; Defined at:
 19682 ;;		line 64 in file "/opt/microchip/xc8/v1.21/sources/common/double.c"
 19683 ;; Parameters:    Size  Location     Type
 19684 ;;  arg             4   13[COMRAM] unsigned long 
 19685 ;;  exp             1   17[COMRAM] unsigned char 
 19686 ;;  sign            1   18[COMRAM] unsigned char 
 19687 ;; Auto vars:     Size  Location     Type
 19688 ;;		None
 19689 ;; Return value:  Size  Location     Type
 19690 ;;                  4   13[COMRAM] unsigned char 
 19691 ;; Registers used:
 19692 ;;		wreg, status,2, status,0
 19693 ;; Tracked objects:
 19694 ;;		On entry : 0/0
 19695 ;;		On exit  : 0/0
 19696 ;;		Unchanged: 0/0
 19697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19698 ;;      Params:         6       0       0       0       0       0       0
 19699 ;;      Locals:         0       0       0       0       0       0       0
 19700 ;;      Temps:          4       0       0       0       0       0       0
 19701 ;;      Totals:        10       0       0       0       0       0       0
 19702 ;;Total ram usage:       10 bytes
 19703 ;; Hardware stack levels used:    1
 19704 ;; Hardware stack levels required when called:    2
 19705 ;; This function calls:
 19706 ;;		Nothing
 19707 ;; This function is called by:
 19708 ;;		___altofl
 19709 ;;		___awtofl
 19710 ;;		___fladd
 19711 ;;		___fldiv
 19712 ;;		___flmul
 19713 ;;		___lwtofl
 19714 ;; This function uses a non-reentrant model
 19715 ;;
 19716                           
 19717                           	psect	text98
 19718  004590                     __ptext98:
 19719                           	opt stack 0
 19720  004590                     ___flpack:
 19721                           	opt stack 26
 19722                           
 19723                           ;incstack = 0
 19724                           ;incstack = 0
 19725  004590  5012               	movf	___flpack@exp,w,c
 19726  004592  E005               	bz	l1554
 19727  004594  5011               	movf	___flpack@arg+3,w,c
 19728  004596  100E               	iorwf	___flpack@arg,w,c
 19729  004598  100F               	iorwf	___flpack@arg+1,w,c
 19730  00459A  1010               	iorwf	___flpack@arg+2,w,c
 19731  00459C  E107               	bnz	l12899
 19732  00459E                     l1554:
 19733  00459E  6A0E               	clrf	?___flpack,c
 19734  0045A0  6A0F               	clrf	?___flpack+1,c
 19735  0045A2  6A10               	clrf	?___flpack+2,c
 19736  0045A4  6A11               	clrf	?___flpack+3,c
 19737  0045A6  D04B               	goto	l1555
 19738  0045A8                     l12897:
 19739  0045A8  2A12               	incf	___flpack@exp,f,c
 19740  0045AA  D84A               	call	PL82	;call to abstracted procedure
 19741  0045AC                     l12899:
 19742  0045AC  6A14               	clrf	??___flpack& (0+255),c
 19743  0045AE  6A15               	clrf	(??___flpack+1)& (0+255),c
 19744  0045B0  6A16               	clrf	(??___flpack+2)& (0+255),c
 19745  0045B2  0EFE               	movlw	254
 19746  0045B4  1411               	andwf	___flpack@arg+3,w,c
 19747  0045B6  6E17               	movwf	(??___flpack+3)& (0+255),c
 19748  0045B8  5017               	movf	??___flpack+3,w,c
 19749  0045BA  1014               	iorwf	??___flpack,w,c
 19750  0045BC  1015               	iorwf	??___flpack+1,w,c
 19751  0045BE  1016               	iorwf	??___flpack+2,w,c
 19752  0045C0  E008               	bz	l1559
 19753  0045C2  D7F2               	goto	l12897
 19754  0045C4                     l12901:
 19755  0045C4  2A12               	incf	___flpack@exp,f,c
 19756  0045C6  2A0E               	incf	___flpack@arg,f,c
 19757  0045C8  0E00               	movlw	0
 19758  0045CA  220F               	addwfc	___flpack@arg+1,f,c
 19759  0045CC  2210               	addwfc	___flpack@arg+2,f,c
 19760  0045CE  2211               	addwfc	___flpack@arg+3,f,c
 19761  0045D0  D837               	call	PL82	;call to abstracted procedure
 19762  0045D2                     l1559:
 19763  0045D2  6A14               	clrf	??___flpack& (0+255),c
 19764  0045D4  6A15               	clrf	(??___flpack+1)& (0+255),c
 19765  0045D6  6A16               	clrf	(??___flpack+2)& (0+255),c
 19766  0045D8  5011               	movf	___flpack@arg+3,w,c
 19767  0045DA  6E17               	movwf	(??___flpack+3)& (0+255),c
 19768  0045DC  5017               	movf	??___flpack+3,w,c
 19769  0045DE  1014               	iorwf	??___flpack,w,c
 19770  0045E0  1015               	iorwf	??___flpack+1,w,c
 19771  0045E2  1016               	iorwf	??___flpack+2,w,c
 19772  0045E4  E007               	bz	l12909
 19773  0045E6  D7EE               	goto	l12901
 19774  0045E8                     l12907:
 19775  0045E8  0612               	decf	___flpack@exp,f,c
 19776  0045EA  90D8               	bcf	status,0,c
 19777  0045EC  360E               	rlcf	___flpack@arg,f,c
 19778  0045EE  360F               	rlcf	___flpack@arg+1,f,c
 19779  0045F0  3610               	rlcf	___flpack@arg+2,f,c
 19780  0045F2  3611               	rlcf	___flpack@arg+3,f,c
 19781  0045F4                     l12909:
 19782  0045F4  AE10               	btfss	___flpack@arg+2,7,c
 19783  0045F6  D7F8               	goto	l12907
 19784  0045F8  B012               	btfsc	___flpack@exp,0,c
 19785  0045FA  D002               	goto	l1565
 19786  0045FC  0E7F               	movlw	127
 19787  0045FE  1610               	andwf	___flpack@arg+2,f,c
 19788  004600                     l1565:
 19789  004600  90D8               	bcf	status,0,c
 19790  004602  3212               	rrcf	___flpack@exp,f,c
 19791  004604  C012  F014         	movff	___flpack@exp,??___flpack
 19792  004608  6A15               	clrf	(??___flpack+1)& (0+255),c
 19793  00460A  6A16               	clrf	(??___flpack+2)& (0+255),c
 19794  00460C  6A17               	clrf	(??___flpack+3)& (0+255),c
 19795  00460E  C014  F017         	movff	??___flpack,??___flpack+3
 19796  004612  6A16               	clrf	??___flpack+2,c
 19797  004614  6A15               	clrf	??___flpack+1,c
 19798  004616  6A14               	clrf	??___flpack,c
 19799  004618  5014               	movf	??___flpack,w,c
 19800  00461A  120E               	iorwf	___flpack@arg,f,c
 19801  00461C  5015               	movf	??___flpack+1,w,c
 19802  00461E  120F               	iorwf	___flpack@arg+1,f,c
 19803  004620  5016               	movf	??___flpack+2,w,c
 19804  004622  1210               	iorwf	___flpack@arg+2,f,c
 19805  004624  5017               	movf	??___flpack+3,w,c
 19806  004626  1211               	iorwf	___flpack@arg+3,f,c
 19807  004628  5013               	movf	___flpack@sign,w,c
 19808  00462A  A4D8               	btfss	status,2,c
 19809  00462C  8E11               	bsf	___flpack@arg+3,7,c
 19810  00462E  C00E  F00E         	movff	___flpack@arg,?___flpack
 19811  004632  C00F  F00F         	movff	___flpack@arg+1,?___flpack+1
 19812  004636  C010  F010         	movff	___flpack@arg+2,?___flpack+2
 19813  00463A  C011  F011         	movff	___flpack@arg+3,?___flpack+3
 19814  00463E                     l1555:
 19815  00463E  0012               	return	
 19816  004640                     __end_of___flpack:
 19817                           	opt stack 0
 19818  004640                     PL82:
 19819                           	opt stack 26
 19820  004640  90D8               	bcf	status,0,c
 19821  004642  3211               	rrcf	___flpack@arg+3,f,c
 19822  004644  3210               	rrcf	___flpack@arg+2,f,c
 19823  004646  320F               	rrcf	___flpack@arg+1,f,c
 19824  004648  320E               	rrcf	___flpack@arg,f,c
 19825  00464A  0012               	return	
 19826  00464C                     __end_ofPL82:
 19827                           	opt stack 0
 19828                           tblptru	equ	0xFF8
 19829                           tblptrh	equ	0xFF7
 19830                           tblptrl	equ	0xFF6
 19831                           tablat	equ	0xFF5
 19832                           prodh	equ	0xFF4
 19833                           prodl	equ	0xFF3
 19834                           intcon	equ	0xFF2
 19835                           postinc0	equ	0xFEE
 19836                           wreg	equ	0xFE8
 19837                           indf1	equ	0xFE7
 19838                           postdec1	equ	0xFE5
 19839                           fsr1h	equ	0xFE2
 19840                           fsr1l	equ	0xFE1
 19841                           indf2	equ	0xFDF
 19842                           postinc2	equ	0xFDE
 19843                           postdec2	equ	0xFDD
 19844                           plusw2	equ	0xFDB
 19845                           fsr2h	equ	0xFDA
 19846                           fsr2l	equ	0xFD9
 19847                           status	equ	0xFD8
 19848                           
 19849 ;; *************** function _vscp_readAppReg *****************
 19850 ;; Defined at:
 19851 ;;		line 1327 in file "../main.c"
 19852 ;; Parameters:    Size  Location     Type
 19853 ;;  reg             1    wreg     unsigned char 
 19854 ;; Auto vars:     Size  Location     Type
 19855 ;;  reg             1   24[COMRAM] unsigned char 
 19856 ;;  pos             1   23[COMRAM] unsigned char 
 19857 ;;  rv              1   25[COMRAM] unsigned char 
 19858 ;; Return value:  Size  Location     Type
 19859 ;;                  1    wreg      unsigned char 
 19860 ;; Registers used:
 19861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19862 ;; Tracked objects:
 19863 ;;		On entry : F/0
 19864 ;;		On exit  : 0/0
 19865 ;;		Unchanged: 0/0
 19866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19867 ;;      Params:         0       0       0       0       0       0       0
 19868 ;;      Locals:         3       0       0       0       0       0       0
 19869 ;;      Temps:          0       0       0       0       0       0       0
 19870 ;;      Totals:         3       0       0       0       0       0       0
 19871 ;;Total ram usage:        3 bytes
 19872 ;; Hardware stack levels used:    1
 19873 ;; Hardware stack levels required when called:    3
 19874 ;; This function calls:
 19875 ;;		_Read_b_eep
 19876 ;; This function is called by:
 19877 ;;		_vscp_readRegister
 19878 ;;		_vscp_handleProtocolEvent
 19879 ;; This function uses a non-reentrant model
 19880 ;;
 19881                           
 19882                           	psect	text99
 19883  00150E                     __ptext99:
 19884                           	opt stack 0
 19885  00150E                     _vscp_readAppReg:
 19886                           	opt stack 25
 19887                           
 19888                           ;incstack = 0
 19889                           ;incstack = 0
 19890                           ;vscp_readAppReg@reg stored from wreg
 19891  00150E  CFE8 F019          	movff	wreg,vscp_readAppReg@reg
 19892                           
 19893                           ; BSR set to: 0
 19894                           ;main.c: 1328: uint8_t rv;
 19895                           ;main.c: 1333: if (0 == vscp_page_select) {
 19896  001512  5047               	movf	_vscp_page_select+1,w,c
 19897  001514  1046               	iorwf	_vscp_page_select,w,c
 19898  001516  E101 D25B          	bz	l11871
 19899  00151A  D39F               	goto	l11873
 19900  00151C                     l11669:
 19901                           
 19902                           ; BSR set to: 0
 19903                           ;main.c: 1339: rv = Read_b_eep(0x41);
 19904  00151C  6A17               	clrf	?_Read_b_eep+1,c
 19905  00151E  0E41               	movlw	65
 19906  001520  6E16               	movwf	?_Read_b_eep,c
 19907  001522  EC8F  F02B         	call	_Read_b_eep	;wreg free
 19908  001526  D3C6               	goto	L53
 19909  001528                     l11671:
 19910                           
 19911                           ; BSR set to: 0
 19912                           ;main.c: 1344: rv = Read_b_eep(0x42);
 19913  001528  6A17               	clrf	?_Read_b_eep+1,c
 19914  00152A  0E42               	movlw	66
 19915  00152C  6E16               	movwf	?_Read_b_eep,c
 19916  00152E  EC8F  F02B         	call	_Read_b_eep	;wreg free
 19917  001532  D3C0               	goto	L53
 19918  001534                     l11673:
 19919                           
 19920                           ; BSR set to: 0
 19921                           ;main.c: 1349: rv = Read_b_eep(0x43);
 19922  001534  6A17               	clrf	?_Read_b_eep+1,c
 19923  001536  0E43               	movlw	67
 19924  001538  6E16               	movwf	?_Read_b_eep,c
 19925  00153A  EC8F  F02B         	call	_Read_b_eep	;wreg free
 19926  00153E  D3BA               	goto	L53
 19927  001540                     l11675:
 19928                           
 19929                           ; BSR set to: 0
 19930                           ;main.c: 1354: rv = Read_b_eep(0x44);
 19931  001540  6A17               	clrf	?_Read_b_eep+1,c
 19932  001542  0E44               	movlw	68
 19933  001544  6E16               	movwf	?_Read_b_eep,c
 19934  001546  EC8F  F02B         	call	_Read_b_eep	;wreg free
 19935  00154A  D3B4               	goto	L53
 19936  00154C                     l11677:
 19937                           
 19938                           ; BSR set to: 0
 19939                           ;main.c: 1359: rv = Read_b_eep(0x45);
 19940  00154C  6A17               	clrf	?_Read_b_eep+1,c
 19941  00154E  0E45               	movlw	69
 19942  001550  6E16               	movwf	?_Read_b_eep,c
 19943  001552  EC8F  F02B         	call	_Read_b_eep	;wreg free
 19944  001556  D3AE               	goto	L53
 19945  001558                     l11679:
 19946                           
 19947                           ; BSR set to: 0
 19948                           ;main.c: 1364: rv = Read_b_eep(0x46);
 19949  001558  6A17               	clrf	?_Read_b_eep+1,c
 19950  00155A  0E46               	movlw	70
 19951  00155C  6E16               	movwf	?_Read_b_eep,c
 19952  00155E  EC8F  F02B         	call	_Read_b_eep	;wreg free
 19953  001562  D3A8               	goto	L53
 19954  001564                     l11681:
 19955                           
 19956                           ; BSR set to: 0
 19957                           ;main.c: 1369: rv = Read_b_eep(0x47);
 19958  001564  6A17               	clrf	?_Read_b_eep+1,c
 19959  001566  0E47               	movlw	71
 19960  001568  6E16               	movwf	?_Read_b_eep,c
 19961  00156A  EC8F  F02B         	call	_Read_b_eep	;wreg free
 19962  00156E  D3A2               	goto	L53
 19963  001570                     l11683:
 19964                           
 19965                           ; BSR set to: 0
 19966                           ;main.c: 1374: rv = Read_b_eep(0x48);
 19967  001570  6A17               	clrf	?_Read_b_eep+1,c
 19968  001572  0E48               	movlw	72
 19969  001574  6E16               	movwf	?_Read_b_eep,c
 19970  001576  EC8F  F02B         	call	_Read_b_eep	;wreg free
 19971  00157A  D39C               	goto	L53
 19972  00157C                     l11685:
 19973                           
 19974                           ; BSR set to: 0
 19975                           ;main.c: 1379: rv = ((current_temp[0] & 0xff00) >> 8);
 19976  00157C  0101               	movlb	1	; () banked
 19977  00157E  5101               	movf	(_current_temp+1)& (0+255),w,b
 19978  001580  D399               	goto	L53
 19979  001582                     l316:
 19980                           
 19981                           ; BSR set to: 0
 19982                           ;main.c: 1384: rv = (current_temp[0] & 0x00ff);
 19983  001582  C100  F01A         	movff	_current_temp,vscp_readAppReg@rv
 19984                           
 19985                           ;main.c: 1385: break;
 19986  001586  D397               	goto	l11895
 19987  001588                     l11687:
 19988                           
 19989                           ; BSR set to: 0
 19990                           ;main.c: 1389: rv = ((current_temp[1] & 0xff00) >> 8);
 19991  001588  0101               	movlb	1	; () banked
 19992  00158A  5103               	movf	(_current_temp+3)& (0+255),w,b
 19993  00158C  D393               	goto	L53
 19994  00158E                     l318:
 19995                           
 19996                           ; BSR set to: 0
 19997                           ;main.c: 1394: rv = (current_temp[1] & 0x00ff);
 19998  00158E  C102  F01A         	movff	_current_temp+2,vscp_readAppReg@rv
 19999                           
 20000                           ;main.c: 1395: break;
 20001  001592  D391               	goto	l11895
 20002  001594                     l11689:
 20003                           
 20004                           ; BSR set to: 0
 20005                           ;main.c: 1399: rv = ((current_temp[2] & 0xff00) >> 8);
 20006  001594  0101               	movlb	1	; () banked
 20007  001596  5105               	movf	(_current_temp+5)& (0+255),w,b
 20008  001598  D38D               	goto	L53
 20009  00159A                     l320:
 20010                           
 20011                           ; BSR set to: 0
 20012                           ;main.c: 1404: rv = (current_temp[2] & 0x00ff);
 20013  00159A  C104  F01A         	movff	_current_temp+4,vscp_readAppReg@rv
 20014                           
 20015                           ;main.c: 1405: break;
 20016  00159E  D38B               	goto	l11895
 20017  0015A0                     l11691:
 20018                           
 20019                           ; BSR set to: 0
 20020                           ;main.c: 1409: rv = ((current_temp[3] & 0xff00) >> 8);
 20021  0015A0  0101               	movlb	1	; () banked
 20022  0015A2  5107               	movf	(_current_temp+7)& (0+255),w,b
 20023  0015A4  D387               	goto	L53
 20024  0015A6                     l322:
 20025                           
 20026                           ; BSR set to: 0
 20027                           ;main.c: 1414: rv = (current_temp[3] & 0x00ff);
 20028  0015A6  C106  F01A         	movff	_current_temp+6,vscp_readAppReg@rv
 20029                           
 20030                           ;main.c: 1415: break;
 20031  0015AA  D385               	goto	l11895
 20032  0015AC                     l11693:
 20033                           
 20034                           ; BSR set to: 0
 20035                           ;main.c: 1419: rv = ((current_temp[4] & 0xff00) >> 8);
 20036  0015AC  0101               	movlb	1	; () banked
 20037  0015AE  5109               	movf	(_current_temp+9)& (0+255),w,b
 20038  0015B0  D381               	goto	L53
 20039  0015B2                     l324:
 20040                           
 20041                           ; BSR set to: 0
 20042                           ;main.c: 1424: rv = (current_temp[4] & 0x00ff);
 20043  0015B2  C108  F01A         	movff	_current_temp+8,vscp_readAppReg@rv
 20044                           
 20045                           ;main.c: 1425: break;
 20046  0015B6  D37F               	goto	l11895
 20047  0015B8                     l11695:
 20048                           
 20049                           ; BSR set to: 0
 20050                           ;main.c: 1429: rv = ((current_temp[5] & 0xff00) >> 8);
 20051  0015B8  0101               	movlb	1	; () banked
 20052  0015BA  510B               	movf	(_current_temp+11)& (0+255),w,b
 20053  0015BC  D37B               	goto	L53
 20054  0015BE                     l326:
 20055                           
 20056                           ; BSR set to: 0
 20057                           ;main.c: 1434: rv = (current_temp[5] & 0x00ff);
 20058  0015BE  C10A  F01A         	movff	_current_temp+10,vscp_readAppReg@rv
 20059                           
 20060                           ;main.c: 1435: break;
 20061  0015C2  D379               	goto	l11895
 20062  0015C4                     l11697:
 20063                           
 20064                           ; BSR set to: 0
 20065                           ;main.c: 1439: rv = Read_b_eep(0x49);
 20066  0015C4  6A17               	clrf	?_Read_b_eep+1,c
 20067  0015C6  0E49               	movlw	73
 20068  0015C8  6E16               	movwf	?_Read_b_eep,c
 20069  0015CA  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20070  0015CE  D372               	goto	L53
 20071  0015D0                     l11699:
 20072                           
 20073                           ; BSR set to: 0
 20074                           ;main.c: 1444: rv = Read_b_eep(0x4A);
 20075  0015D0  6A17               	clrf	?_Read_b_eep+1,c
 20076  0015D2  0E4A               	movlw	74
 20077  0015D4  6E16               	movwf	?_Read_b_eep,c
 20078  0015D6  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20079  0015DA  D36C               	goto	L53
 20080  0015DC                     l11701:
 20081                           
 20082                           ; BSR set to: 0
 20083                           ;main.c: 1449: rv = Read_b_eep(0x4B);
 20084  0015DC  6A17               	clrf	?_Read_b_eep+1,c
 20085  0015DE  0E4B               	movlw	75
 20086  0015E0  6E16               	movwf	?_Read_b_eep,c
 20087  0015E2  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20088  0015E6  D366               	goto	L53
 20089  0015E8                     l11703:
 20090                           
 20091                           ; BSR set to: 0
 20092                           ;main.c: 1454: rv = Read_b_eep(0x4C);
 20093  0015E8  6A17               	clrf	?_Read_b_eep+1,c
 20094  0015EA  0E4C               	movlw	76
 20095  0015EC  6E16               	movwf	?_Read_b_eep,c
 20096  0015EE  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20097  0015F2  D360               	goto	L53
 20098  0015F4                     l11705:
 20099                           
 20100                           ; BSR set to: 0
 20101                           ;main.c: 1459: rv = Read_b_eep(0x4D);
 20102  0015F4  6A17               	clrf	?_Read_b_eep+1,c
 20103  0015F6  0E4D               	movlw	77
 20104  0015F8  6E16               	movwf	?_Read_b_eep,c
 20105  0015FA  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20106  0015FE  D35A               	goto	L53
 20107  001600                     l11707:
 20108                           
 20109                           ; BSR set to: 0
 20110                           ;main.c: 1464: rv = Read_b_eep(0x4E);
 20111  001600  6A17               	clrf	?_Read_b_eep+1,c
 20112  001602  0E4E               	movlw	78
 20113  001604  6E16               	movwf	?_Read_b_eep,c
 20114  001606  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20115  00160A  D354               	goto	L53
 20116  00160C                     l11709:
 20117                           
 20118                           ; BSR set to: 0
 20119                           ;main.c: 1471: rv = Read_b_eep(0x4F);
 20120  00160C  6A17               	clrf	?_Read_b_eep+1,c
 20121  00160E  0E4F               	movlw	79
 20122  001610  6E16               	movwf	?_Read_b_eep,c
 20123  001612  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20124  001616  D34E               	goto	L53
 20125  001618                     l11711:
 20126                           
 20127                           ; BSR set to: 0
 20128                           ;main.c: 1476: rv = Read_b_eep(0x50);
 20129  001618  6A17               	clrf	?_Read_b_eep+1,c
 20130  00161A  0E50               	movlw	80
 20131  00161C  6E16               	movwf	?_Read_b_eep,c
 20132  00161E  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20133  001622  D348               	goto	L53
 20134  001624                     l11713:
 20135                           
 20136                           ; BSR set to: 0
 20137                           ;main.c: 1481: rv = Read_b_eep(0x51);
 20138  001624  6A17               	clrf	?_Read_b_eep+1,c
 20139  001626  0E51               	movlw	81
 20140  001628  6E16               	movwf	?_Read_b_eep,c
 20141  00162A  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20142  00162E  D342               	goto	L53
 20143  001630                     l11715:
 20144                           
 20145                           ; BSR set to: 0
 20146                           ;main.c: 1486: rv = Read_b_eep(0x52);
 20147  001630  6A17               	clrf	?_Read_b_eep+1,c
 20148  001632  0E52               	movlw	82
 20149  001634  6E16               	movwf	?_Read_b_eep,c
 20150  001636  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20151  00163A  D33C               	goto	L53
 20152  00163C                     l11717:
 20153                           
 20154                           ; BSR set to: 0
 20155                           ;main.c: 1491: rv = Read_b_eep(0x53);
 20156  00163C  6A17               	clrf	?_Read_b_eep+1,c
 20157  00163E  0E53               	movlw	83
 20158  001640  6E16               	movwf	?_Read_b_eep,c
 20159  001642  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20160  001646  D336               	goto	L53
 20161  001648                     l11719:
 20162                           
 20163                           ; BSR set to: 0
 20164                           ;main.c: 1496: rv = Read_b_eep(0x54);
 20165  001648  6A17               	clrf	?_Read_b_eep+1,c
 20166  00164A  0E54               	movlw	84
 20167  00164C  6E16               	movwf	?_Read_b_eep,c
 20168  00164E  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20169  001652  D330               	goto	L53
 20170  001654                     l11721:
 20171                           
 20172                           ; BSR set to: 0
 20173                           ;main.c: 1501: rv = Read_b_eep(0x55);
 20174  001654  6A17               	clrf	?_Read_b_eep+1,c
 20175  001656  0E55               	movlw	85
 20176  001658  6E16               	movwf	?_Read_b_eep,c
 20177  00165A  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20178  00165E  D32A               	goto	L53
 20179  001660                     l11723:
 20180                           
 20181                           ; BSR set to: 0
 20182                           ;main.c: 1506: rv = Read_b_eep(0x56);
 20183  001660  6A17               	clrf	?_Read_b_eep+1,c
 20184  001662  0E56               	movlw	86
 20185  001664  6E16               	movwf	?_Read_b_eep,c
 20186  001666  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20187  00166A  D324               	goto	L53
 20188  00166C                     l11725:
 20189                           
 20190                           ; BSR set to: 0
 20191                           ;main.c: 1511: rv = Read_b_eep(0x57);
 20192  00166C  6A17               	clrf	?_Read_b_eep+1,c
 20193  00166E  0E57               	movlw	87
 20194  001670  6E16               	movwf	?_Read_b_eep,c
 20195  001672  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20196  001676  D31E               	goto	L53
 20197  001678                     l11727:
 20198                           
 20199                           ; BSR set to: 0
 20200                           ;main.c: 1516: rv = Read_b_eep(0x58);
 20201  001678  6A17               	clrf	?_Read_b_eep+1,c
 20202  00167A  0E58               	movlw	88
 20203  00167C  6E16               	movwf	?_Read_b_eep,c
 20204  00167E  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20205  001682  D318               	goto	L53
 20206  001684                     l11729:
 20207                           
 20208                           ; BSR set to: 0
 20209                           ;main.c: 1521: rv = Read_b_eep(0x59);
 20210  001684  6A17               	clrf	?_Read_b_eep+1,c
 20211  001686  0E59               	movlw	89
 20212  001688  6E16               	movwf	?_Read_b_eep,c
 20213  00168A  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20214  00168E  D312               	goto	L53
 20215  001690                     l11731:
 20216                           
 20217                           ; BSR set to: 0
 20218                           ;main.c: 1526: rv = Read_b_eep(0x5A);
 20219  001690  6A17               	clrf	?_Read_b_eep+1,c
 20220  001692  0E5A               	movlw	90
 20221  001694  6E16               	movwf	?_Read_b_eep,c
 20222  001696  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20223  00169A  D30C               	goto	L53
 20224  00169C                     l11733:
 20225                           
 20226                           ; BSR set to: 0
 20227                           ;main.c: 1535: rv = Read_b_eep(0x5B);
 20228  00169C  6A17               	clrf	?_Read_b_eep+1,c
 20229  00169E  0E5B               	movlw	91
 20230  0016A0  6E16               	movwf	?_Read_b_eep,c
 20231  0016A2  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20232  0016A6  D306               	goto	L53
 20233  0016A8                     l11735:
 20234                           
 20235                           ; BSR set to: 0
 20236                           ;main.c: 1540: rv = Read_b_eep(0x5C);
 20237  0016A8  6A17               	clrf	?_Read_b_eep+1,c
 20238  0016AA  0E5C               	movlw	92
 20239  0016AC  6E16               	movwf	?_Read_b_eep,c
 20240  0016AE  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20241  0016B2  D300               	goto	L53
 20242  0016B4                     l11737:
 20243                           
 20244                           ; BSR set to: 0
 20245                           ;main.c: 1545: rv = Read_b_eep(0x5D);
 20246  0016B4  6A17               	clrf	?_Read_b_eep+1,c
 20247  0016B6  0E5D               	movlw	93
 20248  0016B8  6E16               	movwf	?_Read_b_eep,c
 20249  0016BA  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20250  0016BE  D2FA               	goto	L53
 20251  0016C0                     l11739:
 20252                           
 20253                           ; BSR set to: 0
 20254                           ;main.c: 1550: rv = Read_b_eep(0x5E);
 20255  0016C0  6A17               	clrf	?_Read_b_eep+1,c
 20256  0016C2  0E5E               	movlw	94
 20257  0016C4  6E16               	movwf	?_Read_b_eep,c
 20258  0016C6  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20259  0016CA  D2F4               	goto	L53
 20260  0016CC                     l11741:
 20261                           
 20262                           ; BSR set to: 0
 20263                           ;main.c: 1555: rv = Read_b_eep(0x5F);
 20264  0016CC  6A17               	clrf	?_Read_b_eep+1,c
 20265  0016CE  0E5F               	movlw	95
 20266  0016D0  6E16               	movwf	?_Read_b_eep,c
 20267  0016D2  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20268  0016D6  D2EE               	goto	L53
 20269  0016D8                     l11743:
 20270                           
 20271                           ; BSR set to: 0
 20272                           ;main.c: 1560: rv = Read_b_eep(0x60);
 20273  0016D8  6A17               	clrf	?_Read_b_eep+1,c
 20274  0016DA  0E60               	movlw	96
 20275  0016DC  6E16               	movwf	?_Read_b_eep,c
 20276  0016DE  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20277  0016E2  D2E8               	goto	L53
 20278  0016E4                     l11745:
 20279                           
 20280                           ; BSR set to: 0
 20281                           ;main.c: 1565: rv = Read_b_eep(0x61);
 20282  0016E4  6A17               	clrf	?_Read_b_eep+1,c
 20283  0016E6  0E61               	movlw	97
 20284  0016E8  6E16               	movwf	?_Read_b_eep,c
 20285  0016EA  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20286  0016EE  D2E2               	goto	L53
 20287  0016F0                     l11747:
 20288                           
 20289                           ; BSR set to: 0
 20290                           ;main.c: 1570: rv = Read_b_eep(0x62);
 20291  0016F0  6A17               	clrf	?_Read_b_eep+1,c
 20292  0016F2  0E62               	movlw	98
 20293  0016F4  6E16               	movwf	?_Read_b_eep,c
 20294  0016F6  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20295  0016FA  D2DC               	goto	L53
 20296  0016FC                     l11749:
 20297                           
 20298                           ; BSR set to: 0
 20299                           ;main.c: 1575: rv = Read_b_eep(0x63);
 20300  0016FC  6A17               	clrf	?_Read_b_eep+1,c
 20301  0016FE  0E63               	movlw	99
 20302  001700  6E16               	movwf	?_Read_b_eep,c
 20303  001702  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20304  001706  D2D6               	goto	L53
 20305  001708                     l11751:
 20306                           
 20307                           ; BSR set to: 0
 20308                           ;main.c: 1580: rv = Read_b_eep(0x64);
 20309  001708  6A17               	clrf	?_Read_b_eep+1,c
 20310  00170A  0E64               	movlw	100
 20311  00170C  6E16               	movwf	?_Read_b_eep,c
 20312  00170E  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20313  001712  D2D0               	goto	L53
 20314  001714                     l11753:
 20315                           
 20316                           ; BSR set to: 0
 20317                           ;main.c: 1585: rv = Read_b_eep(0x65);
 20318  001714  6A17               	clrf	?_Read_b_eep+1,c
 20319  001716  0E65               	movlw	101
 20320  001718  6E16               	movwf	?_Read_b_eep,c
 20321  00171A  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20322  00171E  D2CA               	goto	L53
 20323  001720                     l11755:
 20324                           
 20325                           ; BSR set to: 0
 20326                           ;main.c: 1590: rv = Read_b_eep(0x66);
 20327  001720  6A17               	clrf	?_Read_b_eep+1,c
 20328  001722  0E66               	movlw	102
 20329  001724  6E16               	movwf	?_Read_b_eep,c
 20330  001726  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20331  00172A  D2C4               	goto	L53
 20332  00172C                     l11757:
 20333                           
 20334                           ; BSR set to: 0
 20335                           ;main.c: 1600: rv = Read_b_eep(0x67);
 20336  00172C  6A17               	clrf	?_Read_b_eep+1,c
 20337  00172E  0E67               	movlw	103
 20338  001730  6E16               	movwf	?_Read_b_eep,c
 20339  001732  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20340  001736  D2BE               	goto	L53
 20341  001738                     l11759:
 20342                           
 20343                           ; BSR set to: 0
 20344                           ;main.c: 1605: rv = Read_b_eep(0x68);
 20345  001738  6A17               	clrf	?_Read_b_eep+1,c
 20346  00173A  0E68               	movlw	104
 20347  00173C  6E16               	movwf	?_Read_b_eep,c
 20348  00173E  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20349  001742  D2B8               	goto	L53
 20350  001744                     l11761:
 20351                           
 20352                           ; BSR set to: 0
 20353                           ;main.c: 1610: rv = Read_b_eep(0x69);
 20354  001744  6A17               	clrf	?_Read_b_eep+1,c
 20355  001746  0E69               	movlw	105
 20356  001748  6E16               	movwf	?_Read_b_eep,c
 20357  00174A  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20358  00174E  D2B2               	goto	L53
 20359  001750                     l11763:
 20360                           
 20361                           ; BSR set to: 0
 20362                           ;main.c: 1615: rv = Read_b_eep(0x6A);
 20363  001750  6A17               	clrf	?_Read_b_eep+1,c
 20364  001752  0E6A               	movlw	106
 20365  001754  6E16               	movwf	?_Read_b_eep,c
 20366  001756  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20367  00175A  D2AC               	goto	L53
 20368  00175C                     l11765:
 20369                           
 20370                           ; BSR set to: 0
 20371                           ;main.c: 1620: rv = Read_b_eep(0x6B);
 20372  00175C  6A17               	clrf	?_Read_b_eep+1,c
 20373  00175E  0E6B               	movlw	107
 20374  001760  6E16               	movwf	?_Read_b_eep,c
 20375  001762  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20376  001766  D2A6               	goto	L53
 20377  001768                     l11767:
 20378                           
 20379                           ; BSR set to: 0
 20380                           ;main.c: 1625: rv = Read_b_eep(0x6C);
 20381  001768  6A17               	clrf	?_Read_b_eep+1,c
 20382  00176A  0E6C               	movlw	108
 20383  00176C  6E16               	movwf	?_Read_b_eep,c
 20384  00176E  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20385  001772  D2A0               	goto	L53
 20386  001774                     l11769:
 20387                           
 20388                           ; BSR set to: 0
 20389                           ;main.c: 1630: rv = Read_b_eep(0x6D);
 20390  001774  6A17               	clrf	?_Read_b_eep+1,c
 20391  001776  0E6D               	movlw	109
 20392  001778  6E16               	movwf	?_Read_b_eep,c
 20393  00177A  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20394  00177E  D29A               	goto	L53
 20395  001780                     l11771:
 20396                           
 20397                           ; BSR set to: 0
 20398                           ;main.c: 1635: rv = Read_b_eep(0x6E);
 20399  001780  6A17               	clrf	?_Read_b_eep+1,c
 20400  001782  0E6E               	movlw	110
 20401  001784  6E16               	movwf	?_Read_b_eep,c
 20402  001786  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20403  00178A  D294               	goto	L53
 20404  00178C                     l11773:
 20405                           
 20406                           ; BSR set to: 0
 20407                           ;main.c: 1640: rv = Read_b_eep(0x6F);
 20408  00178C  6A17               	clrf	?_Read_b_eep+1,c
 20409  00178E  0E6F               	movlw	111
 20410  001790  6E16               	movwf	?_Read_b_eep,c
 20411  001792  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20412  001796  D28E               	goto	L53
 20413  001798                     l11775:
 20414                           
 20415                           ; BSR set to: 0
 20416                           ;main.c: 1645: rv = Read_b_eep(0x70);
 20417  001798  6A17               	clrf	?_Read_b_eep+1,c
 20418  00179A  0E70               	movlw	112
 20419  00179C  6E16               	movwf	?_Read_b_eep,c
 20420  00179E  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20421  0017A2  D288               	goto	L53
 20422  0017A4                     l11777:
 20423                           
 20424                           ; BSR set to: 0
 20425                           ;main.c: 1650: rv = Read_b_eep(0x71);
 20426  0017A4  6A17               	clrf	?_Read_b_eep+1,c
 20427  0017A6  0E71               	movlw	113
 20428  0017A8  6E16               	movwf	?_Read_b_eep,c
 20429  0017AA  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20430  0017AE  D282               	goto	L53
 20431  0017B0                     l11779:
 20432                           
 20433                           ; BSR set to: 0
 20434                           ;main.c: 1655: rv = Read_b_eep(0x72);
 20435  0017B0  6A17               	clrf	?_Read_b_eep+1,c
 20436  0017B2  0E72               	movlw	114
 20437  0017B4  6E16               	movwf	?_Read_b_eep,c
 20438  0017B6  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20439  0017BA  D27C               	goto	L53
 20440  0017BC                     l11781:
 20441                           
 20442                           ; BSR set to: 0
 20443                           ;main.c: 1664: rv = Read_b_eep(0x73);
 20444  0017BC  6A17               	clrf	?_Read_b_eep+1,c
 20445  0017BE  0E73               	movlw	115
 20446  0017C0  6E16               	movwf	?_Read_b_eep,c
 20447  0017C2  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20448  0017C6  D276               	goto	L53
 20449  0017C8                     l11783:
 20450                           
 20451                           ; BSR set to: 0
 20452                           ;main.c: 1669: rv = Read_b_eep(0x74);
 20453  0017C8  6A17               	clrf	?_Read_b_eep+1,c
 20454  0017CA  0E74               	movlw	116
 20455  0017CC  6E16               	movwf	?_Read_b_eep,c
 20456  0017CE  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20457  0017D2  D270               	goto	L53
 20458  0017D4                     l11785:
 20459                           
 20460                           ; BSR set to: 0
 20461                           ;main.c: 1674: rv = Read_b_eep(0x75);
 20462  0017D4  6A17               	clrf	?_Read_b_eep+1,c
 20463  0017D6  0E75               	movlw	117
 20464  0017D8  6E16               	movwf	?_Read_b_eep,c
 20465  0017DA  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20466  0017DE  D26A               	goto	L53
 20467  0017E0                     l11787:
 20468                           
 20469                           ; BSR set to: 0
 20470                           ;main.c: 1679: rv = Read_b_eep(0x76);
 20471  0017E0  6A17               	clrf	?_Read_b_eep+1,c
 20472  0017E2  0E76               	movlw	118
 20473  0017E4  6E16               	movwf	?_Read_b_eep,c
 20474  0017E6  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20475  0017EA  D264               	goto	L53
 20476  0017EC                     l11789:
 20477                           
 20478                           ; BSR set to: 0
 20479                           ;main.c: 1684: rv = Read_b_eep(0x77);
 20480  0017EC  6A17               	clrf	?_Read_b_eep+1,c
 20481  0017EE  0E77               	movlw	119
 20482  0017F0  6E16               	movwf	?_Read_b_eep,c
 20483  0017F2  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20484  0017F6  D25E               	goto	L53
 20485  0017F8                     l11791:
 20486                           
 20487                           ; BSR set to: 0
 20488                           ;main.c: 1689: rv = Read_b_eep(0x78);
 20489  0017F8  6A17               	clrf	?_Read_b_eep+1,c
 20490  0017FA  0E78               	movlw	120
 20491  0017FC  6E16               	movwf	?_Read_b_eep,c
 20492  0017FE  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20493  001802  D258               	goto	L53
 20494  001804                     l11793:
 20495                           
 20496                           ; BSR set to: 0
 20497                           ;main.c: 1694: rv = Read_b_eep(0x79);
 20498  001804  6A17               	clrf	?_Read_b_eep+1,c
 20499  001806  0E79               	movlw	121
 20500  001808  6E16               	movwf	?_Read_b_eep,c
 20501  00180A  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20502  00180E  D252               	goto	L53
 20503  001810                     l11795:
 20504                           
 20505                           ; BSR set to: 0
 20506                           ;main.c: 1699: rv = Read_b_eep(0x7A);
 20507  001810  6A17               	clrf	?_Read_b_eep+1,c
 20508  001812  0E7A               	movlw	122
 20509  001814  6E16               	movwf	?_Read_b_eep,c
 20510  001816  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20511  00181A  D24C               	goto	L53
 20512  00181C                     l11797:
 20513                           
 20514                           ; BSR set to: 0
 20515                           ;main.c: 1704: rv = Read_b_eep(0x7B);
 20516  00181C  6A17               	clrf	?_Read_b_eep+1,c
 20517  00181E  0E7B               	movlw	123
 20518  001820  6E16               	movwf	?_Read_b_eep,c
 20519  001822  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20520  001826  D246               	goto	L53
 20521  001828                     l11799:
 20522                           
 20523                           ; BSR set to: 0
 20524                           ;main.c: 1709: rv = Read_b_eep(0x7C);
 20525  001828  6A17               	clrf	?_Read_b_eep+1,c
 20526  00182A  0E7C               	movlw	124
 20527  00182C  6E16               	movwf	?_Read_b_eep,c
 20528  00182E  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20529  001832  D240               	goto	L53
 20530  001834                     l11801:
 20531                           
 20532                           ; BSR set to: 0
 20533                           ;main.c: 1714: rv = Read_b_eep(0x7D);
 20534  001834  6A17               	clrf	?_Read_b_eep+1,c
 20535  001836  0E7D               	movlw	125
 20536  001838  6E16               	movwf	?_Read_b_eep,c
 20537  00183A  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20538  00183E  D23A               	goto	L53
 20539  001840                     l11803:
 20540                           
 20541                           ; BSR set to: 0
 20542                           ;main.c: 1719: rv = Read_b_eep(0x7E);
 20543  001840  6A17               	clrf	?_Read_b_eep+1,c
 20544  001842  0E7E               	movlw	126
 20545  001844  6E16               	movwf	?_Read_b_eep,c
 20546  001846  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20547  00184A  D234               	goto	L53
 20548  00184C                     l11805:
 20549                           
 20550                           ; BSR set to: 0
 20551                           ;main.c: 1728: rv = Read_b_eep(0x7F);
 20552  00184C  6A17               	clrf	?_Read_b_eep+1,c
 20553  00184E  0E7F               	movlw	127
 20554  001850  6E16               	movwf	?_Read_b_eep,c
 20555  001852  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20556  001856  D22E               	goto	L53
 20557  001858                     l11807:
 20558                           
 20559                           ; BSR set to: 0
 20560                           ;main.c: 1733: rv = Read_b_eep(0x80);
 20561  001858  6A17               	clrf	?_Read_b_eep+1,c
 20562  00185A  0E80               	movlw	128
 20563  00185C  6E16               	movwf	?_Read_b_eep,c
 20564  00185E  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20565  001862  D228               	goto	L53
 20566  001864                     l11809:
 20567                           
 20568                           ; BSR set to: 0
 20569                           ;main.c: 1738: rv = Read_b_eep(0x81);
 20570  001864  6A17               	clrf	?_Read_b_eep+1,c
 20571  001866  0E81               	movlw	129
 20572  001868  6E16               	movwf	?_Read_b_eep,c
 20573  00186A  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20574  00186E  D222               	goto	L53
 20575  001870                     l11811:
 20576                           
 20577                           ; BSR set to: 0
 20578                           ;main.c: 1743: rv = Read_b_eep(0x82);
 20579  001870  6A17               	clrf	?_Read_b_eep+1,c
 20580  001872  0E82               	movlw	130
 20581  001874  6E16               	movwf	?_Read_b_eep,c
 20582  001876  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20583  00187A  D21C               	goto	L53
 20584  00187C                     l11813:
 20585                           
 20586                           ; BSR set to: 0
 20587                           ;main.c: 1748: rv = Read_b_eep(0x83);
 20588  00187C  6A17               	clrf	?_Read_b_eep+1,c
 20589  00187E  0E83               	movlw	131
 20590  001880  6E16               	movwf	?_Read_b_eep,c
 20591  001882  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20592  001886  D216               	goto	L53
 20593  001888                     l11815:
 20594                           
 20595                           ; BSR set to: 0
 20596                           ;main.c: 1753: rv = Read_b_eep(0x84);
 20597  001888  6A17               	clrf	?_Read_b_eep+1,c
 20598  00188A  0E84               	movlw	132
 20599  00188C  6E16               	movwf	?_Read_b_eep,c
 20600  00188E  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20601  001892  D210               	goto	L53
 20602  001894                     l11817:
 20603                           
 20604                           ; BSR set to: 0
 20605                           ;main.c: 1758: rv = Read_b_eep(0x85);
 20606  001894  6A17               	clrf	?_Read_b_eep+1,c
 20607  001896  0E85               	movlw	133
 20608  001898  6E16               	movwf	?_Read_b_eep,c
 20609  00189A  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20610  00189E  D20A               	goto	L53
 20611  0018A0                     l11819:
 20612                           
 20613                           ; BSR set to: 0
 20614                           ;main.c: 1763: rv = Read_b_eep(0x86);
 20615  0018A0  6A17               	clrf	?_Read_b_eep+1,c
 20616  0018A2  0E86               	movlw	134
 20617  0018A4  6E16               	movwf	?_Read_b_eep,c
 20618  0018A6  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20619  0018AA  D204               	goto	L53
 20620  0018AC                     l11821:
 20621                           
 20622                           ; BSR set to: 0
 20623                           ;main.c: 1768: rv = Read_b_eep(0x87);
 20624  0018AC  6A17               	clrf	?_Read_b_eep+1,c
 20625  0018AE  0E87               	movlw	135
 20626  0018B0  6E16               	movwf	?_Read_b_eep,c
 20627  0018B2  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20628  0018B6  D1FE               	goto	L53
 20629  0018B8                     l11823:
 20630                           
 20631                           ; BSR set to: 0
 20632                           ;main.c: 1773: rv = Read_b_eep(0x88);
 20633  0018B8  6A17               	clrf	?_Read_b_eep+1,c
 20634  0018BA  0E88               	movlw	136
 20635  0018BC  6E16               	movwf	?_Read_b_eep,c
 20636  0018BE  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20637  0018C2  D1F8               	goto	L53
 20638  0018C4                     l11825:
 20639                           
 20640                           ; BSR set to: 0
 20641                           ;main.c: 1778: rv = Read_b_eep(0x89);
 20642  0018C4  6A17               	clrf	?_Read_b_eep+1,c
 20643  0018C6  0E89               	movlw	137
 20644  0018C8  6E16               	movwf	?_Read_b_eep,c
 20645  0018CA  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20646  0018CE  D1F2               	goto	L53
 20647  0018D0                     l11827:
 20648                           
 20649                           ; BSR set to: 0
 20650                           ;main.c: 1783: rv = Read_b_eep(0x8A);
 20651  0018D0  6A17               	clrf	?_Read_b_eep+1,c
 20652  0018D2  0E8A               	movlw	138
 20653  0018D4  6E16               	movwf	?_Read_b_eep,c
 20654  0018D6  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20655  0018DA  D1EC               	goto	L53
 20656  0018DC                     l11829:
 20657                           
 20658                           ; BSR set to: 0
 20659                           ;main.c: 1792: rv = Read_b_eep(0x8B);
 20660  0018DC  6A17               	clrf	?_Read_b_eep+1,c
 20661  0018DE  0E8B               	movlw	139
 20662  0018E0  6E16               	movwf	?_Read_b_eep,c
 20663  0018E2  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20664  0018E6  D1E6               	goto	L53
 20665  0018E8                     l11831:
 20666                           
 20667                           ; BSR set to: 0
 20668                           ;main.c: 1797: rv = Read_b_eep(0x8C);
 20669  0018E8  6A17               	clrf	?_Read_b_eep+1,c
 20670  0018EA  0E8C               	movlw	140
 20671  0018EC  6E16               	movwf	?_Read_b_eep,c
 20672  0018EE  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20673  0018F2  D1E0               	goto	L53
 20674  0018F4                     l11833:
 20675                           
 20676                           ; BSR set to: 0
 20677                           ;main.c: 1802: rv = Read_b_eep(0x8D);
 20678  0018F4  6A17               	clrf	?_Read_b_eep+1,c
 20679  0018F6  0E8D               	movlw	141
 20680  0018F8  6E16               	movwf	?_Read_b_eep,c
 20681  0018FA  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20682  0018FE  D1DA               	goto	L53
 20683  001900                     l11835:
 20684                           
 20685                           ; BSR set to: 0
 20686                           ;main.c: 1807: rv = Read_b_eep(0x8E);
 20687  001900  6A17               	clrf	?_Read_b_eep+1,c
 20688  001902  0E8E               	movlw	142
 20689  001904  6E16               	movwf	?_Read_b_eep,c
 20690  001906  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20691  00190A  D1D4               	goto	L53
 20692  00190C                     l11837:
 20693                           
 20694                           ; BSR set to: 0
 20695                           ;main.c: 1812: rv = Read_b_eep(0x8F);
 20696  00190C  6A17               	clrf	?_Read_b_eep+1,c
 20697  00190E  0E8F               	movlw	143
 20698  001910  6E16               	movwf	?_Read_b_eep,c
 20699  001912  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20700  001916  D1CE               	goto	L53
 20701  001918                     l11839:
 20702                           
 20703                           ; BSR set to: 0
 20704                           ;main.c: 1817: rv = Read_b_eep(0x90);
 20705  001918  6A17               	clrf	?_Read_b_eep+1,c
 20706  00191A  0E90               	movlw	144
 20707  00191C  6E16               	movwf	?_Read_b_eep,c
 20708  00191E  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20709  001922  D1C8               	goto	L53
 20710  001924                     l11841:
 20711                           
 20712                           ; BSR set to: 0
 20713                           ;main.c: 1822: rv = Read_b_eep(0x91);
 20714  001924  6A17               	clrf	?_Read_b_eep+1,c
 20715  001926  0E91               	movlw	145
 20716  001928  6E16               	movwf	?_Read_b_eep,c
 20717  00192A  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20718  00192E  D1C2               	goto	L53
 20719  001930                     l11843:
 20720                           
 20721                           ; BSR set to: 0
 20722                           ;main.c: 1827: rv = Read_b_eep(0x92);
 20723  001930  6A17               	clrf	?_Read_b_eep+1,c
 20724  001932  0E92               	movlw	146
 20725  001934  6E16               	movwf	?_Read_b_eep,c
 20726  001936  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20727  00193A  D1BC               	goto	L53
 20728  00193C                     l11845:
 20729                           
 20730                           ; BSR set to: 0
 20731                           ;main.c: 1832: rv = Read_b_eep(0x93);
 20732  00193C  6A17               	clrf	?_Read_b_eep+1,c
 20733  00193E  0E93               	movlw	147
 20734  001940  6E16               	movwf	?_Read_b_eep,c
 20735  001942  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20736  001946  D1B6               	goto	L53
 20737  001948                     l11847:
 20738                           
 20739                           ; BSR set to: 0
 20740                           ;main.c: 1837: rv = Read_b_eep(0x94);
 20741  001948  6A17               	clrf	?_Read_b_eep+1,c
 20742  00194A  0E94               	movlw	148
 20743  00194C  6E16               	movwf	?_Read_b_eep,c
 20744  00194E  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20745  001952  D1B0               	goto	L53
 20746  001954                     l11849:
 20747                           
 20748                           ; BSR set to: 0
 20749                           ;main.c: 1842: rv = Read_b_eep(0x95);
 20750  001954  6A17               	clrf	?_Read_b_eep+1,c
 20751  001956  0E95               	movlw	149
 20752  001958  6E16               	movwf	?_Read_b_eep,c
 20753  00195A  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20754  00195E  D1AA               	goto	L53
 20755  001960                     l11851:
 20756                           
 20757                           ; BSR set to: 0
 20758                           ;main.c: 1847: rv = Read_b_eep(0x96);
 20759  001960  6A17               	clrf	?_Read_b_eep+1,c
 20760  001962  0E96               	movlw	150
 20761  001964  6E16               	movwf	?_Read_b_eep,c
 20762  001966  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20763  00196A  D1A4               	goto	L53
 20764  00196C                     l11853:
 20765                           
 20766                           ; BSR set to: 0
 20767                           ;main.c: 1857: rv = Read_b_eep(0x97);
 20768  00196C  6A17               	clrf	?_Read_b_eep+1,c
 20769  00196E  0E97               	movlw	151
 20770  001970  6E16               	movwf	?_Read_b_eep,c
 20771  001972  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20772  001976  D19E               	goto	L53
 20773  001978                     l11855:
 20774                           
 20775                           ; BSR set to: 0
 20776                           ;main.c: 1862: rv = Read_b_eep(0x98);
 20777  001978  6A17               	clrf	?_Read_b_eep+1,c
 20778  00197A  0E98               	movlw	152
 20779  00197C  6E16               	movwf	?_Read_b_eep,c
 20780  00197E  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20781  001982  D198               	goto	L53
 20782  001984                     l11857:
 20783                           
 20784                           ; BSR set to: 0
 20785                           ;main.c: 1867: rv = Read_b_eep(0x99);
 20786  001984  6A17               	clrf	?_Read_b_eep+1,c
 20787  001986  0E99               	movlw	153
 20788  001988  6E16               	movwf	?_Read_b_eep,c
 20789  00198A  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20790  00198E  D192               	goto	L53
 20791  001990                     l11859:
 20792                           
 20793                           ; BSR set to: 0
 20794                           ;main.c: 1872: rv = Read_b_eep(0x9A);
 20795  001990  6A17               	clrf	?_Read_b_eep+1,c
 20796  001992  0E9A               	movlw	154
 20797  001994  6E16               	movwf	?_Read_b_eep,c
 20798  001996  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20799  00199A  D18C               	goto	L53
 20800  00199C                     l11861:
 20801                           
 20802                           ; BSR set to: 0
 20803                           ;main.c: 1877: rv = Read_b_eep(0x9B);
 20804  00199C  6A17               	clrf	?_Read_b_eep+1,c
 20805  00199E  0E9B               	movlw	155
 20806  0019A0  6E16               	movwf	?_Read_b_eep,c
 20807  0019A2  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20808  0019A6  D186               	goto	L53
 20809  0019A8                     l11863:
 20810                           
 20811                           ; BSR set to: 0
 20812                           ;main.c: 1882: rv = Read_b_eep(0x9C);
 20813  0019A8  6A17               	clrf	?_Read_b_eep+1,c
 20814  0019AA  0E9C               	movlw	156
 20815  0019AC  6E16               	movwf	?_Read_b_eep,c
 20816  0019AE  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20817  0019B2  D180               	goto	L53
 20818  0019B4                     l411:
 20819                           
 20820                           ; BSR set to: 0
 20821                           ;main.c: 1887: rv = 0;
 20822  0019B4  6A1A               	clrf	vscp_readAppReg@rv,c
 20823                           
 20824                           ;main.c: 1888: break;
 20825  0019B6  D17F               	goto	l11895
 20826  0019B8                     l11865:
 20827                           
 20828                           ; BSR set to: 0
 20829                           ;main.c: 1897: rv = Read_b_eep(0xF2);
 20830  0019B8  6A17               	clrf	?_Read_b_eep+1,c
 20831  0019BA  0EF2               	movlw	242
 20832  0019BC  6E16               	movwf	?_Read_b_eep,c
 20833  0019BE  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20834  0019C2  D178               	goto	L53
 20835  0019C4                     l11867:
 20836                           
 20837                           ; BSR set to: 0
 20838                           ;main.c: 1902: rv = Read_b_eep(0xF3);
 20839  0019C4  6A17               	clrf	?_Read_b_eep+1,c
 20840  0019C6  0EF3               	movlw	243
 20841  0019C8  6E16               	movwf	?_Read_b_eep,c
 20842  0019CA  EC8F  F02B         	call	_Read_b_eep	;wreg free
 20843  0019CE  D172               	goto	L53
 20844  0019D0                     l11871:
 20845                           
 20846                           ; BSR set to: 0
 20847  0019D0  5019               	movf	vscp_readAppReg@reg,w,c
 20848                           
 20849                           ; Switch size 1, requested type "space"
 20850                           ; Number of cases is 108, Range of values is 0 to 119
 20851                           ; switch strategies available:
 20852                           ; Name         Instructions Cycles
 20853                           ; simple_byte          325   163 (average)
 20854                           ;	Chosen strategy is simple_byte
 20855  0019D2  E101 D5A3          	bz	l11669
 20856  0019D6  0A01               	xorlw	1	; case 1
 20857  0019D8  E101 D5A6          	bz	l11671
 20858  0019DC  0A03               	xorlw	3	; case 2
 20859  0019DE  E101 D5A9          	bz	l11673
 20860  0019E2  0A01               	xorlw	1	; case 3
 20861  0019E4  E101 D5AC          	bz	l11675
 20862  0019E8  0A07               	xorlw	7	; case 4
 20863  0019EA  E101 D5AF          	bz	l11677
 20864  0019EE  0A01               	xorlw	1	; case 5
 20865  0019F0  E101 D5B2          	bz	l11679
 20866  0019F4  0A03               	xorlw	3	; case 6
 20867  0019F6  E101 D5B5          	bz	l11681
 20868  0019FA  0A01               	xorlw	1	; case 7
 20869  0019FC  E101 D5B8          	bz	l11683
 20870  001A00  0A0F               	xorlw	15	; case 8
 20871  001A02  E101 D5BB          	bz	l11685
 20872  001A06  0A01               	xorlw	1	; case 9
 20873  001A08  E101 D5BB          	bz	l316
 20874  001A0C  0A03               	xorlw	3	; case 10
 20875  001A0E  E101 D5BB          	bz	l11687
 20876  001A12  0A01               	xorlw	1	; case 11
 20877  001A14  E101 D5BB          	bz	l318
 20878  001A18  0A07               	xorlw	7	; case 12
 20879  001A1A  E101 D5BB          	bz	l11689
 20880  001A1E  0A01               	xorlw	1	; case 13
 20881  001A20  E101 D5BB          	bz	l320
 20882  001A24  0A03               	xorlw	3	; case 14
 20883  001A26  E101 D5BB          	bz	l11691
 20884  001A2A  0A01               	xorlw	1	; case 15
 20885  001A2C  E101 D5BB          	bz	l322
 20886  001A30  0A1F               	xorlw	31	; case 16
 20887  001A32  E101 D5BB          	bz	l11693
 20888  001A36  0A01               	xorlw	1	; case 17
 20889  001A38  E101 D5BB          	bz	l324
 20890  001A3C  0A03               	xorlw	3	; case 18
 20891  001A3E  E101 D5BB          	bz	l11695
 20892  001A42  0A01               	xorlw	1	; case 19
 20893  001A44  E101 D5BB          	bz	l326
 20894  001A48  0A07               	xorlw	7	; case 20
 20895  001A4A  E101 D5BB          	bz	l11697
 20896  001A4E  0A01               	xorlw	1	; case 21
 20897  001A50  E101 D5BE          	bz	l11699
 20898  001A54  0A03               	xorlw	3	; case 22
 20899  001A56  E101 D5C1          	bz	l11701
 20900  001A5A  0A01               	xorlw	1	; case 23
 20901  001A5C  E101 D5C4          	bz	l11703
 20902  001A60  0A0F               	xorlw	15	; case 24
 20903  001A62  E101 D5C7          	bz	l11705
 20904  001A66  0A01               	xorlw	1	; case 25
 20905  001A68  E101 D5CA          	bz	l11707
 20906  001A6C  0A3F               	xorlw	63	; case 38
 20907  001A6E  E101 D5CD          	bz	l11709
 20908  001A72  0A01               	xorlw	1	; case 39
 20909  001A74  E101 D5D0          	bz	l11711
 20910  001A78  0A0F               	xorlw	15	; case 40
 20911  001A7A  E101 D5D3          	bz	l11713
 20912  001A7E  0A01               	xorlw	1	; case 41
 20913  001A80  E101 D5D6          	bz	l11715
 20914  001A84  0A03               	xorlw	3	; case 42
 20915  001A86  E101 D5D9          	bz	l11717
 20916  001A8A  0A01               	xorlw	1	; case 43
 20917  001A8C  E101 D5DC          	bz	l11719
 20918  001A90  0A07               	xorlw	7	; case 44
 20919  001A92  E101 D5DF          	bz	l11721
 20920  001A96  0A01               	xorlw	1	; case 45
 20921  001A98  E101 D5E2          	bz	l11723
 20922  001A9C  0A03               	xorlw	3	; case 46
 20923  001A9E  E101 D5E5          	bz	l11725
 20924  001AA2  0A01               	xorlw	1	; case 47
 20925  001AA4  E101 D5E8          	bz	l11727
 20926  001AA8  0A1F               	xorlw	31	; case 48
 20927  001AAA  E101 D5EB          	bz	l11729
 20928  001AAE  0A01               	xorlw	1	; case 49
 20929  001AB0  E101 D5EE          	bz	l11731
 20930  001AB4  0A03               	xorlw	3	; case 50
 20931  001AB6  E101 D5F1          	bz	l11733
 20932  001ABA  0A01               	xorlw	1	; case 51
 20933  001ABC  E101 D5F4          	bz	l11735
 20934  001AC0  0A07               	xorlw	7	; case 52
 20935  001AC2  E101 D5F7          	bz	l11737
 20936  001AC6  0A01               	xorlw	1	; case 53
 20937  001AC8  E101 D5FA          	bz	l11739
 20938  001ACC  0A03               	xorlw	3	; case 54
 20939  001ACE  E101 D5FD          	bz	l11741
 20940  001AD2  0A01               	xorlw	1	; case 55
 20941  001AD4  E101 D600          	bz	l11743
 20942  001AD8  0A0F               	xorlw	15	; case 56
 20943  001ADA  E101 D603          	bz	l11745
 20944  001ADE  0A01               	xorlw	1	; case 57
 20945  001AE0  E101 D606          	bz	l11747
 20946  001AE4  0A03               	xorlw	3	; case 58
 20947  001AE6  E101 D609          	bz	l11749
 20948  001AEA  0A01               	xorlw	1	; case 59
 20949  001AEC  E101 D60C          	bz	l11751
 20950  001AF0  0A07               	xorlw	7	; case 60
 20951  001AF2  E101 D60F          	bz	l11753
 20952  001AF6  0A01               	xorlw	1	; case 61
 20953  001AF8  E101 D612          	bz	l11755
 20954  001AFC  0A03               	xorlw	3	; case 62
 20955  001AFE  E101 D615          	bz	l11757
 20956  001B02  0A01               	xorlw	1	; case 63
 20957  001B04  E101 D618          	bz	l11759
 20958  001B08  0A7F               	xorlw	127	; case 64
 20959  001B0A  E101 D61B          	bz	l11761
 20960  001B0E  0A01               	xorlw	1	; case 65
 20961  001B10  E101 D61E          	bz	l11763
 20962  001B14  0A03               	xorlw	3	; case 66
 20963  001B16  E101 D621          	bz	l11765
 20964  001B1A  0A01               	xorlw	1	; case 67
 20965  001B1C  E101 D624          	bz	l11767
 20966  001B20  0A07               	xorlw	7	; case 68
 20967  001B22  E101 D627          	bz	l11769
 20968  001B26  0A01               	xorlw	1	; case 69
 20969  001B28  E101 D62A          	bz	l11771
 20970  001B2C  0A03               	xorlw	3	; case 70
 20971  001B2E  E101 D62D          	bz	l11773
 20972  001B32  0A01               	xorlw	1	; case 71
 20973  001B34  E101 D630          	bz	l11775
 20974  001B38  0A0F               	xorlw	15	; case 72
 20975  001B3A  E101 D633          	bz	l11777
 20976  001B3E  0A01               	xorlw	1	; case 73
 20977  001B40  E101 D636          	bz	l11779
 20978  001B44  0A03               	xorlw	3	; case 74
 20979  001B46  E101 D639          	bz	l11781
 20980  001B4A  0A01               	xorlw	1	; case 75
 20981  001B4C  E101 D63C          	bz	l11783
 20982  001B50  0A07               	xorlw	7	; case 76
 20983  001B52  E101 D63F          	bz	l11785
 20984  001B56  0A01               	xorlw	1	; case 77
 20985  001B58  E101 D642          	bz	l11787
 20986  001B5C  0A03               	xorlw	3	; case 78
 20987  001B5E  E101 D645          	bz	l11789
 20988  001B62  0A01               	xorlw	1	; case 79
 20989  001B64  E101 D648          	bz	l11791
 20990  001B68  0A1F               	xorlw	31	; case 80
 20991  001B6A  E101 D64B          	bz	l11793
 20992  001B6E  0A01               	xorlw	1	; case 81
 20993  001B70  E101 D64E          	bz	l11795
 20994  001B74  0A03               	xorlw	3	; case 82
 20995  001B76  E101 D651          	bz	l11797
 20996  001B7A  0A01               	xorlw	1	; case 83
 20997  001B7C  E101 D654          	bz	l11799
 20998  001B80  0A07               	xorlw	7	; case 84
 20999  001B82  E101 D657          	bz	l11801
 21000  001B86  0A01               	xorlw	1	; case 85
 21001  001B88  E101 D65A          	bz	l11803
 21002  001B8C  0A03               	xorlw	3	; case 86
 21003  001B8E  E101 D65D          	bz	l11805
 21004  001B92  0A01               	xorlw	1	; case 87
 21005  001B94  E101 D660          	bz	l11807
 21006  001B98  0A0F               	xorlw	15	; case 88
 21007  001B9A  E101 D663          	bz	l11809
 21008  001B9E  0A01               	xorlw	1	; case 89
 21009  001BA0  E101 D666          	bz	l11811
 21010  001BA4  0A03               	xorlw	3	; case 90
 21011  001BA6  E101 D669          	bz	l11813
 21012  001BAA  0A01               	xorlw	1	; case 91
 21013  001BAC  E101 D66C          	bz	l11815
 21014  001BB0  0A07               	xorlw	7	; case 92
 21015  001BB2  E101 D66F          	bz	l11817
 21016  001BB6  0A01               	xorlw	1	; case 93
 21017  001BB8  E101 D672          	bz	l11819
 21018  001BBC  0A03               	xorlw	3	; case 94
 21019  001BBE  E101 D675          	bz	l11821
 21020  001BC2  0A01               	xorlw	1	; case 95
 21021  001BC4  E101 D678          	bz	l11823
 21022  001BC8  0A3F               	xorlw	63	; case 96
 21023  001BCA  E101 D67B          	bz	l11825
 21024  001BCE  0A01               	xorlw	1	; case 97
 21025  001BD0  E101 D67E          	bz	l11827
 21026  001BD4  0A03               	xorlw	3	; case 98
 21027  001BD6  E101 D681          	bz	l11829
 21028  001BDA  0A01               	xorlw	1	; case 99
 21029  001BDC  E101 D684          	bz	l11831
 21030  001BE0  0A07               	xorlw	7	; case 100
 21031  001BE2  E101 D687          	bz	l11833
 21032  001BE6  0A01               	xorlw	1	; case 101
 21033  001BE8  E101 D68A          	bz	l11835
 21034  001BEC  0A03               	xorlw	3	; case 102
 21035  001BEE  E101 D68D          	bz	l11837
 21036  001BF2  0A01               	xorlw	1	; case 103
 21037  001BF4  E101 D690          	bz	l11839
 21038  001BF8  0A0F               	xorlw	15	; case 104
 21039  001BFA  E101 D693          	bz	l11841
 21040  001BFE  0A01               	xorlw	1	; case 105
 21041  001C00  E101 D696          	bz	l11843
 21042  001C04  0A03               	xorlw	3	; case 106
 21043  001C06  E101 D699          	bz	l11845
 21044  001C0A  0A01               	xorlw	1	; case 107
 21045  001C0C  E101 D69C          	bz	l11847
 21046  001C10  0A07               	xorlw	7	; case 108
 21047  001C12  E101 D69F          	bz	l11849
 21048  001C16  0A01               	xorlw	1	; case 109
 21049  001C18  E101 D6A2          	bz	l11851
 21050  001C1C  0A03               	xorlw	3	; case 110
 21051  001C1E  E101 D6A5          	bz	l11853
 21052  001C22  0A01               	xorlw	1	; case 111
 21053  001C24  E101 D6A8          	bz	l11855
 21054  001C28  0A1F               	xorlw	31	; case 112
 21055  001C2A  E101 D6AB          	bz	l11857
 21056  001C2E  0A01               	xorlw	1	; case 113
 21057  001C30  E101 D6AE          	bz	l11859
 21058  001C34  0A03               	xorlw	3	; case 114
 21059  001C36  E101 D6B1          	bz	l11861
 21060  001C3A  0A01               	xorlw	1	; case 115
 21061  001C3C  E101 D6B4          	bz	l11863
 21062  001C40  0A07               	xorlw	7	; case 116
 21063  001C42  E101 D6B7          	bz	l411
 21064  001C46  0A01               	xorlw	1	; case 117
 21065  001C48  E101 D6B4          	bz	l411
 21066  001C4C  0A03               	xorlw	3	; case 118
 21067  001C4E  E101 D6B3          	bz	l11865
 21068  001C52  0A01               	xorlw	1	; case 119
 21069  001C54  E101 D6B6          	bz	l11867
 21070  001C58  D6AD               	goto	l411
 21071  001C5A                     l11873:
 21072                           
 21073                           ; BSR set to: 0
 21074                           ;main.c: 1910: else if (1 == vscp_page_select) {
 21075  001C5A  0446               	decf	_vscp_page_select,w,c
 21076  001C5C  1047               	iorwf	_vscp_page_select+1,w,c
 21077  001C5E  E12B               	bnz	l11895
 21078                           
 21079                           ; BSR set to: 0
 21080                           ;main.c: 1913: if (reg < 72) {
 21081  001C60  0E48               	movlw	72
 21082  001C62  6019               	cpfslt	vscp_readAppReg@reg,c
 21083  001C64  D009               	goto	l11879
 21084                           
 21085                           ; BSR set to: 0
 21086                           ;main.c: 1914: rv = Read_b_eep(0xAA + reg) ;
 21087  001C66  0EAA               	movlw	170
 21088  001C68  2419               	addwf	vscp_readAppReg@reg,w,c
 21089  001C6A  6E16               	movwf	?_Read_b_eep,c
 21090  001C6C  6A17               	clrf	?_Read_b_eep+1,c
 21091  001C6E  0E00               	movlw	0
 21092  001C70  2217               	addwfc	?_Read_b_eep+1,f,c
 21093  001C72  EC8F  F02B         	call	_Read_b_eep	;wreg free
 21094  001C76  D01E               	goto	L53
 21095  001C78                     l11879:
 21096                           
 21097                           ; BSR set to: 0
 21098                           ;main.c: 1917: else if (reg < 84) {
 21099  001C78  0E54               	movlw	84
 21100  001C7A  6019               	cpfslt	vscp_readAppReg@reg,c
 21101  001C7C  D010               	goto	l11891
 21102                           
 21103                           ; BSR set to: 0
 21104                           ;main.c: 1919: uint8_t pos = reg - 72;
 21105  001C7E  5019               	movf	vscp_readAppReg@reg,w,c
 21106  001C80  0FB8               	addlw	184
 21107  001C82  6E18               	movwf	vscp_readAppReg@pos,c
 21108                           
 21109                           ; BSR set to: 0
 21110                           ;main.c: 1920: if ( pos % 2 ) {
 21111  001C84  A018               	btfss	vscp_readAppReg@pos,0,c
 21112  001C86  D002               	goto	l11887
 21113                           
 21114                           ; BSR set to: 0
 21115                           ;main.c: 1921: pos--;
 21116  001C88  0618               	decf	vscp_readAppReg@pos,f,c
 21117                           
 21118                           ;main.c: 1922: }
 21119  001C8A  D001               	goto	l11889
 21120  001C8C                     l11887:
 21121                           
 21122                           ; BSR set to: 0
 21123                           ;main.c: 1923: else {
 21124                           ;main.c: 1924: pos++;
 21125  001C8C  2A18               	incf	vscp_readAppReg@pos,f,c
 21126  001C8E                     l11889:
 21127                           
 21128                           ; BSR set to: 0
 21129                           ;main.c: 1925: }
 21130                           ;main.c: 1926: rv = adc[ pos ];
 21131  001C8E  0E9E               	movlw	low _adc
 21132  001C90  2418               	addwf	vscp_readAppReg@pos,w,c
 21133  001C92  6ED9               	movwf	fsr2l,c
 21134  001C94  6ADA               	clrf	fsr2h,c
 21135  001C96  0E01               	movlw	high _adc
 21136  001C98  22DA               	addwfc	fsr2h,f,c
 21137  001C9A  50DF               	movf	indf2,w,c
 21138  001C9C  D00B               	goto	L53
 21139  001C9E                     l11891:
 21140                           
 21141                           ; BSR set to: 0
 21142                           ;main.c: 1929: else if (reg < 98) {
 21143  001C9E  0E62               	movlw	98
 21144  001CA0  6019               	cpfslt	vscp_readAppReg@reg,c
 21145  001CA2  D009               	goto	l11895
 21146                           
 21147                           ; BSR set to: 0
 21148                           ;main.c: 1930: rv = Read_b_eep(0x9E + reg - 84) ;
 21149  001CA4  0E4A               	movlw	74
 21150  001CA6  2419               	addwf	vscp_readAppReg@reg,w,c
 21151  001CA8  6E16               	movwf	?_Read_b_eep,c
 21152  001CAA  6A17               	clrf	?_Read_b_eep+1,c
 21153  001CAC  0E00               	movlw	0
 21154  001CAE  2217               	addwfc	?_Read_b_eep+1,f,c
 21155  001CB0  EC8F  F02B         	call	_Read_b_eep	;wreg free
 21156  001CB4                     L53:
 21157  001CB4  6E1A               	movwf	vscp_readAppReg@rv,c
 21158  001CB6                     l11895:
 21159                           
 21160                           ;main.c: 1931: }
 21161                           ;main.c: 1932: }
 21162                           ;main.c: 1934: return rv;
 21163  001CB6  501A               	movf	vscp_readAppReg@rv,w,c
 21164  001CB8  0012               	return	
 21165  001CBA                     __end_of_vscp_readAppReg:
 21166                           	opt stack 0
 21167                           tblptru	equ	0xFF8
 21168                           tblptrh	equ	0xFF7
 21169                           tblptrl	equ	0xFF6
 21170                           tablat	equ	0xFF5
 21171                           prodh	equ	0xFF4
 21172                           prodl	equ	0xFF3
 21173                           intcon	equ	0xFF2
 21174                           postinc0	equ	0xFEE
 21175                           wreg	equ	0xFE8
 21176                           indf1	equ	0xFE7
 21177                           postdec1	equ	0xFE5
 21178                           fsr1h	equ	0xFE2
 21179                           fsr1l	equ	0xFE1
 21180                           indf2	equ	0xFDF
 21181                           postinc2	equ	0xFDE
 21182                           postdec2	equ	0xFDD
 21183                           plusw2	equ	0xFDB
 21184                           fsr2h	equ	0xFDA
 21185                           fsr2l	equ	0xFD9
 21186                           status	equ	0xFD8
 21187                           
 21188 ;; *************** function _interrupt_at_low_vector *****************
 21189 ;; Defined at:
 21190 ;;		line 166 in file "../main.c"
 21191 ;; Parameters:    Size  Location     Type
 21192 ;;		None
 21193 ;; Auto vars:     Size  Location     Type
 21194 ;;		None
 21195 ;; Return value:  Size  Location     Type
 21196 ;;		None               void
 21197 ;; Registers used:
 21198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21199 ;; Tracked objects:
 21200 ;;		On entry : 0/0
 21201 ;;		On exit  : 0/0
 21202 ;;		Unchanged: 0/0
 21203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21204 ;;      Params:         0       0       0       0       0       0       0
 21205 ;;      Locals:         0       0       0       0       0       0       0
 21206 ;;      Temps:          9       0       0       0       0       0       0
 21207 ;;      Totals:         9       0       0       0       0       0       0
 21208 ;;Total ram usage:        9 bytes
 21209 ;; Hardware stack levels used:    1
 21210 ;; Hardware stack levels required when called:    1
 21211 ;; This function calls:
 21212 ;;		i1_ConvertADC
 21213 ;;		i1_WriteTimer0
 21214 ;; This function is called by:
 21215 ;;		Interrupt level 1
 21216 ;; This function uses a non-reentrant model
 21217 ;;
 21218                           
 21219                           	psect	intcodelo
 21220  000018                     __pintcodelo:
 21221                           	opt stack 0
 21222  000018                     _interrupt_at_low_vector:
 21223                           	opt stack 22
 21224                           
 21225                           ;incstack = 0
 21226  000018  CFD8 F007          	movff	status,??_interrupt_at_low_vector+2
 21227  00001C  CFE8 F008          	movff	wreg,??_interrupt_at_low_vector+3
 21228  000020  CFE0 F009          	movff	bsr,??_interrupt_at_low_vector+4
 21229  000024  CFD9 F00A          	movff	fsr2l,??_interrupt_at_low_vector+5
 21230  000028  CFDA F00B          	movff	fsr2h,??_interrupt_at_low_vector+6
 21231  00002C  CFF3 F00C          	movff	prodl,??_interrupt_at_low_vector+7
 21232  000030  CFF4 F00D          	movff	prodh,??_interrupt_at_low_vector+8
 21233  000034                     
 21234                           ;main.c: 168: if (INTCONbits.TMR0IF) {
 21235  000034  A4F2               	btfss	intcon,2,c	;volatile
 21236  000036  D001               	goto	i1u720_21
 21237  000038  D001               	goto	i1u720_20
 21238  00003A                     i1u720_21:
 21239  00003A  D047               	goto	i1l10355
 21240  00003C                     i1u720_20:
 21241  00003C                     
 21242                           ;main.c: 171: WriteTimer0(0xfb1d);
 21243  00003C  0EFB               	movlw	251
 21244  00003E  6E02               	movwf	?i1_WriteTimer0+1,c
 21245  000040  0E1D               	movlw	29
 21246  000042  6E01               	movwf	?i1_WriteTimer0,c
 21247  000044  ECA1  F02B         	call	i1_WriteTimer0	;wreg free
 21248  000048                     
 21249                           ;main.c: 173: vscp_timer++;
 21250  000048  0101               	movlb	1	; () banked
 21251  00004A  4B1E               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 21252  00004C  2B1F               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 21253  00004E                     
 21254                           ; BSR set to: 1
 21255                           ;main.c: 174: vscp_configtimer++;
 21256  00004E  4B1C               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 21257  000050  2B1D               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 21258  000052                     
 21259                           ; BSR set to: 1
 21260                           ;main.c: 175: measurement_clock++;
 21261  000052  0E01               	movlw	1
 21262  000054  2712               	addwf	_measurement_clock& (0+255),f,b	;volatile
 21263  000056  0E00               	movlw	0
 21264  000058  2313               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 21265  00005A  0E00               	movlw	0
 21266  00005C  2314               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 21267  00005E  0E00               	movlw	0
 21268  000060  2315               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 21269  000062                     
 21270                           ; BSR set to: 1
 21271                           ;main.c: 176: timeout_clock++;
 21272  000062  0E01               	movlw	1
 21273  000064  2716               	addwf	_timeout_clock& (0+255),f,b	;volatile
 21274  000066  0E00               	movlw	0
 21275  000068  2317               	addwfc	(_timeout_clock+1)& (0+255),f,b	;volatile
 21276  00006A  0E00               	movlw	0
 21277  00006C  2318               	addwfc	(_timeout_clock+2)& (0+255),f,b	;volatile
 21278  00006E  0E00               	movlw	0
 21279  000070  2319               	addwfc	(_timeout_clock+3)& (0+255),f,b	;volatile
 21280  000072                     
 21281                           ; BSR set to: 1
 21282                           ;main.c: 177: sendTimer++;
 21283  000072  4B1A               	infsnz	_sendTimer& (0+255),f,b	;volatile
 21284  000074  2B1B               	incf	(_sendTimer+1)& (0+255),f,b	;volatile
 21285  000076                     
 21286                           ; BSR set to: 1
 21287                           ;main.c: 180: if (!(PORTC & 0x01)) {
 21288  000076  B082               	btfsc	3970,0,c	;volatile
 21289  000078  D001               	goto	i1u721_21
 21290  00007A  D001               	goto	i1u721_20
 21291  00007C                     i1u721_21:
 21292  00007C  D003               	goto	i1l142
 21293  00007E                     i1u721_20:
 21294  00007E                     
 21295                           ; BSR set to: 1
 21296                           ;main.c: 182: vscp_initbtncnt++;
 21297  00007E  0100               	movlb	0	; () banked
 21298  000080  2BBA               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 21299                           
 21300                           ;main.c: 183: }
 21301  000082  D002               	goto	i1l10329
 21302  000084                     i1l142:
 21303                           
 21304                           ; BSR set to: 1
 21305                           ;main.c: 184: else {
 21306                           ;main.c: 185: vscp_initbtncnt = 0;
 21307  000084  0100               	movlb	0	; () banked
 21308  000086  6BBA               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 21309  000088                     i1l10329:
 21310                           
 21311                           ; BSR set to: 0
 21312                           ;main.c: 186: }
 21313                           ;main.c: 189: vscp_statuscnt++;
 21314  000088  2A52               	incf	_vscp_statuscnt,f,c	;volatile
 21315  00008A                     
 21316                           ; BSR set to: 0
 21317                           ;main.c: 190: if ( ( 0x02 ==
 21318                           ;main.c: 191: vscp_initledfunc) && (vscp_statuscnt > 100)) {
 21319  00008A  504D               	movf	_vscp_initledfunc,w,c
 21320  00008C  0A02               	xorlw	2
 21321  00008E  A4D8               	btfss	status,2,c
 21322  000090  D001               	goto	i1u722_21
 21323  000092  D001               	goto	i1u722_20
 21324  000094                     i1u722_21:
 21325  000094  D00E               	goto	i1l10343
 21326  000096                     i1u722_20:
 21327  000096                     
 21328                           ; BSR set to: 0
 21329  000096  0E64               	movlw	100
 21330  000098  6452               	cpfsgt	_vscp_statuscnt,c	;volatile
 21331  00009A  D001               	goto	i1u723_21
 21332  00009C  D001               	goto	i1u723_20
 21333  00009E                     i1u723_21:
 21334  00009E  D009               	goto	i1l10343
 21335  0000A0                     i1u723_20:
 21336  0000A0                     
 21337                           ; BSR set to: 0
 21338                           ;main.c: 192: if ( PORTC & 0x02 ) {
 21339  0000A0  A282               	btfss	3970,1,c	;volatile
 21340  0000A2  D001               	goto	i1u724_21
 21341  0000A4  D001               	goto	i1u724_20
 21342  0000A6                     i1u724_21:
 21343  0000A6  D002               	goto	i1l10339
 21344  0000A8                     i1u724_20:
 21345  0000A8                     i1l10337:
 21346                           
 21347                           ; BSR set to: 0
 21348                           ;main.c: 193: PORTC &= ~0x02;
 21349  0000A8  9282               	bcf	3970,1,c	;volatile
 21350                           
 21351                           ;main.c: 194: }
 21352  0000AA  D001               	goto	i1l10341
 21353  0000AC                     i1l10339:
 21354                           
 21355                           ; BSR set to: 0
 21356                           ;main.c: 195: else {
 21357                           ;main.c: 196: PORTC |= 0x02;
 21358  0000AC  8282               	bsf	3970,1,c	;volatile
 21359  0000AE                     i1l10341:
 21360                           
 21361                           ; BSR set to: 0
 21362                           ;main.c: 197: }
 21363                           ;main.c: 198: vscp_statuscnt = 0;
 21364  0000AE  6A52               	clrf	_vscp_statuscnt,c	;volatile
 21365                           
 21366                           ;main.c: 199: }
 21367  0000B0  D00B               	goto	i1l10353
 21368  0000B2                     i1l10343:
 21369                           
 21370                           ; BSR set to: 0
 21371                           ;main.c: 200: else if (0x01 == vscp_initledfunc) {
 21372  0000B2  044D               	decf	_vscp_initledfunc,w,c
 21373  0000B4  A4D8               	btfss	status,2,c
 21374  0000B6  D001               	goto	i1u725_21
 21375  0000B8  D001               	goto	i1u725_20
 21376  0000BA                     i1u725_21:
 21377  0000BA  D001               	goto	i1l148
 21378  0000BC                     i1u725_20:
 21379  0000BC  D7F7               	goto	i1l10339
 21380  0000BE                     i1l148:
 21381                           
 21382                           ; BSR set to: 0
 21383                           ;main.c: 204: else if (0x00 == vscp_initledfunc) {
 21384  0000BE  664D               	tstfsz	_vscp_initledfunc,c
 21385  0000C0  D001               	goto	i1u726_21
 21386  0000C2  D001               	goto	i1u726_20
 21387  0000C4                     i1u726_21:
 21388  0000C4  D001               	goto	i1l10353
 21389  0000C6                     i1u726_20:
 21390  0000C6  D7F0               	goto	i1l10337
 21391  0000C8                     i1l10353:
 21392                           
 21393                           ; BSR set to: 0
 21394                           ;main.c: 207: }
 21395                           ;main.c: 209: INTCONbits.TMR0IF = 0;
 21396  0000C8  94F2               	bcf	intcon,2,c	;volatile
 21397  0000CA                     i1l10355:
 21398                           
 21399                           ;main.c: 211: }
 21400                           ;main.c: 214: if ( PIR1bits.ADIF ) {
 21401  0000CA  AC9E               	btfss	3998,6,c	;volatile
 21402  0000CC  D001               	goto	i1u727_21
 21403  0000CE  D001               	goto	i1u727_20
 21404  0000D0                     i1u727_21:
 21405  0000D0  D0E5               	goto	i1l168
 21406  0000D2                     i1u727_20:
 21407  0000D2  D0C4               	goto	i1l10417
 21408  0000D4                     i1l10359:
 21409                           
 21410                           ;main.c: 220: adc[(12 * adc_series_counter) + 0] = ADRESH;
 21411  0000D4  5049               	movf	_adc_series_counter,w,c
 21412  0000D6  0D0C               	mullw	12
 21413  0000D8  0E9E               	movlw	low _adc
 21414  0000DA  24F3               	addwf	prodl,w,c
 21415  0000DC  6ED9               	movwf	fsr2l,c
 21416  0000DE  0E01               	movlw	high _adc
 21417  0000E0  20F4               	addwfc	prodh,w,c
 21418  0000E2  6EDA               	movwf	fsr2h,c
 21419  0000E4  CFC4 FFDF          	movff	4036,indf2	;volatile
 21420                           
 21421                           ;main.c: 221: adc[(12 * adc_series_counter) + 1] = ADRESL;
 21422  0000E8  5049               	movf	_adc_series_counter,w,c
 21423  0000EA  0D0C               	mullw	12
 21424  0000EC  0E9F               	movlw	low (_adc+1)
 21425  0000EE  24F3               	addwf	prodl,w,c
 21426  0000F0  6ED9               	movwf	fsr2l,c
 21427  0000F2  0E01               	movlw	high (_adc+1)
 21428  0000F4  20F4               	addwfc	prodh,w,c
 21429  0000F6  6EDA               	movwf	fsr2h,c
 21430  0000F8  CFC3 FFDF          	movff	4035,indf2	;volatile
 21431  0000FC                     
 21432                           ;main.c: 223: ADCON0 = (2<<2) + 1;
 21433  0000FC  0E09               	movlw	9
 21434  0000FE  6EC2               	movwf	4034,c	;volatile
 21435  000100                     
 21436                           ;main.c: 227: if ((80 - 1) == adc_series_counter) {
 21437  000100  5049               	movf	_adc_series_counter,w,c
 21438  000102  0A4F               	xorlw	79
 21439  000104  A4D8               	btfss	status,2,c
 21440  000106  D001               	goto	i1u728_21
 21441  000108  D001               	goto	i1u728_20
 21442  00010A                     i1u728_21:
 21443  00010A  D0C5               	goto	i1l10419
 21444  00010C                     i1u728_20:
 21445  00010C                     
 21446                           ;main.c: 228: adc_conversion_flags |= 1;
 21447  00010C  0100               	movlb	0	; () banked
 21448  00010E  81B6               	bsf	_adc_conversion_flags& (0+255),0,b
 21449  000110  D0C2               	goto	i1l10419
 21450  000112                     i1l10367:
 21451                           
 21452                           ;main.c: 234: adc[(12 * adc_series_counter) + 2] = ADRESH;
 21453  000112  5049               	movf	_adc_series_counter,w,c
 21454  000114  0D0C               	mullw	12
 21455  000116  0EA0               	movlw	low (_adc+2)
 21456  000118  24F3               	addwf	prodl,w,c
 21457  00011A  6ED9               	movwf	fsr2l,c
 21458  00011C  0E01               	movlw	high (_adc+2)
 21459  00011E  20F4               	addwfc	prodh,w,c
 21460  000120  6EDA               	movwf	fsr2h,c
 21461  000122  CFC4 FFDF          	movff	4036,indf2	;volatile
 21462                           
 21463                           ;main.c: 235: adc[(12 * adc_series_counter) + 3] = ADRESL;
 21464  000126  5049               	movf	_adc_series_counter,w,c
 21465  000128  0D0C               	mullw	12
 21466  00012A  0EA1               	movlw	low (_adc+3)
 21467  00012C  24F3               	addwf	prodl,w,c
 21468  00012E  6ED9               	movwf	fsr2l,c
 21469  000130  0E01               	movlw	high (_adc+3)
 21470  000132  20F4               	addwfc	prodh,w,c
 21471  000134  6EDA               	movwf	fsr2h,c
 21472  000136  CFC3 FFDF          	movff	4035,indf2	;volatile
 21473  00013A                     
 21474                           ;main.c: 238: ADCON0 = (1<<2) + 1;
 21475  00013A  0E05               	movlw	5
 21476  00013C  6EC2               	movwf	4034,c	;volatile
 21477  00013E                     
 21478                           ;main.c: 242: if ((80 - 1) == adc_series_counter) {
 21479  00013E  5049               	movf	_adc_series_counter,w,c
 21480  000140  0A4F               	xorlw	79
 21481  000142  A4D8               	btfss	status,2,c
 21482  000144  D001               	goto	i1u729_21
 21483  000146  D001               	goto	i1u729_20
 21484  000148                     i1u729_21:
 21485  000148  D0A6               	goto	i1l10419
 21486  00014A                     i1u729_20:
 21487  00014A                     
 21488                           ;main.c: 243: adc_conversion_flags |= 1 << 1;
 21489  00014A  0100               	movlb	0	; () banked
 21490  00014C  83B6               	bsf	_adc_conversion_flags& (0+255),1,b
 21491  00014E  D0A3               	goto	i1l10419
 21492  000150                     i1l10375:
 21493                           
 21494                           ;main.c: 249: adc[(12 * adc_series_counter) + 4] = ADRESH;
 21495  000150  5049               	movf	_adc_series_counter,w,c
 21496  000152  0D0C               	mullw	12
 21497  000154  0EA2               	movlw	low (_adc+4)
 21498  000156  24F3               	addwf	prodl,w,c
 21499  000158  6ED9               	movwf	fsr2l,c
 21500  00015A  0E01               	movlw	high (_adc+4)
 21501  00015C  20F4               	addwfc	prodh,w,c
 21502  00015E  6EDA               	movwf	fsr2h,c
 21503  000160  CFC4 FFDF          	movff	4036,indf2	;volatile
 21504                           
 21505                           ;main.c: 250: adc[(12 * adc_series_counter) + 5] = ADRESL;
 21506  000164  5049               	movf	_adc_series_counter,w,c
 21507  000166  0D0C               	mullw	12
 21508  000168  0EA3               	movlw	low (_adc+5)
 21509  00016A  24F3               	addwf	prodl,w,c
 21510  00016C  6ED9               	movwf	fsr2l,c
 21511  00016E  0E01               	movlw	high (_adc+5)
 21512  000170  20F4               	addwfc	prodh,w,c
 21513  000172  6EDA               	movwf	fsr2h,c
 21514  000174  CFC3 FFDF          	movff	4035,indf2	;volatile
 21515  000178                     
 21516                           ;main.c: 253: ADCON0 = (0<<2) + 1;
 21517  000178  0E01               	movlw	1
 21518  00017A  6EC2               	movwf	4034,c	;volatile
 21519  00017C                     
 21520                           ;main.c: 257: if ((80 - 1) == adc_series_counter) {
 21521  00017C  5049               	movf	_adc_series_counter,w,c
 21522  00017E  0A4F               	xorlw	79
 21523  000180  A4D8               	btfss	status,2,c
 21524  000182  D001               	goto	i1u730_21
 21525  000184  D001               	goto	i1u730_20
 21526  000186                     i1u730_21:
 21527  000186  D087               	goto	i1l10419
 21528  000188                     i1u730_20:
 21529  000188                     
 21530                           ;main.c: 258: adc_conversion_flags |= 1 << 2;
 21531  000188  0100               	movlb	0	; () banked
 21532  00018A  85B6               	bsf	_adc_conversion_flags& (0+255),2,b
 21533  00018C  D084               	goto	i1l10419
 21534  00018E                     i1l10383:
 21535                           
 21536                           ;main.c: 264: adc[(12 * adc_series_counter) + 6] = ADRESH;
 21537  00018E  5049               	movf	_adc_series_counter,w,c
 21538  000190  0D0C               	mullw	12
 21539  000192  0EA4               	movlw	low (_adc+6)
 21540  000194  24F3               	addwf	prodl,w,c
 21541  000196  6ED9               	movwf	fsr2l,c
 21542  000198  0E01               	movlw	high (_adc+6)
 21543  00019A  20F4               	addwfc	prodh,w,c
 21544  00019C  6EDA               	movwf	fsr2h,c
 21545  00019E  CFC4 FFDF          	movff	4036,indf2	;volatile
 21546                           
 21547                           ;main.c: 265: adc[(12 * adc_series_counter) + 7] = ADRESL;
 21548  0001A2  5049               	movf	_adc_series_counter,w,c
 21549  0001A4  0D0C               	mullw	12
 21550  0001A6  0EA5               	movlw	low (_adc+7)
 21551  0001A8  24F3               	addwf	prodl,w,c
 21552  0001AA  6ED9               	movwf	fsr2l,c
 21553  0001AC  0E01               	movlw	high (_adc+7)
 21554  0001AE  20F4               	addwfc	prodh,w,c
 21555  0001B0  6EDA               	movwf	fsr2h,c
 21556  0001B2  CFC3 FFDF          	movff	4035,indf2	;volatile
 21557  0001B6                     
 21558                           ;main.c: 267: ADCON0 = (9<<2) + 1;
 21559  0001B6  0E25               	movlw	37
 21560  0001B8  6EC2               	movwf	4034,c	;volatile
 21561  0001BA                     
 21562                           ;main.c: 271: if ((80 - 1) == adc_series_counter) {
 21563  0001BA  5049               	movf	_adc_series_counter,w,c
 21564  0001BC  0A4F               	xorlw	79
 21565  0001BE  A4D8               	btfss	status,2,c
 21566  0001C0  D001               	goto	i1u731_21
 21567  0001C2  D001               	goto	i1u731_20
 21568  0001C4                     i1u731_21:
 21569  0001C4  D068               	goto	i1l10419
 21570  0001C6                     i1u731_20:
 21571  0001C6                     
 21572                           ;main.c: 272: adc_conversion_flags |= 1 << 3;
 21573  0001C6  0100               	movlb	0	; () banked
 21574  0001C8  87B6               	bsf	_adc_conversion_flags& (0+255),3,b
 21575  0001CA  D065               	goto	i1l10419
 21576  0001CC                     i1l10391:
 21577                           
 21578                           ;main.c: 278: adc[(12 * adc_series_counter) + 8] = ADRESH;
 21579  0001CC  5049               	movf	_adc_series_counter,w,c
 21580  0001CE  0D0C               	mullw	12
 21581  0001D0  0EA6               	movlw	low (_adc+8)
 21582  0001D2  24F3               	addwf	prodl,w,c
 21583  0001D4  6ED9               	movwf	fsr2l,c
 21584  0001D6  0E01               	movlw	high (_adc+8)
 21585  0001D8  20F4               	addwfc	prodh,w,c
 21586  0001DA  6EDA               	movwf	fsr2h,c
 21587  0001DC  CFC4 FFDF          	movff	4036,indf2	;volatile
 21588                           
 21589                           ;main.c: 279: adc[(12 * adc_series_counter) + 9] = ADRESL;
 21590  0001E0  5049               	movf	_adc_series_counter,w,c
 21591  0001E2  0D0C               	mullw	12
 21592  0001E4  0EA7               	movlw	low (_adc+9)
 21593  0001E6  24F3               	addwf	prodl,w,c
 21594  0001E8  6ED9               	movwf	fsr2l,c
 21595  0001EA  0E01               	movlw	high (_adc+9)
 21596  0001EC  20F4               	addwfc	prodh,w,c
 21597  0001EE  6EDA               	movwf	fsr2h,c
 21598  0001F0  CFC3 FFDF          	movff	4035,indf2	;volatile
 21599  0001F4                     
 21600                           ;main.c: 281: ADCON0 = (8<<2) + 1;
 21601  0001F4  0E21               	movlw	33
 21602  0001F6  6EC2               	movwf	4034,c	;volatile
 21603  0001F8                     
 21604                           ;main.c: 285: if ((80 - 1) == adc_series_counter) {
 21605  0001F8  5049               	movf	_adc_series_counter,w,c
 21606  0001FA  0A4F               	xorlw	79
 21607  0001FC  A4D8               	btfss	status,2,c
 21608  0001FE  D001               	goto	i1u732_21
 21609  000200  D001               	goto	i1u732_20
 21610  000202                     i1u732_21:
 21611  000202  D049               	goto	i1l10419
 21612  000204                     i1u732_20:
 21613  000204                     
 21614                           ;main.c: 286: adc_conversion_flags |= 1 << 4;
 21615  000204  0100               	movlb	0	; () banked
 21616  000206  89B6               	bsf	_adc_conversion_flags& (0+255),4,b
 21617  000208  D046               	goto	i1l10419
 21618  00020A                     i1l10399:
 21619                           
 21620                           ;main.c: 292: adc[(12 * adc_series_counter) + 10] = ADRESH;
 21621  00020A  5049               	movf	_adc_series_counter,w,c
 21622  00020C  0D0C               	mullw	12
 21623  00020E  0EA8               	movlw	low (_adc+10)
 21624  000210  24F3               	addwf	prodl,w,c
 21625  000212  6ED9               	movwf	fsr2l,c
 21626  000214  0E01               	movlw	high (_adc+10)
 21627  000216  20F4               	addwfc	prodh,w,c
 21628  000218  6EDA               	movwf	fsr2h,c
 21629  00021A  CFC4 FFDF          	movff	4036,indf2	;volatile
 21630                           
 21631                           ;main.c: 293: adc[(12 * adc_series_counter) + 11] = ADRESL;
 21632  00021E  5049               	movf	_adc_series_counter,w,c
 21633  000220  0D0C               	mullw	12
 21634  000222  0EA9               	movlw	low (_adc+11)
 21635  000224  24F3               	addwf	prodl,w,c
 21636  000226  6ED9               	movwf	fsr2l,c
 21637  000228  0E01               	movlw	high (_adc+11)
 21638  00022A  20F4               	addwfc	prodh,w,c
 21639  00022C  6EDA               	movwf	fsr2h,c
 21640  00022E  CFC3 FFDF          	movff	4035,indf2	;volatile
 21641  000232                     
 21642                           ;main.c: 295: ADCON0 = (10<<2) + 1;
 21643  000232  0E29               	movlw	41
 21644  000234  6EC2               	movwf	4034,c	;volatile
 21645  000236                     
 21646                           ;main.c: 299: if ((80 - 1) == adc_series_counter) {
 21647  000236  5049               	movf	_adc_series_counter,w,c
 21648  000238  0A4F               	xorlw	79
 21649  00023A  A4D8               	btfss	status,2,c
 21650  00023C  D001               	goto	i1u733_21
 21651  00023E  D001               	goto	i1u733_20
 21652  000240                     i1u733_21:
 21653  000240  D002               	goto	i1l165
 21654  000242                     i1u733_20:
 21655  000242                     
 21656                           ;main.c: 300: adc_conversion_flags |= 1 << 5;
 21657  000242  0100               	movlb	0	; () banked
 21658  000244  8BB6               	bsf	_adc_conversion_flags& (0+255),5,b
 21659  000246                     i1l165:
 21660                           
 21661                           ;main.c: 301: }
 21662                           ;main.c: 304: adc_series_counter++;
 21663  000246  2A49               	incf	_adc_series_counter,f,c
 21664  000248                     
 21665                           ;main.c: 305: if (adc_series_counter >= 80) {
 21666  000248  0E4F               	movlw	79
 21667  00024A  6449               	cpfsgt	_adc_series_counter,c
 21668  00024C  D001               	goto	i1u734_21
 21669  00024E  D001               	goto	i1u734_20
 21670  000250                     i1u734_21:
 21671  000250  D022               	goto	i1l10419
 21672  000252                     i1u734_20:
 21673  000252                     i1l10409:
 21674                           
 21675                           ;main.c: 306: adc_series_counter = 0;
 21676  000252  6A49               	clrf	_adc_series_counter,c
 21677  000254  D020               	goto	i1l10419
 21678  000256                     i1l10411:
 21679                           
 21680                           ;main.c: 312: ADCON0 = (10<<2) + 1;
 21681  000256  0E29               	movlw	41
 21682  000258  6EC2               	movwf	4034,c	;volatile
 21683  00025A  D7FB               	goto	i1l10409
 21684  00025C                     i1l10417:
 21685  00025C  50C2               	movf	4034,w,c	;volatile
 21686  00025E  0B3C               	andlw	60
 21687  000260  6E05               	movwf	??_interrupt_at_low_vector& (0+255),c
 21688  000262  6A06               	clrf	(??_interrupt_at_low_vector+1)& (0+255),c
 21689                           
 21690                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21691                           ; Switch size 1, requested type "space"
 21692                           ; Number of cases is 1, Range of values is 0 to 0
 21693                           ; switch strategies available:
 21694                           ; Name         Instructions Cycles
 21695                           ; simple_byte            4     3 (average)
 21696                           ;	Chosen strategy is simple_byte
 21697  000264  5006               	movf	??_interrupt_at_low_vector+1,w,c
 21698  000266  0A00               	xorlw	0	; case 0
 21699  000268  B4D8               	btfsc	status,2,c
 21700  00026A  D001               	goto	i1l13611
 21701  00026C  D7F4               	goto	i1l10411
 21702  00026E                     i1l13611:
 21703                           
 21704                           ; Switch size 1, requested type "space"
 21705                           ; Number of cases is 6, Range of values is 0 to 40
 21706                           ; switch strategies available:
 21707                           ; Name         Instructions Cycles
 21708                           ; simple_byte           19    10 (average)
 21709                           ;	Chosen strategy is simple_byte
 21710  00026E  5005               	movf	??_interrupt_at_low_vector,w,c
 21711  000270  0A00               	xorlw	0	; case 0
 21712  000272  B4D8               	btfsc	status,2,c
 21713  000274  D78C               	goto	i1l10383
 21714  000276  0A04               	xorlw	4	; case 4
 21715  000278  B4D8               	btfsc	status,2,c
 21716  00027A  D76A               	goto	i1l10375
 21717  00027C  0A0C               	xorlw	12	; case 8
 21718  00027E  B4D8               	btfsc	status,2,c
 21719  000280  D748               	goto	i1l10367
 21720  000282  0A28               	xorlw	40	; case 32
 21721  000284  B4D8               	btfsc	status,2,c
 21722  000286  D7C1               	goto	i1l10399
 21723  000288  0A04               	xorlw	4	; case 36
 21724  00028A  B4D8               	btfsc	status,2,c
 21725  00028C  D79F               	goto	i1l10391
 21726  00028E  0A0C               	xorlw	12	; case 40
 21727  000290  B4D8               	btfsc	status,2,c
 21728  000292  D720               	goto	i1l10359
 21729  000294  D7E0               	goto	i1l10411
 21730  000296                     i1l10419:
 21731                           
 21732                           ;main.c: 318: ConvertADC();
 21733  000296  ECD0  F02B         	call	i1_ConvertADC	;wreg free
 21734  00029A                     
 21735                           ;main.c: 320: PIR1bits.ADIF = 0;
 21736  00029A  9C9E               	bcf	3998,6,c	;volatile
 21737  00029C                     i1l168:
 21738  00029C  C00D  FFF4         	movff	??_interrupt_at_low_vector+8,prodh
 21739  0002A0  C00C  FFF3         	movff	??_interrupt_at_low_vector+7,prodl
 21740  0002A4  C00B  FFDA         	movff	??_interrupt_at_low_vector+6,fsr2h
 21741  0002A8  C00A  FFD9         	movff	??_interrupt_at_low_vector+5,fsr2l
 21742  0002AC  C009  FFE0         	movff	??_interrupt_at_low_vector+4,bsr
 21743  0002B0  C008  FFE8         	movff	??_interrupt_at_low_vector+3,wreg
 21744  0002B4  C007  FFD8         	movff	??_interrupt_at_low_vector+2,status
 21745  0002B8  0010               	retfie	
 21746  0002BA                     __end_of_interrupt_at_low_vector:
 21747                           	opt stack 0
 21748                           tblptru	equ	0xFF8
 21749                           tblptrh	equ	0xFF7
 21750                           tblptrl	equ	0xFF6
 21751                           tablat	equ	0xFF5
 21752                           prodh	equ	0xFF4
 21753                           prodl	equ	0xFF3
 21754                           intcon	equ	0xFF2
 21755                           postinc0	equ	0xFEE
 21756                           wreg	equ	0xFE8
 21757                           indf1	equ	0xFE7
 21758                           postdec1	equ	0xFE5
 21759                           fsr1h	equ	0xFE2
 21760                           fsr1l	equ	0xFE1
 21761                           bsr	equ	0xFE0
 21762                           indf2	equ	0xFDF
 21763                           postinc2	equ	0xFDE
 21764                           postdec2	equ	0xFDD
 21765                           plusw2	equ	0xFDB
 21766                           fsr2h	equ	0xFDA
 21767                           fsr2l	equ	0xFD9
 21768                           status	equ	0xFD8
 21769                           
 21770 ;; *************** function i1_WriteTimer0 *****************
 21771 ;; Defined at:
 21772 ;;		line 17 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/Timers/t0write.c"
 21773 ;; Parameters:    Size  Location     Type
 21774 ;;  timer0          2    0[COMRAM] unsigned int 
 21775 ;; Auto vars:     Size  Location     Type
 21776 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 21777 ;; Return value:  Size  Location     Type
 21778 ;;		None               void
 21779 ;; Registers used:
 21780 ;;		None
 21781 ;; Tracked objects:
 21782 ;;		On entry : 0/0
 21783 ;;		On exit  : 0/0
 21784 ;;		Unchanged: 0/0
 21785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21786 ;;      Params:         2       0       0       0       0       0       0
 21787 ;;      Locals:         2       0       0       0       0       0       0
 21788 ;;      Temps:          0       0       0       0       0       0       0
 21789 ;;      Totals:         4       0       0       0       0       0       0
 21790 ;;Total ram usage:        4 bytes
 21791 ;; Hardware stack levels used:    1
 21792 ;; This function calls:
 21793 ;;		Nothing
 21794 ;; This function is called by:
 21795 ;;		_interrupt_at_low_vector
 21796 ;; This function uses a non-reentrant model
 21797 ;;
 21798                           
 21799                           	psect	text101
 21800  005742                     __ptext101:
 21801                           	opt stack 0
 21802  005742                     i1_WriteTimer0:
 21803                           	opt stack 22
 21804                           
 21805                           ;incstack = 0
 21806                           ;incstack = 0
 21807  005742  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 21808  005746  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 21809  00574A  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 21810  00574E  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 21811  005752  0012               	return	
 21812  005754                     __end_ofi1_WriteTimer0:
 21813                           	opt stack 0
 21814                           tblptru	equ	0xFF8
 21815                           tblptrh	equ	0xFF7
 21816                           tblptrl	equ	0xFF6
 21817                           tablat	equ	0xFF5
 21818                           prodh	equ	0xFF4
 21819                           prodl	equ	0xFF3
 21820                           intcon	equ	0xFF2
 21821                           postinc0	equ	0xFEE
 21822                           wreg	equ	0xFE8
 21823                           indf1	equ	0xFE7
 21824                           postdec1	equ	0xFE5
 21825                           fsr1h	equ	0xFE2
 21826                           fsr1l	equ	0xFE1
 21827                           bsr	equ	0xFE0
 21828                           indf2	equ	0xFDF
 21829                           postinc2	equ	0xFDE
 21830                           postdec2	equ	0xFDD
 21831                           plusw2	equ	0xFDB
 21832                           fsr2h	equ	0xFDA
 21833                           fsr2l	equ	0xFD9
 21834                           status	equ	0xFD8
 21835                           
 21836 ;; *************** function i1_ConvertADC *****************
 21837 ;; Defined at:
 21838 ;;		line 23 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/ADC/adcconv.c"
 21839 ;; Parameters:    Size  Location     Type
 21840 ;;		None
 21841 ;; Auto vars:     Size  Location     Type
 21842 ;;		None
 21843 ;; Return value:  Size  Location     Type
 21844 ;;		None               void
 21845 ;; Registers used:
 21846 ;;		None
 21847 ;; Tracked objects:
 21848 ;;		On entry : 0/0
 21849 ;;		On exit  : 0/0
 21850 ;;		Unchanged: 0/0
 21851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21852 ;;      Params:         0       0       0       0       0       0       0
 21853 ;;      Locals:         0       0       0       0       0       0       0
 21854 ;;      Temps:          0       0       0       0       0       0       0
 21855 ;;      Totals:         0       0       0       0       0       0       0
 21856 ;;Total ram usage:        0 bytes
 21857 ;; Hardware stack levels used:    1
 21858 ;; This function calls:
 21859 ;;		Nothing
 21860 ;; This function is called by:
 21861 ;;		_interrupt_at_low_vector
 21862 ;; This function uses a non-reentrant model
 21863 ;;
 21864                           
 21865                           	psect	text102
 21866  0057A0                     __ptext102:
 21867                           	opt stack 0
 21868  0057A0                     i1_ConvertADC:
 21869                           	opt stack 22
 21870                           
 21871                           ;incstack = 0
 21872                           ;incstack = 0
 21873  0057A0  82C2               	bsf	4034,1,c	;volatile
 21874  0057A2  0012               	return	
 21875  0057A4                     __end_ofi1_ConvertADC:
 21876                           	opt stack 0
 21877                           tblptru	equ	0xFF8
 21878                           tblptrh	equ	0xFF7
 21879                           tblptrl	equ	0xFF6
 21880                           tablat	equ	0xFF5
 21881                           prodh	equ	0xFF4
 21882                           prodl	equ	0xFF3
 21883                           intcon	equ	0xFF2
 21884                           postinc0	equ	0xFEE
 21885                           wreg	equ	0xFE8
 21886                           indf1	equ	0xFE7
 21887                           postdec1	equ	0xFE5
 21888                           fsr1h	equ	0xFE2
 21889                           fsr1l	equ	0xFE1
 21890                           bsr	equ	0xFE0
 21891                           indf2	equ	0xFDF
 21892                           postinc2	equ	0xFDE
 21893                           postdec2	equ	0xFDD
 21894                           plusw2	equ	0xFDB
 21895                           fsr2h	equ	0xFDA
 21896                           fsr2l	equ	0xFD9
 21897                           status	equ	0xFD8
 21898                           tblptru	equ	0xFF8
 21899                           tblptrh	equ	0xFF7
 21900                           tblptrl	equ	0xFF6
 21901                           tablat	equ	0xFF5
 21902                           prodh	equ	0xFF4
 21903                           prodl	equ	0xFF3
 21904                           intcon	equ	0xFF2
 21905                           postinc0	equ	0xFEE
 21906                           wreg	equ	0xFE8
 21907                           indf1	equ	0xFE7
 21908                           postdec1	equ	0xFE5
 21909                           fsr1h	equ	0xFE2
 21910                           fsr1l	equ	0xFE1
 21911                           bsr	equ	0xFE0
 21912                           indf2	equ	0xFDF
 21913                           postinc2	equ	0xFDE
 21914                           postdec2	equ	0xFDD
 21915                           plusw2	equ	0xFDB
 21916                           fsr2h	equ	0xFDA
 21917                           fsr2l	equ	0xFD9
 21918                           status	equ	0xFD8
 21919                           
 21920                           	psect	text103
 21921  000000                     __ptext103:
 21922                           	opt stack 0
 21923                           tblptru	equ	0xFF8
 21924                           tblptrh	equ	0xFF7
 21925                           tblptrl	equ	0xFF6
 21926                           tablat	equ	0xFF5
 21927                           prodh	equ	0xFF4
 21928                           prodl	equ	0xFF3
 21929                           intcon	equ	0xFF2
 21930                           postinc0	equ	0xFEE
 21931                           wreg	equ	0xFE8
 21932                           indf1	equ	0xFE7
 21933                           postdec1	equ	0xFE5
 21934                           fsr1h	equ	0xFE2
 21935                           fsr1l	equ	0xFE1
 21936                           bsr	equ	0xFE0
 21937                           indf2	equ	0xFDF
 21938                           postinc2	equ	0xFDE
 21939                           postdec2	equ	0xFDD
 21940                           plusw2	equ	0xFDB
 21941                           fsr2h	equ	0xFDA
 21942                           fsr2l	equ	0xFD9
 21943                           status	equ	0xFD8
 21944                           
 21945                           	psect	rparam
 21946  0000                     tblptru	equ	0xFF8
 21947                           tblptrh	equ	0xFF7
 21948                           tblptrl	equ	0xFF6
 21949                           tablat	equ	0xFF5
 21950                           prodh	equ	0xFF4
 21951                           prodl	equ	0xFF3
 21952                           intcon	equ	0xFF2
 21953                           postinc0	equ	0xFEE
 21954                           wreg	equ	0xFE8
 21955                           indf1	equ	0xFE7
 21956                           postdec1	equ	0xFE5
 21957                           fsr1h	equ	0xFE2
 21958                           fsr1l	equ	0xFE1
 21959                           bsr	equ	0xFE0
 21960                           indf2	equ	0xFDF
 21961                           postinc2	equ	0xFDE
 21962                           postdec2	equ	0xFDD
 21963                           plusw2	equ	0xFDB
 21964                           fsr2h	equ	0xFDA
 21965                           fsr2l	equ	0xFD9
 21966                           status	equ	0xFD8
 21967                           tblptru	equ	0xFF8
 21968                           tblptrh	equ	0xFF7
 21969                           tblptrl	equ	0xFF6
 21970                           tablat	equ	0xFF5
 21971                           prodh	equ	0xFF4
 21972                           prodl	equ	0xFF3
 21973                           intcon	equ	0xFF2
 21974                           postinc0	equ	0xFEE
 21975                           wreg	equ	0xFE8
 21976                           indf1	equ	0xFE7
 21977                           postdec1	equ	0xFE5
 21978                           fsr1h	equ	0xFE2
 21979                           fsr1l	equ	0xFE1
 21980                           bsr	equ	0xFE0
 21981                           indf2	equ	0xFDF
 21982                           postinc2	equ	0xFDE
 21983                           postdec2	equ	0xFDD
 21984                           plusw2	equ	0xFDB
 21985                           fsr2h	equ	0xFDA
 21986                           fsr2l	equ	0xFD9
 21987                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    108
    Data        0
    BSS         1114
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     69      82
    BANK0           160     86     121
    BANK1           256     52     158
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_frexp	PTR unsigned char  size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_ldexp	PTR unsigned char  size(2) Largest target is 0

    ?_eval_poly	PTR unsigned char  size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_floor	PTR unsigned char  size(2) Largest target is 0

    ?___flneg	PTR unsigned char  size(2) Largest target is 0

    ?___asflmul	PTR unsigned char  size(2) Largest target is 0

    ?___flpack	PTR unsigned char  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_getCalibrationValue	short  size(2) Largest target is 0

    ?_Celsius2Fahrenheit	short  size(2) Largest target is 0

    ?___awtofl	short  size(2) Largest target is 0

    ?_Celsius2Kelvin	short  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?___fladd	unsigned int  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?___altofl	unsigned int  size(2) Largest target is 0

    ?___aldiv	long  size(2) Largest target is 0

    ?___fltol	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___asflsub	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?_log	long  size(2) Largest target is 0

    ?___flsub	long  size(2) Largest target is 0

    ?___flmul	long  size(2) Largest target is 0

    ?___fldiv	long  size(2) Largest target is 0

    ?_exp	long  size(2) Largest target is 0

    ?___asfldiv	long  size(2) Largest target is 0

    ?___asfladd	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___lwtofl	long  size(2) Largest target is 0

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    __asflsub@f1p	PTR  size(2) Largest target is 4
		 -> exp@x(BANK0[4]), doWork@temp(BANK1[4]), 

    __asflmul@mp	PTR  size(1) Largest target is 4
		 -> exp@x(BANK0[4]), 

    __asfldiv@f1p	PTR  size(2) Largest target is 4
		 -> doWork@avarage(BANK1[4]), 

    __asfladd@f1p	PTR  size(2) Largest target is 4
		 -> doWork@temp(BANK1[4]), doWork@avarage(BANK1[4]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_omsg(BANK0[14]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_omsg(BANK0[14]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_omsg(BANK0[14]), 

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_omsg(BANK0[14]), 


Critical Paths under _main in COMRAM

    _doWork->___fltol
    ___lwtofl->_Read_b_eep
    ___lwtofl->___flpack
    ___asfldiv->___fldiv
    ___asfladd->___fladd
    ___aldiv->___fltol
    _getCalibrationValue->_Read_b_eep
    _log->_eval_poly
    _exp->_ldexp
    _exp->___fltol
    _ldexp->_eval_poly
    _floor->___fltol
    ___altofl->___fltol
    ___fldiv->___fladd
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_Read_b_eep
    _vscp_getZone->_Read_b_eep
    _setEventData->___fltol
    _Celsius2Fahrenheit->___fldiv
    _Celsius2Kelvin->___fladd
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeStdReg->_vscp_getGUID
    _vscp_writeStdReg->_vscp_getUserID
    _vscp_writeStdReg->_vscp_getManufacturerId
    _vscp_setManufacturerId->_Write_b_eep
    _vscp_setUserID->_Write_b_eep
    _vscp_setGUID->_Write_b_eep
    _vscp_writeAppReg->_writeCoeffs2Ram
    _writeCoeffs2Ram->_Read_b_eep
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_getManufacturerId->_Read_b_eep
    _vscp_getUserID->_Read_b_eep
    _vscp_getGUID->_Read_b_eep
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_readNicknamePermanent->_Read_b_eep
    _Read_b_eep->___wmul
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_goBootloaderMode->_Write_b_eep
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_getControlByte
    _init_app_eeprom->_Write_b_eep
    _vscp_getControlByte->_Read_b_eep
    _vscp_setControlByte->_Write_b_eep
    _vscp_writeNicknamePermanent->_Write_b_eep
    _init->_OpenADC
    _ECANInitialize->_ECANSetOperationMode
    ___awtofl->___flpack
    ___flmul->___fldiv
    _vscp_readAppReg->_Read_b_eep

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_doWork
    _doWork->_exp
    ___aldiv->___fltol
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _eval_poly->___flmul
    _floor->___altofl
    ___fltol->___flmul
    ___altofl->___aldiv
    ___asflsub->___flsub
    ___flsub->___flmul
    ___asflmul->___flmul
    _doOneSecondWork->_sendTempEvent
    _handle_sync->_sendTempEvent
    _sendTempEvent->_setEventData
    _setEventData->___fltol
    _Celsius2Fahrenheit->___flmul
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doWork

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   85506
                                             82 BANK0      4     4      0
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                          _vscp_init
                           _Busy_eep
                        _Write_b_eep
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                        _handle_sync
                         _vscp_error
                    _doOneSecondWork
               _vscp_doOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                              66    66      0   29766
                                             68 BANK0     14    14      0
                                              0 BANK1     52    52      0
                         _Read_b_eep
                                _exp
                                _log
                _getCalibrationValue
                            ___aldiv
                           ___altofl
                          ___asfladd
                            ___fladd
                          ___asfldiv
                            ___fldiv
                            ___flmul
                          ___asflsub
                            ___flsub
                            ___fltol
                           ___lwtofl
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4     343
                                             23 COMRAM     4     0      4
                         _Read_b_eep (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___asfldiv                                            6     0      6     855
                                              0 BANK0      6     0      6
                            ___fldiv
 ---------------------------------------------------------------------------------
 (2) ___asfladd                                            6     0      6    1630
                                             43 COMRAM     6     0      6
                            ___fladd
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     445
                                             28 BANK0     14     6      8
                _getCalibrationValue (ARG)
                            ___flmul (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) _getCalibrationValue                                  6     4      2     127
                                             23 COMRAM     6     4      2
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     2      4    5945
                                             66 COMRAM     2     2      0
                                             33 BANK0      4     0      4
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
                           ___awtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 11     7      4   11079
                                             57 BANK0     11     7      4
                            ___fldiv
                          ___asflmul
                          ___asflsub
                           ___awtofl
                              _floor
                          _eval_poly
                              _ldexp
                             ___flge
                            ___flneg
                            ___fltol
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4      65
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                9     3      6     359
                                             66 COMRAM     3     3      0
                                             33 BANK0      6     0      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7    2591
                                             65 COMRAM     1     1      0
                                             22 BANK0     11     4      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) _floor                                               10     6      4    3207
                                             47 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                              _frexp
                            ___fltol
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     337
                                             65 COMRAM     4     4      0
                                             22 BANK0      6     2      4
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _frexp                                                9     3      6     322
                                             13 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___flge                                               8     0      8     198
                                             13 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (2) ___altofl                                             5     1      4     445
                                             42 BANK0      5     1      4
                           ___flpack
                            ___aldiv (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asflsub                                            6     0      6    1695
                                             30 BANK0      6     0      6
                            ___flsub
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    1602
                                             22 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___asflmul                                            5     1      4     893
                                             65 COMRAM     1     1      0
                                             22 BANK0      4     0      4
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8     729
                                             43 COMRAM    22    14      8
                           ___flpack
                            ___fladd (ARG)
                            ___flsub (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2394
                                             31 BANK0      1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2332
                                             67 COMRAM     2     1      1
                     _vscp_sendEvent
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _doOneSecondWork                                     11    11      0   12382
                                             39 BANK0     11    11      0
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
                      _sendTempEvent
                     _vscp_sendEvent
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_sync                                          3     3      0    7700
                                             39 BANK0      3     3      0
                         _Read_b_eep
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (2) _sendTempEvent                                        2     2      0    7508
                                             37 BANK0      2     2      0
                         _Read_b_eep
                     _vscp_sendEvent
                       _setEventData
 ---------------------------------------------------------------------------------
 (3) _setEventData                                         9     6      3    5083
                                             28 BANK0      9     6      3
                         _Read_b_eep (ARG)
                     _Celsius2Kelvin
                 _Celsius2Fahrenheit
                           ___awtofl
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) _Celsius2Fahrenheit                                   4     0      4    2785
                                             22 BANK0      4     0      4
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    1537
                                             28 COMRAM    15     7      8
                           ___flpack
                            ___flmul (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) _Celsius2Kelvin                                       4     0      4    1256
                                             43 COMRAM     4     0      4
                            ___fladd
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   23673
                                             31 BANK0     28    28      0
                          _vscp_init
                     _vscp_sendEvent
                    _vscp_readAppReg
                   _vscp_writeAppReg
                       _vscp_getGUID
                    _vscp_getMDF_URL
                 _vscp_getMatrixInfo
              _vscp_goBootloaderMode
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                             13 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    6106
                                             36 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    1609
                                             24 COMRAM     7     6      1
                       _vscp_getGUID
                       _vscp_setGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
             _vscp_setManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     158
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     112
                                             17 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     112
                                             17 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     134
                                             17 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     4     3      1    4342
                                             32 COMRAM     4     3      1
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
                    _writeCoeffs2Ram
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (4) _writeCoeffs2Ram                                      9     9      0     521
                                             23 COMRAM     9     9      0
                         _Read_b_eep
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     159
                                             13 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    2113
                                             41 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1334
                                             24 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
          _vscp_getRegisterPagesUsed
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      62
                                             23 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      62
                                             23 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      62
                                             23 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2270
                                             67 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     217
                                             23 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      31
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      31
                                             21 COMRAM     2     0      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0      90
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0     134
                                             17 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      90
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4630
                 _vscp_goActiveState
                     _vscp_sendEvent
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2270
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2270
                                             66 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       31    24      7    2236
                                              0 BANK0     31    24      7
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (5) _sendCANFrame                                         7     1      6    2016
                                             59 COMRAM     7     1      6
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (6) _ECANSendMessage                                     36    29      7    1886
                                             23 COMRAM    36    29      7
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (7) __CANIDToRegs                                        10     3      7     693
                                             13 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             49 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             35 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             31 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             20 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                             13 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                             13 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     385
        _vscp_writeNicknamePermanent
                _vscp_setControlByte
                _vscp_getControlByte
                 _vscp_init_pstorage
 ---------------------------------------------------------------------------------
 (2) _vscp_init_pstorage                                   0     0      0      68
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      0     0      0      68
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_getControlByte                                  1     1      0      93
                                             23 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  2     1      1     134
                                             17 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      90
                                             17 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3      68
                                             13 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     402
                        _WriteTimer0
                         _ConvertADC
                       _init_app_ram
                         _OpenTimer0
                            _OpenADC
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     154
                                             13 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0      90
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4     445
                                             23 COMRAM     7     3      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8     800
                                              0 BANK0     22    14      8
                           ___flpack
                            ___fldiv (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     312
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     312
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      3     3      0     686
                                             23 COMRAM     3     3      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              9     9      0     221
                                              4 COMRAM     9     9      0
                       i1_ConvertADC
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) i1_ConvertADC                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _ConvertADC
     _init_app_ram
     _OpenTimer0
     _OpenADC
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_setControlByte
       _Busy_eep
       _Write_b_eep
     _vscp_getControlByte
       _Read_b_eep
         ___wmul (ARG)
     _vscp_init_pstorage
       _init_app_eeprom
         _Busy_eep
         _Write_b_eep
   _init_app_eeprom
     _Busy_eep
     _Write_b_eep
   _vscp_init
     _vscp_readNicknamePermanent
       _Read_b_eep
         ___wmul (ARG)
   _Busy_eep
   _Write_b_eep
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _Read_b_eep
           ___wmul (ARG)
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_readAppReg
       _Read_b_eep
         ___wmul (ARG)
     _vscp_writeAppReg
       _Busy_eep
       _Write_b_eep
       _Read_b_eep
         ___wmul (ARG)
       _writeCoeffs2Ram
         _Read_b_eep
           ___wmul (ARG)
         ___wmul
       _vscp_readAppReg (ARG)
         _Read_b_eep
           ___wmul (ARG)
     _vscp_getGUID
       _Read_b_eep
         ___wmul (ARG)
     _vscp_getMDF_URL
     _vscp_getMatrixInfo
     _vscp_goBootloaderMode
       _Busy_eep
       _Write_b_eep
       _ECANSetOperationMode
     _vscp_handleHeartbeat
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _Read_b_eep
             ___wmul (ARG)
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _Read_b_eep
           ___wmul (ARG)
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _Read_b_eep
             ___wmul (ARG)
         _vscp_getMDF_URL
         _vscp_getUserID
           _Read_b_eep
             ___wmul (ARG)
         _vscp_getManufacturerId
           _Read_b_eep
             ___wmul (ARG)
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getRegisterPagesUsed
         _vscp_getFamilyCode
         _vscp_getFamilyType
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _Read_b_eep
           ___wmul (ARG)
       _vscp_getMDF_URL
       _vscp_getUserID
         _Read_b_eep
           ___wmul (ARG)
       _vscp_getManufacturerId
         _Read_b_eep
           ___wmul (ARG)
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getRegisterPagesUsed
       _vscp_getFamilyCode
       _vscp_getFamilyType
     _vscp_writeRegister
       _vscp_writeAppReg
         _Busy_eep
         _Write_b_eep
         _Read_b_eep
           ___wmul (ARG)
         _writeCoeffs2Ram
           _Read_b_eep
             ___wmul (ARG)
           ___wmul
         _vscp_readAppReg (ARG)
           _Read_b_eep
             ___wmul (ARG)
       _vscp_writeStdReg
         _vscp_getGUID
           _Read_b_eep
             ___wmul (ARG)
         _vscp_setGUID
           _Busy_eep
           _Write_b_eep
         _vscp_getUserID
           _Read_b_eep
             ___wmul (ARG)
         _vscp_setUserID
           _Busy_eep
           _Write_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
             ___wmul (ARG)
         _vscp_setManufacturerId
           _Busy_eep
           _Write_b_eep
         _vscp_restoreDefaults
           _init_app_eeprom
             _Busy_eep
             _Write_b_eep
           _init_app_ram
     _vscp_writeStdReg
       _vscp_getGUID
         _Read_b_eep
           ___wmul (ARG)
       _vscp_setGUID
         _Busy_eep
         _Write_b_eep
       _vscp_getUserID
         _Read_b_eep
           ___wmul (ARG)
       _vscp_setUserID
         _Busy_eep
         _Write_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
           ___wmul (ARG)
       _vscp_setManufacturerId
         _Busy_eep
         _Write_b_eep
       _vscp_restoreDefaults
         _init_app_eeprom
           _Busy_eep
           _Write_b_eep
         _init_app_ram
     ___lbmod
   _handle_sync
     _Read_b_eep
       ___wmul (ARG)
     _sendTempEvent
       _Read_b_eep
         ___wmul (ARG)
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _Read_b_eep (ARG)
           ___wmul (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _Read_b_eep (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
   _vscp_error
   _doOneSecondWork
     _Busy_eep
     _Write_b_eep
     _Read_b_eep
       ___wmul (ARG)
     _sendTempEvent
       _Read_b_eep
         ___wmul (ARG)
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _Read_b_eep (ARG)
           ___wmul (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _Read_b_eep (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     ___wmul
   _vscp_doOneSecondWork
     _vscp_getZone
       _Read_b_eep
         ___wmul (ARG)
     _vscp_getSubzone
       _Read_b_eep
         ___wmul (ARG)
     _vscp_sendHeartBeat
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_getZone (ARG)
         _Read_b_eep
           ___wmul (ARG)
       _vscp_getSubzone (ARG)
         _Read_b_eep
           ___wmul (ARG)
   _doWork
     _Read_b_eep
       ___wmul (ARG)
     _exp
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _Read_b_eep (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___asflmul
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___asflsub
         ___flsub
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
       ___awtofl
         ___flpack
       _floor
         ___altofl
           ___flpack
           ___aldiv (ARG)
             _getCalibrationValue (ARG)
               _Read_b_eep
                 ___wmul (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___fltol (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___fldiv (ARG)
                   ___flpack
                   ___fladd (ARG)
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                   ___flsub (ARG)
                     ___fladd
                       ___flpack
                       ___awtofl (ARG)
                         ___flpack
                       _frexp (ARG)
                   ___lwtofl (ARG)
                     _Read_b_eep (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
           ___fltol (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flge
         _frexp
         ___fltol
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       _eval_poly
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       _ldexp
         _eval_poly (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       ___flge
       ___flneg
       ___fltol
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _Read_b_eep (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     _log
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _Read_b_eep (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _Read_b_eep (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _eval_poly (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       _frexp (ARG)
     _getCalibrationValue
       _Read_b_eep
         ___wmul (ARG)
     ___aldiv
       _getCalibrationValue (ARG)
         _Read_b_eep
           ___wmul (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _Read_b_eep (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
     ___altofl
       ___flpack
       ___aldiv (ARG)
         _getCalibrationValue (ARG)
           _Read_b_eep
             ___wmul (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
     ___asfladd
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___lwtofl (ARG)
         _Read_b_eep (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___fladd
       ___flpack
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___flsub (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _Read_b_eep (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
     ___asfldiv
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _Read_b_eep (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___fldiv
       ___flpack
       ___fladd (ARG)
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flsub (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _Read_b_eep (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___flmul
       ___flpack
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
         ___lwtofl (ARG)
           _Read_b_eep (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
       ___lwtofl (ARG)
         _Read_b_eep (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___asflsub
       ___flsub
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
     ___flsub
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _Read_b_eep (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___fltol
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _Read_b_eep (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___lwtofl
       _Read_b_eep (ARG)
         ___wmul (ARG)
       ___flpack (ARG)

 _interrupt_at_low_vector (ROOT)
   i1_ConvertADC
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     3C0      16       62.5%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     34      9E       7       61.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     56      79       5       75.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     45      52       1       86.3%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     169       3        0.0%
DATA                 0      0     534      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Tue Mar  8 12:42:18 2016

                          ___asfldiv@f1p 0060                            ___altofl@sign 008E  
                           ___fldiv@cntr 003F                  __end_of_vscp_readAppReg 1CBA  
                           ___fldiv@sign 0041                    __end_of_sendVSCPFrame 4702  
                           ___asflmul@mp 0042                             ___asflsub@f2 0080  
                                     PL2 2EF0                                       PL4 2EFE  
                                     PL6 2F1C                                       PL8 2F38  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 000E  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 0012  
                    ___wmul@multiplicand 0010                              __CFG_BORV$3 000000  
                __end_of_vscp_readStdReg 39EC                            ___asflsub@f1p 007E  
                           ___flpack@arg 000E                                      PL10 2F46  
                                    PL20 2F86                                      PL12 2F60  
                                    PL30 2A14                                      PL22 2F94  
                                    PL14 2F76                                      PL40 2FDA  
                                    PL32 3EC8                                      PL24 4214  
                                    PL16 4200                                      PL50 2FEE  
                                    PL42 39EC                                      PL34 3EDA  
                                    PL26 4224                                      PL18 3EBA  
                                    PL60 14FE                                      PL52 3F02  
                                    PL44 3EEE                                      PL36 2FC6  
                                    PL28 2FAE                                      PL70 2A40  
                                    PL62 43F8                                      PL54 3002  
                                    PL46 2A2C                                      PL38 4236  
                                    PL80 3A00                                      PL72 3014  
                                    PL64 539C                                      PL56 346E  
                                    PL48 47A2                                      PL90 303E  
                                    PL82 4640                                      PL74 367A  
                                    PL66 4408                                      PL58 3CB6  
                                    PL84 3030                                      PL76 3022  
                                    PL68 4D6E                                      PL86 3038  
                                    PL78 424A                                      PL88 2A4E  
                           ___flpack@exp 0012                           _Celsius2Kelvin 5312  
                                    l211 2ACC                                      l230 2DA8  
                                    l320 159A                                      l322 15A6  
                                    l411 19B4                                      l324 15B2  
                                    l316 1582                                      l172 3F28  
                                    l181 3F72                                      l326 15BE  
                                    l318 158E                                      l520 1156  
                                    l256 4840                       vscp_readStdReg@idx 0026  
                                    l611 554C                                      l523 11B0  
                                    l187 3F9C                                      l615 55D4  
                                    l631 4700                                      l296 4C56  
                                    l641 5160                                      l553 5526  
                                    l635 4D04                                      l901 4DE8  
                                    l646 5434                                      l831 3AF6  
                                    l842 34B8                                      l595 55B4  
                                    l852 3586                                      l861 3550  
                                    l853 3506                                      l837 3B70  
                                    l829 3AD8                       vscp_readStdReg@reg 0029  
                                    l863 3560                                      l855 3514  
                                    l873 35EA                                      l865 3570  
                                    l857 3528                                      l849 3678  
                                    l874 3604                                      l859 353C  
                                    l891 41FE                                      l896 3EB8  
                           __CFG_CPB$OFF 000000           __size_of_vscp_handleProbeState 00BE  
                       setEventData@ival 0083                           getVSCPFrame@id 002E  
          __end_of_vscp_handleProbeState 44D4                    ?_vscp_restoreDefaults 0001  
                   __size_of_WriteTimer0 0012                         setEventData@unit 007E  
                                    _adc 019E                                      _exp 3688  
                                    _log 3CC8                                      fsr2 000FD9  
                   __size_of_Write_b_eep 0034             __size_of_vscp_getControlByte 0020  
                                    prod 000FF3                                      wreg 000FE8  
                           ___flmul@cntr 0074                             ___flmul@sign 0075  
                           __CFG_LVP$OFF 000000                            ___flpack@sign 0013  
                           ___fltol@exp1 007B                             __CFG_WDT$OFF 000000  
                                   l1021 52D6                                     l1031 44CE  
                                   l1040 44A4                                     l1032 445E  
                                   l1016 50EA                                     l1220 2776  
                                   l1221 278A                                     l1134 5592  
                                   l1222 27C8                                     l1039 44BE  
                                   l1071 53CE                                     l1231 2806  
                                   l1072 53DA                                     l1065 55F2  
                                   l1162 413A                                     l1076 5488  
                                   l1085 4F14                                     l1334 562A  
                                   l1318 5368                                     l1335 562C  
                                   l1264 54B2                                     l1256 2A12  
                                   l1089 5680                                     l1196 25F0  
                                   l1293 578E                                     l1701 4C0A  
                                   l1287 4EBE                                     l1607 3C4C  
                                   l1624 490C                                     l1632 4F90  
                                   l1633 4FAE                                     l1705 49B0  
                                   l1554 459E                                     l1555 463E  
                                   l1580 386A                                     l1565 4600  
                                   l1559 45D2                                     l1639 43F6  
                                   l1583 3736                                     l1592 3B94  
                                   l1584 385A                                     l1593 3CB4  
                                   l1673 4288                                     l1674 434E  
                                   l1596 3BBC                                     l1676 433E  
                                   l1685 4AEE                                     l1872 3DF4  
                __end_of_doOneSecondWork 2EF0                      vscp_readStdReg@code 001E  
              vscp_getManufacturerId@idx 0018                                     ?_exp 0099  
                                   ?_log 0081                                     l8171 51F8  
                                   l9221 5688                                     l9321 4CA8  
                                   l9251 56C0                                     l9333 5412  
                                   l9183 550E                                     l9265 5534  
                                   l9601 4D82                                     l9513 359A  
                                   l9337 5416                                     l9611 4DB2  
                                   l9603 4D8A                                     l9523 35BA  
                                   l9613 4DB8                                     l9605 4D94  
                                   l9541 3606                                     l9461 34E6  
                                   l9445 34A6                                     l9615 4DBE  
                                   l9607 4D9E                                     l9455 34D0  
                                   l9463 34F0                                     l9609 4DA8  
                                   l9633 3E54                                     l9619 4DCA  
                                   l9563 3662                                     l9549 3632  
                                   l9557 364C                                     l9469 34F4  
            __size_of_vscp_getMatrixInfo 001A                                     u6015 3E1C  
                                   u6025 3E2C                                     u6035 3E58  
                         sendCANFrame@id 003C                                     u5530 4CF8  
                                   u5535 4CEE                                     u3865 5374  
                                   u5705 34AE                                     u3866 5376  
                                   u5707 34B0                                     u9025 4688  
                                   u8324 2B9A                                     u8325 2B96  
                                   u9165 4166                                     u8454 2F6E  
                                   u8374 2F58                                     u9175 4176  
                                   u8455 2F6A                                     u8375 2F54  
                                   u8800 381E                           sendCANFrame@rv 0042  
                                   u9185 4194                                     u9450 3970  
                                   u8474 2FBE                                     u8475 2FBA  
                                   u8820 3CDC                                     u9455 396E  
                                   u9480 39BA                                     u9485 39B8  
                       ??_ECANInitialize 000F                             __CFG_PWRT$ON 000000  
              vscp_setManufacturerId@idx 0013                    __size_of_vscp_getGUID 0014  
                       ?_vscp_getMDF_URL 0001                                     _main 3F14  
                                   _init 5262                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     indf1 000FE7  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     exp@x 0099  
                                   log@x 0081                    __size_of_vscp_getZone 000A  
                    i1WriteTimer0@timer0 0001                         _vscp_writeAppReg 066E  
                            _vscp_minute 0121                              _vscp_second 0051  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 02BA            __size_of_vscp_doOneSecondWork 0054  
                      vscp_getUserID@idx 0018                    __size_of_vscp_setGUID 0026  
                       _vscp_writeStdReg 402C                ECANReceiveMessage@dataLen 0016  
                  getVSCPFrame@pPriority 0026                          __end_of_OpenADC 4EC2  
                        _sh_coefficients 0122                     __end_of_getVSCPFrame 4D06  
                                  ??_exp 0046                                    ??_log 0043  
                       __RegsToCANID@val 0010                         __RegsToCANID@ptr 000E  
                 __end_of_Celsius2Kelvin 5346                     __size_of_getCANFrame 002C  
                                  l11001 2718                                    l11013 272A  
                                  l12011 08C4                                    l11131 2832  
                                  l12101 0AA4                                    l12005 08A4  
                                  l11205 293A                                    l11141 2854  
                                  l11117 2808                                    l11045 276A  
                                  l11029 274A                                    l12023 0904  
                                  l11231 29B2                                    l11311 2BE8  
                                  _B0CON 000E20                                    l12113 0AE4  
                                  l12041 0964                                    l12017 08E4  
                                  l11209 2962                                    l11153 2880  
                                  l11081 27BA                                    l11073 27AA  
                                  l11065 278C                                    l11321 2C04  
                                  l12203 0CC4                                    l12131 0B44  
                                  l12107 0AC4                                    l12035 0944  
                                  l10291 54D4                                    l10283 54BE  
                                  l11091 27CA                                    l13011 3C04  
                                  l12221 0D20                                    l12125 0B24  
                                  l12053 09A4                                    l12029 0924  
                                  l11157 2892                                    l11077 27B2  
                                  l13013 3C10                                    l13005 3BE8  
                                  l11253 4C62                                    l11245 4C0E  
                                  l11309 2BE4                                    l12311 0EE2  
                                  l12215 0D02                                    l12143 0B84  
                                  l12119 0B04                                    l12071 0A04  
                                  l12047 0984                                    l11183 28D8  
                                  l11175 28A8                                    l11159 2898  
                                  l11095 27E4                                    l13023 3C3A  
                                  l13015 3C18                                    l11415 2EC0  
                                  l11335 2C4E                                    _B1CON 000E30  
                                  l13121 43B4                                    l13113 43A2  
                                  l12401 10A4                                    l12305 0EC4  
                                  l12233 0D5C                                    l12209 0CE4  
                                  l12161 0BE4                                    l12137 0B64  
                                  l12065 09E4                                    l13041 3C88  
                                  l13033 3C6A                                    l13025 3C46  
                                  l13017 3C1E                                    l11257 4C76  
                                  l11249 4C32                                    l11417 2EC4  
                                  l11353 2CE2                                    l11337 2C52  
                                  l13201 496C                                    l10707 52B6  
                                  l12323 0F1E                                    l12251 0DB6  
                                  l12227 0D3E                                    l12155 0BC4  
                                  l12083 0A44                                    l12059 09C4  
                                  l11187 28F4                                    l11179 28C2  
                                  l11259 4C82                                    l11355 2CEC  
                                  l11347 2C6E                                    l11283 2B3E  
                                  l11443 4EE6                                    l11701 15DC  
                                  l13125 43BC                                    l13109 439A  
                                  l12413 10E0                                    l12341 0F78  
                                  l12317 0F00                                    l12245 0D98  
                                  l12173 0C24                                    l12149 0BA4  
                                  l12077 0A24                                    l11197 2920  
                                  l10821 244C                                    l10813 2434  
                                  l13029 3C62                                    l11429 2EE4  
                                  l11293 2B7A                                    l11269 2A5C  
                                  l11453 4EFA                                    l13053 4872  
                                  l13221 4FAC                                    l13205 4978  
                                  l11711 1618                                    l11703 15E8  
                                  l11615 5406                                    l10807 44C2  
                                  l12431 113A                                    l12407 10C2  
                                  l12335 0F5A                                    l12263 0DF2  
                                  l12239 0D7A                                    l12191 0C84  
                                  l12167 0C04                                    l12095 0A84  
                                  l12503 14FA                                    l10815 243A  
                                  l11623 47EC                                    l11375 2D84  
                                  l13215 4F7A                                    _B2CON 000E40  
                                  l11801 1834                                    l11721 1654  
                                  l11713 1624                                    l11705 15F4  
                                  l10753 4438                                    l12441 1174  
                                  l12425 111C                                    l12353 0FB4  
                                  l12329 0F3C                                    l12281 0E4C  
                                  l12257 0DD4                                    l12185 0C64  
                                  l12089 0A64                                    l10905 2520  
                                  l10841 248A                                    l10817 2440  
                                  l11393 2E22                                    l11377 2D88  
                                  l11449 4EF2                                    l13057 4886  
                                  l13241 4BAC                                    l11545 36DA  
                                  l11811 1870                                    l11803 1840  
                                  l11731 1690                                    l11723 1660  
                                  l11715 1630                                    l11707 1600  
                                  l12603 3ADC                                    l10755 4440  
                                  l10739 4418                                    l12419 10FE  
                                  l12371 100E                                    l12347 0F96  
                                  l12275 0E2E                                    l12179 0C44  
                                  l10915 2554                                    l10819 2446  
                                  l11627 4824                                    l11395 2E2C  
                                  l13163 4292                                    l11539 36A6  
                                  l11821 18AC                                    l11813 187C  
                                  l11805 184C                                    l11741 16CC  
                                  l11733 169C                                    l11725 166C  
                                  l11717 163C                                    l11709 160C  
                                  l13093 435E                                    l13149 52E8  
                                  l10773 447A                                    l11653 49BC  
                                  l12453 11B4                                    l12365 0FF0  
                                  l12293 0E88                                    l12269 0E10  
                                  l12197 0CA4                                    l10925 2588  
                                  l13077 48D2                                    l13069 48A4  
                                  l13229 5560                                    l11565 3828  
                                  l11549 3704                                    l11831 18E8  
                                  l11823 18B8                                    l11815 1888  
                                  l11807 1858                                    l11751 1708  
                                  l11743 16D8                                    l11735 16A8  
                                  l11727 1678                                    l11719 1648  
                                  l11671 1528                                    l12615 3B26  
                                  l12623 3B40                                    l12551 46FE  
                                  l12711 567A                                    l11647 49B6  
                                  l12447 1192                                    l12383 104A  
                                  l12359 0FD2                                    l12287 0E6A  
                                  l11903 0684                                    l12471 1480  
                                  l10935 25BC                                    l10855 2492  
                                  l10839 2484                                    l13271 4AA2  
                                  l13255 4A5E                                    l13167 42AE  
                                  l13175 471E                                    l13191 494E  
                                  l13431 3F58                                    _B3CON 000E50  
                                  l11841 1924                                    l11833 18F4  
                                  l11825 18C4                                    l11817 1894  
                                  l11809 1864                                    l11761 1744  
                                  l11753 1714                                    l11745 16E4  
                                  l11737 16B4                                    l11729 1684  
                                  l11681 1564                                    l11673 1534  
                                  l13097 4374                                    l12537 55C4  
                                  l12609 3AF8                                    l12633 3B66  
                                  l12561 5154                                    l10777 447E  
                                  l12721 3880                                    l12465 11F0  
                                  l12377 102C                                    l11921 06E4  
                                  l10953 2622                                    l13281 4AC6  
                                  l13257 4A68                                    l13177 4788  
                                  l11577 3CE6                                    l13505 30A8  
                                  l11851 1960                                    l11843 1930  
                                  l11835 1900                                    l11827 18D0  
                                  l11819 18A0                                    l11771 1780  
                                  l11763 1750                                    l11755 1720  
                                  l11747 16F0                                    l11739 16C0  
                                  l11691 15A0                                    l11683 1570  
                                  l11675 1540                                    l12651 418C  
                                  l12635 3B68                                    l10779 4482  
                                  l12491 14C4                                    l12483 14B0  
                                  l12459 11D2                                    l12395 1086  
                                  l12299 0EA6                                    l11915 06C4  
                                  l10963 2684                                    l10947 25F4  
                                  l10875 24B8                                    l13283 4ACA  
                                  l13275 4AB2                                    l13435 3F62  
                                  l13427 3F4E                                    l11861 199C  
                                  l11853 196C                                    l11845 193C  
                                  l11837 190C                                    l11829 18DC  
                                  l11781 17BC                                    l11773 178C  
                                  l11765 175C                                    l11757 172C  
                                  l11749 16FC                                    l11693 15AC  
                                  l11685 157C                                    l11677 154C  
                                  l11669 151C                                    l12901 45C4  
                                  l12629 3B62                                    l12581 3A72  
                                  l12557 512A                                    l12805 39D8  
                                  l12741 38B8                                    l12733 38A0  
                                  l12725 388A                                    l12493 14C6  
                                  l12389 1068                                    l11933 0724  
                                  l11909 06A4                                    l12469 11F4  
                                  l12821 5588                                    l10957 263A  
                                  l10949 2612                                    l13453 3F96  
                                  l13437 3F66                                    l11863 19A8  
                                  l11855 1978                                    l11847 1948  
                                  l11839 1918                                    l11791 17F8  
                                  l11783 17C8                                    l11775 1798  
                                  l11767 1768                                    l11759 1738  
                                  l11695 15B8                                    l11687 1588  
                                  l11679 1558                                    l11871 19D0  
                                  l12575 3A62                                    l12495 14D6  
                                  l11951 0784                                    l11927 0704  
                                  l10967 269A                                    l10983 26C2  
                                  l13287 4ADE                                    l13279 4ABA  
                                  l13551 3462                                    l13447 3F82  
                                  l13439 3F6C                                    _B4CON 000E60  
                                  l11865 19B8                                    l11857 1984  
                                  l11849 1954                                    l11793 1804  
                                  l11785 17D4                                    l11777 17A4  
                                  l11769 1774                                    l11697 15C4  
                                  l11689 1594                                    l11873 1C5A  
                                  l12593 3A9C                                    l12745 38C4  
                                  l12737 38AC                                    l12729 3894  
                                  l12809 39E8                                    l11945 0764  
                                  l12841 4080                                    l10985 26C4  
                                  l10889 24C4                                    l13481 4014  
                                  l13457 3FA0                                    l11891 1C9E  
                                  l11867 19C4                                    l11859 1990  
                                  l11795 1810                                    l11787 17E0  
                                  l11779 17B0                                    l11699 15D0  
                                  l12907 45E8                                    l12771 3918  
                                  l12763 3902                                    l12755 38EA  
                                  l11963 07C4                                    l11939 0744  
                                  l12835 4060                                    l10995 26E8  
                                  l10987 26CE                                    l13475 3FE8  
                                  l13459 3FB8            __size_of_vscp_getMajorVersion 0002  
                                  l11797 181C                                    l11789 17EC  
                                  l12909 45F4                                    l12749 38D4  
                                  l11981 0824                                    l11957 07A4  
                                  l12829 403E                                    l12941 452A  
                                  l12933 4506                                    l13485 401C  
                                  l11887 1C8C                                    l11879 1C78  
                                  l11799 1828                                    l11895 1CB6  
                                  l12775 3924                                    l12767 390C  
                                  l12759 38F6                                    l11975 0804  
                                  l12871 4108                                    l12855 40BA  
                                  l12847 409C                                    l12951 455C  
                                  l12943 452E                                    l12927 44EE  
                                  _B5CON 000E70                                    l11889 1C8E  
                                  l11993 0864                                    l11969 07E4  
                                  l12857 40BE                                    l13497 307E  
                                  l12779 3930                                    l11987 0844  
                                  l12859 40D4                                    l12939 451E  
                                  l12955 456A                                    l12789 397A  
                                  l12799 39C2                                    l11999 0884  
                                  l12879 411E                                    l12983 3BA6  
                                  l12959 457E                                    l12897 45A8  
                                  l12889 413C                                    l12969 50AA  
                                  l12899 45AC                                    l12989 3BCE  
             __end_of_vscp_goActiveState 5612                            ___fltol@sign1 007A  
                        __end_of___aldiv 4590            ??_vscp_writeNicknamePermanent 0012  
                        __end_of___fladd 3CB6                                    ?_main 0001  
                                  ?_init 0001                   ?_vscp_goBootloaderMode 0001  
                        __end_of___fldiv 490E                            i1_WriteTimer0 5742  
                        __end_of___flneg 5572                                    _EEADR 000FA9  
                        __end_of___lbmod 54DC                          __end_of___flmul 43F8  
                        __end_of___flsub 5262                          __end_of___fltol 4AF0  
                _vscp_handleDropNickname 53AC                                    _BSEL0 000DF8  
                                  u10040 487C                                    u10070 436A  
                                  u10170 4944                                    u10260 4A86  
                                  _T0CON 000FD5                                    u10265 4A7C  
                                  u10454 3090                                    u10455 308C  
                                  u10484 345A                                    u10485 3456  
                                  i1l142 0084                                    i1l148 00BE  
                                  i1l165 0246                                    i1l168 029C  
                        sendCANFrame@dlc 0040                                    _MSEL0 000DF0  
                                  _MSEL1 000DF1                                    _MSEL2 000DF2  
                                  _IRXIF 007D27                        ??_writeCoeffs2Ram 0018  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 5786               _vscp_readNicknamePermanent 577C  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                     setEventData@newval 007F                         ?_vscp_getSubzone 0001  
                         __CFG_EBTR0$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                            ___awtofl@sign 001E  
                         __CFG_EBTR3$OFF 000000                    __end_of_sendTempEvent 4D6E  
                           _vscp_getGUID 570A                            __CFG_WRTD$OFF 000000  
                         Read_b_eep@badd 0016                           __CFG_EBTRB$OFF 000000  
                 Write_b_eep@GIE_BIT_VAL 0011                                    _floor 4254  
                                  _ldexp 490E                             _vscp_getZone 575E  
                                  _frexp 4B86                       vscp_writeAppReg@rv 0024  
              _vscp_getRegisterPagesUsed 57A4                   __size_of_vscp_getEvent 002A  
                                  main@i 00B2                               _ConvertADC 579C  
                           _vscp_setGUID 5502                                    tablat 000FF5  
                _vscp_getSubMinorVersion 57AA                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 5502  
                            exp@exponent 00A1                              ldexp@newexp 0085  
                   _ECANSetOperationMode 56B4                          __initialization 5168  
                            log@exponent 0043                             __end_of_main 402C  
                           __end_of_init 529E                         ?_vscp_readAppReg 0001  
                             _Read_b_eep 571E                  _interrupt_at_low_vector 0018  
                       __end_of_Busy_eep 5794                          ?_Celsius2Kelvin 002C  
                         __CFG_OSC$HSPLL 000000                        ??_ECANSendMessage 001F  
                         ?i1_WriteTimer0 0001                         ?_vscp_readStdReg 0001  
                  getVSCPFrame@pvscptype 0024                   ??_vscp_restoreDefaults 0012  
                                 ??_main 0046                                   ??_init 0013  
          __size_of_vscp_handleHeartbeat 0002                 ??_vscp_getManufacturerId 0018  
               ??_vscp_setManufacturerId 0013                 _vscp_handleProtocolEvent 242A  
                          __activetblptr 000002                        __RegsToCANID@type 0011  
             ECANReceiveMessage@msgFlags 0017                         doWork@calVoltage 016E  
              __size_of__ECANPointBuffer 0076                                   _B0TXEN 006FC2  
                                 _B1TXEN 006FC3                                   _B2TXEN 006FC4  
                                 _B3TXEN 006FC5                                   _B4TXEN 006FC6  
                                 _B5TXEN 006FC7                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                                   _ADCON2 000FC0  
                                 ?_floor 008F                                   ?_ldexp 0081  
                   __size_of_handle_sync 0082                                   ?_frexp 000E  
                       __end_of___altofl 50D8               ECANReceiveMessage@savedPtr 0018  
                                 _CANCON 000F6F                                   _ADRESH 000FC4  
                                 _ADRESL 000FC3                                   _EEDATA 000FA8  
                       __end_of___flpack 4640                                   _EECON2 000FA7  
                                 _CIOCON 000F73                         __end_of___awtofl 5312  
                       ?_doOneSecondWork 0001                       vscp_writeStdReg@rv 001E  
                          ?_init_app_ram 0001                                   _MDSEL0 007BBE  
                                 _MDSEL1 007BBF                               _OpenTimer0 5612  
                        _init_app_eeprom 1CBA                         __end_of___lwtofl 5460  
                                 _RXB0IF 007D20                                   _RXB1IF 007D21  
                 ECANReceiveMessage@data 0015                   ECANReceiveMessage@mode 001C  
                 ECANReceiveMessage@temp 001D                        getVSCPFrame@pData 0028  
                      getVSCPFrame@pSize 0027                                ??_OpenADC 0010  
                     _vscp_newNodeOnline 5460                    ?_ECANSetOperationMode 0001  
                     __CANIDToRegs@Value 0017   vscp_handleProtocolEvent@page_save_1045 0088  
                                 ___flge 4F64                           getCANFrame@pid 0022  
                              ??___aldiv 0046                                ??___fladd 0025  
                                 ___wmul 537A                                ??___fldiv 0034  
                              ??___flneg 0012                           __CFG_STVREN$ON 000000  
                              ??___lbmod 000F                                ??___flmul 0042  
                              ??___flsub 0042                                ??___fltol 0042  
                          _vscp_getEvent 548A                                   _doWork 3046  
                       OpenTimer0@config 000E                      ?_vscp_newNodeOnline 0001  
              ??_vscp_handleDropNickname 0018                      vscp_writeAppReg@reg 0023  
                    vscp_writeAppReg@val 0021                      vscp_writeAppReg@pos 0022  
                                 clear_0 5170                                   clear_1 5182  
                                 clear_2 518E                                   clear_3 519A  
                          ?_sendCANFrame 003C             vscp_handleProtocolEvent@byte 0095  
                                 floor@i 0093                                   floor@x 008F  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 00BB  
                          _vscp_errorcnt 004B                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                       _vscp_init_pstorage 5798  
              ??_vscp_getSubMinorVersion 000E     __size_of_vscp_getBootLoaderAlgorithm 0002  
                         ??_init_app_ram 000E                     ??_vscp_newNodeOnline 0044  
                            ?_ConvertADC 0001                       __size_of___asfladd 004A  
                     __size_of___asfldiv 004A                       __size_of___asflmul 004C  
                             ___fladd@f1 001D                               ___fladd@f2 0021  
                     __size_of___asflsub 004E                               ___flge@ff1 000E  
                             ___flge@ff2 0012                         __end_ofexp@coeff 0648  
                       __end_oflog@coeff 066C                          ___lbmod@divisor 000E  
                             ___altofl@c 008A                               ___fldiv@f1 002C  
                             ___fldiv@f2 0030                               ___fldiv@f3 003B  
                             __accesstop 0060                  __end_of__initialization 51A0  
                        ___lbmod@counter 0010                       _Celsius2Fahrenheit 4DF2  
                             ___flneg@f1 000E            __size_of_vscp_getMinorVersion 0002  
                    ?_vscp_init_pstorage 0001                               ___flmul@f1 0060  
                             ___flmul@f2 0064                             eval_poly@res 007D  
                             ___flsub@f1 0076                               ___flsub@f2 007A  
                             ___fltol@f1 0076                    __size_of_getVSCPFrame 0078  
                     _vscp_writeRegister 5572                      _vscp_getControlByte 55B6  
                             ___awtofl@c 0018                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 002E                      ?_Celsius2Fahrenheit 0076  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
                 ___asflmul@multiplicand 0076              __end_of_vscp_check_pstorage 52D8  
                __size_of_vscp_setUserID 001C                              ?_Read_b_eep 0016  
                        ??i1_WriteTimer0 0003                            __end_of_floor 4350  
                          __end_of_ldexp 49B2                            __end_of_frexp 4C0C  
                    ?_vscp_writeRegister 0025                               __end_ofPL2 2EFE  
                             __end_ofPL4 2F1C                               __end_ofPL6 2F38  
                             __end_ofPL8 2F46                           ??_sendCANFrame 0042  
                             ___lwtofl@c 0018                     ??_vscp_init_pstorage 0012  
             __end_of_vscp_getFamilyCode 577C                            ?__RegsToCANID 000E  
            __size_of_ECANReceiveMessage 01FA             __size_of_getCalibrationValue 003E  
                     sendVSCPFrame@pData 0066               __end_of_vscp_getFamilyType 5772  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 0025  
        __size_of_vscp_setManufacturerId 001C                 __end_of_vscp_writeAppReg 14FE  
                   ?_vscp_getControlByte 0001                   getVSCPFrame@pvscpclass 002D  
                __end_of_init_app_eeprom 242A                     ??_Celsius2Fahrenheit 0042  
            __end_of_vscp_setControlByte 554E                 __end_of_vscp_writeStdReg 4140  
                     __RegsToCANID@Value 0014                                  ??_floor 0046  
                                ??_ldexp 0043                                  ??_frexp 0014  
                          ?_setEventData 007C                     ??_vscp_writeRegister 0026  
        __end_of_vscp_handleDropNickname 53DC                             _getVSCPFrame 4C8E  
                             __pbssBANK0 00B6                               __pbssBANK1 0100  
                            ?_OpenTimer0 0001                       __size_of_eval_poly 00A0  
             __end_of_vscp_getBufferSize 57A8                                ?_Busy_eep 0001  
                       Celsius2Kelvin@tc 002C                    vscp_writeRegister@reg 0026  
                 ??_ECANSetOperationMode 000E       __size_of_vscp_getRegisterPagesUsed 0002  
                        _writeCoeffs2Ram 49B2                                  ?___flge 000E  
        __end_of_vscp_getSubMinorVersion 57AC                 ECANSetOperationMode@mode 000E  
                                ?___wmul 000E                                  _B0RXFUL 007107  
                                _B1RXFUL 007187                     __ECANRxFilterHitInfo 0048  
                                _B2RXFUL 007207                                  _B3RXFUL 007287  
                                _B4RXFUL 007307                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 0012                                  _B5RXFUL 007387  
                      __end_of___asfladd 5090                        __end_of___asfldiv 5046  
                       WriteTimer0@timer 0010                                ?___altofl 008A  
                      __end_of___asflmul 4FFC                                  _ECANCON 000F77  
                      __end_of___asflsub 4F64                                ?___flpack 000E  
                          ??_WriteTimer0 0010                         doWork@resistance 0190  
                    __size_of_ConvertADC 0004                                ?___awtofl 0018  
                         ??__RegsToCANID 0012                            ??_Write_b_eep 0011  
                  sendVSCPFrame@priority 0064                                  _BRGCON1 000F70  
                                _BRGCON2 000F71                                  _BRGCON3 000F72  
                              ?___lwtofl 0018                      vscp_writeStdReg@reg 001F  
           __end_of_vscp_doOneSecondWork 4F16                    ??_vscp_getControlByte 0018  
                                i1l10311 0034                                  i1l10401 0232  
                                i1l10321 0062                                  i1l10313 003C  
                                i1l10411 0256                                  i1l10403 0236  
                                i1l10331 008A                                  i1l10323 0072  
                                i1l10315 0048                                  i1l10421 029A  
                                i1l10405 0242                                  i1l10341 00AE  
                                i1l10333 0096                                  i1l10325 0076  
                                i1l10317 004E                                  i1l10407 0248  
                                i1l10335 00A0                                  i1l10343 00B2  
                                i1l10327 007E                                  i1l10319 0052  
                                i1l10409 0252                                  i1l10361 00FC  
                                i1l10417 025C                                  i1l10353 00C8  
                                i1l10337 00A8                                  i1l10329 0088  
                                i1l10371 013E                                  i1l10419 0296  
                                i1l10363 0100                                  i1l10339 00AC  
                                i1l10355 00CA                                  i1l10381 0188  
                                i1l10373 014A                                  i1l10365 010C  
                                i1l10391 01CC                                  i1l10383 018E  
                                i1l10375 0150                                  i1l10367 0112  
                                i1l10359 00D4                                  i1l10393 01F4  
                                i1l10385 01B6                                  i1l10377 0178  
                                i1l10369 013A                                  i1l10395 01F8  
                                i1l10387 01BA                                  i1l10379 017C  
                                i1l10397 0204                                  i1l10389 01C6  
                                i1l10399 020A                                  i1l13611 026E  
                     _adc_series_counter 0049              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0062                               _high_alarm 00B7  
        __end_of_interrupt_at_low_vector 02BA                 vscp_readStdReg@code_1018 0022  
                      sendCANFrame@pdata 0041                    _vscp_handleProbeState 4416  
                                _RXB0CON 000F60                                  _RXB1CON 000F50  
                                _RXB0FUL 007B07                         __ECANPointBuffer 4D7C  
             __end_of_vscp_getMatrixInfo 569C                                  _TXB0CON 000F40  
                                _TXB1CON 000F30                                  _TXB2CON 000F20  
                         ??_setEventData 0046                                  _RXFCON0 000DD4  
                                _RXFCON1 000DD5                            setEventData@v 007C  
                     _vscp_goActiveState 55F4                   __size_of_sendVSCPFrame 00B6  
           __end_of_vscp_getMajorVersion 57B0                      __size_of_Read_b_eep 0012  
                     __size_of_vscp_init 0048                               ??_Busy_eep 000E  
                 _vscp_getManufacturerId 56E2                   _vscp_setManufacturerId 5630  
                        _ECANSendMessage 3A0C                      ?_vscp_goActiveState 0001  
                                _OpenADC 4E66                                  __Hparam 0000  
                        ??_vscp_getEvent 0032                         ??_Celsius2Kelvin 0030  
                                __Lparam 0000                       _vscp_node_substate 004E  
             ??_vscp_handleProtocolEvent 007F                            ??_getCANFrame 0022  
      __end_of_vscp_getRegisterPagesUsed 57A6                 __size_of_vscp_getMDF_URL 0018  
                                ___aldiv 44D4                          __size_of___flge 004C  
                                ___fladd 3B72                                  ___fldiv 4866  
                                ___flneg 554E                                  ___lbmod 54B4  
                                ___flmul 4350                                  ___flsub 5226  
                                ___fltol 4A52                          __size_of___wmul 0022  
                        getCANFrame@pdlc 0020                                _FIFOEMPTY 007BA7  
                          ?i1_ConvertADC 0001                          __size_of_doWork 0428  
                           __psmallconst 0600                               ??___altofl 0046  
                   __end_of_init_app_ram 5226                               ??___flpack 0014  
                     _vscp_sendHeartBeat 54DC                                  __pcinit 5168  
                             ??___awtofl 001C                           _vscp_deviceURL 0600  
                      __end_of_eval_poly 47A2                                  __ramtop 0600  
                    __size_of_OpenTimer0 001E                                  __ptext0 3F14  
                                __ptext1 3046                                  __ptext2 5436  
                                __ptext3 4FFC                                  __ptext4 5046  
                                __ptext5 44D4                                  __ptext6 51AA  
                                __ptext7 3CC8                                  __ptext8 3688  
                                __ptext9 554E                               ??___lwtofl 001C  
                         _vscp_getUserID 56F6                                _T0CONbits 000FD5  
                   ??_vscp_goActiveState 0044                             __size_of_exp 01E4  
                           __size_of_log 012E                    vscp_writeStdReg@value 0019  
                       ___aldiv@dividend 007C                      ?_vscp_sendHeartBeat 0044  
               ??_vscp_handleSetNickname 0013                                  _seconds 00B9  
                                doWork@B 018E                                  doWork@i 019D  
                                doWork@j 0194                                  doWork@v 018A  
                    __end_of_WriteTimer0 5742                         ?_init_app_eeprom 0001  
                    __end_of_Write_b_eep 537A                        vscp_readAppReg@rv 001A  
                     vscp_getMDF_URL@idx 000F                           OpenADC@config2 000E  
          vscp_handleProtocolEvent@bytes 008C                     end_of_initialization 51A0  
                                exp@sign 00A3             __end_of_vscp_handleHeartbeat 57B2  
               __size_of_vscp_getSubzone 000A                            __Lmediumconst 0000  
                __end_of_writeCoeffs2Ram 4A52                     __end_of_sendCANFrame 5168  
                             doWork@Rinf 016A                       doOneSecondWork@tmp 008E  
                             doWork@temp 0199                vscp_handleProtocolEvent@i 0099  
              vscp_handleProtocolEvent@j 009A                vscp_handleProtocolEvent@k 0093  
                   ??_vscp_sendHeartBeat 0045                           _vscp_sendEvent 53DC  
                 vscp_getControlByte@idx 0018                   vscp_setControlByte@idx 0012  
                      ECANSendMessage@id 0018                        ECANSendMessage@pb 0020  
                       ___aldiv@quotient 0086                                  postdec1 000FE5  
                                postdec2 000FDD                  __size_of_ECANInitialize 0096  
                 __size_of_sendTempEvent 0068                           _vscp_setUserID 564C  
                                postinc0 000FEE                                  postinc2 000FDE  
                         ??i1_ConvertADC 0001                   __end_of_vscp_deviceURL 0620  
    __end_of_vscp_writeNicknamePermanent 56E2              _vscp_writeNicknamePermanent 56CC  
                     __ECANPointBuffer@b 0011                            _sendVSCPFrame 464C  
                 __end_of_vscp_getUserID 570A             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0078CB                        __end_of_vscp_init 5120  
                         _vscp_probe_cnt 0050                      __end_of_getCANFrame 5436  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
                          ??_handle_sync 0087                 __size_of_vscp_readAppReg 07AC  
                       ___lbmod@dividend 000F                         writeCoeffs2Ram@c 001A  
                       writeCoeffs2Ram@i 001D                         writeCoeffs2Ram@j 001F  
                            ___fldiv@exp 0040                           _vscp_statuscnt 0052  
               __size_of_vscp_readStdReg 0180                             ??_ConvertADC 000E  
             vscp_handleProtocolEvent@cb 0091                  __end_of_ECANSendMessage 3B72  
                      vscp_readStdReg@rv 0028                              ___lbmod@rem 0011  
                            ___flmul@exp 006F                            ?__CANIDToRegs 000E  
                   __end_of__RegsToCANID 3EBA                      _getCalibrationValue 51AA  
                 __end_of_vscp_sendEvent 540A                               _vscp_error 5794  
                   _vscp_doOneSecondWork 4EC2                       i1WriteTimer0@timer 0003  
                             _vscp_timer 011E                   __end_of_vscp_setUserID 5668  
               __size_of_doOneSecondWork 0498                   vscp_sendHeartBeat@zone 0045  
                           ??_Read_b_eep 0018                     __end_of_setEventData 4866  
                         ?_sendVSCPFrame 0060                           __end_of___flge 4FB0  
                         __end_of___wmul 539C                          ?_vscp_getUserID 0001  
                         __end_of_doWork 346E             __end_of_vscp_getMinorVersion 57AE  
                            _WriteTimer0 5730                     _vscp_getMajorVersion 57AE  
                     __end_of_ConvertADC 57A0                     ?_getCalibrationValue 0018  
                            _Write_b_eep 5346                        ??_vscp_getMDF_URL 000E  
          ??_vscp_getBootLoaderAlgorithm 000E                               floor@expon 0097  
                            __end_ofPL10 2F60                              __end_ofPL20 2F94  
                            __end_ofPL12 2F76                        ?_vscp_writeAppReg 0021  
                            __end_ofPL30 2A2C                              __end_ofPL22 2FAE  
                            __end_ofPL14 2F86                              __end_ofPL40 2FEE  
                            __end_ofPL32 3EDA                              __end_ofPL24 4224  
                            __end_ofPL16 4214                              __end_ofPL50 3002  
                            __end_ofPL42 3A00                              __end_ofPL34 3EEE  
                            __end_ofPL26 4236                              __end_ofPL18 3EC8  
                            __end_ofPL60 150E                              __end_ofPL52 3F14  
                            __end_ofPL44 3F02                              __end_ofPL36 2FDA  
                            __end_ofPL28 2FC6                              __end_ofPL70 2A4E  
                            __end_ofPL62 4408                              __end_ofPL54 3014  
                            __end_ofPL46 2A40                              __end_ofPL38 424A  
                            __end_ofPL80 3A0C                              __end_ofPL72 3022  
                            __end_ofPL64 53AC                              __end_ofPL56 3480  
                            __end_ofPL48 47B6                              __end_ofPL90 3046  
                            __end_ofPL82 464C                              __end_ofPL74 3688  
                            __end_ofPL66 4416                              __end_ofPL58 3CC8  
                            __end_ofPL84 3038                              __end_ofPL76 3030  
                            __end_ofPL68 4D7C                              __end_ofPL86 303E  
                            __end_ofPL78 4254                              __end_ofPL88 2A58  
                    start_initialization 5168                               eval_poly@d 007A  
                             eval_poly@n 007B                               eval_poly@x 0076  
                             ldexp@value 0081          __size_of_vscp_handleSetNickname 001E  
                            __end_of_exp 386C                              __end_of_log 3DF6  
                     ??_vscp_writeAppReg 0022                            _sendTempEvent 4D06  
                      ?_vscp_writeStdReg 0019                      __CFG_BOREN$BOACTIVE 000000  
            __size_of_vscp_newNodeOnline 002A                             ??_OpenTimer0 000E  
                     ??_vscp_writeStdReg 001A                       _vscp_getFamilyCode 5772  
                    __end_of_handle_sync 4C8E                  doOneSecondWork@setpoint 008F  
                         ??__CANIDToRegs 0015                       _vscp_getFamilyType 5768  
                             frexp@value 000E                       __end_of_Read_b_eep 5730  
                    sendVSCPFrame@nodeid 0063                         ?_writeCoeffs2Ram 0001  
                      _vscp_readRegister 5668                     Celsius2Fahrenheit@tc 0076  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 0090  
                  ?_vscp_doOneSecondWork 0001                        __size_of_Busy_eep 0006  
                  ECANReceiveMessage@ptr 001E                      ?_vscp_getFamilyCode 000E  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 2A14  
                        ?_vscp_setUserID 0012                      ?_vscp_getFamilyType 000E  
                  __size_of_init_app_ram 003E                 ?_vscp_handleDropNickname 0001  
                 getCalibrationValue@cal 001B                        ??_vscp_getSubzone 0018  
                               ??___flge 0016                 __end_of__ECANPointBuffer 4DF2  
                      __CANIDToRegs@type 0014                              _getCANFrame 540A  
                               ??___wmul 0012                                 ??_doWork 00A4  
                     _vscp_getBufferSize 57A6              vscp_handleProtocolEvent@len 008D  
            vscp_handleProtocolEvent@pos 008B               __end_of_ECANReceiveMessage 367A  
                    ??_vscp_readRegister 002A           __size_of_vscp_goBootloaderMode 0022  
                  ?_vscp_getMajorVersion 0001                    ??_getCalibrationValue 001A  
                  __end_ofi1_WriteTimer0 5754            __end_of_vscp_goBootloaderMode 55B6  
                   _vscp_handleHeartbeat 57B0              __size_of_vscp_init_pstorage 0004  
                     __end_of_OpenTimer0 5630                        __size_of___altofl 0048  
                      __size_of___flpack 00B0                                ___asfladd 5046  
                    ?_vscp_getBufferSize 0001                        __size_of___awtofl 003A  
                              ___asfldiv 4FFC                              __pbssBIGRAM 019E  
                              ___asflmul 4FB0                                ___asflsub 4F16  
           __size_of_vscp_check_pstorage 003A                     ??_vscp_getFamilyCode 0012  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0046  
                   ??_vscp_getFamilyType 0012                        __size_of___lwtofl 002A  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 0060  
                          __pcstackBANK1 016A                           ?_sendTempEvent 0001  
                       _vscp_alarmstatus 004A              __size_of_Celsius2Fahrenheit 0074  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 0048  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 0012  
                   __end_ofi1_ConvertADC 57A4                            ?_vscp_setGUID 0012  
            __size_of_vscp_writeRegister 0022                         ?_ECANSendMessage 0018  
                      ??_vscp_readAppReg 0018                        sendVSCPFrame@size 0065  
              __end_of_vscp_readRegister 5682                             _init_app_ram 51E8  
                   getCalibrationValue@i 001D                              _doWork$2281 0172  
                            _doWork$2282 0176                              _doWork$2283 017A  
           __size_of_vscp_setControlByte 0026                            doWork@avarage 0195  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 0019  
                   ??_vscp_getBufferSize 000E                             _current_temp 0100  
                      OpenADC@portconfig 000F                                 ?_OpenADC 000E  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 5682  
                 _vscp_handleSetNickname 55D6            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 0067                           _ECANInitialize 4AF0  
                               ?___aldiv 007C                                 ?___fladd 001D  
                               ?___fldiv 002C                                __ptext101 5742  
                              __ptext102 57A0                                 ?___flneg 000E  
                              __ptext103 0000                                 ?___lbmod 000E  
                               ?___flmul 0060                                 ?___flsub 0076  
                               ?___fltol 0076              __end_of_vscp_getControlByte 55D6  
                    ?_vscp_getMatrixInfo 0001                          vscp_getGUID@idx 0018  
                            __pintcodelo 0018                        ??_doOneSecondWork 0087  
       vscp_handleProtocolEvent@len_1035 008F                    ?_vscp_handleHeartbeat 0001  
                vscp_readStdReg@idx_1019 0027               vscp_setManufacturerId@data 0012  
                           _sendCANFrame 5120                              __smallconst 0600  
                             ?___asfladd 002C                        WriteTimer0@timer0 000E  
                             ?___asfldiv 0060                               ?___asflmul 0076  
                             ?___asflsub 007E                           ??_vscp_getGUID 0018  
                              _eval_poly 4702                              _handle_sync 4C0C  
                         ??_vscp_getZone 0018           __end_of_vscp_getManufacturerId 56F6  
         __end_of_vscp_setManufacturerId 564C                    __size_of__RegsToCANID 00C4  
       vscp_handleProtocolEvent@pos_1034 008E                           __size_of_floor 00FC  
                         __size_of_ldexp 00A4                           ??_vscp_setGUID 0013  
                         __size_of_frexp 0086                     ??_vscp_getMatrixInfo 000E  
                       _vscp_configtimer 011C                          ___aldiv@divisor 0080  
                        ___aldiv@counter 0084                           ___wmul@product 0014  
                 ??_vscp_doOneSecondWork 007F                   sendVSCPFrame@vscpclass 0060  
                          OpenADC@config 0012                     _vscp_getMinorVersion 57AC  
                              _sendTimer 011A                                 _PIE1bits 000F9D  
                              _low_alarm 00B8                    __size_of_setEventData 00B0  
                 __end_of_ECANInitialize 4B86                                 i1u720_20 003C  
                               i1u720_21 003A                                 i1u721_20 007E  
                               i1u721_21 007C                                 i1u730_20 0188  
                               i1u722_20 0096                                 i1u730_21 0186  
                               i1u722_21 0094                                 i1u731_20 01C6  
                               i1u723_20 00A0                                 i1u731_21 01C4  
                               i1u723_21 009E                                 i1u732_20 0204  
                               i1u724_20 00A8                                 i1u732_21 0202  
                               i1u724_21 00A6                                 i1u733_20 0242  
                               i1u725_20 00BC                                 i1u733_21 0240  
                               i1u725_21 00BA                                 i1u734_20 0252  
                               i1u726_20 00C6                                 i1u734_21 0250  
                               i1u726_21 00C4                                 i1u727_20 00D2  
                               i1u727_21 00D0                                 i1u728_20 010C  
                               i1u728_21 010A                                 i1u729_20 014A  
                               i1u729_21 0148                                 _PIR1bits 000F9E  
                       ECANSendMessage@i 0039                         ECANSendMessage@j 0034  
                  __end_of_vscp_getEvent 54B4                                 _RXF0EIDH 000F02  
                               _RXF0EIDL 000F03                                 _RXB0OVFL 007BA7  
                               _RXF1EIDH 000F06                                 _RXF1EIDL 000F07  
                               _RXB1OVFL 007BA6                                 _RXF0SIDH 000F00  
                               _RXF0SIDL 000F01                                 _RXF1SIDH 000F04  
                               _RXF1SIDL 000F05                                 _RXM0EIDH 000F1A  
                               _RXM0EIDL 000F1B                          vscp_getEvent@rv 0032  
                               _RXM1EIDH 000F1E                                 _RXM1EIDL 000F1F  
                               _RXFBCON0 000DE0                                 _RXFBCON1 000DE1  
                               _RXFBCON2 000DE2                                 _RXFBCON3 000DE3  
                               _RXFBCON4 000DE4                                 _RXFBCON5 000DE5  
                               _RXFBCON6 000DE6                                 _RXFBCON7 000DE7  
                               _RXM0SIDH 000F18                                 _RXM0SIDL 000F19  
                               _RXM1SIDH 000F1C                   ??_vscp_getMajorVersion 000E  
                               _RXM1SIDL 000F1D               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 0044                       vscp_setUserID@data 0012  
                   __end_of__CANIDToRegs 4200                               _ADCON0bits 000FC2  
                      ___wmul@multiplier 000E                             __RegsToCANID 3DF6  
                     _vscp_probe_address 004F                          Write_b_eep@badd 000E  
                        Write_b_eep@bdat 0010                          ??_sendTempEvent 0085  
            __size_of_vscp_goActiveState 001E                               ?_eval_poly 0076  
                    getVSCPFrame@pNodeId 0025                                _vscp_init 50D8  
                              _vscp_imsg 00BD                                _vscp_hour 0120  
                              _vscp_omsg 00CB                         vscp_setGUID@data 0012  
      __size_of_vscp_handleProtocolEvent 05EA                      __size_of_vscp_error 0004  
              ?_vscp_handleProtocolEvent 0001     __size_of_vscp_writeNicknamePermanent 0016  
                       _vscp_page_select 0046                             _setEventData 47B6  
             __size_of_vscp_readRegister 001A                        _measurement_clock 0112  
                               _Busy_eep 578E                    ?_vscp_getMinorVersion 0001  
               __size_of_init_app_eeprom 0770             __end_of_vscp_restoreDefaults 578E  
                              frexp@eptr 0012                               _EECON1bits 000FA6  
                        ?_ECANInitialize 0001                                 __Hrparam 0000  
                   ECANReceiveMessage@id 001A                             _seconds_temp 010C  
            __size_of_vscp_sendHeartBeat 0026                         __size_of_OpenADC 005C  
                       ??_vscp_getUserID 0018                          _vscp_getMDF_URL 569C  
                               __Lrparam 0000                         __CANIDToRegs@val 0010  
                       __CANIDToRegs@ptr 000E                         __size_of___aldiv 00BC  
                       __size_of___fladd 0144                         __size_of___fldiv 00A8  
                       __size_of___flneg 0024                         _vscp_initledfunc 004D  
                       __size_of___lbmod 0028                         __size_of___flmul 00A8  
                 ??_vscp_handleHeartbeat 000E                         __size_of___flsub 003C  
                       __size_of___fltol 009E                                 ___altofl 5090  
                               ___flpack 4590                         getCANFrame@flags 0023  
                           ?_WriteTimer0 000E                                 ___awtofl 52D8  
                       getCANFrame@pdata 0021                             ?_Write_b_eep 000E  
                               ___lwtofl 5436                           sendTempEvent@i 0086  
                __size_of_Celsius2Kelvin 0034                              ??___asfladd 0032  
                            ??___asfldiv 0042                              ??___asflmul 0042  
                               _exp$2287 009D                              ??___asflsub 0042  
                  __size_ofi1_ConvertADC 0004                               ?_vscp_init 0001  
                               __ptext10 490E                                 __ptext11 4702  
                               __ptext20 4866                                 __ptext12 4254  
                               __ptext21 4EC2                                 __ptext13 4A52  
                               __ptext30 4DF2                                 __ptext22 54DC  
                               __ptext14 4B86                                 __ptext31 3B72  
                               __ptext23 5754                                 __ptext15 4F64  
                               __ptext40 5502                                 __ptext32 5312  
                               __ptext24 575E                                 __ptext16 5090  
                               __ptext41 066E                                 __ptext33 242A  
                               __ptext25 2A58                                 __ptext17 4F16  
                               __ptext50 57A8                                 __ptext42 49B2  
                               __ptext34 54B4                                 __ptext26 5794  
                               __ptext18 5226                                 __ptext51 56E2  
                               __ptext43 537A                                 __ptext35 5572  
                               __ptext27 4C0C                                 __ptext19 4FB0  
                               __ptext60 50D8                                 __ptext52 56F6  
                               __ptext44 5668                                 __ptext36 402C  
                               __ptext28 4D06                                 __ptext61 577C  
                               __ptext53 569C                                 __ptext45 386C  
                               __ptext37 5786                                 __ptext29 47B6  
                               __ptext70 464C                                 __ptext62 571E  
                               __ptext54 570A                                 __ptext46 5768  
                               __ptext38 5630                                 __ptext71 5120  
                               __ptext63 55D6                                 __ptext55 57AA  
                               __ptext47 5772                                 __ptext39 564C  
                               __ptext80 529E                                 __ptext72 3A0C  
                               __ptext64 57B0                                 __ptext56 57AC  
                               __ptext48 57A4                                 __ptext81 5798  
                               __ptext73 4140                                 __ptext65 5594  
                               __ptext57 57AE                                 __ptext49 57A6  
                               __ptext90 56B4                                 __ptext82 1CBA  
                               __ptext74 548A                                 __ptext66 5682  
                               __ptext58 5460                                 __ptext91 4E66  
                               __ptext83 55B6                                 __ptext75 4C8E  
                               __ptext67 4416                                 __ptext59 53AC  
                               __ptext92 5612                                 __ptext84 5528  
                               __ptext76 540A                                 __ptext68 55F4  
                               __ptext93 51E8                                 __ptext85 56CC  
                               __ptext77 3480                                 __ptext69 53DC  
                               __ptext94 579C                                 __ptext86 5346  
                               __ptext78 3DF6                                 __ptext95 5730  
                               __ptext87 578E                                 __ptext79 4D7C  
                               __ptext96 52D8                                 __ptext88 5262  
                               __ptext97 4350                                 __ptext89 4AF0  
                               __ptext98 4590                                 __ptext99 150E  
         vscp_goBootloaderMode@algorithm 0012                vscp_sendHeartBeat@subzone 0044  
                          ?_getVSCPFrame 0024                         ??_vscp_sendEvent 0043  
                        _vscp_getSubzone 5754                         ??_vscp_setUserID 0013  
                          __size_of_main 0118                            __size_of_init 003C  
              __size_of_vscp_writeAppReg 0E90                      _vscp_check_pstorage 529E  
                          init_app_ram@i 000E           vscp_handleProtocolEvent@i_1033 0094  
         vscp_handleProtocolEvent@i_1036 0098           vscp_handleProtocolEvent@i_1044 0092  
                       doOneSecondWork@i 0091                     __end_of_vscp_getGUID 571E  
              __size_of_vscp_writeStdReg 0114                      ECANSendMessage@data 001C  
               ECANSendMessage@tempBSEL0 0035                             ?_getCANFrame 0020  
                    ECANSendMessage@mode 0032                     __end_of_vscp_getZone 5768  
                    ECANSendMessage@temp 0038                        ?__ECANPointBuffer 000E  
                      vscp_setUserID@idx 0013                     __end_of_vscp_setGUID 5528  
                     vscp_readAppReg@reg 0019                       vscp_readAppReg@pos 0018  
                           i1_ConvertADC 57A0                         vscp_sendEvent@rv 0043  
                     ??__ECANPointBuffer 0011           vscp_handleProtocolEvent@offset 008A  
                            _RXB0FILHIT0 007B00                          vscp_setGUID@idx 0013  
                    _vscp_setControlByte 5528                                 exp@coeff 0620  
                  ___flmul@f3_as_product 0070                                 log@coeff 0648  
                        _vscp_readAppReg 150E                     ?_vscp_check_pstorage 0001  
                            _RXB1CONbits 000F50         __size_of_vscp_handleDropNickname 0030  
                             _INTCONbits 000FF2                              ??_eval_poly 0042  
           ??_vscp_readNicknamePermanent 0018                      ECANReceiveMessage@i 001B  
                        _vscp_guid_reset 004C                          _vscp_readStdReg 386C  
           vscp_handleDropNickname@bytes 0018               __end_of_vscp_newNodeOnline 548A  
                     _ECANReceiveMessage 3480                           ??_getVSCPFrame 0029  
                        _vscp_initbtncnt 00BA                          sendVSCPFrame@id 007B  
                               intlevel1 0000                   ??_vscp_getMinorVersion 000E  
                vscp_getMatrixInfo@pData 000E                  __end_of_vscp_getMDF_URL 56B4  
                   ?_vscp_setControlByte 0012                            _timeout_clock 0116  
                    ?_ECANReceiveMessage 0015                  ?_vscp_handleSetNickname 0001  
       __size_of_vscp_getSubMinorVersion 0002                          _vscp_node_state 00BC  
                           handle_sync@i 0089                          _doOneSecondWork 2A58  
                           ??_vscp_error 000E                  ECANSendMessage@msgFlags 001E  
                    vscp_getMatrixInfo@i 000F                  vscp_setControlByte@ctrl 0013  
            __end_of_getCalibrationValue 51E8                       ECANSendMessage@ptr 003A  
                      ??_init_app_eeprom 0012                    __size_of__CANIDToRegs 00C0  
               __size_of_writeCoeffs2Ram 00A0      __size_of_vscp_readNicknamePermanent 000A  
             __end_of_vscp_init_pstorage 579C      __end_of_vscp_getBootLoaderAlgorithm 57AA  
            _vscp_getBootLoaderAlgorithm 57A8         __size_of_interrupt_at_low_vector 02A2  
                 ECANSendMessage@dataLen 001D                      __ECANPointBuffer@pt 0012  
                   ??_ECANReceiveMessage 0018                    ??_vscp_check_pstorage 0019  
                 ECANSendMessage@buffers 0033                    _vscp_goBootloaderMode 5594  
             __end_of_Celsius2Fahrenheit 4E66             __end_of_ECANSetOperationMode 56CC  
                   _vscp_restoreDefaults 5786              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 0018                  __end_of_vscp_getSubzone 575E  
                           ?_handle_sync 0001              __size_of_vscp_getFamilyType 000A  
                           ___aldiv@sign 0085                               _RXM1EXIDEN 0078EB  
             __end_of_vscp_writeRegister 5594                       __end_of_vscp_error 5798  
                 ECANSendMessage@tempPtr 0036                     _adc_conversion_flags 00B6  
         __end_of_vscp_handleSetNickname 55F4       vscp_handleProtocolEvent@bytes_1040 0096  
                  ??_vscp_setControlByte 0013                     vscp_readRegister@reg 002A  
                           ___fladd@exp1 002B                             ___fladd@exp2 002A  
                           ___fladd@sign 0029                             __CANIDToRegs 4140  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 0086  
                          ___asfladd@f1p 002C              __size_of_vscp_getBufferSize 0002  
                           ___asfladd@f2 002E                 __size_of_ECANSendMessage 0166  
                           ___asfldiv@f2 0062  
