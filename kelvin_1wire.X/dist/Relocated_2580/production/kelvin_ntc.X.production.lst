

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Tue Mar  8 10:24:30 2016

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	text79,global,reloc=2,class=CODE,delta=1
    94                           	psect	text80,global,reloc=2,class=CODE,delta=1
    95                           	psect	text81,global,reloc=2,class=CODE,delta=1
    96                           	psect	text82,global,reloc=2,class=CODE,delta=1
    97                           	psect	text83,global,reloc=2,class=CODE,delta=1
    98                           	psect	text84,global,reloc=2,class=CODE,delta=1
    99                           	psect	text85,global,reloc=2,class=CODE,delta=1
   100                           	psect	text86,global,reloc=2,class=CODE,delta=1
   101                           	psect	text87,global,reloc=2,class=CODE,delta=1
   102                           	psect	text88,global,reloc=2,class=CODE,delta=1
   103                           	psect	text89,global,reloc=2,class=CODE,delta=1
   104                           	psect	text90,global,reloc=2,class=CODE,delta=1
   105                           	psect	text91,global,reloc=2,class=CODE,delta=1
   106                           	psect	text92,global,reloc=2,class=CODE,delta=1
   107                           	psect	text93,global,reloc=2,class=CODE,delta=1
   108                           	psect	text94,global,reloc=2,class=CODE,delta=1
   109                           	psect	text95,global,reloc=2,class=CODE,delta=1
   110                           	psect	text96,global,reloc=2,class=CODE,delta=1
   111                           	psect	text97,global,reloc=2,class=CODE,delta=1
   112                           	psect	text98,global,reloc=2,class=CODE,delta=1
   113                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   114                           	psect	text100,global,reloc=2,class=CODE,delta=1
   115                           	psect	text101,global,reloc=2,class=CODE,delta=1
   116                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   117                           	psect	text102,global,reloc=2,class=CODE,delta=1
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   119  0000                     
   120                           	psect	smallconst
   121  000B00                     __psmallconst:
   122                           	opt stack 0
   123  000B00                     _vscp_deviceURL:
   124                           	opt stack 0
   125  000B00  77                 	db	119
   126  000B01  77                 	db	119
   127  000B02  77                 	db	119
   128  000B03  2E                 	db	46
   129  000B04  65                 	db	101
   130  000B05  75                 	db	117
   131  000B06  72                 	db	114
   132  000B07  6F                 	db	111
   133  000B08  73                 	db	115
   134  000B09  6F                 	db	111
   135  000B0A  75                 	db	117
   136  000B0B  72                 	db	114
   137  000B0C  63                 	db	99
   138  000B0D  65                 	db	101
   139  000B0E  2E                 	db	46
   140  000B0F  73                 	db	115
   141  000B10  65                 	db	101
   142  000B11  2F                 	db	47
   143  000B12  6E                 	db	110
   144  000B13  74                 	db	116
   145  000B14  63                 	db	99
   146  000B15  31                 	db	49
   147  000B16  30                 	db	48
   148  000B17  4B                 	db	75
   149  000B18  41                 	db	65
   150  000B19  5F                 	db	95
   151  000B1A  33                 	db	51
   152  000B1B  2E                 	db	46
   153  000B1C  78                 	db	120
   154  000B1D  6D                 	db	109
   155  000B1E  6C                 	db	108
   156  000B1F  00                 	db	0
   157  000B20                     __end_of_vscp_deviceURL:
   158                           	opt stack 0
   159  000B20                     exp@coeff:
   160                           	opt stack 0
   161  000B20  0000               	dw	0
   162  000B22  3F80               	dw	16256
   163  000B24  7218               	dw	29208
   164  000B26  3F31               	dw	16177
   165  000B28  FDF0               	dw	65008
   166  000B2A  3E75               	dw	15989
   167  000B2C  5847               	dw	22599
   168  000B2E  3D63               	dw	15715
   169  000B30  9558               	dw	38232
   170  000B32  3C1D               	dw	15389
   171  000B34  C482               	dw	50306
   172  000B36  3AAE               	dw	15022
   173  000B38  78A8               	dw	30888
   174  000B3A  3921               	dw	14625
   175  000B3C  93EF               	dw	37871
   176  000B3E  3780               	dw	14208
   177  000B40  92A0               	dw	37536
   178  000B42  35A7               	dw	13735
   179  000B44  5646               	dw	22086
   180  000B46  3415               	dw	13333
   181  000B48                     __end_ofexp@coeff:
   182                           	opt stack 0
   183  000B48                     log@coeff:
   184                           	opt stack 0
   185  000B48  0000               	dw	0
   186  000B4A  0000               	dw	0
   187  000B4C  FFC4               	dw	65476
   188  000B4E  3F7F               	dw	16255
   189  000B50  EF80               	dw	61312
   190  000B52  BEFF               	dw	48895
   191  000B54  E190               	dw	57744
   192  000B56  3EA9               	dw	16041
   193  000B58  82EC               	dw	33516
   194  000B5A  BE76               	dw	48758
   195  000B5C  AD82               	dw	44418
   196  000B5E  3E2B               	dw	15915
   197  000B60  3C0E               	dw	15374
   198  000B62  BDC3               	dw	48579
   199  000B64  D187               	dw	53639
   200  000B66  3D13               	dw	15635
   201  000B68  7841               	dw	30785
   202  000B6A  BBD3               	dw	48083
   203  000B6C                     __end_oflog@coeff:
   204                           	opt stack 0
   205  0000                     _ADCON0	set	4034
   206  0000                     _ADCON0bits	set	4034
   207  0000                     _ADCON1	set	4033
   208  0000                     _ADCON2	set	4032
   209  0000                     _ADRESH	set	4036
   210  0000                     _ADRESL	set	4035
   211  0000                     _BRGCON1	set	3952
   212  0000                     _BRGCON2	set	3953
   213  0000                     _BRGCON3	set	3954
   214  0000                     _BSEL0	set	3576
   215  0000                     _CANCON	set	3951
   216  0000                     _CIOCON	set	3955
   217  0000                     _ECANCON	set	3959
   218  0000                     _EEADR	set	4009
   219  0000                     _EECON1bits	set	4006
   220  0000                     _EECON2	set	4007
   221  0000                     _EEDATA	set	4008
   222  0000                     _INTCONbits	set	4082
   223  0000                     _MSEL0	set	3568
   224  0000                     _MSEL1	set	3569
   225  0000                     _MSEL2	set	3570
   226  0000                     _PIE1bits	set	3997
   227  0000                     _PIR1bits	set	3998
   228  0000                     _PIR2bits	set	4001
   229  0000                     _PORTC	set	3970
   230  0000                     _RXB1CONbits	set	3920
   231  0000                     _RXF0EIDH	set	3842
   232  0000                     _RXF0EIDL	set	3843
   233  0000                     _RXF0SIDH	set	3840
   234  0000                     _RXF0SIDL	set	3841
   235  0000                     _RXF1EIDH	set	3846
   236  0000                     _RXF1EIDL	set	3847
   237  0000                     _RXF1SIDH	set	3844
   238  0000                     _RXF1SIDL	set	3845
   239  0000                     _RXFBCON0	set	3552
   240  0000                     _RXFBCON1	set	3553
   241  0000                     _RXFBCON2	set	3554
   242  0000                     _RXFBCON3	set	3555
   243  0000                     _RXFBCON4	set	3556
   244  0000                     _RXFBCON5	set	3557
   245  0000                     _RXFBCON6	set	3558
   246  0000                     _RXFBCON7	set	3559
   247  0000                     _RXFCON0	set	3540
   248  0000                     _RXFCON1	set	3541
   249  0000                     _RXM0EIDH	set	3866
   250  0000                     _RXM0EIDL	set	3867
   251  0000                     _RXM0SIDH	set	3864
   252  0000                     _RXM0SIDL	set	3865
   253  0000                     _RXM1EIDH	set	3870
   254  0000                     _RXM1EIDL	set	3871
   255  0000                     _RXM1SIDH	set	3868
   256  0000                     _RXM1SIDL	set	3869
   257  0000                     _T0CON	set	4053
   258  0000                     _T0CONbits	set	4053
   259  0000                     _TMR0H	set	4055
   260  0000                     _TMR0L	set	4054
   261  0000                     _TRISA	set	3986
   262  0000                     _TRISB	set	3987
   263  0000                     _TRISC	set	3988
   264  0000                     _B0RXFUL	set	28935
   265  0000                     _B0TXEN	set	28610
   266  0000                     _B1RXFUL	set	29063
   267  0000                     _B1TXEN	set	28611
   268  0000                     _B2RXFUL	set	29191
   269  0000                     _B2TXEN	set	28612
   270  0000                     _B3RXFUL	set	29319
   271  0000                     _B3TXEN	set	28613
   272  0000                     _B4RXFUL	set	29447
   273  0000                     _B4TXEN	set	28614
   274  0000                     _B5RXFUL	set	29575
   275  0000                     _B5TXEN	set	28615
   276  0000                     _FIFOEMPTY	set	31655
   277  0000                     _IRXIF	set	32039
   278  0000                     _MDSEL0	set	31678
   279  0000                     _MDSEL1	set	31679
   280  0000                     _RXB0FILHIT0	set	31488
   281  0000                     _RXB0FUL	set	31495
   282  0000                     _RXB0IF	set	32032
   283  0000                     _RXB0OVFL	set	31655
   284  0000                     _RXB1IF	set	32033
   285  0000                     _RXB1OVFL	set	31654
   286  0000                     _RXM0EXIDM	set	30923
   287  0000                     _RXM1EXIDEN	set	30955
   288  0000                     _B0CON	set	3616
   289  0000                     _B1CON	set	3632
   290  0000                     _B2CON	set	3648
   291  0000                     _B3CON	set	3664
   292  0000                     _B4CON	set	3680
   293  0000                     _B5CON	set	3696
   294  0000                     _RXB0CON	set	3936
   295  0000                     _RXB1CON	set	3920
   296  0000                     _TXB0CON	set	3904
   297  0000                     _TXB1CON	set	3888
   298  0000                     _TXB2CON	set	3872
   299                           
   300                           ; #config settings
   301  000B6C  00                 	db	0	; dummy byte at the end
   302  0000                     
   303                           	psect	cinit
   304  005664                     __pcinit:
   305                           	opt stack 0
   306  005664                     start_initialization:
   307                           	opt stack 0
   308  005664                     __initialization:
   309                           	opt stack 0
   310                           
   311                           ; Clear objects allocated to BIGRAM (960 bytes)
   312  005664  EE01  F09E         	lfsr	0,__pbssBIGRAM
   313  005668  EE13 F0C0          	lfsr	1,960
   314  00566C                     clear_0:
   315  00566C  6AEE               	clrf	postinc0,c
   316  00566E  50E5               	movf	postdec1,w,c
   317  005670  50E1               	movf	fsr1l,w,c
   318  005672  E1FC               	bnz	clear_0
   319  005674  50E2               	movf	fsr1h,w,c
   320  005676  E1FA               	bnz	clear_0
   321                           
   322                           ; Clear objects allocated to BANK1 (106 bytes)
   323  005678  EE01  F000         	lfsr	0,__pbssBANK1
   324  00567C  0E6A               	movlw	106
   325  00567E                     clear_1:
   326  00567E  6AEE               	clrf	postinc0,c
   327  005680  06E8               	decf	wreg,f,c
   328  005682  E1FD               	bnz	clear_1
   329                           
   330                           ; Clear objects allocated to BANK0 (35 bytes)
   331  005684  EE00  F0B6         	lfsr	0,__pbssBANK0
   332  005688  0E23               	movlw	35
   333  00568A                     clear_2:
   334  00568A  6AEE               	clrf	postinc0,c
   335  00568C  06E8               	decf	wreg,f,c
   336  00568E  E1FD               	bnz	clear_2
   337                           
   338                           ; Clear objects allocated to COMRAM (13 bytes)
   339  005690  EE00  F046         	lfsr	0,__pbssCOMRAM
   340  005694  0E0D               	movlw	13
   341  005696                     clear_3:
   342  005696  6AEE               	clrf	postinc0,c
   343  005698  06E8               	decf	wreg,f,c
   344  00569A  E1FD               	bnz	clear_3
   345  00569C                     end_of_initialization:
   346                           	opt stack 0
   347  00569C                     __end_of__initialization:
   348                           	opt stack 0
   349  00569C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   350  00569E  6EF8               	movwf	tblptru,c
   351  0056A0  0100               	movlb	0
   352  0056A2  EF5A  F022         	goto	_main	;jump to C main() function
   353                           tblptru	equ	0xFF8
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           postdec1	equ	0xFE5
   357                           fsr1h	equ	0xFE2
   358                           fsr1l	equ	0xFE1
   359                           
   360                           	psect	bssCOMRAM
   361  000046                     __pbssCOMRAM:
   362                           	opt stack 0
   363  000046                     _vscp_page_select:
   364                           	opt stack 0
   365  000046                     	ds	2
   366  000048                     __ECANRxFilterHitInfo:
   367                           	opt stack 0
   368  000048                     	ds	1
   369  000049                     _adc_series_counter:
   370                           	opt stack 0
   371  000049                     	ds	1
   372  00004A                     _vscp_alarmstatus:
   373                           	opt stack 0
   374  00004A                     	ds	1
   375  00004B                     _vscp_errorcnt:
   376                           	opt stack 0
   377  00004B                     	ds	1
   378  00004C                     _vscp_guid_reset:
   379                           	opt stack 0
   380  00004C                     	ds	1
   381  00004D                     _vscp_initledfunc:
   382                           	opt stack 0
   383  00004D                     	ds	1
   384  00004E                     _vscp_node_substate:
   385                           	opt stack 0
   386  00004E                     	ds	1
   387  00004F                     _vscp_probe_address:
   388                           	opt stack 0
   389  00004F                     	ds	1
   390  000050                     _vscp_probe_cnt:
   391                           	opt stack 0
   392  000050                     	ds	1
   393  000051                     _vscp_second:
   394                           	opt stack 0
   395  000051                     	ds	1
   396  000052                     _vscp_statuscnt:
   397                           	opt stack 0
   398  000052                     	ds	1
   399                           tblptru	equ	0xFF8
   400                           postinc0	equ	0xFEE
   401                           wreg	equ	0xFE8
   402                           postdec1	equ	0xFE5
   403                           fsr1h	equ	0xFE2
   404                           fsr1l	equ	0xFE1
   405                           
   406                           	psect	bssBANK0
   407  0000B6                     __pbssBANK0:
   408                           	opt stack 0
   409  0000B6                     _adc_conversion_flags:
   410                           	opt stack 0
   411  0000B6                     	ds	1
   412  0000B7                     _high_alarm:
   413                           	opt stack 0
   414  0000B7                     	ds	1
   415  0000B8                     _low_alarm:
   416                           	opt stack 0
   417  0000B8                     	ds	1
   418  0000B9                     _seconds:
   419                           	opt stack 0
   420  0000B9                     	ds	1
   421  0000BA                     _vscp_initbtncnt:
   422                           	opt stack 0
   423  0000BA                     	ds	1
   424  0000BB                     _vscp_nickname:
   425                           	opt stack 0
   426  0000BB                     	ds	1
   427  0000BC                     _vscp_node_state:
   428                           	opt stack 0
   429  0000BC                     	ds	1
   430  0000BD                     _vscp_imsg:
   431                           	opt stack 0
   432  0000BD                     	ds	14
   433  0000CB                     _vscp_omsg:
   434                           	opt stack 0
   435  0000CB                     	ds	14
   436                           tblptru	equ	0xFF8
   437                           postinc0	equ	0xFEE
   438                           wreg	equ	0xFE8
   439                           postdec1	equ	0xFE5
   440                           fsr1h	equ	0xFE2
   441                           fsr1l	equ	0xFE1
   442                           
   443                           	psect	bssBANK1
   444  000100                     __pbssBANK1:
   445                           	opt stack 0
   446  000100                     _current_temp:
   447                           	opt stack 0
   448  000100                     	ds	12
   449  00010C                     _seconds_temp:
   450                           	opt stack 0
   451  00010C                     	ds	6
   452  000112                     _measurement_clock:
   453                           	opt stack 0
   454  000112                     	ds	4
   455  000116                     _timeout_clock:
   456                           	opt stack 0
   457  000116                     	ds	4
   458  00011A                     _sendTimer:
   459                           	opt stack 0
   460  00011A                     	ds	2
   461  00011C                     _vscp_configtimer:
   462                           	opt stack 0
   463  00011C                     	ds	2
   464  00011E                     _vscp_timer:
   465                           	opt stack 0
   466  00011E                     	ds	2
   467  000120                     _vscp_hour:
   468                           	opt stack 0
   469  000120                     	ds	1
   470  000121                     _vscp_minute:
   471                           	opt stack 0
   472  000121                     	ds	1
   473  000122                     _sh_coefficients:
   474                           	opt stack 0
   475  000122                     	ds	72
   476                           tblptru	equ	0xFF8
   477                           postinc0	equ	0xFEE
   478                           wreg	equ	0xFE8
   479                           postdec1	equ	0xFE5
   480                           fsr1h	equ	0xFE2
   481                           fsr1l	equ	0xFE1
   482                           
   483                           	psect	bssBIGRAM
   484  00019E                     __pbssBIGRAM:
   485                           	opt stack 0
   486  00019E                     _adc:
   487                           	opt stack 0
   488  00019E                     	ds	960
   489                           tblptru	equ	0xFF8
   490                           postinc0	equ	0xFEE
   491                           wreg	equ	0xFE8
   492                           postdec1	equ	0xFE5
   493                           fsr1h	equ	0xFE2
   494                           fsr1l	equ	0xFE1
   495                           
   496                           	psect	cstackBANK1
   497  00016A                     __pcstackBANK1:
   498                           	opt stack 0
   499  00016A                     doWork@Rinf:
   500                           	opt stack 0
   501                           
   502                           ; 4 bytes @ 0x0
   503  00016A                     	ds	4
   504  00016E                     doWork@calVoltage:
   505                           	opt stack 0
   506                           
   507                           ; 4 bytes @ 0x4
   508  00016E                     	ds	4
   509  000172                     _doWork$2275:
   510                           	opt stack 0
   511                           
   512                           ; 4 bytes @ 0x8
   513  000172                     	ds	4
   514  000176                     _doWork$2276:
   515                           	opt stack 0
   516                           
   517                           ; 4 bytes @ 0xC
   518  000176                     	ds	4
   519  00017A                     _doWork$2277:
   520                           	opt stack 0
   521                           
   522                           ; 4 bytes @ 0x10
   523  00017A                     	ds	16
   524  00018A                     doWork@v:
   525                           	opt stack 0
   526                           
   527                           ; 4 bytes @ 0x20
   528  00018A                     	ds	4
   529  00018E                     doWork@B:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x24
   533  00018E                     	ds	2
   534  000190                     doWork@resistance:
   535                           	opt stack 0
   536                           
   537                           ; 4 bytes @ 0x26
   538  000190                     	ds	4
   539  000194                     doWork@j:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0x2A
   543  000194                     	ds	1
   544  000195                     doWork@avarage:
   545                           	opt stack 0
   546                           
   547                           ; 4 bytes @ 0x2B
   548  000195                     	ds	4
   549  000199                     doWork@temp:
   550                           	opt stack 0
   551                           
   552                           ; 4 bytes @ 0x2F
   553  000199                     	ds	4
   554  00019D                     doWork@i:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0x33
   558  00019D                     	ds	1
   559                           tblptru	equ	0xFF8
   560                           postinc0	equ	0xFEE
   561                           wreg	equ	0xFE8
   562                           postdec1	equ	0xFE5
   563                           fsr1h	equ	0xFE2
   564                           fsr1l	equ	0xFE1
   565                           
   566                           	psect	cstackBANK0
   567  000060                     __pcstackBANK0:
   568                           	opt stack 0
   569  000060                     ?_sendVSCPFrame:
   570                           	opt stack 0
   571  000060                     ?___flmul:
   572                           	opt stack 0
   573  000060                     ?___asfldiv:
   574                           	opt stack 0
   575  000060                     sendVSCPFrame@vscpclass:
   576                           	opt stack 0
   577  000060                     ___asfldiv@f1p:
   578                           	opt stack 0
   579  000060                     ___flmul@f1:
   580                           	opt stack 0
   581                           
   582                           ; 4 bytes @ 0x0
   583  000060                     	ds	2
   584  000062                     sendVSCPFrame@vscptype:
   585                           	opt stack 0
   586  000062                     ___asfldiv@f2:
   587                           	opt stack 0
   588                           
   589                           ; 4 bytes @ 0x2
   590  000062                     	ds	1
   591  000063                     sendVSCPFrame@nodeid:
   592                           	opt stack 0
   593                           
   594                           ; 1 bytes @ 0x3
   595  000063                     	ds	1
   596  000064                     sendVSCPFrame@priority:
   597                           	opt stack 0
   598  000064                     ___flmul@f2:
   599                           	opt stack 0
   600                           
   601                           ; 4 bytes @ 0x4
   602  000064                     	ds	1
   603  000065                     sendVSCPFrame@size:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x5
   607  000065                     	ds	1
   608  000066                     sendVSCPFrame@pData:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0x6
   612  000066                     	ds	1
   613  000067                     ??_sendVSCPFrame:
   614                           
   615                           ; 0 bytes @ 0x7
   616  000067                     	ds	8
   617  00006F                     ___flmul@exp:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0xF
   621  00006F                     	ds	1
   622  000070                     ___flmul@f3_as_product:
   623                           	opt stack 0
   624                           
   625                           ; 4 bytes @ 0x10
   626  000070                     	ds	4
   627  000074                     ___flmul@cntr:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x14
   631  000074                     	ds	1
   632  000075                     ___flmul@sign:
   633                           	opt stack 0
   634                           
   635                           ; 1 bytes @ 0x15
   636  000075                     	ds	1
   637  000076                     ?_Celsius2Fahrenheit:
   638                           	opt stack 0
   639  000076                     ?___flsub:
   640                           	opt stack 0
   641  000076                     ?_eval_poly:
   642                           	opt stack 0
   643  000076                     ?___asflmul:
   644                           	opt stack 0
   645  000076                     ?___fltol:
   646                           	opt stack 0
   647  000076                     Celsius2Fahrenheit@tc:
   648                           	opt stack 0
   649  000076                     ___asflmul@multiplicand:
   650                           	opt stack 0
   651  000076                     ___flsub@f1:
   652                           	opt stack 0
   653  000076                     ___fltol@f1:
   654                           	opt stack 0
   655  000076                     eval_poly@x:
   656                           	opt stack 0
   657                           
   658                           ; 4 bytes @ 0x16
   659  000076                     	ds	4
   660  00007A                     ___fltol@sign1:
   661                           	opt stack 0
   662  00007A                     eval_poly@d:
   663                           	opt stack 0
   664  00007A                     ___flsub@f2:
   665                           	opt stack 0
   666                           
   667                           ; 4 bytes @ 0x1A
   668  00007A                     	ds	1
   669  00007B                     ___fltol@exp1:
   670                           	opt stack 0
   671  00007B                     eval_poly@n:
   672                           	opt stack 0
   673  00007B                     sendVSCPFrame@id:
   674                           	opt stack 0
   675                           
   676                           ; 4 bytes @ 0x1B
   677  00007B                     	ds	1
   678  00007C                     ?_setEventData:
   679                           	opt stack 0
   680  00007C                     ?___aldiv:
   681                           	opt stack 0
   682  00007C                     setEventData@v:
   683                           	opt stack 0
   684  00007C                     ___aldiv@dividend:
   685                           	opt stack 0
   686                           
   687                           ; 4 bytes @ 0x1C
   688  00007C                     	ds	1
   689  00007D                     eval_poly@res:
   690                           	opt stack 0
   691                           
   692                           ; 4 bytes @ 0x1D
   693  00007D                     	ds	1
   694  00007E                     ?___asflsub:
   695                           	opt stack 0
   696  00007E                     setEventData@unit:
   697                           	opt stack 0
   698  00007E                     ___asflsub@f1p:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x1E
   702  00007E                     	ds	1
   703  00007F                     ??_vscp_handleProtocolEvent:
   704  00007F                     ??_vscp_doOneSecondWork:
   705  00007F                     setEventData@newval:
   706                           	opt stack 0
   707                           
   708                           ; 4 bytes @ 0x1F
   709  00007F                     	ds	1
   710  000080                     ___aldiv@divisor:
   711                           	opt stack 0
   712  000080                     ___asflsub@f2:
   713                           	opt stack 0
   714                           
   715                           ; 4 bytes @ 0x20
   716  000080                     	ds	1
   717  000081                     ?_log:
   718                           	opt stack 0
   719  000081                     ?_ldexp:
   720                           	opt stack 0
   721  000081                     ldexp@value:
   722                           	opt stack 0
   723  000081                     log@x:
   724                           	opt stack 0
   725                           
   726                           ; 4 bytes @ 0x21
   727  000081                     	ds	2
   728  000083                     setEventData@ival:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x23
   732  000083                     	ds	1
   733  000084                     ___aldiv@counter:
   734                           	opt stack 0
   735                           
   736                           ; 1 bytes @ 0x24
   737  000084                     	ds	1
   738  000085                     ??_sendTempEvent:
   739  000085                     ___aldiv@sign:
   740                           	opt stack 0
   741  000085                     ldexp@newexp:
   742                           	opt stack 0
   743                           
   744                           ; 2 bytes @ 0x25
   745  000085                     	ds	1
   746  000086                     sendTempEvent@i:
   747                           	opt stack 0
   748  000086                     vscp_handleProtocolEvent@page_save:
   749                           	opt stack 0
   750  000086                     ___aldiv@quotient:
   751                           	opt stack 0
   752                           
   753                           ; 4 bytes @ 0x26
   754  000086                     	ds	1
   755  000087                     ??_handle_sync:
   756  000087                     ??_doOneSecondWork:
   757                           
   758                           ; 0 bytes @ 0x27
   759  000087                     	ds	1
   760  000088                     vscp_handleProtocolEvent@page_save_1166:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x28
   764  000088                     	ds	1
   765  000089                     handle_sync@i:
   766                           	opt stack 0
   767                           
   768                           ; 1 bytes @ 0x29
   769  000089                     	ds	1
   770  00008A                     ?___altofl:
   771                           	opt stack 0
   772  00008A                     vscp_handleProtocolEvent@offset:
   773                           	opt stack 0
   774  00008A                     ___altofl@c:
   775                           	opt stack 0
   776                           
   777                           ; 4 bytes @ 0x2A
   778  00008A                     	ds	1
   779  00008B                     vscp_handleProtocolEvent@pos:
   780                           	opt stack 0
   781                           
   782                           ; 1 bytes @ 0x2B
   783  00008B                     	ds	1
   784  00008C                     vscp_handleProtocolEvent@bytes:
   785                           	opt stack 0
   786                           
   787                           ; 1 bytes @ 0x2C
   788  00008C                     	ds	1
   789  00008D                     vscp_handleProtocolEvent@len:
   790                           	opt stack 0
   791                           
   792                           ; 1 bytes @ 0x2D
   793  00008D                     	ds	1
   794  00008E                     doOneSecondWork@tmp:
   795                           	opt stack 0
   796  00008E                     vscp_handleProtocolEvent@pos_1155:
   797                           	opt stack 0
   798  00008E                     ___altofl@sign:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x2E
   802  00008E                     	ds	1
   803  00008F                     ?_floor:
   804                           	opt stack 0
   805  00008F                     vscp_handleProtocolEvent@len_1156:
   806                           	opt stack 0
   807  00008F                     doOneSecondWork@setpoint:
   808                           	opt stack 0
   809  00008F                     floor@x:
   810                           	opt stack 0
   811                           
   812                           ; 4 bytes @ 0x2F
   813  00008F                     	ds	1
   814  000090                     vscp_handleProtocolEvent@bytes_this_time:
   815                           	opt stack 0
   816                           
   817                           ; 1 bytes @ 0x30
   818  000090                     	ds	1
   819  000091                     doOneSecondWork@i:
   820                           	opt stack 0
   821  000091                     vscp_handleProtocolEvent@cb:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x31
   825  000091                     	ds	1
   826  000092                     vscp_handleProtocolEvent@i_1165:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0x32
   830  000092                     	ds	1
   831  000093                     vscp_handleProtocolEvent@k:
   832                           	opt stack 0
   833  000093                     floor@i:
   834                           	opt stack 0
   835                           
   836                           ; 4 bytes @ 0x33
   837  000093                     	ds	1
   838  000094                     vscp_handleProtocolEvent@i_1154:
   839                           	opt stack 0
   840                           
   841                           ; 1 bytes @ 0x34
   842  000094                     	ds	1
   843  000095                     vscp_handleProtocolEvent@byte:
   844                           	opt stack 0
   845                           
   846                           ; 1 bytes @ 0x35
   847  000095                     	ds	1
   848  000096                     vscp_handleProtocolEvent@bytes_1161:
   849                           	opt stack 0
   850                           
   851                           ; 2 bytes @ 0x36
   852  000096                     	ds	1
   853  000097                     floor@expon:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x37
   857  000097                     	ds	1
   858  000098                     vscp_handleProtocolEvent@i_1157:
   859                           	opt stack 0
   860                           
   861                           ; 1 bytes @ 0x38
   862  000098                     	ds	1
   863  000099                     ?_exp:
   864                           	opt stack 0
   865  000099                     vscp_handleProtocolEvent@i:
   866                           	opt stack 0
   867  000099                     exp@x:
   868                           	opt stack 0
   869                           
   870                           ; 4 bytes @ 0x39
   871  000099                     	ds	1
   872  00009A                     vscp_handleProtocolEvent@j:
   873                           	opt stack 0
   874                           
   875                           ; 1 bytes @ 0x3A
   876  00009A                     	ds	3
   877  00009D                     _exp$2281:
   878                           	opt stack 0
   879                           
   880                           ; 4 bytes @ 0x3D
   881  00009D                     	ds	4
   882  0000A1                     exp@exponent:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0x41
   886  0000A1                     	ds	2
   887  0000A3                     exp@sign:
   888                           	opt stack 0
   889                           
   890                           ; 1 bytes @ 0x43
   891  0000A3                     	ds	1
   892  0000A4                     ??_doWork:
   893                           
   894                           ; 0 bytes @ 0x44
   895  0000A4                     	ds	14
   896  0000B2                     main@i:
   897                           	opt stack 0
   898                           
   899                           ; 4 bytes @ 0x52
   900  0000B2                     	ds	4
   901                           tblptru	equ	0xFF8
   902                           postinc0	equ	0xFEE
   903                           wreg	equ	0xFE8
   904                           postdec1	equ	0xFE5
   905                           fsr1h	equ	0xFE2
   906                           fsr1l	equ	0xFE1
   907                           
   908                           	psect	cstackCOMRAM
   909  000001                     __pcstackCOMRAM:
   910                           	opt stack 0
   911  000001                     ?i1_WriteTimer0:
   912                           	opt stack 0
   913  000001                     i1WriteTimer0@timer0:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x0
   917  000001                     	ds	2
   918  000003                     i1WriteTimer0@timer:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0x2
   922  000003                     	ds	2
   923  000005                     ??_interrupt_at_low_vector:
   924                           
   925                           ; 0 bytes @ 0x4
   926  000005                     	ds	9
   927  00000E                     ?_WriteTimer0:
   928                           	opt stack 0
   929  00000E                     ?_writeEEPROM:
   930                           	opt stack 0
   931  00000E                     ?_OpenADC:
   932                           	opt stack 0
   933  00000E                     ?__CANIDToRegs:
   934                           	opt stack 0
   935  00000E                     ?__RegsToCANID:
   936                           	opt stack 0
   937  00000E                     ??_vscp_getMDF_URL:
   938  00000E                     ?___flge:
   939                           	opt stack 0
   940  00000E                     ?___lbmod:
   941                           	opt stack 0
   942  00000E                     ?__ECANPointBuffer:
   943                           	opt stack 0
   944  00000E                     ?___wmul:
   945                           	opt stack 0
   946  00000E                     ?___flpack:
   947                           	opt stack 0
   948  00000E                     ?_frexp:
   949                           	opt stack 0
   950  00000E                     ?_vscp_getFamilyCode:
   951                           	opt stack 0
   952  00000E                     ?_vscp_getFamilyType:
   953                           	opt stack 0
   954  00000E                     ?___flneg:
   955                           	opt stack 0
   956  00000E                     init_app_ram@i:
   957                           	opt stack 0
   958  00000E                     vscp_getMatrixInfo@pData:
   959                           	opt stack 0
   960  00000E                     ECANSetOperationMode@mode:
   961                           	opt stack 0
   962  00000E                     OpenADC@config2:
   963                           	opt stack 0
   964  00000E                     OpenTimer0@config:
   965                           	opt stack 0
   966  00000E                     ___lbmod@divisor:
   967                           	opt stack 0
   968  00000E                     __CANIDToRegs@ptr:
   969                           	opt stack 0
   970  00000E                     __RegsToCANID@ptr:
   971                           	opt stack 0
   972  00000E                     writeEEPROM@address:
   973                           	opt stack 0
   974  00000E                     WriteTimer0@timer0:
   975                           	opt stack 0
   976  00000E                     ___wmul@multiplier:
   977                           	opt stack 0
   978  00000E                     ___flpack@arg:
   979                           	opt stack 0
   980  00000E                     ___flge@ff1:
   981                           	opt stack 0
   982  00000E                     ___flneg@f1:
   983                           	opt stack 0
   984  00000E                     frexp@value:
   985                           	opt stack 0
   986                           
   987                           ; 4 bytes @ 0xD
   988  00000E                     	ds	1
   989  00000F                     vscp_getMDF_URL@idx:
   990                           	opt stack 0
   991  00000F                     vscp_getMatrixInfo@i:
   992                           	opt stack 0
   993  00000F                     OpenADC@portconfig:
   994                           	opt stack 0
   995  00000F                     ___lbmod@dividend:
   996                           	opt stack 0
   997                           
   998                           ; 1 bytes @ 0xE
   999  00000F                     	ds	1
  1000  000010                     ??_OpenADC:
  1001  000010                     __RegsToCANID@val:
  1002                           	opt stack 0
  1003  000010                     writeEEPROM@data:
  1004                           	opt stack 0
  1005  000010                     ___lbmod@counter:
  1006                           	opt stack 0
  1007  000010                     WriteTimer0@timer:
  1008                           	opt stack 0
  1009  000010                     ___wmul@multiplicand:
  1010                           	opt stack 0
  1011  000010                     __CANIDToRegs@val:
  1012                           	opt stack 0
  1013                           
  1014                           ; 4 bytes @ 0xF
  1015  000010                     	ds	1
  1016  000011                     ?_vscp_setGUID:
  1017                           	opt stack 0
  1018  000011                     ?_vscp_setUserID:
  1019                           	opt stack 0
  1020  000011                     ?_vscp_setManufacturerId:
  1021                           	opt stack 0
  1022  000011                     ?_vscp_setControlByte:
  1023                           	opt stack 0
  1024  000011                     vscp_setGUID@data:
  1025                           	opt stack 0
  1026  000011                     vscp_setUserID@data:
  1027                           	opt stack 0
  1028  000011                     vscp_setManufacturerId@data:
  1029                           	opt stack 0
  1030  000011                     vscp_goBootloaderMode@algorithm:
  1031                           	opt stack 0
  1032  000011                     vscp_writeNicknamePermanent@nickname:
  1033                           	opt stack 0
  1034  000011                     vscp_setControlByte@idx:
  1035                           	opt stack 0
  1036  000011                     __RegsToCANID@type:
  1037                           	opt stack 0
  1038  000011                     __ECANPointBuffer@b:
  1039                           	opt stack 0
  1040  000011                     ___lbmod@rem:
  1041                           	opt stack 0
  1042                           
  1043                           ; 1 bytes @ 0x10
  1044  000011                     	ds	1
  1045  000012                     ??__RegsToCANID:
  1046  000012                     vscp_setGUID@idx:
  1047                           	opt stack 0
  1048  000012                     vscp_setUserID@idx:
  1049                           	opt stack 0
  1050  000012                     vscp_setManufacturerId@idx:
  1051                           	opt stack 0
  1052  000012                     vscp_setControlByte@ctrl:
  1053                           	opt stack 0
  1054  000012                     OpenADC@config:
  1055                           	opt stack 0
  1056  000012                     ___flpack@exp:
  1057                           	opt stack 0
  1058  000012                     __ECANPointBuffer@pt:
  1059                           	opt stack 0
  1060  000012                     frexp@eptr:
  1061                           	opt stack 0
  1062  000012                     ___flge@ff2:
  1063                           	opt stack 0
  1064                           
  1065                           ; 4 bytes @ 0x11
  1066  000012                     	ds	1
  1067  000013                     ___flpack@sign:
  1068                           	opt stack 0
  1069                           
  1070                           ; 1 bytes @ 0x12
  1071  000013                     	ds	1
  1072  000014                     ??___flpack:
  1073  000014                     ??_frexp:
  1074  000014                     __CANIDToRegs@type:
  1075                           	opt stack 0
  1076  000014                     __RegsToCANID@Value:
  1077                           	opt stack 0
  1078  000014                     ___wmul@product:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x13
  1082  000014                     	ds	1
  1083  000015                     ??__CANIDToRegs:
  1084  000015                     ?_ECANReceiveMessage:
  1085                           	opt stack 0
  1086  000015                     ECANReceiveMessage@data:
  1087                           	opt stack 0
  1088                           
  1089                           ; 1 bytes @ 0x14
  1090  000015                     	ds	1
  1091  000016                     ?_readEEPROM:
  1092                           	opt stack 0
  1093  000016                     ECANReceiveMessage@dataLen:
  1094                           	opt stack 0
  1095  000016                     readEEPROM@address:
  1096                           	opt stack 0
  1097                           
  1098                           ; 2 bytes @ 0x15
  1099  000016                     	ds	1
  1100  000017                     ECANReceiveMessage@msgFlags:
  1101                           	opt stack 0
  1102  000017                     __CANIDToRegs@Value:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0x16
  1106  000017                     	ds	1
  1107  000018                     ?_ECANSendMessage:
  1108                           	opt stack 0
  1109  000018                     ?___awtofl:
  1110                           	opt stack 0
  1111  000018                     ECANReceiveMessage@savedPtr:
  1112                           	opt stack 0
  1113  000018                     ___awtofl@c:
  1114                           	opt stack 0
  1115  000018                     ECANSendMessage@id:
  1116                           	opt stack 0
  1117                           
  1118                           ; 4 bytes @ 0x17
  1119  000018                     	ds	1
  1120  000019                     readEEPROM@data:
  1121                           	opt stack 0
  1122                           
  1123                           ; 1 bytes @ 0x18
  1124  000019                     	ds	1
  1125  00001A                     ??_writeCoeffs2Ram:
  1126  00001A                     ?_getCalibrationValue:
  1127                           	opt stack 0
  1128  00001A                     ?___lwtofl:
  1129                           	opt stack 0
  1130  00001A                     vscp_readAppReg@pos:
  1131                           	opt stack 0
  1132  00001A                     vscp_getGUID@idx:
  1133                           	opt stack 0
  1134  00001A                     vscp_getUserID@idx:
  1135                           	opt stack 0
  1136  00001A                     vscp_getManufacturerId@idx:
  1137                           	opt stack 0
  1138  00001A                     vscp_getControlByte@idx:
  1139                           	opt stack 0
  1140  00001A                     ECANReceiveMessage@id:
  1141                           	opt stack 0
  1142  00001A                     vscp_handleDropNickname@bytes:
  1143                           	opt stack 0
  1144  00001A                     ___lwtofl@c:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0x19
  1148  00001A                     	ds	1
  1149  00001B                     ??_vscp_readStdReg:
  1150  00001B                     ?_vscp_writeStdReg:
  1151                           	opt stack 0
  1152  00001B                     vscp_readAppReg@reg:
  1153                           	opt stack 0
  1154  00001B                     ECANReceiveMessage@i:
  1155                           	opt stack 0
  1156  00001B                     vscp_writeStdReg@value:
  1157                           	opt stack 0
  1158                           
  1159                           ; 1 bytes @ 0x1A
  1160  00001B                     	ds	1
  1161  00001C                     ??_getCalibrationValue:
  1162  00001C                     ??_vscp_writeStdReg:
  1163  00001C                     vscp_readAppReg@rv:
  1164                           	opt stack 0
  1165  00001C                     ECANSendMessage@data:
  1166                           	opt stack 0
  1167  00001C                     ECANReceiveMessage@mode:
  1168                           	opt stack 0
  1169  00001C                     writeCoeffs2Ram@c:
  1170                           	opt stack 0
  1171                           
  1172                           ; 3 bytes @ 0x1B
  1173  00001C                     	ds	1
  1174  00001D                     ?___fladd:
  1175                           	opt stack 0
  1176  00001D                     ECANSendMessage@dataLen:
  1177                           	opt stack 0
  1178  00001D                     ECANReceiveMessage@temp:
  1179                           	opt stack 0
  1180  00001D                     getCalibrationValue@cal:
  1181                           	opt stack 0
  1182  00001D                     ___fladd@f1:
  1183                           	opt stack 0
  1184                           
  1185                           ; 4 bytes @ 0x1C
  1186  00001D                     	ds	1
  1187  00001E                     ECANSendMessage@msgFlags:
  1188                           	opt stack 0
  1189  00001E                     ___awtofl@sign:
  1190                           	opt stack 0
  1191  00001E                     ECANReceiveMessage@ptr:
  1192                           	opt stack 0
  1193                           
  1194                           ; 2 bytes @ 0x1D
  1195  00001E                     	ds	1
  1196  00001F                     ??_ECANSendMessage:
  1197  00001F                     getCalibrationValue@i:
  1198                           	opt stack 0
  1199  00001F                     writeCoeffs2Ram@i:
  1200                           	opt stack 0
  1201                           
  1202                           ; 2 bytes @ 0x1E
  1203  00001F                     	ds	1
  1204  000020                     ?_getCANFrame:
  1205                           	opt stack 0
  1206  000020                     getCANFrame@pdlc:
  1207                           	opt stack 0
  1208  000020                     vscp_writeStdReg@rv:
  1209                           	opt stack 0
  1210  000020                     vscp_readStdReg@code:
  1211                           	opt stack 0
  1212  000020                     ECANSendMessage@pb:
  1213                           	opt stack 0
  1214                           
  1215                           ; 18 bytes @ 0x1F
  1216  000020                     	ds	1
  1217  000021                     getCANFrame@pdata:
  1218                           	opt stack 0
  1219  000021                     vscp_writeStdReg@reg:
  1220                           	opt stack 0
  1221  000021                     writeCoeffs2Ram@j:
  1222                           	opt stack 0
  1223  000021                     ___fladd@f2:
  1224                           	opt stack 0
  1225                           
  1226                           ; 4 bytes @ 0x20
  1227  000021                     	ds	1
  1228  000022                     getCANFrame@pid:
  1229                           	opt stack 0
  1230                           
  1231                           ; 1 bytes @ 0x21
  1232  000022                     	ds	1
  1233  000023                     ?_vscp_writeAppReg:
  1234                           	opt stack 0
  1235  000023                     vscp_writeAppReg@val:
  1236                           	opt stack 0
  1237  000023                     getCANFrame@flags:
  1238                           	opt stack 0
  1239                           
  1240                           ; 1 bytes @ 0x22
  1241  000023                     	ds	1
  1242  000024                     ?_getVSCPFrame:
  1243                           	opt stack 0
  1244  000024                     vscp_writeAppReg@pos:
  1245                           	opt stack 0
  1246  000024                     getVSCPFrame@pvscptype:
  1247                           	opt stack 0
  1248  000024                     vscp_readStdReg@code_1139:
  1249                           	opt stack 0
  1250                           
  1251                           ; 4 bytes @ 0x23
  1252  000024                     	ds	1
  1253  000025                     ??___fladd:
  1254  000025                     vscp_writeAppReg@reg:
  1255                           	opt stack 0
  1256  000025                     getVSCPFrame@pNodeId:
  1257                           	opt stack 0
  1258                           
  1259                           ; 1 bytes @ 0x24
  1260  000025                     	ds	1
  1261  000026                     vscp_writeAppReg@rv:
  1262                           	opt stack 0
  1263  000026                     getVSCPFrame@pPriority:
  1264                           	opt stack 0
  1265                           
  1266                           ; 1 bytes @ 0x25
  1267  000026                     	ds	1
  1268  000027                     ?_vscp_writeRegister:
  1269                           	opt stack 0
  1270  000027                     getVSCPFrame@pSize:
  1271                           	opt stack 0
  1272  000027                     vscp_writeRegister@value:
  1273                           	opt stack 0
  1274                           
  1275                           ; 1 bytes @ 0x26
  1276  000027                     	ds	1
  1277  000028                     getVSCPFrame@pData:
  1278                           	opt stack 0
  1279  000028                     vscp_readStdReg@idx:
  1280                           	opt stack 0
  1281  000028                     vscp_writeRegister@reg:
  1282                           	opt stack 0
  1283                           
  1284                           ; 1 bytes @ 0x27
  1285  000028                     	ds	1
  1286  000029                     ??_getVSCPFrame:
  1287  000029                     vscp_readStdReg@idx_1140:
  1288                           	opt stack 0
  1289  000029                     ___fladd@sign:
  1290                           	opt stack 0
  1291                           
  1292                           ; 1 bytes @ 0x28
  1293  000029                     	ds	1
  1294  00002A                     vscp_readStdReg@rv:
  1295                           	opt stack 0
  1296  00002A                     ___fladd@exp2:
  1297                           	opt stack 0
  1298                           
  1299                           ; 1 bytes @ 0x29
  1300  00002A                     	ds	1
  1301  00002B                     vscp_readStdReg@reg:
  1302                           	opt stack 0
  1303  00002B                     ___fladd@exp1:
  1304                           	opt stack 0
  1305                           
  1306                           ; 1 bytes @ 0x2A
  1307  00002B                     	ds	1
  1308  00002C                     ?_Celsius2Kelvin:
  1309                           	opt stack 0
  1310  00002C                     ?___fldiv:
  1311                           	opt stack 0
  1312  00002C                     ?___asfladd:
  1313                           	opt stack 0
  1314  00002C                     vscp_readRegister@reg:
  1315                           	opt stack 0
  1316  00002C                     ___asfladd@f1p:
  1317                           	opt stack 0
  1318  00002C                     Celsius2Kelvin@tc:
  1319                           	opt stack 0
  1320  00002C                     ___fldiv@f1:
  1321                           	opt stack 0
  1322                           
  1323                           ; 4 bytes @ 0x2B
  1324  00002C                     	ds	1
  1325  00002D                     getVSCPFrame@pvscpclass:
  1326                           	opt stack 0
  1327                           
  1328                           ; 1 bytes @ 0x2C
  1329  00002D                     	ds	1
  1330  00002E                     getVSCPFrame@id:
  1331                           	opt stack 0
  1332  00002E                     ___asfladd@f2:
  1333                           	opt stack 0
  1334                           
  1335                           ; 4 bytes @ 0x2D
  1336  00002E                     	ds	2
  1337  000030                     ___fldiv@f2:
  1338                           	opt stack 0
  1339                           
  1340                           ; 4 bytes @ 0x2F
  1341  000030                     	ds	2
  1342  000032                     ECANSendMessage@mode:
  1343                           	opt stack 0
  1344  000032                     vscp_getEvent@rv:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x31
  1348  000032                     	ds	1
  1349  000033                     ECANSendMessage@buffers:
  1350                           	opt stack 0
  1351                           
  1352                           ; 1 bytes @ 0x32
  1353  000033                     	ds	1
  1354  000034                     ECANSendMessage@j:
  1355                           	opt stack 0
  1356                           
  1357                           ; 1 bytes @ 0x33
  1358  000034                     	ds	1
  1359  000035                     ECANSendMessage@tempBSEL0:
  1360                           	opt stack 0
  1361                           
  1362                           ; 1 bytes @ 0x34
  1363  000035                     	ds	1
  1364  000036                     ECANSendMessage@tempPtr:
  1365                           	opt stack 0
  1366                           
  1367                           ; 2 bytes @ 0x35
  1368  000036                     	ds	2
  1369  000038                     ECANSendMessage@temp:
  1370                           	opt stack 0
  1371                           
  1372                           ; 1 bytes @ 0x37
  1373  000038                     	ds	1
  1374  000039                     ECANSendMessage@i:
  1375                           	opt stack 0
  1376                           
  1377                           ; 1 bytes @ 0x38
  1378  000039                     	ds	1
  1379  00003A                     ECANSendMessage@ptr:
  1380                           	opt stack 0
  1381                           
  1382                           ; 2 bytes @ 0x39
  1383  00003A                     	ds	1
  1384  00003B                     ___fldiv@f3:
  1385                           	opt stack 0
  1386                           
  1387                           ; 4 bytes @ 0x3A
  1388  00003B                     	ds	1
  1389  00003C                     ?_sendCANFrame:
  1390                           	opt stack 0
  1391  00003C                     sendCANFrame@id:
  1392                           	opt stack 0
  1393                           
  1394                           ; 4 bytes @ 0x3B
  1395  00003C                     	ds	3
  1396  00003F                     ___fldiv@cntr:
  1397                           	opt stack 0
  1398                           
  1399                           ; 1 bytes @ 0x3E
  1400  00003F                     	ds	1
  1401  000040                     sendCANFrame@dlc:
  1402                           	opt stack 0
  1403  000040                     ___fldiv@exp:
  1404                           	opt stack 0
  1405                           
  1406                           ; 1 bytes @ 0x3F
  1407  000040                     	ds	1
  1408  000041                     sendCANFrame@pdata:
  1409                           	opt stack 0
  1410  000041                     ___fldiv@sign:
  1411                           	opt stack 0
  1412                           
  1413                           ; 1 bytes @ 0x40
  1414  000041                     	ds	1
  1415  000042                     ??_eval_poly:
  1416  000042                     ??___fltol:
  1417  000042                     sendCANFrame@rv:
  1418                           	opt stack 0
  1419  000042                     ___asflmul@mp:
  1420                           	opt stack 0
  1421                           
  1422                           ; 1 bytes @ 0x41
  1423  000042                     	ds	1
  1424  000043                     ??_ldexp:
  1425  000043                     vscp_sendEvent@rv:
  1426                           	opt stack 0
  1427  000043                     log@exponent:
  1428                           	opt stack 0
  1429                           
  1430                           ; 2 bytes @ 0x42
  1431  000043                     	ds	1
  1432  000044                     ?_vscp_sendHeartBeat:
  1433                           	opt stack 0
  1434  000044                     ??_vscp_newNodeOnline:
  1435  000044                     vscp_sendHeartBeat@subzone:
  1436                           	opt stack 0
  1437                           
  1438                           ; 1 bytes @ 0x43
  1439  000044                     	ds	1
  1440  000045                     vscp_sendHeartBeat@zone:
  1441                           	opt stack 0
  1442                           
  1443                           ; 1 bytes @ 0x44
  1444  000045                     	ds	1
  1445  000046                     tblptru	equ	0xFF8
  1446                           postinc0	equ	0xFEE
  1447                           wreg	equ	0xFE8
  1448                           postdec1	equ	0xFE5
  1449                           fsr1h	equ	0xFE2
  1450                           fsr1l	equ	0xFE1
  1451                           
  1452                           ; 0 bytes @ 0x45
  1453 ;;
  1454 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1455 ;;
  1456 ;; *************** function _main *****************
  1457 ;; Defined at:
  1458 ;;		line 295 in file "../main.c"
  1459 ;; Parameters:    Size  Location     Type
  1460 ;;		None
  1461 ;; Auto vars:     Size  Location     Type
  1462 ;;  i               4   82[BANK0 ] unsigned long 
  1463 ;; Return value:  Size  Location     Type
  1464 ;;		None               void
  1465 ;; Registers used:
  1466 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1467 ;; Tracked objects:
  1468 ;;		On entry : 0/0
  1469 ;;		On exit  : F/1
  1470 ;;		Unchanged: 0/0
  1471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1472 ;;      Params:         0       0       0       0       0       0       0
  1473 ;;      Locals:         0       4       0       0       0       0       0
  1474 ;;      Temps:          0       0       0       0       0       0       0
  1475 ;;      Totals:         0       4       0       0       0       0       0
  1476 ;;Total ram usage:        4 bytes
  1477 ;; Hardware stack levels required when called:    9
  1478 ;; This function calls:
  1479 ;;		_init
  1480 ;;		_vscp_check_pstorage
  1481 ;;		_init_app_eeprom
  1482 ;;		_vscp_init
  1483 ;;		_writeEEPROM
  1484 ;;		_vscp_getEvent
  1485 ;;		_vscp_goActiveState
  1486 ;;		_vscp_handleProbeState
  1487 ;;		_vscp_handleProtocolEvent
  1488 ;;		_handle_sync
  1489 ;;		_vscp_error
  1490 ;;		_doOneSecondWork
  1491 ;;		_vscp_doOneSecondWork
  1492 ;;		_doWork
  1493 ;; This function is called by:
  1494 ;;		Startup code after reset
  1495 ;; This function uses a non-reentrant model
  1496 ;;
  1497                           
  1498                           	psect	text0
  1499  0044B4                     __ptext0:
  1500                           	opt stack 0
  1501  0044B4                     _main:
  1502                           	opt stack 22
  1503                           
  1504                           ;main.c: 296: uint32_t i;
  1505                           ;main.c: 298: init();
  1506                           
  1507                           ;incstack = 0
  1508                           ;incstack = 0
  1509  0044B4  EC90  F02B         	call	_init	;wreg free
  1510                           
  1511                           ;main.c: 302: if ( !vscp_check_pstorage() ) {
  1512  0044B8  ECCB  F02B         	call	_vscp_check_pstorage	;wreg free
  1513  0044BC  0900               	iorlw	0
  1514  0044BE  B4D8               	btfsc	status,2,c
  1515                           
  1516                           ;main.c: 305: init_app_eeprom();
  1517  0044C0  EC27  F017         	call	_init_app_eeprom	;wreg free
  1518                           
  1519                           ;main.c: 307: }
  1520                           ;main.c: 309: vscp_init();
  1521  0044C4  ECC7  F02A         	call	_vscp_init	;wreg free
  1522  0044C8                     l170:
  1523                           
  1524                           ; BSR set to: 1
  1525  0044C8  0004               	clrwdt		;# 
  1526                           
  1527                           ;main.c: 315: if ( ( vscp_initbtncnt > 250 ) &&
  1528                           ;main.c: 316: ( 0x01 != vscp_node_state ) ) {
  1529  0044CA  0EFA               	movlw	250
  1530  0044CC  0100               	movlb	0	; () banked
  1531  0044CE  65BA               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1532  0044D0  D00C               	goto	l11909
  1533                           
  1534                           ; BSR set to: 0
  1535  0044D2  05BC               	decf	_vscp_node_state& (0+255),w,b
  1536  0044D4  E00A               	bz	l11909
  1537                           
  1538                           ; BSR set to: 0
  1539                           ;main.c: 319: vscp_nickname = 0xff;
  1540  0044D6  69BB               	setf	_vscp_nickname& (0+255),b
  1541                           
  1542                           ; BSR set to: 0
  1543                           ;main.c: 320: writeEEPROM(0x01, 0xff);
  1544  0044D8  6A0F               	clrf	?_writeEEPROM+1,c
  1545  0044DA  0E01               	movlw	1
  1546  0044DC  6E0E               	movwf	?_writeEEPROM,c
  1547  0044DE  0EFF               	movlw	255
  1548  0044E0  6810               	setf	?_writeEEPROM+2,c
  1549  0044E2  ECCA  F02C         	call	_writeEEPROM	;wreg free
  1550                           
  1551                           ;main.c: 321: vscp_init();
  1552  0044E6  ECC7  F02A         	call	_vscp_init	;wreg free
  1553  0044EA                     l11909:
  1554                           
  1555                           ;main.c: 323: }
  1556                           ;main.c: 327: vscp_imsg.flags = 0;
  1557  0044EA  0100               	movlb	0	; () banked
  1558  0044EC  6BBD               	clrf	_vscp_imsg& (0+255),b
  1559                           
  1560                           ; BSR set to: 0
  1561                           ;main.c: 328: vscp_getEvent();
  1562  0044EE  EC8E  F02C         	call	_vscp_getEvent	;wreg free
  1563                           
  1564                           ;main.c: 331: switch (vscp_node_state) {
  1565  0044F2  D024               	goto	l11939
  1566  0044F4                     l11913:
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;main.c: 336: if (0xff == vscp_nickname) {
  1570  0044F4  29BB               	incf	_vscp_nickname& (0+255),w,b
  1571  0044F6  E103               	bnz	l11917
  1572                           
  1573                           ; BSR set to: 0
  1574                           ;main.c: 338: vscp_node_state = 0x01;
  1575  0044F8  0E01               	movlw	1
  1576  0044FA  6FBC               	movwf	_vscp_node_state& (0+255),b
  1577                           
  1578                           ;main.c: 339: }
  1579  0044FC  D02B               	goto	l11941
  1580  0044FE                     l11917:
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;main.c: 340: else {
  1584                           ;main.c: 342: vscp_node_state = 0x03;
  1585  0044FE  0E03               	movlw	3
  1586  004500  6FBC               	movwf	_vscp_node_state& (0+255),b
  1587  004502                     l11919:
  1588                           
  1589                           ; BSR set to: 0
  1590                           ;main.c: 343: vscp_goActiveState();
  1591  004502  EC50  F02D         	call	_vscp_goActiveState	;wreg free
  1592  004506  D026               	goto	l11941
  1593  004508                     l11921:
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;main.c: 348: vscp_handleProbeState();
  1597  004508  EC17  F025         	call	_vscp_handleProbeState	;wreg free
  1598                           
  1599                           ;main.c: 349: break;
  1600  00450C  D023               	goto	l11941
  1601  00450E                     l179:
  1602                           
  1603                           ; BSR set to: 0
  1604                           ;main.c: 358: if (vscp_imsg.flags & 0x80) {
  1605  00450E  AFBD               	btfss	_vscp_imsg& (0+255),7,b
  1606  004510  D021               	goto	l11941
  1607                           
  1608                           ; BSR set to: 0
  1609                           ;main.c: 360: if ( 0 == vscp_imsg.vscp_class ) {
  1610  004512  51C0               	movf	(_vscp_imsg+3)& (0+255),w,b
  1611  004514  11BF               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1612  004516  E103               	bnz	l11929
  1613                           
  1614                           ; BSR set to: 0
  1615                           ;main.c: 363: vscp_handleProtocolEvent();
  1616  004518  ECFD  F013         	call	_vscp_handleProtocolEvent	;wreg free
  1617                           
  1618                           ;main.c: 365: }
  1619  00451C  D01B               	goto	l11941
  1620  00451E                     l11929:
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;main.c: 366: else if ( ( 30 == vscp_imsg.vscp_class ) &&
  1624                           ;main.c: 367: ( 26 == vscp_imsg.vscp_type ) ) {
  1625  00451E  51BF               	movf	(_vscp_imsg+2)& (0+255),w,b
  1626  004520  0A1E               	xorlw	30
  1627  004522  11C0               	iorwf	(_vscp_imsg+3)& (0+255),w,b
  1628  004524  E117               	bnz	l11941
  1629                           
  1630                           ; BSR set to: 0
  1631  004526  51C1               	movf	(_vscp_imsg+4)& (0+255),w,b
  1632  004528  0A1A               	xorlw	26
  1633  00452A  E114               	bnz	l11941
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;main.c: 368: handle_sync();
  1637  00452C  EC9C  F028         	call	_handle_sync	;wreg free
  1638  004530  D011               	goto	l11941
  1639  004532                     l11935:
  1640                           
  1641                           ; BSR set to: 0
  1642                           ;main.c: 375: vscp_error();
  1643  004532  EC18  F02E         	call	_vscp_error	;wreg free
  1644                           
  1645                           ;main.c: 376: break;
  1646  004536  D00E               	goto	l11941
  1647  004538                     l185:
  1648                           
  1649                           ; BSR set to: 0
  1650                           ;main.c: 379: vscp_node_state = 0x00;
  1651  004538  6BBC               	clrf	_vscp_node_state& (0+255),b
  1652                           
  1653                           ;main.c: 380: break;
  1654  00453A  D00C               	goto	l11941
  1655  00453C                     l11939:
  1656  00453C  0100               	movlb	0	; () banked
  1657  00453E  51BC               	movf	_vscp_node_state& (0+255),w,b
  1658                           
  1659                           ; Switch size 1, requested type "speed"
  1660                           ; Number of cases is 5, Range of values is 0 to 4
  1661                           ; switch strategies available:
  1662                           ; Name         Instructions Cycles
  1663                           ; simple_byte           16     9 (average)
  1664                           ;	Chosen strategy is simple_byte
  1665  004540  E0D9               	bz	l11913
  1666  004542  0A01               	xorlw	1	; case 1
  1667  004544  E0E1               	bz	l11921
  1668  004546  0A03               	xorlw	3	; case 2
  1669  004548  E0DC               	bz	l11919
  1670  00454A  0A01               	xorlw	1	; case 3
  1671  00454C  E0E0               	bz	l179
  1672  00454E  0A07               	xorlw	7	; case 4
  1673  004550  E0F0               	bz	l11935
  1674  004552  D7F2               	goto	l185
  1675  004554                     l11941:
  1676                           
  1677                           ;main.c: 386: if ( measurement_clock > 1000 ) {
  1678  004554  0EE9               	movlw	233
  1679  004556  0101               	movlb	1	; () banked
  1680  004558  5D12               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1681  00455A  0E03               	movlw	3
  1682  00455C  5913               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1683  00455E  0E00               	movlw	0
  1684  004560  5914               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1685  004562  0E00               	movlw	0
  1686  004564  5915               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1687  004566  E3B0               	bnc	l170
  1688                           
  1689                           ; BSR set to: 1
  1690                           ;main.c: 388: measurement_clock = 0;
  1691  004568  6B12               	clrf	_measurement_clock& (0+255),b	;volatile
  1692  00456A  6B13               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1693  00456C  6B14               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1694  00456E  6B15               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1695                           
  1696                           ; BSR set to: 1
  1697                           ;main.c: 389: doOneSecondWork();
  1698  004570  EC38  F00C         	call	_doOneSecondWork	;wreg free
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;main.c: 390: seconds++;
  1702  004574  2BB9               	incf	_seconds& (0+255),f,b
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;main.c: 394: if (0x03 == vscp_node_state) {
  1706  004576  51BC               	movf	_vscp_node_state& (0+255),w,b
  1707  004578  0A03               	xorlw	3
  1708  00457A  E11A               	bnz	l11963
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;main.c: 395: for (i = 0; i < 6; i++) {
  1712  00457C  6BB2               	clrf	main@i& (0+255),b
  1713  00457E  6BB3               	clrf	(main@i+1)& (0+255),b
  1714  004580  6BB4               	clrf	(main@i+2)& (0+255),b
  1715  004582  6BB5               	clrf	(main@i+3)& (0+255),b
  1716  004584                     l11957:
  1717                           
  1718                           ; BSR set to: 0
  1719                           ;main.c: 396: seconds_temp[i]++;
  1720  004584  0E0C               	movlw	low _seconds_temp
  1721  004586  0100               	movlb	0	; () banked
  1722  004588  25B2               	addwf	main@i& (0+255),w,b
  1723  00458A  6ED9               	movwf	fsr2l,c
  1724  00458C  0E01               	movlw	high _seconds_temp
  1725  00458E  21B3               	addwfc	(main@i+1)& (0+255),w,b
  1726  004590  6EDA               	movwf	fsr2h,c
  1727  004592  2ADF               	incf	indf2,f,c
  1728                           
  1729                           ; BSR set to: 0
  1730  004594  2BB2               	incf	main@i& (0+255),f,b
  1731  004596  0E00               	movlw	0
  1732  004598  23B3               	addwfc	(main@i+1)& (0+255),f,b
  1733  00459A  23B4               	addwfc	(main@i+2)& (0+255),f,b
  1734  00459C  23B5               	addwfc	(main@i+3)& (0+255),f,b
  1735                           
  1736                           ; BSR set to: 0
  1737  00459E  0E06               	movlw	6
  1738  0045A0  5DB2               	subwf	main@i& (0+255),w,b
  1739  0045A2  0E00               	movlw	0
  1740  0045A4  59B3               	subwfb	(main@i+1)& (0+255),w,b
  1741  0045A6  0E00               	movlw	0
  1742  0045A8  59B4               	subwfb	(main@i+2)& (0+255),w,b
  1743  0045AA  0E00               	movlw	0
  1744  0045AC  59B5               	subwfb	(main@i+3)& (0+255),w,b
  1745  0045AE  E3EA               	bnc	l11957
  1746  0045B0                     l11963:
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;main.c: 397: }
  1750                           ;main.c: 398: }
  1751                           ;main.c: 400: if (seconds > 60) {
  1752  0045B0  0E3C               	movlw	60
  1753  0045B2  65B9               	cpfsgt	_seconds& (0+255),b
  1754  0045B4  D001               	goto	l11967
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;main.c: 401: seconds = 0;
  1758  0045B6  6BB9               	clrf	_seconds& (0+255),b
  1759  0045B8                     l11967:
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;main.c: 402: }
  1763                           ;main.c: 406: if (0x03 == vscp_node_state) {
  1764  0045B8  51BC               	movf	_vscp_node_state& (0+255),w,b
  1765  0045BA  0A03               	xorlw	3
  1766  0045BC  B4D8               	btfsc	status,2,c
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;main.c: 407: vscp_doOneSecondWork();
  1770  0045BE  ECBC  F029         	call	_vscp_doOneSecondWork	;wreg free
  1771                           
  1772                           ; BSR set to: 0
  1773                           ;main.c: 408: }
  1774                           ;main.c: 411: doWork();
  1775  0045C2  EC0B  F01A         	call	_doWork	;wreg free
  1776  0045C6  D780               	goto	l170
  1777  0045C8                     __end_of_main:
  1778                           	opt stack 0
  1779                           tblptru	equ	0xFF8
  1780                           postinc0	equ	0xFEE
  1781                           wreg	equ	0xFE8
  1782                           postdec1	equ	0xFE5
  1783                           fsr1h	equ	0xFE2
  1784                           fsr1l	equ	0xFE1
  1785                           indf2	equ	0xFDF
  1786                           fsr2h	equ	0xFDA
  1787                           fsr2l	equ	0xFD9
  1788                           status	equ	0xFD8
  1789                           
  1790 ;; *************** function _doWork *****************
  1791 ;; Defined at:
  1792 ;;		line 426 in file "../main.c"
  1793 ;; Parameters:    Size  Location     Type
  1794 ;;		None
  1795 ;; Auto vars:     Size  Location     Type
  1796 ;;  temp            4   47[BANK1 ] unsigned long 
  1797 ;;  avarage         4   43[BANK1 ] unsigned long 
  1798 ;;  resistance      4   38[BANK1 ] unsigned long 
  1799 ;;  v               4   32[BANK1 ] unsigned long 
  1800 ;;  calVoltage      4    4[BANK1 ] unsigned long 
  1801 ;;  Rinf            4    0[BANK1 ] unsigned long 
  1802 ;;  B               2   36[BANK1 ] unsigned short 
  1803 ;;  i               1   51[BANK1 ] unsigned char 
  1804 ;;  j               1   42[BANK1 ] unsigned char 
  1805 ;; Return value:  Size  Location     Type
  1806 ;;		None               void
  1807 ;; Registers used:
  1808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1809 ;; Tracked objects:
  1810 ;;		On entry : F/0
  1811 ;;		On exit  : F/1
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1814 ;;      Params:         0       0       0       0       0       0       0
  1815 ;;      Locals:         0       0      52       0       0       0       0
  1816 ;;      Temps:          0      14       0       0       0       0       0
  1817 ;;      Totals:         0      14      52       0       0       0       0
  1818 ;;Total ram usage:       66 bytes
  1819 ;; Hardware stack levels used:    1
  1820 ;; Hardware stack levels required when called:    7
  1821 ;; This function calls:
  1822 ;;		_readEEPROM
  1823 ;;		_exp
  1824 ;;		_log
  1825 ;;		_getCalibrationValue
  1826 ;;		___aldiv
  1827 ;;		___altofl
  1828 ;;		___asfladd
  1829 ;;		___fladd
  1830 ;;		___asfldiv
  1831 ;;		___fldiv
  1832 ;;		___flmul
  1833 ;;		___asflsub
  1834 ;;		___flsub
  1835 ;;		___fltol
  1836 ;;		___lwtofl
  1837 ;; This function is called by:
  1838 ;;		_main
  1839 ;; This function uses a non-reentrant model
  1840 ;;
  1841                           
  1842                           	psect	text1
  1843  003416                     __ptext1:
  1844                           	opt stack 0
  1845  003416                     _doWork:
  1846                           	opt stack 23
  1847                           
  1848                           ; BSR set to: 0
  1849                           ;main.c: 427: uint8_t i, j;
  1850                           ;main.c: 428: uint16_t B;
  1851                           ;main.c: 429: double avarage;
  1852                           ;main.c: 430: double resistance;
  1853                           ;main.c: 431: double Rinf;
  1854                           ;main.c: 432: double temp;
  1855                           ;main.c: 433: double v;
  1856                           ;main.c: 434: double calVoltage;
  1857                           ;main.c: 436: calVoltage = ((uint16_t) readEEPROM(0xF2)*256 +
  1858                           ;main.c: 437: readEEPROM(0xF3));
  1859                           
  1860                           ; BSR set to: 1
  1861                           ;incstack = 0
  1862                           ;incstack = 0
  1863  003416  6A17               	clrf	?_readEEPROM+1,c
  1864  003418  0EF3               	movlw	243
  1865  00341A  6E16               	movwf	?_readEEPROM,c
  1866  00341C  ECD6  F02D         	call	_readEEPROM	;wreg free
  1867  003420  0100               	movlb	0	; () banked
  1868  003422  6FA4               	movwf	??_doWork& (0+255),b
  1869  003424  6A17               	clrf	?_readEEPROM+1,c
  1870  003426  0EF2               	movlw	242
  1871  003428  6E16               	movwf	?_readEEPROM,c
  1872  00342A  ECD6  F02D         	call	_readEEPROM	;wreg free
  1873  00342E  6E1B               	movwf	?___lwtofl+1,c
  1874  003430  0100               	movlb	0	; () banked
  1875  003432  51A4               	movf	??_doWork& (0+255),w,b
  1876  003434  6E1A               	movwf	?___lwtofl,c
  1877  003436  EC64  F02C         	call	___lwtofl	;wreg free
  1878  00343A  C01D  F171         	movff	?___lwtofl+3,doWork@calVoltage+3
  1879  00343E  C01C  F170         	movff	?___lwtofl+2,doWork@calVoltage+2
  1880  003442  C01B  F16F         	movff	?___lwtofl+1,doWork@calVoltage+1
  1881  003446  C01A  F16E         	movff	?___lwtofl,doWork@calVoltage
  1882                           
  1883                           ;main.c: 442: for (i = 0; i < 6; i++) {
  1884  00344A  0101               	movlb	1	; () banked
  1885  00344C  6B9D               	clrf	doWork@i& (0+255),b
  1886  00344E                     l11979:
  1887                           
  1888                           ; BSR set to: 1
  1889                           ;main.c: 444: if (adc_conversion_flags & 1 << i) {
  1890  00344E  C19D  F0A4         	movff	doWork@i,??_doWork
  1891  003452  0E01               	movlw	1
  1892  003454  0100               	movlb	0	; () banked
  1893  003456  6FA5               	movwf	(??_doWork+1)& (0+255),b
  1894  003458  2BA4               	incf	??_doWork& (0+255),f,b
  1895  00345A  D002               	goto	u10414
  1896  00345C                     u10415:
  1897  00345C  90D8               	bcf	status,0,c
  1898  00345E  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  1899  003460                     u10414:
  1900  003460  2FA4               	decfsz	??_doWork& (0+255),f,b
  1901  003462  D7FC               	goto	u10415
  1902  003464  51A5               	movf	(??_doWork+1)& (0+255),w,b
  1903  003466  15B6               	andwf	_adc_conversion_flags& (0+255),w,b
  1904  003468  E101 D1F9          	bz	l12033
  1905                           
  1906                           ; BSR set to: 0
  1907                           ;main.c: 447: avarage = 0;
  1908  00346C  0101               	movlb	1	; () banked
  1909  00346E  6B95               	clrf	doWork@avarage& (0+255),b
  1910  003470  6B96               	clrf	(doWork@avarage+1)& (0+255),b
  1911  003472  6B97               	clrf	(doWork@avarage+2)& (0+255),b
  1912  003474  6B98               	clrf	(doWork@avarage+3)& (0+255),b
  1913                           
  1914                           ;main.c: 448: for (j = 0; j < 80; j++) {
  1915  003476  6B94               	clrf	doWork@j& (0+255),b
  1916  003478                     l11987:
  1917                           
  1918                           ; BSR set to: 1
  1919                           ;main.c: 449: avarage += ((uint16_t)adc[12 * j + 2 * i])*256 + adc[12 * j + 2 * i + 1];
  1920  003478  0E01               	movlw	high doWork@avarage
  1921  00347A  6E2D               	movwf	?___asfladd+1,c
  1922  00347C  0E95               	movlw	low doWork@avarage
  1923  00347E  6E2C               	movwf	?___asfladd,c
  1924  003480  90D8               	bcf	status,0,c
  1925  003482  359D               	rlcf	doWork@i& (0+255),w,b
  1926  003484  0100               	movlb	0	; () banked
  1927  003486  6FA4               	movwf	??_doWork& (0+255),b
  1928  003488  6BA5               	clrf	(??_doWork+1)& (0+255),b
  1929  00348A  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  1930  00348C  0101               	movlb	1	; () banked
  1931  00348E  5194               	movf	doWork@j& (0+255),w,b
  1932  003490  0D0C               	mullw	12
  1933  003492  0E9F               	movlw	low (_adc+1)
  1934  003494  24F3               	addwf	prodl,w,c
  1935  003496  0100               	movlb	0	; () banked
  1936  003498  6FA6               	movwf	(??_doWork+2)& (0+255),b
  1937  00349A  0E01               	movlw	high (_adc+1)
  1938  00349C  20F4               	addwfc	prodh,w,c
  1939  00349E  6FA7               	movwf	(??_doWork+3)& (0+255),b
  1940  0034A0  51A4               	movf	??_doWork& (0+255),w,b
  1941  0034A2  25A6               	addwf	(??_doWork+2)& (0+255),w,b
  1942  0034A4  6ED9               	movwf	fsr2l,c
  1943  0034A6  51A5               	movf	(??_doWork+1)& (0+255),w,b
  1944  0034A8  21A7               	addwfc	(??_doWork+3)& (0+255),w,b
  1945  0034AA  6EDA               	movwf	fsr2h,c
  1946  0034AC  50DF               	movf	indf2,w,c
  1947  0034AE  6FA8               	movwf	(??_doWork+4)& (0+255),b
  1948  0034B0  90D8               	bcf	status,0,c
  1949  0034B2  0101               	movlb	1	; () banked
  1950  0034B4  359D               	rlcf	doWork@i& (0+255),w,b
  1951  0034B6  0100               	movlb	0	; () banked
  1952  0034B8  6FA9               	movwf	(??_doWork+5)& (0+255),b
  1953  0034BA  6BAA               	clrf	(??_doWork+6)& (0+255),b
  1954  0034BC  37AA               	rlcf	(??_doWork+6)& (0+255),f,b
  1955  0034BE  0101               	movlb	1	; () banked
  1956  0034C0  5194               	movf	doWork@j& (0+255),w,b
  1957  0034C2  0D0C               	mullw	12
  1958  0034C4  0E9E               	movlw	low _adc
  1959  0034C6  24F3               	addwf	prodl,w,c
  1960  0034C8  0100               	movlb	0	; () banked
  1961  0034CA  6FAB               	movwf	(??_doWork+7)& (0+255),b
  1962  0034CC  0E01               	movlw	high _adc
  1963  0034CE  20F4               	addwfc	prodh,w,c
  1964  0034D0  6FAC               	movwf	(??_doWork+8)& (0+255),b
  1965  0034D2  51A9               	movf	(??_doWork+5)& (0+255),w,b
  1966  0034D4  25AB               	addwf	(??_doWork+7)& (0+255),w,b
  1967  0034D6  6ED9               	movwf	fsr2l,c
  1968  0034D8  51AA               	movf	(??_doWork+6)& (0+255),w,b
  1969  0034DA  21AC               	addwfc	(??_doWork+8)& (0+255),w,b
  1970  0034DC  6EDA               	movwf	fsr2h,c
  1971  0034DE  50DF               	movf	indf2,w,c
  1972  0034E0  6E1B               	movwf	?___lwtofl+1,c
  1973  0034E2  51A8               	movf	(??_doWork+4)& (0+255),w,b
  1974  0034E4  6E1A               	movwf	?___lwtofl,c
  1975  0034E6  EC64  F02C         	call	___lwtofl	;wreg free
  1976  0034EA  C01D  F031         	movff	?___lwtofl+3,?___asfladd+5
  1977  0034EE  C01C  F030         	movff	?___lwtofl+2,?___asfladd+4
  1978  0034F2  C01B  F02F         	movff	?___lwtofl+1,?___asfladd+3
  1979  0034F6  C01A  F02E         	movff	?___lwtofl,?___asfladd+2
  1980  0034FA  EC7E  F02A         	call	___asfladd	;wreg free
  1981  0034FE  0101               	movlb	1	; () banked
  1982  003500  2B94               	incf	doWork@j& (0+255),f,b
  1983                           
  1984                           ; BSR set to: 1
  1985  003502  0E4F               	movlw	79
  1986  003504  6594               	cpfsgt	doWork@j& (0+255),b
  1987  003506  D7B8               	goto	l11987
  1988                           
  1989                           ; BSR set to: 1
  1990                           ;main.c: 453: if (1) {
  1991  003508  0E01               	movlw	high doWork@avarage
  1992  00350A  0100               	movlb	0	; () banked
  1993  00350C  6F61               	movwf	(?___asfldiv+1)& (0+255),b
  1994  00350E  0E95               	movlw	low doWork@avarage
  1995  003510  6F60               	movwf	?___asfldiv& (0+255),b
  1996  003512  6B62               	clrf	(?___asfldiv+2)& (0+255),b
  1997  003514  6B63               	clrf	(?___asfldiv+3)& (0+255),b
  1998  003516  0EA0               	movlw	160
  1999  003518  6F64               	movwf	(?___asfldiv+4)& (0+255),b
  2000  00351A  0E42               	movlw	66
  2001  00351C  6F65               	movwf	(?___asfldiv+5)& (0+255),b
  2002  00351E  EC59  F02A         	call	___asfldiv	;wreg free
  2003                           
  2004                           ;main.c: 461: B = (uint16_t)readEEPROM(2 * i + 0x4F)*256 +
  2005                           ;main.c: 462: readEEPROM(2 * i + 0x50);
  2006  003522  0101               	movlb	1	; () banked
  2007  003524  519D               	movf	doWork@i& (0+255),w,b
  2008  003526  0D02               	mullw	2
  2009  003528  0E50               	movlw	80
  2010  00352A  24F3               	addwf	prodl,w,c
  2011  00352C  6E16               	movwf	?_readEEPROM,c
  2012  00352E  0E00               	movlw	0
  2013  003530  20F4               	addwfc	prodh,w,c
  2014  003532  6E17               	movwf	?_readEEPROM+1,c
  2015  003534  ECD6  F02D         	call	_readEEPROM	;wreg free
  2016  003538  0100               	movlb	0	; () banked
  2017  00353A  6FA4               	movwf	??_doWork& (0+255),b
  2018  00353C  0101               	movlb	1	; () banked
  2019  00353E  519D               	movf	doWork@i& (0+255),w,b
  2020  003540  0D02               	mullw	2
  2021  003542  0E4F               	movlw	79
  2022  003544  24F3               	addwf	prodl,w,c
  2023  003546  6E16               	movwf	?_readEEPROM,c
  2024  003548  0E00               	movlw	0
  2025  00354A  20F4               	addwfc	prodh,w,c
  2026  00354C  6E17               	movwf	?_readEEPROM+1,c
  2027  00354E  ECD6  F02D         	call	_readEEPROM	;wreg free
  2028  003552  0101               	movlb	1	; () banked
  2029  003554  6F8F               	movwf	(doWork@B+1)& (0+255),b
  2030  003556  0100               	movlb	0	; () banked
  2031  003558  51A4               	movf	??_doWork& (0+255),w,b
  2032  00355A  0101               	movlb	1	; () banked
  2033  00355C  6F8E               	movwf	doWork@B& (0+255),b
  2034                           
  2035                           ; BSR set to: 1
  2036                           ;main.c: 465: Rinf = 10000.0 * exp(B / -298.15);
  2037  00355E  0E33               	movlw	51
  2038  003560  6E30               	movwf	?___fldiv+4,c
  2039  003562  0E13               	movlw	19
  2040  003564  6E31               	movwf	?___fldiv+5,c
  2041  003566  0E95               	movlw	149
  2042  003568  6E32               	movwf	?___fldiv+6,c
  2043  00356A  0EC3               	movlw	195
  2044  00356C  6E33               	movwf	?___fldiv+7,c
  2045  00356E  C18E  F01A         	movff	doWork@B,?___lwtofl
  2046  003572  C18F  F01B         	movff	doWork@B+1,?___lwtofl+1
  2047  003576  EC64  F02C         	call	___lwtofl	;wreg free
  2048  00357A  C01D  F02F         	movff	?___lwtofl+3,?___fldiv+3
  2049  00357E  C01C  F02E         	movff	?___lwtofl+2,?___fldiv+2
  2050  003582  C01B  F02D         	movff	?___lwtofl+1,?___fldiv+1
  2051  003586  C01A  F02C         	movff	?___lwtofl,?___fldiv
  2052  00358A  EC87  F026         	call	___fldiv	;wreg free
  2053  00358E  C02F  F175         	movff	?___fldiv+3,_doWork$2275+3
  2054  003592  C02E  F174         	movff	?___fldiv+2,_doWork$2275+2
  2055  003596  C02D  F173         	movff	?___fldiv+1,_doWork$2275+1
  2056  00359A  C02C  F172         	movff	?___fldiv,_doWork$2275
  2057                           
  2058                           ;main.c: 465: Rinf = 10000.0 * exp(B / -298.15);
  2059  00359E  C172  F099         	movff	_doWork$2275,?_exp
  2060  0035A2  C173  F09A         	movff	_doWork$2275+1,?_exp+1
  2061  0035A6  C174  F09B         	movff	_doWork$2275+2,?_exp+2
  2062  0035AA  C175  F09C         	movff	_doWork$2275+3,?_exp+3
  2063  0035AE  EC3C  F01D         	call	_exp	;wreg free
  2064  0035B2  C09C  F179         	movff	?_exp+3,_doWork$2276+3
  2065  0035B6  C09B  F178         	movff	?_exp+2,_doWork$2276+2
  2066  0035BA  C09A  F177         	movff	?_exp+1,_doWork$2276+1
  2067  0035BE  C099  F176         	movff	?_exp,_doWork$2276
  2068                           
  2069                           ;main.c: 465: Rinf = 10000.0 * exp(B / -298.15);
  2070  0035C2  C176  F060         	movff	_doWork$2276,?___flmul
  2071  0035C6  C177  F061         	movff	_doWork$2276+1,?___flmul+1
  2072  0035CA  C178  F062         	movff	_doWork$2276+2,?___flmul+2
  2073  0035CE  C179  F063         	movff	_doWork$2276+3,?___flmul+3
  2074  0035D2  0100               	movlb	0	; () banked
  2075  0035D4  6B64               	clrf	(?___flmul+4)& (0+255),b
  2076  0035D6  0E40               	movlw	64
  2077  0035D8  6F65               	movwf	(?___flmul+5)& (0+255),b
  2078  0035DA  0E1C               	movlw	28
  2079  0035DC  6F66               	movwf	(?___flmul+6)& (0+255),b
  2080  0035DE  0E46               	movlw	70
  2081  0035E0  6F67               	movwf	(?___flmul+7)& (0+255),b
  2082  0035E2  ECEC  F023         	call	___flmul	;wreg free
  2083  0035E6  C063  F16D         	movff	?___flmul+3,doWork@Rinf+3
  2084  0035EA  C062  F16C         	movff	?___flmul+2,doWork@Rinf+2
  2085  0035EE  C061  F16B         	movff	?___flmul+1,doWork@Rinf+1
  2086  0035F2  C060  F16A         	movff	?___flmul,doWork@Rinf
  2087                           
  2088                           ;main.c: 467: v = 5.0 * (double) avarage / 1025;
  2089  0035F6  0100               	movlb	0	; () banked
  2090  0035F8  6B64               	clrf	(?___flmul+4)& (0+255),b
  2091  0035FA  6B65               	clrf	(?___flmul+5)& (0+255),b
  2092  0035FC  0EA0               	movlw	160
  2093  0035FE  6F66               	movwf	(?___flmul+6)& (0+255),b
  2094  003600  0E40               	movlw	64
  2095  003602  6F67               	movwf	(?___flmul+7)& (0+255),b
  2096  003604  C195  F060         	movff	doWork@avarage,?___flmul
  2097  003608  C196  F061         	movff	doWork@avarage+1,?___flmul+1
  2098  00360C  C197  F062         	movff	doWork@avarage+2,?___flmul+2
  2099  003610  C198  F063         	movff	doWork@avarage+3,?___flmul+3
  2100  003614  ECEC  F023         	call	___flmul	;wreg free
  2101  003618  C063  F02F         	movff	?___flmul+3,?___fldiv+3
  2102  00361C  C062  F02E         	movff	?___flmul+2,?___fldiv+2
  2103  003620  C061  F02D         	movff	?___flmul+1,?___fldiv+1
  2104  003624  C060  F02C         	movff	?___flmul,?___fldiv
  2105  003628  6A30               	clrf	?___fldiv+4,c
  2106  00362A  0E20               	movlw	32
  2107  00362C  6E31               	movwf	?___fldiv+5,c
  2108  00362E  0E80               	movlw	128
  2109  003630  6E32               	movwf	?___fldiv+6,c
  2110  003632  0E44               	movlw	68
  2111  003634  6E33               	movwf	?___fldiv+7,c
  2112  003636  EC87  F026         	call	___fldiv	;wreg free
  2113  00363A  C02F  F18D         	movff	?___fldiv+3,doWork@v+3
  2114  00363E  C02E  F18C         	movff	?___fldiv+2,doWork@v+2
  2115  003642  C02D  F18B         	movff	?___fldiv+1,doWork@v+1
  2116  003646  C02C  F18A         	movff	?___fldiv,doWork@v
  2117                           
  2118                           ;main.c: 469: resistance = (calVoltage - 10000.0 * v) / v;
  2119  00364A  0100               	movlb	0	; () banked
  2120  00364C  6B64               	clrf	(?___flmul+4)& (0+255),b
  2121  00364E  0E40               	movlw	64
  2122  003650  6F65               	movwf	(?___flmul+5)& (0+255),b
  2123  003652  0E1C               	movlw	28
  2124  003654  6F66               	movwf	(?___flmul+6)& (0+255),b
  2125  003656  0E46               	movlw	70
  2126  003658  6F67               	movwf	(?___flmul+7)& (0+255),b
  2127  00365A  C18A  F060         	movff	doWork@v,?___flmul
  2128  00365E  C18B  F061         	movff	doWork@v+1,?___flmul+1
  2129  003662  C18C  F062         	movff	doWork@v+2,?___flmul+2
  2130  003666  C18D  F063         	movff	doWork@v+3,?___flmul+3
  2131  00366A  ECEC  F023         	call	___flmul	;wreg free
  2132  00366E  C063  F07D         	movff	?___flmul+3,?___flsub+7
  2133  003672  C062  F07C         	movff	?___flmul+2,?___flsub+6
  2134  003676  C061  F07B         	movff	?___flmul+1,?___flsub+5
  2135  00367A  C060  F07A         	movff	?___flmul,?___flsub+4
  2136  00367E  C16E  F076         	movff	doWork@calVoltage,?___flsub
  2137  003682  C16F  F077         	movff	doWork@calVoltage+1,?___flsub+1
  2138  003686  C170  F078         	movff	doWork@calVoltage+2,?___flsub+2
  2139  00368A  C171  F079         	movff	doWork@calVoltage+3,?___flsub+3
  2140  00368E  EC72  F02B         	call	___flsub	;wreg free
  2141  003692  C079  F02F         	movff	?___flsub+3,?___fldiv+3
  2142  003696  C078  F02E         	movff	?___flsub+2,?___fldiv+2
  2143  00369A  C077  F02D         	movff	?___flsub+1,?___fldiv+1
  2144  00369E  C076  F02C         	movff	?___flsub,?___fldiv
  2145  0036A2  C18A  F030         	movff	doWork@v,?___fldiv+4
  2146  0036A6  C18B  F031         	movff	doWork@v+1,?___fldiv+5
  2147  0036AA  C18C  F032         	movff	doWork@v+2,?___fldiv+6
  2148  0036AE  C18D  F033         	movff	doWork@v+3,?___fldiv+7
  2149  0036B2  EC87  F026         	call	___fldiv	;wreg free
  2150  0036B6  C02F  F193         	movff	?___fldiv+3,doWork@resistance+3
  2151  0036BA  C02E  F192         	movff	?___fldiv+2,doWork@resistance+2
  2152  0036BE  C02D  F191         	movff	?___fldiv+1,doWork@resistance+1
  2153  0036C2  C02C  F190         	movff	?___fldiv,doWork@resistance
  2154                           
  2155                           ;main.c: 471: temp = ((double) B) / log(resistance / Rinf);
  2156  0036C6  C16A  F030         	movff	doWork@Rinf,?___fldiv+4
  2157  0036CA  C16B  F031         	movff	doWork@Rinf+1,?___fldiv+5
  2158  0036CE  C16C  F032         	movff	doWork@Rinf+2,?___fldiv+6
  2159  0036D2  C16D  F033         	movff	doWork@Rinf+3,?___fldiv+7
  2160  0036D6  C190  F02C         	movff	doWork@resistance,?___fldiv
  2161  0036DA  C191  F02D         	movff	doWork@resistance+1,?___fldiv+1
  2162  0036DE  C192  F02E         	movff	doWork@resistance+2,?___fldiv+2
  2163  0036E2  C193  F02F         	movff	doWork@resistance+3,?___fldiv+3
  2164  0036E6  EC87  F026         	call	___fldiv	;wreg free
  2165  0036EA  C02F  F084         	movff	?___fldiv+3,?_log+3
  2166  0036EE  C02E  F083         	movff	?___fldiv+2,?_log+2
  2167  0036F2  C02D  F082         	movff	?___fldiv+1,?_log+1
  2168  0036F6  C02C  F081         	movff	?___fldiv,?_log
  2169  0036FA  ECC3  F021         	call	_log	;wreg free
  2170  0036FE  C084  F17D         	movff	?_log+3,_doWork$2277+3
  2171  003702  C083  F17C         	movff	?_log+2,_doWork$2277+2
  2172  003706  C082  F17B         	movff	?_log+1,_doWork$2277+1
  2173  00370A  C081  F17A         	movff	?_log,_doWork$2277
  2174                           
  2175                           ;main.c: 471: temp = ((double) B) / log(resistance / Rinf);
  2176  00370E  C18E  F01A         	movff	doWork@B,?___lwtofl
  2177  003712  C18F  F01B         	movff	doWork@B+1,?___lwtofl+1
  2178  003716  EC64  F02C         	call	___lwtofl	;wreg free
  2179  00371A  C01D  F02F         	movff	?___lwtofl+3,?___fldiv+3
  2180  00371E  C01C  F02E         	movff	?___lwtofl+2,?___fldiv+2
  2181  003722  C01B  F02D         	movff	?___lwtofl+1,?___fldiv+1
  2182  003726  C01A  F02C         	movff	?___lwtofl,?___fldiv
  2183  00372A  C17A  F030         	movff	_doWork$2277,?___fldiv+4
  2184  00372E  C17B  F031         	movff	_doWork$2277+1,?___fldiv+5
  2185  003732  C17C  F032         	movff	_doWork$2277+2,?___fldiv+6
  2186  003736  C17D  F033         	movff	_doWork$2277+3,?___fldiv+7
  2187  00373A  EC87  F026         	call	___fldiv	;wreg free
  2188  00373E  C02F  F19C         	movff	?___fldiv+3,doWork@temp+3
  2189  003742  C02E  F19B         	movff	?___fldiv+2,doWork@temp+2
  2190  003746  C02D  F19A         	movff	?___fldiv+1,doWork@temp+1
  2191  00374A  C02C  F199         	movff	?___fldiv,doWork@temp
  2192                           
  2193                           ;main.c: 473: temp -= 273.15;
  2194  00374E  0E01               	movlw	high doWork@temp
  2195  003750  0100               	movlb	0	; () banked
  2196  003752  6F7F               	movwf	(?___asflsub+1)& (0+255),b
  2197  003754  0E99               	movlw	low doWork@temp
  2198  003756  6F7E               	movwf	?___asflsub& (0+255),b
  2199  003758  0E33               	movlw	51
  2200  00375A  6F80               	movwf	(?___asflsub+2)& (0+255),b
  2201  00375C  0E93               	movlw	147
  2202  00375E  6F81               	movwf	(?___asflsub+3)& (0+255),b
  2203  003760  0E88               	movlw	136
  2204  003762  6F82               	movwf	(?___asflsub+4)& (0+255),b
  2205  003764  0E43               	movlw	67
  2206  003766  6F83               	movwf	(?___asflsub+5)& (0+255),b
  2207  003768  ECE6  F029         	call	___asflsub	;wreg free
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;main.c: 488: current_temp[ i ] = (current_temp[ i ] + ((long) (temp * 100) + getCalibra
      +                          tionValue(i))) / 2;
  2211  00376C  0101               	movlb	1	; () banked
  2212  00376E  519D               	movf	doWork@i& (0+255),w,b
  2213  003770  0D02               	mullw	2
  2214  003772  0E00               	movlw	low _current_temp
  2215  003774  24F3               	addwf	prodl,w,c
  2216  003776  6ED9               	movwf	fsr2l,c
  2217  003778  0E01               	movlw	high _current_temp
  2218  00377A  20F4               	addwfc	prodh,w,c
  2219  00377C  6EDA               	movwf	fsr2h,c
  2220  00377E  CFDE F0A4          	movff	postinc2,??_doWork
  2221  003782  CFDD F0A5          	movff	postdec2,??_doWork+1
  2222  003786  C0A4  F0A6         	movff	??_doWork,??_doWork+2
  2223  00378A  C0A5  F0A7         	movff	??_doWork+1,??_doWork+3
  2224  00378E  0E00               	movlw	0
  2225  003790  0100               	movlb	0	; () banked
  2226  003792  BFA7               	btfsc	(??_doWork+3)& (0+255),7,b
  2227  003794  0EFF               	movlw	255
  2228  003796  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2229  003798  6FA9               	movwf	(??_doWork+5)& (0+255),b
  2230  00379A  0101               	movlb	1	; () banked
  2231  00379C  519D               	movf	doWork@i& (0+255),w,b
  2232  00379E  EC53  F02B         	call	_getCalibrationValue
  2233  0037A2  C01A  F0AA         	movff	?_getCalibrationValue,??_doWork+6
  2234  0037A6  C01B  F0AB         	movff	?_getCalibrationValue+1,??_doWork+7
  2235  0037AA  0E00               	movlw	0
  2236  0037AC  0100               	movlb	0	; () banked
  2237  0037AE  BFAB               	btfsc	(??_doWork+7)& (0+255),7,b
  2238  0037B0  0EFF               	movlw	255
  2239  0037B2  6FAC               	movwf	(??_doWork+8)& (0+255),b
  2240  0037B4  6FAD               	movwf	(??_doWork+9)& (0+255),b
  2241  0037B6  6B64               	clrf	(?___flmul+4)& (0+255),b
  2242  0037B8  6B65               	clrf	(?___flmul+5)& (0+255),b
  2243  0037BA  0EC8               	movlw	200
  2244  0037BC  6F66               	movwf	(?___flmul+6)& (0+255),b
  2245  0037BE  0E42               	movlw	66
  2246  0037C0  6F67               	movwf	(?___flmul+7)& (0+255),b
  2247  0037C2  C199  F060         	movff	doWork@temp,?___flmul
  2248  0037C6  C19A  F061         	movff	doWork@temp+1,?___flmul+1
  2249  0037CA  C19B  F062         	movff	doWork@temp+2,?___flmul+2
  2250  0037CE  C19C  F063         	movff	doWork@temp+3,?___flmul+3
  2251  0037D2  ECEC  F023         	call	___flmul	;wreg free
  2252  0037D6  C063  F079         	movff	?___flmul+3,?___fltol+3
  2253  0037DA  C062  F078         	movff	?___flmul+2,?___fltol+2
  2254  0037DE  C061  F077         	movff	?___flmul+1,?___fltol+1
  2255  0037E2  C060  F076         	movff	?___flmul,?___fltol
  2256  0037E6  EC7D  F027         	call	___fltol	;wreg free
  2257  0037EA  51AA               	movf	(??_doWork+6)& (0+255),w,b
  2258  0037EC  2576               	addwf	?___fltol& (0+255),w,b
  2259  0037EE  6FAE               	movwf	(??_doWork+10)& (0+255),b
  2260  0037F0  51AB               	movf	(??_doWork+7)& (0+255),w,b
  2261  0037F2  2177               	addwfc	(?___fltol+1)& (0+255),w,b
  2262  0037F4  6FAF               	movwf	(??_doWork+11)& (0+255),b
  2263  0037F6  51AC               	movf	(??_doWork+8)& (0+255),w,b
  2264  0037F8  2178               	addwfc	(?___fltol+2)& (0+255),w,b
  2265  0037FA  6FB0               	movwf	(??_doWork+12)& (0+255),b
  2266  0037FC  51AD               	movf	(??_doWork+9)& (0+255),w,b
  2267  0037FE  2179               	addwfc	(?___fltol+3)& (0+255),w,b
  2268  003800  6FB1               	movwf	(??_doWork+13)& (0+255),b
  2269  003802  51A6               	movf	(??_doWork+2)& (0+255),w,b
  2270  003804  25AE               	addwf	(??_doWork+10)& (0+255),w,b
  2271  003806  6F7C               	movwf	?___aldiv& (0+255),b
  2272  003808  51A7               	movf	(??_doWork+3)& (0+255),w,b
  2273  00380A  21AF               	addwfc	(??_doWork+11)& (0+255),w,b
  2274  00380C  6F7D               	movwf	(?___aldiv+1)& (0+255),b
  2275  00380E  51A8               	movf	(??_doWork+4)& (0+255),w,b
  2276  003810  21B0               	addwfc	(??_doWork+12)& (0+255),w,b
  2277  003812  6F7E               	movwf	(?___aldiv+2)& (0+255),b
  2278  003814  51A9               	movf	(??_doWork+5)& (0+255),w,b
  2279  003816  21B1               	addwfc	(??_doWork+13)& (0+255),w,b
  2280  003818  6F7F               	movwf	(?___aldiv+3)& (0+255),b
  2281  00381A  0E02               	movlw	2
  2282  00381C  6F80               	movwf	(?___aldiv+4)& (0+255),b
  2283  00381E  0E00               	movlw	0
  2284  003820  6B81               	clrf	(?___aldiv+5)& (0+255),b
  2285  003822  6B82               	clrf	(?___aldiv+6)& (0+255),b
  2286  003824  6B83               	clrf	(?___aldiv+7)& (0+255),b
  2287  003826  EC76  F025         	call	___aldiv	;wreg free
  2288  00382A  0101               	movlb	1	; () banked
  2289  00382C  519D               	movf	doWork@i& (0+255),w,b
  2290  00382E  0D02               	mullw	2
  2291  003830  0E00               	movlw	low _current_temp
  2292  003832  24F3               	addwf	prodl,w,c
  2293  003834  6ED9               	movwf	fsr2l,c
  2294  003836  0E01               	movlw	high _current_temp
  2295  003838  20F4               	addwfc	prodh,w,c
  2296  00383A  6EDA               	movwf	fsr2h,c
  2297  00383C  0100               	movlb	0	; () banked
  2298  00383E  C07C  FFDE         	movff	?___aldiv,postinc2
  2299  003842  C07D  FFDD         	movff	?___aldiv+1,postdec2
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;main.c: 509: }
  2303                           ;main.c: 512: adc_conversion_flags &= ~(1 << i);
  2304                           
  2305                           ;main.c: 490: }
  2306  003846  C19D  F0A4         	movff	doWork@i,??_doWork
  2307  00384A  0E01               	movlw	1
  2308  00384C  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2309  00384E  2BA4               	incf	??_doWork& (0+255),f,b
  2310  003850  D002               	goto	u10444
  2311  003852                     u10445:
  2312  003852  90D8               	bcf	status,0,c
  2313  003854  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2314  003856                     u10444:
  2315  003856  2FA4               	decfsz	??_doWork& (0+255),f,b
  2316  003858  D7FC               	goto	u10445
  2317  00385A  1DA5               	comf	(??_doWork+1)& (0+255),w,b
  2318  00385C  17B6               	andwf	_adc_conversion_flags& (0+255),f,b
  2319  00385E                     l12033:
  2320                           
  2321                           ; BSR set to: 0
  2322  00385E  0101               	movlb	1	; () banked
  2323  003860  2B9D               	incf	doWork@i& (0+255),f,b
  2324                           
  2325                           ; BSR set to: 1
  2326  003862  0E05               	movlw	5
  2327  003864  659D               	cpfsgt	doWork@i& (0+255),b
  2328  003866  D5F3               	goto	l11979
  2329                           
  2330                           ; BSR set to: 1
  2331  003868  0C05               	retlw	5
  2332  00386A                     __end_of_doWork:
  2333                           	opt stack 0
  2334                           tblptru	equ	0xFF8
  2335                           prodh	equ	0xFF4
  2336                           prodl	equ	0xFF3
  2337                           postinc0	equ	0xFEE
  2338                           wreg	equ	0xFE8
  2339                           postdec1	equ	0xFE5
  2340                           fsr1h	equ	0xFE2
  2341                           fsr1l	equ	0xFE1
  2342                           indf2	equ	0xFDF
  2343                           postinc2	equ	0xFDE
  2344                           postdec2	equ	0xFDD
  2345                           fsr2h	equ	0xFDA
  2346                           fsr2l	equ	0xFD9
  2347                           status	equ	0xFD8
  2348                           
  2349 ;; *************** function ___lwtofl *****************
  2350 ;; Defined at:
  2351 ;;		line 29 in file "/opt/microchip/xc8/v1.21/sources/common/lwtofl.c"
  2352 ;; Parameters:    Size  Location     Type
  2353 ;;  c               2   25[COMRAM] unsigned int 
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;		None
  2356 ;; Return value:  Size  Location     Type
  2357 ;;                  4   25[COMRAM] unsigned int 
  2358 ;; Registers used:
  2359 ;;		wreg, status,2, status,0, cstack
  2360 ;; Tracked objects:
  2361 ;;		On entry : 0/0
  2362 ;;		On exit  : 0/0
  2363 ;;		Unchanged: 0/0
  2364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2365 ;;      Params:         4       0       0       0       0       0       0
  2366 ;;      Locals:         0       0       0       0       0       0       0
  2367 ;;      Temps:          0       0       0       0       0       0       0
  2368 ;;      Totals:         4       0       0       0       0       0       0
  2369 ;;Total ram usage:        4 bytes
  2370 ;; Hardware stack levels used:    1
  2371 ;; Hardware stack levels required when called:    3
  2372 ;; This function calls:
  2373 ;;		___flpack
  2374 ;; This function is called by:
  2375 ;;		_doWork
  2376 ;; This function uses a non-reentrant model
  2377 ;;
  2378                           
  2379                           	psect	text2
  2380  0058C8                     __ptext2:
  2381                           	opt stack 0
  2382  0058C8                     ___lwtofl:
  2383                           	opt stack 26
  2384                           
  2385                           ; BSR set to: 1
  2386                           ;incstack = 0
  2387                           ;incstack = 0
  2388  0058C8  C01A  F00E         	movff	___lwtofl@c,?___flpack
  2389  0058CC  C01B  F00F         	movff	___lwtofl@c+1,?___flpack+1
  2390  0058D0  6A10               	clrf	?___flpack+2,c
  2391  0058D2  6A11               	clrf	?___flpack+3,c
  2392  0058D4  0E96               	movlw	150
  2393  0058D6  6E12               	movwf	?___flpack+4,c
  2394  0058D8  0E00               	movlw	0
  2395  0058DA  6A13               	clrf	?___flpack+5,c
  2396  0058DC  ECB7  F024         	call	___flpack	;wreg free
  2397  0058E0  C011  F01D         	movff	?___flpack+3,?___lwtofl+3
  2398  0058E4  C010  F01C         	movff	?___flpack+2,?___lwtofl+2
  2399  0058E8  C00F  F01B         	movff	?___flpack+1,?___lwtofl+1
  2400  0058EC  C00E  F01A         	movff	?___flpack,?___lwtofl
  2401  0058F0  0012               	return	
  2402  0058F2                     __end_of___lwtofl:
  2403                           	opt stack 0
  2404                           tblptru	equ	0xFF8
  2405                           prodh	equ	0xFF4
  2406                           prodl	equ	0xFF3
  2407                           postinc0	equ	0xFEE
  2408                           wreg	equ	0xFE8
  2409                           postdec1	equ	0xFE5
  2410                           fsr1h	equ	0xFE2
  2411                           fsr1l	equ	0xFE1
  2412                           indf2	equ	0xFDF
  2413                           postinc2	equ	0xFDE
  2414                           postdec2	equ	0xFDD
  2415                           fsr2h	equ	0xFDA
  2416                           fsr2l	equ	0xFD9
  2417                           status	equ	0xFD8
  2418                           
  2419 ;; *************** function ___asfldiv *****************
  2420 ;; Defined at:
  2421 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/pic18/asfldiv.c"
  2422 ;; Parameters:    Size  Location     Type
  2423 ;;  f1p             2    0[BANK0 ] PTR 
  2424 ;;		 -> doWork@avarage(4), 
  2425 ;;  f2              4    2[BANK0 ] PTR 
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;		None
  2428 ;; Return value:  Size  Location     Type
  2429 ;;                  4    0[BANK0 ] PTR 
  2430 ;; Registers used:
  2431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2432 ;; Tracked objects:
  2433 ;;		On entry : F/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2437 ;;      Params:         0       6       0       0       0       0       0
  2438 ;;      Locals:         0       0       0       0       0       0       0
  2439 ;;      Temps:          0       0       0       0       0       0       0
  2440 ;;      Totals:         0       6       0       0       0       0       0
  2441 ;;Total ram usage:        6 bytes
  2442 ;; Hardware stack levels used:    1
  2443 ;; Hardware stack levels required when called:    4
  2444 ;; This function calls:
  2445 ;;		___fldiv
  2446 ;; This function is called by:
  2447 ;;		_doWork
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450                           
  2451                           	psect	text3
  2452  0054B2                     __ptext3:
  2453                           	opt stack 0
  2454  0054B2                     ___asfldiv:
  2455                           	opt stack 25
  2456                           
  2457                           ; BSR set to: 0
  2458                           ;	Return value of ___asfldiv is never used
  2459                           
  2460                           ;incstack = 0
  2461                           ;incstack = 0
  2462  0054B2  C060  FFD9         	movff	___asfldiv@f1p,fsr2l
  2463  0054B6  C061  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  2464  0054BA  CFDE F02C          	movff	postinc2,?___fldiv
  2465  0054BE  CFDE F02D          	movff	postinc2,?___fldiv+1
  2466  0054C2  CFDE F02E          	movff	postinc2,?___fldiv+2
  2467  0054C6  CFDE F02F          	movff	postinc2,?___fldiv+3
  2468  0054CA  C062  F030         	movff	___asfldiv@f2,?___fldiv+4
  2469  0054CE  C063  F031         	movff	___asfldiv@f2+1,?___fldiv+5
  2470  0054D2  C064  F032         	movff	___asfldiv@f2+2,?___fldiv+6
  2471  0054D6  C065  F033         	movff	___asfldiv@f2+3,?___fldiv+7
  2472  0054DA  EC87  F026         	call	___fldiv	;wreg free
  2473  0054DE  C060  FFD9         	movff	___asfldiv@f1p,fsr2l
  2474  0054E2  C061  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  2475  0054E6  C02C  FFDE         	movff	?___fldiv,postinc2
  2476  0054EA  C02D  FFDE         	movff	?___fldiv+1,postinc2
  2477  0054EE  C02E  FFDE         	movff	?___fldiv+2,postinc2
  2478  0054F2  C02F  FFDD         	movff	?___fldiv+3,postdec2
  2479  0054F6  06D9               	decf	fsr2l,f,c
  2480  0054F8  06D9               	decf	fsr2l,f,c
  2481  0054FA  0012               	return	
  2482  0054FC                     __end_of___asfldiv:
  2483                           	opt stack 0
  2484                           tblptru	equ	0xFF8
  2485                           prodh	equ	0xFF4
  2486                           prodl	equ	0xFF3
  2487                           postinc0	equ	0xFEE
  2488                           wreg	equ	0xFE8
  2489                           postdec1	equ	0xFE5
  2490                           fsr1h	equ	0xFE2
  2491                           fsr1l	equ	0xFE1
  2492                           indf2	equ	0xFDF
  2493                           postinc2	equ	0xFDE
  2494                           postdec2	equ	0xFDD
  2495                           fsr2h	equ	0xFDA
  2496                           fsr2l	equ	0xFD9
  2497                           status	equ	0xFD8
  2498                           
  2499 ;; *************** function ___asfladd *****************
  2500 ;; Defined at:
  2501 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/pic18/asfladd.c"
  2502 ;; Parameters:    Size  Location     Type
  2503 ;;  f1p             2   43[COMRAM] PTR 
  2504 ;;		 -> doWork@temp(4), doWork@avarage(4), 
  2505 ;;  f2              4   45[COMRAM] PTR 
  2506 ;; Auto vars:     Size  Location     Type
  2507 ;;		None
  2508 ;; Return value:  Size  Location     Type
  2509 ;;                  4   43[COMRAM] PTR 
  2510 ;; Registers used:
  2511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2512 ;; Tracked objects:
  2513 ;;		On entry : 0/0
  2514 ;;		On exit  : 0/0
  2515 ;;		Unchanged: 0/0
  2516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2517 ;;      Params:         6       0       0       0       0       0       0
  2518 ;;      Locals:         0       0       0       0       0       0       0
  2519 ;;      Temps:          0       0       0       0       0       0       0
  2520 ;;      Totals:         6       0       0       0       0       0       0
  2521 ;;Total ram usage:        6 bytes
  2522 ;; Hardware stack levels used:    1
  2523 ;; Hardware stack levels required when called:    4
  2524 ;; This function calls:
  2525 ;;		___fladd
  2526 ;; This function is called by:
  2527 ;;		_doWork
  2528 ;; This function uses a non-reentrant model
  2529 ;;
  2530                           
  2531                           	psect	text4
  2532  0054FC                     __ptext4:
  2533                           	opt stack 0
  2534  0054FC                     ___asfladd:
  2535                           	opt stack 25
  2536                           
  2537                           ;	Return value of ___asfladd is never used
  2538                           
  2539                           ;incstack = 0
  2540                           ;incstack = 0
  2541  0054FC  C02C  FFD9         	movff	___asfladd@f1p,fsr2l
  2542  005500  C02D  FFDA         	movff	___asfladd@f1p+1,fsr2h
  2543  005504  CFDE F01D          	movff	postinc2,?___fladd
  2544  005508  CFDE F01E          	movff	postinc2,?___fladd+1
  2545  00550C  CFDE F01F          	movff	postinc2,?___fladd+2
  2546  005510  CFDE F020          	movff	postinc2,?___fladd+3
  2547  005514  C02E  F021         	movff	___asfladd@f2,?___fladd+4
  2548  005518  C02F  F022         	movff	___asfladd@f2+1,?___fladd+5
  2549  00551C  C030  F023         	movff	___asfladd@f2+2,?___fladd+6
  2550  005520  C031  F024         	movff	___asfladd@f2+3,?___fladd+7
  2551  005524  EC6B  F020         	call	___fladd	;wreg free
  2552  005528  C02C  FFD9         	movff	___asfladd@f1p,fsr2l
  2553  00552C  C02D  FFDA         	movff	___asfladd@f1p+1,fsr2h
  2554  005530  C01D  FFDE         	movff	?___fladd,postinc2
  2555  005534  C01E  FFDE         	movff	?___fladd+1,postinc2
  2556  005538  C01F  FFDE         	movff	?___fladd+2,postinc2
  2557  00553C  C020  FFDD         	movff	?___fladd+3,postdec2
  2558  005540  06D9               	decf	fsr2l,f,c
  2559  005542  06D9               	decf	fsr2l,f,c
  2560  005544  0012               	return	
  2561  005546                     __end_of___asfladd:
  2562                           	opt stack 0
  2563                           tblptru	equ	0xFF8
  2564                           prodh	equ	0xFF4
  2565                           prodl	equ	0xFF3
  2566                           postinc0	equ	0xFEE
  2567                           wreg	equ	0xFE8
  2568                           postdec1	equ	0xFE5
  2569                           fsr1h	equ	0xFE2
  2570                           fsr1l	equ	0xFE1
  2571                           indf2	equ	0xFDF
  2572                           postinc2	equ	0xFDE
  2573                           postdec2	equ	0xFDD
  2574                           fsr2h	equ	0xFDA
  2575                           fsr2l	equ	0xFD9
  2576                           status	equ	0xFD8
  2577                           
  2578 ;; *************** function ___aldiv *****************
  2579 ;; Defined at:
  2580 ;;		line 10 in file "/opt/microchip/xc8/v1.21/sources/common/aldiv.c"
  2581 ;; Parameters:    Size  Location     Type
  2582 ;;  dividend        4   28[BANK0 ] long 
  2583 ;;  divisor         4   32[BANK0 ] long 
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;  quotient        4   38[BANK0 ] long 
  2586 ;;  sign            1   37[BANK0 ] unsigned char 
  2587 ;;  counter         1   36[BANK0 ] unsigned char 
  2588 ;; Return value:  Size  Location     Type
  2589 ;;                  4   28[BANK0 ] long 
  2590 ;; Registers used:
  2591 ;;		wreg, status,2, status,0
  2592 ;; Tracked objects:
  2593 ;;		On entry : F/0
  2594 ;;		On exit  : F/0
  2595 ;;		Unchanged: 0/0
  2596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2597 ;;      Params:         0       8       0       0       0       0       0
  2598 ;;      Locals:         0       6       0       0       0       0       0
  2599 ;;      Temps:          0       0       0       0       0       0       0
  2600 ;;      Totals:         0      14       0       0       0       0       0
  2601 ;;Total ram usage:       14 bytes
  2602 ;; Hardware stack levels used:    1
  2603 ;; Hardware stack levels required when called:    2
  2604 ;; This function calls:
  2605 ;;		Nothing
  2606 ;; This function is called by:
  2607 ;;		_doWork
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           	psect	text5
  2612  004AEC                     __ptext5:
  2613                           	opt stack 0
  2614  004AEC                     ___aldiv:
  2615                           	opt stack 27
  2616                           
  2617                           ; BSR set to: 0
  2618                           
  2619                           ;incstack = 0
  2620                           ;incstack = 0
  2621  004AEC  6B85               	clrf	___aldiv@sign& (0+255),b
  2622  004AEE  AF83               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2623  004AF0  D00A               	goto	l11413
  2624                           
  2625                           ; BSR set to: 0
  2626  004AF2  1F83               	comf	(___aldiv@divisor+3)& (0+255),f,b
  2627  004AF4  1F82               	comf	(___aldiv@divisor+2)& (0+255),f,b
  2628  004AF6  1F81               	comf	(___aldiv@divisor+1)& (0+255),f,b
  2629  004AF8  6D80               	negf	___aldiv@divisor& (0+255),b
  2630  004AFA  0E00               	movlw	0
  2631  004AFC  2381               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  2632  004AFE  2382               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  2633  004B00  2383               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  2634                           
  2635                           ; BSR set to: 0
  2636  004B02  0E01               	movlw	1
  2637  004B04  6F85               	movwf	___aldiv@sign& (0+255),b
  2638  004B06                     l11413:
  2639                           
  2640                           ; BSR set to: 0
  2641  004B06  AF7F               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  2642  004B08  D00A               	goto	l11419
  2643                           
  2644                           ; BSR set to: 0
  2645  004B0A  1F7F               	comf	(___aldiv@dividend+3)& (0+255),f,b
  2646  004B0C  1F7E               	comf	(___aldiv@dividend+2)& (0+255),f,b
  2647  004B0E  1F7D               	comf	(___aldiv@dividend+1)& (0+255),f,b
  2648  004B10  6D7C               	negf	___aldiv@dividend& (0+255),b
  2649  004B12  0E00               	movlw	0
  2650  004B14  237D               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  2651  004B16  237E               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  2652  004B18  237F               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  2653                           
  2654                           ; BSR set to: 0
  2655  004B1A  0E01               	movlw	1
  2656  004B1C  1B85               	xorwf	___aldiv@sign& (0+255),f,b
  2657  004B1E                     l11419:
  2658                           
  2659                           ; BSR set to: 0
  2660  004B1E  6B86               	clrf	___aldiv@quotient& (0+255),b
  2661  004B20  6B87               	clrf	(___aldiv@quotient+1)& (0+255),b
  2662  004B22  6B88               	clrf	(___aldiv@quotient+2)& (0+255),b
  2663  004B24  6B89               	clrf	(___aldiv@quotient+3)& (0+255),b
  2664                           
  2665                           ; BSR set to: 0
  2666  004B26  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2667  004B28  1180               	iorwf	___aldiv@divisor& (0+255),w,b
  2668  004B2A  1181               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  2669  004B2C  1182               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  2670  004B2E  E029               	bz	l11441
  2671                           
  2672                           ; BSR set to: 0
  2673  004B30  0E01               	movlw	1
  2674  004B32  6F84               	movwf	___aldiv@counter& (0+255),b
  2675  004B34  D006               	goto	l11427
  2676  004B36                     l11425:
  2677                           
  2678                           ; BSR set to: 0
  2679  004B36  90D8               	bcf	status,0,c
  2680  004B38  3780               	rlcf	___aldiv@divisor& (0+255),f,b
  2681  004B3A  3781               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  2682  004B3C  3782               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  2683  004B3E  3783               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  2684  004B40  2B84               	incf	___aldiv@counter& (0+255),f,b
  2685  004B42                     l11427:
  2686                           
  2687                           ; BSR set to: 0
  2688  004B42  AF83               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2689  004B44  D7F8               	goto	l11425
  2690  004B46                     l11429:
  2691                           
  2692                           ; BSR set to: 0
  2693  004B46  90D8               	bcf	status,0,c
  2694  004B48  3786               	rlcf	___aldiv@quotient& (0+255),f,b
  2695  004B4A  3787               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  2696  004B4C  3788               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  2697  004B4E  3789               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  2698                           
  2699                           ; BSR set to: 0
  2700  004B50  5180               	movf	___aldiv@divisor& (0+255),w,b
  2701  004B52  5D7C               	subwf	___aldiv@dividend& (0+255),w,b
  2702  004B54  5181               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2703  004B56  597D               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  2704  004B58  5182               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2705  004B5A  597E               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  2706  004B5C  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2707  004B5E  597F               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  2708  004B60  E309               	bnc	l11437
  2709                           
  2710                           ; BSR set to: 0
  2711  004B62  5180               	movf	___aldiv@divisor& (0+255),w,b
  2712  004B64  5F7C               	subwf	___aldiv@dividend& (0+255),f,b
  2713  004B66  5181               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2714  004B68  5B7D               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  2715  004B6A  5182               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2716  004B6C  5B7E               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  2717  004B6E  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2718  004B70  5B7F               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  2719                           
  2720                           ; BSR set to: 0
  2721  004B72  8186               	bsf	___aldiv@quotient& (0+255),0,b
  2722  004B74                     l11437:
  2723                           
  2724                           ; BSR set to: 0
  2725  004B74  90D8               	bcf	status,0,c
  2726  004B76  3383               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  2727  004B78  3382               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  2728  004B7A  3381               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  2729  004B7C  3380               	rrcf	___aldiv@divisor& (0+255),f,b
  2730                           
  2731                           ; BSR set to: 0
  2732  004B7E  2F84               	decfsz	___aldiv@counter& (0+255),f,b
  2733  004B80  D7E2               	goto	l11429
  2734  004B82                     l11441:
  2735                           
  2736                           ; BSR set to: 0
  2737  004B82  5185               	movf	___aldiv@sign& (0+255),w,b
  2738  004B84  E008               	bz	l11445
  2739                           
  2740                           ; BSR set to: 0
  2741  004B86  1F89               	comf	(___aldiv@quotient+3)& (0+255),f,b
  2742  004B88  1F88               	comf	(___aldiv@quotient+2)& (0+255),f,b
  2743  004B8A  1F87               	comf	(___aldiv@quotient+1)& (0+255),f,b
  2744  004B8C  6D86               	negf	___aldiv@quotient& (0+255),b
  2745  004B8E  0E00               	movlw	0
  2746  004B90  2387               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  2747  004B92  2388               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  2748  004B94  2389               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  2749  004B96                     l11445:
  2750                           
  2751                           ; BSR set to: 0
  2752  004B96  C086  F07C         	movff	___aldiv@quotient,?___aldiv
  2753  004B9A  C087  F07D         	movff	___aldiv@quotient+1,?___aldiv+1
  2754  004B9E  C088  F07E         	movff	___aldiv@quotient+2,?___aldiv+2
  2755  004BA2  C089  F07F         	movff	___aldiv@quotient+3,?___aldiv+3
  2756                           
  2757                           ; BSR set to: 0
  2758  004BA6  0012               	return	
  2759  004BA8                     __end_of___aldiv:
  2760                           	opt stack 0
  2761                           tblptru	equ	0xFF8
  2762                           prodh	equ	0xFF4
  2763                           prodl	equ	0xFF3
  2764                           postinc0	equ	0xFEE
  2765                           wreg	equ	0xFE8
  2766                           postdec1	equ	0xFE5
  2767                           fsr1h	equ	0xFE2
  2768                           fsr1l	equ	0xFE1
  2769                           indf2	equ	0xFDF
  2770                           postinc2	equ	0xFDE
  2771                           postdec2	equ	0xFDD
  2772                           fsr2h	equ	0xFDA
  2773                           fsr2l	equ	0xFD9
  2774                           status	equ	0xFD8
  2775                           
  2776 ;; *************** function _getCalibrationValue *****************
  2777 ;; Defined at:
  2778 ;;		line 872 in file "../main.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;  i               1    wreg     unsigned char 
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;  i               1   30[COMRAM] unsigned char 
  2783 ;;  cal             2   28[COMRAM] short 
  2784 ;; Return value:  Size  Location     Type
  2785 ;;                  2   25[COMRAM] short 
  2786 ;; Registers used:
  2787 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2788 ;; Tracked objects:
  2789 ;;		On entry : F/1
  2790 ;;		On exit  : 0/0
  2791 ;;		Unchanged: 0/0
  2792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2793 ;;      Params:         2       0       0       0       0       0       0
  2794 ;;      Locals:         3       0       0       0       0       0       0
  2795 ;;      Temps:          1       0       0       0       0       0       0
  2796 ;;      Totals:         6       0       0       0       0       0       0
  2797 ;;Total ram usage:        6 bytes
  2798 ;; Hardware stack levels used:    1
  2799 ;; Hardware stack levels required when called:    3
  2800 ;; This function calls:
  2801 ;;		_readEEPROM
  2802 ;; This function is called by:
  2803 ;;		_doWork
  2804 ;; This function uses a non-reentrant model
  2805 ;;
  2806                           
  2807                           	psect	text6
  2808  0056A6                     __ptext6:
  2809                           	opt stack 0
  2810  0056A6                     _getCalibrationValue:
  2811                           	opt stack 26
  2812                           
  2813                           ; BSR set to: 0
  2814                           ;incstack = 0
  2815                           ;incstack = 0
  2816                           ;getCalibrationValue@i stored from wreg
  2817  0056A6  CFE8 F01F          	movff	wreg,getCalibrationValue@i
  2818                           
  2819                           ; BSR set to: 1
  2820                           ;main.c: 873: int16_t cal;
  2821                           ;main.c: 875: cal = ((int16_t)( (((uint16_t)readEEPROM(2 * i + 0x9E))<<8) + (uint16_t)re
      +                          adEEPROM(2 * i + 0x9F)) );
  2822  0056AA  501F               	movf	getCalibrationValue@i,w,c
  2823  0056AC  0D02               	mullw	2
  2824  0056AE  0E9F               	movlw	159
  2825  0056B0  24F3               	addwf	prodl,w,c
  2826  0056B2  6E16               	movwf	?_readEEPROM,c
  2827  0056B4  0E00               	movlw	0
  2828  0056B6  20F4               	addwfc	prodh,w,c
  2829  0056B8  6E17               	movwf	?_readEEPROM+1,c
  2830  0056BA  ECD6  F02D         	call	_readEEPROM	;wreg free
  2831  0056BE  6E1C               	movwf	??_getCalibrationValue& (0+255),c
  2832  0056C0  501F               	movf	getCalibrationValue@i,w,c
  2833  0056C2  0D02               	mullw	2
  2834  0056C4  0E9E               	movlw	158
  2835  0056C6  24F3               	addwf	prodl,w,c
  2836  0056C8  6E16               	movwf	?_readEEPROM,c
  2837  0056CA  0E00               	movlw	0
  2838  0056CC  20F4               	addwfc	prodh,w,c
  2839  0056CE  6E17               	movwf	?_readEEPROM+1,c
  2840  0056D0  ECD6  F02D         	call	_readEEPROM	;wreg free
  2841  0056D4  6E1E               	movwf	getCalibrationValue@cal+1,c
  2842  0056D6  501C               	movf	??_getCalibrationValue,w,c
  2843  0056D8  6E1D               	movwf	getCalibrationValue@cal,c
  2844                           
  2845                           ;main.c: 880: return cal;
  2846  0056DA  C01D  F01A         	movff	getCalibrationValue@cal,?_getCalibrationValue
  2847  0056DE  C01E  F01B         	movff	getCalibrationValue@cal+1,?_getCalibrationValue+1
  2848  0056E2  0012               	return	
  2849  0056E4                     __end_of_getCalibrationValue:
  2850                           	opt stack 0
  2851                           tblptru	equ	0xFF8
  2852                           prodh	equ	0xFF4
  2853                           prodl	equ	0xFF3
  2854                           postinc0	equ	0xFEE
  2855                           wreg	equ	0xFE8
  2856                           postdec1	equ	0xFE5
  2857                           fsr1h	equ	0xFE2
  2858                           fsr1l	equ	0xFE1
  2859                           indf2	equ	0xFDF
  2860                           postinc2	equ	0xFDE
  2861                           postdec2	equ	0xFDD
  2862                           fsr2h	equ	0xFDA
  2863                           fsr2l	equ	0xFD9
  2864                           status	equ	0xFD8
  2865                           
  2866 ;; *************** function _log *****************
  2867 ;; Defined at:
  2868 ;;		line 6 in file "/opt/microchip/xc8/v1.21/sources/common/log.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;  x               4   33[BANK0 ] short 
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;  exponent        2   66[COMRAM] int 
  2873 ;; Return value:  Size  Location     Type
  2874 ;;                  4   33[BANK0 ] int 
  2875 ;; Registers used:
  2876 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2877 ;; Tracked objects:
  2878 ;;		On entry : 0/1
  2879 ;;		On exit  : 0/0
  2880 ;;		Unchanged: 0/0
  2881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2882 ;;      Params:         0       4       0       0       0       0       0
  2883 ;;      Locals:         2       0       0       0       0       0       0
  2884 ;;      Temps:          0       0       0       0       0       0       0
  2885 ;;      Totals:         2       4       0       0       0       0       0
  2886 ;;Total ram usage:        6 bytes
  2887 ;; Hardware stack levels used:    1
  2888 ;; Hardware stack levels required when called:    5
  2889 ;; This function calls:
  2890 ;;		___fladd
  2891 ;;		___flmul
  2892 ;;		___awtofl
  2893 ;;		_eval_poly
  2894 ;;		_frexp
  2895 ;; This function is called by:
  2896 ;;		_doWork
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900                           	psect	text7
  2901  004386                     __ptext7:
  2902                           	opt stack 0
  2903  004386                     _log:
  2904                           	opt stack 24
  2905                           
  2906                           ;incstack = 0
  2907                           ;incstack = 0
  2908  004386  0100               	movlb	0	; () banked
  2909  004388  BF84               	btfsc	(log@x+3)& (0+255),7,b
  2910  00438A  D007               	goto	u8780
  2911                           
  2912                           ; BSR set to: 0
  2913                           
  2914                           ; BSR set to: 0
  2915  00438C  EE20  F081         	lfsr	2,log@x
  2916  004390  50DE               	movf	postinc2,w,c
  2917  004392  10DE               	iorwf	postinc2,w,c
  2918  004394  10DE               	iorwf	postinc2,w,c
  2919  004396  10DE               	iorwf	postinc2,w,c
  2920  004398  E105               	bnz	l10447
  2921  00439A                     u8780:
  2922                           
  2923                           ; BSR set to: 0
  2924  00439A  6B81               	clrf	?_log& (0+255),b
  2925  00439C  6B82               	clrf	(?_log+1)& (0+255),b
  2926  00439E  6B83               	clrf	(?_log+2)& (0+255),b
  2927  0043A0  6B84               	clrf	(?_log+3)& (0+255),b
  2928  0043A2  D087               	goto	l1858
  2929  0043A4                     l10447:
  2930                           
  2931                           ; BSR set to: 0
  2932  0043A4  6B64               	clrf	(?___flmul+4)& (0+255),b
  2933  0043A6  6B65               	clrf	(?___flmul+5)& (0+255),b
  2934  0043A8  6B66               	clrf	(?___flmul+6)& (0+255),b
  2935  0043AA  0E40               	movlw	64
  2936  0043AC  6F67               	movwf	(?___flmul+7)& (0+255),b
  2937  0043AE  0E43               	movlw	low log@exponent
  2938  0043B0  6E12               	movwf	?_frexp+4,c
  2939  0043B2  0E00               	movlw	high log@exponent
  2940  0043B4  6E13               	movwf	?_frexp+5,c
  2941  0043B6  0E0F               	movlw	15
  2942  0043B8  6E13               	movwf	?_frexp+5,c
  2943  0043BA  0E5F               	movlw	__accesstop+-1
  2944  0043BC  6412               	cpfsgt	?_frexp+4,c
  2945  0043BE  6A13               	clrf	?_frexp+5,c
  2946  0043C0  C081  F00E         	movff	log@x,?_frexp
  2947  0043C4  C082  F00F         	movff	log@x+1,?_frexp+1
  2948  0043C8  C083  F010         	movff	log@x+2,?_frexp+2
  2949  0043CC  C084  F011         	movff	log@x+3,?_frexp+3
  2950  0043D0  EC17  F028         	call	_frexp	;wreg free
  2951  0043D4  C011  F063         	movff	?_frexp+3,?___flmul+3
  2952  0043D8  C010  F062         	movff	?_frexp+2,?___flmul+2
  2953  0043DC  C00F  F061         	movff	?_frexp+1,?___flmul+1
  2954  0043E0  C00E  F060         	movff	?_frexp,?___flmul
  2955  0043E4  ECEC  F023         	call	___flmul	;wreg free
  2956  0043E8  C063  F020         	movff	?___flmul+3,?___fladd+3
  2957  0043EC  C062  F01F         	movff	?___flmul+2,?___fladd+2
  2958  0043F0  C061  F01E         	movff	?___flmul+1,?___fladd+1
  2959  0043F4  C060  F01D         	movff	?___flmul,?___fladd
  2960  0043F8  6A21               	clrf	?___fladd+4,c
  2961  0043FA  6A22               	clrf	?___fladd+5,c
  2962  0043FC  0E80               	movlw	128
  2963  0043FE  6E23               	movwf	?___fladd+6,c
  2964  004400  0EBF               	movlw	191
  2965  004402  6E24               	movwf	?___fladd+7,c
  2966  004404  EC6B  F020         	call	___fladd	;wreg free
  2967  004408  C020  F084         	movff	?___fladd+3,log@x+3
  2968  00440C  C01F  F083         	movff	?___fladd+2,log@x+2
  2969  004410  C01E  F082         	movff	?___fladd+1,log@x+1
  2970  004414  C01D  F081         	movff	?___fladd,log@x
  2971  004418  0643               	decf	log@exponent,f,c
  2972  00441A  A0D8               	btfss	status,0,c
  2973  00441C  0644               	decf	log@exponent+1,f,c
  2974  00441E  C081  F076         	movff	log@x,?_eval_poly
  2975  004422  C082  F077         	movff	log@x+1,?_eval_poly+1
  2976  004426  C083  F078         	movff	log@x+2,?_eval_poly+2
  2977  00442A  C084  F079         	movff	log@x+3,?_eval_poly+3
  2978  00442E  0E48               	movlw	low log@coeff
  2979  004430  0100               	movlb	0	; () banked
  2980  004432  6F7A               	movwf	(?_eval_poly+4)& (0+255),b
  2981  004434  6B7C               	clrf	(?_eval_poly+6)& (0+255),b
  2982  004436  0E08               	movlw	8
  2983  004438  6F7B               	movwf	(?_eval_poly+5)& (0+255),b
  2984  00443A  EC57  F024         	call	_eval_poly	;wreg free
  2985  00443E  C079  F084         	movff	?_eval_poly+3,log@x+3
  2986  004442  C078  F083         	movff	?_eval_poly+2,log@x+2
  2987  004446  C077  F082         	movff	?_eval_poly+1,log@x+1
  2988  00444A  C076  F081         	movff	?_eval_poly,log@x
  2989                           
  2990                           ; BSR set to: 0
  2991  00444E  0E18               	movlw	24
  2992  004450  6F64               	movwf	(?___flmul+4)& (0+255),b
  2993  004452  0E72               	movlw	114
  2994  004454  6F65               	movwf	(?___flmul+5)& (0+255),b
  2995  004456  0E31               	movlw	49
  2996  004458  6F66               	movwf	(?___flmul+6)& (0+255),b
  2997  00445A  0E3F               	movlw	63
  2998  00445C  6F67               	movwf	(?___flmul+7)& (0+255),b
  2999  00445E  C043  F018         	movff	log@exponent,?___awtofl
  3000  004462  C044  F019         	movff	log@exponent+1,?___awtofl+1
  3001  004466  ECE8  F02B         	call	___awtofl	;wreg free
  3002  00446A  C01B  F063         	movff	?___awtofl+3,?___flmul+3
  3003  00446E  C01A  F062         	movff	?___awtofl+2,?___flmul+2
  3004  004472  C019  F061         	movff	?___awtofl+1,?___flmul+1
  3005  004476  C018  F060         	movff	?___awtofl,?___flmul
  3006  00447A  ECEC  F023         	call	___flmul	;wreg free
  3007  00447E  C063  F020         	movff	?___flmul+3,?___fladd+3
  3008  004482  C062  F01F         	movff	?___flmul+2,?___fladd+2
  3009  004486  C061  F01E         	movff	?___flmul+1,?___fladd+1
  3010  00448A  C060  F01D         	movff	?___flmul,?___fladd
  3011  00448E  C081  F021         	movff	log@x,?___fladd+4
  3012  004492  C082  F022         	movff	log@x+1,?___fladd+5
  3013  004496  C083  F023         	movff	log@x+2,?___fladd+6
  3014  00449A  C084  F024         	movff	log@x+3,?___fladd+7
  3015  00449E  EC6B  F020         	call	___fladd	;wreg free
  3016  0044A2  C020  F084         	movff	?___fladd+3,?_log+3
  3017  0044A6  C01F  F083         	movff	?___fladd+2,?_log+2
  3018  0044AA  C01E  F082         	movff	?___fladd+1,?_log+1
  3019  0044AE  C01D  F081         	movff	?___fladd,?_log
  3020  0044B2                     l1858:
  3021  0044B2  0012               	return	
  3022  0044B4                     __end_of_log:
  3023                           	opt stack 0
  3024                           tblptru	equ	0xFF8
  3025                           prodh	equ	0xFF4
  3026                           prodl	equ	0xFF3
  3027                           postinc0	equ	0xFEE
  3028                           wreg	equ	0xFE8
  3029                           postdec1	equ	0xFE5
  3030                           fsr1h	equ	0xFE2
  3031                           fsr1l	equ	0xFE1
  3032                           indf2	equ	0xFDF
  3033                           postinc2	equ	0xFDE
  3034                           postdec2	equ	0xFDD
  3035                           fsr2h	equ	0xFDA
  3036                           fsr2l	equ	0xFD9
  3037                           status	equ	0xFD8
  3038                           
  3039 ;; *************** function _exp *****************
  3040 ;; Defined at:
  3041 ;;		line 13 in file "/opt/microchip/xc8/v1.21/sources/common/exp.c"
  3042 ;; Parameters:    Size  Location     Type
  3043 ;;  x               4   57[BANK0 ] int 
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;  exponent        2   65[BANK0 ] int 
  3046 ;;  sign            1   67[BANK0 ] unsigned char 
  3047 ;; Return value:  Size  Location     Type
  3048 ;;                  4   57[BANK0 ] unsigned char 
  3049 ;; Registers used:
  3050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/1
  3053 ;;		On exit  : 0/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3056 ;;      Params:         0       4       0       0       0       0       0
  3057 ;;      Locals:         0       7       0       0       0       0       0
  3058 ;;      Temps:          0       0       0       0       0       0       0
  3059 ;;      Totals:         0      11       0       0       0       0       0
  3060 ;;Total ram usage:       11 bytes
  3061 ;; Hardware stack levels used:    1
  3062 ;; Hardware stack levels required when called:    6
  3063 ;; This function calls:
  3064 ;;		___fldiv
  3065 ;;		___asflmul
  3066 ;;		___asflsub
  3067 ;;		___awtofl
  3068 ;;		_floor
  3069 ;;		_eval_poly
  3070 ;;		_ldexp
  3071 ;;		___flge
  3072 ;;		___flneg
  3073 ;;		___fltol
  3074 ;; This function is called by:
  3075 ;;		_doWork
  3076 ;; This function uses a non-reentrant model
  3077 ;;
  3078                           
  3079                           	psect	text8
  3080  003A78                     __ptext8:
  3081                           	opt stack 0
  3082  003A78                     _exp:
  3083                           	opt stack 23
  3084                           
  3085                           ;incstack = 0
  3086                           ;incstack = 0
  3087  003A78  0100               	movlb	0	; () banked
  3088  003A7A  EE20  F099         	lfsr	2,exp@x
  3089  003A7E  50DE               	movf	postinc2,w,c
  3090  003A80  10DE               	iorwf	postinc2,w,c
  3091  003A82  10DE               	iorwf	postinc2,w,c
  3092  003A84  10DE               	iorwf	postinc2,w,c
  3093  003A86  E107               	bnz	l10409
  3094                           
  3095                           ; BSR set to: 0
  3096  003A88  0E00               	movlw	0
  3097  003A8A  6F99               	movwf	?_exp& (0+255),b
  3098  003A8C  6F9A               	movwf	(?_exp+1)& (0+255),b
  3099  003A8E  0E80               	movlw	128
  3100  003A90  6F9B               	movwf	(?_exp+2)& (0+255),b
  3101  003A92  0E3F               	movlw	63
  3102  003A94  D018               	goto	L1
  3103  003A96                     l10409:
  3104                           
  3105                           ; BSR set to: 0
  3106  003A96  0E18               	movlw	24
  3107  003A98  6E0E               	movwf	?___flge,c
  3108  003A9A  0E72               	movlw	114
  3109  003A9C  6E0F               	movwf	?___flge+1,c
  3110  003A9E  0E31               	movlw	49
  3111  003AA0  6E10               	movwf	?___flge+2,c
  3112  003AA2  0E44               	movlw	68
  3113  003AA4  6E11               	movwf	?___flge+3,c
  3114  003AA6  C099  F012         	movff	exp@x,?___flge+4
  3115  003AAA  C09A  F013         	movff	exp@x+1,?___flge+5
  3116  003AAE  C09B  F014         	movff	exp@x+2,?___flge+6
  3117  003AB2  C09C  F015         	movff	exp@x+3,?___flge+7
  3118  003AB6  EC0D  F02A         	call	___flge	;wreg free
  3119  003ABA  E207               	bc	l10415
  3120  003ABC  0100               	movlb	0	; () banked
  3121  003ABE  6999               	setf	?_exp& (0+255),b
  3122  003AC0  699A               	setf	(?_exp+1)& (0+255),b
  3123  003AC2  0E7F               	movlw	127
  3124  003AC4  6F9B               	movwf	(?_exp+2)& (0+255),b
  3125  003AC6                     L1:
  3126  003AC6  6F9C               	movwf	(?_exp+3)& (0+255),b
  3127  003AC8  D0C8               	goto	l1566
  3128  003ACA                     l10415:
  3129  003ACA  C099  F00E         	movff	exp@x,?___flge
  3130  003ACE  C09A  F00F         	movff	exp@x+1,?___flge+1
  3131  003AD2  C09B  F010         	movff	exp@x+2,?___flge+2
  3132  003AD6  C09C  F011         	movff	exp@x+3,?___flge+3
  3133  003ADA  0E87               	movlw	135
  3134  003ADC  6E12               	movwf	?___flge+4,c
  3135  003ADE  0E48               	movlw	72
  3136  003AE0  6E13               	movwf	?___flge+5,c
  3137  003AE2  0E3A               	movlw	58
  3138  003AE4  6E14               	movwf	?___flge+6,c
  3139  003AE6  0EC4               	movlw	196
  3140  003AE8  6E15               	movwf	?___flge+7,c
  3141  003AEA  EC0D  F02A         	call	___flge	;wreg free
  3142  003AEE  E202               	bc	l10419
  3143  003AF0  0100               	movlb	0	; () banked
  3144  003AF2  D08D               	goto	u8760
  3145  003AF4                     l10419:
  3146  003AF4  0100               	movlb	0	; () banked
  3147  003AF6  0E01               	movlw	1
  3148  003AF8  AF9C               	btfss	(exp@x+3)& (0+255),7,b
  3149  003AFA  0E00               	movlw	0
  3150  003AFC  6FA3               	movwf	exp@sign& (0+255),b
  3151  003AFE  51A3               	movf	exp@sign& (0+255),w,b
  3152  003B00  E012               	bz	l1569
  3153                           
  3154                           ; BSR set to: 0
  3155  003B02  C099  F00E         	movff	exp@x,?___flneg
  3156  003B06  C09A  F00F         	movff	exp@x+1,?___flneg+1
  3157  003B0A  C09B  F010         	movff	exp@x+2,?___flneg+2
  3158  003B0E  C09C  F011         	movff	exp@x+3,?___flneg+3
  3159  003B12  ECDD  F02C         	call	___flneg	;wreg free
  3160  003B16  C011  F09C         	movff	?___flneg+3,exp@x+3
  3161  003B1A  C010  F09B         	movff	?___flneg+2,exp@x+2
  3162  003B1E  C00F  F09A         	movff	?___flneg+1,exp@x+1
  3163  003B22  C00E  F099         	movff	?___flneg,exp@x
  3164  003B26                     l1569:
  3165                           
  3166                           ; BSR set to: 0
  3167  003B26  0E3B               	movlw	59
  3168  003B28  6F76               	movwf	?___asflmul& (0+255),b
  3169  003B2A  0EAA               	movlw	170
  3170  003B2C  6F77               	movwf	(?___asflmul+1)& (0+255),b
  3171  003B2E  0EB8               	movlw	184
  3172  003B30  6F78               	movwf	(?___asflmul+2)& (0+255),b
  3173  003B32  0E3F               	movlw	63
  3174  003B34  6F79               	movwf	(?___asflmul+3)& (0+255),b
  3175  003B36  0E99               	movlw	exp@x& (0+255)
  3176  003B38  EC33  F02A         	call	___asflmul
  3177  003B3C  C099  F08F         	movff	exp@x,?_floor
  3178  003B40  C09A  F090         	movff	exp@x+1,?_floor+1
  3179  003B44  C09B  F091         	movff	exp@x+2,?_floor+2
  3180  003B48  C09C  F092         	movff	exp@x+3,?_floor+3
  3181  003B4C  EC6E  F023         	call	_floor	;wreg free
  3182  003B50  C092  F0A0         	movff	?_floor+3,_exp$2281+3
  3183  003B54  C091  F09F         	movff	?_floor+2,_exp$2281+2
  3184  003B58  C090  F09E         	movff	?_floor+1,_exp$2281+1
  3185  003B5C  C08F  F09D         	movff	?_floor,_exp$2281
  3186  003B60  C09D  F076         	movff	_exp$2281,?___fltol
  3187  003B64  C09E  F077         	movff	_exp$2281+1,?___fltol+1
  3188  003B68  C09F  F078         	movff	_exp$2281+2,?___fltol+2
  3189  003B6C  C0A0  F079         	movff	_exp$2281+3,?___fltol+3
  3190  003B70  EC7D  F027         	call	___fltol	;wreg free
  3191  003B74  C076  F0A1         	movff	?___fltol,exp@exponent
  3192  003B78  C077  F0A2         	movff	?___fltol+1,exp@exponent+1
  3193                           
  3194                           ; BSR set to: 0
  3195  003B7C  0E00               	movlw	high exp@x
  3196  003B7E  6F7F               	movwf	(?___asflsub+1)& (0+255),b
  3197  003B80  0E99               	movlw	low exp@x
  3198  003B82  6F7E               	movwf	?___asflsub& (0+255),b
  3199  003B84  C0A1  F018         	movff	exp@exponent,?___awtofl
  3200  003B88  C0A2  F019         	movff	exp@exponent+1,?___awtofl+1
  3201  003B8C  ECE8  F02B         	call	___awtofl	;wreg free
  3202  003B90  C01B  F083         	movff	?___awtofl+3,?___asflsub+5
  3203  003B94  C01A  F082         	movff	?___awtofl+2,?___asflsub+4
  3204  003B98  C019  F081         	movff	?___awtofl+1,?___asflsub+3
  3205  003B9C  C018  F080         	movff	?___awtofl,?___asflsub+2
  3206  003BA0  ECE6  F029         	call	___asflsub	;wreg free
  3207                           
  3208                           ; BSR set to: 0
  3209  003BA4  C099  F076         	movff	exp@x,?_eval_poly
  3210  003BA8  C09A  F077         	movff	exp@x+1,?_eval_poly+1
  3211  003BAC  C09B  F078         	movff	exp@x+2,?_eval_poly+2
  3212  003BB0  C09C  F079         	movff	exp@x+3,?_eval_poly+3
  3213  003BB4  0E20               	movlw	low exp@coeff
  3214  003BB6  6F7A               	movwf	(?_eval_poly+4)& (0+255),b
  3215  003BB8  6B7C               	clrf	(?_eval_poly+6)& (0+255),b
  3216  003BBA  0E09               	movlw	9
  3217  003BBC  6F7B               	movwf	(?_eval_poly+5)& (0+255),b
  3218  003BBE  EC57  F024         	call	_eval_poly	;wreg free
  3219  003BC2  C079  F084         	movff	?_eval_poly+3,?_ldexp+3
  3220  003BC6  C078  F083         	movff	?_eval_poly+2,?_ldexp+2
  3221  003BCA  C077  F082         	movff	?_eval_poly+1,?_ldexp+1
  3222  003BCE  C076  F081         	movff	?_eval_poly,?_ldexp
  3223  003BD2  C0A1  F085         	movff	exp@exponent,?_ldexp+4
  3224  003BD6  C0A2  F086         	movff	exp@exponent+1,?_ldexp+5
  3225  003BDA  ECDB  F026         	call	_ldexp	;wreg free
  3226  003BDE  C084  F09C         	movff	?_ldexp+3,exp@x+3
  3227  003BE2  C083  F09B         	movff	?_ldexp+2,exp@x+2
  3228  003BE6  C082  F09A         	movff	?_ldexp+1,exp@x+1
  3229  003BEA  C081  F099         	movff	?_ldexp,exp@x
  3230                           
  3231                           ; BSR set to: 0
  3232  003BEE  51A3               	movf	exp@sign& (0+255),w,b
  3233  003BF0  E02C               	bz	l1570
  3234                           
  3235                           ; BSR set to: 0
  3236  003BF2  EE20  F099         	lfsr	2,exp@x
  3237  003BF6  0EFF               	movlw	255
  3238  003BF8  18DE               	xorwf	postinc2,w,c
  3239  003BFA  0EFF               	movlw	255
  3240  003BFC  B4D8               	btfsc	status,2,c
  3241  003BFE  18DE               	xorwf	postinc2,w,c
  3242  003C00  0E7F               	movlw	127
  3243  003C02  B4D8               	btfsc	status,2,c
  3244  003C04  18DE               	xorwf	postinc2,w,c
  3245  003C06  0E7F               	movlw	127
  3246  003C08  B4D8               	btfsc	status,2,c
  3247  003C0A  18DE               	xorwf	postinc2,w,c
  3248  003C0C  E105               	bnz	l10435
  3249  003C0E                     u8760:
  3250                           
  3251                           ; BSR set to: 0
  3252  003C0E  6B99               	clrf	?_exp& (0+255),b
  3253  003C10  6B9A               	clrf	(?_exp+1)& (0+255),b
  3254  003C12  6B9B               	clrf	(?_exp+2)& (0+255),b
  3255  003C14  6B9C               	clrf	(?_exp+3)& (0+255),b
  3256  003C16  D021               	goto	l1566
  3257  003C18                     l10435:
  3258                           
  3259                           ; BSR set to: 0
  3260  003C18  6A2C               	clrf	?___fldiv,c
  3261  003C1A  6A2D               	clrf	?___fldiv+1,c
  3262  003C1C  0E80               	movlw	128
  3263  003C1E  6E2E               	movwf	?___fldiv+2,c
  3264  003C20  0E3F               	movlw	63
  3265  003C22  6E2F               	movwf	?___fldiv+3,c
  3266  003C24  C099  F030         	movff	exp@x,?___fldiv+4
  3267  003C28  C09A  F031         	movff	exp@x+1,?___fldiv+5
  3268  003C2C  C09B  F032         	movff	exp@x+2,?___fldiv+6
  3269  003C30  C09C  F033         	movff	exp@x+3,?___fldiv+7
  3270  003C34  EC87  F026         	call	___fldiv	;wreg free
  3271  003C38  C02F  F09C         	movff	?___fldiv+3,?_exp+3
  3272  003C3C  C02E  F09B         	movff	?___fldiv+2,?_exp+2
  3273  003C40  C02D  F09A         	movff	?___fldiv+1,?_exp+1
  3274  003C44  C02C  F099         	movff	?___fldiv,?_exp
  3275  003C48  D008               	goto	l1566
  3276  003C4A                     l1570:
  3277                           
  3278                           ; BSR set to: 0
  3279  003C4A  C099  F099         	movff	exp@x,?_exp
  3280  003C4E  C09A  F09A         	movff	exp@x+1,?_exp+1
  3281  003C52  C09B  F09B         	movff	exp@x+2,?_exp+2
  3282  003C56  C09C  F09C         	movff	exp@x+3,?_exp+3
  3283  003C5A                     l1566:
  3284  003C5A  0012               	return	
  3285  003C5C                     __end_of_exp:
  3286                           	opt stack 0
  3287                           tblptru	equ	0xFF8
  3288                           prodh	equ	0xFF4
  3289                           prodl	equ	0xFF3
  3290                           postinc0	equ	0xFEE
  3291                           wreg	equ	0xFE8
  3292                           postdec1	equ	0xFE5
  3293                           fsr1h	equ	0xFE2
  3294                           fsr1l	equ	0xFE1
  3295                           indf2	equ	0xFDF
  3296                           postinc2	equ	0xFDE
  3297                           postdec2	equ	0xFDD
  3298                           fsr2h	equ	0xFDA
  3299                           fsr2l	equ	0xFD9
  3300                           status	equ	0xFD8
  3301                           
  3302 ;; *************** function ___flneg *****************
  3303 ;; Defined at:
  3304 ;;		line 16 in file "/opt/microchip/xc8/v1.21/sources/common/flneg.c"
  3305 ;; Parameters:    Size  Location     Type
  3306 ;;  f1              4   13[COMRAM] unsigned char 
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;		None
  3309 ;; Return value:  Size  Location     Type
  3310 ;;                  4   13[COMRAM] unsigned char 
  3311 ;; Registers used:
  3312 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3313 ;; Tracked objects:
  3314 ;;		On entry : F/0
  3315 ;;		On exit  : F/0
  3316 ;;		Unchanged: F/0
  3317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3318 ;;      Params:         4       0       0       0       0       0       0
  3319 ;;      Locals:         0       0       0       0       0       0       0
  3320 ;;      Temps:          0       0       0       0       0       0       0
  3321 ;;      Totals:         4       0       0       0       0       0       0
  3322 ;;Total ram usage:        4 bytes
  3323 ;; Hardware stack levels used:    1
  3324 ;; Hardware stack levels required when called:    2
  3325 ;; This function calls:
  3326 ;;		Nothing
  3327 ;; This function is called by:
  3328 ;;		_exp
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331                           
  3332                           	psect	text9
  3333  0059BA                     __ptext9:
  3334                           	opt stack 0
  3335  0059BA                     ___flneg:
  3336                           	opt stack 26
  3337                           
  3338                           ; BSR set to: 0
  3339                           
  3340                           ;incstack = 0
  3341                           ;incstack = 0
  3342  0059BA  EE20  F00E         	lfsr	2,___flneg@f1
  3343  0059BE  50DE               	movf	postinc2,w,c
  3344  0059C0  10DE               	iorwf	postinc2,w,c
  3345  0059C2  10DE               	iorwf	postinc2,w,c
  3346  0059C4  10DE               	iorwf	postinc2,w,c
  3347  0059C6  E002               	bz	l11715
  3348                           
  3349                           ; BSR set to: 0
  3350  0059C8  0E80               	movlw	128
  3351  0059CA  1A11               	xorwf	___flneg@f1+3,f,c
  3352  0059CC                     l11715:
  3353                           
  3354                           ; BSR set to: 0
  3355  0059CC  C00E  F00E         	movff	___flneg@f1,?___flneg
  3356  0059D0  C00F  F00F         	movff	___flneg@f1+1,?___flneg+1
  3357  0059D4  C010  F010         	movff	___flneg@f1+2,?___flneg+2
  3358  0059D8  C011  F011         	movff	___flneg@f1+3,?___flneg+3
  3359                           
  3360                           ; BSR set to: 0
  3361  0059DC  0012               	return	
  3362  0059DE                     __end_of___flneg:
  3363                           	opt stack 0
  3364                           tblptru	equ	0xFF8
  3365                           prodh	equ	0xFF4
  3366                           prodl	equ	0xFF3
  3367                           postinc0	equ	0xFEE
  3368                           wreg	equ	0xFE8
  3369                           postdec1	equ	0xFE5
  3370                           fsr1h	equ	0xFE2
  3371                           fsr1l	equ	0xFE1
  3372                           indf2	equ	0xFDF
  3373                           postinc2	equ	0xFDE
  3374                           postdec2	equ	0xFDD
  3375                           fsr2h	equ	0xFDA
  3376                           fsr2l	equ	0xFD9
  3377                           status	equ	0xFD8
  3378                           
  3379 ;; *************** function _ldexp *****************
  3380 ;; Defined at:
  3381 ;;		line 278 in file "/opt/microchip/xc8/v1.21/sources/common/frexp.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;  value           4   33[BANK0 ] unsigned char 
  3384 ;;  newexp          2   37[BANK0 ] int 
  3385 ;; Auto vars:     Size  Location     Type
  3386 ;;		None
  3387 ;; Return value:  Size  Location     Type
  3388 ;;                  4   33[BANK0 ] int 
  3389 ;; Registers used:
  3390 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3391 ;; Tracked objects:
  3392 ;;		On entry : F/0
  3393 ;;		On exit  : F/0
  3394 ;;		Unchanged: 0/0
  3395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3396 ;;      Params:         0       6       0       0       0       0       0
  3397 ;;      Locals:         0       0       0       0       0       0       0
  3398 ;;      Temps:          3       0       0       0       0       0       0
  3399 ;;      Totals:         3       6       0       0       0       0       0
  3400 ;;Total ram usage:        9 bytes
  3401 ;; Hardware stack levels used:    1
  3402 ;; Hardware stack levels required when called:    2
  3403 ;; This function calls:
  3404 ;;		Nothing
  3405 ;; This function is called by:
  3406 ;;		_exp
  3407 ;; This function uses a non-reentrant model
  3408 ;;
  3409                           
  3410                           	psect	text10
  3411  004DB6                     __ptext10:
  3412                           	opt stack 0
  3413  004DB6                     _ldexp:
  3414                           	opt stack 26
  3415                           
  3416                           ; BSR set to: 0
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;incstack = 0
  3420                           ;incstack = 0
  3421  004DB6  EE20  F081         	lfsr	2,ldexp@value
  3422  004DBA  50DE               	movf	postinc2,w,c
  3423  004DBC  10DE               	iorwf	postinc2,w,c
  3424  004DBE  10DE               	iorwf	postinc2,w,c
  3425  004DC0  10DE               	iorwf	postinc2,w,c
  3426  004DC2  E014               	bz	u10130
  3427                           
  3428                           ; BSR set to: 0
  3429                           
  3430                           ; BSR set to: 0
  3431  004DC4  5184               	movf	(ldexp@value+3)& (0+255),w,b
  3432  004DC6  0B7F               	andlw	127
  3433  004DC8  6E43               	movwf	??_ldexp& (0+255),c
  3434  004DCA  90D8               	bcf	status,0,c
  3435  004DCC  3443               	rlcf	??_ldexp,w,c
  3436  004DCE  6E44               	movwf	(??_ldexp+1)& (0+255),c
  3437  004DD0  6A45               	clrf	(??_ldexp+2)& (0+255),c
  3438  004DD2  3645               	rlcf	(??_ldexp+2)& (0+255),f,c
  3439  004DD4  5044               	movf	??_ldexp+1,w,c
  3440  004DD6  2785               	addwf	ldexp@newexp& (0+255),f,b
  3441  004DD8  5045               	movf	??_ldexp+2,w,c
  3442  004DDA  2386               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  3443  004DDC  3583               	rlcf	(ldexp@value+2)& (0+255),w,b
  3444  004DDE  36E8               	rlcf	wreg,f,c
  3445  004DE0  0B01               	andlw	1
  3446  004DE2  2785               	addwf	ldexp@newexp& (0+255),f,b
  3447  004DE4  0E00               	movlw	0
  3448  004DE6  2386               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  3449                           
  3450                           ; BSR set to: 0
  3451  004DE8  AF86               	btfss	(ldexp@newexp+1)& (0+255),7,b
  3452  004DEA  D005               	goto	l11677
  3453  004DEC                     u10130:
  3454                           
  3455                           ; BSR set to: 0
  3456  004DEC  6B81               	clrf	?_ldexp& (0+255),b
  3457  004DEE  6B82               	clrf	(?_ldexp+1)& (0+255),b
  3458  004DF0  6B83               	clrf	(?_ldexp+2)& (0+255),b
  3459  004DF2  6B84               	clrf	(?_ldexp+3)& (0+255),b
  3460  004DF4  D031               	goto	l1691
  3461  004DF6                     l11677:
  3462                           
  3463                           ; BSR set to: 0
  3464  004DF6  5186               	movf	(ldexp@newexp+1)& (0+255),w,b
  3465  004DF8  0A80               	xorlw	128
  3466  004DFA  0F7F               	addlw	-129
  3467  004DFC  0E00               	movlw	0
  3468  004DFE  B4D8               	btfsc	status,2,c
  3469  004E00  5D85               	subwf	ldexp@newexp& (0+255),w,b
  3470  004E02  E30E               	bnc	l11691
  3471                           
  3472                           ; BSR set to: 0
  3473  004E04  AF84               	btfss	(ldexp@value+3)& (0+255),7,b
  3474  004E06  D006               	goto	l11687
  3475                           
  3476                           ; BSR set to: 0
  3477  004E08  6981               	setf	?_ldexp& (0+255),b
  3478  004E0A  6982               	setf	(?_ldexp+1)& (0+255),b
  3479  004E0C  0E7F               	movlw	127
  3480  004E0E  6F83               	movwf	(?_ldexp+2)& (0+255),b
  3481  004E10  0EFF               	movlw	255
  3482  004E12  D004               	goto	L2
  3483  004E14                     l11687:
  3484                           
  3485                           ; BSR set to: 0
  3486  004E14  6981               	setf	?_ldexp& (0+255),b
  3487  004E16  6982               	setf	(?_ldexp+1)& (0+255),b
  3488  004E18  0E7F               	movlw	127
  3489  004E1A  6F83               	movwf	(?_ldexp+2)& (0+255),b
  3490  004E1C                     L2:
  3491  004E1C  6F84               	movwf	(?_ldexp+3)& (0+255),b
  3492  004E1E  D01C               	goto	l1691
  3493  004E20                     l11691:
  3494                           
  3495                           ; BSR set to: 0
  3496  004E20  3586               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  3497  004E22  3186               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  3498  004E24  6E44               	movwf	(??_ldexp+1)& (0+255),c
  3499  004E26  3185               	rrcf	ldexp@newexp& (0+255),w,b
  3500  004E28  6E43               	movwf	??_ldexp& (0+255),c
  3501  004E2A  1984               	xorwf	(ldexp@value+3)& (0+255),w,b
  3502  004E2C  0B80               	andlw	-128
  3503  004E2E  1843               	xorwf	??_ldexp,w,c
  3504  004E30  6F84               	movwf	(ldexp@value+3)& (0+255),b
  3505  004E32  C085  F043         	movff	ldexp@newexp,??_ldexp
  3506  004E36  0E01               	movlw	1
  3507  004E38  1643               	andwf	??_ldexp,f,c
  3508  004E3A  3243               	rrcf	??_ldexp,f,c
  3509  004E3C  3243               	rrcf	??_ldexp,f,c
  3510  004E3E  5183               	movf	(ldexp@value+2)& (0+255),w,b
  3511  004E40  1843               	xorwf	??_ldexp,w,c
  3512  004E42  0B7F               	andlw	-129
  3513  004E44  1843               	xorwf	??_ldexp,w,c
  3514  004E46  6F83               	movwf	(ldexp@value+2)& (0+255),b
  3515                           
  3516                           ; BSR set to: 0
  3517  004E48  C081  F081         	movff	ldexp@value,?_ldexp
  3518  004E4C  C082  F082         	movff	ldexp@value+1,?_ldexp+1
  3519  004E50  C083  F083         	movff	ldexp@value+2,?_ldexp+2
  3520  004E54  C084  F084         	movff	ldexp@value+3,?_ldexp+3
  3521  004E58                     l1691:
  3522                           
  3523                           ; BSR set to: 0
  3524  004E58  0012               	return	
  3525  004E5A                     __end_of_ldexp:
  3526                           	opt stack 0
  3527                           tblptru	equ	0xFF8
  3528                           prodh	equ	0xFF4
  3529                           prodl	equ	0xFF3
  3530                           postinc0	equ	0xFEE
  3531                           wreg	equ	0xFE8
  3532                           postdec1	equ	0xFE5
  3533                           fsr1h	equ	0xFE2
  3534                           fsr1l	equ	0xFE1
  3535                           indf2	equ	0xFDF
  3536                           postinc2	equ	0xFDE
  3537                           postdec2	equ	0xFDD
  3538                           fsr2h	equ	0xFDA
  3539                           fsr2l	equ	0xFD9
  3540                           status	equ	0xFD8
  3541                           
  3542 ;; *************** function _eval_poly *****************
  3543 ;; Defined at:
  3544 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/common/evalpoly.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;  x               4   22[BANK0 ] int 
  3547 ;;  d               1   26[BANK0 ] PTR const 
  3548 ;;		 -> log@coeff(36), exp@coeff(40), 
  3549 ;;  n               2   27[BANK0 ] int 
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;  res             4   29[BANK0 ] int 
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  4   22[BANK0 ] int 
  3554 ;; Registers used:
  3555 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3556 ;; Tracked objects:
  3557 ;;		On entry : F/0
  3558 ;;		On exit  : F/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3561 ;;      Params:         0       7       0       0       0       0       0
  3562 ;;      Locals:         0       4       0       0       0       0       0
  3563 ;;      Temps:          1       0       0       0       0       0       0
  3564 ;;      Totals:         1      11       0       0       0       0       0
  3565 ;;Total ram usage:       12 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:    4
  3568 ;; This function calls:
  3569 ;;		___fladd
  3570 ;;		___flmul
  3571 ;; This function is called by:
  3572 ;;		_exp
  3573 ;;		_log
  3574 ;; This function uses a non-reentrant model
  3575 ;;
  3576                           
  3577                           	psect	text11
  3578  0048AE                     __ptext11:
  3579                           	opt stack 0
  3580  0048AE                     _eval_poly:
  3581                           	opt stack 24
  3582                           
  3583                           ; BSR set to: 0
  3584                           
  3585                           ; BSR set to: 0
  3586                           ;incstack = 0
  3587                           ;incstack = 0
  3588  0048AE  517B               	movf	eval_poly@n& (0+255),w,b
  3589  0048B0  0D04               	mullw	4
  3590  0048B2  517A               	movf	eval_poly@d& (0+255),w,b
  3591  0048B4  24F3               	addwf	prodl,w,c
  3592  0048B6  6E42               	movwf	??_eval_poly& (0+255),c
  3593  0048B8  C042  FFF6         	movff	??_eval_poly,tblptrl
  3594  0048BC  0E0B               	movlw	high __smallconst
  3595  0048BE  6EF7               	movwf	tblptrh,c
  3596  0048C0  0009               	tblrd		*+
  3597  0048C2  CFF5 F07D          	movff	tablat,eval_poly@res
  3598  0048C6  0009               	tblrd		*+
  3599  0048C8  CFF5 F07E          	movff	tablat,eval_poly@res+1
  3600  0048CC  0009               	tblrd		*+
  3601  0048CE  CFF5 F07F          	movff	tablat,eval_poly@res+2
  3602  0048D2  000A               	tblrd		*-
  3603  0048D4  CFF5 F080          	movff	tablat,eval_poly@res+3
  3604  0048D8  D03D               	goto	l11663
  3605  0048DA                     l11661:
  3606                           
  3607                           ; BSR set to: 0
  3608  0048DA  C07D  F064         	movff	eval_poly@res,?___flmul+4
  3609  0048DE  C07E  F065         	movff	eval_poly@res+1,?___flmul+5
  3610  0048E2  C07F  F066         	movff	eval_poly@res+2,?___flmul+6
  3611  0048E6  C080  F067         	movff	eval_poly@res+3,?___flmul+7
  3612  0048EA  C076  F060         	movff	eval_poly@x,?___flmul
  3613  0048EE  C077  F061         	movff	eval_poly@x+1,?___flmul+1
  3614  0048F2  C078  F062         	movff	eval_poly@x+2,?___flmul+2
  3615  0048F6  C079  F063         	movff	eval_poly@x+3,?___flmul+3
  3616  0048FA  ECEC  F023         	call	___flmul	;wreg free
  3617  0048FE  C063  F020         	movff	?___flmul+3,?___fladd+3
  3618  004902  C062  F01F         	movff	?___flmul+2,?___fladd+2
  3619  004906  C061  F01E         	movff	?___flmul+1,?___fladd+1
  3620  00490A  C060  F01D         	movff	?___flmul,?___fladd
  3621  00490E  0100               	movlb	0	; () banked
  3622  004910  077B               	decf	eval_poly@n& (0+255),f,b
  3623  004912  A0D8               	btfss	status,0,c
  3624  004914  077C               	decf	(eval_poly@n+1)& (0+255),f,b
  3625  004916  517B               	movf	eval_poly@n& (0+255),w,b
  3626  004918  0D04               	mullw	4
  3627  00491A  517A               	movf	eval_poly@d& (0+255),w,b
  3628  00491C  24F3               	addwf	prodl,w,c
  3629  00491E  6E42               	movwf	??_eval_poly& (0+255),c
  3630  004920  C042  FFF6         	movff	??_eval_poly,tblptrl
  3631  004924  0E0B               	movlw	high __smallconst
  3632  004926  6EF7               	movwf	tblptrh,c
  3633  004928  0009               	tblrd		*+
  3634  00492A  CFF5 F021          	movff	tablat,?___fladd+4
  3635  00492E  0009               	tblrd		*+
  3636  004930  CFF5 F022          	movff	tablat,?___fladd+5
  3637  004934  0009               	tblrd		*+
  3638  004936  CFF5 F023          	movff	tablat,?___fladd+6
  3639  00493A  000A               	tblrd		*-
  3640  00493C  CFF5 F024          	movff	tablat,?___fladd+7
  3641  004940  EC6B  F020         	call	___fladd	;wreg free
  3642  004944  C020  F080         	movff	?___fladd+3,eval_poly@res+3
  3643  004948  C01F  F07F         	movff	?___fladd+2,eval_poly@res+2
  3644  00494C  C01E  F07E         	movff	?___fladd+1,eval_poly@res+1
  3645  004950  C01D  F07D         	movff	?___fladd,eval_poly@res
  3646  004954                     l11663:
  3647  004954  0100               	movlb	0	; () banked
  3648  004956  517C               	movf	(eval_poly@n+1)& (0+255),w,b
  3649  004958  117B               	iorwf	eval_poly@n& (0+255),w,b
  3650  00495A  E1BF               	bnz	l11661
  3651                           
  3652                           ; BSR set to: 0
  3653  00495C  C07D  F076         	movff	eval_poly@res,?_eval_poly
  3654  004960  C07E  F077         	movff	eval_poly@res+1,?_eval_poly+1
  3655  004964  C07F  F078         	movff	eval_poly@res+2,?_eval_poly+2
  3656  004968  C080  F079         	movff	eval_poly@res+3,?_eval_poly+3
  3657                           
  3658                           ; BSR set to: 0
  3659  00496C  0012               	return	
  3660  00496E                     __end_of_eval_poly:
  3661                           	opt stack 0
  3662                           tblptru	equ	0xFF8
  3663                           tblptrh	equ	0xFF7
  3664                           tblptrl	equ	0xFF6
  3665                           tablat	equ	0xFF5
  3666                           prodh	equ	0xFF4
  3667                           prodl	equ	0xFF3
  3668                           postinc0	equ	0xFEE
  3669                           wreg	equ	0xFE8
  3670                           postdec1	equ	0xFE5
  3671                           fsr1h	equ	0xFE2
  3672                           fsr1l	equ	0xFE1
  3673                           indf2	equ	0xFDF
  3674                           postinc2	equ	0xFDE
  3675                           postdec2	equ	0xFDD
  3676                           fsr2h	equ	0xFDA
  3677                           fsr2l	equ	0xFD9
  3678                           status	equ	0xFD8
  3679                           
  3680 ;; *************** function _floor *****************
  3681 ;; Defined at:
  3682 ;;		line 14 in file "/opt/microchip/xc8/v1.21/sources/common/floor.c"
  3683 ;; Parameters:    Size  Location     Type
  3684 ;;  x               4   47[BANK0 ] int 
  3685 ;; Auto vars:     Size  Location     Type
  3686 ;;  i               4   51[BANK0 ] int 
  3687 ;;  expon           2   55[BANK0 ] int 
  3688 ;; Return value:  Size  Location     Type
  3689 ;;                  4   47[BANK0 ] int 
  3690 ;; Registers used:
  3691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3692 ;; Tracked objects:
  3693 ;;		On entry : F/0
  3694 ;;		On exit  : 0/0
  3695 ;;		Unchanged: 0/0
  3696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3697 ;;      Params:         0       4       0       0       0       0       0
  3698 ;;      Locals:         0       6       0       0       0       0       0
  3699 ;;      Temps:          0       0       0       0       0       0       0
  3700 ;;      Totals:         0      10       0       0       0       0       0
  3701 ;;Total ram usage:       10 bytes
  3702 ;; Hardware stack levels used:    1
  3703 ;; Hardware stack levels required when called:    4
  3704 ;; This function calls:
  3705 ;;		___altofl
  3706 ;;		___fladd
  3707 ;;		___flge
  3708 ;;		_frexp
  3709 ;;		___fltol
  3710 ;; This function is called by:
  3711 ;;		_exp
  3712 ;; This function uses a non-reentrant model
  3713 ;;
  3714                           
  3715                           	psect	text12
  3716  0046DC                     __ptext12:
  3717                           	opt stack 0
  3718  0046DC                     _floor:
  3719                           	opt stack 24
  3720                           
  3721                           ; BSR set to: 0
  3722                           
  3723                           ; BSR set to: 0
  3724                           ;incstack = 0
  3725                           ;incstack = 0
  3726  0046DC  C08F  F00E         	movff	floor@x,?_frexp
  3727  0046E0  C090  F00F         	movff	floor@x+1,?_frexp+1
  3728  0046E4  C091  F010         	movff	floor@x+2,?_frexp+2
  3729  0046E8  C092  F011         	movff	floor@x+3,?_frexp+3
  3730  0046EC  0E00               	movlw	high floor@expon
  3731  0046EE  6E13               	movwf	?_frexp+5,c
  3732  0046F0  0E97               	movlw	low floor@expon
  3733  0046F2  6E12               	movwf	?_frexp+4,c
  3734  0046F4  EC17  F028         	call	_frexp	;wreg free
  3735                           
  3736                           ; BSR set to: 0
  3737  0046F8  AF98               	btfss	(floor@expon+1)& (0+255),7,b
  3738  0046FA  D00F               	goto	l11649
  3739                           
  3740                           ; BSR set to: 0
  3741  0046FC  AF92               	btfss	(floor@x+3)& (0+255),7,b
  3742  0046FE  D008               	goto	l1659
  3743                           
  3744                           ; BSR set to: 0
  3745  004700  0E00               	movlw	0
  3746  004702  6F8F               	movwf	?_floor& (0+255),b
  3747  004704  6F90               	movwf	(?_floor+1)& (0+255),b
  3748  004706  0E80               	movlw	128
  3749  004708  6F91               	movwf	(?_floor+2)& (0+255),b
  3750  00470A  0EBF               	movlw	191
  3751  00470C  6F92               	movwf	(?_floor+3)& (0+255),b
  3752  00470E  D063               	goto	l1660
  3753  004710                     l1659:
  3754                           
  3755                           ; BSR set to: 0
  3756  004710  6B8F               	clrf	?_floor& (0+255),b
  3757  004712  6B90               	clrf	(?_floor+1)& (0+255),b
  3758  004714  6B91               	clrf	(?_floor+2)& (0+255),b
  3759  004716  6B92               	clrf	(?_floor+3)& (0+255),b
  3760  004718  D05E               	goto	l1660
  3761  00471A                     l11649:
  3762                           
  3763                           ; BSR set to: 0
  3764  00471A  0E1D               	movlw	29
  3765  00471C  5D97               	subwf	floor@expon& (0+255),w,b
  3766  00471E  0E00               	movlw	0
  3767  004720  5998               	subwfb	(floor@expon+1)& (0+255),w,b
  3768  004722  E309               	bnc	l11653
  3769                           
  3770                           ; BSR set to: 0
  3771  004724  C08F  F08F         	movff	floor@x,?_floor
  3772  004728  C090  F090         	movff	floor@x+1,?_floor+1
  3773  00472C  C091  F091         	movff	floor@x+2,?_floor+2
  3774  004730  C092  F092         	movff	floor@x+3,?_floor+3
  3775  004734  D050               	goto	l1660
  3776  004736                     l11653:
  3777                           
  3778                           ; BSR set to: 0
  3779  004736  C08F  F076         	movff	floor@x,?___fltol
  3780  00473A  C090  F077         	movff	floor@x+1,?___fltol+1
  3781  00473E  C091  F078         	movff	floor@x+2,?___fltol+2
  3782  004742  C092  F079         	movff	floor@x+3,?___fltol+3
  3783  004746  EC7D  F027         	call	___fltol	;wreg free
  3784  00474A  C079  F08D         	movff	?___fltol+3,?___altofl+3
  3785  00474E  C078  F08C         	movff	?___fltol+2,?___altofl+2
  3786  004752  C077  F08B         	movff	?___fltol+1,?___altofl+1
  3787  004756  C076  F08A         	movff	?___fltol,?___altofl
  3788  00475A  ECA3  F02A         	call	___altofl	;wreg free
  3789  00475E  C08D  F096         	movff	?___altofl+3,floor@i+3
  3790  004762  C08C  F095         	movff	?___altofl+2,floor@i+2
  3791  004766  C08B  F094         	movff	?___altofl+1,floor@i+1
  3792  00476A  C08A  F093         	movff	?___altofl,floor@i
  3793  00476E  C08F  F00E         	movff	floor@x,?___flge
  3794  004772  C090  F00F         	movff	floor@x+1,?___flge+1
  3795  004776  C091  F010         	movff	floor@x+2,?___flge+2
  3796  00477A  C092  F011         	movff	floor@x+3,?___flge+3
  3797  00477E  C093  F012         	movff	floor@i,?___flge+4
  3798  004782  C094  F013         	movff	floor@i+1,?___flge+5
  3799  004786  C095  F014         	movff	floor@i+2,?___flge+6
  3800  00478A  C096  F015         	movff	floor@i+3,?___flge+7
  3801  00478E  EC0D  F02A         	call	___flge	;wreg free
  3802  004792  E219               	bc	l1662
  3803  004794  C093  F01D         	movff	floor@i,?___fladd
  3804  004798  C094  F01E         	movff	floor@i+1,?___fladd+1
  3805  00479C  C095  F01F         	movff	floor@i+2,?___fladd+2
  3806  0047A0  C096  F020         	movff	floor@i+3,?___fladd+3
  3807  0047A4  6A21               	clrf	?___fladd+4,c
  3808  0047A6  6A22               	clrf	?___fladd+5,c
  3809  0047A8  0E80               	movlw	128
  3810  0047AA  6E23               	movwf	?___fladd+6,c
  3811  0047AC  0EBF               	movlw	191
  3812  0047AE  6E24               	movwf	?___fladd+7,c
  3813  0047B0  EC6B  F020         	call	___fladd	;wreg free
  3814  0047B4  C020  F092         	movff	?___fladd+3,?_floor+3
  3815  0047B8  C01F  F091         	movff	?___fladd+2,?_floor+2
  3816  0047BC  C01E  F090         	movff	?___fladd+1,?_floor+1
  3817  0047C0  C01D  F08F         	movff	?___fladd,?_floor
  3818  0047C4  D008               	goto	l1660
  3819  0047C6                     l1662:
  3820  0047C6  C093  F08F         	movff	floor@i,?_floor
  3821  0047CA  C094  F090         	movff	floor@i+1,?_floor+1
  3822  0047CE  C095  F091         	movff	floor@i+2,?_floor+2
  3823  0047D2  C096  F092         	movff	floor@i+3,?_floor+3
  3824  0047D6                     l1660:
  3825  0047D6  0012               	return	
  3826  0047D8                     __end_of_floor:
  3827                           	opt stack 0
  3828                           tblptru	equ	0xFF8
  3829                           tblptrh	equ	0xFF7
  3830                           tblptrl	equ	0xFF6
  3831                           tablat	equ	0xFF5
  3832                           prodh	equ	0xFF4
  3833                           prodl	equ	0xFF3
  3834                           postinc0	equ	0xFEE
  3835                           wreg	equ	0xFE8
  3836                           postdec1	equ	0xFE5
  3837                           fsr1h	equ	0xFE2
  3838                           fsr1l	equ	0xFE1
  3839                           indf2	equ	0xFDF
  3840                           postinc2	equ	0xFDE
  3841                           postdec2	equ	0xFDD
  3842                           fsr2h	equ	0xFDA
  3843                           fsr2l	equ	0xFD9
  3844                           status	equ	0xFD8
  3845                           
  3846 ;; *************** function ___fltol *****************
  3847 ;; Defined at:
  3848 ;;		line 44 in file "/opt/microchip/xc8/v1.21/sources/common/fltol.c"
  3849 ;; Parameters:    Size  Location     Type
  3850 ;;  f1              4   22[BANK0 ] int 
  3851 ;; Auto vars:     Size  Location     Type
  3852 ;;  exp1            1   27[BANK0 ] unsigned char 
  3853 ;;  sign1           1   26[BANK0 ] unsigned char 
  3854 ;; Return value:  Size  Location     Type
  3855 ;;                  4   22[BANK0 ] long 
  3856 ;; Registers used:
  3857 ;;		wreg, status,2, status,0
  3858 ;; Tracked objects:
  3859 ;;		On entry : 0/0
  3860 ;;		On exit  : F/0
  3861 ;;		Unchanged: 0/0
  3862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3863 ;;      Params:         0       4       0       0       0       0       0
  3864 ;;      Locals:         0       2       0       0       0       0       0
  3865 ;;      Temps:          4       0       0       0       0       0       0
  3866 ;;      Totals:         4       6       0       0       0       0       0
  3867 ;;Total ram usage:       10 bytes
  3868 ;; Hardware stack levels used:    1
  3869 ;; Hardware stack levels required when called:    2
  3870 ;; This function calls:
  3871 ;;		Nothing
  3872 ;; This function is called by:
  3873 ;;		_doWork
  3874 ;;		_setEventData
  3875 ;;		_exp
  3876 ;;		_floor
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           	psect	text13
  3881  004EFA                     __ptext13:
  3882                           	opt stack 0
  3883  004EFA                     ___fltol:
  3884                           	opt stack 27
  3885                           
  3886                           ;incstack = 0
  3887                           ;incstack = 0
  3888  004EFA  0100               	movlb	0	; () banked
  3889  004EFC  3578               	rlcf	(___fltol@f1+2)& (0+255),w,b
  3890  004EFE  3579               	rlcf	(___fltol@f1+3)& (0+255),w,b
  3891  004F00  6F7B               	movwf	___fltol@exp1& (0+255),b
  3892  004F02  677B               	tstfsz	___fltol@exp1& (0+255),b
  3893  004F04  D005               	goto	l11743
  3894  004F06                     l11741:
  3895                           
  3896                           ; BSR set to: 0
  3897  004F06  6B76               	clrf	?___fltol& (0+255),b
  3898  004F08  6B77               	clrf	(?___fltol+1)& (0+255),b
  3899  004F0A  6B78               	clrf	(?___fltol+2)& (0+255),b
  3900  004F0C  6B79               	clrf	(?___fltol+3)& (0+255),b
  3901  004F0E  D043               	goto	l1671
  3902  004F10                     l11743:
  3903                           
  3904                           ; BSR set to: 0
  3905  004F10  C076  F042         	movff	___fltol@f1,??___fltol
  3906  004F14  C077  F043         	movff	___fltol@f1+1,??___fltol+1
  3907  004F18  C078  F044         	movff	___fltol@f1+2,??___fltol+2
  3908  004F1C  C079  F045         	movff	___fltol@f1+3,??___fltol+3
  3909  004F20  0E20               	movlw	32
  3910  004F22  D005               	goto	u10220
  3911  004F24                     u10225:
  3912  004F24  90D8               	bcf	status,0,c
  3913  004F26  3245               	rrcf	??___fltol+3,f,c
  3914  004F28  3244               	rrcf	??___fltol+2,f,c
  3915  004F2A  3243               	rrcf	??___fltol+1,f,c
  3916  004F2C  3242               	rrcf	??___fltol,f,c
  3917  004F2E                     u10220:
  3918  004F2E  2EE8               	decfsz	wreg,f,c
  3919  004F30  D7F9               	goto	u10225
  3920  004F32  5042               	movf	??___fltol,w,c
  3921  004F34  6F7A               	movwf	___fltol@sign1& (0+255),b
  3922                           
  3923                           ; BSR set to: 0
  3924  004F36  8F78               	bsf	(___fltol@f1+2)& (0+255),7,b
  3925                           
  3926                           ; BSR set to: 0
  3927  004F38  6B79               	clrf	(___fltol@f1+3)& (0+255),b
  3928                           
  3929                           ; BSR set to: 0
  3930  004F3A  0E96               	movlw	150
  3931  004F3C  5F7B               	subwf	___fltol@exp1& (0+255),f,b
  3932                           
  3933                           ; BSR set to: 0
  3934  004F3E  AF7B               	btfss	___fltol@exp1& (0+255),7,b
  3935  004F40  D00C               	goto	l11761
  3936                           
  3937                           ; BSR set to: 0
  3938  004F42  517B               	movf	___fltol@exp1& (0+255),w,b
  3939  004F44  0A80               	xorlw	128
  3940  004F46  0F97               	addlw	151
  3941  004F48  E3DE               	bnc	l11741
  3942  004F4A                     l11757:
  3943                           
  3944                           ; BSR set to: 0
  3945  004F4A  90D8               	bcf	status,0,c
  3946  004F4C  3379               	rrcf	(___fltol@f1+3)& (0+255),f,b
  3947  004F4E  3378               	rrcf	(___fltol@f1+2)& (0+255),f,b
  3948  004F50  3377               	rrcf	(___fltol@f1+1)& (0+255),f,b
  3949  004F52  3376               	rrcf	___fltol@f1& (0+255),f,b
  3950                           
  3951                           ; BSR set to: 0
  3952  004F54  3F7B               	incfsz	___fltol@exp1& (0+255),f,b
  3953  004F56  D7F9               	goto	l11757
  3954  004F58  D00C               	goto	l11769
  3955  004F5A                     l11761:
  3956                           
  3957                           ; BSR set to: 0
  3958  004F5A  0E1F               	movlw	31
  3959  004F5C  657B               	cpfsgt	___fltol@exp1& (0+255),b
  3960  004F5E  D007               	goto	l11767
  3961  004F60  D7D2               	goto	l11741
  3962  004F62                     l11765:
  3963                           
  3964                           ; BSR set to: 0
  3965  004F62  90D8               	bcf	status,0,c
  3966  004F64  3776               	rlcf	___fltol@f1& (0+255),f,b
  3967  004F66  3777               	rlcf	(___fltol@f1+1)& (0+255),f,b
  3968  004F68  3778               	rlcf	(___fltol@f1+2)& (0+255),f,b
  3969  004F6A  3779               	rlcf	(___fltol@f1+3)& (0+255),f,b
  3970  004F6C  077B               	decf	___fltol@exp1& (0+255),f,b
  3971  004F6E                     l11767:
  3972                           
  3973                           ; BSR set to: 0
  3974  004F6E  677B               	tstfsz	___fltol@exp1& (0+255),b
  3975  004F70  D7F8               	goto	l11765
  3976  004F72                     l11769:
  3977                           
  3978                           ; BSR set to: 0
  3979  004F72  517A               	movf	___fltol@sign1& (0+255),w,b
  3980  004F74  E008               	bz	l11773
  3981                           
  3982                           ; BSR set to: 0
  3983  004F76  1F79               	comf	(___fltol@f1+3)& (0+255),f,b
  3984  004F78  1F78               	comf	(___fltol@f1+2)& (0+255),f,b
  3985  004F7A  1F77               	comf	(___fltol@f1+1)& (0+255),f,b
  3986  004F7C  6D76               	negf	___fltol@f1& (0+255),b
  3987  004F7E  0E00               	movlw	0
  3988  004F80  2377               	addwfc	(___fltol@f1+1)& (0+255),f,b
  3989  004F82  2378               	addwfc	(___fltol@f1+2)& (0+255),f,b
  3990  004F84  2379               	addwfc	(___fltol@f1+3)& (0+255),f,b
  3991  004F86                     l11773:
  3992                           
  3993                           ; BSR set to: 0
  3994  004F86  C076  F076         	movff	___fltol@f1,?___fltol
  3995  004F8A  C077  F077         	movff	___fltol@f1+1,?___fltol+1
  3996  004F8E  C078  F078         	movff	___fltol@f1+2,?___fltol+2
  3997  004F92  C079  F079         	movff	___fltol@f1+3,?___fltol+3
  3998  004F96                     l1671:
  3999                           
  4000                           ; BSR set to: 0
  4001  004F96  0012               	return	
  4002  004F98                     __end_of___fltol:
  4003                           	opt stack 0
  4004                           tblptru	equ	0xFF8
  4005                           tblptrh	equ	0xFF7
  4006                           tblptrl	equ	0xFF6
  4007                           tablat	equ	0xFF5
  4008                           prodh	equ	0xFF4
  4009                           prodl	equ	0xFF3
  4010                           postinc0	equ	0xFEE
  4011                           wreg	equ	0xFE8
  4012                           postdec1	equ	0xFE5
  4013                           fsr1h	equ	0xFE2
  4014                           fsr1l	equ	0xFE1
  4015                           indf2	equ	0xFDF
  4016                           postinc2	equ	0xFDE
  4017                           postdec2	equ	0xFDD
  4018                           fsr2h	equ	0xFDA
  4019                           fsr2l	equ	0xFD9
  4020                           status	equ	0xFD8
  4021                           
  4022 ;; *************** function _frexp *****************
  4023 ;; Defined at:
  4024 ;;		line 255 in file "/opt/microchip/xc8/v1.21/sources/common/frexp.c"
  4025 ;; Parameters:    Size  Location     Type
  4026 ;;  value           4   13[COMRAM] long 
  4027 ;;  eptr            2   17[COMRAM] PTR int 
  4028 ;;		 -> log@exponent(2), floor@expon(2), 
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;		None
  4031 ;; Return value:  Size  Location     Type
  4032 ;;                  4   13[COMRAM] PTR int 
  4033 ;; Registers used:
  4034 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4035 ;; Tracked objects:
  4036 ;;		On entry : F/0
  4037 ;;		On exit  : F/0
  4038 ;;		Unchanged: F/0
  4039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4040 ;;      Params:         6       0       0       0       0       0       0
  4041 ;;      Locals:         0       0       0       0       0       0       0
  4042 ;;      Temps:          3       0       0       0       0       0       0
  4043 ;;      Totals:         9       0       0       0       0       0       0
  4044 ;;Total ram usage:        9 bytes
  4045 ;; Hardware stack levels used:    1
  4046 ;; Hardware stack levels required when called:    2
  4047 ;; This function calls:
  4048 ;;		Nothing
  4049 ;; This function is called by:
  4050 ;;		_floor
  4051 ;;		_log
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           	psect	text14
  4056  00502E                     __ptext14:
  4057                           	opt stack 0
  4058  00502E                     _frexp:
  4059                           	opt stack 26
  4060                           
  4061                           ; BSR set to: 0
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;incstack = 0
  4065                           ;incstack = 0
  4066  00502E  EE20  F00E         	lfsr	2,frexp@value
  4067  005032  50DE               	movf	postinc2,w,c
  4068  005034  10DE               	iorwf	postinc2,w,c
  4069  005036  10DE               	iorwf	postinc2,w,c
  4070  005038  10DE               	iorwf	postinc2,w,c
  4071  00503A  E10C               	bnz	l11727
  4072                           
  4073                           ; BSR set to: 0
  4074  00503C  C012  FFD9         	movff	frexp@eptr,fsr2l
  4075  005040  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4076  005044  0E00               	movlw	0
  4077  005046  6ADE               	clrf	postinc2,c
  4078  005048  6ADD               	clrf	postdec2,c
  4079                           
  4080                           ; BSR set to: 0
  4081  00504A  6A0E               	clrf	?_frexp,c
  4082  00504C  6A0F               	clrf	?_frexp+1,c
  4083  00504E  6A10               	clrf	?_frexp+2,c
  4084  005050  6A11               	clrf	?_frexp+3,c
  4085  005052  D02F               	goto	l1687
  4086  005054                     l11727:
  4087                           
  4088                           ; BSR set to: 0
  4089  005054  5011               	movf	frexp@value+3,w,c
  4090  005056  0B7F               	andlw	127
  4091  005058  6E14               	movwf	??_frexp& (0+255),c
  4092  00505A  90D8               	bcf	status,0,c
  4093  00505C  3414               	rlcf	??_frexp,w,c
  4094  00505E  6E15               	movwf	(??_frexp+1)& (0+255),c
  4095  005060  6A16               	clrf	(??_frexp+2)& (0+255),c
  4096  005062  3616               	rlcf	(??_frexp+2)& (0+255),f,c
  4097  005064  C012  FFD9         	movff	frexp@eptr,fsr2l
  4098  005068  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4099  00506C  C015  FFDE         	movff	??_frexp+1,postinc2
  4100  005070  C016  FFDD         	movff	??_frexp+2,postdec2
  4101  005074  3410               	rlcf	frexp@value+2,w,c
  4102  005076  36E8               	rlcf	wreg,f,c
  4103  005078  0B01               	andlw	1
  4104  00507A  C012  FFD9         	movff	frexp@eptr,fsr2l
  4105  00507E  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4106  005082  12DE               	iorwf	postinc2,f,c
  4107  005084  0E00               	movlw	0
  4108  005086  12DD               	iorwf	postdec2,f,c
  4109                           
  4110                           ; BSR set to: 0
  4111  005088  C012  FFD9         	movff	frexp@eptr,fsr2l
  4112  00508C  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4113  005090  0E82               	movlw	130
  4114  005092  26DE               	addwf	postinc2,f,c
  4115  005094  0EFF               	movlw	255
  4116  005096  22DD               	addwfc	postdec2,f,c
  4117                           
  4118                           ; BSR set to: 0
  4119  005098  5011               	movf	frexp@value+3,w,c
  4120  00509A  0B80               	andlw	-128
  4121  00509C  093F               	iorlw	63
  4122  00509E  6E11               	movwf	frexp@value+3,c
  4123                           
  4124                           ; BSR set to: 0
  4125  0050A0  9E10               	bcf	frexp@value+2,7,c
  4126                           
  4127                           ; BSR set to: 0
  4128  0050A2  C00E  F00E         	movff	frexp@value,?_frexp
  4129  0050A6  C00F  F00F         	movff	frexp@value+1,?_frexp+1
  4130  0050AA  C010  F010         	movff	frexp@value+2,?_frexp+2
  4131  0050AE  C011  F011         	movff	frexp@value+3,?_frexp+3
  4132  0050B2                     l1687:
  4133                           
  4134                           ; BSR set to: 0
  4135  0050B2  0012               	return	
  4136  0050B4                     __end_of_frexp:
  4137                           	opt stack 0
  4138                           tblptru	equ	0xFF8
  4139                           tblptrh	equ	0xFF7
  4140                           tblptrl	equ	0xFF6
  4141                           tablat	equ	0xFF5
  4142                           prodh	equ	0xFF4
  4143                           prodl	equ	0xFF3
  4144                           postinc0	equ	0xFEE
  4145                           wreg	equ	0xFE8
  4146                           postdec1	equ	0xFE5
  4147                           fsr1h	equ	0xFE2
  4148                           fsr1l	equ	0xFE1
  4149                           indf2	equ	0xFDF
  4150                           postinc2	equ	0xFDE
  4151                           postdec2	equ	0xFDD
  4152                           fsr2h	equ	0xFDA
  4153                           fsr2l	equ	0xFD9
  4154                           status	equ	0xFD8
  4155                           
  4156 ;; *************** function ___flge *****************
  4157 ;; Defined at:
  4158 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/common/flge.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;  ff1             4   13[COMRAM] PTR int 
  4161 ;;  ff2             4   17[COMRAM] PTR int 
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;		None
  4164 ;; Return value:  Size  Location     Type
  4165 ;;		None               void
  4166 ;; Registers used:
  4167 ;;		wreg, status,2, status,0
  4168 ;; Tracked objects:
  4169 ;;		On entry : 0/0
  4170 ;;		On exit  : 0/0
  4171 ;;		Unchanged: 0/0
  4172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4173 ;;      Params:         8       0       0       0       0       0       0
  4174 ;;      Locals:         0       0       0       0       0       0       0
  4175 ;;      Temps:          0       0       0       0       0       0       0
  4176 ;;      Totals:         8       0       0       0       0       0       0
  4177 ;;Total ram usage:        8 bytes
  4178 ;; Hardware stack levels used:    1
  4179 ;; Hardware stack levels required when called:    2
  4180 ;; This function calls:
  4181 ;;		Nothing
  4182 ;; This function is called by:
  4183 ;;		_exp
  4184 ;;		_floor
  4185 ;; This function uses a non-reentrant model
  4186 ;;
  4187                           
  4188                           	psect	text15
  4189  00541A                     __ptext15:
  4190                           	opt stack 0
  4191  00541A                     ___flge:
  4192                           	opt stack 26
  4193                           
  4194                           ; BSR set to: 0
  4195                           ;incstack = 0
  4196                           ;incstack = 0
  4197  00541A  AE11               	btfss	___flge@ff1+3,7,c
  4198  00541C  D009               	goto	l11701
  4199  00541E  6C0E               	negf	___flge@ff1,c
  4200  005420  1E0F               	comf	___flge@ff1+1,f,c
  4201  005422  B0D8               	btfsc	status,0,c
  4202  005424  2A0F               	incf	___flge@ff1+1,f,c
  4203  005426  1E10               	comf	___flge@ff1+2,f,c
  4204  005428  B0D8               	btfsc	status,0,c
  4205  00542A  2A10               	incf	___flge@ff1+2,f,c
  4206  00542C  0E80               	movlw	128
  4207  00542E  5611               	subfwb	___flge@ff1+3,f,c
  4208  005430                     l11701:
  4209  005430  AE15               	btfss	___flge@ff2+3,7,c
  4210  005432  D009               	goto	l1618
  4211  005434  6C12               	negf	___flge@ff2,c
  4212  005436  1E13               	comf	___flge@ff2+1,f,c
  4213  005438  B0D8               	btfsc	status,0,c
  4214  00543A  2A13               	incf	___flge@ff2+1,f,c
  4215  00543C  1E14               	comf	___flge@ff2+2,f,c
  4216  00543E  B0D8               	btfsc	status,0,c
  4217  005440  2A14               	incf	___flge@ff2+2,f,c
  4218  005442  0E80               	movlw	128
  4219  005444  5615               	subfwb	___flge@ff2+3,f,c
  4220  005446                     l1618:
  4221  005446  0E80               	movlw	128
  4222  005448  1A11               	xorwf	___flge@ff1+3,f,c
  4223  00544A  1A15               	xorwf	___flge@ff2+3,f,c
  4224  00544C  5012               	movf	___flge@ff2,w,c
  4225  00544E  5C0E               	subwf	___flge@ff1,w,c
  4226  005450  5013               	movf	___flge@ff2+1,w,c
  4227  005452  580F               	subwfb	___flge@ff1+1,w,c
  4228  005454  5014               	movf	___flge@ff2+2,w,c
  4229  005456  5810               	subwfb	___flge@ff1+2,w,c
  4230  005458  5015               	movf	___flge@ff2+3,w,c
  4231  00545A  5811               	subwfb	___flge@ff1+3,w,c
  4232  00545C  E202               	bc	l11707
  4233  00545E  90D8               	bcf	status,0,c
  4234  005460  D001               	goto	l1619
  4235  005462                     l11707:
  4236  005462  80D8               	bsf	status,0,c
  4237  005464                     l1619:
  4238  005464  0012               	return	
  4239  005466                     __end_of___flge:
  4240                           	opt stack 0
  4241                           tblptru	equ	0xFF8
  4242                           tblptrh	equ	0xFF7
  4243                           tblptrl	equ	0xFF6
  4244                           tablat	equ	0xFF5
  4245                           prodh	equ	0xFF4
  4246                           prodl	equ	0xFF3
  4247                           postinc0	equ	0xFEE
  4248                           wreg	equ	0xFE8
  4249                           postdec1	equ	0xFE5
  4250                           fsr1h	equ	0xFE2
  4251                           fsr1l	equ	0xFE1
  4252                           indf2	equ	0xFDF
  4253                           postinc2	equ	0xFDE
  4254                           postdec2	equ	0xFDD
  4255                           fsr2h	equ	0xFDA
  4256                           fsr2l	equ	0xFD9
  4257                           status	equ	0xFD8
  4258                           
  4259 ;; *************** function ___altofl *****************
  4260 ;; Defined at:
  4261 ;;		line 37 in file "/opt/microchip/xc8/v1.21/sources/common/altofl.c"
  4262 ;; Parameters:    Size  Location     Type
  4263 ;;  c               4   42[BANK0 ] long 
  4264 ;; Auto vars:     Size  Location     Type
  4265 ;;  sign            1   46[BANK0 ] unsigned char 
  4266 ;; Return value:  Size  Location     Type
  4267 ;;                  4   42[BANK0 ] unsigned char 
  4268 ;; Registers used:
  4269 ;;		wreg, status,2, status,0, cstack
  4270 ;; Tracked objects:
  4271 ;;		On entry : F/0
  4272 ;;		On exit  : 0/0
  4273 ;;		Unchanged: 0/0
  4274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4275 ;;      Params:         0       4       0       0       0       0       0
  4276 ;;      Locals:         0       1       0       0       0       0       0
  4277 ;;      Temps:          0       0       0       0       0       0       0
  4278 ;;      Totals:         0       5       0       0       0       0       0
  4279 ;;Total ram usage:        5 bytes
  4280 ;; Hardware stack levels used:    1
  4281 ;; Hardware stack levels required when called:    3
  4282 ;; This function calls:
  4283 ;;		___flpack
  4284 ;; This function is called by:
  4285 ;;		_doWork
  4286 ;;		_floor
  4287 ;; This function uses a non-reentrant model
  4288 ;;
  4289                           
  4290                           	psect	text16
  4291  005546                     __ptext16:
  4292                           	opt stack 0
  4293  005546                     ___altofl:
  4294                           	opt stack 26
  4295                           
  4296                           ; BSR set to: 0
  4297                           
  4298                           ;incstack = 0
  4299                           ;incstack = 0
  4300  005546  6B8E               	clrf	___altofl@sign& (0+255),b
  4301  005548  AF8D               	btfss	(___altofl@c+3)& (0+255),7,b
  4302  00554A  D00A               	goto	l11455
  4303                           
  4304                           ; BSR set to: 0
  4305  00554C  1F8D               	comf	(___altofl@c+3)& (0+255),f,b
  4306  00554E  1F8C               	comf	(___altofl@c+2)& (0+255),f,b
  4307  005550  1F8B               	comf	(___altofl@c+1)& (0+255),f,b
  4308  005552  6D8A               	negf	___altofl@c& (0+255),b
  4309  005554  0E00               	movlw	0
  4310  005556  238B               	addwfc	(___altofl@c+1)& (0+255),f,b
  4311  005558  238C               	addwfc	(___altofl@c+2)& (0+255),f,b
  4312  00555A  238D               	addwfc	(___altofl@c+3)& (0+255),f,b
  4313                           
  4314                           ; BSR set to: 0
  4315  00555C  0E01               	movlw	1
  4316  00555E  6F8E               	movwf	___altofl@sign& (0+255),b
  4317  005560                     l11455:
  4318                           
  4319                           ; BSR set to: 0
  4320  005560  C08A  F00E         	movff	___altofl@c,?___flpack
  4321  005564  C08B  F00F         	movff	___altofl@c+1,?___flpack+1
  4322  005568  C08C  F010         	movff	___altofl@c+2,?___flpack+2
  4323  00556C  C08D  F011         	movff	___altofl@c+3,?___flpack+3
  4324  005570  0E96               	movlw	150
  4325  005572  6E12               	movwf	?___flpack+4,c
  4326  005574  C08E  F013         	movff	___altofl@sign,?___flpack+5
  4327  005578  ECB7  F024         	call	___flpack	;wreg free
  4328  00557C  C011  F08D         	movff	?___flpack+3,?___altofl+3
  4329  005580  C010  F08C         	movff	?___flpack+2,?___altofl+2
  4330  005584  C00F  F08B         	movff	?___flpack+1,?___altofl+1
  4331  005588  C00E  F08A         	movff	?___flpack,?___altofl
  4332  00558C  0012               	return	
  4333  00558E                     __end_of___altofl:
  4334                           	opt stack 0
  4335                           tblptru	equ	0xFF8
  4336                           tblptrh	equ	0xFF7
  4337                           tblptrl	equ	0xFF6
  4338                           tablat	equ	0xFF5
  4339                           prodh	equ	0xFF4
  4340                           prodl	equ	0xFF3
  4341                           postinc0	equ	0xFEE
  4342                           wreg	equ	0xFE8
  4343                           postdec1	equ	0xFE5
  4344                           fsr1h	equ	0xFE2
  4345                           fsr1l	equ	0xFE1
  4346                           indf2	equ	0xFDF
  4347                           postinc2	equ	0xFDE
  4348                           postdec2	equ	0xFDD
  4349                           fsr2h	equ	0xFDA
  4350                           fsr2l	equ	0xFD9
  4351                           status	equ	0xFD8
  4352                           
  4353 ;; *************** function ___asflsub *****************
  4354 ;; Defined at:
  4355 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/pic18/asflsub.c"
  4356 ;; Parameters:    Size  Location     Type
  4357 ;;  f1p             2   30[BANK0 ] PTR 
  4358 ;;		 -> exp@x(4), doWork@temp(4), 
  4359 ;;  f2              4   32[BANK0 ] PTR 
  4360 ;; Auto vars:     Size  Location     Type
  4361 ;;		None
  4362 ;; Return value:  Size  Location     Type
  4363 ;;                  4   30[BANK0 ] PTR 
  4364 ;; Registers used:
  4365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4366 ;; Tracked objects:
  4367 ;;		On entry : 0/0
  4368 ;;		On exit  : F/0
  4369 ;;		Unchanged: 0/0
  4370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4371 ;;      Params:         0       6       0       0       0       0       0
  4372 ;;      Locals:         0       0       0       0       0       0       0
  4373 ;;      Temps:          0       0       0       0       0       0       0
  4374 ;;      Totals:         0       6       0       0       0       0       0
  4375 ;;Total ram usage:        6 bytes
  4376 ;; Hardware stack levels used:    1
  4377 ;; Hardware stack levels required when called:    5
  4378 ;; This function calls:
  4379 ;;		___flsub
  4380 ;; This function is called by:
  4381 ;;		_doWork
  4382 ;;		_exp
  4383 ;; This function uses a non-reentrant model
  4384 ;;
  4385                           
  4386                           	psect	text17
  4387  0053CC                     __ptext17:
  4388                           	opt stack 0
  4389  0053CC                     ___asflsub:
  4390                           	opt stack 24
  4391                           
  4392                           ;	Return value of ___asflsub is never used
  4393                           
  4394                           ;incstack = 0
  4395                           ;incstack = 0
  4396  0053CC  C07E  FFD9         	movff	___asflsub@f1p,fsr2l
  4397  0053D0  C07F  FFDA         	movff	___asflsub@f1p+1,fsr2h
  4398  0053D4  0100               	movlb	0	; () banked
  4399  0053D6  CFDE F076          	movff	postinc2,?___flsub
  4400  0053DA  CFDE F077          	movff	postinc2,?___flsub+1
  4401  0053DE  CFDE F078          	movff	postinc2,?___flsub+2
  4402  0053E2  CFDE F079          	movff	postinc2,?___flsub+3
  4403  0053E6  C080  F07A         	movff	___asflsub@f2,?___flsub+4
  4404  0053EA  C081  F07B         	movff	___asflsub@f2+1,?___flsub+5
  4405  0053EE  C082  F07C         	movff	___asflsub@f2+2,?___flsub+6
  4406  0053F2  C083  F07D         	movff	___asflsub@f2+3,?___flsub+7
  4407  0053F6  EC72  F02B         	call	___flsub	;wreg free
  4408  0053FA  C07E  FFD9         	movff	___asflsub@f1p,fsr2l
  4409  0053FE  C07F  FFDA         	movff	___asflsub@f1p+1,fsr2h
  4410  005402  0100               	movlb	0	; () banked
  4411  005404  C076  FFDE         	movff	?___flsub,postinc2
  4412  005408  C077  FFDE         	movff	?___flsub+1,postinc2
  4413  00540C  C078  FFDE         	movff	?___flsub+2,postinc2
  4414  005410  C079  FFDD         	movff	?___flsub+3,postdec2
  4415  005414  06D9               	decf	fsr2l,f,c
  4416  005416  06D9               	decf	fsr2l,f,c
  4417                           
  4418                           ; BSR set to: 0
  4419  005418  0012               	return	
  4420  00541A                     __end_of___asflsub:
  4421                           	opt stack 0
  4422                           tblptru	equ	0xFF8
  4423                           tblptrh	equ	0xFF7
  4424                           tblptrl	equ	0xFF6
  4425                           tablat	equ	0xFF5
  4426                           prodh	equ	0xFF4
  4427                           prodl	equ	0xFF3
  4428                           postinc0	equ	0xFEE
  4429                           wreg	equ	0xFE8
  4430                           postdec1	equ	0xFE5
  4431                           fsr1h	equ	0xFE2
  4432                           fsr1l	equ	0xFE1
  4433                           indf2	equ	0xFDF
  4434                           postinc2	equ	0xFDE
  4435                           postdec2	equ	0xFDD
  4436                           fsr2h	equ	0xFDA
  4437                           fsr2l	equ	0xFD9
  4438                           status	equ	0xFD8
  4439                           
  4440 ;; *************** function ___flsub *****************
  4441 ;; Defined at:
  4442 ;;		line 22 in file "/opt/microchip/xc8/v1.21/sources/common/flsub.c"
  4443 ;; Parameters:    Size  Location     Type
  4444 ;;  f1              4   22[BANK0 ] PTR 
  4445 ;;  f2              4   26[BANK0 ] PTR 
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;		None
  4448 ;; Return value:  Size  Location     Type
  4449 ;;                  4   22[BANK0 ] PTR 
  4450 ;; Registers used:
  4451 ;;		wreg, status,2, status,0, cstack
  4452 ;; Tracked objects:
  4453 ;;		On entry : 0/0
  4454 ;;		On exit  : 0/0
  4455 ;;		Unchanged: 0/0
  4456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4457 ;;      Params:         0       8       0       0       0       0       0
  4458 ;;      Locals:         0       0       0       0       0       0       0
  4459 ;;      Temps:          0       0       0       0       0       0       0
  4460 ;;      Totals:         0       8       0       0       0       0       0
  4461 ;;Total ram usage:        8 bytes
  4462 ;; Hardware stack levels used:    1
  4463 ;; Hardware stack levels required when called:    4
  4464 ;; This function calls:
  4465 ;;		___fladd
  4466 ;; This function is called by:
  4467 ;;		_doWork
  4468 ;;		___asflsub
  4469 ;; This function uses a non-reentrant model
  4470 ;;
  4471                           
  4472                           	psect	text18
  4473  0056E4                     __ptext18:
  4474                           	opt stack 0
  4475  0056E4                     ___flsub:
  4476                           	opt stack 25
  4477                           
  4478                           ; BSR set to: 0
  4479                           ;incstack = 0
  4480                           ;incstack = 0
  4481  0056E4  0100               	movlb	0	; () banked
  4482  0056E6  0E80               	movlw	128
  4483  0056E8  1B7D               	xorwf	(___flsub@f2+3)& (0+255),f,b
  4484                           
  4485                           ; BSR set to: 0
  4486  0056EA  C076  F01D         	movff	___flsub@f1,?___fladd
  4487  0056EE  C077  F01E         	movff	___flsub@f1+1,?___fladd+1
  4488  0056F2  C078  F01F         	movff	___flsub@f1+2,?___fladd+2
  4489  0056F6  C079  F020         	movff	___flsub@f1+3,?___fladd+3
  4490  0056FA  C07A  F021         	movff	___flsub@f2,?___fladd+4
  4491  0056FE  C07B  F022         	movff	___flsub@f2+1,?___fladd+5
  4492  005702  C07C  F023         	movff	___flsub@f2+2,?___fladd+6
  4493  005706  C07D  F024         	movff	___flsub@f2+3,?___fladd+7
  4494  00570A  EC6B  F020         	call	___fladd	;wreg free
  4495  00570E  C020  F079         	movff	?___fladd+3,?___flsub+3
  4496  005712  C01F  F078         	movff	?___fladd+2,?___flsub+2
  4497  005716  C01E  F077         	movff	?___fladd+1,?___flsub+1
  4498  00571A  C01D  F076         	movff	?___fladd,?___flsub
  4499  00571E  0012               	return	
  4500  005720                     __end_of___flsub:
  4501                           	opt stack 0
  4502                           tblptru	equ	0xFF8
  4503                           tblptrh	equ	0xFF7
  4504                           tblptrl	equ	0xFF6
  4505                           tablat	equ	0xFF5
  4506                           prodh	equ	0xFF4
  4507                           prodl	equ	0xFF3
  4508                           postinc0	equ	0xFEE
  4509                           wreg	equ	0xFE8
  4510                           postdec1	equ	0xFE5
  4511                           fsr1h	equ	0xFE2
  4512                           fsr1l	equ	0xFE1
  4513                           indf2	equ	0xFDF
  4514                           postinc2	equ	0xFDE
  4515                           postdec2	equ	0xFDD
  4516                           fsr2h	equ	0xFDA
  4517                           fsr2l	equ	0xFD9
  4518                           status	equ	0xFD8
  4519                           
  4520 ;; *************** function ___asflmul *****************
  4521 ;; Defined at:
  4522 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/pic18/asflmul.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;  mp              1    wreg     PTR 
  4525 ;;		 -> exp@x(4), 
  4526 ;;  multiplicand    4   22[BANK0 ] PTR 
  4527 ;; Auto vars:     Size  Location     Type
  4528 ;;  mp              1   65[COMRAM] PTR 
  4529 ;;		 -> exp@x(4), 
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  4   22[BANK0 ] PTR 
  4532 ;; Registers used:
  4533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4534 ;; Tracked objects:
  4535 ;;		On entry : F/0
  4536 ;;		On exit  : F/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4539 ;;      Params:         0       4       0       0       0       0       0
  4540 ;;      Locals:         1       0       0       0       0       0       0
  4541 ;;      Temps:          0       0       0       0       0       0       0
  4542 ;;      Totals:         1       4       0       0       0       0       0
  4543 ;;Total ram usage:        5 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; Hardware stack levels required when called:    4
  4546 ;; This function calls:
  4547 ;;		___flmul
  4548 ;; This function is called by:
  4549 ;;		_exp
  4550 ;; This function uses a non-reentrant model
  4551 ;;
  4552                           
  4553                           	psect	text19
  4554  005466                     __ptext19:
  4555                           	opt stack 0
  4556  005466                     ___asflmul:
  4557                           	opt stack 24
  4558                           
  4559                           ;incstack = 0
  4560                           ;incstack = 0
  4561                           ;___asflmul@mp stored from wreg
  4562  005466  CFE8 F042          	movff	wreg,___asflmul@mp
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;	Return value of ___asflmul is never used
  4566  00546A  5042               	movf	___asflmul@mp,w,c
  4567  00546C  6ED9               	movwf	fsr2l,c
  4568  00546E  6ADA               	clrf	fsr2h,c
  4569  005470  CFDE F060          	movff	postinc2,?___flmul
  4570  005474  CFDE F061          	movff	postinc2,?___flmul+1
  4571  005478  CFDE F062          	movff	postinc2,?___flmul+2
  4572  00547C  CFDE F063          	movff	postinc2,?___flmul+3
  4573  005480  C076  F064         	movff	___asflmul@multiplicand,?___flmul+4
  4574  005484  C077  F065         	movff	___asflmul@multiplicand+1,?___flmul+5
  4575  005488  C078  F066         	movff	___asflmul@multiplicand+2,?___flmul+6
  4576  00548C  C079  F067         	movff	___asflmul@multiplicand+3,?___flmul+7
  4577  005490  ECEC  F023         	call	___flmul	;wreg free
  4578  005494  5042               	movf	___asflmul@mp,w,c
  4579  005496  6ED9               	movwf	fsr2l,c
  4580  005498  6ADA               	clrf	fsr2h,c
  4581  00549A  0100               	movlb	0	; () banked
  4582  00549C  C060  FFDE         	movff	?___flmul,postinc2
  4583  0054A0  C061  FFDE         	movff	?___flmul+1,postinc2
  4584  0054A4  C062  FFDE         	movff	?___flmul+2,postinc2
  4585  0054A8  C063  FFDD         	movff	?___flmul+3,postdec2
  4586  0054AC  06D9               	decf	fsr2l,f,c
  4587  0054AE  06D9               	decf	fsr2l,f,c
  4588                           
  4589                           ; BSR set to: 0
  4590  0054B0  0012               	return	
  4591  0054B2                     __end_of___asflmul:
  4592                           	opt stack 0
  4593                           tblptru	equ	0xFF8
  4594                           tblptrh	equ	0xFF7
  4595                           tblptrl	equ	0xFF6
  4596                           tablat	equ	0xFF5
  4597                           prodh	equ	0xFF4
  4598                           prodl	equ	0xFF3
  4599                           postinc0	equ	0xFEE
  4600                           wreg	equ	0xFE8
  4601                           postdec1	equ	0xFE5
  4602                           fsr1h	equ	0xFE2
  4603                           fsr1l	equ	0xFE1
  4604                           indf2	equ	0xFDF
  4605                           postinc2	equ	0xFDE
  4606                           postdec2	equ	0xFDD
  4607                           fsr2h	equ	0xFDA
  4608                           fsr2l	equ	0xFD9
  4609                           status	equ	0xFD8
  4610                           
  4611 ;; *************** function ___fldiv *****************
  4612 ;; Defined at:
  4613 ;;		line 50 in file "/opt/microchip/xc8/v1.21/sources/common/fldiv.c"
  4614 ;; Parameters:    Size  Location     Type
  4615 ;;  f1              4   43[COMRAM] PTR 
  4616 ;;  f2              4   47[COMRAM] PTR 
  4617 ;; Auto vars:     Size  Location     Type
  4618 ;;  f3              4   58[COMRAM] PTR 
  4619 ;;  sign            1   64[COMRAM] unsigned char 
  4620 ;;  exp             1   63[COMRAM] unsigned char 
  4621 ;;  cntr            1   62[COMRAM] unsigned char 
  4622 ;; Return value:  Size  Location     Type
  4623 ;;                  4   43[COMRAM] unsigned char 
  4624 ;; Registers used:
  4625 ;;		wreg, status,2, status,0, cstack
  4626 ;; Tracked objects:
  4627 ;;		On entry : 0/1
  4628 ;;		On exit  : 0/0
  4629 ;;		Unchanged: 0/0
  4630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4631 ;;      Params:         8       0       0       0       0       0       0
  4632 ;;      Locals:        14       0       0       0       0       0       0
  4633 ;;      Temps:          0       0       0       0       0       0       0
  4634 ;;      Totals:        22       0       0       0       0       0       0
  4635 ;;Total ram usage:       22 bytes
  4636 ;; Hardware stack levels used:    1
  4637 ;; Hardware stack levels required when called:    3
  4638 ;; This function calls:
  4639 ;;		___flpack
  4640 ;; This function is called by:
  4641 ;;		_doWork
  4642 ;;		_Celsius2Fahrenheit
  4643 ;;		___asfldiv
  4644 ;;		_exp
  4645 ;; This function uses a non-reentrant model
  4646 ;;
  4647                           
  4648                           	psect	text20
  4649  004D0E                     __ptext20:
  4650                           	opt stack 0
  4651  004D0E                     ___fldiv:
  4652                           	opt stack 26
  4653                           
  4654                           ; BSR set to: 0
  4655                           ;incstack = 0
  4656                           ;incstack = 0
  4657  004D0E  342E               	rlcf	(___fldiv@f1+2)& (0+255),w,c
  4658  004D10  342F               	rlcf	(___fldiv@f1+3)& (0+255),w,c
  4659  004D12  6E40               	movwf	___fldiv@exp,c
  4660  004D14  6640               	tstfsz	___fldiv@exp& (0+255),c
  4661  004D16  D001               	goto	l11539
  4662  004D18  D005               	goto	u10000
  4663  004D1A                     l11539:
  4664  004D1A  3432               	rlcf	(___fldiv@f2+2)& (0+255),w,c
  4665  004D1C  3433               	rlcf	(___fldiv@f2+3)& (0+255),w,c
  4666  004D1E  6E41               	movwf	___fldiv@sign,c
  4667  004D20  6641               	tstfsz	___fldiv@sign& (0+255),c
  4668  004D22  D005               	goto	l11543
  4669  004D24                     u10000:
  4670  004D24  6A2C               	clrf	?___fldiv,c
  4671  004D26  6A2D               	clrf	?___fldiv+1,c
  4672  004D28  6A2E               	clrf	?___fldiv+2,c
  4673  004D2A  6A2F               	clrf	?___fldiv+3,c
  4674  004D2C  D043               	goto	l1610
  4675  004D2E                     l11543:
  4676  004D2E  5041               	movf	___fldiv@sign,w,c
  4677  004D30  0F89               	addlw	137
  4678  004D32  5E40               	subwf	___fldiv@exp,f,c
  4679  004D34  C02F  F041         	movff	___fldiv@f1+3,___fldiv@sign
  4680  004D38  5033               	movf	(___fldiv@f2+3)& (0+255),w,c
  4681  004D3A  1A41               	xorwf	___fldiv@sign,f,c
  4682  004D3C  0E80               	movlw	128
  4683  004D3E  1641               	andwf	___fldiv@sign,f,c
  4684  004D40  8E2E               	bsf	___fldiv@f1+2,7,c
  4685  004D42  6A2F               	clrf	___fldiv@f1+3,c
  4686  004D44  8E32               	bsf	___fldiv@f2+2,7,c
  4687  004D46  6A33               	clrf	___fldiv@f2+3,c
  4688  004D48  0E20               	movlw	32
  4689  004D4A  6E3F               	movwf	___fldiv@cntr,c
  4690  004D4C                     l11555:
  4691  004D4C  90D8               	bcf	status,0,c
  4692  004D4E  363B               	rlcf	___fldiv@f3,f,c
  4693  004D50  363C               	rlcf	___fldiv@f3+1,f,c
  4694  004D52  363D               	rlcf	___fldiv@f3+2,f,c
  4695  004D54  363E               	rlcf	___fldiv@f3+3,f,c
  4696  004D56  5030               	movf	___fldiv@f2,w,c
  4697  004D58  5C2C               	subwf	___fldiv@f1,w,c
  4698  004D5A  5031               	movf	___fldiv@f2+1,w,c
  4699  004D5C  582D               	subwfb	___fldiv@f1+1,w,c
  4700  004D5E  5032               	movf	___fldiv@f2+2,w,c
  4701  004D60  582E               	subwfb	___fldiv@f1+2,w,c
  4702  004D62  5033               	movf	___fldiv@f2+3,w,c
  4703  004D64  582F               	subwfb	___fldiv@f1+3,w,c
  4704  004D66  E309               	bnc	l11563
  4705  004D68  5030               	movf	___fldiv@f2,w,c
  4706  004D6A  5E2C               	subwf	___fldiv@f1,f,c
  4707  004D6C  5031               	movf	___fldiv@f2+1,w,c
  4708  004D6E  5A2D               	subwfb	___fldiv@f1+1,f,c
  4709  004D70  5032               	movf	___fldiv@f2+2,w,c
  4710  004D72  5A2E               	subwfb	___fldiv@f1+2,f,c
  4711  004D74  5033               	movf	___fldiv@f2+3,w,c
  4712  004D76  5A2F               	subwfb	___fldiv@f1+3,f,c
  4713  004D78  803B               	bsf	___fldiv@f3,0,c
  4714  004D7A                     l11563:
  4715  004D7A  90D8               	bcf	status,0,c
  4716  004D7C  362C               	rlcf	___fldiv@f1,f,c
  4717  004D7E  362D               	rlcf	___fldiv@f1+1,f,c
  4718  004D80  362E               	rlcf	___fldiv@f1+2,f,c
  4719  004D82  362F               	rlcf	___fldiv@f1+3,f,c
  4720  004D84  2E3F               	decfsz	___fldiv@cntr,f,c
  4721  004D86  D7E2               	goto	l11555
  4722  004D88  C03B  F00E         	movff	___fldiv@f3,?___flpack
  4723  004D8C  C03C  F00F         	movff	___fldiv@f3+1,?___flpack+1
  4724  004D90  C03D  F010         	movff	___fldiv@f3+2,?___flpack+2
  4725  004D94  C03E  F011         	movff	___fldiv@f3+3,?___flpack+3
  4726  004D98  C040  F012         	movff	___fldiv@exp,?___flpack+4
  4727  004D9C  C041  F013         	movff	___fldiv@sign,?___flpack+5
  4728  004DA0  ECB7  F024         	call	___flpack	;wreg free
  4729  004DA4  C011  F02F         	movff	?___flpack+3,?___fldiv+3
  4730  004DA8  C010  F02E         	movff	?___flpack+2,?___fldiv+2
  4731  004DAC  C00F  F02D         	movff	?___flpack+1,?___fldiv+1
  4732  004DB0  C00E  F02C         	movff	?___flpack,?___fldiv
  4733  004DB4                     l1610:
  4734  004DB4  0012               	return	
  4735  004DB6                     __end_of___fldiv:
  4736                           	opt stack 0
  4737                           tblptru	equ	0xFF8
  4738                           tblptrh	equ	0xFF7
  4739                           tblptrl	equ	0xFF6
  4740                           tablat	equ	0xFF5
  4741                           prodh	equ	0xFF4
  4742                           prodl	equ	0xFF3
  4743                           postinc0	equ	0xFEE
  4744                           wreg	equ	0xFE8
  4745                           postdec1	equ	0xFE5
  4746                           fsr1h	equ	0xFE2
  4747                           fsr1l	equ	0xFE1
  4748                           indf2	equ	0xFDF
  4749                           postinc2	equ	0xFDE
  4750                           postdec2	equ	0xFDD
  4751                           fsr2h	equ	0xFDA
  4752                           fsr2l	equ	0xFD9
  4753                           status	equ	0xFD8
  4754                           
  4755 ;; *************** function _vscp_doOneSecondWork *****************
  4756 ;; Defined at:
  4757 ;;		line 513 in file "../../vscp_firmware/common/vscp_firmware.c"
  4758 ;; Parameters:    Size  Location     Type
  4759 ;;		None
  4760 ;; Auto vars:     Size  Location     Type
  4761 ;;		None
  4762 ;; Return value:  Size  Location     Type
  4763 ;;		None               void
  4764 ;; Registers used:
  4765 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4766 ;; Tracked objects:
  4767 ;;		On entry : F/0
  4768 ;;		On exit  : F/0
  4769 ;;		Unchanged: 0/0
  4770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4771 ;;      Params:         0       0       0       0       0       0       0
  4772 ;;      Locals:         0       0       0       0       0       0       0
  4773 ;;      Temps:          0       1       0       0       0       0       0
  4774 ;;      Totals:         0       1       0       0       0       0       0
  4775 ;;Total ram usage:        1 bytes
  4776 ;; Hardware stack levels used:    1
  4777 ;; Hardware stack levels required when called:    8
  4778 ;; This function calls:
  4779 ;;		_vscp_getZone
  4780 ;;		_vscp_getSubzone
  4781 ;;		_vscp_sendHeartBeat
  4782 ;; This function is called by:
  4783 ;;		_main
  4784 ;; This function uses a non-reentrant model
  4785 ;;
  4786                           
  4787                           	psect	text21
  4788  005378                     __ptext21:
  4789                           	opt stack 0
  4790  005378                     _vscp_doOneSecondWork:
  4791                           	opt stack 22
  4792                           
  4793                           ; BSR set to: 0
  4794                           ;vscp_firmware.c: 515: ++vscp_second;
  4795                           
  4796                           ;incstack = 0
  4797                           ;incstack = 0
  4798  005378  2A51               	incf	_vscp_second,f,c
  4799                           
  4800                           ; BSR set to: 0
  4801                           ;vscp_firmware.c: 517: if (vscp_second > 59) {
  4802  00537A  0E3B               	movlw	59
  4803  00537C  6451               	cpfsgt	_vscp_second,c
  4804  00537E  D00E               	goto	l10313
  4805                           
  4806                           ; BSR set to: 0
  4807                           ;vscp_firmware.c: 518: vscp_second = 0;
  4808  005380  6A51               	clrf	_vscp_second,c
  4809                           
  4810                           ; BSR set to: 0
  4811                           ;vscp_firmware.c: 519: vscp_minute++;
  4812  005382  0101               	movlb	1	; () banked
  4813  005384  2B21               	incf	_vscp_minute& (0+255),f,b
  4814                           
  4815                           ; BSR set to: 1
  4816                           ;vscp_firmware.c: 522: if (0x03 == vscp_node_state) {
  4817  005386  0100               	movlb	0	; () banked
  4818  005388  51BC               	movf	_vscp_node_state& (0+255),w,b
  4819  00538A  0A03               	xorlw	3
  4820  00538C  E107               	bnz	l10313
  4821                           
  4822                           ; BSR set to: 0
  4823                           ;vscp_firmware.c: 523: vscp_sendHeartBeat(vscp_getZone(),
  4824                           ;vscp_firmware.c: 524: vscp_getSubzone());
  4825  00538E  ECFB  F02D         	call	_vscp_getSubzone	;wreg free
  4826  005392  6E44               	movwf	?_vscp_sendHeartBeat,c
  4827  005394  EC00  F02E         	call	_vscp_getZone	;wreg free
  4828  005398  ECB7  F02C         	call	_vscp_sendHeartBeat
  4829  00539C                     l10313:
  4830                           
  4831                           ;vscp_firmware.c: 525: }
  4832                           ;vscp_firmware.c: 526: }
  4833                           ;vscp_firmware.c: 528: if (vscp_minute > 59) {
  4834  00539C  0E3B               	movlw	59
  4835  00539E  0101               	movlb	1	; () banked
  4836  0053A0  6521               	cpfsgt	_vscp_minute& (0+255),b
  4837  0053A2  D002               	goto	l10319
  4838                           
  4839                           ; BSR set to: 1
  4840                           ;vscp_firmware.c: 529: vscp_minute = 0;
  4841  0053A4  6B21               	clrf	_vscp_minute& (0+255),b
  4842                           
  4843                           ; BSR set to: 1
  4844                           ;vscp_firmware.c: 530: vscp_hour++;
  4845  0053A6  2B20               	incf	_vscp_hour& (0+255),f,b
  4846  0053A8                     l10319:
  4847                           
  4848                           ; BSR set to: 1
  4849                           ;vscp_firmware.c: 531: }
  4850                           ;vscp_firmware.c: 533: if (vscp_hour > 23) vscp_hour = 0;
  4851  0053A8  0E17               	movlw	23
  4852  0053AA  6520               	cpfsgt	_vscp_hour& (0+255),b
  4853  0053AC  D001               	goto	l10323
  4854                           
  4855                           ; BSR set to: 1
  4856  0053AE  6B20               	clrf	_vscp_hour& (0+255),b
  4857  0053B0                     l10323:
  4858                           
  4859                           ; BSR set to: 1
  4860                           ;vscp_firmware.c: 537: if (0x03 == vscp_node_state) {
  4861  0053B0  0100               	movlb	0	; () banked
  4862  0053B2  51BC               	movf	_vscp_node_state& (0+255),w,b
  4863  0053B4  0A03               	xorlw	3
  4864  0053B6  E109               	bnz	l1104
  4865                           
  4866                           ; BSR set to: 0
  4867                           ;vscp_firmware.c: 538: vscp_guid_reset++;
  4868  0053B8  2A4C               	incf	_vscp_guid_reset,f,c
  4869                           
  4870                           ; BSR set to: 0
  4871                           ;vscp_firmware.c: 539: if ((vscp_guid_reset & 0x0f) >= 2) {
  4872  0053BA  C04C  F07F         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  4873  0053BE  0E0F               	movlw	15
  4874  0053C0  177F               	andwf	??_vscp_doOneSecondWork& (0+255),f,b
  4875  0053C2  0E02               	movlw	2
  4876  0053C4  5D7F               	subwf	??_vscp_doOneSecondWork& (0+255),w,b
  4877  0053C6  B0D8               	btfsc	status,0,c
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;vscp_firmware.c: 540: vscp_guid_reset = 0;
  4881  0053C8  6A4C               	clrf	_vscp_guid_reset,c
  4882  0053CA                     l1104:
  4883                           
  4884                           ; BSR set to: 0
  4885  0053CA  0012               	return	
  4886  0053CC                     __end_of_vscp_doOneSecondWork:
  4887                           	opt stack 0
  4888                           tblptru	equ	0xFF8
  4889                           tblptrh	equ	0xFF7
  4890                           tblptrl	equ	0xFF6
  4891                           tablat	equ	0xFF5
  4892                           prodh	equ	0xFF4
  4893                           prodl	equ	0xFF3
  4894                           postinc0	equ	0xFEE
  4895                           wreg	equ	0xFE8
  4896                           postdec1	equ	0xFE5
  4897                           fsr1h	equ	0xFE2
  4898                           fsr1l	equ	0xFE1
  4899                           indf2	equ	0xFDF
  4900                           postinc2	equ	0xFDE
  4901                           postdec2	equ	0xFDD
  4902                           fsr2h	equ	0xFDA
  4903                           fsr2l	equ	0xFD9
  4904                           status	equ	0xFD8
  4905                           
  4906 ;; *************** function _vscp_sendHeartBeat *****************
  4907 ;; Defined at:
  4908 ;;		line 382 in file "../../vscp_firmware/common/vscp_firmware.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;  zone            1    wreg     unsigned char 
  4911 ;;  subzone         1   67[COMRAM] unsigned char 
  4912 ;; Auto vars:     Size  Location     Type
  4913 ;;  zone            1   68[COMRAM] unsigned char 
  4914 ;; Return value:  Size  Location     Type
  4915 ;;		None               void
  4916 ;; Registers used:
  4917 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4918 ;; Tracked objects:
  4919 ;;		On entry : 0/0
  4920 ;;		On exit  : 0/0
  4921 ;;		Unchanged: 0/0
  4922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4923 ;;      Params:         1       0       0       0       0       0       0
  4924 ;;      Locals:         1       0       0       0       0       0       0
  4925 ;;      Temps:          0       0       0       0       0       0       0
  4926 ;;      Totals:         2       0       0       0       0       0       0
  4927 ;;Total ram usage:        2 bytes
  4928 ;; Hardware stack levels used:    1
  4929 ;; Hardware stack levels required when called:    7
  4930 ;; This function calls:
  4931 ;;		_vscp_sendEvent
  4932 ;; This function is called by:
  4933 ;;		_vscp_doOneSecondWork
  4934 ;; This function uses a non-reentrant model
  4935 ;;
  4936                           
  4937                           	psect	text22
  4938  00596E                     __ptext22:
  4939                           	opt stack 0
  4940  00596E                     _vscp_sendHeartBeat:
  4941                           	opt stack 22
  4942                           
  4943                           ; BSR set to: 0
  4944                           ;incstack = 0
  4945                           ;incstack = 0
  4946                           ;vscp_sendHeartBeat@zone stored from wreg
  4947  00596E  CFE8 F045          	movff	wreg,vscp_sendHeartBeat@zone
  4948                           
  4949                           ;vscp_firmware.c: 383: vscp_omsg.flags = 0x80 + 3;
  4950  005972  0E83               	movlw	131
  4951  005974  0100               	movlb	0	; () banked
  4952  005976  6FCB               	movwf	_vscp_omsg& (0+255),b
  4953                           
  4954                           ;vscp_firmware.c: 384: vscp_omsg.priority = 0x07;
  4955  005978  0E07               	movlw	7
  4956  00597A  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  4957                           
  4958                           ;vscp_firmware.c: 385: vscp_omsg.vscp_class = 20;
  4959  00597C  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  4960  00597E  0E14               	movlw	20
  4961  005980  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  4962                           
  4963                           ;vscp_firmware.c: 386: vscp_omsg.vscp_type = 9;
  4964  005982  0E09               	movlw	9
  4965  005984  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;vscp_firmware.c: 387: vscp_omsg.data[ 0 ] = 0;
  4969  005986  6BD1               	clrf	(_vscp_omsg+6)& (0+255),b
  4970                           
  4971                           ; BSR set to: 0
  4972                           ;vscp_firmware.c: 388: vscp_omsg.data[ 1 ] = zone;
  4973  005988  C045  F0D2         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+7
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;vscp_firmware.c: 389: vscp_omsg.data[ 2 ] = subzone;
  4977  00598C  C044  F0D3         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+8
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;vscp_firmware.c: 392: vscp_sendEvent();
  4981  005990  EF37  F02C         	goto	_vscp_sendEvent	;wreg free
  4982  005994                     __end_of_vscp_sendHeartBeat:
  4983                           	opt stack 0
  4984                           tblptru	equ	0xFF8
  4985                           tblptrh	equ	0xFF7
  4986                           tblptrl	equ	0xFF6
  4987                           tablat	equ	0xFF5
  4988                           prodh	equ	0xFF4
  4989                           prodl	equ	0xFF3
  4990                           postinc0	equ	0xFEE
  4991                           wreg	equ	0xFE8
  4992                           postdec1	equ	0xFE5
  4993                           fsr1h	equ	0xFE2
  4994                           fsr1l	equ	0xFE1
  4995                           indf2	equ	0xFDF
  4996                           postinc2	equ	0xFDE
  4997                           postdec2	equ	0xFDD
  4998                           fsr2h	equ	0xFDA
  4999                           fsr2l	equ	0xFD9
  5000                           status	equ	0xFD8
  5001                           
  5002 ;; *************** function _vscp_getSubzone *****************
  5003 ;; Defined at:
  5004 ;;		line 2743 in file "../main.c"
  5005 ;; Parameters:    Size  Location     Type
  5006 ;;		None
  5007 ;; Auto vars:     Size  Location     Type
  5008 ;;		None
  5009 ;; Return value:  Size  Location     Type
  5010 ;;                  1    wreg      unsigned char 
  5011 ;; Registers used:
  5012 ;;		wreg, status,2, cstack
  5013 ;; Tracked objects:
  5014 ;;		On entry : F/0
  5015 ;;		On exit  : 0/0
  5016 ;;		Unchanged: 0/0
  5017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5018 ;;      Params:         0       0       0       0       0       0       0
  5019 ;;      Locals:         0       0       0       0       0       0       0
  5020 ;;      Temps:          0       0       0       0       0       0       0
  5021 ;;      Totals:         0       0       0       0       0       0       0
  5022 ;;Total ram usage:        0 bytes
  5023 ;; Hardware stack levels used:    1
  5024 ;; Hardware stack levels required when called:    3
  5025 ;; This function calls:
  5026 ;;		_readEEPROM
  5027 ;; This function is called by:
  5028 ;;		_vscp_doOneSecondWork
  5029 ;; This function uses a non-reentrant model
  5030 ;;
  5031                           
  5032                           	psect	text23
  5033  005BF6                     __ptext23:
  5034                           	opt stack 0
  5035  005BF6                     _vscp_getSubzone:
  5036                           	opt stack 26
  5037                           
  5038                           ; BSR set to: 0
  5039                           ;main.c: 2744: return readEEPROM(0x42);
  5040                           
  5041                           ;incstack = 0
  5042                           ;incstack = 0
  5043  005BF6  6A17               	clrf	?_readEEPROM+1,c
  5044  005BF8  0E42               	movlw	66
  5045  005BFA  6E16               	movwf	?_readEEPROM,c
  5046  005BFC  EFD6  F02D         	goto	_readEEPROM	;wreg free
  5047  005C00                     __end_of_vscp_getSubzone:
  5048                           	opt stack 0
  5049                           tblptru	equ	0xFF8
  5050                           tblptrh	equ	0xFF7
  5051                           tblptrl	equ	0xFF6
  5052                           tablat	equ	0xFF5
  5053                           prodh	equ	0xFF4
  5054                           prodl	equ	0xFF3
  5055                           postinc0	equ	0xFEE
  5056                           wreg	equ	0xFE8
  5057                           postdec1	equ	0xFE5
  5058                           fsr1h	equ	0xFE2
  5059                           fsr1l	equ	0xFE1
  5060                           indf2	equ	0xFDF
  5061                           postinc2	equ	0xFDE
  5062                           postdec2	equ	0xFDD
  5063                           fsr2h	equ	0xFDA
  5064                           fsr2l	equ	0xFD9
  5065                           status	equ	0xFD8
  5066                           
  5067 ;; *************** function _vscp_getZone *****************
  5068 ;; Defined at:
  5069 ;;		line 2734 in file "../main.c"
  5070 ;; Parameters:    Size  Location     Type
  5071 ;;		None
  5072 ;; Auto vars:     Size  Location     Type
  5073 ;;		None
  5074 ;; Return value:  Size  Location     Type
  5075 ;;                  1    wreg      unsigned char 
  5076 ;; Registers used:
  5077 ;;		wreg, status,2, cstack
  5078 ;; Tracked objects:
  5079 ;;		On entry : 0/0
  5080 ;;		On exit  : 0/0
  5081 ;;		Unchanged: 0/0
  5082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5083 ;;      Params:         0       0       0       0       0       0       0
  5084 ;;      Locals:         0       0       0       0       0       0       0
  5085 ;;      Temps:          0       0       0       0       0       0       0
  5086 ;;      Totals:         0       0       0       0       0       0       0
  5087 ;;Total ram usage:        0 bytes
  5088 ;; Hardware stack levels used:    1
  5089 ;; Hardware stack levels required when called:    3
  5090 ;; This function calls:
  5091 ;;		_readEEPROM
  5092 ;; This function is called by:
  5093 ;;		_vscp_doOneSecondWork
  5094 ;; This function uses a non-reentrant model
  5095 ;;
  5096                           
  5097                           	psect	text24
  5098  005C00                     __ptext24:
  5099                           	opt stack 0
  5100  005C00                     _vscp_getZone:
  5101                           	opt stack 26
  5102                           
  5103                           ;main.c: 2735: return readEEPROM(0x41);
  5104                           
  5105                           ;incstack = 0
  5106                           ;incstack = 0
  5107  005C00  6A17               	clrf	?_readEEPROM+1,c
  5108  005C02  0E41               	movlw	65
  5109  005C04  6E16               	movwf	?_readEEPROM,c
  5110  005C06  EFD6  F02D         	goto	_readEEPROM	;wreg free
  5111  005C0A                     __end_of_vscp_getZone:
  5112                           	opt stack 0
  5113                           tblptru	equ	0xFF8
  5114                           tblptrh	equ	0xFF7
  5115                           tblptrl	equ	0xFF6
  5116                           tablat	equ	0xFF5
  5117                           prodh	equ	0xFF4
  5118                           prodl	equ	0xFF3
  5119                           postinc0	equ	0xFEE
  5120                           wreg	equ	0xFE8
  5121                           postdec1	equ	0xFE5
  5122                           fsr1h	equ	0xFE2
  5123                           fsr1l	equ	0xFE1
  5124                           indf2	equ	0xFDF
  5125                           postinc2	equ	0xFDE
  5126                           postdec2	equ	0xFDD
  5127                           fsr2h	equ	0xFDA
  5128                           fsr2l	equ	0xFD9
  5129                           status	equ	0xFD8
  5130                           
  5131 ;; *************** function _doOneSecondWork *****************
  5132 ;; Defined at:
  5133 ;;		line 524 in file "../main.c"
  5134 ;; Parameters:    Size  Location     Type
  5135 ;;		None
  5136 ;; Auto vars:     Size  Location     Type
  5137 ;;  setpoint        2   47[BANK0 ] short 
  5138 ;;  i               1   49[BANK0 ] unsigned char 
  5139 ;;  tmp             1   46[BANK0 ] unsigned char 
  5140 ;; Return value:  Size  Location     Type
  5141 ;;		None               void
  5142 ;; Registers used:
  5143 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5144 ;; Tracked objects:
  5145 ;;		On entry : F/1
  5146 ;;		On exit  : F/0
  5147 ;;		Unchanged: 0/0
  5148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5149 ;;      Params:         0       0       0       0       0       0       0
  5150 ;;      Locals:         0       4       0       0       0       0       0
  5151 ;;      Temps:          0       7       0       0       0       0       0
  5152 ;;      Totals:         0      11       0       0       0       0       0
  5153 ;;Total ram usage:       11 bytes
  5154 ;; Hardware stack levels used:    1
  5155 ;; Hardware stack levels required when called:    8
  5156 ;; This function calls:
  5157 ;;		_writeEEPROM
  5158 ;;		_readEEPROM
  5159 ;;		_sendTempEvent
  5160 ;;		_vscp_sendEvent
  5161 ;;		___wmul
  5162 ;; This function is called by:
  5163 ;;		_main
  5164 ;; This function uses a non-reentrant model
  5165 ;;
  5166                           
  5167                           	psect	text25
  5168  001870                     __ptext25:
  5169                           	opt stack 0
  5170  001870                     _doOneSecondWork:
  5171                           	opt stack 22
  5172                           
  5173                           ; BSR set to: 1
  5174                           ;main.c: 525: uint8_t tmp;
  5175                           ;main.c: 526: uint8_t i;
  5176                           ;main.c: 527: int16_t setpoint;
  5177                           ;main.c: 529: for (i = 0; i < 6; i++) {
  5178                           
  5179                           ;incstack = 0
  5180                           ;incstack = 0
  5181  001870  0100               	movlb	0	; () banked
  5182  001872  6B91               	clrf	doOneSecondWork@i& (0+255),b
  5183  001874                     l10147:
  5184                           
  5185                           ; BSR set to: 0
  5186                           ;main.c: 535: if (current_temp[ i ] < ((int16_t)( (((uint16_t)readEEPROM(0x7F + 2*i))<<8
      +                          ) + (uint16_t)readEEPROM(0x80 + 2*i)) ) ) {
  5187  001874  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5188  001876  0D02               	mullw	2
  5189  001878  0E7F               	movlw	127
  5190  00187A  24F3               	addwf	prodl,w,c
  5191  00187C  6E16               	movwf	?_readEEPROM,c
  5192  00187E  0E00               	movlw	0
  5193  001880  20F4               	addwfc	prodh,w,c
  5194  001882  6E17               	movwf	?_readEEPROM+1,c
  5195  001884  ECD6  F02D         	call	_readEEPROM	;wreg free
  5196  001888  0100               	movlb	0	; () banked
  5197  00188A  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5198  00188C  6B87               	clrf	??_doOneSecondWork& (0+255),b
  5199  00188E  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5200  001890  0D02               	mullw	2
  5201  001892  0E80               	movlw	128
  5202  001894  24F3               	addwf	prodl,w,c
  5203  001896  6E16               	movwf	?_readEEPROM,c
  5204  001898  0E00               	movlw	0
  5205  00189A  20F4               	addwfc	prodh,w,c
  5206  00189C  6E17               	movwf	?_readEEPROM+1,c
  5207  00189E  ECD6  F02D         	call	_readEEPROM	;wreg free
  5208  0018A2  0100               	movlb	0	; () banked
  5209  0018A4  2787               	addwf	??_doOneSecondWork& (0+255),f,b
  5210  0018A6  0E00               	movlw	0
  5211  0018A8  2388               	addwfc	(??_doOneSecondWork+1)& (0+255),f,b
  5212  0018AA  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5213  0018AC  0D02               	mullw	2
  5214  0018AE  0E00               	movlw	low _current_temp
  5215  0018B0  24F3               	addwf	prodl,w,c
  5216  0018B2  6ED9               	movwf	fsr2l,c
  5217  0018B4  0E01               	movlw	high _current_temp
  5218  0018B6  20F4               	addwfc	prodh,w,c
  5219  0018B8  6EDA               	movwf	fsr2h,c
  5220  0018BA  CFDE F089          	movff	postinc2,??_doOneSecondWork+2
  5221  0018BE  CFDD F08A          	movff	postdec2,??_doOneSecondWork+3
  5222  0018C2  518A               	movf	(??_doOneSecondWork+3)& (0+255),w,b
  5223  0018C4  0A80               	xorlw	128
  5224  0018C6  6F8B               	movwf	(??_doOneSecondWork+4)& (0+255),b
  5225  0018C8  5187               	movf	??_doOneSecondWork& (0+255),w,b
  5226  0018CA  5D89               	subwf	(??_doOneSecondWork+2)& (0+255),w,b
  5227  0018CC  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5228  0018CE  0A80               	xorlw	128
  5229  0018D0  598B               	subwfb	(??_doOneSecondWork+4)& (0+255),w,b
  5230  0018D2  E237               	bc	l209
  5231                           
  5232                           ; BSR set to: 0
  5233                           ;main.c: 538: writeEEPROM(0x7F + 2*i, ((uint16_t)current_temp[ i ]) >> 8);
  5234  0018D4  90D8               	bcf	status,0,c
  5235  0018D6  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  5236  0018D8  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5237  0018DA  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5238  0018DC  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5239  0018DE  0E7F               	movlw	127
  5240  0018E0  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  5241  0018E2  6E0E               	movwf	?_writeEEPROM,c
  5242  0018E4  0E00               	movlw	0
  5243  0018E6  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5244  0018E8  6E0F               	movwf	?_writeEEPROM+1,c
  5245  0018EA  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5246  0018EC  0D02               	mullw	2
  5247  0018EE  0E00               	movlw	low _current_temp
  5248  0018F0  24F3               	addwf	prodl,w,c
  5249  0018F2  6ED9               	movwf	fsr2l,c
  5250  0018F4  0E01               	movlw	high _current_temp
  5251  0018F6  20F4               	addwfc	prodh,w,c
  5252  0018F8  6EDA               	movwf	fsr2h,c
  5253  0018FA  CFDE F089          	movff	postinc2,??_doOneSecondWork+2
  5254  0018FE  CFDD F08A          	movff	postdec2,??_doOneSecondWork+3
  5255  001902  C08A  F089         	movff	??_doOneSecondWork+3,??_doOneSecondWork+2
  5256  001906  6B8A               	clrf	(??_doOneSecondWork+3)& (0+255),b
  5257  001908  5189               	movf	(??_doOneSecondWork+2)& (0+255),w,b
  5258  00190A  6E10               	movwf	?_writeEEPROM+2,c
  5259  00190C  ECCA  F02C         	call	_writeEEPROM	;wreg free
  5260                           
  5261                           ;main.c: 539: writeEEPROM(0x80 + 2*i, ((uint16_t)current_temp[ i ]) & 0xff);
  5262  001910  90D8               	bcf	status,0,c
  5263  001912  0100               	movlb	0	; () banked
  5264  001914  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  5265  001916  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5266  001918  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5267  00191A  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5268  00191C  0E80               	movlw	128
  5269  00191E  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  5270  001920  6E0E               	movwf	?_writeEEPROM,c
  5271  001922  0E00               	movlw	0
  5272  001924  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5273  001926  6E0F               	movwf	?_writeEEPROM+1,c
  5274  001928  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5275  00192A  0D02               	mullw	2
  5276  00192C  0101               	movlb	1	; () banked
  5277  00192E  0E00               	movlw	low _current_temp
  5278  001930  24F3               	addwf	prodl,w,c
  5279  001932  6ED9               	movwf	fsr2l,c
  5280  001934  0E01               	movlw	high _current_temp
  5281  001936  20F4               	addwfc	prodh,w,c
  5282  001938  6EDA               	movwf	fsr2h,c
  5283  00193A  50DF               	movf	indf2,w,c
  5284  00193C  6E10               	movwf	?_writeEEPROM+2,c
  5285  00193E  ECCA  F02C         	call	_writeEEPROM	;wreg free
  5286  001942                     l209:
  5287                           
  5288                           ;main.c: 540: }
  5289                           ;main.c: 546: if (current_temp[ i ] > ((int16_t)( (((uint16_t)readEEPROM(0x8B + 2*i))<<8
      +                          ) + (uint16_t)readEEPROM(0x8C + 2*i )) ) ) {
  5290  001942  0100               	movlb	0	; () banked
  5291  001944  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5292  001946  0D02               	mullw	2
  5293  001948  0E00               	movlw	low _current_temp
  5294  00194A  24F3               	addwf	prodl,w,c
  5295  00194C  6ED9               	movwf	fsr2l,c
  5296  00194E  0E01               	movlw	high _current_temp
  5297  001950  20F4               	addwfc	prodh,w,c
  5298  001952  6EDA               	movwf	fsr2h,c
  5299  001954  CFDE F087          	movff	postinc2,??_doOneSecondWork
  5300  001958  CFDD F088          	movff	postdec2,??_doOneSecondWork+1
  5301  00195C  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5302  00195E  0D02               	mullw	2
  5303  001960  0E8B               	movlw	139
  5304  001962  24F3               	addwf	prodl,w,c
  5305  001964  6E16               	movwf	?_readEEPROM,c
  5306  001966  0E00               	movlw	0
  5307  001968  20F4               	addwfc	prodh,w,c
  5308  00196A  6E17               	movwf	?_readEEPROM+1,c
  5309  00196C  ECD6  F02D         	call	_readEEPROM	;wreg free
  5310  001970  0100               	movlb	0	; () banked
  5311  001972  6F8A               	movwf	(??_doOneSecondWork+3)& (0+255),b
  5312  001974  6B89               	clrf	(??_doOneSecondWork+2)& (0+255),b
  5313  001976  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5314  001978  0D02               	mullw	2
  5315  00197A  0E8C               	movlw	140
  5316  00197C  24F3               	addwf	prodl,w,c
  5317  00197E  6E16               	movwf	?_readEEPROM,c
  5318  001980  0E00               	movlw	0
  5319  001982  20F4               	addwfc	prodh,w,c
  5320  001984  6E17               	movwf	?_readEEPROM+1,c
  5321  001986  ECD6  F02D         	call	_readEEPROM	;wreg free
  5322  00198A  0100               	movlb	0	; () banked
  5323  00198C  2789               	addwf	(??_doOneSecondWork+2)& (0+255),f,b
  5324  00198E  0E00               	movlw	0
  5325  001990  238A               	addwfc	(??_doOneSecondWork+3)& (0+255),f,b
  5326  001992  518A               	movf	(??_doOneSecondWork+3)& (0+255),w,b
  5327  001994  0A80               	xorlw	128
  5328  001996  6F8B               	movwf	(??_doOneSecondWork+4)& (0+255),b
  5329  001998  5187               	movf	??_doOneSecondWork& (0+255),w,b
  5330  00199A  5D89               	subwf	(??_doOneSecondWork+2)& (0+255),w,b
  5331  00199C  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5332  00199E  0A80               	xorlw	128
  5333  0019A0  598B               	subwfb	(??_doOneSecondWork+4)& (0+255),w,b
  5334  0019A2  E237               	bc	l10153
  5335                           
  5336                           ; BSR set to: 0
  5337                           ;main.c: 549: writeEEPROM(0x8B + 2*i, ((uint16_t)current_temp[ i ]) >> 8);
  5338  0019A4  90D8               	bcf	status,0,c
  5339  0019A6  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  5340  0019A8  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5341  0019AA  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5342  0019AC  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5343  0019AE  0E8B               	movlw	139
  5344  0019B0  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  5345  0019B2  6E0E               	movwf	?_writeEEPROM,c
  5346  0019B4  0E00               	movlw	0
  5347  0019B6  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5348  0019B8  6E0F               	movwf	?_writeEEPROM+1,c
  5349  0019BA  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5350  0019BC  0D02               	mullw	2
  5351  0019BE  0E00               	movlw	low _current_temp
  5352  0019C0  24F3               	addwf	prodl,w,c
  5353  0019C2  6ED9               	movwf	fsr2l,c
  5354  0019C4  0E01               	movlw	high _current_temp
  5355  0019C6  20F4               	addwfc	prodh,w,c
  5356  0019C8  6EDA               	movwf	fsr2h,c
  5357  0019CA  CFDE F089          	movff	postinc2,??_doOneSecondWork+2
  5358  0019CE  CFDD F08A          	movff	postdec2,??_doOneSecondWork+3
  5359  0019D2  C08A  F089         	movff	??_doOneSecondWork+3,??_doOneSecondWork+2
  5360  0019D6  6B8A               	clrf	(??_doOneSecondWork+3)& (0+255),b
  5361  0019D8  5189               	movf	(??_doOneSecondWork+2)& (0+255),w,b
  5362  0019DA  6E10               	movwf	?_writeEEPROM+2,c
  5363  0019DC  ECCA  F02C         	call	_writeEEPROM	;wreg free
  5364                           
  5365                           ;main.c: 550: writeEEPROM(0x8C + 2*i, ((uint16_t)current_temp[ i ]) & 0xff );
  5366  0019E0  90D8               	bcf	status,0,c
  5367  0019E2  0100               	movlb	0	; () banked
  5368  0019E4  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  5369  0019E6  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5370  0019E8  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5371  0019EA  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5372  0019EC  0E8C               	movlw	140
  5373  0019EE  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  5374  0019F0  6E0E               	movwf	?_writeEEPROM,c
  5375  0019F2  0E00               	movlw	0
  5376  0019F4  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5377  0019F6  6E0F               	movwf	?_writeEEPROM+1,c
  5378  0019F8  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5379  0019FA  0D02               	mullw	2
  5380  0019FC  0101               	movlb	1	; () banked
  5381  0019FE  0E00               	movlw	low _current_temp
  5382  001A00  24F3               	addwf	prodl,w,c
  5383  001A02  6ED9               	movwf	fsr2l,c
  5384  001A04  0E01               	movlw	high _current_temp
  5385  001A06  20F4               	addwfc	prodh,w,c
  5386  001A08  6EDA               	movwf	fsr2h,c
  5387  001A0A  50DF               	movf	indf2,w,c
  5388  001A0C  6E10               	movwf	?_writeEEPROM+2,c
  5389  001A0E  ECCA  F02C         	call	_writeEEPROM	;wreg free
  5390  001A12                     l10153:
  5391                           
  5392                           ;main.c: 551: }
  5393                           ;main.c: 556: tmp = readEEPROM(0x49 + i);
  5394  001A12  0E49               	movlw	73
  5395  001A14  0100               	movlb	0	; () banked
  5396  001A16  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5397  001A18  6E16               	movwf	?_readEEPROM,c
  5398  001A1A  6A17               	clrf	?_readEEPROM+1,c
  5399  001A1C  0E00               	movlw	0
  5400  001A1E  2217               	addwfc	?_readEEPROM+1,f,c
  5401  001A20  ECD6  F02D         	call	_readEEPROM	;wreg free
  5402  001A24  0100               	movlb	0	; () banked
  5403  001A26  6F8E               	movwf	doOneSecondWork@tmp& (0+255),b
  5404                           
  5405                           ; BSR set to: 0
  5406                           ;main.c: 557: if (tmp && (seconds_temp[i] > tmp)) {
  5407  001A28  518E               	movf	doOneSecondWork@tmp& (0+255),w,b
  5408  001A2A  E016               	bz	l10163
  5409                           
  5410                           ; BSR set to: 0
  5411  001A2C  0E0C               	movlw	low _seconds_temp
  5412  001A2E  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5413  001A30  6ED9               	movwf	fsr2l,c
  5414  001A32  6ADA               	clrf	fsr2h,c
  5415  001A34  0E01               	movlw	high _seconds_temp
  5416  001A36  22DA               	addwfc	fsr2h,f,c
  5417  001A38  50DF               	movf	indf2,w,c
  5418  001A3A  618E               	cpfslt	doOneSecondWork@tmp& (0+255),b
  5419  001A3C  D00D               	goto	l10163
  5420                           
  5421                           ; BSR set to: 0
  5422                           ;main.c: 560: if (sendTempEvent(i)) {
  5423  001A3E  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5424  001A40  EC5A  F028         	call	_sendTempEvent
  5425  001A44  0900               	iorlw	0
  5426  001A46  E008               	bz	l10163
  5427                           
  5428                           ;main.c: 561: seconds_temp[i] = 0;
  5429  001A48  0E0C               	movlw	low _seconds_temp
  5430  001A4A  0100               	movlb	0	; () banked
  5431  001A4C  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5432  001A4E  6ED9               	movwf	fsr2l,c
  5433  001A50  6ADA               	clrf	fsr2h,c
  5434  001A52  0E01               	movlw	high _seconds_temp
  5435  001A54  22DA               	addwfc	fsr2h,f,c
  5436  001A56  6ADF               	clrf	indf2,c
  5437  001A58                     l10163:
  5438                           
  5439                           ;main.c: 562: }
  5440                           ;main.c: 564: }
  5441                           ;main.c: 569: if (0x80 & readEEPROM(0x43 + i)) {
  5442  001A58  0E43               	movlw	67
  5443  001A5A  0100               	movlb	0	; () banked
  5444  001A5C  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5445  001A5E  6E16               	movwf	?_readEEPROM,c
  5446  001A60  6A17               	clrf	?_readEEPROM+1,c
  5447  001A62  0E00               	movlw	0
  5448  001A64  2217               	addwfc	?_readEEPROM+1,f,c
  5449  001A66  ECD6  F02D         	call	_readEEPROM	;wreg free
  5450  001A6A  0100               	movlb	0	; () banked
  5451  001A6C  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5452  001A6E  AF87               	btfss	??_doOneSecondWork& (0+255),7,b
  5453  001A70  D0CB               	goto	l10217
  5454                           
  5455                           ; BSR set to: 0
  5456                           ;main.c: 572: if (low_alarm & (1 << i)) {
  5457  001A72  C091  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  5458  001A76  0E01               	movlw	1
  5459  001A78  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5460  001A7A  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  5461  001A7C  D002               	goto	u8284
  5462  001A7E                     u8285:
  5463  001A7E  90D8               	bcf	status,0,c
  5464  001A80  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5465  001A82                     u8284:
  5466  001A82  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  5467  001A84  D7FC               	goto	u8285
  5468  001A86  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5469  001A88  15B8               	andwf	_low_alarm& (0+255),w,b
  5470  001A8A  E058               	bz	l10191
  5471                           
  5472                           ; BSR set to: 0
  5473                           ;main.c: 575: if (readEEPROM(0x43 + i) & (1<<3)) {
  5474  001A8C  0E43               	movlw	67
  5475  001A8E  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5476  001A90  6E16               	movwf	?_readEEPROM,c
  5477  001A92  6A17               	clrf	?_readEEPROM+1,c
  5478  001A94  0E00               	movlw	0
  5479  001A96  2217               	addwfc	?_readEEPROM+1,f,c
  5480  001A98  ECD6  F02D         	call	_readEEPROM	;wreg free
  5481  001A9C  0100               	movlb	0	; () banked
  5482  001A9E  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5483  001AA0  A787               	btfss	??_doOneSecondWork& (0+255),3,b
  5484  001AA2  D04C               	goto	l10191
  5485                           
  5486                           ; BSR set to: 0
  5487                           ;main.c: 577: vscp_omsg.priority = 0x00;
  5488  001AA4  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
  5489                           
  5490                           ; BSR set to: 0
  5491                           ;main.c: 578: vscp_omsg.flags = 0x80 + 3;
  5492  001AA6  0E83               	movlw	131
  5493  001AA8  6FCB               	movwf	_vscp_omsg& (0+255),b
  5494                           
  5495                           ; BSR set to: 0
  5496                           ;main.c: 581: if (readEEPROM(0x43 + i) & (1<<5)) {
  5497  001AAA  0E43               	movlw	67
  5498  001AAC  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5499  001AAE  6E16               	movwf	?_readEEPROM,c
  5500  001AB0  6A17               	clrf	?_readEEPROM+1,c
  5501  001AB2  0E00               	movlw	0
  5502  001AB4  2217               	addwfc	?_readEEPROM+1,f,c
  5503  001AB6  ECD6  F02D         	call	_readEEPROM	;wreg free
  5504  001ABA  0100               	movlb	0	; () banked
  5505  001ABC  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5506  001ABE  AB87               	btfss	??_doOneSecondWork& (0+255),5,b
  5507  001AC0  D016               	goto	l10181
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;main.c: 583: if (readEEPROM(0x43 + i) & (1<<6)) {
  5511  001AC2  0E43               	movlw	67
  5512  001AC4  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5513  001AC6  6E16               	movwf	?_readEEPROM,c
  5514  001AC8  6A17               	clrf	?_readEEPROM+1,c
  5515  001ACA  0E00               	movlw	0
  5516  001ACC  2217               	addwfc	?_readEEPROM+1,f,c
  5517  001ACE  ECD6  F02D         	call	_readEEPROM	;wreg free
  5518  001AD2  0100               	movlb	0	; () banked
  5519  001AD4  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5520  001AD6  AD87               	btfss	??_doOneSecondWork& (0+255),6,b
  5521  001AD8  D005               	goto	l10179
  5522                           
  5523                           ; BSR set to: 0
  5524                           ;main.c: 584: vscp_omsg.vscp_class = 30;
  5525  001ADA  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5526  001ADC  0E1E               	movlw	30
  5527  001ADE  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  5528                           
  5529                           ;main.c: 585: vscp_omsg.vscp_type = 5;
  5530  001AE0  0E05               	movlw	5
  5531  001AE2  D009               	goto	L4
  5532  001AE4                     l10179:
  5533                           
  5534                           ; BSR set to: 0
  5535                           ;main.c: 587: else {
  5536                           ;main.c: 588: vscp_omsg.vscp_class = 30;
  5537  001AE4  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5538  001AE6  0E1E               	movlw	30
  5539  001AE8  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  5540                           
  5541                           ;main.c: 589: vscp_omsg.vscp_type = 6;
  5542  001AEA  0E06               	movlw	6
  5543  001AEC  D004               	goto	L4
  5544  001AEE                     l10181:
  5545                           
  5546                           ; BSR set to: 0
  5547                           ;main.c: 593: else {
  5548                           ;main.c: 595: vscp_omsg.vscp_class = 1;
  5549  001AEE  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5550  001AF0  0E01               	movlw	1
  5551  001AF2  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  5552                           
  5553                           ;main.c: 596: vscp_omsg.vscp_type = 2;
  5554  001AF4  0E02               	movlw	2
  5555  001AF6                     L4:
  5556  001AF6  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  5557                           
  5558                           ; BSR set to: 0
  5559                           ;main.c: 597: }
  5560                           ;main.c: 599: vscp_omsg.data[ 0 ] = i;
  5561  001AF8  C091  F0D1         	movff	doOneSecondWork@i,_vscp_omsg+6
  5562                           
  5563                           ; BSR set to: 0
  5564                           ;main.c: 600: vscp_omsg.data[ 1 ] =
  5565                           ;main.c: 601: readEEPROM(0x73 + 2*i);
  5566  001AFC  90D8               	bcf	status,0,c
  5567  001AFE  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  5568  001B00  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5569  001B02  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5570  001B04  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5571  001B06  0E73               	movlw	115
  5572  001B08  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  5573  001B0A  6E16               	movwf	?_readEEPROM,c
  5574  001B0C  0E00               	movlw	0
  5575  001B0E  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5576  001B10  6E17               	movwf	?_readEEPROM+1,c
  5577  001B12  ECD6  F02D         	call	_readEEPROM	;wreg free
  5578  001B16  0100               	movlb	0	; () banked
  5579  001B18  6FD2               	movwf	(_vscp_omsg+7)& (0+255),b
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;main.c: 602: vscp_omsg.data[ 2 ] =
  5583                           ;main.c: 603: readEEPROM(0x74 + 2*i);
  5584  001B1A  90D8               	bcf	status,0,c
  5585  001B1C  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  5586  001B1E  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5587  001B20  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5588  001B22  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5589  001B24  0E74               	movlw	116
  5590  001B26  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  5591  001B28  6E16               	movwf	?_readEEPROM,c
  5592  001B2A  0E00               	movlw	0
  5593  001B2C  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5594  001B2E  6E17               	movwf	?_readEEPROM+1,c
  5595  001B30  ECD6  F02D         	call	_readEEPROM	;wreg free
  5596  001B34  0100               	movlb	0	; () banked
  5597  001B36  6FD3               	movwf	(_vscp_omsg+8)& (0+255),b
  5598                           
  5599                           ; BSR set to: 0
  5600                           ;main.c: 608: vscp_sendEvent();
  5601  001B38  EC37  F02C         	call	_vscp_sendEvent	;wreg free
  5602  001B3C                     l10191:
  5603                           
  5604                           ;main.c: 610: }
  5605                           ;main.c: 611: }
  5606                           ;main.c: 614: if (high_alarm & (1 << i)) {
  5607  001B3C  C091  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  5608  001B40  0E01               	movlw	1
  5609  001B42  0100               	movlb	0	; () banked
  5610  001B44  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5611  001B46  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  5612  001B48  D002               	goto	u8334
  5613  001B4A                     u8335:
  5614  001B4A  90D8               	bcf	status,0,c
  5615  001B4C  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5616  001B4E                     u8334:
  5617  001B4E  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  5618  001B50  D7FC               	goto	u8335
  5619  001B52  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5620  001B54  15B7               	andwf	_high_alarm& (0+255),w,b
  5621  001B56  E058               	bz	l10217
  5622                           
  5623                           ; BSR set to: 0
  5624                           ;main.c: 617: if ((readEEPROM(0x43 + i) & (1<<4))) {
  5625  001B58  0E43               	movlw	67
  5626  001B5A  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5627  001B5C  6E16               	movwf	?_readEEPROM,c
  5628  001B5E  6A17               	clrf	?_readEEPROM+1,c
  5629  001B60  0E00               	movlw	0
  5630  001B62  2217               	addwfc	?_readEEPROM+1,f,c
  5631  001B64  ECD6  F02D         	call	_readEEPROM	;wreg free
  5632  001B68  0100               	movlb	0	; () banked
  5633  001B6A  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5634  001B6C  A987               	btfss	??_doOneSecondWork& (0+255),4,b
  5635  001B6E  D04C               	goto	l10217
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;main.c: 619: vscp_omsg.priority = 0x00;
  5639  001B70  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;main.c: 620: vscp_omsg.flags = 0x80 + 3;
  5643  001B72  0E83               	movlw	131
  5644  001B74  6FCB               	movwf	_vscp_omsg& (0+255),b
  5645                           
  5646                           ; BSR set to: 0
  5647                           ;main.c: 622: if (readEEPROM(0x43 + i) & (1<<5)) {
  5648  001B76  0E43               	movlw	67
  5649  001B78  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5650  001B7A  6E16               	movwf	?_readEEPROM,c
  5651  001B7C  6A17               	clrf	?_readEEPROM+1,c
  5652  001B7E  0E00               	movlw	0
  5653  001B80  2217               	addwfc	?_readEEPROM+1,f,c
  5654  001B82  ECD6  F02D         	call	_readEEPROM	;wreg free
  5655  001B86  0100               	movlb	0	; () banked
  5656  001B88  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5657  001B8A  AB87               	btfss	??_doOneSecondWork& (0+255),5,b
  5658  001B8C  D016               	goto	l10207
  5659                           
  5660                           ; BSR set to: 0
  5661                           ;main.c: 624: if (readEEPROM(0x43 + i) & (1<<6)) {
  5662  001B8E  0E43               	movlw	67
  5663  001B90  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5664  001B92  6E16               	movwf	?_readEEPROM,c
  5665  001B94  6A17               	clrf	?_readEEPROM+1,c
  5666  001B96  0E00               	movlw	0
  5667  001B98  2217               	addwfc	?_readEEPROM+1,f,c
  5668  001B9A  ECD6  F02D         	call	_readEEPROM	;wreg free
  5669  001B9E  0100               	movlb	0	; () banked
  5670  001BA0  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5671  001BA2  AD87               	btfss	??_doOneSecondWork& (0+255),6,b
  5672  001BA4  D005               	goto	l10205
  5673                           
  5674                           ; BSR set to: 0
  5675                           ;main.c: 625: vscp_omsg.vscp_class = 30;
  5676  001BA6  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5677  001BA8  0E1E               	movlw	30
  5678  001BAA  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  5679                           
  5680                           ;main.c: 626: vscp_omsg.vscp_type = 6;
  5681  001BAC  0E06               	movlw	6
  5682  001BAE  D009               	goto	L5
  5683  001BB0                     l10205:
  5684                           
  5685                           ; BSR set to: 0
  5686                           ;main.c: 628: else {
  5687                           ;main.c: 629: vscp_omsg.vscp_class = 30;
  5688  001BB0  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5689  001BB2  0E1E               	movlw	30
  5690  001BB4  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  5691                           
  5692                           ;main.c: 630: vscp_omsg.vscp_type = 5;
  5693  001BB6  0E05               	movlw	5
  5694  001BB8  D004               	goto	L5
  5695  001BBA                     l10207:
  5696                           
  5697                           ; BSR set to: 0
  5698                           ;main.c: 633: else {
  5699                           ;main.c: 635: vscp_omsg.vscp_class = 1;
  5700  001BBA  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5701  001BBC  0E01               	movlw	1
  5702  001BBE  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  5703                           
  5704                           ;main.c: 636: vscp_omsg.vscp_type = 2;
  5705  001BC0  0E02               	movlw	2
  5706  001BC2                     L5:
  5707  001BC2  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;main.c: 637: }
  5711                           ;main.c: 639: vscp_omsg.data[ 0 ] = i;
  5712  001BC4  C091  F0D1         	movff	doOneSecondWork@i,_vscp_omsg+6
  5713                           
  5714                           ; BSR set to: 0
  5715                           ;main.c: 640: vscp_omsg.data[ 1 ] =
  5716                           ;main.c: 641: readEEPROM(0x73 + 2*i);
  5717  001BC8  90D8               	bcf	status,0,c
  5718  001BCA  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  5719  001BCC  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5720  001BCE  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5721  001BD0  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5722  001BD2  0E73               	movlw	115
  5723  001BD4  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  5724  001BD6  6E16               	movwf	?_readEEPROM,c
  5725  001BD8  0E00               	movlw	0
  5726  001BDA  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5727  001BDC  6E17               	movwf	?_readEEPROM+1,c
  5728  001BDE  ECD6  F02D         	call	_readEEPROM	;wreg free
  5729  001BE2  0100               	movlb	0	; () banked
  5730  001BE4  6FD2               	movwf	(_vscp_omsg+7)& (0+255),b
  5731                           
  5732                           ; BSR set to: 0
  5733                           ;main.c: 642: vscp_omsg.data[ 2 ] =
  5734                           ;main.c: 643: readEEPROM(0x74 + 2*i);
  5735  001BE6  90D8               	bcf	status,0,c
  5736  001BE8  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  5737  001BEA  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5738  001BEC  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5739  001BEE  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5740  001BF0  0E74               	movlw	116
  5741  001BF2  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  5742  001BF4  6E16               	movwf	?_readEEPROM,c
  5743  001BF6  0E00               	movlw	0
  5744  001BF8  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5745  001BFA  6E17               	movwf	?_readEEPROM+1,c
  5746  001BFC  ECD6  F02D         	call	_readEEPROM	;wreg free
  5747  001C00  0100               	movlb	0	; () banked
  5748  001C02  6FD3               	movwf	(_vscp_omsg+8)& (0+255),b
  5749                           
  5750                           ; BSR set to: 0
  5751                           ;main.c: 648: vscp_sendEvent();
  5752  001C04  EC37  F02C         	call	_vscp_sendEvent	;wreg free
  5753  001C08                     l10217:
  5754                           
  5755                           ;main.c: 649: }
  5756                           ;main.c: 650: }
  5757                           ;main.c: 651: }
  5758                           ;main.c: 657: if (low_alarm & (1 << i)) {
  5759  001C08  C091  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  5760  001C0C  0E01               	movlw	1
  5761  001C0E  0100               	movlb	0	; () banked
  5762  001C10  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5763  001C12  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  5764  001C14  D002               	goto	u8384
  5765  001C16                     u8385:
  5766  001C16  90D8               	bcf	status,0,c
  5767  001C18  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5768  001C1A                     u8384:
  5769  001C1A  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  5770  001C1C  D7FC               	goto	u8385
  5771  001C1E  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5772  001C20  15B8               	andwf	_low_alarm& (0+255),w,b
  5773  001C22  E060               	bz	l10225
  5774                           
  5775                           ; BSR set to: 0
  5776                           ;main.c: 660: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x5B + 2*i))<<8) + (uint16_t
      +                          )readEEPROM(0x5C + 2*i)) ) +
  5777                           ;main.c: 662: (int8_t) readEEPROM(0x97 + i);
  5778  001C24  0E97               	movlw	151
  5779  001C26  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5780  001C28  6E16               	movwf	?_readEEPROM,c
  5781  001C2A  6A17               	clrf	?_readEEPROM+1,c
  5782  001C2C  0E00               	movlw	0
  5783  001C2E  2217               	addwfc	?_readEEPROM+1,f,c
  5784  001C30  ECD6  F02D         	call	_readEEPROM	;wreg free
  5785  001C34  0100               	movlb	0	; () banked
  5786  001C36  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5787  001C38  90D8               	bcf	status,0,c
  5788  001C3A  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  5789  001C3C  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5790  001C3E  6B89               	clrf	(??_doOneSecondWork+2)& (0+255),b
  5791  001C40  3789               	rlcf	(??_doOneSecondWork+2)& (0+255),f,b
  5792  001C42  0E5B               	movlw	91
  5793  001C44  2588               	addwf	(??_doOneSecondWork+1)& (0+255),w,b
  5794  001C46  6E16               	movwf	?_readEEPROM,c
  5795  001C48  0E00               	movlw	0
  5796  001C4A  2189               	addwfc	(??_doOneSecondWork+2)& (0+255),w,b
  5797  001C4C  6E17               	movwf	?_readEEPROM+1,c
  5798  001C4E  ECD6  F02D         	call	_readEEPROM	;wreg free
  5799  001C52  0100               	movlb	0	; () banked
  5800  001C54  6F8B               	movwf	(??_doOneSecondWork+4)& (0+255),b
  5801  001C56  6B8A               	clrf	(??_doOneSecondWork+3)& (0+255),b
  5802  001C58  90D8               	bcf	status,0,c
  5803  001C5A  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  5804  001C5C  6F8C               	movwf	(??_doOneSecondWork+5)& (0+255),b
  5805  001C5E  6B8D               	clrf	(??_doOneSecondWork+6)& (0+255),b
  5806  001C60  378D               	rlcf	(??_doOneSecondWork+6)& (0+255),f,b
  5807  001C62  0E5C               	movlw	92
  5808  001C64  258C               	addwf	(??_doOneSecondWork+5)& (0+255),w,b
  5809  001C66  6E16               	movwf	?_readEEPROM,c
  5810  001C68  0E00               	movlw	0
  5811  001C6A  218D               	addwfc	(??_doOneSecondWork+6)& (0+255),w,b
  5812  001C6C  6E17               	movwf	?_readEEPROM+1,c
  5813  001C6E  ECD6  F02D         	call	_readEEPROM	;wreg free
  5814  001C72  0100               	movlb	0	; () banked
  5815  001C74  278A               	addwf	(??_doOneSecondWork+3)& (0+255),f,b
  5816  001C76  0E00               	movlw	0
  5817  001C78  238B               	addwfc	(??_doOneSecondWork+4)& (0+255),f,b
  5818  001C7A  5187               	movf	??_doOneSecondWork& (0+255),w,b
  5819  001C7C  258A               	addwf	(??_doOneSecondWork+3)& (0+255),w,b
  5820  001C7E  6F8F               	movwf	doOneSecondWork@setpoint& (0+255),b
  5821  001C80  0E00               	movlw	0
  5822  001C82  218B               	addwfc	(??_doOneSecondWork+4)& (0+255),w,b
  5823  001C84  6F90               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  5824                           
  5825                           ; BSR set to: 0
  5826                           ;main.c: 667: if (current_temp[ i ] > (setpoint * 100)) {
  5827  001C86  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5828  001C88  0D02               	mullw	2
  5829  001C8A  0101               	movlb	1	; () banked
  5830  001C8C  0E00               	movlw	low _current_temp
  5831  001C8E  24F3               	addwf	prodl,w,c
  5832  001C90  6ED9               	movwf	fsr2l,c
  5833  001C92  0E01               	movlw	high _current_temp
  5834  001C94  20F4               	addwfc	prodh,w,c
  5835  001C96  6EDA               	movwf	fsr2h,c
  5836  001C98  CFDE F087          	movff	postinc2,??_doOneSecondWork
  5837  001C9C  CFDD F088          	movff	postdec2,??_doOneSecondWork+1
  5838  001CA0  C08F  F00E         	movff	doOneSecondWork@setpoint,?___wmul
  5839  001CA4  C090  F00F         	movff	doOneSecondWork@setpoint+1,?___wmul+1
  5840  001CA8  6A11               	clrf	?___wmul+3,c
  5841  001CAA  0E64               	movlw	100
  5842  001CAC  6E10               	movwf	?___wmul+2,c
  5843  001CAE  ECAE  F02B         	call	___wmul	;wreg free
  5844  001CB2  500F               	movf	?___wmul+1,w,c
  5845  001CB4  0A80               	xorlw	128
  5846  001CB6  0100               	movlb	0	; () banked
  5847  001CB8  6F89               	movwf	(??_doOneSecondWork+2)& (0+255),b
  5848  001CBA  5187               	movf	??_doOneSecondWork& (0+255),w,b
  5849  001CBC  5C0E               	subwf	?___wmul,w,c
  5850  001CBE  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5851  001CC0  0A80               	xorlw	128
  5852  001CC2  5989               	subwfb	(??_doOneSecondWork+2)& (0+255),w,b
  5853  001CC4  E301 D0AF          	bc	l228
  5854  001CC8                     l10223:
  5855                           
  5856                           ;main.c: 670: low_alarm &= ~(1 << i);
  5857  001CC8  C091  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  5858  001CCC  0E01               	movlw	1
  5859  001CCE  0100               	movlb	0	; () banked
  5860  001CD0  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5861  001CD2  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  5862  001CD4  D002               	goto	u8414
  5863  001CD6                     u8415:
  5864  001CD6  90D8               	bcf	status,0,c
  5865  001CD8  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5866  001CDA                     u8414:
  5867  001CDA  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  5868  001CDC  D7FC               	goto	u8415
  5869  001CDE  1D88               	comf	(??_doOneSecondWork+1)& (0+255),w,b
  5870  001CE0  17B8               	andwf	_low_alarm& (0+255),f,b
  5871  001CE2  D0A1               	goto	l228
  5872  001CE4                     l10225:
  5873                           
  5874                           ; BSR set to: 0
  5875                           ;main.c: 675: else {
  5876                           ;main.c: 679: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x5B + 2*i ))<<8) + (uint16_
      +                          t)readEEPROM(0x5C + 2*i )) );
  5877  001CE4  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5878  001CE6  0D02               	mullw	2
  5879  001CE8  0E5C               	movlw	92
  5880  001CEA  24F3               	addwf	prodl,w,c
  5881  001CEC  6E16               	movwf	?_readEEPROM,c
  5882  001CEE  0E00               	movlw	0
  5883  001CF0  20F4               	addwfc	prodh,w,c
  5884  001CF2  6E17               	movwf	?_readEEPROM+1,c
  5885  001CF4  ECD6  F02D         	call	_readEEPROM	;wreg free
  5886  001CF8  0100               	movlb	0	; () banked
  5887  001CFA  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5888  001CFC  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5889  001CFE  0D02               	mullw	2
  5890  001D00  0E5B               	movlw	91
  5891  001D02  24F3               	addwf	prodl,w,c
  5892  001D04  6E16               	movwf	?_readEEPROM,c
  5893  001D06  0E00               	movlw	0
  5894  001D08  20F4               	addwfc	prodh,w,c
  5895  001D0A  6E17               	movwf	?_readEEPROM+1,c
  5896  001D0C  ECD6  F02D         	call	_readEEPROM	;wreg free
  5897  001D10  0100               	movlb	0	; () banked
  5898  001D12  6F90               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  5899  001D14  5187               	movf	??_doOneSecondWork& (0+255),w,b
  5900  001D16  6F8F               	movwf	doOneSecondWork@setpoint& (0+255),b
  5901                           
  5902                           ; BSR set to: 0
  5903                           ;main.c: 682: if (current_temp[ i ] < (setpoint * 100)) {
  5904  001D18  C08F  F00E         	movff	doOneSecondWork@setpoint,?___wmul
  5905  001D1C  C090  F00F         	movff	doOneSecondWork@setpoint+1,?___wmul+1
  5906  001D20  6A11               	clrf	?___wmul+3,c
  5907  001D22  0E64               	movlw	100
  5908  001D24  6E10               	movwf	?___wmul+2,c
  5909  001D26  ECAE  F02B         	call	___wmul	;wreg free
  5910  001D2A  0100               	movlb	0	; () banked
  5911  001D2C  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5912  001D2E  0D02               	mullw	2
  5913  001D30  0E00               	movlw	low _current_temp
  5914  001D32  24F3               	addwf	prodl,w,c
  5915  001D34  6ED9               	movwf	fsr2l,c
  5916  001D36  0E01               	movlw	high _current_temp
  5917  001D38  20F4               	addwfc	prodh,w,c
  5918  001D3A  6EDA               	movwf	fsr2h,c
  5919  001D3C  CFDE F087          	movff	postinc2,??_doOneSecondWork
  5920  001D40  CFDD F088          	movff	postdec2,??_doOneSecondWork+1
  5921  001D44  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5922  001D46  0A80               	xorlw	128
  5923  001D48  6F89               	movwf	(??_doOneSecondWork+2)& (0+255),b
  5924  001D4A  500E               	movf	?___wmul,w,c
  5925  001D4C  5D87               	subwf	??_doOneSecondWork& (0+255),w,b
  5926  001D4E  500F               	movf	?___wmul+1,w,c
  5927  001D50  0A80               	xorlw	128
  5928  001D52  5989               	subwfb	(??_doOneSecondWork+2)& (0+255),w,b
  5929  001D54  E268               	bc	l228
  5930                           
  5931                           ; BSR set to: 0
  5932                           ;main.c: 685: low_alarm |= (1 << i);
  5933  001D56  C091  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  5934  001D5A  0E01               	movlw	1
  5935  001D5C  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5936  001D5E  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  5937  001D60  D002               	goto	u8434
  5938  001D62                     u8435:
  5939  001D62  90D8               	bcf	status,0,c
  5940  001D64  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5941  001D66                     u8434:
  5942  001D66  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  5943  001D68  D7FC               	goto	u8435
  5944  001D6A  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5945  001D6C  13B8               	iorwf	_low_alarm& (0+255),f,b
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;main.c: 690: vscp_alarmstatus |= 1;
  5949  001D6E  804A               	bsf	_vscp_alarmstatus,0,c
  5950                           
  5951                           ; BSR set to: 0
  5952                           ;main.c: 693: if ( readEEPROM(i + 0x43) & (1<<3) ) {
  5953  001D70  0E43               	movlw	67
  5954  001D72  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5955  001D74  6E16               	movwf	?_readEEPROM,c
  5956  001D76  6A17               	clrf	?_readEEPROM+1,c
  5957  001D78  0E00               	movlw	0
  5958  001D7A  2217               	addwfc	?_readEEPROM+1,f,c
  5959  001D7C  ECD6  F02D         	call	_readEEPROM	;wreg free
  5960  001D80  0100               	movlb	0	; () banked
  5961  001D82  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5962  001D84  A787               	btfss	??_doOneSecondWork& (0+255),3,b
  5963  001D86  D04F               	goto	l228
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;main.c: 695: vscp_omsg.priority = 0x00;
  5967  001D88  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;main.c: 696: vscp_omsg.flags = 0x80 + 3;
  5971  001D8A  0E83               	movlw	131
  5972  001D8C  6FCB               	movwf	_vscp_omsg& (0+255),b
  5973                           
  5974                           ; BSR set to: 0
  5975                           ;main.c: 699: if (readEEPROM(0x43 + i) & (1<<5)) {
  5976  001D8E  0E43               	movlw	67
  5977  001D90  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5978  001D92  6E16               	movwf	?_readEEPROM,c
  5979  001D94  6A17               	clrf	?_readEEPROM+1,c
  5980  001D96  0E00               	movlw	0
  5981  001D98  2217               	addwfc	?_readEEPROM+1,f,c
  5982  001D9A  ECD6  F02D         	call	_readEEPROM	;wreg free
  5983  001D9E  0100               	movlb	0	; () banked
  5984  001DA0  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5985  001DA2  AB87               	btfss	??_doOneSecondWork& (0+255),5,b
  5986  001DA4  D016               	goto	l10247
  5987                           
  5988                           ; BSR set to: 0
  5989                           ;main.c: 701: if (readEEPROM(0x43 + i) & (1<<6)) {
  5990  001DA6  0E43               	movlw	67
  5991  001DA8  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5992  001DAA  6E16               	movwf	?_readEEPROM,c
  5993  001DAC  6A17               	clrf	?_readEEPROM+1,c
  5994  001DAE  0E00               	movlw	0
  5995  001DB0  2217               	addwfc	?_readEEPROM+1,f,c
  5996  001DB2  ECD6  F02D         	call	_readEEPROM	;wreg free
  5997  001DB6  0100               	movlb	0	; () banked
  5998  001DB8  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5999  001DBA  AD87               	btfss	??_doOneSecondWork& (0+255),6,b
  6000  001DBC  D005               	goto	l10245
  6001                           
  6002                           ; BSR set to: 0
  6003                           ;main.c: 702: vscp_omsg.vscp_class = 30;
  6004  001DBE  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6005  001DC0  0E1E               	movlw	30
  6006  001DC2  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6007                           
  6008                           ;main.c: 703: vscp_omsg.vscp_type = 5;
  6009  001DC4  0E05               	movlw	5
  6010  001DC6  D009               	goto	L6
  6011  001DC8                     l10245:
  6012                           
  6013                           ; BSR set to: 0
  6014                           ;main.c: 705: else {
  6015                           ;main.c: 706: vscp_omsg.vscp_class = 30;
  6016  001DC8  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6017  001DCA  0E1E               	movlw	30
  6018  001DCC  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6019                           
  6020                           ;main.c: 707: vscp_omsg.vscp_type = 6;
  6021  001DCE  0E06               	movlw	6
  6022  001DD0  D004               	goto	L6
  6023  001DD2                     l10247:
  6024                           
  6025                           ; BSR set to: 0
  6026                           ;main.c: 711: else {
  6027                           ;main.c: 712: vscp_omsg.vscp_class = 1;
  6028  001DD2  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6029  001DD4  0E01               	movlw	1
  6030  001DD6  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6031                           
  6032                           ;main.c: 713: vscp_omsg.vscp_type = 2;
  6033  001DD8  0E02               	movlw	2
  6034  001DDA                     L6:
  6035  001DDA  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  6036                           
  6037                           ; BSR set to: 0
  6038                           ;main.c: 714: }
  6039                           ;main.c: 716: vscp_omsg.data[ 0 ] = i;
  6040  001DDC  C091  F0D1         	movff	doOneSecondWork@i,_vscp_omsg+6
  6041                           
  6042                           ; BSR set to: 0
  6043                           ;main.c: 717: vscp_omsg.data[ 1 ] = readEEPROM(0x73 + 2 * i);
  6044  001DE0  90D8               	bcf	status,0,c
  6045  001DE2  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  6046  001DE4  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6047  001DE6  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6048  001DE8  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6049  001DEA  0E73               	movlw	115
  6050  001DEC  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6051  001DEE  6E16               	movwf	?_readEEPROM,c
  6052  001DF0  0E00               	movlw	0
  6053  001DF2  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6054  001DF4  6E17               	movwf	?_readEEPROM+1,c
  6055  001DF6  ECD6  F02D         	call	_readEEPROM	;wreg free
  6056  001DFA  0100               	movlb	0	; () banked
  6057  001DFC  6FD2               	movwf	(_vscp_omsg+7)& (0+255),b
  6058                           
  6059                           ; BSR set to: 0
  6060                           ;main.c: 718: vscp_omsg.data[ 2 ] = readEEPROM(0x74 + 2 * i);
  6061  001DFE  90D8               	bcf	status,0,c
  6062  001E00  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  6063  001E02  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6064  001E04  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6065  001E06  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6066  001E08  0E74               	movlw	116
  6067  001E0A  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6068  001E0C  6E16               	movwf	?_readEEPROM,c
  6069  001E0E  0E00               	movlw	0
  6070  001E10  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6071  001E12  6E17               	movwf	?_readEEPROM+1,c
  6072  001E14  ECD6  F02D         	call	_readEEPROM	;wreg free
  6073  001E18  0100               	movlb	0	; () banked
  6074  001E1A  6FD3               	movwf	(_vscp_omsg+8)& (0+255),b
  6075                           
  6076                           ; BSR set to: 0
  6077                           ;main.c: 721: if (!vscp_sendEvent()) {
  6078  001E1C  EC37  F02C         	call	_vscp_sendEvent	;wreg free
  6079  001E20  0900               	iorlw	0
  6080  001E22  E101 D751          	bz	l10223
  6081  001E26                     l228:
  6082                           
  6083                           ;main.c: 725: }
  6084                           ;main.c: 727: }
  6085                           ;main.c: 728: }
  6086                           ;main.c: 729: }
  6087                           ;main.c: 734: if (high_alarm & (1 << i)) {
  6088  001E26  C091  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  6089  001E2A  0E01               	movlw	1
  6090  001E2C  0100               	movlb	0	; () banked
  6091  001E2E  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6092  001E30  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  6093  001E32  D002               	goto	u8484
  6094  001E34                     u8485:
  6095  001E34  90D8               	bcf	status,0,c
  6096  001E36  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6097  001E38                     u8484:
  6098  001E38  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  6099  001E3A  D7FC               	goto	u8485
  6100  001E3C  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6101  001E3E  15B7               	andwf	_high_alarm& (0+255),w,b
  6102  001E40  E05E               	bz	l10265
  6103                           
  6104                           ; BSR set to: 0
  6105                           ;main.c: 738: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x67 + 2 * i))<<8) + (uint16
      +                          _t)readEEPROM(0x68 + 2 * i)) ) -
  6106                           ;main.c: 740: (int8_t)readEEPROM(0x97 + i);
  6107  001E42  90D8               	bcf	status,0,c
  6108  001E44  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  6109  001E46  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6110  001E48  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6111  001E4A  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6112  001E4C  0E67               	movlw	103
  6113  001E4E  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6114  001E50  6E16               	movwf	?_readEEPROM,c
  6115  001E52  0E00               	movlw	0
  6116  001E54  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6117  001E56  6E17               	movwf	?_readEEPROM+1,c
  6118  001E58  ECD6  F02D         	call	_readEEPROM	;wreg free
  6119  001E5C  0100               	movlb	0	; () banked
  6120  001E5E  6F8A               	movwf	(??_doOneSecondWork+3)& (0+255),b
  6121  001E60  6B89               	clrf	(??_doOneSecondWork+2)& (0+255),b
  6122  001E62  90D8               	bcf	status,0,c
  6123  001E64  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  6124  001E66  6F8B               	movwf	(??_doOneSecondWork+4)& (0+255),b
  6125  001E68  6B8C               	clrf	(??_doOneSecondWork+5)& (0+255),b
  6126  001E6A  378C               	rlcf	(??_doOneSecondWork+5)& (0+255),f,b
  6127  001E6C  0E68               	movlw	104
  6128  001E6E  258B               	addwf	(??_doOneSecondWork+4)& (0+255),w,b
  6129  001E70  6E16               	movwf	?_readEEPROM,c
  6130  001E72  0E00               	movlw	0
  6131  001E74  218C               	addwfc	(??_doOneSecondWork+5)& (0+255),w,b
  6132  001E76  6E17               	movwf	?_readEEPROM+1,c
  6133  001E78  ECD6  F02D         	call	_readEEPROM	;wreg free
  6134  001E7C  0100               	movlb	0	; () banked
  6135  001E7E  2789               	addwf	(??_doOneSecondWork+2)& (0+255),f,b
  6136  001E80  0E00               	movlw	0
  6137  001E82  238A               	addwfc	(??_doOneSecondWork+3)& (0+255),f,b
  6138  001E84  0E97               	movlw	151
  6139  001E86  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  6140  001E88  6E16               	movwf	?_readEEPROM,c
  6141  001E8A  6A17               	clrf	?_readEEPROM+1,c
  6142  001E8C  0E00               	movlw	0
  6143  001E8E  2217               	addwfc	?_readEEPROM+1,f,c
  6144  001E90  ECD6  F02D         	call	_readEEPROM	;wreg free
  6145  001E94  0100               	movlb	0	; () banked
  6146  001E96  5D89               	subwf	(??_doOneSecondWork+2)& (0+255),w,b
  6147  001E98  6F8F               	movwf	doOneSecondWork@setpoint& (0+255),b
  6148  001E9A  518A               	movf	(??_doOneSecondWork+3)& (0+255),w,b
  6149  001E9C  A0D8               	btfss	status,0,c
  6150  001E9E  058A               	decf	(??_doOneSecondWork+3)& (0+255),w,b
  6151  001EA0  6F90               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  6152                           
  6153                           ; BSR set to: 0
  6154                           ;main.c: 743: if (current_temp[ i ] < (setpoint * 100) ) {
  6155  001EA2  C08F  F00E         	movff	doOneSecondWork@setpoint,?___wmul
  6156  001EA6  C090  F00F         	movff	doOneSecondWork@setpoint+1,?___wmul+1
  6157  001EAA  6A11               	clrf	?___wmul+3,c
  6158  001EAC  0E64               	movlw	100
  6159  001EAE  6E10               	movwf	?___wmul+2,c
  6160  001EB0  ECAE  F02B         	call	___wmul	;wreg free
  6161  001EB4  0100               	movlb	0	; () banked
  6162  001EB6  5191               	movf	doOneSecondWork@i& (0+255),w,b
  6163  001EB8  0D02               	mullw	2
  6164  001EBA  0E00               	movlw	low _current_temp
  6165  001EBC  24F3               	addwf	prodl,w,c
  6166  001EBE  6ED9               	movwf	fsr2l,c
  6167  001EC0  0E01               	movlw	high _current_temp
  6168  001EC2  20F4               	addwfc	prodh,w,c
  6169  001EC4  6EDA               	movwf	fsr2h,c
  6170  001EC6  CFDE F087          	movff	postinc2,??_doOneSecondWork
  6171  001ECA  CFDD F088          	movff	postdec2,??_doOneSecondWork+1
  6172  001ECE  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6173  001ED0  0A80               	xorlw	128
  6174  001ED2  6F89               	movwf	(??_doOneSecondWork+2)& (0+255),b
  6175  001ED4  500E               	movf	?___wmul,w,c
  6176  001ED6  5D87               	subwf	??_doOneSecondWork& (0+255),w,b
  6177  001ED8  500F               	movf	?___wmul+1,w,c
  6178  001EDA  0A80               	xorlw	128
  6179  001EDC  5989               	subwfb	(??_doOneSecondWork+2)& (0+255),w,b
  6180  001EDE  E301 D0B0          	bc	l10299
  6181  001EE2                     l10263:
  6182                           
  6183                           ;main.c: 746: high_alarm &= ~(1 << i);
  6184  001EE2  C091  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  6185  001EE6  0E01               	movlw	1
  6186  001EE8  0100               	movlb	0	; () banked
  6187  001EEA  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6188  001EEC  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  6189  001EEE  D002               	goto	u8514
  6190  001EF0                     u8515:
  6191  001EF0  90D8               	bcf	status,0,c
  6192  001EF2  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6193  001EF4                     u8514:
  6194  001EF4  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  6195  001EF6  D7FC               	goto	u8515
  6196  001EF8  1D88               	comf	(??_doOneSecondWork+1)& (0+255),w,b
  6197  001EFA  17B7               	andwf	_high_alarm& (0+255),f,b
  6198  001EFC  D0A2               	goto	l10299
  6199  001EFE                     l10265:
  6200                           
  6201                           ; BSR set to: 0
  6202                           ;main.c: 751: else {
  6203                           ;main.c: 756: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x67 + 2 * i))<<8) + (uint16
      +                          _t)readEEPROM(0x68 + 2 * i)) );
  6204  001EFE  5191               	movf	doOneSecondWork@i& (0+255),w,b
  6205  001F00  0D02               	mullw	2
  6206  001F02  0E68               	movlw	104
  6207  001F04  24F3               	addwf	prodl,w,c
  6208  001F06  6E16               	movwf	?_readEEPROM,c
  6209  001F08  0E00               	movlw	0
  6210  001F0A  20F4               	addwfc	prodh,w,c
  6211  001F0C  6E17               	movwf	?_readEEPROM+1,c
  6212  001F0E  ECD6  F02D         	call	_readEEPROM	;wreg free
  6213  001F12  0100               	movlb	0	; () banked
  6214  001F14  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6215  001F16  5191               	movf	doOneSecondWork@i& (0+255),w,b
  6216  001F18  0D02               	mullw	2
  6217  001F1A  0E67               	movlw	103
  6218  001F1C  24F3               	addwf	prodl,w,c
  6219  001F1E  6E16               	movwf	?_readEEPROM,c
  6220  001F20  0E00               	movlw	0
  6221  001F22  20F4               	addwfc	prodh,w,c
  6222  001F24  6E17               	movwf	?_readEEPROM+1,c
  6223  001F26  ECD6  F02D         	call	_readEEPROM	;wreg free
  6224  001F2A  0100               	movlb	0	; () banked
  6225  001F2C  6F90               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  6226  001F2E  5187               	movf	??_doOneSecondWork& (0+255),w,b
  6227  001F30  6F8F               	movwf	doOneSecondWork@setpoint& (0+255),b
  6228                           
  6229                           ; BSR set to: 0
  6230                           ;main.c: 759: if (current_temp[ i ] > (setpoint * 100)) {
  6231  001F32  5191               	movf	doOneSecondWork@i& (0+255),w,b
  6232  001F34  0D02               	mullw	2
  6233  001F36  0101               	movlb	1	; () banked
  6234  001F38  0E00               	movlw	low _current_temp
  6235  001F3A  24F3               	addwf	prodl,w,c
  6236  001F3C  6ED9               	movwf	fsr2l,c
  6237  001F3E  0E01               	movlw	high _current_temp
  6238  001F40  20F4               	addwfc	prodh,w,c
  6239  001F42  6EDA               	movwf	fsr2h,c
  6240  001F44  CFDE F087          	movff	postinc2,??_doOneSecondWork
  6241  001F48  CFDD F088          	movff	postdec2,??_doOneSecondWork+1
  6242  001F4C  C08F  F00E         	movff	doOneSecondWork@setpoint,?___wmul
  6243  001F50  C090  F00F         	movff	doOneSecondWork@setpoint+1,?___wmul+1
  6244  001F54  6A11               	clrf	?___wmul+3,c
  6245  001F56  0E64               	movlw	100
  6246  001F58  6E10               	movwf	?___wmul+2,c
  6247  001F5A  ECAE  F02B         	call	___wmul	;wreg free
  6248  001F5E  500F               	movf	?___wmul+1,w,c
  6249  001F60  0A80               	xorlw	128
  6250  001F62  0100               	movlb	0	; () banked
  6251  001F64  6F89               	movwf	(??_doOneSecondWork+2)& (0+255),b
  6252  001F66  5187               	movf	??_doOneSecondWork& (0+255),w,b
  6253  001F68  5C0E               	subwf	?___wmul,w,c
  6254  001F6A  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6255  001F6C  0A80               	xorlw	128
  6256  001F6E  5989               	subwfb	(??_doOneSecondWork+2)& (0+255),w,b
  6257  001F70  E268               	bc	l10299
  6258                           
  6259                           ; BSR set to: 0
  6260                           ;main.c: 762: high_alarm |= (1 << i);
  6261  001F72  C091  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  6262  001F76  0E01               	movlw	1
  6263  001F78  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6264  001F7A  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  6265  001F7C  D002               	goto	u8534
  6266  001F7E                     u8535:
  6267  001F7E  90D8               	bcf	status,0,c
  6268  001F80  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6269  001F82                     u8534:
  6270  001F82  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  6271  001F84  D7FC               	goto	u8535
  6272  001F86  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6273  001F88  13B7               	iorwf	_high_alarm& (0+255),f,b
  6274                           
  6275                           ; BSR set to: 0
  6276                           ;main.c: 768: vscp_alarmstatus |= 2;
  6277  001F8A  824A               	bsf	_vscp_alarmstatus,1,c
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;main.c: 771: if (readEEPROM(0x43 + i) & (1<<4)) {
  6281  001F8C  0E43               	movlw	67
  6282  001F8E  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  6283  001F90  6E16               	movwf	?_readEEPROM,c
  6284  001F92  6A17               	clrf	?_readEEPROM+1,c
  6285  001F94  0E00               	movlw	0
  6286  001F96  2217               	addwfc	?_readEEPROM+1,f,c
  6287  001F98  ECD6  F02D         	call	_readEEPROM	;wreg free
  6288  001F9C  0100               	movlb	0	; () banked
  6289  001F9E  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6290  001FA0  A987               	btfss	??_doOneSecondWork& (0+255),4,b
  6291  001FA2  D04F               	goto	l10299
  6292                           
  6293                           ; BSR set to: 0
  6294                           ;main.c: 773: vscp_omsg.priority = 0x00;
  6295  001FA4  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
  6296                           
  6297                           ; BSR set to: 0
  6298                           ;main.c: 774: vscp_omsg.flags = 0x80 + 3;
  6299  001FA6  0E83               	movlw	131
  6300  001FA8  6FCB               	movwf	_vscp_omsg& (0+255),b
  6301                           
  6302                           ; BSR set to: 0
  6303                           ;main.c: 776: if (readEEPROM(0x43 + i) & (1<<5)) {
  6304  001FAA  0E43               	movlw	67
  6305  001FAC  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  6306  001FAE  6E16               	movwf	?_readEEPROM,c
  6307  001FB0  6A17               	clrf	?_readEEPROM+1,c
  6308  001FB2  0E00               	movlw	0
  6309  001FB4  2217               	addwfc	?_readEEPROM+1,f,c
  6310  001FB6  ECD6  F02D         	call	_readEEPROM	;wreg free
  6311  001FBA  0100               	movlb	0	; () banked
  6312  001FBC  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6313  001FBE  AB87               	btfss	??_doOneSecondWork& (0+255),5,b
  6314  001FC0  D016               	goto	l10287
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;main.c: 778: if (readEEPROM(0x43 + i) & (1<<6)) {
  6318  001FC2  0E43               	movlw	67
  6319  001FC4  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  6320  001FC6  6E16               	movwf	?_readEEPROM,c
  6321  001FC8  6A17               	clrf	?_readEEPROM+1,c
  6322  001FCA  0E00               	movlw	0
  6323  001FCC  2217               	addwfc	?_readEEPROM+1,f,c
  6324  001FCE  ECD6  F02D         	call	_readEEPROM	;wreg free
  6325  001FD2  0100               	movlb	0	; () banked
  6326  001FD4  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6327  001FD6  AD87               	btfss	??_doOneSecondWork& (0+255),6,b
  6328  001FD8  D005               	goto	l10285
  6329                           
  6330                           ; BSR set to: 0
  6331                           ;main.c: 779: vscp_omsg.vscp_class = 30;
  6332  001FDA  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6333  001FDC  0E1E               	movlw	30
  6334  001FDE  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6335                           
  6336                           ;main.c: 780: vscp_omsg.vscp_type = 6;
  6337  001FE0  0E06               	movlw	6
  6338  001FE2  D009               	goto	L7
  6339  001FE4                     l10285:
  6340                           
  6341                           ; BSR set to: 0
  6342                           ;main.c: 782: else {
  6343                           ;main.c: 783: vscp_omsg.vscp_class = 30;
  6344  001FE4  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6345  001FE6  0E1E               	movlw	30
  6346  001FE8  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6347                           
  6348                           ;main.c: 784: vscp_omsg.vscp_type = 5;
  6349  001FEA  0E05               	movlw	5
  6350  001FEC  D004               	goto	L7
  6351  001FEE                     l10287:
  6352                           
  6353                           ; BSR set to: 0
  6354                           ;main.c: 787: else {
  6355                           ;main.c: 788: vscp_omsg.vscp_class = 1;
  6356  001FEE  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6357  001FF0  0E01               	movlw	1
  6358  001FF2  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6359                           
  6360                           ;main.c: 789: vscp_omsg.vscp_type = 2;
  6361  001FF4  0E02               	movlw	2
  6362  001FF6                     L7:
  6363  001FF6  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  6364                           
  6365                           ; BSR set to: 0
  6366                           ;main.c: 790: }
  6367                           ;main.c: 792: vscp_omsg.data[ 0 ] = i;
  6368  001FF8  C091  F0D1         	movff	doOneSecondWork@i,_vscp_omsg+6
  6369                           
  6370                           ; BSR set to: 0
  6371                           ;main.c: 793: vscp_omsg.data[ 1 ] = readEEPROM(0x73 + 2 * i);
  6372  001FFC  90D8               	bcf	status,0,c
  6373  001FFE  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  6374  002000  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6375  002002  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6376  002004  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6377  002006  0E73               	movlw	115
  6378  002008  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6379  00200A  6E16               	movwf	?_readEEPROM,c
  6380  00200C  0E00               	movlw	0
  6381  00200E  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6382  002010  6E17               	movwf	?_readEEPROM+1,c
  6383  002012  ECD6  F02D         	call	_readEEPROM	;wreg free
  6384  002016  0100               	movlb	0	; () banked
  6385  002018  6FD2               	movwf	(_vscp_omsg+7)& (0+255),b
  6386                           
  6387                           ; BSR set to: 0
  6388                           ;main.c: 794: vscp_omsg.data[ 2 ] = readEEPROM(0x74 + 2 * i);
  6389  00201A  90D8               	bcf	status,0,c
  6390  00201C  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  6391  00201E  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6392  002020  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6393  002022  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6394  002024  0E74               	movlw	116
  6395  002026  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6396  002028  6E16               	movwf	?_readEEPROM,c
  6397  00202A  0E00               	movlw	0
  6398  00202C  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6399  00202E  6E17               	movwf	?_readEEPROM+1,c
  6400  002030  ECD6  F02D         	call	_readEEPROM	;wreg free
  6401  002034  0100               	movlb	0	; () banked
  6402  002036  6FD3               	movwf	(_vscp_omsg+8)& (0+255),b
  6403                           
  6404                           ; BSR set to: 0
  6405                           ;main.c: 797: if (!vscp_sendEvent()) {
  6406  002038  EC37  F02C         	call	_vscp_sendEvent	;wreg free
  6407  00203C  0900               	iorlw	0
  6408  00203E  E101 D750          	bz	l10263
  6409  002042                     l10299:
  6410  002042  0100               	movlb	0	; () banked
  6411  002044  2B91               	incf	doOneSecondWork@i& (0+255),f,b
  6412  002046  0E05               	movlw	5
  6413  002048  6591               	cpfsgt	doOneSecondWork@i& (0+255),b
  6414  00204A  D414               	goto	l10147
  6415                           
  6416                           ; BSR set to: 0
  6417  00204C  0C05               	retlw	5
  6418  00204E                     __end_of_doOneSecondWork:
  6419                           	opt stack 0
  6420                           tblptru	equ	0xFF8
  6421                           tblptrh	equ	0xFF7
  6422                           tblptrl	equ	0xFF6
  6423                           tablat	equ	0xFF5
  6424                           prodh	equ	0xFF4
  6425                           prodl	equ	0xFF3
  6426                           postinc0	equ	0xFEE
  6427                           wreg	equ	0xFE8
  6428                           postdec1	equ	0xFE5
  6429                           fsr1h	equ	0xFE2
  6430                           fsr1l	equ	0xFE1
  6431                           indf2	equ	0xFDF
  6432                           postinc2	equ	0xFDE
  6433                           postdec2	equ	0xFDD
  6434                           fsr2h	equ	0xFDA
  6435                           fsr2l	equ	0xFD9
  6436                           status	equ	0xFD8
  6437                           
  6438 ;; *************** function _vscp_error *****************
  6439 ;; Defined at:
  6440 ;;		line 197 in file "../../vscp_firmware/common/vscp_firmware.c"
  6441 ;; Parameters:    Size  Location     Type
  6442 ;;		None
  6443 ;; Auto vars:     Size  Location     Type
  6444 ;;		None
  6445 ;; Return value:  Size  Location     Type
  6446 ;;		None               void
  6447 ;; Registers used:
  6448 ;;		None
  6449 ;; Tracked objects:
  6450 ;;		On entry : 0/0
  6451 ;;		On exit  : 0/0
  6452 ;;		Unchanged: 0/0
  6453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6454 ;;      Params:         0       0       0       0       0       0       0
  6455 ;;      Locals:         0       0       0       0       0       0       0
  6456 ;;      Temps:          0       0       0       0       0       0       0
  6457 ;;      Totals:         0       0       0       0       0       0       0
  6458 ;;Total ram usage:        0 bytes
  6459 ;; Hardware stack levels used:    1
  6460 ;; Hardware stack levels required when called:    2
  6461 ;; This function calls:
  6462 ;;		Nothing
  6463 ;; This function is called by:
  6464 ;;		_main
  6465 ;; This function uses a non-reentrant model
  6466 ;;
  6467                           
  6468                           	psect	text26
  6469  005C30                     __ptext26:
  6470                           	opt stack 0
  6471  005C30                     _vscp_error:
  6472                           	opt stack 28
  6473                           
  6474                           ;vscp_firmware.c: 198: vscp_initledfunc = 0x00;
  6475                           
  6476                           ; BSR set to: 0
  6477                           ;incstack = 0
  6478                           ;incstack = 0
  6479  005C30  6A4D               	clrf	_vscp_initledfunc,c
  6480  005C32  0012               	return	
  6481  005C34                     __end_of_vscp_error:
  6482                           	opt stack 0
  6483                           tblptru	equ	0xFF8
  6484                           tblptrh	equ	0xFF7
  6485                           tblptrl	equ	0xFF6
  6486                           tablat	equ	0xFF5
  6487                           prodh	equ	0xFF4
  6488                           prodl	equ	0xFF3
  6489                           postinc0	equ	0xFEE
  6490                           wreg	equ	0xFE8
  6491                           postdec1	equ	0xFE5
  6492                           fsr1h	equ	0xFE2
  6493                           fsr1l	equ	0xFE1
  6494                           indf2	equ	0xFDF
  6495                           postinc2	equ	0xFDE
  6496                           postdec2	equ	0xFDD
  6497                           fsr2h	equ	0xFDA
  6498                           fsr2l	equ	0xFD9
  6499                           status	equ	0xFD8
  6500                           
  6501 ;; *************** function _handle_sync *****************
  6502 ;; Defined at:
  6503 ;;		line 1258 in file "../main.c"
  6504 ;; Parameters:    Size  Location     Type
  6505 ;;		None
  6506 ;; Auto vars:     Size  Location     Type
  6507 ;;  i               1   41[BANK0 ] unsigned char 
  6508 ;; Return value:  Size  Location     Type
  6509 ;;		None               void
  6510 ;; Registers used:
  6511 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6512 ;; Tracked objects:
  6513 ;;		On entry : F/0
  6514 ;;		On exit  : F/0
  6515 ;;		Unchanged: 0/0
  6516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6517 ;;      Params:         0       0       0       0       0       0       0
  6518 ;;      Locals:         0       1       0       0       0       0       0
  6519 ;;      Temps:          0       2       0       0       0       0       0
  6520 ;;      Totals:         0       3       0       0       0       0       0
  6521 ;;Total ram usage:        3 bytes
  6522 ;; Hardware stack levels used:    1
  6523 ;; Hardware stack levels required when called:    8
  6524 ;; This function calls:
  6525 ;;		_readEEPROM
  6526 ;;		_sendTempEvent
  6527 ;; This function is called by:
  6528 ;;		_main
  6529 ;; This function uses a non-reentrant model
  6530 ;;
  6531                           
  6532                           	psect	text27
  6533  005138                     __ptext27:
  6534                           	opt stack 0
  6535  005138                     _handle_sync:
  6536                           	opt stack 22
  6537                           
  6538                           ; BSR set to: 0
  6539                           ;main.c: 1259: uint8_t i;
  6540                           ;main.c: 1261: for (i = 0; i < 6; i++) {
  6541                           
  6542                           ;incstack = 0
  6543                           ;incstack = 0
  6544  005138  6B89               	clrf	handle_sync@i& (0+255),b
  6545  00513A                     l10123:
  6546                           
  6547                           ; BSR set to: 0
  6548                           ;main.c: 1263: if ( ( ( 0xff == vscp_imsg.data[ 1 ] ) ||
  6549                           ;main.c: 1264: ( readEEPROM( 0x73 + 2*i ) == vscp_imsg.data[ 1 ] ) ) &&
  6550                           ;main.c: 1265: ( ( 0xff == vscp_imsg.data[ 2 ] ) ||
  6551                           ;main.c: 1266: ( readEEPROM( 0x74 + 2*i ) == vscp_imsg.data[ 2 ] ) ) ) {
  6552  00513A  29C4               	incf	(_vscp_imsg+7)& (0+255),w,b
  6553  00513C  E010               	bz	l10127
  6554                           
  6555                           ; BSR set to: 0
  6556  00513E  90D8               	bcf	status,0,c
  6557  005140  3589               	rlcf	handle_sync@i& (0+255),w,b
  6558  005142  6F87               	movwf	??_handle_sync& (0+255),b
  6559  005144  6B88               	clrf	(??_handle_sync+1)& (0+255),b
  6560  005146  3788               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6561  005148  0E73               	movlw	115
  6562  00514A  2587               	addwf	??_handle_sync& (0+255),w,b
  6563  00514C  6E16               	movwf	?_readEEPROM,c
  6564  00514E  0E00               	movlw	0
  6565  005150  2188               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6566  005152  6E17               	movwf	?_readEEPROM+1,c
  6567  005154  ECD6  F02D         	call	_readEEPROM	;wreg free
  6568  005158  0100               	movlb	0	; () banked
  6569  00515A  19C4               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  6570  00515C  E128               	bnz	l10137
  6571  00515E                     l10127:
  6572                           
  6573                           ; BSR set to: 0
  6574  00515E  29C5               	incf	(_vscp_imsg+8)& (0+255),w,b
  6575  005160  E010               	bz	l294
  6576                           
  6577                           ; BSR set to: 0
  6578  005162  90D8               	bcf	status,0,c
  6579  005164  3589               	rlcf	handle_sync@i& (0+255),w,b
  6580  005166  6F87               	movwf	??_handle_sync& (0+255),b
  6581  005168  6B88               	clrf	(??_handle_sync+1)& (0+255),b
  6582  00516A  3788               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6583  00516C  0E74               	movlw	116
  6584  00516E  2587               	addwf	??_handle_sync& (0+255),w,b
  6585  005170  6E16               	movwf	?_readEEPROM,c
  6586  005172  0E00               	movlw	0
  6587  005174  2188               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6588  005176  6E17               	movwf	?_readEEPROM+1,c
  6589  005178  ECD6  F02D         	call	_readEEPROM	;wreg free
  6590  00517C  0100               	movlb	0	; () banked
  6591  00517E  19C5               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  6592  005180  E116               	bnz	l10137
  6593  005182                     l294:
  6594                           
  6595                           ; BSR set to: 0
  6596                           ;main.c: 1269: timeout_clock = 0;
  6597  005182  0101               	movlb	1	; () banked
  6598  005184  6B16               	clrf	_timeout_clock& (0+255),b	;volatile
  6599  005186  6B17               	clrf	(_timeout_clock+1)& (0+255),b	;volatile
  6600  005188  6B18               	clrf	(_timeout_clock+2)& (0+255),b	;volatile
  6601  00518A  6B19               	clrf	(_timeout_clock+3)& (0+255),b	;volatile
  6602                           
  6603                           ;main.c: 1270: while (!sendTempEvent(i)) {
  6604  00518C  D00A               	goto	l10135
  6605  00518E                     l10131:
  6606                           
  6607                           ;main.c: 1271: if (timeout_clock > 1000) break;
  6608  00518E  0EE9               	movlw	233
  6609  005190  0101               	movlb	1	; () banked
  6610  005192  5D16               	subwf	_timeout_clock& (0+255),w,b	;volatile
  6611  005194  0E03               	movlw	3
  6612  005196  5917               	subwfb	(_timeout_clock+1)& (0+255),w,b	;volatile
  6613  005198  0E00               	movlw	0
  6614  00519A  5918               	subwfb	(_timeout_clock+2)& (0+255),w,b	;volatile
  6615  00519C  0E00               	movlw	0
  6616  00519E  5919               	subwfb	(_timeout_clock+3)& (0+255),w,b	;volatile
  6617  0051A0  E206               	bc	l10137
  6618  0051A2                     l10135:
  6619                           
  6620                           ; BSR set to: 1
  6621  0051A2  0100               	movlb	0	; () banked
  6622  0051A4  5189               	movf	handle_sync@i& (0+255),w,b
  6623  0051A6  EC5A  F028         	call	_sendTempEvent
  6624  0051AA  0900               	iorlw	0
  6625  0051AC  E0F0               	bz	l10131
  6626  0051AE                     l10137:
  6627  0051AE  0100               	movlb	0	; () banked
  6628  0051B0  2B89               	incf	handle_sync@i& (0+255),f,b
  6629                           
  6630                           ; BSR set to: 0
  6631  0051B2  0E05               	movlw	5
  6632  0051B4  6589               	cpfsgt	handle_sync@i& (0+255),b
  6633  0051B6  D7C1               	goto	l10123
  6634                           
  6635                           ; BSR set to: 0
  6636  0051B8  0C05               	retlw	5
  6637  0051BA                     __end_of_handle_sync:
  6638                           	opt stack 0
  6639                           tblptru	equ	0xFF8
  6640                           tblptrh	equ	0xFF7
  6641                           tblptrl	equ	0xFF6
  6642                           tablat	equ	0xFF5
  6643                           prodh	equ	0xFF4
  6644                           prodl	equ	0xFF3
  6645                           postinc0	equ	0xFEE
  6646                           wreg	equ	0xFE8
  6647                           postdec1	equ	0xFE5
  6648                           fsr1h	equ	0xFE2
  6649                           fsr1l	equ	0xFE1
  6650                           indf2	equ	0xFDF
  6651                           postinc2	equ	0xFDE
  6652                           postdec2	equ	0xFDD
  6653                           fsr2h	equ	0xFDA
  6654                           fsr2l	equ	0xFD9
  6655                           status	equ	0xFD8
  6656                           
  6657 ;; *************** function _sendTempEvent *****************
  6658 ;; Defined at:
  6659 ;;		line 815 in file "../main.c"
  6660 ;; Parameters:    Size  Location     Type
  6661 ;;  i               1    wreg     unsigned char 
  6662 ;; Auto vars:     Size  Location     Type
  6663 ;;  i               1   38[BANK0 ] unsigned char 
  6664 ;; Return value:  Size  Location     Type
  6665 ;;                  1    wreg      unsigned char 
  6666 ;; Registers used:
  6667 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6668 ;; Tracked objects:
  6669 ;;		On entry : F/0
  6670 ;;		On exit  : 0/0
  6671 ;;		Unchanged: 0/0
  6672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6673 ;;      Params:         0       0       0       0       0       0       0
  6674 ;;      Locals:         0       1       0       0       0       0       0
  6675 ;;      Temps:          0       1       0       0       0       0       0
  6676 ;;      Totals:         0       2       0       0       0       0       0
  6677 ;;Total ram usage:        2 bytes
  6678 ;; Hardware stack levels used:    1
  6679 ;; Hardware stack levels required when called:    7
  6680 ;; This function calls:
  6681 ;;		_readEEPROM
  6682 ;;		_vscp_sendEvent
  6683 ;;		_setEventData
  6684 ;; This function is called by:
  6685 ;;		_doOneSecondWork
  6686 ;;		_handle_sync
  6687 ;; This function uses a non-reentrant model
  6688 ;;
  6689                           
  6690                           	psect	text28
  6691  0050B4                     __ptext28:
  6692                           	opt stack 0
  6693  0050B4                     _sendTempEvent:
  6694                           	opt stack 22
  6695                           
  6696                           ; BSR set to: 0
  6697                           ;incstack = 0
  6698                           ;incstack = 0
  6699                           ;sendTempEvent@i stored from wreg
  6700  0050B4  CFE8 F086          	movff	wreg,sendTempEvent@i
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;main.c: 816: vscp_omsg.priority = 0x03;
  6704  0050B8  0E03               	movlw	3
  6705  0050BA  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  6706                           
  6707                           ;main.c: 817: vscp_omsg.flags = 0x80 + 4;
  6708  0050BC  0E84               	movlw	132
  6709  0050BE  6FCB               	movwf	_vscp_omsg& (0+255),b
  6710                           
  6711                           ;main.c: 818: vscp_omsg.vscp_class = 10;
  6712  0050C0  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6713  0050C2  0E0A               	movlw	10
  6714  0050C4  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6715                           
  6716                           ;main.c: 819: vscp_omsg.vscp_type = 6;
  6717  0050C6  0E06               	movlw	6
  6718  0050C8  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  6719                           
  6720                           ; BSR set to: 0
  6721                           ;main.c: 822: vscp_omsg.data[ 0 ] = 0x80 |
  6722                           ;main.c: 823: ((0x03 & readEEPROM(i + 0x43)) << 3) |
  6723                           ;main.c: 824: i;
  6724  0050CA  0E43               	movlw	67
  6725  0050CC  2586               	addwf	sendTempEvent@i& (0+255),w,b
  6726  0050CE  6E16               	movwf	?_readEEPROM,c
  6727  0050D0  6A17               	clrf	?_readEEPROM+1,c
  6728  0050D2  0E00               	movlw	0
  6729  0050D4  2217               	addwfc	?_readEEPROM+1,f,c
  6730  0050D6  ECD6  F02D         	call	_readEEPROM	;wreg free
  6731  0050DA  0100               	movlb	0	; () banked
  6732  0050DC  6F85               	movwf	??_sendTempEvent& (0+255),b
  6733  0050DE  0E03               	movlw	3
  6734  0050E0  1785               	andwf	??_sendTempEvent& (0+255),f,b
  6735  0050E2  90D8               	bcf	status,0,c
  6736  0050E4  3785               	rlcf	??_sendTempEvent& (0+255),f,b
  6737  0050E6  90D8               	bcf	status,0,c
  6738  0050E8  3785               	rlcf	??_sendTempEvent& (0+255),f,b
  6739  0050EA  90D8               	bcf	status,0,c
  6740  0050EC  3585               	rlcf	??_sendTempEvent& (0+255),w,b
  6741  0050EE  1186               	iorwf	sendTempEvent@i& (0+255),w,b
  6742  0050F0  0980               	iorlw	128
  6743  0050F2  6FD1               	movwf	(_vscp_omsg+6)& (0+255),b
  6744                           
  6745                           ; BSR set to: 0
  6746                           ;main.c: 826: vscp_omsg.data[ 1 ] = 0x82;
  6747  0050F4  0E82               	movlw	130
  6748  0050F6  6FD2               	movwf	(_vscp_omsg+7)& (0+255),b
  6749                           
  6750                           ; BSR set to: 0
  6751                           ;main.c: 828: setEventData( current_temp[i],
  6752                           ;main.c: 829: ( 0x03 & readEEPROM(i + 0x43 ) ) );
  6753  0050F8  5186               	movf	sendTempEvent@i& (0+255),w,b
  6754  0050FA  0D02               	mullw	2
  6755  0050FC  0E00               	movlw	low _current_temp
  6756  0050FE  24F3               	addwf	prodl,w,c
  6757  005100  6ED9               	movwf	fsr2l,c
  6758  005102  0E01               	movlw	high _current_temp
  6759  005104  20F4               	addwfc	prodh,w,c
  6760  005106  6EDA               	movwf	fsr2h,c
  6761  005108  CFDE F07C          	movff	postinc2,?_setEventData
  6762  00510C  CFDD F07D          	movff	postdec2,?_setEventData+1
  6763  005110  0E43               	movlw	67
  6764  005112  2586               	addwf	sendTempEvent@i& (0+255),w,b
  6765  005114  6E16               	movwf	?_readEEPROM,c
  6766  005116  6A17               	clrf	?_readEEPROM+1,c
  6767  005118  0E00               	movlw	0
  6768  00511A  2217               	addwfc	?_readEEPROM+1,f,c
  6769  00511C  ECD6  F02D         	call	_readEEPROM	;wreg free
  6770  005120  0B03               	andlw	3
  6771  005122  0100               	movlb	0	; () banked
  6772  005124  6F7E               	movwf	(?_setEventData+2)& (0+255),b
  6773  005126  EC2F  F026         	call	_setEventData	;wreg free
  6774                           
  6775                           ; BSR set to: 0
  6776                           ;main.c: 832: if (!vscp_sendEvent()) {
  6777  00512A  EC37  F02C         	call	_vscp_sendEvent	;wreg free
  6778  00512E  0900               	iorlw	0
  6779                           
  6780                           ;main.c: 833: return 0;
  6781  005130  0E00               	movlw	0
  6782  005132  A4D8               	btfss	status,2,c
  6783                           
  6784                           ;main.c: 834: }
  6785                           ;main.c: 836: return 1;
  6786  005134  0E01               	movlw	1
  6787  005136  0012               	return	
  6788  005138                     __end_of_sendTempEvent:
  6789                           	opt stack 0
  6790                           tblptru	equ	0xFF8
  6791                           tblptrh	equ	0xFF7
  6792                           tblptrl	equ	0xFF6
  6793                           tablat	equ	0xFF5
  6794                           prodh	equ	0xFF4
  6795                           prodl	equ	0xFF3
  6796                           postinc0	equ	0xFEE
  6797                           wreg	equ	0xFE8
  6798                           postdec1	equ	0xFE5
  6799                           fsr1h	equ	0xFE2
  6800                           fsr1l	equ	0xFE1
  6801                           indf2	equ	0xFDF
  6802                           postinc2	equ	0xFDE
  6803                           postdec2	equ	0xFDD
  6804                           fsr2h	equ	0xFDA
  6805                           fsr2l	equ	0xFD9
  6806                           status	equ	0xFD8
  6807                           
  6808 ;; *************** function _setEventData *****************
  6809 ;; Defined at:
  6810 ;;		line 844 in file "../main.c"
  6811 ;; Parameters:    Size  Location     Type
  6812 ;;  v               2   28[BANK0 ] int 
  6813 ;;  unit            1   30[BANK0 ] unsigned char 
  6814 ;; Auto vars:     Size  Location     Type
  6815 ;;  newval          4   31[BANK0 ] unsigned char 
  6816 ;;  ival            2   35[BANK0 ] int 
  6817 ;; Return value:  Size  Location     Type
  6818 ;;		None               void
  6819 ;; Registers used:
  6820 ;;		wreg, status,2, status,0, cstack
  6821 ;; Tracked objects:
  6822 ;;		On entry : F/0
  6823 ;;		On exit  : F/0
  6824 ;;		Unchanged: 0/0
  6825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6826 ;;      Params:         0       3       0       0       0       0       0
  6827 ;;      Locals:         0       6       0       0       0       0       0
  6828 ;;      Temps:          0       0       0       0       0       0       0
  6829 ;;      Totals:         0       9       0       0       0       0       0
  6830 ;;Total ram usage:        9 bytes
  6831 ;; Hardware stack levels used:    1
  6832 ;; Hardware stack levels required when called:    5
  6833 ;; This function calls:
  6834 ;;		_Celsius2Kelvin
  6835 ;;		_Celsius2Fahrenheit
  6836 ;;		___awtofl
  6837 ;;		___fltol
  6838 ;; This function is called by:
  6839 ;;		_sendTempEvent
  6840 ;; This function uses a non-reentrant model
  6841 ;;
  6842                           
  6843                           	psect	text29
  6844  004C5E                     __ptext29:
  6845                           	opt stack 0
  6846  004C5E                     _setEventData:
  6847                           	opt stack 23
  6848                           
  6849                           ; BSR set to: 0
  6850                           ;main.c: 845: double newval;
  6851                           ;main.c: 846: int ival;
  6852                           ;main.c: 848: if (0 == unit) {
  6853                           
  6854                           ;incstack = 0
  6855                           ;incstack = 0
  6856  004C5E  677E               	tstfsz	setEventData@unit& (0+255),b
  6857  004C60  D019               	goto	l10493
  6858                           
  6859                           ; BSR set to: 0
  6860                           ;main.c: 850: newval = Celsius2Kelvin(v);
  6861  004C62  C07C  F018         	movff	setEventData@v,?___awtofl
  6862  004C66  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  6863  004C6A  ECE8  F02B         	call	___awtofl	;wreg free
  6864  004C6E  C01B  F02F         	movff	?___awtofl+3,?_Celsius2Kelvin+3
  6865  004C72  C01A  F02E         	movff	?___awtofl+2,?_Celsius2Kelvin+2
  6866  004C76  C019  F02D         	movff	?___awtofl+1,?_Celsius2Kelvin+1
  6867  004C7A  C018  F02C         	movff	?___awtofl,?_Celsius2Kelvin
  6868  004C7E  EC05  F02C         	call	_Celsius2Kelvin	;wreg free
  6869  004C82  C02F  F082         	movff	?_Celsius2Kelvin+3,setEventData@newval+3
  6870  004C86  C02E  F081         	movff	?_Celsius2Kelvin+2,setEventData@newval+2
  6871  004C8A  C02D  F080         	movff	?_Celsius2Kelvin+1,setEventData@newval+1
  6872  004C8E  C02C  F07F         	movff	?_Celsius2Kelvin,setEventData@newval
  6873                           
  6874                           ;main.c: 851: } else if (2 == unit) {
  6875  004C92  D02A               	goto	l254
  6876  004C94                     l10493:
  6877                           
  6878                           ; BSR set to: 0
  6879  004C94  517E               	movf	setEventData@unit& (0+255),w,b
  6880  004C96  0A02               	xorlw	2
  6881  004C98  E119               	bnz	l10497
  6882                           
  6883                           ; BSR set to: 0
  6884                           ;main.c: 853: newval = Celsius2Fahrenheit(v);
  6885  004C9A  C07C  F018         	movff	setEventData@v,?___awtofl
  6886  004C9E  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  6887  004CA2  ECE8  F02B         	call	___awtofl	;wreg free
  6888  004CA6  C01B  F079         	movff	?___awtofl+3,?_Celsius2Fahrenheit+3
  6889  004CAA  C01A  F078         	movff	?___awtofl+2,?_Celsius2Fahrenheit+2
  6890  004CAE  C019  F077         	movff	?___awtofl+1,?_Celsius2Fahrenheit+1
  6891  004CB2  C018  F076         	movff	?___awtofl,?_Celsius2Fahrenheit
  6892  004CB6  EC54  F029         	call	_Celsius2Fahrenheit	;wreg free
  6893  004CBA  C079  F082         	movff	?_Celsius2Fahrenheit+3,setEventData@newval+3
  6894  004CBE  C078  F081         	movff	?_Celsius2Fahrenheit+2,setEventData@newval+2
  6895  004CC2  C077  F080         	movff	?_Celsius2Fahrenheit+1,setEventData@newval+1
  6896  004CC6  C076  F07F         	movff	?_Celsius2Fahrenheit,setEventData@newval
  6897                           
  6898                           ;main.c: 854: } else {
  6899  004CCA  D00E               	goto	l254
  6900  004CCC                     l10497:
  6901                           
  6902                           ; BSR set to: 0
  6903                           ;main.c: 856: newval = v;
  6904  004CCC  C07C  F018         	movff	setEventData@v,?___awtofl
  6905  004CD0  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  6906  004CD4  ECE8  F02B         	call	___awtofl	;wreg free
  6907  004CD8  C01B  F082         	movff	?___awtofl+3,setEventData@newval+3
  6908  004CDC  C01A  F081         	movff	?___awtofl+2,setEventData@newval+2
  6909  004CE0  C019  F080         	movff	?___awtofl+1,setEventData@newval+1
  6910  004CE4  C018  F07F         	movff	?___awtofl,setEventData@newval
  6911  004CE8                     l254:
  6912                           
  6913                           ;main.c: 857: }
  6914                           ;main.c: 859: ival = (int) newval;
  6915  004CE8  C07F  F076         	movff	setEventData@newval,?___fltol
  6916  004CEC  C080  F077         	movff	setEventData@newval+1,?___fltol+1
  6917  004CF0  C081  F078         	movff	setEventData@newval+2,?___fltol+2
  6918  004CF4  C082  F079         	movff	setEventData@newval+3,?___fltol+3
  6919  004CF8  EC7D  F027         	call	___fltol	;wreg free
  6920  004CFC  C076  F083         	movff	?___fltol,setEventData@ival
  6921  004D00  C077  F084         	movff	?___fltol+1,setEventData@ival+1
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;main.c: 861: vscp_omsg.data[ 2 ] = ((ival & 0xff00) >> 8);
  6925  004D04  5184               	movf	(setEventData@ival+1)& (0+255),w,b
  6926  004D06  6FD3               	movwf	(_vscp_omsg+8)& (0+255),b
  6927                           
  6928                           ; BSR set to: 0
  6929                           ;main.c: 862: vscp_omsg.data[ 3 ] = (ival & 0xff);
  6930  004D08  C083  F0D4         	movff	setEventData@ival,_vscp_omsg+9
  6931                           
  6932                           ; BSR set to: 0
  6933  004D0C  0012               	return	
  6934  004D0E                     __end_of_setEventData:
  6935                           	opt stack 0
  6936                           tblptru	equ	0xFF8
  6937                           tblptrh	equ	0xFF7
  6938                           tblptrl	equ	0xFF6
  6939                           tablat	equ	0xFF5
  6940                           prodh	equ	0xFF4
  6941                           prodl	equ	0xFF3
  6942                           postinc0	equ	0xFEE
  6943                           wreg	equ	0xFE8
  6944                           postdec1	equ	0xFE5
  6945                           fsr1h	equ	0xFE2
  6946                           fsr1l	equ	0xFE1
  6947                           indf2	equ	0xFDF
  6948                           postinc2	equ	0xFDE
  6949                           postdec2	equ	0xFDD
  6950                           fsr2h	equ	0xFDA
  6951                           fsr2l	equ	0xFD9
  6952                           status	equ	0xFD8
  6953                           
  6954 ;; *************** function _Celsius2Fahrenheit *****************
  6955 ;; Defined at:
  6956 ;;		line 42 in file "../ntc.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;  tc              4   22[BANK0 ] int 
  6959 ;; Auto vars:     Size  Location     Type
  6960 ;;		None
  6961 ;; Return value:  Size  Location     Type
  6962 ;;                  4   22[BANK0 ] int 
  6963 ;; Registers used:
  6964 ;;		wreg, status,2, status,0, cstack
  6965 ;; Tracked objects:
  6966 ;;		On entry : 0/0
  6967 ;;		On exit  : 0/0
  6968 ;;		Unchanged: 0/0
  6969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6970 ;;      Params:         0       4       0       0       0       0       0
  6971 ;;      Locals:         0       0       0       0       0       0       0
  6972 ;;      Temps:          0       0       0       0       0       0       0
  6973 ;;      Totals:         0       4       0       0       0       0       0
  6974 ;;Total ram usage:        4 bytes
  6975 ;; Hardware stack levels used:    1
  6976 ;; Hardware stack levels required when called:    4
  6977 ;; This function calls:
  6978 ;;		___fladd
  6979 ;;		___fldiv
  6980 ;;		___flmul
  6981 ;; This function is called by:
  6982 ;;		_setEventData
  6983 ;; This function uses a non-reentrant model
  6984 ;;
  6985                           
  6986                           	psect	text30
  6987  0052A8                     __ptext30:
  6988                           	opt stack 0
  6989  0052A8                     _Celsius2Fahrenheit:
  6990                           	opt stack 23
  6991                           
  6992                           ;ntc.c: 43: return ( (9 * tc + 16000) / 5);
  6993                           
  6994                           ; BSR set to: 0
  6995                           ;incstack = 0
  6996                           ;incstack = 0
  6997  0052A8  6A21               	clrf	?___fladd+4,c
  6998  0052AA  6A22               	clrf	?___fladd+5,c
  6999  0052AC  0E7A               	movlw	122
  7000  0052AE  6E23               	movwf	?___fladd+6,c
  7001  0052B0  0E46               	movlw	70
  7002  0052B2  6E24               	movwf	?___fladd+7,c
  7003  0052B4  0100               	movlb	0	; () banked
  7004  0052B6  6B64               	clrf	(?___flmul+4)& (0+255),b
  7005  0052B8  6B65               	clrf	(?___flmul+5)& (0+255),b
  7006  0052BA  0E10               	movlw	16
  7007  0052BC  6F66               	movwf	(?___flmul+6)& (0+255),b
  7008  0052BE  0E41               	movlw	65
  7009  0052C0  6F67               	movwf	(?___flmul+7)& (0+255),b
  7010  0052C2  C076  F060         	movff	Celsius2Fahrenheit@tc,?___flmul
  7011  0052C6  C077  F061         	movff	Celsius2Fahrenheit@tc+1,?___flmul+1
  7012  0052CA  C078  F062         	movff	Celsius2Fahrenheit@tc+2,?___flmul+2
  7013  0052CE  C079  F063         	movff	Celsius2Fahrenheit@tc+3,?___flmul+3
  7014  0052D2  ECEC  F023         	call	___flmul	;wreg free
  7015  0052D6  C063  F020         	movff	?___flmul+3,?___fladd+3
  7016  0052DA  C062  F01F         	movff	?___flmul+2,?___fladd+2
  7017  0052DE  C061  F01E         	movff	?___flmul+1,?___fladd+1
  7018  0052E2  C060  F01D         	movff	?___flmul,?___fladd
  7019  0052E6  EC6B  F020         	call	___fladd	;wreg free
  7020  0052EA  C020  F02F         	movff	?___fladd+3,?___fldiv+3
  7021  0052EE  C01F  F02E         	movff	?___fladd+2,?___fldiv+2
  7022  0052F2  C01E  F02D         	movff	?___fladd+1,?___fldiv+1
  7023  0052F6  C01D  F02C         	movff	?___fladd,?___fldiv
  7024  0052FA  6A30               	clrf	?___fldiv+4,c
  7025  0052FC  6A31               	clrf	?___fldiv+5,c
  7026  0052FE  0EA0               	movlw	160
  7027  005300  6E32               	movwf	?___fldiv+6,c
  7028  005302  0E40               	movlw	64
  7029  005304  6E33               	movwf	?___fldiv+7,c
  7030  005306  EC87  F026         	call	___fldiv	;wreg free
  7031  00530A  C02F  F079         	movff	?___fldiv+3,?_Celsius2Fahrenheit+3
  7032  00530E  C02E  F078         	movff	?___fldiv+2,?_Celsius2Fahrenheit+2
  7033  005312  C02D  F077         	movff	?___fldiv+1,?_Celsius2Fahrenheit+1
  7034  005316  C02C  F076         	movff	?___fldiv,?_Celsius2Fahrenheit
  7035  00531A  0012               	return	
  7036  00531C                     __end_of_Celsius2Fahrenheit:
  7037                           	opt stack 0
  7038                           tblptru	equ	0xFF8
  7039                           tblptrh	equ	0xFF7
  7040                           tblptrl	equ	0xFF6
  7041                           tablat	equ	0xFF5
  7042                           prodh	equ	0xFF4
  7043                           prodl	equ	0xFF3
  7044                           postinc0	equ	0xFEE
  7045                           wreg	equ	0xFE8
  7046                           postdec1	equ	0xFE5
  7047                           fsr1h	equ	0xFE2
  7048                           fsr1l	equ	0xFE1
  7049                           indf2	equ	0xFDF
  7050                           postinc2	equ	0xFDE
  7051                           postdec2	equ	0xFDD
  7052                           fsr2h	equ	0xFDA
  7053                           fsr2l	equ	0xFD9
  7054                           status	equ	0xFD8
  7055                           
  7056 ;; *************** function ___fladd *****************
  7057 ;; Defined at:
  7058 ;;		line 89 in file "/opt/microchip/xc8/v1.21/sources/common/fladd.c"
  7059 ;; Parameters:    Size  Location     Type
  7060 ;;  f1              4   28[COMRAM] int 
  7061 ;;  f2              4   32[COMRAM] int 
  7062 ;; Auto vars:     Size  Location     Type
  7063 ;;  exp1            1   42[COMRAM] unsigned char 
  7064 ;;  exp2            1   41[COMRAM] unsigned char 
  7065 ;;  sign            1   40[COMRAM] unsigned char 
  7066 ;; Return value:  Size  Location     Type
  7067 ;;                  4   28[COMRAM] unsigned char 
  7068 ;; Registers used:
  7069 ;;		wreg, status,2, status,0, cstack
  7070 ;; Tracked objects:
  7071 ;;		On entry : 0/0
  7072 ;;		On exit  : 0/0
  7073 ;;		Unchanged: 0/0
  7074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7075 ;;      Params:         8       0       0       0       0       0       0
  7076 ;;      Locals:         6       0       0       0       0       0       0
  7077 ;;      Temps:          1       0       0       0       0       0       0
  7078 ;;      Totals:        15       0       0       0       0       0       0
  7079 ;;Total ram usage:       15 bytes
  7080 ;; Hardware stack levels used:    1
  7081 ;; Hardware stack levels required when called:    3
  7082 ;; This function calls:
  7083 ;;		___flpack
  7084 ;; This function is called by:
  7085 ;;		_doWork
  7086 ;;		_Celsius2Fahrenheit
  7087 ;;		_Celsius2Kelvin
  7088 ;;		___asfladd
  7089 ;;		_floor
  7090 ;;		___flsub
  7091 ;;		_log
  7092 ;;		_eval_poly
  7093 ;; This function uses a non-reentrant model
  7094 ;;
  7095                           
  7096                           	psect	text31
  7097  0040D6                     __ptext31:
  7098                           	opt stack 0
  7099  0040D6                     ___fladd:
  7100                           	opt stack 25
  7101                           
  7102                           ;incstack = 0
  7103                           ;incstack = 0
  7104  0040D6  341F               	rlcf	(___fladd@f1+2)& (0+255),w,c
  7105  0040D8  3420               	rlcf	(___fladd@f1+3)& (0+255),w,c
  7106  0040DA  6E2B               	movwf	___fladd@exp1,c
  7107  0040DC  3423               	rlcf	(___fladd@f2+2)& (0+255),w,c
  7108  0040DE  3424               	rlcf	(___fladd@f2+3)& (0+255),w,c
  7109  0040E0  6E2A               	movwf	___fladd@exp2,c
  7110  0040E2  502B               	movf	___fladd@exp1,w,c
  7111  0040E4  E009               	bz	l1578
  7112  0040E6  502A               	movf	___fladd@exp2,w,c
  7113  0040E8  602B               	cpfslt	___fladd@exp1,c
  7114  0040EA  D00F               	goto	l11469
  7115  0040EC  502B               	movf	___fladd@exp1,w,c
  7116  0040EE  5C2A               	subwf	___fladd@exp2,w,c
  7117  0040F0  6E25               	movwf	??___fladd& (0+255),c
  7118  0040F2  0E21               	movlw	33
  7119  0040F4  5C25               	subwf	??___fladd,w,c
  7120  0040F6  E309               	bnc	l11469
  7121  0040F8                     l1578:
  7122  0040F8  C021  F01D         	movff	___fladd@f2,?___fladd
  7123  0040FC  C022  F01E         	movff	___fladd@f2+1,?___fladd+1
  7124  004100  C023  F01F         	movff	___fladd@f2+2,?___fladd+2
  7125  004104  C024  F020         	movff	___fladd@f2+3,?___fladd+3
  7126  004108  D095               	goto	l1579
  7127  00410A                     l11469:
  7128  00410A  502A               	movf	___fladd@exp2,w,c
  7129  00410C  E009               	bz	l1582
  7130  00410E  502B               	movf	___fladd@exp1,w,c
  7131  004110  602A               	cpfslt	___fladd@exp2,c
  7132  004112  D00F               	goto	l11475
  7133  004114  502A               	movf	___fladd@exp2,w,c
  7134  004116  5C2B               	subwf	___fladd@exp1,w,c
  7135  004118  6E25               	movwf	??___fladd& (0+255),c
  7136  00411A  0E21               	movlw	33
  7137  00411C  5C25               	subwf	??___fladd,w,c
  7138  00411E  E309               	bnc	l11475
  7139  004120                     l1582:
  7140  004120  C01D  F01D         	movff	___fladd@f1,?___fladd
  7141  004124  C01E  F01E         	movff	___fladd@f1+1,?___fladd+1
  7142  004128  C01F  F01F         	movff	___fladd@f1+2,?___fladd+2
  7143  00412C  C020  F020         	movff	___fladd@f1+3,?___fladd+3
  7144  004130  D081               	goto	l1579
  7145  004132                     l11475:
  7146  004132  0E06               	movlw	6
  7147  004134  6E29               	movwf	___fladd@sign,c
  7148  004136  BE20               	btfsc	___fladd@f1+3,7,c
  7149  004138  8E29               	bsf	___fladd@sign,7,c
  7150  00413A  BE24               	btfsc	___fladd@f2+3,7,c
  7151  00413C  8C29               	bsf	___fladd@sign,6,c
  7152  00413E  8E1F               	bsf	___fladd@f1+2,7,c
  7153  004140  6A20               	clrf	___fladd@f1+3,c
  7154  004142  8E23               	bsf	___fladd@f2+2,7,c
  7155  004144  6A24               	clrf	___fladd@f2+3,c
  7156  004146  502A               	movf	___fladd@exp2,w,c
  7157  004148  602B               	cpfslt	___fladd@exp1,c
  7158  00414A  D018               	goto	l11501
  7159  00414C                     l11491:
  7160  00414C  90D8               	bcf	status,0,c
  7161  00414E  3621               	rlcf	___fladd@f2,f,c
  7162  004150  3622               	rlcf	___fladd@f2+1,f,c
  7163  004152  3623               	rlcf	___fladd@f2+2,f,c
  7164  004154  3624               	rlcf	___fladd@f2+3,f,c
  7165  004156  062A               	decf	___fladd@exp2,f,c
  7166  004158  502A               	movf	___fladd@exp2,w,c
  7167  00415A  182B               	xorwf	___fladd@exp1,w,c
  7168  00415C  E00B               	bz	l11499
  7169  00415E  0629               	decf	___fladd@sign,f,c
  7170  004160  5029               	movf	___fladd@sign& (0+255),w,c
  7171  004162  0B07               	andlw	7
  7172  004164  E007               	bz	l11499
  7173  004166  D7F2               	goto	l11491
  7174  004168                     l11497:
  7175  004168  90D8               	bcf	status,0,c
  7176  00416A  3220               	rrcf	___fladd@f1+3,f,c
  7177  00416C  321F               	rrcf	___fladd@f1+2,f,c
  7178  00416E  321E               	rrcf	___fladd@f1+1,f,c
  7179  004170  321D               	rrcf	___fladd@f1,f,c
  7180  004172  2A2B               	incf	___fladd@exp1,f,c
  7181  004174                     l11499:
  7182  004174  502A               	movf	___fladd@exp2,w,c
  7183  004176  622B               	cpfseq	___fladd@exp1,c
  7184  004178  D7F7               	goto	l11497
  7185  00417A  D01A               	goto	l1593
  7186  00417C                     l11501:
  7187  00417C  502B               	movf	___fladd@exp1,w,c
  7188  00417E  602A               	cpfslt	___fladd@exp2,c
  7189  004180  D017               	goto	l1593
  7190  004182                     l11503:
  7191  004182  90D8               	bcf	status,0,c
  7192  004184  361D               	rlcf	___fladd@f1,f,c
  7193  004186  361E               	rlcf	___fladd@f1+1,f,c
  7194  004188  361F               	rlcf	___fladd@f1+2,f,c
  7195  00418A  3620               	rlcf	___fladd@f1+3,f,c
  7196  00418C  062B               	decf	___fladd@exp1,f,c
  7197  00418E  502A               	movf	___fladd@exp2,w,c
  7198  004190  182B               	xorwf	___fladd@exp1,w,c
  7199  004192  E00B               	bz	l11511
  7200  004194  0629               	decf	___fladd@sign,f,c
  7201  004196  5029               	movf	___fladd@sign& (0+255),w,c
  7202  004198  0B07               	andlw	7
  7203  00419A  E007               	bz	l11511
  7204  00419C  D7F2               	goto	l11503
  7205  00419E                     l11509:
  7206  00419E  90D8               	bcf	status,0,c
  7207  0041A0  3224               	rrcf	___fladd@f2+3,f,c
  7208  0041A2  3223               	rrcf	___fladd@f2+2,f,c
  7209  0041A4  3222               	rrcf	___fladd@f2+1,f,c
  7210  0041A6  3221               	rrcf	___fladd@f2,f,c
  7211  0041A8  2A2A               	incf	___fladd@exp2,f,c
  7212  0041AA                     l11511:
  7213  0041AA  502A               	movf	___fladd@exp2,w,c
  7214  0041AC  622B               	cpfseq	___fladd@exp1,c
  7215  0041AE  D7F7               	goto	l11509
  7216  0041B0                     l1593:
  7217  0041B0  AE29               	btfss	___fladd@sign,7,c
  7218  0041B2  D009               	goto	l11515
  7219  0041B4  1E1D               	comf	___fladd@f1,f,c
  7220  0041B6  1E1E               	comf	___fladd@f1+1,f,c
  7221  0041B8  1E1F               	comf	___fladd@f1+2,f,c
  7222  0041BA  1E20               	comf	___fladd@f1+3,f,c
  7223  0041BC  2A1D               	incf	___fladd@f1,f,c
  7224  0041BE  0E00               	movlw	0
  7225  0041C0  221E               	addwfc	___fladd@f1+1,f,c
  7226  0041C2  221F               	addwfc	___fladd@f1+2,f,c
  7227  0041C4  2220               	addwfc	___fladd@f1+3,f,c
  7228  0041C6                     l11515:
  7229  0041C6  AC29               	btfss	___fladd@sign,6,c
  7230  0041C8  D009               	goto	l11519
  7231  0041CA  1E21               	comf	___fladd@f2,f,c
  7232  0041CC  1E22               	comf	___fladd@f2+1,f,c
  7233  0041CE  1E23               	comf	___fladd@f2+2,f,c
  7234  0041D0  1E24               	comf	___fladd@f2+3,f,c
  7235  0041D2  2A21               	incf	___fladd@f2,f,c
  7236  0041D4  0E00               	movlw	0
  7237  0041D6  2222               	addwfc	___fladd@f2+1,f,c
  7238  0041D8  2223               	addwfc	___fladd@f2+2,f,c
  7239  0041DA  2224               	addwfc	___fladd@f2+3,f,c
  7240  0041DC                     l11519:
  7241  0041DC  6A29               	clrf	___fladd@sign,c
  7242  0041DE  501D               	movf	___fladd@f1,w,c
  7243  0041E0  2621               	addwf	___fladd@f2,f,c
  7244  0041E2  501E               	movf	___fladd@f1+1,w,c
  7245  0041E4  2222               	addwfc	___fladd@f2+1,f,c
  7246  0041E6  501F               	movf	___fladd@f1+2,w,c
  7247  0041E8  2223               	addwfc	___fladd@f2+2,f,c
  7248  0041EA  5020               	movf	___fladd@f1+3,w,c
  7249  0041EC  2224               	addwfc	___fladd@f2+3,f,c
  7250  0041EE  AE24               	btfss	___fladd@f2+3,7,c
  7251  0041F0  D00B               	goto	l11527
  7252  0041F2  1E21               	comf	___fladd@f2,f,c
  7253  0041F4  1E22               	comf	___fladd@f2+1,f,c
  7254  0041F6  1E23               	comf	___fladd@f2+2,f,c
  7255  0041F8  1E24               	comf	___fladd@f2+3,f,c
  7256  0041FA  2A21               	incf	___fladd@f2,f,c
  7257  0041FC  0E00               	movlw	0
  7258  0041FE  2222               	addwfc	___fladd@f2+1,f,c
  7259  004200  2223               	addwfc	___fladd@f2+2,f,c
  7260  004202  2224               	addwfc	___fladd@f2+3,f,c
  7261  004204  0E01               	movlw	1
  7262  004206  6E29               	movwf	___fladd@sign,c
  7263  004208                     l11527:
  7264  004208  C021  F00E         	movff	___fladd@f2,?___flpack
  7265  00420C  C022  F00F         	movff	___fladd@f2+1,?___flpack+1
  7266  004210  C023  F010         	movff	___fladd@f2+2,?___flpack+2
  7267  004214  C024  F011         	movff	___fladd@f2+3,?___flpack+3
  7268  004218  C02B  F012         	movff	___fladd@exp1,?___flpack+4
  7269  00421C  C029  F013         	movff	___fladd@sign,?___flpack+5
  7270  004220  ECB7  F024         	call	___flpack	;wreg free
  7271  004224  C011  F020         	movff	?___flpack+3,?___fladd+3
  7272  004228  C010  F01F         	movff	?___flpack+2,?___fladd+2
  7273  00422C  C00F  F01E         	movff	?___flpack+1,?___fladd+1
  7274  004230  C00E  F01D         	movff	?___flpack,?___fladd
  7275  004234                     l1579:
  7276  004234  0012               	return	
  7277  004236                     __end_of___fladd:
  7278                           	opt stack 0
  7279                           tblptru	equ	0xFF8
  7280                           tblptrh	equ	0xFF7
  7281                           tblptrl	equ	0xFF6
  7282                           tablat	equ	0xFF5
  7283                           prodh	equ	0xFF4
  7284                           prodl	equ	0xFF3
  7285                           postinc0	equ	0xFEE
  7286                           wreg	equ	0xFE8
  7287                           postdec1	equ	0xFE5
  7288                           fsr1h	equ	0xFE2
  7289                           fsr1l	equ	0xFE1
  7290                           indf2	equ	0xFDF
  7291                           postinc2	equ	0xFDE
  7292                           postdec2	equ	0xFDD
  7293                           fsr2h	equ	0xFDA
  7294                           fsr2l	equ	0xFD9
  7295                           status	equ	0xFD8
  7296                           
  7297 ;; *************** function _Celsius2Kelvin *****************
  7298 ;; Defined at:
  7299 ;;		line 61 in file "../ntc.c"
  7300 ;; Parameters:    Size  Location     Type
  7301 ;;  tc              4   43[COMRAM] unsigned char 
  7302 ;; Auto vars:     Size  Location     Type
  7303 ;;		None
  7304 ;; Return value:  Size  Location     Type
  7305 ;;                  4   43[COMRAM] unsigned char 
  7306 ;; Registers used:
  7307 ;;		wreg, status,2, status,0, cstack
  7308 ;; Tracked objects:
  7309 ;;		On entry : 0/0
  7310 ;;		On exit  : 0/0
  7311 ;;		Unchanged: 0/0
  7312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7313 ;;      Params:         4       0       0       0       0       0       0
  7314 ;;      Locals:         0       0       0       0       0       0       0
  7315 ;;      Temps:          0       0       0       0       0       0       0
  7316 ;;      Totals:         4       0       0       0       0       0       0
  7317 ;;Total ram usage:        4 bytes
  7318 ;; Hardware stack levels used:    1
  7319 ;; Hardware stack levels required when called:    4
  7320 ;; This function calls:
  7321 ;;		___fladd
  7322 ;; This function is called by:
  7323 ;;		_setEventData
  7324 ;; This function uses a non-reentrant model
  7325 ;;
  7326                           
  7327                           	psect	text32
  7328  00580A                     __ptext32:
  7329                           	opt stack 0
  7330  00580A                     _Celsius2Kelvin:
  7331                           	opt stack 23
  7332                           
  7333                           ;ntc.c: 62: return (27316.0 + tc);
  7334                           
  7335                           ;incstack = 0
  7336                           ;incstack = 0
  7337  00580A  C02C  F01D         	movff	Celsius2Kelvin@tc,?___fladd
  7338  00580E  C02D  F01E         	movff	Celsius2Kelvin@tc+1,?___fladd+1
  7339  005812  C02E  F01F         	movff	Celsius2Kelvin@tc+2,?___fladd+2
  7340  005816  C02F  F020         	movff	Celsius2Kelvin@tc+3,?___fladd+3
  7341  00581A  6A21               	clrf	?___fladd+4,c
  7342  00581C  0E68               	movlw	104
  7343  00581E  6E22               	movwf	?___fladd+5,c
  7344  005820  0ED5               	movlw	213
  7345  005822  6E23               	movwf	?___fladd+6,c
  7346  005824  0E46               	movlw	70
  7347  005826  6E24               	movwf	?___fladd+7,c
  7348  005828  EC6B  F020         	call	___fladd	;wreg free
  7349  00582C  C020  F02F         	movff	?___fladd+3,?_Celsius2Kelvin+3
  7350  005830  C01F  F02E         	movff	?___fladd+2,?_Celsius2Kelvin+2
  7351  005834  C01E  F02D         	movff	?___fladd+1,?_Celsius2Kelvin+1
  7352  005838  C01D  F02C         	movff	?___fladd,?_Celsius2Kelvin
  7353  00583C  0012               	return	
  7354  00583E                     __end_of_Celsius2Kelvin:
  7355                           	opt stack 0
  7356                           tblptru	equ	0xFF8
  7357                           tblptrh	equ	0xFF7
  7358                           tblptrl	equ	0xFF6
  7359                           tablat	equ	0xFF5
  7360                           prodh	equ	0xFF4
  7361                           prodl	equ	0xFF3
  7362                           postinc0	equ	0xFEE
  7363                           wreg	equ	0xFE8
  7364                           postdec1	equ	0xFE5
  7365                           fsr1h	equ	0xFE2
  7366                           fsr1l	equ	0xFE1
  7367                           indf2	equ	0xFDF
  7368                           postinc2	equ	0xFDE
  7369                           postdec2	equ	0xFDD
  7370                           fsr2h	equ	0xFDA
  7371                           fsr2l	equ	0xFD9
  7372                           status	equ	0xFD8
  7373                           
  7374 ;; *************** function _vscp_handleProtocolEvent *****************
  7375 ;; Defined at:
  7376 ;;		line 789 in file "../../vscp_firmware/common/vscp_firmware.c"
  7377 ;; Parameters:    Size  Location     Type
  7378 ;;		None
  7379 ;; Auto vars:     Size  Location     Type
  7380 ;;  bytes           1   44[BANK0 ] unsigned char 
  7381 ;;  page_save       2   40[BANK0 ] unsigned short 
  7382 ;;  i               1   50[BANK0 ] unsigned char 
  7383 ;;  bytes           2   54[BANK0 ] unsigned short 
  7384 ;;  page_save       2   38[BANK0 ] unsigned short 
  7385 ;;  byte            1   53[BANK0 ] unsigned char 
  7386 ;;  cb              1   49[BANK0 ] unsigned char 
  7387 ;;  bytes_this_t    1   48[BANK0 ] unsigned char 
  7388 ;;  j               1   58[BANK0 ] unsigned char 
  7389 ;;  i               1   56[BANK0 ] unsigned char 
  7390 ;;  k               1   51[BANK0 ] unsigned char 
  7391 ;;  i               1   52[BANK0 ] unsigned char 
  7392 ;;  len             1   47[BANK0 ] unsigned char 
  7393 ;;  pos             1   46[BANK0 ] unsigned char 
  7394 ;;  i               1   57[BANK0 ] unsigned char 
  7395 ;;  len             1   45[BANK0 ] unsigned char 
  7396 ;;  pos             1   43[BANK0 ] unsigned char 
  7397 ;;  offset          1   42[BANK0 ] unsigned char 
  7398 ;; Return value:  Size  Location     Type
  7399 ;;		None               void
  7400 ;; Registers used:
  7401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7402 ;; Tracked objects:
  7403 ;;		On entry : F/0
  7404 ;;		On exit  : 0/0
  7405 ;;		Unchanged: 0/0
  7406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7407 ;;      Params:         0       0       0       0       0       0       0
  7408 ;;      Locals:         0      21       0       0       0       0       0
  7409 ;;      Temps:          0       7       0       0       0       0       0
  7410 ;;      Totals:         0      28       0       0       0       0       0
  7411 ;;Total ram usage:       28 bytes
  7412 ;; Hardware stack levels used:    1
  7413 ;; Hardware stack levels required when called:    8
  7414 ;; This function calls:
  7415 ;;		_vscp_init
  7416 ;;		_vscp_sendEvent
  7417 ;;		_vscp_readAppReg
  7418 ;;		_vscp_writeAppReg
  7419 ;;		_vscp_getGUID
  7420 ;;		_vscp_getMDF_URL
  7421 ;;		_vscp_getMatrixInfo
  7422 ;;		_vscp_goBootloaderMode
  7423 ;;		_vscp_handleHeartbeat
  7424 ;;		_vscp_handleSetNickname
  7425 ;;		_vscp_handleDropNickname
  7426 ;;		_vscp_newNodeOnline
  7427 ;;		_vscp_readRegister
  7428 ;;		_vscp_readStdReg
  7429 ;;		_vscp_writeRegister
  7430 ;;		_vscp_writeStdReg
  7431 ;;		___lbmod
  7432 ;; This function is called by:
  7433 ;;		_main
  7434 ;; This function uses a non-reentrant model
  7435 ;;
  7436                           
  7437                           	psect	text33
  7438  0027FA                     __ptext33:
  7439                           	opt stack 0
  7440  0027FA                     _vscp_handleProtocolEvent:
  7441                           	opt stack 22
  7442                           
  7443                           ; BSR set to: 0
  7444                           ;vscp_firmware.c: 791: if (0 == vscp_imsg.vscp_class) {
  7445                           
  7446                           ;incstack = 0
  7447                           ;incstack = 0
  7448  0027FA  51C0               	movf	(_vscp_imsg+3)& (0+255),w,b
  7449  0027FC  11BF               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  7450  0027FE  E101 D2F4          	bz	l10109
  7451  002802  D324               	goto	l1275
  7452  002804                     l9691:
  7453                           
  7454                           ; BSR set to: 0
  7455                           ;vscp_firmware.c: 798: vscp_handleHeartbeat();
  7456  002804  EC26  F02E         	call	_vscp_handleHeartbeat	;wreg free
  7457                           
  7458                           ;vscp_firmware.c: 799: break;
  7459  002808  D321               	goto	l1275
  7460  00280A                     l9693:
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;vscp_firmware.c: 803: vscp_newNodeOnline();
  7464  00280A  EC79  F02C         	call	_vscp_newNodeOnline	;wreg free
  7465                           
  7466                           ;vscp_firmware.c: 804: break;
  7467  00280E  D31E               	goto	l1275
  7468  002810                     l9695:
  7469                           
  7470                           ; BSR set to: 0
  7471                           ;vscp_firmware.c: 808: vscp_handleSetNickname();
  7472  002810  EC32  F02D         	call	_vscp_handleSetNickname	;wreg free
  7473                           
  7474                           ;vscp_firmware.c: 809: break;
  7475  002814  D31B               	goto	l1275
  7476  002816                     l9697:
  7477                           
  7478                           ; BSR set to: 0
  7479                           ;vscp_firmware.c: 813: vscp_handleDropNickname();
  7480  002816  EC1F  F02C         	call	_vscp_handleDropNickname	;wreg free
  7481                           
  7482                           ;vscp_firmware.c: 814: break;
  7483  00281A  D318               	goto	l1275
  7484  00281C                     l9699:
  7485                           
  7486                           ; BSR set to: 0
  7487                           ;vscp_firmware.c: 818: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  7488                           ;vscp_firmware.c: 819: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7489  00281C  51BD               	movf	_vscp_imsg& (0+255),w,b
  7490  00281E  0B0F               	andlw	15
  7491  002820  0A02               	xorlw	2
  7492  002822  E001 D313          	bnz	l1275
  7493                           
  7494                           ; BSR set to: 0
  7495  002826  51BB               	movf	_vscp_nickname& (0+255),w,b
  7496  002828  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  7497  00282C  62DF               	cpfseq	indf2,c
  7498  00282E  D30E               	goto	l1275
  7499                           
  7500                           ; BSR set to: 0
  7501                           ;vscp_firmware.c: 821: if (vscp_imsg.data[ 1 ] < 0x80) {
  7502  002830  0E80               	movlw	128
  7503  002832  61C4               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7504  002834  D012               	goto	l9719
  7505                           
  7506                           ; BSR set to: 0
  7507                           ;vscp_firmware.c: 824: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  7508  002836  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  7509  002838  EC27  F010         	call	_vscp_readAppReg
  7510  00283C                     L8:
  7511  00283C  0100               	movlb	0	; () banked
  7512  00283E  6FD2               	movwf	(_vscp_omsg+7)& (0+255),b
  7513                           
  7514                           ; BSR set to: 0
  7515                           ;vscp_firmware.c: 827: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  7516  002840  C0C4  F0D1         	movff	_vscp_imsg+7,_vscp_omsg+6
  7517                           
  7518                           ; BSR set to: 0
  7519                           ;vscp_firmware.c: 829: vscp_omsg.priority = 0x03;
  7520  002844  0E03               	movlw	3
  7521  002846  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  7522                           
  7523                           ; BSR set to: 0
  7524                           ;vscp_firmware.c: 830: vscp_omsg.flags = 0x80 + 2;
  7525  002848  0E82               	movlw	130
  7526  00284A  6FCB               	movwf	_vscp_omsg& (0+255),b
  7527                           
  7528                           ; BSR set to: 0
  7529                           ;vscp_firmware.c: 831: vscp_omsg.vscp_class = 0;
  7530  00284C  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  7531  00284E  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  7532                           
  7533                           ; BSR set to: 0
  7534                           ;vscp_firmware.c: 832: vscp_omsg.vscp_type = 10;
  7535  002850  0E0A               	movlw	10
  7536  002852  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  7537  002854                     l9717:
  7538                           
  7539                           ; BSR set to: 0
  7540                           ;vscp_firmware.c: 835: vscp_sendEvent();
  7541  002854  EC37  F02C         	call	_vscp_sendEvent	;wreg free
  7542                           
  7543                           ;vscp_firmware.c: 836: }
  7544  002858  D2F9               	goto	l1275
  7545  00285A                     l9719:
  7546                           
  7547                           ; BSR set to: 0
  7548                           ;vscp_firmware.c: 837: else {
  7549                           ;vscp_firmware.c: 840: vscp_omsg.data[ 1 ] =
  7550                           ;vscp_firmware.c: 841: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  7551  00285A  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  7552  00285C  EC2E  F01E         	call	_vscp_readStdReg
  7553  002860  D7ED               	goto	L8
  7554  002862                     l9733:
  7555                           
  7556                           ; BSR set to: 0
  7557                           ;vscp_firmware.c: 859: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  7558                           ;vscp_firmware.c: 860: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7559  002862  51BD               	movf	_vscp_imsg& (0+255),w,b
  7560  002864  0B0F               	andlw	15
  7561  002866  0A03               	xorlw	3
  7562  002868  E001 D2F0          	bnz	l1275
  7563                           
  7564                           ; BSR set to: 0
  7565  00286C  51BB               	movf	_vscp_nickname& (0+255),w,b
  7566  00286E  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  7567  002872  62DF               	cpfseq	indf2,c
  7568  002874  D2EB               	goto	l1275
  7569                           
  7570                           ; BSR set to: 0
  7571                           ;vscp_firmware.c: 862: if (vscp_imsg.data[ 1 ] < 0x80) {
  7572  002876  0E80               	movlw	128
  7573  002878  61C4               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7574  00287A  D006               	goto	l9753
  7575                           
  7576                           ; BSR set to: 0
  7577                           ;vscp_firmware.c: 865: vscp_omsg.data[ 1 ] =
  7578                           ;vscp_firmware.c: 866: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7579  00287C  C0C5  F023         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  7580  002880  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  7581  002882  ECB7  F005         	call	_vscp_writeAppReg
  7582  002886  D7DA               	goto	L8
  7583  002888                     l9753:
  7584                           
  7585                           ; BSR set to: 0
  7586                           ;vscp_firmware.c: 880: else {
  7587                           ;vscp_firmware.c: 883: vscp_omsg.data[ 1 ] =
  7588                           ;vscp_firmware.c: 884: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7589  002888  C0C5  F01B         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  7590  00288C  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  7591  00288E  ECE4  F022         	call	_vscp_writeStdReg
  7592  002892  D7D4               	goto	L8
  7593  002894                     l9767:
  7594                           
  7595                           ; BSR set to: 0
  7596                           ;vscp_firmware.c: 902: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  7597                           ;vscp_firmware.c: 904: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  7598                           ;vscp_firmware.c: 905: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  7599                           ;vscp_firmware.c: 906: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  7600                           ;vscp_firmware.c: 907: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  7601                           ;vscp_firmware.c: 908: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  7602                           ;vscp_firmware.c: 909: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  7603  002894  51BB               	movf	_vscp_nickname& (0+255),w,b
  7604  002896  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  7605  00289A  62DF               	cpfseq	indf2,c
  7606  00289C  D2D7               	goto	l1275
  7607                           
  7608                           ; BSR set to: 0
  7609  00289E  0E00               	movlw	0
  7610  0028A0  ECCC  F02D         	call	_vscp_getGUID
  7611  0028A4  0100               	movlb	0	; () banked
  7612  0028A6  19C5               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7613  0028A8  E001 D2D0          	bnz	l1275
  7614                           
  7615                           ; BSR set to: 0
  7616  0028AC  0E03               	movlw	3
  7617  0028AE  ECCC  F02D         	call	_vscp_getGUID
  7618  0028B2  0100               	movlb	0	; () banked
  7619  0028B4  19C6               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7620  0028B6  E001 D2C9          	bnz	l1275
  7621                           
  7622                           ; BSR set to: 0
  7623  0028BA  0E05               	movlw	5
  7624  0028BC  ECCC  F02D         	call	_vscp_getGUID
  7625  0028C0  0100               	movlb	0	; () banked
  7626  0028C2  19C7               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7627  0028C4  E001 D2C2          	bnz	l1275
  7628                           
  7629                           ; BSR set to: 0
  7630  0028C8  0E07               	movlw	7
  7631  0028CA  ECCC  F02D         	call	_vscp_getGUID
  7632  0028CE  0100               	movlb	0	; () banked
  7633  0028D0  19C8               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  7634  0028D2  E001 D2BB          	bnz	l1275
  7635                           
  7636                           ; BSR set to: 0
  7637  0028D6  5047               	movf	_vscp_page_select+1,w,c
  7638  0028D8  19C9               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  7639  0028DA  E001 D2B7          	bnz	l1275
  7640                           
  7641                           ; BSR set to: 0
  7642  0028DE  5046               	movf	_vscp_page_select,w,c
  7643  0028E0  EE20  F0CA         	lfsr	2,_vscp_imsg+13
  7644  0028E4  62DF               	cpfseq	indf2,c
  7645  0028E6  D2B2               	goto	l1275
  7646                           
  7647                           ; BSR set to: 0
  7648                           ;vscp_firmware.c: 911: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  7649  0028E8  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  7650  0028EA  EC41  F02D         	call	_vscp_goBootloaderMode
  7651  0028EE  D2AE               	goto	l1275
  7652  0028F0                     l9783:
  7653                           
  7654                           ; BSR set to: 0
  7655                           ;vscp_firmware.c: 920: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  7656                           ;vscp_firmware.c: 921: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  7657                           ;vscp_firmware.c: 922: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  7658                           ;vscp_firmware.c: 923: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  7659  0028F0  0E00               	movlw	0
  7660  0028F2  ECCC  F02D         	call	_vscp_getGUID
  7661  0028F6  0100               	movlb	0	; () banked
  7662  0028F8  19C4               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7663  0028FA  E173               	bnz	l9827
  7664                           
  7665                           ; BSR set to: 0
  7666  0028FC  0E01               	movlw	1
  7667  0028FE  ECCC  F02D         	call	_vscp_getGUID
  7668  002902  0100               	movlb	0	; () banked
  7669  002904  19C5               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7670  002906  E16D               	bnz	l9827
  7671                           
  7672                           ; BSR set to: 0
  7673  002908  0E02               	movlw	2
  7674  00290A  ECCC  F02D         	call	_vscp_getGUID
  7675  00290E  0100               	movlb	0	; () banked
  7676  002910  19C6               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7677  002912  E167               	bnz	l9827
  7678                           
  7679                           ; BSR set to: 0
  7680  002914  0E03               	movlw	3
  7681  002916  ECCC  F02D         	call	_vscp_getGUID
  7682  00291A  0100               	movlb	0	; () banked
  7683  00291C  19C7               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7684  00291E  E161               	bnz	l9827
  7685                           
  7686                           ; BSR set to: 0
  7687                           ;vscp_firmware.c: 924: vscp_guid_reset |= 0x10;
  7688  002920  884C               	bsf	_vscp_guid_reset,4,c
  7689  002922  D05F               	goto	l9827
  7690  002924                     l9793:
  7691                           
  7692                           ; BSR set to: 0
  7693                           ;vscp_firmware.c: 929: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  7694                           ;vscp_firmware.c: 930: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  7695                           ;vscp_firmware.c: 931: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  7696                           ;vscp_firmware.c: 932: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  7697  002924  0E04               	movlw	4
  7698  002926  ECCC  F02D         	call	_vscp_getGUID
  7699  00292A  0100               	movlb	0	; () banked
  7700  00292C  19C4               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7701  00292E  E159               	bnz	l9827
  7702                           
  7703                           ; BSR set to: 0
  7704  002930  0E05               	movlw	5
  7705  002932  ECCC  F02D         	call	_vscp_getGUID
  7706  002936  0100               	movlb	0	; () banked
  7707  002938  19C5               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7708  00293A  E153               	bnz	l9827
  7709                           
  7710                           ; BSR set to: 0
  7711  00293C  0E06               	movlw	6
  7712  00293E  ECCC  F02D         	call	_vscp_getGUID
  7713  002942  0100               	movlb	0	; () banked
  7714  002944  19C6               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7715  002946  E14D               	bnz	l9827
  7716                           
  7717                           ; BSR set to: 0
  7718  002948  0E07               	movlw	7
  7719  00294A  ECCC  F02D         	call	_vscp_getGUID
  7720  00294E  0100               	movlb	0	; () banked
  7721  002950  19C7               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7722  002952  E147               	bnz	l9827
  7723                           
  7724                           ; BSR set to: 0
  7725                           ;vscp_firmware.c: 933: vscp_guid_reset |= 0x20;
  7726  002954  8A4C               	bsf	_vscp_guid_reset,5,c
  7727  002956  D045               	goto	l9827
  7728  002958                     l9803:
  7729                           
  7730                           ; BSR set to: 0
  7731                           ;vscp_firmware.c: 938: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  7732                           ;vscp_firmware.c: 939: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  7733                           ;vscp_firmware.c: 940: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  7734                           ;vscp_firmware.c: 941: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  7735  002958  0E08               	movlw	8
  7736  00295A  ECCC  F02D         	call	_vscp_getGUID
  7737  00295E  0100               	movlb	0	; () banked
  7738  002960  19C4               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7739  002962  E13F               	bnz	l9827
  7740                           
  7741                           ; BSR set to: 0
  7742  002964  0E09               	movlw	9
  7743  002966  ECCC  F02D         	call	_vscp_getGUID
  7744  00296A  0100               	movlb	0	; () banked
  7745  00296C  19C5               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7746  00296E  E139               	bnz	l9827
  7747                           
  7748                           ; BSR set to: 0
  7749  002970  0E0A               	movlw	10
  7750  002972  ECCC  F02D         	call	_vscp_getGUID
  7751  002976  0100               	movlb	0	; () banked
  7752  002978  19C6               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7753  00297A  E133               	bnz	l9827
  7754                           
  7755                           ; BSR set to: 0
  7756  00297C  0E0B               	movlw	11
  7757  00297E  ECCC  F02D         	call	_vscp_getGUID
  7758  002982  0100               	movlb	0	; () banked
  7759  002984  19C7               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7760  002986  E12D               	bnz	l9827
  7761                           
  7762                           ; BSR set to: 0
  7763                           ;vscp_firmware.c: 942: vscp_guid_reset |= 0x40;
  7764  002988  8C4C               	bsf	_vscp_guid_reset,6,c
  7765  00298A  D02B               	goto	l9827
  7766  00298C                     l9813:
  7767                           
  7768                           ; BSR set to: 0
  7769                           ;vscp_firmware.c: 947: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  7770                           ;vscp_firmware.c: 948: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  7771                           ;vscp_firmware.c: 949: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  7772                           ;vscp_firmware.c: 950: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  7773  00298C  0E0C               	movlw	12
  7774  00298E  ECCC  F02D         	call	_vscp_getGUID
  7775  002992  0100               	movlb	0	; () banked
  7776  002994  19C4               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7777  002996  E125               	bnz	l9827
  7778                           
  7779                           ; BSR set to: 0
  7780  002998  0E0D               	movlw	13
  7781  00299A  ECCC  F02D         	call	_vscp_getGUID
  7782  00299E  0100               	movlb	0	; () banked
  7783  0029A0  19C5               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7784  0029A2  E11F               	bnz	l9827
  7785                           
  7786                           ; BSR set to: 0
  7787  0029A4  0E0E               	movlw	14
  7788  0029A6  ECCC  F02D         	call	_vscp_getGUID
  7789  0029AA  0100               	movlb	0	; () banked
  7790  0029AC  19C6               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7791  0029AE  E119               	bnz	l9827
  7792                           
  7793                           ; BSR set to: 0
  7794  0029B0  0E0F               	movlw	15
  7795  0029B2  ECCC  F02D         	call	_vscp_getGUID
  7796  0029B6  0100               	movlb	0	; () banked
  7797  0029B8  19C7               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7798  0029BA  E113               	bnz	l9827
  7799                           
  7800                           ; BSR set to: 0
  7801                           ;vscp_firmware.c: 951: vscp_guid_reset |= 0x80;
  7802  0029BC  8E4C               	bsf	_vscp_guid_reset,7,c
  7803  0029BE  D011               	goto	l9827
  7804  0029C0                     l1215:
  7805                           
  7806                           ; BSR set to: 0
  7807                           ;vscp_firmware.c: 956: vscp_guid_reset = 0;
  7808  0029C0  6A4C               	clrf	_vscp_guid_reset,c
  7809                           
  7810                           ;vscp_firmware.c: 957: break;
  7811  0029C2  D00F               	goto	l9827
  7812  0029C4                     l9825:
  7813                           
  7814                           ; BSR set to: 0
  7815  0029C4  39C3               	swapf	(_vscp_imsg+6)& (0+255),w,b
  7816  0029C6  0B0F               	andlw	15
  7817  0029C8  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7818  0029CA  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7819                           
  7820                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7821                           ; Switch size 1, requested type "speed"
  7822                           ; Number of cases is 1, Range of values is 0 to 0
  7823                           ; switch strategies available:
  7824                           ; Name         Instructions Cycles
  7825                           ; simple_byte            4     3 (average)
  7826                           ;	Chosen strategy is simple_byte
  7827  0029CC  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7828  0029CE  E1F8               	bnz	l1215
  7829                           
  7830                           ; BSR set to: 0
  7831                           ; Switch size 1, requested type "speed"
  7832                           ; Number of cases is 4, Range of values is 0 to 3
  7833                           ; switch strategies available:
  7834                           ; Name         Instructions Cycles
  7835                           ; simple_byte           13     7 (average)
  7836                           ;	Chosen strategy is simple_byte
  7837  0029D0  517F               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  7838  0029D2  E08E               	bz	l9783
  7839  0029D4  0A01               	xorlw	1	; case 1
  7840  0029D6  E0A6               	bz	l9793
  7841  0029D8  0A03               	xorlw	3	; case 2
  7842  0029DA  E0BE               	bz	l9803
  7843  0029DC  0A01               	xorlw	1	; case 3
  7844  0029DE  E0D6               	bz	l9813
  7845  0029E0  D7EF               	goto	l1215
  7846  0029E2                     l9827:
  7847                           
  7848                           ; BSR set to: 0
  7849                           ;vscp_firmware.c: 960: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  7850  0029E2  504C               	movf	_vscp_guid_reset,w,c
  7851  0029E4  0BF0               	andlw	240
  7852  0029E6  0AF0               	xorlw	240
  7853  0029E8  E001 D230          	bnz	l1275
  7854                           
  7855                           ; BSR set to: 0
  7856                           ;vscp_firmware.c: 962: vscp_init();
  7857  0029EC  ECC7  F02A         	call	_vscp_init	;wreg free
  7858  0029F0  D22D               	goto	l1275
  7859  0029F2                     l9831:
  7860                           
  7861                           ; BSR set to: 0
  7862                           ;vscp_firmware.c: 968: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7863  0029F2  51BB               	movf	_vscp_nickname& (0+255),w,b
  7864  0029F4  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  7865  0029F8  62DF               	cpfseq	indf2,c
  7866  0029FA  D228               	goto	l1275
  7867                           
  7868                           ; BSR set to: 0
  7869                           ;vscp_firmware.c: 970: uint8_t i;
  7870                           ;vscp_firmware.c: 971: uint8_t pos = 0;
  7871  0029FC  6B8B               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  7872                           
  7873                           ;vscp_firmware.c: 972: uint8_t offset = vscp_imsg.data[ 1 ];
  7874  0029FE  C0C4  F08A         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  7875                           
  7876                           ;vscp_firmware.c: 973: uint8_t len = vscp_imsg.data[ 2 ];
  7877  002A02  C0C5  F08D         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  7878                           
  7879                           ;vscp_firmware.c: 975: for (i = 0; i < len; i++) {
  7880  002A06  6B99               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  7881  002A08  D04A               	goto	l9863
  7882  002A0A                     l9835:
  7883                           
  7884                           ; BSR set to: 0
  7885                           ;vscp_firmware.c: 976: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  7886  002A0A  518A               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  7887  002A0C  2599               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  7888  002A0E  EC6E  F02D         	call	_vscp_readRegister
  7889  002A12  0100               	movlb	0	; () banked
  7890  002A14  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7891  002A16  0E07               	movlw	7
  7892  002A18  6E0E               	movwf	?___lbmod,c
  7893  002A1A  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7894  002A1C  ECA3  F02C         	call	___lbmod
  7895  002A20  0100               	movlb	0	; () banked
  7896  002A22  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7897  002A24  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7898  002A26  0FD2               	addlw	low (_vscp_omsg+7)
  7899  002A28  6ED9               	movwf	fsr2l,c
  7900  002A2A  6ADA               	clrf	fsr2h,c
  7901  002A2C  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  7902                           
  7903                           ; BSR set to: 0
  7904                           ;vscp_firmware.c: 978: if ( (i % 7) == 6 || i == (len - 1) ) {
  7905  002A30  0E07               	movlw	7
  7906  002A32  6E0E               	movwf	?___lbmod,c
  7907  002A34  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7908  002A36  ECA3  F02C         	call	___lbmod
  7909  002A3A  0A06               	xorlw	6
  7910  002A3C  E00B               	bz	l9841
  7911  002A3E  0EFF               	movlw	255
  7912  002A40  0100               	movlb	0	; () banked
  7913  002A42  258D               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  7914  002A44  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7915  002A46  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7916  002A48  0EFF               	movlw	255
  7917  002A4A  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  7918  002A4C  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7919  002A4E  197F               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7920  002A50  1180               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7921  002A52  E124               	bnz	l9861
  7922  002A54                     l9841:
  7923                           
  7924                           ;vscp_firmware.c: 980: uint8_t bytes;
  7925                           ;vscp_firmware.c: 982: if ( ( i % 7 ) == 6 ) {
  7926  002A54  0E07               	movlw	7
  7927  002A56  6E0E               	movwf	?___lbmod,c
  7928  002A58  0100               	movlb	0	; () banked
  7929  002A5A  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7930  002A5C  ECA3  F02C         	call	___lbmod
  7931  002A60  0A06               	xorlw	6
  7932  002A62  E103               	bnz	l9845
  7933                           
  7934                           ;vscp_firmware.c: 983: bytes = 7;
  7935  002A64  0E07               	movlw	7
  7936  002A66  0100               	movlb	0	; () banked
  7937  002A68  D009               	goto	L9
  7938  002A6A                     l9845:
  7939                           
  7940                           ;vscp_firmware.c: 985: else {
  7941                           ;vscp_firmware.c: 986: bytes = ( i % 7 ) + 1;
  7942  002A6A  0E07               	movlw	7
  7943  002A6C  6E0E               	movwf	?___lbmod,c
  7944  002A6E  0100               	movlb	0	; () banked
  7945  002A70  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7946  002A72  ECA3  F02C         	call	___lbmod
  7947  002A76  0100               	movlb	0	; () banked
  7948  002A78  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7949  002A7A  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  7950  002A7C                     L9:
  7951  002A7C  6F8C               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  7952                           
  7953                           ; BSR set to: 0
  7954                           ;vscp_firmware.c: 987: }
  7955                           ;vscp_firmware.c: 989: vscp_omsg.flags = 0x80 + bytes + 1;
  7956  002A7E  518C               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  7957  002A80  0F81               	addlw	129
  7958  002A82  6FCB               	movwf	_vscp_omsg& (0+255),b
  7959                           
  7960                           ; BSR set to: 0
  7961                           ;vscp_firmware.c: 990: vscp_omsg.priority = 0x07;
  7962  002A84  0E07               	movlw	7
  7963  002A86  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  7964                           
  7965                           ; BSR set to: 0
  7966                           ;vscp_firmware.c: 991: vscp_omsg.vscp_class = 0;
  7967  002A88  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  7968  002A8A  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  7969                           
  7970                           ; BSR set to: 0
  7971                           ;vscp_firmware.c: 992: vscp_omsg.vscp_type = 26;
  7972  002A8C  0E1A               	movlw	26
  7973  002A8E  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  7974                           
  7975                           ; BSR set to: 0
  7976                           ;vscp_firmware.c: 993: vscp_omsg.data[ 0 ] = pos;
  7977  002A90  C08B  F0D1         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+6
  7978                           
  7979                           ; BSR set to: 0
  7980                           ;vscp_firmware.c: 996: vscp_sendEvent();
  7981  002A94  EC37  F02C         	call	_vscp_sendEvent	;wreg free
  7982                           
  7983                           ;vscp_firmware.c: 997: pos++;
  7984  002A98  0100               	movlb	0	; () banked
  7985  002A9A  2B8B               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  7986  002A9C                     l9861:
  7987                           
  7988                           ; BSR set to: 0
  7989  002A9C  2B99               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  7990  002A9E                     l9863:
  7991                           
  7992                           ; BSR set to: 0
  7993  002A9E  518D               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  7994  002AA0  5D99               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  7995  002AA2  E301 D1D3          	bc	l1275
  7996  002AA6  D7B1               	goto	l9835
  7997  002AA8                     l9865:
  7998                           
  7999                           ; BSR set to: 0
  8000                           ;vscp_firmware.c: 1005: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8001  002AA8  51BB               	movf	_vscp_nickname& (0+255),w,b
  8002  002AAA  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  8003  002AAE  62DF               	cpfseq	indf2,c
  8004  002AB0  D1CD               	goto	l1275
  8005                           
  8006                           ; BSR set to: 0
  8007                           ;vscp_firmware.c: 1006: uint8_t i;
  8008                           ;vscp_firmware.c: 1007: uint8_t pos = vscp_imsg.data[ 1 ];
  8009  002AB2  C0C4  F08E         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1155
  8010                           
  8011                           ; BSR set to: 0
  8012                           ;vscp_firmware.c: 1008: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  8013  002AB6  51BD               	movf	_vscp_imsg& (0+255),w,b
  8014  002AB8  0FFE               	addlw	254
  8015  002ABA  0B07               	andlw	7
  8016  002ABC  6F8F               	movwf	vscp_handleProtocolEvent@len_1156& (0+255),b
  8017                           
  8018                           ; BSR set to: 0
  8019                           ;vscp_firmware.c: 1010: for (i = 0; i < len; i++) {
  8020  002ABE  6B94               	clrf	vscp_handleProtocolEvent@i_1154& (0+255),b
  8021  002AC0  D018               	goto	l9879
  8022  002AC2                     l9873:
  8023                           
  8024                           ; BSR set to: 0
  8025                           ;vscp_firmware.c: 1012: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  8026  002AC2  5194               	movf	vscp_handleProtocolEvent@i_1154& (0+255),w,b
  8027  002AC4  0FC5               	addlw	low (_vscp_imsg+8)
  8028  002AC6  6ED9               	movwf	fsr2l,c
  8029  002AC8  6ADA               	clrf	fsr2h,c
  8030  002ACA  50DF               	movf	indf2,w,c
  8031  002ACC  6E27               	movwf	?_vscp_writeRegister,c
  8032  002ACE  518E               	movf	vscp_handleProtocolEvent@pos_1155& (0+255),w,b
  8033  002AD0  2594               	addwf	vscp_handleProtocolEvent@i_1154& (0+255),w,b
  8034  002AD2  ECEF  F02C         	call	_vscp_writeRegister
  8035                           
  8036                           ;vscp_firmware.c: 1013: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  8037  002AD6  0100               	movlb	0	; () banked
  8038  002AD8  518E               	movf	vscp_handleProtocolEvent@pos_1155& (0+255),w,b
  8039  002ADA  2594               	addwf	vscp_handleProtocolEvent@i_1154& (0+255),w,b
  8040  002ADC  EC6E  F02D         	call	_vscp_readRegister
  8041  002AE0  0100               	movlb	0	; () banked
  8042  002AE2  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8043  002AE4  5194               	movf	vscp_handleProtocolEvent@i_1154& (0+255),w,b
  8044  002AE6  0FD2               	addlw	low (_vscp_omsg+7)
  8045  002AE8  6ED9               	movwf	fsr2l,c
  8046  002AEA  6ADA               	clrf	fsr2h,c
  8047  002AEC  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8048                           
  8049                           ; BSR set to: 0
  8050  002AF0  2B94               	incf	vscp_handleProtocolEvent@i_1154& (0+255),f,b
  8051  002AF2                     l9879:
  8052                           
  8053                           ; BSR set to: 0
  8054  002AF2  518F               	movf	vscp_handleProtocolEvent@len_1156& (0+255),w,b
  8055  002AF4  5D94               	subwf	vscp_handleProtocolEvent@i_1154& (0+255),w,b
  8056  002AF6  E3E5               	bnc	l9873
  8057                           
  8058                           ; BSR set to: 0
  8059                           ;vscp_firmware.c: 1014: }
  8060                           ;vscp_firmware.c: 1016: vscp_omsg.priority = 0x07;
  8061  002AF8  0E07               	movlw	7
  8062  002AFA  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  8063                           
  8064                           ; BSR set to: 0
  8065                           ;vscp_firmware.c: 1017: vscp_omsg.vscp_class = 0;
  8066  002AFC  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  8067  002AFE  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  8068                           
  8069                           ;vscp_firmware.c: 1018: vscp_omsg.vscp_type = 26;
  8070  002B00  0E1A               	movlw	26
  8071  002B02  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  8072                           
  8073                           ; BSR set to: 0
  8074                           ;vscp_firmware.c: 1019: vscp_omsg.data[ 0 ] = 0;
  8075  002B04  6BD1               	clrf	(_vscp_omsg+6)& (0+255),b
  8076                           
  8077                           ; BSR set to: 0
  8078                           ;vscp_firmware.c: 1020: vscp_omsg.flags = 0x80 + len + 1;
  8079  002B06  518F               	movf	vscp_handleProtocolEvent@len_1156& (0+255),w,b
  8080  002B08  0F81               	addlw	129
  8081  002B0A  6FCB               	movwf	_vscp_omsg& (0+255),b
  8082  002B0C  D6A3               	goto	l9717
  8083  002B0E                     l9891:
  8084                           
  8085                           ; BSR set to: 0
  8086                           ;vscp_firmware.c: 1030: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8087  002B0E  51BB               	movf	_vscp_nickname& (0+255),w,b
  8088  002B10  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  8089  002B14  62DF               	cpfseq	indf2,c
  8090  002B16  D19A               	goto	l1275
  8091                           
  8092                           ; BSR set to: 0
  8093                           ;vscp_firmware.c: 1032: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8094                           ;vscp_firmware.c: 1033: vscp_imsg.data[ 1 ],
  8095                           ;vscp_firmware.c: 1034: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  8096  002B18  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  8097  002B1A  EC27  F010         	call	_vscp_readAppReg
  8098  002B1E  0100               	movlb	0	; () banked
  8099  002B20  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8100  002B22  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8101  002B24  6E23               	movwf	?_vscp_writeAppReg,c
  8102  002B26  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  8103  002B28  ECB7  F005         	call	_vscp_writeAppReg
  8104  002B2C  D687               	goto	L8
  8105  002B2E                     l9907:
  8106                           
  8107                           ; BSR set to: 0
  8108                           ;vscp_firmware.c: 1050: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8109  002B2E  51BB               	movf	_vscp_nickname& (0+255),w,b
  8110  002B30  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  8111  002B34  62DF               	cpfseq	indf2,c
  8112  002B36  D18A               	goto	l1275
  8113                           
  8114                           ; BSR set to: 0
  8115                           ;vscp_firmware.c: 1052: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8116                           ;vscp_firmware.c: 1053: vscp_imsg.data[ 1 ],
  8117                           ;vscp_firmware.c: 1054: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  8118  002B38  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  8119  002B3A  EC27  F010         	call	_vscp_readAppReg
  8120  002B3E  0100               	movlb	0	; () banked
  8121  002B40  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8122  002B42  057F               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  8123  002B44  6E23               	movwf	?_vscp_writeAppReg,c
  8124  002B46  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  8125  002B48  ECB7  F005         	call	_vscp_writeAppReg
  8126  002B4C  D677               	goto	L8
  8127  002B4E                     l9923:
  8128                           
  8129                           ; BSR set to: 0
  8130                           ;vscp_firmware.c: 1070: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  8131                           ;vscp_firmware.c: 1071: (0xff == vscp_imsg.data[ 0 ])) {
  8132  002B4E  51C3               	movf	(_vscp_imsg+6)& (0+255),w,b
  8133  002B50  19BB               	xorwf	_vscp_nickname& (0+255),w,b
  8134  002B52  E003               	bz	l1239
  8135                           
  8136                           ; BSR set to: 0
  8137  002B54  29C3               	incf	(_vscp_imsg+6)& (0+255),w,b
  8138  002B56  E001 D179          	bnz	l1275
  8139  002B5A                     l1239:
  8140                           
  8141                           ; BSR set to: 0
  8142                           ;vscp_firmware.c: 1073: uint8_t i, j, k = 0;
  8143  002B5A  6B93               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  8144                           
  8145                           ; BSR set to: 0
  8146                           ;vscp_firmware.c: 1077: vscp_omsg.priority = 0x03;
  8147  002B5C  0E03               	movlw	3
  8148  002B5E  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  8149                           
  8150                           ;vscp_firmware.c: 1078: vscp_omsg.flags = 0x80 + 8;
  8151  002B60  0E88               	movlw	136
  8152  002B62  6FCB               	movwf	_vscp_omsg& (0+255),b
  8153                           
  8154                           ; BSR set to: 0
  8155                           ;vscp_firmware.c: 1079: vscp_omsg.vscp_class = 0;
  8156  002B64  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  8157  002B66  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  8158                           
  8159                           ;vscp_firmware.c: 1080: vscp_omsg.vscp_type = 32;
  8160  002B68  0E20               	movlw	32
  8161  002B6A  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  8162                           
  8163                           ; BSR set to: 0
  8164                           ;vscp_firmware.c: 1082: for (i = 0; i < 3; i++)
  8165  002B6C  6B98               	clrf	vscp_handleProtocolEvent@i_1157& (0+255),b
  8166  002B6E                     l1240:
  8167                           
  8168                           ; BSR set to: 0
  8169                           ;vscp_firmware.c: 1083: {
  8170                           ;vscp_firmware.c: 1084: vscp_omsg.data[0] = i;
  8171  002B6E  C098  F0D1         	movff	vscp_handleProtocolEvent@i_1157,_vscp_omsg+6
  8172                           
  8173                           ; BSR set to: 0
  8174                           ;vscp_firmware.c: 1086: for (j = 1; j < 8; j++) {
  8175  002B72  0E01               	movlw	1
  8176  002B74  6F9A               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8177  002B76                     l9943:
  8178                           
  8179                           ; BSR set to: 0
  8180                           ;vscp_firmware.c: 1087: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  8181  002B76  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8182  002B78  0FD1               	addlw	low (_vscp_omsg+6)
  8183  002B7A  6ED9               	movwf	fsr2l,c
  8184  002B7C  6ADA               	clrf	fsr2h,c
  8185  002B7E  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8186  002B80  080F               	sublw	15
  8187  002B82  ECCC  F02D         	call	_vscp_getGUID
  8188  002B86  6EDF               	movwf	indf2,c
  8189  002B88  0100               	movlb	0	; () banked
  8190  002B8A  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8191                           
  8192                           ; BSR set to: 0
  8193                           ;vscp_firmware.c: 1088: if (k > 16)
  8194  002B8C  0E10               	movlw	16
  8195  002B8E  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8196  002B90  D001               	goto	l9951
  8197  002B92  D004               	goto	l9955
  8198  002B94                     l9951:
  8199                           
  8200                           ; BSR set to: 0
  8201  002B94  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8202                           
  8203                           ; BSR set to: 0
  8204  002B96  0E07               	movlw	7
  8205  002B98  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8206  002B9A  D7ED               	goto	l9943
  8207  002B9C                     l9955:
  8208                           
  8209                           ; BSR set to: 0
  8210                           ;vscp_firmware.c: 1090: }
  8211                           ;vscp_firmware.c: 1092: if (k > 16)
  8212  002B9C  0E10               	movlw	16
  8213  002B9E  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8214  002BA0  D001               	goto	l9959
  8215  002BA2  D007               	goto	l1241
  8216  002BA4                     l9959:
  8217                           
  8218                           ; BSR set to: 0
  8219                           ;vscp_firmware.c: 1095: vscp_sendEvent();
  8220  002BA4  EC37  F02C         	call	_vscp_sendEvent	;wreg free
  8221  002BA8  0100               	movlb	0	; () banked
  8222  002BAA  2B98               	incf	vscp_handleProtocolEvent@i_1157& (0+255),f,b
  8223                           
  8224                           ; BSR set to: 0
  8225  002BAC  0E02               	movlw	2
  8226  002BAE  6598               	cpfsgt	vscp_handleProtocolEvent@i_1157& (0+255),b
  8227  002BB0  D7DE               	goto	l1240
  8228  002BB2                     l1241:
  8229                           
  8230                           ; BSR set to: 0
  8231                           ;vscp_firmware.c: 1096: }
  8232                           ;vscp_firmware.c: 1098: for (j = 0; j < 5; j++)
  8233  002BB2  6B9A               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  8234  002BB4                     l9969:
  8235                           
  8236                           ; BSR set to: 0
  8237                           ;vscp_firmware.c: 1099: {
  8238                           ;vscp_firmware.c: 1100: if (vscp_getMDF_URL(j) > 0)
  8239  002BB4  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8240  002BB6  ECA0  F02D         	call	_vscp_getMDF_URL
  8241  002BBA  0900               	iorlw	0
  8242  002BBC  E008               	bz	l9973
  8243                           
  8244                           ; BSR set to: 0
  8245                           ;vscp_firmware.c: 1101: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  8246  002BBE  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8247  002BC0  0FD4               	addlw	low (_vscp_omsg+9)
  8248  002BC2  6ED9               	movwf	fsr2l,c
  8249  002BC4  6ADA               	clrf	fsr2h,c
  8250  002BC6  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8251  002BC8  ECA0  F02D         	call	_vscp_getMDF_URL
  8252  002BCC  D005               	goto	L10
  8253  002BCE                     l9973:
  8254                           
  8255                           ; BSR set to: 0
  8256                           ;vscp_firmware.c: 1102: else
  8257                           ;vscp_firmware.c: 1103: vscp_omsg.data[3 + j] = 0;
  8258  002BCE  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8259  002BD0  0FD4               	addlw	low (_vscp_omsg+9)
  8260  002BD2  6ED9               	movwf	fsr2l,c
  8261  002BD4  6ADA               	clrf	fsr2h,c
  8262  002BD6  0E00               	movlw	0
  8263  002BD8                     L10:
  8264  002BD8  6EDF               	movwf	indf2,c
  8265                           
  8266                           ; BSR set to: 0
  8267  002BDA  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8268                           
  8269                           ; BSR set to: 0
  8270  002BDC  0E04               	movlw	4
  8271  002BDE  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8272  002BE0  D7E9               	goto	l9969
  8273                           
  8274                           ; BSR set to: 0
  8275                           ;vscp_firmware.c: 1104: }
  8276                           ;vscp_firmware.c: 1106: vscp_sendEvent();
  8277  002BE2  EC37  F02C         	call	_vscp_sendEvent	;wreg free
  8278                           
  8279                           ;vscp_firmware.c: 1108: k = 5;
  8280  002BE6  0E05               	movlw	5
  8281  002BE8  0100               	movlb	0	; () banked
  8282  002BEA  6F93               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  8283                           
  8284                           ; BSR set to: 0
  8285                           ;vscp_firmware.c: 1109: for (i = 3; i < 7; i++)
  8286  002BEC  0E03               	movlw	3
  8287  002BEE  6F98               	movwf	vscp_handleProtocolEvent@i_1157& (0+255),b
  8288  002BF0                     l1250:
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;vscp_firmware.c: 1110: {
  8292                           ;vscp_firmware.c: 1111: vscp_omsg.data[0] = i;
  8293  002BF0  C098  F0D1         	movff	vscp_handleProtocolEvent@i_1157,_vscp_omsg+6
  8294                           
  8295                           ; BSR set to: 0
  8296                           ;vscp_firmware.c: 1113: for (j = 1; j < 8; j++) {
  8297  002BF4  0E01               	movlw	1
  8298  002BF6  6F9A               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8299  002BF8                     l9995:
  8300                           
  8301                           ; BSR set to: 0
  8302                           ;vscp_firmware.c: 1114: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  8303  002BF8  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8304  002BFA  0FD1               	addlw	low (_vscp_omsg+6)
  8305  002BFC  6ED9               	movwf	fsr2l,c
  8306  002BFE  6ADA               	clrf	fsr2h,c
  8307  002C00  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8308  002C02  ECA0  F02D         	call	_vscp_getMDF_URL
  8309  002C06  6EDF               	movwf	indf2,c
  8310                           
  8311                           ; BSR set to: 0
  8312  002C08  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8313                           
  8314                           ; BSR set to: 0
  8315  002C0A  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8316                           
  8317                           ; BSR set to: 0
  8318  002C0C  0E07               	movlw	7
  8319  002C0E  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8320  002C10  D7F3               	goto	l9995
  8321                           
  8322                           ; BSR set to: 0
  8323                           ;vscp_firmware.c: 1115: }
  8324                           ;vscp_firmware.c: 1116: vscp_sendEvent();
  8325  002C12  EC37  F02C         	call	_vscp_sendEvent	;wreg free
  8326  002C16  0100               	movlb	0	; () banked
  8327  002C18  2B98               	incf	vscp_handleProtocolEvent@i_1157& (0+255),f,b
  8328                           
  8329                           ; BSR set to: 0
  8330  002C1A  0E06               	movlw	6
  8331  002C1C  6598               	cpfsgt	vscp_handleProtocolEvent@i_1157& (0+255),b
  8332  002C1E  D7E8               	goto	l1250
  8333  002C20  D115               	goto	l1275
  8334  002C22                     l10009:
  8335                           
  8336                           ; BSR set to: 0
  8337                           ;vscp_firmware.c: 1125: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8338  002C22  51BB               	movf	_vscp_nickname& (0+255),w,b
  8339  002C24  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  8340  002C28  62DF               	cpfseq	indf2,c
  8341  002C2A  D110               	goto	l1275
  8342                           
  8343                           ; BSR set to: 0
  8344                           ;vscp_firmware.c: 1127: vscp_omsg.priority = 0x03;
  8345  002C2C  0E03               	movlw	3
  8346  002C2E  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  8347                           
  8348                           ;vscp_firmware.c: 1128: vscp_omsg.flags = 0x80 + 7;
  8349  002C30  0E87               	movlw	135
  8350  002C32  6FCB               	movwf	_vscp_omsg& (0+255),b
  8351                           
  8352                           ; BSR set to: 0
  8353                           ;vscp_firmware.c: 1129: vscp_omsg.vscp_class = 0;
  8354  002C34  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  8355  002C36  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  8356                           
  8357                           ;vscp_firmware.c: 1130: vscp_omsg.vscp_type = 34;
  8358  002C38  0E22               	movlw	34
  8359  002C3A  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  8360                           
  8361                           ; BSR set to: 0
  8362                           ;vscp_firmware.c: 1132: vscp_getMatrixInfo((char *) vscp_omsg.data);
  8363  002C3C  0ED1               	movlw	(_vscp_omsg+6)& (0+255)
  8364  002C3E  EC7B  F02D         	call	_vscp_getMatrixInfo
  8365  002C42  D608               	goto	l9717
  8366  002C44                     l10019:
  8367                           
  8368                           ; BSR set to: 0
  8369                           ;vscp_firmware.c: 1148: if ( vscp_nickname == vscp_imsg.data[0] ) {
  8370  002C44  51BB               	movf	_vscp_nickname& (0+255),w,b
  8371  002C46  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  8372  002C4A  62DF               	cpfseq	indf2,c
  8373  002C4C  D0FF               	goto	l1275
  8374                           
  8375                           ; BSR set to: 0
  8376                           ;vscp_firmware.c: 1151: uint8_t byte = 0;
  8377  002C4E  6B95               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  8378                           
  8379                           ; BSR set to: 0
  8380                           ;vscp_firmware.c: 1152: uint8_t bytes_this_time, cb;
  8381                           ;vscp_firmware.c: 1156: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  8382  002C50  C0BD  F07F         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  8383  002C54  0E0F               	movlw	15
  8384  002C56  177F               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8385  002C58  0E04               	movlw	4
  8386  002C5A  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8387  002C5C  E312               	bnc	l10035
  8388                           
  8389                           ; BSR set to: 0
  8390                           ;vscp_firmware.c: 1159: bytes = (uint16_t)vscp_imsg.data[4];
  8391  002C5E  C0C7  F096         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1161
  8392  002C62  6B97               	clrf	(vscp_handleProtocolEvent@bytes_1161+1)& (0+255),b
  8393                           
  8394                           ; BSR set to: 0
  8395                           ;vscp_firmware.c: 1161: if (bytes == 0) bytes = 256;
  8396  002C64  5197               	movf	(vscp_handleProtocolEvent@bytes_1161+1)& (0+255),w,b
  8397  002C66  1196               	iorwf	vscp_handleProtocolEvent@bytes_1161& (0+255),w,b
  8398  002C68  E103               	bnz	l10031
  8399                           
  8400                           ; BSR set to: 0
  8401  002C6A  0E01               	movlw	1
  8402  002C6C  6F97               	movwf	(vscp_handleProtocolEvent@bytes_1161+1)& (0+255),b
  8403  002C6E  6B96               	clrf	vscp_handleProtocolEvent@bytes_1161& (0+255),b
  8404  002C70                     l10031:
  8405                           
  8406                           ; BSR set to: 0
  8407                           ;vscp_firmware.c: 1163: if (bytes > 256) bytes = 256;
  8408  002C70  0E01               	movlw	1
  8409  002C72  5D96               	subwf	vscp_handleProtocolEvent@bytes_1161& (0+255),w,b
  8410  002C74  0E01               	movlw	1
  8411  002C76  5997               	subwfb	(vscp_handleProtocolEvent@bytes_1161+1)& (0+255),w,b
  8412  002C78  E307               	bnc	l10037
  8413                           
  8414                           ; BSR set to: 0
  8415  002C7A  0E01               	movlw	1
  8416  002C7C  6F97               	movwf	(vscp_handleProtocolEvent@bytes_1161+1)& (0+255),b
  8417  002C7E  0E00               	movlw	0
  8418  002C80  D002               	goto	L12
  8419  002C82                     l10035:
  8420                           
  8421                           ; BSR set to: 0
  8422                           ;vscp_firmware.c: 1165: else {
  8423                           ;vscp_firmware.c: 1166: bytes = 1;
  8424  002C82  6B97               	clrf	(vscp_handleProtocolEvent@bytes_1161+1)& (0+255),b
  8425  002C84  0E01               	movlw	1
  8426  002C86                     L12:
  8427  002C86  6F96               	movwf	vscp_handleProtocolEvent@bytes_1161& (0+255),b
  8428  002C88                     l10037:
  8429                           
  8430                           ; BSR set to: 0
  8431                           ;vscp_firmware.c: 1167: }
  8432                           ;vscp_firmware.c: 1170: page_save = vscp_page_select;
  8433  002C88  C046  F086         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  8434  002C8C  C047  F087         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  8435                           
  8436                           ; BSR set to: 0
  8437                           ;vscp_firmware.c: 1175: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  8438  002C90  51C5               	movf	(_vscp_imsg+8)& (0+255),w,b
  8439  002C92  C0C4  F07F         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8440  002C96  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8441  002C98  C07F  F080         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8442  002C9C  6B7F               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8443  002C9E  117F               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8444  002CA0  6E46               	movwf	_vscp_page_select,c
  8445  002CA2  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8446  002CA4  6E47               	movwf	_vscp_page_select+1,c
  8447                           
  8448                           ; BSR set to: 0
  8449                           ;vscp_firmware.c: 1178: vscp_omsg.priority = 0x07;
  8450  002CA6  0E07               	movlw	7
  8451  002CA8  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  8452                           
  8453                           ; BSR set to: 0
  8454                           ;vscp_firmware.c: 1179: vscp_omsg.vscp_class = 0;
  8455  002CAA  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  8456  002CAC  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  8457                           
  8458                           ; BSR set to: 0
  8459                           ;vscp_firmware.c: 1180: vscp_omsg.vscp_type = 39;
  8460  002CAE  0E27               	movlw	39
  8461  002CB0  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  8462                           
  8463                           ; BSR set to: 0
  8464                           ;vscp_firmware.c: 1181: vscp_omsg.data[0] = 0;
  8465  002CB2  6BD1               	clrf	(_vscp_omsg+6)& (0+255),b
  8466                           
  8467                           ; BSR set to: 0
  8468                           ;vscp_firmware.c: 1182: vscp_omsg.data[1] = vscp_imsg.data[1];
  8469  002CB4  C0C4  F0D2         	movff	_vscp_imsg+7,_vscp_omsg+7
  8470                           
  8471                           ; BSR set to: 0
  8472                           ;vscp_firmware.c: 1183: vscp_omsg.data[2] = vscp_imsg.data[2];
  8473  002CB8  C0C5  F0D3         	movff	_vscp_imsg+8,_vscp_omsg+8
  8474  002CBC                     l10053:
  8475                           
  8476                           ; BSR set to: 0
  8477                           ;vscp_firmware.c: 1187: if ( ( bytes - byte ) >= 4 ) {
  8478  002CBC  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8479  002CBE  5D96               	subwf	vscp_handleProtocolEvent@bytes_1161& (0+255),w,b
  8480  002CC0  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8481  002CC2  0E00               	movlw	0
  8482  002CC4  5997               	subwfb	(vscp_handleProtocolEvent@bytes_1161+1)& (0+255),w,b
  8483  002CC6  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8484  002CC8  0E04               	movlw	4
  8485  002CCA  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8486  002CCC  0E00               	movlw	0
  8487  002CCE  5980               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8488  002CD0  E302               	bnc	l10057
  8489                           
  8490                           ; BSR set to: 0
  8491                           ;vscp_firmware.c: 1188: bytes_this_time = 4;
  8492  002CD2  0E04               	movlw	4
  8493  002CD4  D002               	goto	L13
  8494  002CD6                     l10057:
  8495                           
  8496                           ; BSR set to: 0
  8497                           ;vscp_firmware.c: 1190: else {
  8498                           ;vscp_firmware.c: 1191: bytes_this_time = (bytes - byte);
  8499  002CD6  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8500  002CD8  5D96               	subwf	vscp_handleProtocolEvent@bytes_1161& (0+255),w,b
  8501  002CDA                     L13:
  8502  002CDA  6F90               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  8503                           
  8504                           ; BSR set to: 0
  8505                           ;vscp_firmware.c: 1192: }
  8506                           ;vscp_firmware.c: 1195: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  8507  002CDC  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8508  002CDE  0F84               	addlw	132
  8509  002CE0  6FCB               	movwf	_vscp_omsg& (0+255),b
  8510                           
  8511                           ;vscp_firmware.c: 1196: vscp_omsg.data[3] =
  8512                           ;vscp_firmware.c: 1197: vscp_imsg.data[3] + byte;
  8513  002CE2  51C6               	movf	(_vscp_imsg+9)& (0+255),w,b
  8514  002CE4  2595               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8515  002CE6  6FD4               	movwf	(_vscp_omsg+9)& (0+255),b
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;vscp_firmware.c: 1200: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  8519  002CE8  6B91               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  8520  002CEA  D00E               	goto	l10065
  8521  002CEC                     l10061:
  8522                           
  8523                           ; BSR set to: 0
  8524                           ;vscp_firmware.c: 1201: vscp_omsg.data[ (4 + cb) ] =
  8525                           ;vscp_firmware.c: 1202: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  8526  002CEC  51C6               	movf	(_vscp_imsg+9)& (0+255),w,b
  8527  002CEE  2595               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8528  002CF0  2591               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8529  002CF2  EC6E  F02D         	call	_vscp_readRegister
  8530  002CF6  0100               	movlb	0	; () banked
  8531  002CF8  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8532  002CFA  5191               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8533  002CFC  0FD5               	addlw	low (_vscp_omsg+10)
  8534  002CFE  6ED9               	movwf	fsr2l,c
  8535  002D00  6ADA               	clrf	fsr2h,c
  8536  002D02  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8537                           
  8538                           ; BSR set to: 0
  8539  002D06  2B91               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  8540  002D08                     l10065:
  8541                           
  8542                           ; BSR set to: 0
  8543  002D08  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8544  002D0A  5D91               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8545  002D0C  E3EF               	bnc	l10061
  8546                           
  8547                           ; BSR set to: 0
  8548                           ;vscp_firmware.c: 1203: }
  8549                           ;vscp_firmware.c: 1206: vscp_sendEvent();
  8550  002D0E  EC37  F02C         	call	_vscp_sendEvent	;wreg free
  8551                           
  8552                           ;vscp_firmware.c: 1209: byte += bytes_this_time;
  8553  002D12  0100               	movlb	0	; () banked
  8554  002D14  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8555  002D16  2795               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  8556                           
  8557                           ; BSR set to: 0
  8558                           ;vscp_firmware.c: 1212: vscp_omsg.data[0] += 1;
  8559  002D18  2BD1               	incf	(_vscp_omsg+6)& (0+255),f,b
  8560                           
  8561                           ; BSR set to: 0
  8562                           ;vscp_firmware.c: 1214: } while (byte < bytes);
  8563  002D1A  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8564  002D1C  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8565  002D1E  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8566  002D20  5196               	movf	vscp_handleProtocolEvent@bytes_1161& (0+255),w,b
  8567  002D22  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8568  002D24  5197               	movf	(vscp_handleProtocolEvent@bytes_1161+1)& (0+255),w,b
  8569  002D26  5980               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8570  002D28  E3C9               	bnc	l10053
  8571                           
  8572                           ; BSR set to: 0
  8573                           ;vscp_firmware.c: 1217: vscp_page_select = page_save;
  8574  002D2A  C086  F046         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  8575  002D2E  C087  F047         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  8576  002D32  D08C               	goto	l1275
  8577  002D34                     l10075:
  8578                           
  8579                           ; BSR set to: 0
  8580                           ;vscp_firmware.c: 1224: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  8581  002D34  51BB               	movf	_vscp_nickname& (0+255),w,b
  8582  002D36  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  8583  002D3A  62DF               	cpfseq	indf2,c
  8584  002D3C  D087               	goto	l1275
  8585                           
  8586                           ; BSR set to: 0
  8587                           ;vscp_firmware.c: 1226: uint8_t i;
  8588                           ;vscp_firmware.c: 1227: uint16_t page_save;
  8589                           ;vscp_firmware.c: 1230: page_save = vscp_page_select;
  8590  002D3E  C046  F088         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1166
  8591  002D42  C047  F089         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1166+1
  8592                           
  8593                           ; BSR set to: 0
  8594                           ;vscp_firmware.c: 1234: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  8595  002D46  51C5               	movf	(_vscp_imsg+8)& (0+255),w,b
  8596  002D48  C0C4  F07F         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8597  002D4C  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8598  002D4E  C07F  F080         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8599  002D52  6B7F               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8600  002D54  117F               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8601  002D56  6E46               	movwf	_vscp_page_select,c
  8602  002D58  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8603  002D5A  6E47               	movwf	_vscp_page_select+1,c
  8604                           
  8605                           ; BSR set to: 0
  8606                           ;vscp_firmware.c: 1236: for (i = vscp_imsg.data[ 3 ];
  8607  002D5C  C0C6  F092         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1165
  8608                           
  8609                           ;vscp_firmware.c: 1239: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  8610                           ;vscp_firmware.c: 1240: i++) {
  8611  002D60  D014               	goto	l10087
  8612  002D62                     l10083:
  8613                           
  8614                           ; BSR set to: 0
  8615                           ;vscp_firmware.c: 1241: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  8616                           ;vscp_firmware.c: 1242: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  8617  002D62  51C6               	movf	(_vscp_imsg+9)& (0+255),w,b
  8618  002D64  08C7               	sublw	low (_vscp_imsg+10)
  8619  002D66  2592               	addwf	vscp_handleProtocolEvent@i_1165& (0+255),w,b
  8620  002D68  6ED9               	movwf	fsr2l,c
  8621  002D6A  6ADA               	clrf	fsr2h,c
  8622  002D6C  50DF               	movf	indf2,w,c
  8623  002D6E  6E27               	movwf	?_vscp_writeRegister,c
  8624  002D70  5192               	movf	vscp_handleProtocolEvent@i_1165& (0+255),w,b
  8625  002D72  ECEF  F02C         	call	_vscp_writeRegister
  8626  002D76  0100               	movlb	0	; () banked
  8627  002D78  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8628  002D7A  51C6               	movf	(_vscp_imsg+9)& (0+255),w,b
  8629  002D7C  08D5               	sublw	low (_vscp_omsg+10)
  8630  002D7E  2592               	addwf	vscp_handleProtocolEvent@i_1165& (0+255),w,b
  8631  002D80  6ED9               	movwf	fsr2l,c
  8632  002D82  6ADA               	clrf	fsr2h,c
  8633  002D84  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8634                           
  8635                           ; BSR set to: 0
  8636  002D88  2B92               	incf	vscp_handleProtocolEvent@i_1165& (0+255),f,b
  8637  002D8A                     l10087:
  8638                           
  8639                           ; BSR set to: 0
  8640  002D8A  51BD               	movf	_vscp_imsg& (0+255),w,b
  8641  002D8C  0B0F               	andlw	15
  8642  002D8E  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8643  002D90  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8644  002D92  51C6               	movf	(_vscp_imsg+9)& (0+255),w,b
  8645  002D94  277F               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8646  002D96  0E00               	movlw	0
  8647  002D98  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8648  002D9A  0EFC               	movlw	252
  8649  002D9C  257F               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8650  002D9E  6F81               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  8651  002DA0  0EFF               	movlw	255
  8652  002DA2  2180               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8653  002DA4  6F82               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  8654  002DA6  5192               	movf	vscp_handleProtocolEvent@i_1165& (0+255),w,b
  8655  002DA8  6F83               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  8656  002DAA  6B84               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  8657  002DAC  5184               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  8658  002DAE  0A80               	xorlw	128
  8659  002DB0  6F85               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  8660  002DB2  5181               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  8661  002DB4  5D83               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  8662  002DB6  5182               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  8663  002DB8  0A80               	xorlw	128
  8664  002DBA  5985               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  8665  002DBC  E3D2               	bnc	l10083
  8666                           
  8667                           ; BSR set to: 0
  8668                           ;vscp_firmware.c: 1243: }
  8669                           ;vscp_firmware.c: 1246: vscp_page_select = page_save;
  8670  002DBE  C088  F046         	movff	vscp_handleProtocolEvent@page_save_1166,_vscp_page_select
  8671  002DC2  C089  F047         	movff	vscp_handleProtocolEvent@page_save_1166+1,_vscp_page_select+1
  8672                           
  8673                           ; BSR set to: 0
  8674                           ;vscp_firmware.c: 1248: vscp_omsg.priority = 0x07;
  8675  002DC6  0E07               	movlw	7
  8676  002DC8  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  8677                           
  8678                           ; BSR set to: 0
  8679                           ;vscp_firmware.c: 1249: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  8680  002DCA  51BD               	movf	_vscp_imsg& (0+255),w,b
  8681  002DCC  0B0F               	andlw	15
  8682  002DCE  0F80               	addlw	128
  8683  002DD0  6FCB               	movwf	_vscp_omsg& (0+255),b
  8684                           
  8685                           ; BSR set to: 0
  8686                           ;vscp_firmware.c: 1250: vscp_omsg.vscp_class = 0;
  8687  002DD2  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  8688  002DD4  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  8689                           
  8690                           ; BSR set to: 0
  8691                           ;vscp_firmware.c: 1251: vscp_omsg.vscp_type = 39;
  8692  002DD6  0E27               	movlw	39
  8693  002DD8  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  8694                           
  8695                           ; BSR set to: 0
  8696                           ;vscp_firmware.c: 1252: vscp_omsg.data[0] = 0;
  8697  002DDA  6BD1               	clrf	(_vscp_omsg+6)& (0+255),b
  8698                           
  8699                           ; BSR set to: 0
  8700                           ;vscp_firmware.c: 1253: vscp_omsg.data[1] = vscp_imsg.data[1];
  8701  002DDC  C0C4  F0D2         	movff	_vscp_imsg+7,_vscp_omsg+7
  8702                           
  8703                           ; BSR set to: 0
  8704                           ;vscp_firmware.c: 1254: vscp_omsg.data[2] = vscp_imsg.data[2];
  8705  002DE0  C0C5  F0D3         	movff	_vscp_imsg+8,_vscp_omsg+8
  8706                           
  8707                           ; BSR set to: 0
  8708                           ;vscp_firmware.c: 1255: vscp_omsg.data[3] = vscp_imsg.data[3];
  8709  002DE4  C0C6  F0D4         	movff	_vscp_imsg+9,_vscp_omsg+9
  8710  002DE8  D535               	goto	l9717
  8711  002DEA                     l10109:
  8712                           
  8713                           ; BSR set to: 0
  8714  002DEA  51C1               	movf	(_vscp_imsg+4)& (0+255),w,b
  8715                           
  8716                           ; Switch size 1, requested type "speed"
  8717                           ; Number of cases is 16, Range of values is 1 to 38
  8718                           ; switch strategies available:
  8719                           ; Name         Instructions Cycles
  8720                           ; simple_byte           49    25 (average)
  8721                           ;	Chosen strategy is simple_byte
  8722  002DEC  0A01               	xorlw	1	; case 1
  8723  002DEE  E101 D509          	bz	l9691
  8724  002DF2  0A03               	xorlw	3	; case 2
  8725  002DF4  E101 D509          	bz	l9693
  8726  002DF8  0A04               	xorlw	4	; case 6
  8727  002DFA  E101 D509          	bz	l9695
  8728  002DFE  0A0E               	xorlw	14	; case 8
  8729  002E00  E101 D509          	bz	l9697
  8730  002E04  0A01               	xorlw	1	; case 9
  8731  002E06  E101 D509          	bz	l9699
  8732  002E0A  0A02               	xorlw	2	; case 11
  8733  002E0C  E101 D529          	bz	l9733
  8734  002E10  0A07               	xorlw	7	; case 12
  8735  002E12  E101 D53F          	bz	l9767
  8736  002E16  0A1B               	xorlw	27	; case 23
  8737  002E18  E101 D5D4          	bz	l9825
  8738  002E1C  0A0F               	xorlw	15	; case 24
  8739  002E1E  E101 D5E8          	bz	l9831
  8740  002E22  0A01               	xorlw	1	; case 25
  8741  002E24  E101 D640          	bz	l9865
  8742  002E28  0A04               	xorlw	4	; case 29
  8743  002E2A  E101 D670          	bz	l9891
  8744  002E2E  0A03               	xorlw	3	; case 30
  8745  002E30  E101 D67D          	bz	l9907
  8746  002E34  0A01               	xorlw	1	; case 31
  8747  002E36  E101 D68A          	bz	l9923
  8748  002E3A  0A3E               	xorlw	62	; case 33
  8749  002E3C  E101 D6F1          	bz	l10009
  8750  002E40  0A04               	xorlw	4	; case 37
  8751  002E42  E101 D6FF          	bz	l10019
  8752  002E46  0A03               	xorlw	3	; case 38
  8753  002E48  E101 D774          	bz	l10075
  8754  002E4C                     l1275:
  8755  002E4C  0012               	return	
  8756  002E4E                     __end_of_vscp_handleProtocolEvent:
  8757                           	opt stack 0
  8758                           tblptru	equ	0xFF8
  8759                           tblptrh	equ	0xFF7
  8760                           tblptrl	equ	0xFF6
  8761                           tablat	equ	0xFF5
  8762                           prodh	equ	0xFF4
  8763                           prodl	equ	0xFF3
  8764                           postinc0	equ	0xFEE
  8765                           wreg	equ	0xFE8
  8766                           postdec1	equ	0xFE5
  8767                           fsr1h	equ	0xFE2
  8768                           fsr1l	equ	0xFE1
  8769                           indf2	equ	0xFDF
  8770                           postinc2	equ	0xFDE
  8771                           postdec2	equ	0xFDD
  8772                           fsr2h	equ	0xFDA
  8773                           fsr2l	equ	0xFD9
  8774                           status	equ	0xFD8
  8775                           
  8776 ;; *************** function ___lbmod *****************
  8777 ;; Defined at:
  8778 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/common/lbmod.c"
  8779 ;; Parameters:    Size  Location     Type
  8780 ;;  dividend        1    wreg     unsigned char 
  8781 ;;  divisor         1   13[COMRAM] unsigned char 
  8782 ;; Auto vars:     Size  Location     Type
  8783 ;;  dividend        1   14[COMRAM] unsigned char 
  8784 ;;  rem             1   16[COMRAM] unsigned char 
  8785 ;;  counter         1   15[COMRAM] unsigned char 
  8786 ;; Return value:  Size  Location     Type
  8787 ;;                  1    wreg      unsigned char 
  8788 ;; Registers used:
  8789 ;;		wreg, status,2, status,0
  8790 ;; Tracked objects:
  8791 ;;		On entry : F/0
  8792 ;;		On exit  : 0/0
  8793 ;;		Unchanged: 0/0
  8794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8795 ;;      Params:         1       0       0       0       0       0       0
  8796 ;;      Locals:         3       0       0       0       0       0       0
  8797 ;;      Temps:          0       0       0       0       0       0       0
  8798 ;;      Totals:         4       0       0       0       0       0       0
  8799 ;;Total ram usage:        4 bytes
  8800 ;; Hardware stack levels used:    1
  8801 ;; Hardware stack levels required when called:    2
  8802 ;; This function calls:
  8803 ;;		Nothing
  8804 ;; This function is called by:
  8805 ;;		_vscp_handleProtocolEvent
  8806 ;; This function uses a non-reentrant model
  8807 ;;
  8808                           
  8809                           	psect	text34
  8810  005946                     __ptext34:
  8811                           	opt stack 0
  8812  005946                     ___lbmod:
  8813                           	opt stack 27
  8814                           
  8815                           ;incstack = 0
  8816                           ;incstack = 0
  8817                           ;___lbmod@dividend stored from wreg
  8818  005946  CFE8 F00F          	movff	wreg,___lbmod@dividend
  8819                           
  8820                           ; BSR set to: 0
  8821  00594A  0E08               	movlw	8
  8822  00594C  6E10               	movwf	___lbmod@counter,c
  8823                           
  8824                           ; BSR set to: 0
  8825  00594E  6A11               	clrf	___lbmod@rem,c
  8826  005950                     l9165:
  8827  005950  90D8               	bcf	status,0,c
  8828  005952  340F               	rlcf	___lbmod@dividend& (0+255),w,c
  8829  005954  3411               	rlcf	___lbmod@rem& (0+255),w,c
  8830  005956  6E11               	movwf	___lbmod@rem,c
  8831  005958  90D8               	bcf	status,0,c
  8832  00595A  360F               	rlcf	___lbmod@dividend,f,c
  8833  00595C  500E               	movf	___lbmod@divisor,w,c
  8834  00595E  5C11               	subwf	___lbmod@rem,w,c
  8835  005960  E302               	bnc	l9173
  8836  005962  500E               	movf	___lbmod@divisor,w,c
  8837  005964  5E11               	subwf	___lbmod@rem,f,c
  8838  005966                     l9173:
  8839  005966  2E10               	decfsz	___lbmod@counter,f,c
  8840  005968  D7F3               	goto	l9165
  8841  00596A  5011               	movf	___lbmod@rem,w,c
  8842  00596C  0012               	return	
  8843  00596E                     __end_of___lbmod:
  8844                           	opt stack 0
  8845                           tblptru	equ	0xFF8
  8846                           tblptrh	equ	0xFF7
  8847                           tblptrl	equ	0xFF6
  8848                           tablat	equ	0xFF5
  8849                           prodh	equ	0xFF4
  8850                           prodl	equ	0xFF3
  8851                           postinc0	equ	0xFEE
  8852                           wreg	equ	0xFE8
  8853                           postdec1	equ	0xFE5
  8854                           fsr1h	equ	0xFE2
  8855                           fsr1l	equ	0xFE1
  8856                           indf2	equ	0xFDF
  8857                           postinc2	equ	0xFDE
  8858                           postdec2	equ	0xFDD
  8859                           fsr2h	equ	0xFDA
  8860                           fsr2l	equ	0xFD9
  8861                           status	equ	0xFD8
  8862                           
  8863 ;; *************** function _vscp_writeRegister *****************
  8864 ;; Defined at:
  8865 ;;		line 690 in file "../../vscp_firmware/common/vscp_firmware.c"
  8866 ;; Parameters:    Size  Location     Type
  8867 ;;  reg             1    wreg     unsigned char 
  8868 ;;  value           1   38[COMRAM] unsigned char 
  8869 ;; Auto vars:     Size  Location     Type
  8870 ;;  reg             1   39[COMRAM] unsigned char 
  8871 ;; Return value:  Size  Location     Type
  8872 ;;                  1    wreg      unsigned char 
  8873 ;; Registers used:
  8874 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8875 ;; Tracked objects:
  8876 ;;		On entry : F/0
  8877 ;;		On exit  : 0/0
  8878 ;;		Unchanged: 0/0
  8879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8880 ;;      Params:         1       0       0       0       0       0       0
  8881 ;;      Locals:         1       0       0       0       0       0       0
  8882 ;;      Temps:          0       0       0       0       0       0       0
  8883 ;;      Totals:         2       0       0       0       0       0       0
  8884 ;;Total ram usage:        2 bytes
  8885 ;; Hardware stack levels used:    1
  8886 ;; Hardware stack levels required when called:    6
  8887 ;; This function calls:
  8888 ;;		_vscp_writeAppReg
  8889 ;;		_vscp_writeStdReg
  8890 ;; This function is called by:
  8891 ;;		_vscp_handleProtocolEvent
  8892 ;; This function uses a non-reentrant model
  8893 ;;
  8894                           
  8895                           	psect	text35
  8896  0059DE                     __ptext35:
  8897                           	opt stack 0
  8898  0059DE                     _vscp_writeRegister:
  8899                           	opt stack 23
  8900                           
  8901                           ;incstack = 0
  8902                           ;incstack = 0
  8903                           ;vscp_writeRegister@reg stored from wreg
  8904  0059DE  CFE8 F028          	movff	wreg,vscp_writeRegister@reg
  8905                           
  8906                           ; BSR set to: 0
  8907                           ;vscp_firmware.c: 691: if (reg >= 0x80) {
  8908  0059E2  0E7F               	movlw	127
  8909  0059E4  6428               	cpfsgt	vscp_writeRegister@reg,c
  8910  0059E6  D006               	goto	l11307
  8911                           
  8912                           ; BSR set to: 0
  8913                           ;vscp_firmware.c: 692: return vscp_writeStdReg(reg, value);
  8914  0059E8  C027  F01B         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  8915  0059EC  5028               	movf	vscp_writeRegister@reg,w,c
  8916  0059EE  ECE4  F022         	call	_vscp_writeStdReg
  8917  0059F2  D005               	goto	l1153
  8918  0059F4                     l11307:
  8919                           
  8920                           ; BSR set to: 0
  8921                           ;vscp_firmware.c: 694: else {
  8922                           ;vscp_firmware.c: 695: return vscp_writeAppReg(reg, value);
  8923  0059F4  C027  F023         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  8924  0059F8  5028               	movf	vscp_writeRegister@reg,w,c
  8925  0059FA  ECB7  F005         	call	_vscp_writeAppReg
  8926  0059FE                     l1153:
  8927  0059FE  0012               	return	
  8928  005A00                     __end_of_vscp_writeRegister:
  8929                           	opt stack 0
  8930                           tblptru	equ	0xFF8
  8931                           tblptrh	equ	0xFF7
  8932                           tblptrl	equ	0xFF6
  8933                           tablat	equ	0xFF5
  8934                           prodh	equ	0xFF4
  8935                           prodl	equ	0xFF3
  8936                           postinc0	equ	0xFEE
  8937                           wreg	equ	0xFE8
  8938                           postdec1	equ	0xFE5
  8939                           fsr1h	equ	0xFE2
  8940                           fsr1l	equ	0xFE1
  8941                           indf2	equ	0xFDF
  8942                           postinc2	equ	0xFDE
  8943                           postdec2	equ	0xFDD
  8944                           fsr2h	equ	0xFDA
  8945                           fsr2l	equ	0xFD9
  8946                           status	equ	0xFD8
  8947                           
  8948 ;; *************** function _vscp_writeStdReg *****************
  8949 ;; Defined at:
  8950 ;;		line 704 in file "../../vscp_firmware/common/vscp_firmware.c"
  8951 ;; Parameters:    Size  Location     Type
  8952 ;;  reg             1    wreg     unsigned char 
  8953 ;;  value           1   26[COMRAM] unsigned char 
  8954 ;; Auto vars:     Size  Location     Type
  8955 ;;  reg             1   32[COMRAM] unsigned char 
  8956 ;;  rv              1   31[COMRAM] unsigned char 
  8957 ;; Return value:  Size  Location     Type
  8958 ;;                  1    wreg      unsigned char 
  8959 ;; Registers used:
  8960 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8961 ;; Tracked objects:
  8962 ;;		On entry : F/0
  8963 ;;		On exit  : 0/0
  8964 ;;		Unchanged: 0/0
  8965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8966 ;;      Params:         1       0       0       0       0       0       0
  8967 ;;      Locals:         2       0       0       0       0       0       0
  8968 ;;      Temps:          4       0       0       0       0       0       0
  8969 ;;      Totals:         7       0       0       0       0       0       0
  8970 ;;Total ram usage:        7 bytes
  8971 ;; Hardware stack levels used:    1
  8972 ;; Hardware stack levels required when called:    5
  8973 ;; This function calls:
  8974 ;;		_vscp_getGUID
  8975 ;;		_vscp_setGUID
  8976 ;;		_vscp_getUserID
  8977 ;;		_vscp_setUserID
  8978 ;;		_vscp_getManufacturerId
  8979 ;;		_vscp_setManufacturerId
  8980 ;;		_vscp_restoreDefaults
  8981 ;; This function is called by:
  8982 ;;		_vscp_writeRegister
  8983 ;;		_vscp_handleProtocolEvent
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           	psect	text36
  8988  0045C8                     __ptext36:
  8989                           	opt stack 0
  8990  0045C8                     _vscp_writeStdReg:
  8991                           	opt stack 24
  8992                           
  8993                           ;incstack = 0
  8994                           ;incstack = 0
  8995                           ;vscp_writeStdReg@reg stored from wreg
  8996  0045C8  CFE8 F021          	movff	wreg,vscp_writeStdReg@reg
  8997                           
  8998                           ; BSR set to: 0
  8999                           ;vscp_firmware.c: 705: uint8_t rv = ~value;
  9000  0045CC  1C1B               	comf	vscp_writeStdReg@value,w,c
  9001  0045CE  6E20               	movwf	vscp_writeStdReg@rv,c
  9002                           
  9003                           ;vscp_firmware.c: 707: if ( reg == 0x83 ) {
  9004  0045D0  5021               	movf	vscp_writeStdReg@reg,w,c
  9005  0045D2  0A83               	xorlw	131
  9006  0045D4  E102               	bnz	l11315
  9007                           
  9008                           ; BSR set to: 0
  9009                           ;vscp_firmware.c: 708: rv = vscp_errorcnt = 0;
  9010  0045D6  6A4B               	clrf	_vscp_errorcnt,c
  9011  0045D8  D07E               	goto	l1181
  9012  0045DA                     l11315:
  9013                           
  9014                           ; BSR set to: 0
  9015                           ;vscp_firmware.c: 710: else if ((reg >= (0x84)) &&
  9016                           ;vscp_firmware.c: 711: (reg < 0x89)) {
  9017  0045DA  0E83               	movlw	131
  9018  0045DC  6421               	cpfsgt	vscp_writeStdReg@reg,c
  9019  0045DE  D00E               	goto	l11321
  9020                           
  9021                           ; BSR set to: 0
  9022  0045E0  0E89               	movlw	137
  9023  0045E2  6021               	cpfslt	vscp_writeStdReg@reg,c
  9024  0045E4  D00B               	goto	l11321
  9025                           
  9026                           ; BSR set to: 0
  9027                           ;vscp_firmware.c: 714: vscp_setUserID((reg - 0x84), value);
  9028  0045E6  C01B  F011         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  9029  0045EA  5021               	movf	vscp_writeStdReg@reg,w,c
  9030  0045EC  0F7C               	addlw	124
  9031  0045EE  EC94  F02D         	call	_vscp_setUserID
  9032                           
  9033                           ;vscp_firmware.c: 715: rv = vscp_getUserID((reg - 0x84));
  9034  0045F2  5021               	movf	vscp_writeStdReg@reg,w,c
  9035  0045F4  0F7C               	addlw	124
  9036  0045F6  ECC2  F02D         	call	_vscp_getUserID
  9037  0045FA  D06B               	goto	L19
  9038  0045FC                     l11321:
  9039                           
  9040                           ; BSR set to: 0
  9041                           ;vscp_firmware.c: 718: else if (0x92 == reg) {
  9042  0045FC  5021               	movf	vscp_writeStdReg@reg,w,c
  9043  0045FE  0A92               	xorlw	146
  9044  004600  E10D               	bnz	l11327
  9045                           
  9046                           ; BSR set to: 0
  9047                           ;vscp_firmware.c: 721: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  9048  004602  501B               	movf	vscp_writeStdReg@value,w,c
  9049  004604  6E1D               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9050  004606  6A1C               	clrf	??_vscp_writeStdReg& (0+255),c
  9051  004608  5046               	movf	_vscp_page_select,w,c
  9052  00460A  6E1E               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  9053  00460C  6A1F               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  9054  00460E  101C               	iorwf	??_vscp_writeStdReg,w,c
  9055  004610  6E46               	movwf	_vscp_page_select,c
  9056  004612  501D               	movf	??_vscp_writeStdReg+1,w,c
  9057  004614  101F               	iorwf	??_vscp_writeStdReg+3,w,c
  9058  004616  6E47               	movwf	_vscp_page_select+1,c
  9059                           
  9060                           ; BSR set to: 0
  9061                           ;vscp_firmware.c: 722: rv = (vscp_page_select >> 8) & 0xff;
  9062  004618  5047               	movf	_vscp_page_select+1,w,c
  9063  00461A  D05B               	goto	L19
  9064  00461C                     l11327:
  9065                           
  9066                           ; BSR set to: 0
  9067                           ;vscp_firmware.c: 724: else if (0x93 == reg) {
  9068  00461C  5021               	movf	vscp_writeStdReg@reg,w,c
  9069  00461E  0A93               	xorlw	147
  9070  004620  E10B               	bnz	l11333
  9071                           
  9072                           ; BSR set to: 0
  9073                           ;vscp_firmware.c: 727: vscp_page_select = (vscp_page_select & 0xff00) | value;
  9074  004622  6A1C               	clrf	??_vscp_writeStdReg& (0+255),c
  9075  004624  5047               	movf	_vscp_page_select+1,w,c
  9076  004626  6E1D               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9077  004628  501B               	movf	vscp_writeStdReg@value,w,c
  9078  00462A  101C               	iorwf	??_vscp_writeStdReg,w,c
  9079  00462C  6E46               	movwf	_vscp_page_select,c
  9080  00462E  501D               	movf	??_vscp_writeStdReg+1,w,c
  9081  004630  6E47               	movwf	_vscp_page_select+1,c
  9082                           
  9083                           ; BSR set to: 0
  9084                           ;vscp_firmware.c: 728: rv = (vscp_page_select & 0xff);
  9085  004632  C046  F020         	movff	_vscp_page_select,vscp_writeStdReg@rv
  9086                           
  9087                           ;vscp_firmware.c: 729: }
  9088  004636  D050               	goto	l11375
  9089  004638                     l11333:
  9090                           
  9091                           ; BSR set to: 0
  9092                           ;vscp_firmware.c: 734: else if ((reg > 0x88) && (reg < 0x91)) {
  9093  004638  0E88               	movlw	136
  9094  00463A  6421               	cpfsgt	vscp_writeStdReg@reg,c
  9095  00463C  D019               	goto	l11345
  9096                           
  9097                           ; BSR set to: 0
  9098  00463E  0E91               	movlw	145
  9099  004640  6021               	cpfslt	vscp_writeStdReg@reg,c
  9100  004642  D016               	goto	l11345
  9101                           
  9102                           ; BSR set to: 0
  9103                           ;vscp_firmware.c: 736: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9104                           ;vscp_firmware.c: 737: (0xff != (vscp_page_select & 0xff))) {
  9105  004644  C047  F01C         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9106  004648  C01C  F01D         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9107  00464C  6A1E               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9108  00464E  281D               	incf	??_vscp_writeStdReg+1,w,c
  9109  004650  E102               	bnz	l11341
  9110                           
  9111                           ; BSR set to: 0
  9112  004652  2846               	incf	_vscp_page_select,w,c
  9113  004654  E002               	bz	l11343
  9114  004656                     l11341:
  9115                           
  9116                           ; BSR set to: 0
  9117                           ;vscp_firmware.c: 739: rv = ~value;
  9118  004656  1C1B               	comf	vscp_writeStdReg@value,w,c
  9119  004658  D03C               	goto	L19
  9120  00465A                     l11343:
  9121                           
  9122                           ; BSR set to: 0
  9123                           ;vscp_firmware.c: 741: else {
  9124                           ;vscp_firmware.c: 743: vscp_setManufacturerId(reg - 0x89, value);
  9125  00465A  C01B  F011         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  9126  00465E  5021               	movf	vscp_writeStdReg@reg,w,c
  9127  004660  0F77               	addlw	119
  9128  004662  EC88  F02D         	call	_vscp_setManufacturerId
  9129                           
  9130                           ;vscp_firmware.c: 744: rv = vscp_getManufacturerId(reg - 0x89);
  9131  004666  5021               	movf	vscp_writeStdReg@reg,w,c
  9132  004668  0F77               	addlw	119
  9133  00466A  ECB8  F02D         	call	_vscp_getManufacturerId
  9134  00466E  D031               	goto	L19
  9135  004670                     l11345:
  9136                           
  9137                           ; BSR set to: 0
  9138                           ;vscp_firmware.c: 747: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  9139  004670  0ECF               	movlw	207
  9140  004672  6421               	cpfsgt	vscp_writeStdReg@reg,c
  9141  004674  D017               	goto	l11357
  9142                           
  9143                           ; BSR set to: 0
  9144  004676  0EE0               	movlw	224
  9145  004678  6021               	cpfslt	vscp_writeStdReg@reg,c
  9146  00467A  D014               	goto	l11357
  9147                           
  9148                           ; BSR set to: 0
  9149                           ;vscp_firmware.c: 749: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9150                           ;vscp_firmware.c: 750: (0xff != (vscp_page_select & 0xff))) {
  9151  00467C  C047  F01C         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9152  004680  C01C  F01D         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9153  004684  6A1E               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9154  004686  281D               	incf	??_vscp_writeStdReg+1,w,c
  9155  004688  E1E6               	bnz	l11341
  9156                           
  9157                           ; BSR set to: 0
  9158  00468A  2846               	incf	_vscp_page_select,w,c
  9159  00468C  E1E4               	bnz	l11341
  9160                           
  9161                           ; BSR set to: 0
  9162                           ;vscp_firmware.c: 754: else {
  9163                           ;vscp_firmware.c: 755: vscp_setGUID(reg - 0xD0, value);
  9164  00468E  C01B  F011         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  9165  004692  5021               	movf	vscp_writeStdReg@reg,w,c
  9166  004694  0F30               	addlw	48
  9167  004696  EC00  F02D         	call	_vscp_setGUID
  9168                           
  9169                           ;vscp_firmware.c: 756: rv = vscp_getGUID(reg - 0xD0);
  9170  00469A  5021               	movf	vscp_writeStdReg@reg,w,c
  9171  00469C  0F30               	addlw	48
  9172  00469E  ECCC  F02D         	call	_vscp_getGUID
  9173  0046A2  D017               	goto	L19
  9174  0046A4                     l11357:
  9175                           
  9176                           ; BSR set to: 0
  9177                           ;vscp_firmware.c: 760: else if ( 0xA2 == reg ) {
  9178  0046A4  5021               	movf	vscp_writeStdReg@reg,w,c
  9179  0046A6  0AA2               	xorlw	162
  9180  0046A8  E1D6               	bnz	l11341
  9181                           
  9182                           ; BSR set to: 0
  9183                           ;vscp_firmware.c: 761: if ( 0x55 == value ) {
  9184  0046AA  501B               	movf	vscp_writeStdReg@value,w,c
  9185  0046AC  0A55               	xorlw	85
  9186  0046AE  E105               	bnz	l11365
  9187                           
  9188                           ; BSR set to: 0
  9189                           ;vscp_firmware.c: 762: vscp_configtimer = 0;
  9190  0046B0  0101               	movlb	1	; () banked
  9191  0046B2  6B1C               	clrf	_vscp_configtimer& (0+255),b	;volatile
  9192  0046B4  6B1D               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  9193                           
  9194                           ; BSR set to: 1
  9195                           ;vscp_firmware.c: 763: rv = 0x55;
  9196  0046B6  0E55               	movlw	85
  9197  0046B8  D00C               	goto	L19
  9198  0046BA                     l11365:
  9199                           
  9200                           ; BSR set to: 0
  9201                           ;vscp_firmware.c: 765: else if ( 0xaa == value ) {
  9202  0046BA  501B               	movf	vscp_writeStdReg@value,w,c
  9203  0046BC  0AAA               	xorlw	170
  9204  0046BE  E10C               	bnz	l11375
  9205                           
  9206                           ; BSR set to: 0
  9207                           ;vscp_firmware.c: 766: if ( vscp_configtimer < 1000 ) {
  9208  0046C0  0EE8               	movlw	232
  9209  0046C2  0101               	movlb	1	; () banked
  9210  0046C4  5D1C               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  9211  0046C6  0E03               	movlw	3
  9212  0046C8  591D               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  9213  0046CA  E205               	bc	l1181
  9214                           
  9215                           ; BSR set to: 1
  9216                           ;vscp_firmware.c: 767: vscp_restoreDefaults();
  9217  0046CC  EC14  F02E         	call	_vscp_restoreDefaults	;wreg free
  9218                           
  9219                           ; BSR set to: 0
  9220                           ;vscp_firmware.c: 768: rv = 0xaa;
  9221  0046D0  0EAA               	movlw	170
  9222  0046D2                     L19:
  9223  0046D2  6E20               	movwf	vscp_writeStdReg@rv,c
  9224                           
  9225                           ;vscp_firmware.c: 769: }
  9226  0046D4  D001               	goto	l11375
  9227  0046D6                     l1181:
  9228                           
  9229                           ; BSR set to: 1
  9230                           ;vscp_firmware.c: 770: else {
  9231                           ;vscp_firmware.c: 771: rv = 0;
  9232  0046D6  6A20               	clrf	vscp_writeStdReg@rv,c
  9233  0046D8                     l11375:
  9234                           
  9235                           ;vscp_firmware.c: 779: }
  9236                           ;vscp_firmware.c: 781: return rv;
  9237  0046D8  5020               	movf	vscp_writeStdReg@rv,w,c
  9238  0046DA  0012               	return	
  9239  0046DC                     __end_of_vscp_writeStdReg:
  9240                           	opt stack 0
  9241                           tblptru	equ	0xFF8
  9242                           tblptrh	equ	0xFF7
  9243                           tblptrl	equ	0xFF6
  9244                           tablat	equ	0xFF5
  9245                           prodh	equ	0xFF4
  9246                           prodl	equ	0xFF3
  9247                           postinc0	equ	0xFEE
  9248                           wreg	equ	0xFE8
  9249                           postdec1	equ	0xFE5
  9250                           fsr1h	equ	0xFE2
  9251                           fsr1l	equ	0xFE1
  9252                           indf2	equ	0xFDF
  9253                           postinc2	equ	0xFDE
  9254                           postdec2	equ	0xFDD
  9255                           fsr2h	equ	0xFDA
  9256                           fsr2l	equ	0xFD9
  9257                           status	equ	0xFD8
  9258                           
  9259 ;; *************** function _vscp_restoreDefaults *****************
  9260 ;; Defined at:
  9261 ;;		line 2856 in file "../main.c"
  9262 ;; Parameters:    Size  Location     Type
  9263 ;;		None
  9264 ;; Auto vars:     Size  Location     Type
  9265 ;;		None
  9266 ;; Return value:  Size  Location     Type
  9267 ;;		None               void
  9268 ;; Registers used:
  9269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9270 ;; Tracked objects:
  9271 ;;		On entry : F/1
  9272 ;;		On exit  : F/0
  9273 ;;		Unchanged: 0/0
  9274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9275 ;;      Params:         0       0       0       0       0       0       0
  9276 ;;      Locals:         0       0       0       0       0       0       0
  9277 ;;      Temps:          0       0       0       0       0       0       0
  9278 ;;      Totals:         0       0       0       0       0       0       0
  9279 ;;Total ram usage:        0 bytes
  9280 ;; Hardware stack levels used:    1
  9281 ;; Hardware stack levels required when called:    4
  9282 ;; This function calls:
  9283 ;;		_init_app_eeprom
  9284 ;;		_init_app_ram
  9285 ;; This function is called by:
  9286 ;;		_vscp_writeStdReg
  9287 ;; This function uses a non-reentrant model
  9288 ;;
  9289                           
  9290                           	psect	text37
  9291  005C28                     __ptext37:
  9292                           	opt stack 0
  9293  005C28                     _vscp_restoreDefaults:
  9294                           	opt stack 24
  9295                           
  9296                           ; BSR set to: 1
  9297                           ;main.c: 2857: init_app_eeprom();
  9298                           
  9299                           ;incstack = 0
  9300                           ;incstack = 0
  9301  005C28  EC27  F017         	call	_init_app_eeprom	;wreg free
  9302                           
  9303                           ;main.c: 2858: init_app_ram();
  9304  005C2C  EF0F  F02B         	goto	_init_app_ram	;wreg free
  9305  005C30                     __end_of_vscp_restoreDefaults:
  9306                           	opt stack 0
  9307                           tblptru	equ	0xFF8
  9308                           tblptrh	equ	0xFF7
  9309                           tblptrl	equ	0xFF6
  9310                           tablat	equ	0xFF5
  9311                           prodh	equ	0xFF4
  9312                           prodl	equ	0xFF3
  9313                           postinc0	equ	0xFEE
  9314                           wreg	equ	0xFE8
  9315                           postdec1	equ	0xFE5
  9316                           fsr1h	equ	0xFE2
  9317                           fsr1l	equ	0xFE1
  9318                           indf2	equ	0xFDF
  9319                           postinc2	equ	0xFDE
  9320                           postdec2	equ	0xFDD
  9321                           fsr2h	equ	0xFDA
  9322                           fsr2l	equ	0xFD9
  9323                           status	equ	0xFD8
  9324                           
  9325 ;; *************** function _vscp_setManufacturerId *****************
  9326 ;; Defined at:
  9327 ;;		line 2660 in file "../main.c"
  9328 ;; Parameters:    Size  Location     Type
  9329 ;;  idx             1    wreg     unsigned char 
  9330 ;;  data            1   16[COMRAM] unsigned char 
  9331 ;; Auto vars:     Size  Location     Type
  9332 ;;  idx             1   17[COMRAM] unsigned char 
  9333 ;; Return value:  Size  Location     Type
  9334 ;;		None               void
  9335 ;; Registers used:
  9336 ;;		wreg, status,2, status,0, cstack
  9337 ;; Tracked objects:
  9338 ;;		On entry : F/0
  9339 ;;		On exit  : 0/0
  9340 ;;		Unchanged: 0/0
  9341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9342 ;;      Params:         1       0       0       0       0       0       0
  9343 ;;      Locals:         1       0       0       0       0       0       0
  9344 ;;      Temps:          0       0       0       0       0       0       0
  9345 ;;      Totals:         2       0       0       0       0       0       0
  9346 ;;Total ram usage:        2 bytes
  9347 ;; Hardware stack levels used:    1
  9348 ;; Hardware stack levels required when called:    3
  9349 ;; This function calls:
  9350 ;;		_writeEEPROM
  9351 ;; This function is called by:
  9352 ;;		_vscp_writeStdReg
  9353 ;; This function uses a non-reentrant model
  9354 ;;
  9355                           
  9356                           	psect	text38
  9357  005B10                     __ptext38:
  9358                           	opt stack 0
  9359  005B10                     _vscp_setManufacturerId:
  9360                           	opt stack 25
  9361                           
  9362                           ; BSR set to: 0
  9363                           ;incstack = 0
  9364                           ;incstack = 0
  9365                           ;vscp_setManufacturerId@idx stored from wreg
  9366  005B10  CFE8 F012          	movff	wreg,vscp_setManufacturerId@idx
  9367                           
  9368                           ; BSR set to: 0
  9369                           ;main.c: 2661: writeEEPROM(0x0A + idx, data);
  9370  005B14  0E0A               	movlw	10
  9371  005B16  2412               	addwf	vscp_setManufacturerId@idx,w,c
  9372  005B18  6E0E               	movwf	?_writeEEPROM,c
  9373  005B1A  6A0F               	clrf	?_writeEEPROM+1,c
  9374  005B1C  0E00               	movlw	0
  9375  005B1E  220F               	addwfc	?_writeEEPROM+1,f,c
  9376  005B20  C011  F010         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
  9377  005B24  EFCA  F02C         	goto	_writeEEPROM	;wreg free
  9378  005B28                     __end_of_vscp_setManufacturerId:
  9379                           	opt stack 0
  9380                           tblptru	equ	0xFF8
  9381                           tblptrh	equ	0xFF7
  9382                           tblptrl	equ	0xFF6
  9383                           tablat	equ	0xFF5
  9384                           prodh	equ	0xFF4
  9385                           prodl	equ	0xFF3
  9386                           postinc0	equ	0xFEE
  9387                           wreg	equ	0xFE8
  9388                           postdec1	equ	0xFE5
  9389                           fsr1h	equ	0xFE2
  9390                           fsr1l	equ	0xFE1
  9391                           indf2	equ	0xFDF
  9392                           postinc2	equ	0xFDE
  9393                           postdec2	equ	0xFDD
  9394                           fsr2h	equ	0xFDA
  9395                           fsr2l	equ	0xFD9
  9396                           status	equ	0xFD8
  9397                           
  9398 ;; *************** function _vscp_setUserID *****************
  9399 ;; Defined at:
  9400 ;;		line 2638 in file "../main.c"
  9401 ;; Parameters:    Size  Location     Type
  9402 ;;  idx             1    wreg     unsigned char 
  9403 ;;  data            1   16[COMRAM] unsigned char 
  9404 ;; Auto vars:     Size  Location     Type
  9405 ;;  idx             1   17[COMRAM] unsigned char 
  9406 ;; Return value:  Size  Location     Type
  9407 ;;		None               void
  9408 ;; Registers used:
  9409 ;;		wreg, status,2, status,0, cstack
  9410 ;; Tracked objects:
  9411 ;;		On entry : F/0
  9412 ;;		On exit  : 0/0
  9413 ;;		Unchanged: 0/0
  9414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9415 ;;      Params:         1       0       0       0       0       0       0
  9416 ;;      Locals:         1       0       0       0       0       0       0
  9417 ;;      Temps:          0       0       0       0       0       0       0
  9418 ;;      Totals:         2       0       0       0       0       0       0
  9419 ;;Total ram usage:        2 bytes
  9420 ;; Hardware stack levels used:    1
  9421 ;; Hardware stack levels required when called:    3
  9422 ;; This function calls:
  9423 ;;		_writeEEPROM
  9424 ;; This function is called by:
  9425 ;;		_vscp_writeStdReg
  9426 ;; This function uses a non-reentrant model
  9427 ;;
  9428                           
  9429                           	psect	text39
  9430  005B28                     __ptext39:
  9431                           	opt stack 0
  9432  005B28                     _vscp_setUserID:
  9433                           	opt stack 25
  9434                           
  9435                           ;incstack = 0
  9436                           ;incstack = 0
  9437                           ;vscp_setUserID@idx stored from wreg
  9438  005B28  CFE8 F012          	movff	wreg,vscp_setUserID@idx
  9439                           
  9440                           ; BSR set to: 0
  9441                           ;main.c: 2639: writeEEPROM(idx + 0x05, data);
  9442  005B2C  0E05               	movlw	5
  9443  005B2E  2412               	addwf	vscp_setUserID@idx,w,c
  9444  005B30  6E0E               	movwf	?_writeEEPROM,c
  9445  005B32  6A0F               	clrf	?_writeEEPROM+1,c
  9446  005B34  0E00               	movlw	0
  9447  005B36  220F               	addwfc	?_writeEEPROM+1,f,c
  9448  005B38  C011  F010         	movff	vscp_setUserID@data,?_writeEEPROM+2
  9449  005B3C  EFCA  F02C         	goto	_writeEEPROM	;wreg free
  9450  005B40                     __end_of_vscp_setUserID:
  9451                           	opt stack 0
  9452                           tblptru	equ	0xFF8
  9453                           tblptrh	equ	0xFF7
  9454                           tblptrl	equ	0xFF6
  9455                           tablat	equ	0xFF5
  9456                           prodh	equ	0xFF4
  9457                           prodl	equ	0xFF3
  9458                           postinc0	equ	0xFEE
  9459                           wreg	equ	0xFE8
  9460                           postdec1	equ	0xFE5
  9461                           fsr1h	equ	0xFE2
  9462                           fsr1l	equ	0xFE1
  9463                           indf2	equ	0xFDF
  9464                           postinc2	equ	0xFDE
  9465                           postdec2	equ	0xFDD
  9466                           fsr2h	equ	0xFDA
  9467                           fsr2l	equ	0xFD9
  9468                           status	equ	0xFD8
  9469                           
  9470 ;; *************** function _vscp_setGUID *****************
  9471 ;; Defined at:
  9472 ;;		line 2607 in file "../main.c"
  9473 ;; Parameters:    Size  Location     Type
  9474 ;;  idx             1    wreg     unsigned char 
  9475 ;;  data            1   16[COMRAM] unsigned char 
  9476 ;; Auto vars:     Size  Location     Type
  9477 ;;  idx             1   17[COMRAM] unsigned char 
  9478 ;; Return value:  Size  Location     Type
  9479 ;;		None               void
  9480 ;; Registers used:
  9481 ;;		wreg, status,2, status,0, cstack
  9482 ;; Tracked objects:
  9483 ;;		On entry : F/0
  9484 ;;		On exit  : 0/0
  9485 ;;		Unchanged: 0/0
  9486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9487 ;;      Params:         1       0       0       0       0       0       0
  9488 ;;      Locals:         1       0       0       0       0       0       0
  9489 ;;      Temps:          0       0       0       0       0       0       0
  9490 ;;      Totals:         2       0       0       0       0       0       0
  9491 ;;Total ram usage:        2 bytes
  9492 ;; Hardware stack levels used:    1
  9493 ;; Hardware stack levels required when called:    3
  9494 ;; This function calls:
  9495 ;;		_writeEEPROM
  9496 ;; This function is called by:
  9497 ;;		_vscp_writeStdReg
  9498 ;; This function uses a non-reentrant model
  9499 ;;
  9500                           
  9501                           	psect	text40
  9502  005A00                     __ptext40:
  9503                           	opt stack 0
  9504  005A00                     _vscp_setGUID:
  9505                           	opt stack 25
  9506                           
  9507                           ;incstack = 0
  9508                           ;incstack = 0
  9509                           ;vscp_setGUID@idx stored from wreg
  9510  005A00  CFE8 F012          	movff	wreg,vscp_setGUID@idx
  9511                           
  9512                           ; BSR set to: 0
  9513                           ;main.c: 2608: if ( idx>15 ) return;
  9514  005A04  0E0F               	movlw	15
  9515  005A06  6412               	cpfsgt	vscp_setGUID@idx,c
  9516  005A08  D001               	goto	l8077
  9517  005A0A  D00A               	goto	l551
  9518  005A0C                     l8077:
  9519                           
  9520                           ; BSR set to: 0
  9521                           ;main.c: 2609: writeEEPROM( 0x12 + idx, data );
  9522  005A0C  0E12               	movlw	18
  9523  005A0E  2412               	addwf	vscp_setGUID@idx,w,c
  9524  005A10  6E0E               	movwf	?_writeEEPROM,c
  9525  005A12  6A0F               	clrf	?_writeEEPROM+1,c
  9526  005A14  0E00               	movlw	0
  9527  005A16  220F               	addwfc	?_writeEEPROM+1,f,c
  9528  005A18  C011  F010         	movff	vscp_setGUID@data,?_writeEEPROM+2
  9529  005A1C  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9530  005A20                     l551:
  9531  005A20  0012               	return	
  9532  005A22                     __end_of_vscp_setGUID:
  9533                           	opt stack 0
  9534                           tblptru	equ	0xFF8
  9535                           tblptrh	equ	0xFF7
  9536                           tblptrl	equ	0xFF6
  9537                           tablat	equ	0xFF5
  9538                           prodh	equ	0xFF4
  9539                           prodl	equ	0xFF3
  9540                           postinc0	equ	0xFEE
  9541                           wreg	equ	0xFE8
  9542                           postdec1	equ	0xFE5
  9543                           fsr1h	equ	0xFE2
  9544                           fsr1l	equ	0xFE1
  9545                           indf2	equ	0xFDF
  9546                           postinc2	equ	0xFDE
  9547                           postdec2	equ	0xFDD
  9548                           fsr2h	equ	0xFDA
  9549                           fsr2l	equ	0xFD9
  9550                           status	equ	0xFD8
  9551                           
  9552 ;; *************** function _vscp_writeAppReg *****************
  9553 ;; Defined at:
  9554 ;;		line 1898 in file "../main.c"
  9555 ;; Parameters:    Size  Location     Type
  9556 ;;  reg             1    wreg     unsigned char 
  9557 ;;  val             1   34[COMRAM] unsigned char 
  9558 ;; Auto vars:     Size  Location     Type
  9559 ;;  reg             1   36[COMRAM] unsigned char 
  9560 ;;  pos             1   35[COMRAM] unsigned char 
  9561 ;;  rv              1   37[COMRAM] unsigned char 
  9562 ;; Return value:  Size  Location     Type
  9563 ;;                  1    wreg      unsigned char 
  9564 ;; Registers used:
  9565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9566 ;; Tracked objects:
  9567 ;;		On entry : F/0
  9568 ;;		On exit  : 0/0
  9569 ;;		Unchanged: 0/0
  9570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9571 ;;      Params:         1       0       0       0       0       0       0
  9572 ;;      Locals:         3       0       0       0       0       0       0
  9573 ;;      Temps:          0       0       0       0       0       0       0
  9574 ;;      Totals:         4       0       0       0       0       0       0
  9575 ;;Total ram usage:        4 bytes
  9576 ;; Hardware stack levels used:    1
  9577 ;; Hardware stack levels required when called:    4
  9578 ;; This function calls:
  9579 ;;		_writeEEPROM
  9580 ;;		_readEEPROM
  9581 ;;		_writeCoeffs2Ram
  9582 ;; This function is called by:
  9583 ;;		_vscp_writeRegister
  9584 ;;		_vscp_handleProtocolEvent
  9585 ;; This function uses a non-reentrant model
  9586 ;;
  9587                           
  9588                           	psect	text41
  9589  000B6E                     __ptext41:
  9590                           	opt stack 0
  9591  000B6E                     _vscp_writeAppReg:
  9592                           	opt stack 24
  9593                           
  9594                           ;incstack = 0
  9595                           ;incstack = 0
  9596                           ;vscp_writeAppReg@reg stored from wreg
  9597  000B6E  CFE8 F025          	movff	wreg,vscp_writeAppReg@reg
  9598                           
  9599                           ; BSR set to: 0
  9600                           ;main.c: 1899: uint8_t rv;
  9601                           ;main.c: 1906: rv = ~val;
  9602  000B72  1C23               	comf	vscp_writeAppReg@val,w,c
  9603  000B74  6E26               	movwf	vscp_writeAppReg@rv,c
  9604                           
  9605                           ;main.c: 1908: if (0 == vscp_page_select) {
  9606  000B76  5047               	movf	_vscp_page_select+1,w,c
  9607  000B78  1046               	iorwf	_vscp_page_select,w,c
  9608  000B7A  E102 EFB7  F00A    	bz	l10963
  9609  000B80  EFF1  F00B         	goto	l10965
  9610  000B84                     l10773:
  9611                           
  9612                           ; BSR set to: 0
  9613                           ;main.c: 1914: writeEEPROM(0x41, val);
  9614  000B84  6A0F               	clrf	?_writeEEPROM+1,c
  9615  000B86  0E41               	movlw	65
  9616  000B88  6E0E               	movwf	?_writeEEPROM,c
  9617  000B8A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9618  000B8E  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9619                           
  9620                           ;main.c: 1915: rv = readEEPROM(0x41);
  9621  000B92  6A17               	clrf	?_readEEPROM+1,c
  9622  000B94  0E41               	movlw	65
  9623  000B96  6E16               	movwf	?_readEEPROM,c
  9624  000B98  ECD6  F02D         	call	_readEEPROM	;wreg free
  9625  000B9C  EF35  F00C         	goto	L20
  9626  000BA0                     l10775:
  9627                           
  9628                           ; BSR set to: 0
  9629                           ;main.c: 1920: writeEEPROM(0x42, val);
  9630  000BA0  6A0F               	clrf	?_writeEEPROM+1,c
  9631  000BA2  0E42               	movlw	66
  9632  000BA4  6E0E               	movwf	?_writeEEPROM,c
  9633  000BA6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9634  000BAA  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9635                           
  9636                           ;main.c: 1921: rv = readEEPROM(0x42);
  9637  000BAE  6A17               	clrf	?_readEEPROM+1,c
  9638  000BB0  0E42               	movlw	66
  9639  000BB2  6E16               	movwf	?_readEEPROM,c
  9640  000BB4  ECD6  F02D         	call	_readEEPROM	;wreg free
  9641  000BB8  EF35  F00C         	goto	L20
  9642  000BBC                     l10777:
  9643                           
  9644                           ; BSR set to: 0
  9645                           ;main.c: 1930: writeEEPROM(0x43, val);
  9646  000BBC  6A0F               	clrf	?_writeEEPROM+1,c
  9647  000BBE  0E43               	movlw	67
  9648  000BC0  6E0E               	movwf	?_writeEEPROM,c
  9649  000BC2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9650  000BC6  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9651                           
  9652                           ;main.c: 1931: rv = readEEPROM(0x43);
  9653  000BCA  6A17               	clrf	?_readEEPROM+1,c
  9654  000BCC  0E43               	movlw	67
  9655  000BCE  6E16               	movwf	?_readEEPROM,c
  9656  000BD0  ECD6  F02D         	call	_readEEPROM	;wreg free
  9657  000BD4  EF35  F00C         	goto	L20
  9658  000BD8                     l10779:
  9659                           
  9660                           ; BSR set to: 0
  9661                           ;main.c: 1936: writeEEPROM(0x44, val);
  9662  000BD8  6A0F               	clrf	?_writeEEPROM+1,c
  9663  000BDA  0E44               	movlw	68
  9664  000BDC  6E0E               	movwf	?_writeEEPROM,c
  9665  000BDE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9666  000BE2  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9667                           
  9668                           ;main.c: 1937: rv = readEEPROM(0x44);
  9669  000BE6  6A17               	clrf	?_readEEPROM+1,c
  9670  000BE8  0E44               	movlw	68
  9671  000BEA  6E16               	movwf	?_readEEPROM,c
  9672  000BEC  ECD6  F02D         	call	_readEEPROM	;wreg free
  9673  000BF0  EF35  F00C         	goto	L20
  9674  000BF4                     l10781:
  9675                           
  9676                           ; BSR set to: 0
  9677                           ;main.c: 1942: writeEEPROM(0x45, val);
  9678  000BF4  6A0F               	clrf	?_writeEEPROM+1,c
  9679  000BF6  0E45               	movlw	69
  9680  000BF8  6E0E               	movwf	?_writeEEPROM,c
  9681  000BFA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9682  000BFE  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9683                           
  9684                           ;main.c: 1943: rv = readEEPROM(0x45);
  9685  000C02  6A17               	clrf	?_readEEPROM+1,c
  9686  000C04  0E45               	movlw	69
  9687  000C06  6E16               	movwf	?_readEEPROM,c
  9688  000C08  ECD6  F02D         	call	_readEEPROM	;wreg free
  9689  000C0C  EF35  F00C         	goto	L20
  9690  000C10                     l10783:
  9691                           
  9692                           ; BSR set to: 0
  9693                           ;main.c: 1948: writeEEPROM(0x46, val);
  9694  000C10  6A0F               	clrf	?_writeEEPROM+1,c
  9695  000C12  0E46               	movlw	70
  9696  000C14  6E0E               	movwf	?_writeEEPROM,c
  9697  000C16  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9698  000C1A  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9699                           
  9700                           ;main.c: 1949: rv = readEEPROM(0x46);
  9701  000C1E  6A17               	clrf	?_readEEPROM+1,c
  9702  000C20  0E46               	movlw	70
  9703  000C22  6E16               	movwf	?_readEEPROM,c
  9704  000C24  ECD6  F02D         	call	_readEEPROM	;wreg free
  9705  000C28  EF35  F00C         	goto	L20
  9706  000C2C                     l10785:
  9707                           
  9708                           ; BSR set to: 0
  9709                           ;main.c: 1954: writeEEPROM(0x47, val);
  9710  000C2C  6A0F               	clrf	?_writeEEPROM+1,c
  9711  000C2E  0E47               	movlw	71
  9712  000C30  6E0E               	movwf	?_writeEEPROM,c
  9713  000C32  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9714  000C36  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9715                           
  9716                           ;main.c: 1955: rv = readEEPROM(0x47);
  9717  000C3A  6A17               	clrf	?_readEEPROM+1,c
  9718  000C3C  0E47               	movlw	71
  9719  000C3E  6E16               	movwf	?_readEEPROM,c
  9720  000C40  ECD6  F02D         	call	_readEEPROM	;wreg free
  9721  000C44  EF35  F00C         	goto	L20
  9722  000C48                     l10787:
  9723                           
  9724                           ; BSR set to: 0
  9725                           ;main.c: 1960: writeEEPROM(0x48, val);
  9726  000C48  6A0F               	clrf	?_writeEEPROM+1,c
  9727  000C4A  0E48               	movlw	72
  9728  000C4C  6E0E               	movwf	?_writeEEPROM,c
  9729  000C4E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9730  000C52  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9731                           
  9732                           ;main.c: 1961: rv = readEEPROM(0x48);
  9733  000C56  6A17               	clrf	?_readEEPROM+1,c
  9734  000C58  0E48               	movlw	72
  9735  000C5A  6E16               	movwf	?_readEEPROM,c
  9736  000C5C  ECD6  F02D         	call	_readEEPROM	;wreg free
  9737  000C60  EF35  F00C         	goto	L20
  9738  000C64                     l10789:
  9739                           
  9740                           ; BSR set to: 0
  9741                           ;main.c: 1970: writeEEPROM(0x49, val);
  9742  000C64  6A0F               	clrf	?_writeEEPROM+1,c
  9743  000C66  0E49               	movlw	73
  9744  000C68  6E0E               	movwf	?_writeEEPROM,c
  9745  000C6A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9746  000C6E  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9747                           
  9748                           ;main.c: 1971: rv = readEEPROM(0x49);
  9749  000C72  6A17               	clrf	?_readEEPROM+1,c
  9750  000C74  0E49               	movlw	73
  9751  000C76  6E16               	movwf	?_readEEPROM,c
  9752  000C78  ECD6  F02D         	call	_readEEPROM	;wreg free
  9753  000C7C  EF35  F00C         	goto	L20
  9754  000C80                     l10791:
  9755                           
  9756                           ; BSR set to: 0
  9757                           ;main.c: 1976: writeEEPROM(0x4A, val);
  9758  000C80  6A0F               	clrf	?_writeEEPROM+1,c
  9759  000C82  0E4A               	movlw	74
  9760  000C84  6E0E               	movwf	?_writeEEPROM,c
  9761  000C86  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9762  000C8A  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9763                           
  9764                           ;main.c: 1977: rv = readEEPROM(0x4A);
  9765  000C8E  6A17               	clrf	?_readEEPROM+1,c
  9766  000C90  0E4A               	movlw	74
  9767  000C92  6E16               	movwf	?_readEEPROM,c
  9768  000C94  ECD6  F02D         	call	_readEEPROM	;wreg free
  9769  000C98  EF35  F00C         	goto	L20
  9770  000C9C                     l10793:
  9771                           
  9772                           ; BSR set to: 0
  9773                           ;main.c: 1982: writeEEPROM(0x4B, val);
  9774  000C9C  6A0F               	clrf	?_writeEEPROM+1,c
  9775  000C9E  0E4B               	movlw	75
  9776  000CA0  6E0E               	movwf	?_writeEEPROM,c
  9777  000CA2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9778  000CA6  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9779                           
  9780                           ;main.c: 1983: rv = readEEPROM(0x4B);
  9781  000CAA  6A17               	clrf	?_readEEPROM+1,c
  9782  000CAC  0E4B               	movlw	75
  9783  000CAE  6E16               	movwf	?_readEEPROM,c
  9784  000CB0  ECD6  F02D         	call	_readEEPROM	;wreg free
  9785  000CB4  EF35  F00C         	goto	L20
  9786  000CB8                     l10795:
  9787                           
  9788                           ; BSR set to: 0
  9789                           ;main.c: 1988: writeEEPROM(0x4C, val);
  9790  000CB8  6A0F               	clrf	?_writeEEPROM+1,c
  9791  000CBA  0E4C               	movlw	76
  9792  000CBC  6E0E               	movwf	?_writeEEPROM,c
  9793  000CBE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9794  000CC2  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9795                           
  9796                           ;main.c: 1989: rv = readEEPROM(0x4C);
  9797  000CC6  6A17               	clrf	?_readEEPROM+1,c
  9798  000CC8  0E4C               	movlw	76
  9799  000CCA  6E16               	movwf	?_readEEPROM,c
  9800  000CCC  ECD6  F02D         	call	_readEEPROM	;wreg free
  9801  000CD0  EF35  F00C         	goto	L20
  9802  000CD4                     l10797:
  9803                           
  9804                           ; BSR set to: 0
  9805                           ;main.c: 1994: writeEEPROM(0x4D, val);
  9806  000CD4  6A0F               	clrf	?_writeEEPROM+1,c
  9807  000CD6  0E4D               	movlw	77
  9808  000CD8  6E0E               	movwf	?_writeEEPROM,c
  9809  000CDA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9810  000CDE  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9811                           
  9812                           ;main.c: 1995: rv = readEEPROM(0x4D);
  9813  000CE2  6A17               	clrf	?_readEEPROM+1,c
  9814  000CE4  0E4D               	movlw	77
  9815  000CE6  6E16               	movwf	?_readEEPROM,c
  9816  000CE8  ECD6  F02D         	call	_readEEPROM	;wreg free
  9817  000CEC  EF35  F00C         	goto	L20
  9818  000CF0                     l10799:
  9819                           
  9820                           ; BSR set to: 0
  9821                           ;main.c: 2000: writeEEPROM(0x4E, val);
  9822  000CF0  6A0F               	clrf	?_writeEEPROM+1,c
  9823  000CF2  0E4E               	movlw	78
  9824  000CF4  6E0E               	movwf	?_writeEEPROM,c
  9825  000CF6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9826  000CFA  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9827                           
  9828                           ;main.c: 2001: rv = readEEPROM(0x4E);
  9829  000CFE  6A17               	clrf	?_readEEPROM+1,c
  9830  000D00  0E4E               	movlw	78
  9831  000D02  6E16               	movwf	?_readEEPROM,c
  9832  000D04  ECD6  F02D         	call	_readEEPROM	;wreg free
  9833  000D08  EF35  F00C         	goto	L20
  9834  000D0C                     l10801:
  9835                           
  9836                           ; BSR set to: 0
  9837                           ;main.c: 2010: writeEEPROM(0x4F, val);
  9838  000D0C  6A0F               	clrf	?_writeEEPROM+1,c
  9839  000D0E  0E4F               	movlw	79
  9840  000D10  6E0E               	movwf	?_writeEEPROM,c
  9841  000D12  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9842  000D16  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9843                           
  9844                           ;main.c: 2011: rv = readEEPROM(0x4F);
  9845  000D1A  6A17               	clrf	?_readEEPROM+1,c
  9846  000D1C  0E4F               	movlw	79
  9847  000D1E  6E16               	movwf	?_readEEPROM,c
  9848  000D20  ECD6  F02D         	call	_readEEPROM	;wreg free
  9849  000D24  EF35  F00C         	goto	L20
  9850  000D28                     l10803:
  9851                           
  9852                           ; BSR set to: 0
  9853                           ;main.c: 2016: writeEEPROM(0x50, val);
  9854  000D28  6A0F               	clrf	?_writeEEPROM+1,c
  9855  000D2A  0E50               	movlw	80
  9856  000D2C  6E0E               	movwf	?_writeEEPROM,c
  9857  000D2E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9858  000D32  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9859                           
  9860                           ;main.c: 2017: rv = readEEPROM(0x50);
  9861  000D36  6A17               	clrf	?_readEEPROM+1,c
  9862  000D38  0E50               	movlw	80
  9863  000D3A  6E16               	movwf	?_readEEPROM,c
  9864  000D3C  ECD6  F02D         	call	_readEEPROM	;wreg free
  9865  000D40  EF35  F00C         	goto	L20
  9866  000D44                     l10805:
  9867                           
  9868                           ; BSR set to: 0
  9869                           ;main.c: 2022: writeEEPROM(0x51, val);
  9870  000D44  6A0F               	clrf	?_writeEEPROM+1,c
  9871  000D46  0E51               	movlw	81
  9872  000D48  6E0E               	movwf	?_writeEEPROM,c
  9873  000D4A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9874  000D4E  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9875                           
  9876                           ;main.c: 2023: rv = readEEPROM(0x51);
  9877  000D52  6A17               	clrf	?_readEEPROM+1,c
  9878  000D54  0E51               	movlw	81
  9879  000D56  6E16               	movwf	?_readEEPROM,c
  9880  000D58  ECD6  F02D         	call	_readEEPROM	;wreg free
  9881  000D5C  EF35  F00C         	goto	L20
  9882  000D60                     l10807:
  9883                           
  9884                           ; BSR set to: 0
  9885                           ;main.c: 2028: writeEEPROM(0x52, val);
  9886  000D60  6A0F               	clrf	?_writeEEPROM+1,c
  9887  000D62  0E52               	movlw	82
  9888  000D64  6E0E               	movwf	?_writeEEPROM,c
  9889  000D66  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9890  000D6A  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9891                           
  9892                           ;main.c: 2029: rv = readEEPROM(0x52);
  9893  000D6E  6A17               	clrf	?_readEEPROM+1,c
  9894  000D70  0E52               	movlw	82
  9895  000D72  6E16               	movwf	?_readEEPROM,c
  9896  000D74  ECD6  F02D         	call	_readEEPROM	;wreg free
  9897  000D78  EF35  F00C         	goto	L20
  9898  000D7C                     l10809:
  9899                           
  9900                           ; BSR set to: 0
  9901                           ;main.c: 2034: writeEEPROM(0x53, val);
  9902  000D7C  6A0F               	clrf	?_writeEEPROM+1,c
  9903  000D7E  0E53               	movlw	83
  9904  000D80  6E0E               	movwf	?_writeEEPROM,c
  9905  000D82  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9906  000D86  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9907                           
  9908                           ;main.c: 2035: rv = readEEPROM(0x53);
  9909  000D8A  6A17               	clrf	?_readEEPROM+1,c
  9910  000D8C  0E53               	movlw	83
  9911  000D8E  6E16               	movwf	?_readEEPROM,c
  9912  000D90  ECD6  F02D         	call	_readEEPROM	;wreg free
  9913  000D94  EF35  F00C         	goto	L20
  9914  000D98                     l10811:
  9915                           
  9916                           ; BSR set to: 0
  9917                           ;main.c: 2040: writeEEPROM(0x54, val);
  9918  000D98  6A0F               	clrf	?_writeEEPROM+1,c
  9919  000D9A  0E54               	movlw	84
  9920  000D9C  6E0E               	movwf	?_writeEEPROM,c
  9921  000D9E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9922  000DA2  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9923                           
  9924                           ;main.c: 2041: rv = readEEPROM(0x54);
  9925  000DA6  6A17               	clrf	?_readEEPROM+1,c
  9926  000DA8  0E54               	movlw	84
  9927  000DAA  6E16               	movwf	?_readEEPROM,c
  9928  000DAC  ECD6  F02D         	call	_readEEPROM	;wreg free
  9929  000DB0  EF35  F00C         	goto	L20
  9930  000DB4                     l10813:
  9931                           
  9932                           ; BSR set to: 0
  9933                           ;main.c: 2046: writeEEPROM(0x55, val);
  9934  000DB4  6A0F               	clrf	?_writeEEPROM+1,c
  9935  000DB6  0E55               	movlw	85
  9936  000DB8  6E0E               	movwf	?_writeEEPROM,c
  9937  000DBA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9938  000DBE  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9939                           
  9940                           ;main.c: 2047: rv = readEEPROM(0x55);
  9941  000DC2  6A17               	clrf	?_readEEPROM+1,c
  9942  000DC4  0E55               	movlw	85
  9943  000DC6  6E16               	movwf	?_readEEPROM,c
  9944  000DC8  ECD6  F02D         	call	_readEEPROM	;wreg free
  9945  000DCC  EF35  F00C         	goto	L20
  9946  000DD0                     l10815:
  9947                           
  9948                           ; BSR set to: 0
  9949                           ;main.c: 2052: writeEEPROM(0x56, val);
  9950  000DD0  6A0F               	clrf	?_writeEEPROM+1,c
  9951  000DD2  0E56               	movlw	86
  9952  000DD4  6E0E               	movwf	?_writeEEPROM,c
  9953  000DD6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9954  000DDA  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9955                           
  9956                           ;main.c: 2053: rv = readEEPROM(0x56);
  9957  000DDE  6A17               	clrf	?_readEEPROM+1,c
  9958  000DE0  0E56               	movlw	86
  9959  000DE2  6E16               	movwf	?_readEEPROM,c
  9960  000DE4  ECD6  F02D         	call	_readEEPROM	;wreg free
  9961  000DE8  EF35  F00C         	goto	L20
  9962  000DEC                     l10817:
  9963                           
  9964                           ; BSR set to: 0
  9965                           ;main.c: 2058: writeEEPROM(0x57, val);
  9966  000DEC  6A0F               	clrf	?_writeEEPROM+1,c
  9967  000DEE  0E57               	movlw	87
  9968  000DF0  6E0E               	movwf	?_writeEEPROM,c
  9969  000DF2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9970  000DF6  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9971                           
  9972                           ;main.c: 2059: rv = readEEPROM(0x57);
  9973  000DFA  6A17               	clrf	?_readEEPROM+1,c
  9974  000DFC  0E57               	movlw	87
  9975  000DFE  6E16               	movwf	?_readEEPROM,c
  9976  000E00  ECD6  F02D         	call	_readEEPROM	;wreg free
  9977  000E04  EF35  F00C         	goto	L20
  9978  000E08                     l10819:
  9979                           
  9980                           ; BSR set to: 0
  9981                           ;main.c: 2064: writeEEPROM(0x58, val);
  9982  000E08  6A0F               	clrf	?_writeEEPROM+1,c
  9983  000E0A  0E58               	movlw	88
  9984  000E0C  6E0E               	movwf	?_writeEEPROM,c
  9985  000E0E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9986  000E12  ECCA  F02C         	call	_writeEEPROM	;wreg free
  9987                           
  9988                           ;main.c: 2065: rv = readEEPROM(0x58);
  9989  000E16  6A17               	clrf	?_readEEPROM+1,c
  9990  000E18  0E58               	movlw	88
  9991  000E1A  6E16               	movwf	?_readEEPROM,c
  9992  000E1C  ECD6  F02D         	call	_readEEPROM	;wreg free
  9993  000E20  EF35  F00C         	goto	L20
  9994  000E24                     l10821:
  9995                           
  9996                           ; BSR set to: 0
  9997                           ;main.c: 2070: writeEEPROM(0x59, val);
  9998  000E24  6A0F               	clrf	?_writeEEPROM+1,c
  9999  000E26  0E59               	movlw	89
 10000  000E28  6E0E               	movwf	?_writeEEPROM,c
 10001  000E2A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10002  000E2E  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10003                           
 10004                           ;main.c: 2071: rv = readEEPROM(0x59);
 10005  000E32  6A17               	clrf	?_readEEPROM+1,c
 10006  000E34  0E59               	movlw	89
 10007  000E36  6E16               	movwf	?_readEEPROM,c
 10008  000E38  ECD6  F02D         	call	_readEEPROM	;wreg free
 10009  000E3C  EF35  F00C         	goto	L20
 10010  000E40                     l10823:
 10011                           
 10012                           ; BSR set to: 0
 10013                           ;main.c: 2076: writeEEPROM(0x5A, val);
 10014  000E40  6A0F               	clrf	?_writeEEPROM+1,c
 10015  000E42  0E5A               	movlw	90
 10016  000E44  6E0E               	movwf	?_writeEEPROM,c
 10017  000E46  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10018  000E4A  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10019                           
 10020                           ;main.c: 2077: rv = readEEPROM(0x5A);
 10021  000E4E  6A17               	clrf	?_readEEPROM+1,c
 10022  000E50  0E5A               	movlw	90
 10023  000E52  6E16               	movwf	?_readEEPROM,c
 10024  000E54  ECD6  F02D         	call	_readEEPROM	;wreg free
 10025  000E58  EF35  F00C         	goto	L20
 10026  000E5C                     l10825:
 10027                           
 10028                           ; BSR set to: 0
 10029                           ;main.c: 2086: writeEEPROM(0x5B, val);
 10030  000E5C  6A0F               	clrf	?_writeEEPROM+1,c
 10031  000E5E  0E5B               	movlw	91
 10032  000E60  6E0E               	movwf	?_writeEEPROM,c
 10033  000E62  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10034  000E66  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10035                           
 10036                           ;main.c: 2087: rv = readEEPROM(0x5B);
 10037  000E6A  6A17               	clrf	?_readEEPROM+1,c
 10038  000E6C  0E5B               	movlw	91
 10039  000E6E  6E16               	movwf	?_readEEPROM,c
 10040  000E70  ECD6  F02D         	call	_readEEPROM	;wreg free
 10041  000E74  EF35  F00C         	goto	L20
 10042  000E78                     l10827:
 10043                           
 10044                           ; BSR set to: 0
 10045                           ;main.c: 2092: writeEEPROM(0x5C, val);
 10046  000E78  6A0F               	clrf	?_writeEEPROM+1,c
 10047  000E7A  0E5C               	movlw	92
 10048  000E7C  6E0E               	movwf	?_writeEEPROM,c
 10049  000E7E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10050  000E82  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10051                           
 10052                           ;main.c: 2093: rv = readEEPROM(0x5C);
 10053  000E86  6A17               	clrf	?_readEEPROM+1,c
 10054  000E88  0E5C               	movlw	92
 10055  000E8A  6E16               	movwf	?_readEEPROM,c
 10056  000E8C  ECD6  F02D         	call	_readEEPROM	;wreg free
 10057  000E90  EF35  F00C         	goto	L20
 10058  000E94                     l10829:
 10059                           
 10060                           ; BSR set to: 0
 10061                           ;main.c: 2098: writeEEPROM(0x5D, val);
 10062  000E94  6A0F               	clrf	?_writeEEPROM+1,c
 10063  000E96  0E5D               	movlw	93
 10064  000E98  6E0E               	movwf	?_writeEEPROM,c
 10065  000E9A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10066  000E9E  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10067                           
 10068                           ;main.c: 2099: rv = readEEPROM(0x5D);
 10069  000EA2  6A17               	clrf	?_readEEPROM+1,c
 10070  000EA4  0E5D               	movlw	93
 10071  000EA6  6E16               	movwf	?_readEEPROM,c
 10072  000EA8  ECD6  F02D         	call	_readEEPROM	;wreg free
 10073  000EAC  EF35  F00C         	goto	L20
 10074  000EB0                     l10831:
 10075                           
 10076                           ; BSR set to: 0
 10077                           ;main.c: 2104: writeEEPROM(0x5E, val);
 10078  000EB0  6A0F               	clrf	?_writeEEPROM+1,c
 10079  000EB2  0E5E               	movlw	94
 10080  000EB4  6E0E               	movwf	?_writeEEPROM,c
 10081  000EB6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10082  000EBA  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10083                           
 10084                           ;main.c: 2105: rv = readEEPROM(0x5E);
 10085  000EBE  6A17               	clrf	?_readEEPROM+1,c
 10086  000EC0  0E5E               	movlw	94
 10087  000EC2  6E16               	movwf	?_readEEPROM,c
 10088  000EC4  ECD6  F02D         	call	_readEEPROM	;wreg free
 10089  000EC8  EF35  F00C         	goto	L20
 10090  000ECC                     l10833:
 10091                           
 10092                           ; BSR set to: 0
 10093                           ;main.c: 2110: writeEEPROM(0x5F, val);
 10094  000ECC  6A0F               	clrf	?_writeEEPROM+1,c
 10095  000ECE  0E5F               	movlw	95
 10096  000ED0  6E0E               	movwf	?_writeEEPROM,c
 10097  000ED2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10098  000ED6  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10099                           
 10100                           ;main.c: 2111: rv = readEEPROM(0x5F);
 10101  000EDA  6A17               	clrf	?_readEEPROM+1,c
 10102  000EDC  0E5F               	movlw	95
 10103  000EDE  6E16               	movwf	?_readEEPROM,c
 10104  000EE0  ECD6  F02D         	call	_readEEPROM	;wreg free
 10105  000EE4  EF35  F00C         	goto	L20
 10106  000EE8                     l10835:
 10107                           
 10108                           ; BSR set to: 0
 10109                           ;main.c: 2116: writeEEPROM(0x60, val);
 10110  000EE8  6A0F               	clrf	?_writeEEPROM+1,c
 10111  000EEA  0E60               	movlw	96
 10112  000EEC  6E0E               	movwf	?_writeEEPROM,c
 10113  000EEE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10114  000EF2  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10115                           
 10116                           ;main.c: 2117: rv = readEEPROM(0x60);
 10117  000EF6  6A17               	clrf	?_readEEPROM+1,c
 10118  000EF8  0E60               	movlw	96
 10119  000EFA  6E16               	movwf	?_readEEPROM,c
 10120  000EFC  ECD6  F02D         	call	_readEEPROM	;wreg free
 10121  000F00  EF35  F00C         	goto	L20
 10122  000F04                     l10837:
 10123                           
 10124                           ; BSR set to: 0
 10125                           ;main.c: 2122: writeEEPROM(0x61, val);
 10126  000F04  6A0F               	clrf	?_writeEEPROM+1,c
 10127  000F06  0E61               	movlw	97
 10128  000F08  6E0E               	movwf	?_writeEEPROM,c
 10129  000F0A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10130  000F0E  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10131                           
 10132                           ;main.c: 2123: rv = readEEPROM(0x61);
 10133  000F12  6A17               	clrf	?_readEEPROM+1,c
 10134  000F14  0E61               	movlw	97
 10135  000F16  6E16               	movwf	?_readEEPROM,c
 10136  000F18  ECD6  F02D         	call	_readEEPROM	;wreg free
 10137  000F1C  EF35  F00C         	goto	L20
 10138  000F20                     l10839:
 10139                           
 10140                           ; BSR set to: 0
 10141                           ;main.c: 2128: writeEEPROM(0x62, val);
 10142  000F20  6A0F               	clrf	?_writeEEPROM+1,c
 10143  000F22  0E62               	movlw	98
 10144  000F24  6E0E               	movwf	?_writeEEPROM,c
 10145  000F26  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10146  000F2A  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10147                           
 10148                           ;main.c: 2129: rv = readEEPROM(0x62);
 10149  000F2E  6A17               	clrf	?_readEEPROM+1,c
 10150  000F30  0E62               	movlw	98
 10151  000F32  6E16               	movwf	?_readEEPROM,c
 10152  000F34  ECD6  F02D         	call	_readEEPROM	;wreg free
 10153  000F38  EF35  F00C         	goto	L20
 10154  000F3C                     l10841:
 10155                           
 10156                           ; BSR set to: 0
 10157                           ;main.c: 2134: writeEEPROM(0x63, val);
 10158  000F3C  6A0F               	clrf	?_writeEEPROM+1,c
 10159  000F3E  0E63               	movlw	99
 10160  000F40  6E0E               	movwf	?_writeEEPROM,c
 10161  000F42  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10162  000F46  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10163                           
 10164                           ;main.c: 2135: rv = readEEPROM(0x63);
 10165  000F4A  6A17               	clrf	?_readEEPROM+1,c
 10166  000F4C  0E63               	movlw	99
 10167  000F4E  6E16               	movwf	?_readEEPROM,c
 10168  000F50  ECD6  F02D         	call	_readEEPROM	;wreg free
 10169  000F54  EF35  F00C         	goto	L20
 10170  000F58                     l10843:
 10171                           
 10172                           ; BSR set to: 0
 10173                           ;main.c: 2140: writeEEPROM(0x64, val);
 10174  000F58  6A0F               	clrf	?_writeEEPROM+1,c
 10175  000F5A  0E64               	movlw	100
 10176  000F5C  6E0E               	movwf	?_writeEEPROM,c
 10177  000F5E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10178  000F62  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10179                           
 10180                           ;main.c: 2141: rv = readEEPROM(0x64);
 10181  000F66  6A17               	clrf	?_readEEPROM+1,c
 10182  000F68  0E64               	movlw	100
 10183  000F6A  6E16               	movwf	?_readEEPROM,c
 10184  000F6C  ECD6  F02D         	call	_readEEPROM	;wreg free
 10185  000F70  EF35  F00C         	goto	L20
 10186  000F74                     l10845:
 10187                           
 10188                           ; BSR set to: 0
 10189                           ;main.c: 2146: writeEEPROM(0x65, val);
 10190  000F74  6A0F               	clrf	?_writeEEPROM+1,c
 10191  000F76  0E65               	movlw	101
 10192  000F78  6E0E               	movwf	?_writeEEPROM,c
 10193  000F7A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10194  000F7E  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10195                           
 10196                           ;main.c: 2147: rv = readEEPROM(0x65);
 10197  000F82  6A17               	clrf	?_readEEPROM+1,c
 10198  000F84  0E65               	movlw	101
 10199  000F86  6E16               	movwf	?_readEEPROM,c
 10200  000F88  ECD6  F02D         	call	_readEEPROM	;wreg free
 10201  000F8C  EF35  F00C         	goto	L20
 10202  000F90                     l10847:
 10203                           
 10204                           ; BSR set to: 0
 10205                           ;main.c: 2152: writeEEPROM(0x66, val);
 10206  000F90  6A0F               	clrf	?_writeEEPROM+1,c
 10207  000F92  0E66               	movlw	102
 10208  000F94  6E0E               	movwf	?_writeEEPROM,c
 10209  000F96  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10210  000F9A  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10211                           
 10212                           ;main.c: 2153: rv = readEEPROM(0x66);
 10213  000F9E  6A17               	clrf	?_readEEPROM+1,c
 10214  000FA0  0E66               	movlw	102
 10215  000FA2  6E16               	movwf	?_readEEPROM,c
 10216  000FA4  ECD6  F02D         	call	_readEEPROM	;wreg free
 10217  000FA8  EF35  F00C         	goto	L20
 10218  000FAC                     l10849:
 10219                           
 10220                           ; BSR set to: 0
 10221                           ;main.c: 2162: writeEEPROM(0x67, val);
 10222  000FAC  6A0F               	clrf	?_writeEEPROM+1,c
 10223  000FAE  0E67               	movlw	103
 10224  000FB0  6E0E               	movwf	?_writeEEPROM,c
 10225  000FB2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10226  000FB6  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10227                           
 10228                           ;main.c: 2163: rv = readEEPROM(0x67);
 10229  000FBA  6A17               	clrf	?_readEEPROM+1,c
 10230  000FBC  0E67               	movlw	103
 10231  000FBE  6E16               	movwf	?_readEEPROM,c
 10232  000FC0  ECD6  F02D         	call	_readEEPROM	;wreg free
 10233  000FC4  EF35  F00C         	goto	L20
 10234  000FC8                     l10851:
 10235                           
 10236                           ; BSR set to: 0
 10237                           ;main.c: 2168: writeEEPROM(0x68, val);
 10238  000FC8  6A0F               	clrf	?_writeEEPROM+1,c
 10239  000FCA  0E68               	movlw	104
 10240  000FCC  6E0E               	movwf	?_writeEEPROM,c
 10241  000FCE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10242  000FD2  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10243                           
 10244                           ;main.c: 2169: rv = readEEPROM(0x68);
 10245  000FD6  6A17               	clrf	?_readEEPROM+1,c
 10246  000FD8  0E68               	movlw	104
 10247  000FDA  6E16               	movwf	?_readEEPROM,c
 10248  000FDC  ECD6  F02D         	call	_readEEPROM	;wreg free
 10249  000FE0  EF35  F00C         	goto	L20
 10250  000FE4                     l10853:
 10251                           
 10252                           ; BSR set to: 0
 10253                           ;main.c: 2174: writeEEPROM(0x69, val);
 10254  000FE4  6A0F               	clrf	?_writeEEPROM+1,c
 10255  000FE6  0E69               	movlw	105
 10256  000FE8  6E0E               	movwf	?_writeEEPROM,c
 10257  000FEA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10258  000FEE  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10259                           
 10260                           ;main.c: 2175: rv = readEEPROM(0x69);
 10261  000FF2  6A17               	clrf	?_readEEPROM+1,c
 10262  000FF4  0E69               	movlw	105
 10263  000FF6  6E16               	movwf	?_readEEPROM,c
 10264  000FF8  ECD6  F02D         	call	_readEEPROM	;wreg free
 10265  000FFC  EF35  F00C         	goto	L20
 10266  001000                     l10855:
 10267                           
 10268                           ; BSR set to: 0
 10269                           ;main.c: 2180: writeEEPROM(0x6A, val);
 10270  001000  6A0F               	clrf	?_writeEEPROM+1,c
 10271  001002  0E6A               	movlw	106
 10272  001004  6E0E               	movwf	?_writeEEPROM,c
 10273  001006  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10274  00100A  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10275                           
 10276                           ;main.c: 2181: rv = readEEPROM(0x6A);
 10277  00100E  6A17               	clrf	?_readEEPROM+1,c
 10278  001010  0E6A               	movlw	106
 10279  001012  6E16               	movwf	?_readEEPROM,c
 10280  001014  ECD6  F02D         	call	_readEEPROM	;wreg free
 10281  001018  EF35  F00C         	goto	L20
 10282  00101C                     l10857:
 10283                           
 10284                           ; BSR set to: 0
 10285                           ;main.c: 2186: writeEEPROM(0x6B, val);
 10286  00101C  6A0F               	clrf	?_writeEEPROM+1,c
 10287  00101E  0E6B               	movlw	107
 10288  001020  6E0E               	movwf	?_writeEEPROM,c
 10289  001022  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10290  001026  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10291                           
 10292                           ;main.c: 2187: rv = readEEPROM(0x6B);
 10293  00102A  6A17               	clrf	?_readEEPROM+1,c
 10294  00102C  0E6B               	movlw	107
 10295  00102E  6E16               	movwf	?_readEEPROM,c
 10296  001030  ECD6  F02D         	call	_readEEPROM	;wreg free
 10297  001034  EF35  F00C         	goto	L20
 10298  001038                     l10859:
 10299                           
 10300                           ; BSR set to: 0
 10301                           ;main.c: 2192: writeEEPROM(0x6C, val);
 10302  001038  6A0F               	clrf	?_writeEEPROM+1,c
 10303  00103A  0E6C               	movlw	108
 10304  00103C  6E0E               	movwf	?_writeEEPROM,c
 10305  00103E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10306  001042  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10307                           
 10308                           ;main.c: 2193: rv = readEEPROM(0x6C);
 10309  001046  6A17               	clrf	?_readEEPROM+1,c
 10310  001048  0E6C               	movlw	108
 10311  00104A  6E16               	movwf	?_readEEPROM,c
 10312  00104C  ECD6  F02D         	call	_readEEPROM	;wreg free
 10313  001050  EF35  F00C         	goto	L20
 10314  001054                     l10861:
 10315                           
 10316                           ; BSR set to: 0
 10317                           ;main.c: 2198: writeEEPROM(0x6D, val);
 10318  001054  6A0F               	clrf	?_writeEEPROM+1,c
 10319  001056  0E6D               	movlw	109
 10320  001058  6E0E               	movwf	?_writeEEPROM,c
 10321  00105A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10322  00105E  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10323                           
 10324                           ;main.c: 2199: rv = readEEPROM(0x6D);
 10325  001062  6A17               	clrf	?_readEEPROM+1,c
 10326  001064  0E6D               	movlw	109
 10327  001066  6E16               	movwf	?_readEEPROM,c
 10328  001068  ECD6  F02D         	call	_readEEPROM	;wreg free
 10329  00106C  D3FE               	goto	L20
 10330  00106E                     l10863:
 10331                           
 10332                           ; BSR set to: 0
 10333                           ;main.c: 2204: writeEEPROM(0x6E, val);
 10334  00106E  6A0F               	clrf	?_writeEEPROM+1,c
 10335  001070  0E6E               	movlw	110
 10336  001072  6E0E               	movwf	?_writeEEPROM,c
 10337  001074  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10338  001078  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10339                           
 10340                           ;main.c: 2205: rv = readEEPROM(0x6E);
 10341  00107C  6A17               	clrf	?_readEEPROM+1,c
 10342  00107E  0E6E               	movlw	110
 10343  001080  6E16               	movwf	?_readEEPROM,c
 10344  001082  ECD6  F02D         	call	_readEEPROM	;wreg free
 10345  001086  D3F1               	goto	L20
 10346  001088                     l10865:
 10347                           
 10348                           ; BSR set to: 0
 10349                           ;main.c: 2210: writeEEPROM(0x6F, val);
 10350  001088  6A0F               	clrf	?_writeEEPROM+1,c
 10351  00108A  0E6F               	movlw	111
 10352  00108C  6E0E               	movwf	?_writeEEPROM,c
 10353  00108E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10354  001092  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10355                           
 10356                           ;main.c: 2211: rv = readEEPROM(0x6F);
 10357  001096  6A17               	clrf	?_readEEPROM+1,c
 10358  001098  0E6F               	movlw	111
 10359  00109A  6E16               	movwf	?_readEEPROM,c
 10360  00109C  ECD6  F02D         	call	_readEEPROM	;wreg free
 10361  0010A0  D3E4               	goto	L20
 10362  0010A2                     l10867:
 10363                           
 10364                           ; BSR set to: 0
 10365                           ;main.c: 2216: writeEEPROM(0x70, val);
 10366  0010A2  6A0F               	clrf	?_writeEEPROM+1,c
 10367  0010A4  0E70               	movlw	112
 10368  0010A6  6E0E               	movwf	?_writeEEPROM,c
 10369  0010A8  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10370  0010AC  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10371                           
 10372                           ;main.c: 2217: rv = readEEPROM(0x70);
 10373  0010B0  6A17               	clrf	?_readEEPROM+1,c
 10374  0010B2  0E70               	movlw	112
 10375  0010B4  6E16               	movwf	?_readEEPROM,c
 10376  0010B6  ECD6  F02D         	call	_readEEPROM	;wreg free
 10377  0010BA  D3D7               	goto	L20
 10378  0010BC                     l10869:
 10379                           
 10380                           ; BSR set to: 0
 10381                           ;main.c: 2222: writeEEPROM(0x71, val);
 10382  0010BC  6A0F               	clrf	?_writeEEPROM+1,c
 10383  0010BE  0E71               	movlw	113
 10384  0010C0  6E0E               	movwf	?_writeEEPROM,c
 10385  0010C2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10386  0010C6  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10387                           
 10388                           ;main.c: 2223: rv = readEEPROM(0x71);
 10389  0010CA  6A17               	clrf	?_readEEPROM+1,c
 10390  0010CC  0E71               	movlw	113
 10391  0010CE  6E16               	movwf	?_readEEPROM,c
 10392  0010D0  ECD6  F02D         	call	_readEEPROM	;wreg free
 10393  0010D4  D3CA               	goto	L20
 10394  0010D6                     l10871:
 10395                           
 10396                           ; BSR set to: 0
 10397                           ;main.c: 2228: writeEEPROM(0x72, val);
 10398  0010D6  6A0F               	clrf	?_writeEEPROM+1,c
 10399  0010D8  0E72               	movlw	114
 10400  0010DA  6E0E               	movwf	?_writeEEPROM,c
 10401  0010DC  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10402  0010E0  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10403                           
 10404                           ;main.c: 2229: rv = readEEPROM(0x72);
 10405  0010E4  6A17               	clrf	?_readEEPROM+1,c
 10406  0010E6  0E72               	movlw	114
 10407  0010E8  6E16               	movwf	?_readEEPROM,c
 10408  0010EA  ECD6  F02D         	call	_readEEPROM	;wreg free
 10409  0010EE  D3BD               	goto	L20
 10410  0010F0                     l10873:
 10411                           
 10412                           ; BSR set to: 0
 10413                           ;main.c: 2238: writeEEPROM(0x73, val);
 10414  0010F0  6A0F               	clrf	?_writeEEPROM+1,c
 10415  0010F2  0E73               	movlw	115
 10416  0010F4  6E0E               	movwf	?_writeEEPROM,c
 10417  0010F6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10418  0010FA  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10419                           
 10420                           ;main.c: 2239: rv = readEEPROM(0x73);
 10421  0010FE  6A17               	clrf	?_readEEPROM+1,c
 10422  001100  0E73               	movlw	115
 10423  001102  6E16               	movwf	?_readEEPROM,c
 10424  001104  ECD6  F02D         	call	_readEEPROM	;wreg free
 10425  001108  D3B0               	goto	L20
 10426  00110A                     l10875:
 10427                           
 10428                           ; BSR set to: 0
 10429                           ;main.c: 2244: writeEEPROM(0x74, val);
 10430  00110A  6A0F               	clrf	?_writeEEPROM+1,c
 10431  00110C  0E74               	movlw	116
 10432  00110E  6E0E               	movwf	?_writeEEPROM,c
 10433  001110  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10434  001114  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10435                           
 10436                           ;main.c: 2245: rv = readEEPROM(0x74);
 10437  001118  6A17               	clrf	?_readEEPROM+1,c
 10438  00111A  0E74               	movlw	116
 10439  00111C  6E16               	movwf	?_readEEPROM,c
 10440  00111E  ECD6  F02D         	call	_readEEPROM	;wreg free
 10441  001122  D3A3               	goto	L20
 10442  001124                     l10877:
 10443                           
 10444                           ; BSR set to: 0
 10445                           ;main.c: 2250: writeEEPROM(0x75, val);
 10446  001124  6A0F               	clrf	?_writeEEPROM+1,c
 10447  001126  0E75               	movlw	117
 10448  001128  6E0E               	movwf	?_writeEEPROM,c
 10449  00112A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10450  00112E  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10451                           
 10452                           ;main.c: 2251: rv = readEEPROM(0x75);
 10453  001132  6A17               	clrf	?_readEEPROM+1,c
 10454  001134  0E75               	movlw	117
 10455  001136  6E16               	movwf	?_readEEPROM,c
 10456  001138  ECD6  F02D         	call	_readEEPROM	;wreg free
 10457  00113C  D396               	goto	L20
 10458  00113E                     l10879:
 10459                           
 10460                           ; BSR set to: 0
 10461                           ;main.c: 2256: writeEEPROM(0x76, val);
 10462  00113E  6A0F               	clrf	?_writeEEPROM+1,c
 10463  001140  0E76               	movlw	118
 10464  001142  6E0E               	movwf	?_writeEEPROM,c
 10465  001144  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10466  001148  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10467                           
 10468                           ;main.c: 2257: rv = readEEPROM(0x76);
 10469  00114C  6A17               	clrf	?_readEEPROM+1,c
 10470  00114E  0E76               	movlw	118
 10471  001150  6E16               	movwf	?_readEEPROM,c
 10472  001152  ECD6  F02D         	call	_readEEPROM	;wreg free
 10473  001156  D389               	goto	L20
 10474  001158                     l10881:
 10475                           
 10476                           ; BSR set to: 0
 10477                           ;main.c: 2262: writeEEPROM(0x77, val);
 10478  001158  6A0F               	clrf	?_writeEEPROM+1,c
 10479  00115A  0E77               	movlw	119
 10480  00115C  6E0E               	movwf	?_writeEEPROM,c
 10481  00115E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10482  001162  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10483                           
 10484                           ;main.c: 2263: rv = readEEPROM(0x77);
 10485  001166  6A17               	clrf	?_readEEPROM+1,c
 10486  001168  0E77               	movlw	119
 10487  00116A  6E16               	movwf	?_readEEPROM,c
 10488  00116C  ECD6  F02D         	call	_readEEPROM	;wreg free
 10489  001170  D37C               	goto	L20
 10490  001172                     l10883:
 10491                           
 10492                           ; BSR set to: 0
 10493                           ;main.c: 2268: writeEEPROM(0x78, val);
 10494  001172  6A0F               	clrf	?_writeEEPROM+1,c
 10495  001174  0E78               	movlw	120
 10496  001176  6E0E               	movwf	?_writeEEPROM,c
 10497  001178  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10498  00117C  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10499                           
 10500                           ;main.c: 2269: rv = readEEPROM(0x78);
 10501  001180  6A17               	clrf	?_readEEPROM+1,c
 10502  001182  0E78               	movlw	120
 10503  001184  6E16               	movwf	?_readEEPROM,c
 10504  001186  ECD6  F02D         	call	_readEEPROM	;wreg free
 10505  00118A  D36F               	goto	L20
 10506  00118C                     l10885:
 10507                           
 10508                           ; BSR set to: 0
 10509                           ;main.c: 2274: writeEEPROM(0x79, val);
 10510  00118C  6A0F               	clrf	?_writeEEPROM+1,c
 10511  00118E  0E79               	movlw	121
 10512  001190  6E0E               	movwf	?_writeEEPROM,c
 10513  001192  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10514  001196  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10515                           
 10516                           ;main.c: 2275: rv = readEEPROM(0x79);
 10517  00119A  6A17               	clrf	?_readEEPROM+1,c
 10518  00119C  0E79               	movlw	121
 10519  00119E  6E16               	movwf	?_readEEPROM,c
 10520  0011A0  ECD6  F02D         	call	_readEEPROM	;wreg free
 10521  0011A4  D362               	goto	L20
 10522  0011A6                     l10887:
 10523                           
 10524                           ; BSR set to: 0
 10525                           ;main.c: 2280: writeEEPROM(0x7A, val);
 10526  0011A6  6A0F               	clrf	?_writeEEPROM+1,c
 10527  0011A8  0E7A               	movlw	122
 10528  0011AA  6E0E               	movwf	?_writeEEPROM,c
 10529  0011AC  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10530  0011B0  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10531                           
 10532                           ;main.c: 2281: rv = readEEPROM(0x7A);
 10533  0011B4  6A17               	clrf	?_readEEPROM+1,c
 10534  0011B6  0E7A               	movlw	122
 10535  0011B8  6E16               	movwf	?_readEEPROM,c
 10536  0011BA  ECD6  F02D         	call	_readEEPROM	;wreg free
 10537  0011BE  D355               	goto	L20
 10538  0011C0                     l10889:
 10539                           
 10540                           ; BSR set to: 0
 10541                           ;main.c: 2286: writeEEPROM(0x7B, val);
 10542  0011C0  6A0F               	clrf	?_writeEEPROM+1,c
 10543  0011C2  0E7B               	movlw	123
 10544  0011C4  6E0E               	movwf	?_writeEEPROM,c
 10545  0011C6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10546  0011CA  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10547                           
 10548                           ;main.c: 2287: rv = readEEPROM(0x7B);
 10549  0011CE  6A17               	clrf	?_readEEPROM+1,c
 10550  0011D0  0E7B               	movlw	123
 10551  0011D2  6E16               	movwf	?_readEEPROM,c
 10552  0011D4  ECD6  F02D         	call	_readEEPROM	;wreg free
 10553  0011D8  D348               	goto	L20
 10554  0011DA                     l10891:
 10555                           
 10556                           ; BSR set to: 0
 10557                           ;main.c: 2292: writeEEPROM(0x7C, val);
 10558  0011DA  6A0F               	clrf	?_writeEEPROM+1,c
 10559  0011DC  0E7C               	movlw	124
 10560  0011DE  6E0E               	movwf	?_writeEEPROM,c
 10561  0011E0  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10562  0011E4  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10563                           
 10564                           ;main.c: 2293: rv = readEEPROM(0x7C);
 10565  0011E8  6A17               	clrf	?_readEEPROM+1,c
 10566  0011EA  0E7C               	movlw	124
 10567  0011EC  6E16               	movwf	?_readEEPROM,c
 10568  0011EE  ECD6  F02D         	call	_readEEPROM	;wreg free
 10569  0011F2  D33B               	goto	L20
 10570  0011F4                     l10893:
 10571                           
 10572                           ; BSR set to: 0
 10573                           ;main.c: 2298: writeEEPROM(0x7D, val);
 10574  0011F4  6A0F               	clrf	?_writeEEPROM+1,c
 10575  0011F6  0E7D               	movlw	125
 10576  0011F8  6E0E               	movwf	?_writeEEPROM,c
 10577  0011FA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10578  0011FE  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10579                           
 10580                           ;main.c: 2299: rv = readEEPROM(0x7D);
 10581  001202  6A17               	clrf	?_readEEPROM+1,c
 10582  001204  0E7D               	movlw	125
 10583  001206  6E16               	movwf	?_readEEPROM,c
 10584  001208  ECD6  F02D         	call	_readEEPROM	;wreg free
 10585  00120C  D32E               	goto	L20
 10586  00120E                     l10895:
 10587                           
 10588                           ; BSR set to: 0
 10589                           ;main.c: 2304: writeEEPROM(0x7E, val);
 10590  00120E  6A0F               	clrf	?_writeEEPROM+1,c
 10591  001210  0E7E               	movlw	126
 10592  001212  6E0E               	movwf	?_writeEEPROM,c
 10593  001214  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10594  001218  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10595                           
 10596                           ;main.c: 2305: rv = readEEPROM(0x7E);
 10597  00121C  6A17               	clrf	?_readEEPROM+1,c
 10598  00121E  0E7E               	movlw	126
 10599  001220  6E16               	movwf	?_readEEPROM,c
 10600  001222  ECD6  F02D         	call	_readEEPROM	;wreg free
 10601  001226  D321               	goto	L20
 10602  001228                     l10897:
 10603                           
 10604                           ; BSR set to: 0
 10605                           ;main.c: 2314: writeEEPROM(0x7F, val );
 10606  001228  6A0F               	clrf	?_writeEEPROM+1,c
 10607  00122A  0E7F               	movlw	127
 10608  00122C  6E0E               	movwf	?_writeEEPROM,c
 10609  00122E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10610  001232  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10611                           
 10612                           ;main.c: 2315: rv = readEEPROM(0x7F);
 10613  001236  6A17               	clrf	?_readEEPROM+1,c
 10614  001238  0E7F               	movlw	127
 10615  00123A  6E16               	movwf	?_readEEPROM,c
 10616  00123C  ECD6  F02D         	call	_readEEPROM	;wreg free
 10617  001240  D314               	goto	L20
 10618  001242                     l10899:
 10619                           
 10620                           ; BSR set to: 0
 10621                           ;main.c: 2320: writeEEPROM(0x80, val );
 10622  001242  6A0F               	clrf	?_writeEEPROM+1,c
 10623  001244  0E80               	movlw	128
 10624  001246  6E0E               	movwf	?_writeEEPROM,c
 10625  001248  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10626  00124C  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10627                           
 10628                           ;main.c: 2321: rv = readEEPROM(0x80);
 10629  001250  6A17               	clrf	?_readEEPROM+1,c
 10630  001252  0E80               	movlw	128
 10631  001254  6E16               	movwf	?_readEEPROM,c
 10632  001256  ECD6  F02D         	call	_readEEPROM	;wreg free
 10633  00125A  D307               	goto	L20
 10634  00125C                     l10901:
 10635                           
 10636                           ; BSR set to: 0
 10637                           ;main.c: 2326: writeEEPROM(0x81, val );
 10638  00125C  6A0F               	clrf	?_writeEEPROM+1,c
 10639  00125E  0E81               	movlw	129
 10640  001260  6E0E               	movwf	?_writeEEPROM,c
 10641  001262  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10642  001266  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10643                           
 10644                           ;main.c: 2327: rv = readEEPROM(0x81);
 10645  00126A  6A17               	clrf	?_readEEPROM+1,c
 10646  00126C  0E81               	movlw	129
 10647  00126E  6E16               	movwf	?_readEEPROM,c
 10648  001270  ECD6  F02D         	call	_readEEPROM	;wreg free
 10649  001274  D2FA               	goto	L20
 10650  001276                     l10903:
 10651                           
 10652                           ; BSR set to: 0
 10653                           ;main.c: 2332: writeEEPROM(0x82, val );
 10654  001276  6A0F               	clrf	?_writeEEPROM+1,c
 10655  001278  0E82               	movlw	130
 10656  00127A  6E0E               	movwf	?_writeEEPROM,c
 10657  00127C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10658  001280  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10659                           
 10660                           ;main.c: 2333: rv = readEEPROM(0x82);
 10661  001284  6A17               	clrf	?_readEEPROM+1,c
 10662  001286  0E82               	movlw	130
 10663  001288  6E16               	movwf	?_readEEPROM,c
 10664  00128A  ECD6  F02D         	call	_readEEPROM	;wreg free
 10665  00128E  D2ED               	goto	L20
 10666  001290                     l10905:
 10667                           
 10668                           ; BSR set to: 0
 10669                           ;main.c: 2338: writeEEPROM(0x83, val );
 10670  001290  6A0F               	clrf	?_writeEEPROM+1,c
 10671  001292  0E83               	movlw	131
 10672  001294  6E0E               	movwf	?_writeEEPROM,c
 10673  001296  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10674  00129A  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10675                           
 10676                           ;main.c: 2339: rv = readEEPROM(0x83);
 10677  00129E  6A17               	clrf	?_readEEPROM+1,c
 10678  0012A0  0E83               	movlw	131
 10679  0012A2  6E16               	movwf	?_readEEPROM,c
 10680  0012A4  ECD6  F02D         	call	_readEEPROM	;wreg free
 10681  0012A8  D2E0               	goto	L20
 10682  0012AA                     l10907:
 10683                           
 10684                           ; BSR set to: 0
 10685                           ;main.c: 2344: writeEEPROM(0x84, val );
 10686  0012AA  6A0F               	clrf	?_writeEEPROM+1,c
 10687  0012AC  0E84               	movlw	132
 10688  0012AE  6E0E               	movwf	?_writeEEPROM,c
 10689  0012B0  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10690  0012B4  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10691                           
 10692                           ;main.c: 2345: rv = readEEPROM(0x84);
 10693  0012B8  6A17               	clrf	?_readEEPROM+1,c
 10694  0012BA  0E84               	movlw	132
 10695  0012BC  6E16               	movwf	?_readEEPROM,c
 10696  0012BE  ECD6  F02D         	call	_readEEPROM	;wreg free
 10697  0012C2  D2D3               	goto	L20
 10698  0012C4                     l10909:
 10699                           
 10700                           ; BSR set to: 0
 10701                           ;main.c: 2350: writeEEPROM(0x85, val );
 10702  0012C4  6A0F               	clrf	?_writeEEPROM+1,c
 10703  0012C6  0E85               	movlw	133
 10704  0012C8  6E0E               	movwf	?_writeEEPROM,c
 10705  0012CA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10706  0012CE  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10707                           
 10708                           ;main.c: 2351: rv = readEEPROM(0x85);
 10709  0012D2  6A17               	clrf	?_readEEPROM+1,c
 10710  0012D4  0E85               	movlw	133
 10711  0012D6  6E16               	movwf	?_readEEPROM,c
 10712  0012D8  ECD6  F02D         	call	_readEEPROM	;wreg free
 10713  0012DC  D2C6               	goto	L20
 10714  0012DE                     l10911:
 10715                           
 10716                           ; BSR set to: 0
 10717                           ;main.c: 2356: writeEEPROM(0x86, val );
 10718  0012DE  6A0F               	clrf	?_writeEEPROM+1,c
 10719  0012E0  0E86               	movlw	134
 10720  0012E2  6E0E               	movwf	?_writeEEPROM,c
 10721  0012E4  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10722  0012E8  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10723                           
 10724                           ;main.c: 2357: rv = readEEPROM(0x86);
 10725  0012EC  6A17               	clrf	?_readEEPROM+1,c
 10726  0012EE  0E86               	movlw	134
 10727  0012F0  6E16               	movwf	?_readEEPROM,c
 10728  0012F2  ECD6  F02D         	call	_readEEPROM	;wreg free
 10729  0012F6  D2B9               	goto	L20
 10730  0012F8                     l10913:
 10731                           
 10732                           ; BSR set to: 0
 10733                           ;main.c: 2362: writeEEPROM(0x87, val );
 10734  0012F8  6A0F               	clrf	?_writeEEPROM+1,c
 10735  0012FA  0E87               	movlw	135
 10736  0012FC  6E0E               	movwf	?_writeEEPROM,c
 10737  0012FE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10738  001302  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10739                           
 10740                           ;main.c: 2363: rv = readEEPROM(0x87);
 10741  001306  6A17               	clrf	?_readEEPROM+1,c
 10742  001308  0E87               	movlw	135
 10743  00130A  6E16               	movwf	?_readEEPROM,c
 10744  00130C  ECD6  F02D         	call	_readEEPROM	;wreg free
 10745  001310  D2AC               	goto	L20
 10746  001312                     l10915:
 10747                           
 10748                           ; BSR set to: 0
 10749                           ;main.c: 2368: writeEEPROM(0x88, val );
 10750  001312  6A0F               	clrf	?_writeEEPROM+1,c
 10751  001314  0E88               	movlw	136
 10752  001316  6E0E               	movwf	?_writeEEPROM,c
 10753  001318  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10754  00131C  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10755                           
 10756                           ;main.c: 2369: rv = readEEPROM(0x88);
 10757  001320  6A17               	clrf	?_readEEPROM+1,c
 10758  001322  0E88               	movlw	136
 10759  001324  6E16               	movwf	?_readEEPROM,c
 10760  001326  ECD6  F02D         	call	_readEEPROM	;wreg free
 10761  00132A  D29F               	goto	L20
 10762  00132C                     l10917:
 10763                           
 10764                           ; BSR set to: 0
 10765                           ;main.c: 2374: writeEEPROM(0x89, val );
 10766  00132C  6A0F               	clrf	?_writeEEPROM+1,c
 10767  00132E  0E89               	movlw	137
 10768  001330  6E0E               	movwf	?_writeEEPROM,c
 10769  001332  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10770  001336  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10771                           
 10772                           ;main.c: 2375: rv = readEEPROM(0x89);
 10773  00133A  6A17               	clrf	?_readEEPROM+1,c
 10774  00133C  0E89               	movlw	137
 10775  00133E  6E16               	movwf	?_readEEPROM,c
 10776  001340  ECD6  F02D         	call	_readEEPROM	;wreg free
 10777  001344  D292               	goto	L20
 10778  001346                     l10919:
 10779                           
 10780                           ; BSR set to: 0
 10781                           ;main.c: 2380: writeEEPROM(0x8A, val );
 10782  001346  6A0F               	clrf	?_writeEEPROM+1,c
 10783  001348  0E8A               	movlw	138
 10784  00134A  6E0E               	movwf	?_writeEEPROM,c
 10785  00134C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10786  001350  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10787                           
 10788                           ;main.c: 2381: rv = readEEPROM(0x8A);
 10789  001354  6A17               	clrf	?_readEEPROM+1,c
 10790  001356  0E8A               	movlw	138
 10791  001358  6E16               	movwf	?_readEEPROM,c
 10792  00135A  ECD6  F02D         	call	_readEEPROM	;wreg free
 10793  00135E  D285               	goto	L20
 10794  001360                     l10921:
 10795                           
 10796                           ; BSR set to: 0
 10797                           ;main.c: 2390: writeEEPROM(0x8B, val );
 10798  001360  6A0F               	clrf	?_writeEEPROM+1,c
 10799  001362  0E8B               	movlw	139
 10800  001364  6E0E               	movwf	?_writeEEPROM,c
 10801  001366  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10802  00136A  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10803                           
 10804                           ;main.c: 2391: rv = readEEPROM(0x8B);
 10805  00136E  6A17               	clrf	?_readEEPROM+1,c
 10806  001370  0E8B               	movlw	139
 10807  001372  6E16               	movwf	?_readEEPROM,c
 10808  001374  ECD6  F02D         	call	_readEEPROM	;wreg free
 10809  001378  D278               	goto	L20
 10810  00137A                     l10923:
 10811                           
 10812                           ; BSR set to: 0
 10813                           ;main.c: 2396: writeEEPROM(0x8C, val );
 10814  00137A  6A0F               	clrf	?_writeEEPROM+1,c
 10815  00137C  0E8C               	movlw	140
 10816  00137E  6E0E               	movwf	?_writeEEPROM,c
 10817  001380  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10818  001384  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10819                           
 10820                           ;main.c: 2397: rv = readEEPROM(0x8C);
 10821  001388  6A17               	clrf	?_readEEPROM+1,c
 10822  00138A  0E8C               	movlw	140
 10823  00138C  6E16               	movwf	?_readEEPROM,c
 10824  00138E  ECD6  F02D         	call	_readEEPROM	;wreg free
 10825  001392  D26B               	goto	L20
 10826  001394                     l10925:
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;main.c: 2402: writeEEPROM(0x8D, val );
 10830  001394  6A0F               	clrf	?_writeEEPROM+1,c
 10831  001396  0E8D               	movlw	141
 10832  001398  6E0E               	movwf	?_writeEEPROM,c
 10833  00139A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10834  00139E  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10835                           
 10836                           ;main.c: 2403: rv = readEEPROM(0x8D);
 10837  0013A2  6A17               	clrf	?_readEEPROM+1,c
 10838  0013A4  0E8D               	movlw	141
 10839  0013A6  6E16               	movwf	?_readEEPROM,c
 10840  0013A8  ECD6  F02D         	call	_readEEPROM	;wreg free
 10841  0013AC  D25E               	goto	L20
 10842  0013AE                     l10927:
 10843                           
 10844                           ; BSR set to: 0
 10845                           ;main.c: 2408: writeEEPROM(0x8E, val );
 10846  0013AE  6A0F               	clrf	?_writeEEPROM+1,c
 10847  0013B0  0E8E               	movlw	142
 10848  0013B2  6E0E               	movwf	?_writeEEPROM,c
 10849  0013B4  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10850  0013B8  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10851                           
 10852                           ;main.c: 2409: rv = readEEPROM(0x8E);
 10853  0013BC  6A17               	clrf	?_readEEPROM+1,c
 10854  0013BE  0E8E               	movlw	142
 10855  0013C0  6E16               	movwf	?_readEEPROM,c
 10856  0013C2  ECD6  F02D         	call	_readEEPROM	;wreg free
 10857  0013C6  D251               	goto	L20
 10858  0013C8                     l10929:
 10859                           
 10860                           ; BSR set to: 0
 10861                           ;main.c: 2414: writeEEPROM(0x8F, val );
 10862  0013C8  6A0F               	clrf	?_writeEEPROM+1,c
 10863  0013CA  0E8F               	movlw	143
 10864  0013CC  6E0E               	movwf	?_writeEEPROM,c
 10865  0013CE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10866  0013D2  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10867                           
 10868                           ;main.c: 2415: rv = readEEPROM(0x8F);
 10869  0013D6  6A17               	clrf	?_readEEPROM+1,c
 10870  0013D8  0E8F               	movlw	143
 10871  0013DA  6E16               	movwf	?_readEEPROM,c
 10872  0013DC  ECD6  F02D         	call	_readEEPROM	;wreg free
 10873  0013E0  D244               	goto	L20
 10874  0013E2                     l10931:
 10875                           
 10876                           ; BSR set to: 0
 10877                           ;main.c: 2420: writeEEPROM(0x90, val );
 10878  0013E2  6A0F               	clrf	?_writeEEPROM+1,c
 10879  0013E4  0E90               	movlw	144
 10880  0013E6  6E0E               	movwf	?_writeEEPROM,c
 10881  0013E8  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10882  0013EC  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10883                           
 10884                           ;main.c: 2421: rv = readEEPROM(0x90);
 10885  0013F0  6A17               	clrf	?_readEEPROM+1,c
 10886  0013F2  0E90               	movlw	144
 10887  0013F4  6E16               	movwf	?_readEEPROM,c
 10888  0013F6  ECD6  F02D         	call	_readEEPROM	;wreg free
 10889  0013FA  D237               	goto	L20
 10890  0013FC                     l10933:
 10891                           
 10892                           ; BSR set to: 0
 10893                           ;main.c: 2426: writeEEPROM(0x91, val );
 10894  0013FC  6A0F               	clrf	?_writeEEPROM+1,c
 10895  0013FE  0E91               	movlw	145
 10896  001400  6E0E               	movwf	?_writeEEPROM,c
 10897  001402  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10898  001406  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10899                           
 10900                           ;main.c: 2427: rv = readEEPROM(0x91);
 10901  00140A  6A17               	clrf	?_readEEPROM+1,c
 10902  00140C  0E91               	movlw	145
 10903  00140E  6E16               	movwf	?_readEEPROM,c
 10904  001410  ECD6  F02D         	call	_readEEPROM	;wreg free
 10905  001414  D22A               	goto	L20
 10906  001416                     l10935:
 10907                           
 10908                           ; BSR set to: 0
 10909                           ;main.c: 2432: writeEEPROM(0x92, val );
 10910  001416  6A0F               	clrf	?_writeEEPROM+1,c
 10911  001418  0E92               	movlw	146
 10912  00141A  6E0E               	movwf	?_writeEEPROM,c
 10913  00141C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10914  001420  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10915                           
 10916                           ;main.c: 2433: rv = readEEPROM(0x92);
 10917  001424  6A17               	clrf	?_readEEPROM+1,c
 10918  001426  0E92               	movlw	146
 10919  001428  6E16               	movwf	?_readEEPROM,c
 10920  00142A  ECD6  F02D         	call	_readEEPROM	;wreg free
 10921  00142E  D21D               	goto	L20
 10922  001430                     l10937:
 10923                           
 10924                           ; BSR set to: 0
 10925                           ;main.c: 2438: writeEEPROM(0x93, val );
 10926  001430  6A0F               	clrf	?_writeEEPROM+1,c
 10927  001432  0E93               	movlw	147
 10928  001434  6E0E               	movwf	?_writeEEPROM,c
 10929  001436  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10930  00143A  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10931                           
 10932                           ;main.c: 2439: rv = readEEPROM(0x93);
 10933  00143E  6A17               	clrf	?_readEEPROM+1,c
 10934  001440  0E93               	movlw	147
 10935  001442  6E16               	movwf	?_readEEPROM,c
 10936  001444  ECD6  F02D         	call	_readEEPROM	;wreg free
 10937  001448  D210               	goto	L20
 10938  00144A                     l10939:
 10939                           
 10940                           ; BSR set to: 0
 10941                           ;main.c: 2444: writeEEPROM(0x94, val );
 10942  00144A  6A0F               	clrf	?_writeEEPROM+1,c
 10943  00144C  0E94               	movlw	148
 10944  00144E  6E0E               	movwf	?_writeEEPROM,c
 10945  001450  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10946  001454  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10947                           
 10948                           ;main.c: 2445: rv = readEEPROM(0x94);
 10949  001458  6A17               	clrf	?_readEEPROM+1,c
 10950  00145A  0E94               	movlw	148
 10951  00145C  6E16               	movwf	?_readEEPROM,c
 10952  00145E  ECD6  F02D         	call	_readEEPROM	;wreg free
 10953  001462  D203               	goto	L20
 10954  001464                     l10941:
 10955                           
 10956                           ; BSR set to: 0
 10957                           ;main.c: 2450: writeEEPROM(0x95, val );
 10958  001464  6A0F               	clrf	?_writeEEPROM+1,c
 10959  001466  0E95               	movlw	149
 10960  001468  6E0E               	movwf	?_writeEEPROM,c
 10961  00146A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10962  00146E  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10963                           
 10964                           ;main.c: 2451: rv = readEEPROM(0x95);
 10965  001472  6A17               	clrf	?_readEEPROM+1,c
 10966  001474  0E95               	movlw	149
 10967  001476  6E16               	movwf	?_readEEPROM,c
 10968  001478  ECD6  F02D         	call	_readEEPROM	;wreg free
 10969  00147C  D1F6               	goto	L20
 10970  00147E                     l10943:
 10971                           
 10972                           ; BSR set to: 0
 10973                           ;main.c: 2456: writeEEPROM(0x96, val );
 10974  00147E  6A0F               	clrf	?_writeEEPROM+1,c
 10975  001480  0E96               	movlw	150
 10976  001482  6E0E               	movwf	?_writeEEPROM,c
 10977  001484  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10978  001488  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10979                           
 10980                           ;main.c: 2457: rv = readEEPROM(0x96);
 10981  00148C  6A17               	clrf	?_readEEPROM+1,c
 10982  00148E  0E96               	movlw	150
 10983  001490  6E16               	movwf	?_readEEPROM,c
 10984  001492  ECD6  F02D         	call	_readEEPROM	;wreg free
 10985  001496  D1E9               	goto	L20
 10986  001498                     l10945:
 10987                           
 10988                           ; BSR set to: 0
 10989                           ;main.c: 2466: writeEEPROM(0x97, val);
 10990  001498  6A0F               	clrf	?_writeEEPROM+1,c
 10991  00149A  0E97               	movlw	151
 10992  00149C  6E0E               	movwf	?_writeEEPROM,c
 10993  00149E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10994  0014A2  ECCA  F02C         	call	_writeEEPROM	;wreg free
 10995                           
 10996                           ;main.c: 2467: rv = readEEPROM(0x97);
 10997  0014A6  6A17               	clrf	?_readEEPROM+1,c
 10998  0014A8  0E97               	movlw	151
 10999  0014AA  6E16               	movwf	?_readEEPROM,c
 11000  0014AC  ECD6  F02D         	call	_readEEPROM	;wreg free
 11001  0014B0  D1DC               	goto	L20
 11002  0014B2                     l10947:
 11003                           
 11004                           ; BSR set to: 0
 11005                           ;main.c: 2472: writeEEPROM(0x98, val);
 11006  0014B2  6A0F               	clrf	?_writeEEPROM+1,c
 11007  0014B4  0E98               	movlw	152
 11008  0014B6  6E0E               	movwf	?_writeEEPROM,c
 11009  0014B8  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11010  0014BC  ECCA  F02C         	call	_writeEEPROM	;wreg free
 11011                           
 11012                           ;main.c: 2473: rv = readEEPROM(0x98);
 11013  0014C0  6A17               	clrf	?_readEEPROM+1,c
 11014  0014C2  0E98               	movlw	152
 11015  0014C4  6E16               	movwf	?_readEEPROM,c
 11016  0014C6  ECD6  F02D         	call	_readEEPROM	;wreg free
 11017  0014CA  D1CF               	goto	L20
 11018  0014CC                     l10949:
 11019                           
 11020                           ; BSR set to: 0
 11021                           ;main.c: 2478: writeEEPROM(0x99, val);
 11022  0014CC  6A0F               	clrf	?_writeEEPROM+1,c
 11023  0014CE  0E99               	movlw	153
 11024  0014D0  6E0E               	movwf	?_writeEEPROM,c
 11025  0014D2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11026  0014D6  ECCA  F02C         	call	_writeEEPROM	;wreg free
 11027  0014DA  6A17               	clrf	?_readEEPROM+1,c
 11028  0014DC  0E99               	movlw	153
 11029  0014DE  6E16               	movwf	?_readEEPROM,c
 11030  0014E0  ECD6  F02D         	call	_readEEPROM	;wreg free
 11031  0014E4                     l518:
 11032                           
 11033                           ;main.c: 2483: writeEEPROM(0x9A, val);
 11034  0014E4  6A0F               	clrf	?_writeEEPROM+1,c
 11035  0014E6  0E9A               	movlw	154
 11036  0014E8  6E0E               	movwf	?_writeEEPROM,c
 11037  0014EA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11038  0014EE  ECCA  F02C         	call	_writeEEPROM	;wreg free
 11039                           
 11040                           ;main.c: 2484: rv = readEEPROM(0x9A);
 11041  0014F2  6A17               	clrf	?_readEEPROM+1,c
 11042  0014F4  0E9A               	movlw	154
 11043  0014F6  6E16               	movwf	?_readEEPROM,c
 11044  0014F8  ECD6  F02D         	call	_readEEPROM	;wreg free
 11045  0014FC  D1B6               	goto	L20
 11046  0014FE                     l10951:
 11047                           
 11048                           ; BSR set to: 0
 11049                           ;main.c: 2489: writeEEPROM(0x9B, val);
 11050  0014FE  6A0F               	clrf	?_writeEEPROM+1,c
 11051  001500  0E9B               	movlw	155
 11052  001502  6E0E               	movwf	?_writeEEPROM,c
 11053  001504  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11054  001508  ECCA  F02C         	call	_writeEEPROM	;wreg free
 11055                           
 11056                           ;main.c: 2490: rv = readEEPROM(0x9B);
 11057  00150C  6A17               	clrf	?_readEEPROM+1,c
 11058  00150E  0E9B               	movlw	155
 11059  001510  6E16               	movwf	?_readEEPROM,c
 11060  001512  ECD6  F02D         	call	_readEEPROM	;wreg free
 11061  001516  D1A9               	goto	L20
 11062  001518                     l10953:
 11063                           
 11064                           ; BSR set to: 0
 11065                           ;main.c: 2495: writeEEPROM(0x9C, val);
 11066  001518  6A0F               	clrf	?_writeEEPROM+1,c
 11067  00151A  0E9C               	movlw	156
 11068  00151C  6E0E               	movwf	?_writeEEPROM,c
 11069  00151E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11070  001522  ECCA  F02C         	call	_writeEEPROM	;wreg free
 11071                           
 11072                           ;main.c: 2496: rv = readEEPROM(0x9C);
 11073  001526  6A17               	clrf	?_readEEPROM+1,c
 11074  001528  0E9C               	movlw	156
 11075  00152A  6E16               	movwf	?_readEEPROM,c
 11076  00152C  ECD6  F02D         	call	_readEEPROM	;wreg free
 11077  001530  D19C               	goto	L20
 11078  001532                     l521:
 11079                           
 11080                           ; BSR set to: 0
 11081                           ;main.c: 2501: rv = 0;
 11082  001532  6A26               	clrf	vscp_writeAppReg@rv,c
 11083                           
 11084                           ;main.c: 2502: break;
 11085  001534  D19B               	goto	l10989
 11086  001536                     l10955:
 11087                           
 11088                           ; BSR set to: 0
 11089                           ;main.c: 2511: writeEEPROM(0xF2, val);
 11090  001536  6A0F               	clrf	?_writeEEPROM+1,c
 11091  001538  0EF2               	movlw	242
 11092  00153A  6E0E               	movwf	?_writeEEPROM,c
 11093  00153C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11094  001540  ECCA  F02C         	call	_writeEEPROM	;wreg free
 11095                           
 11096                           ;main.c: 2512: rv = readEEPROM(0xF2);
 11097  001544  6A17               	clrf	?_readEEPROM+1,c
 11098  001546  0EF2               	movlw	242
 11099  001548  6E16               	movwf	?_readEEPROM,c
 11100  00154A  ECD6  F02D         	call	_readEEPROM	;wreg free
 11101  00154E  D18D               	goto	L20
 11102  001550                     l10957:
 11103                           
 11104                           ; BSR set to: 0
 11105                           ;main.c: 2517: writeEEPROM(0xF3, val);
 11106  001550  6A0F               	clrf	?_writeEEPROM+1,c
 11107  001552  0EF3               	movlw	243
 11108  001554  6E0E               	movwf	?_writeEEPROM,c
 11109  001556  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11110  00155A  ECCA  F02C         	call	_writeEEPROM	;wreg free
 11111                           
 11112                           ;main.c: 2518: rv = readEEPROM(0xF3);
 11113  00155E  6A17               	clrf	?_readEEPROM+1,c
 11114  001560  0EF3               	movlw	243
 11115  001562  6E16               	movwf	?_readEEPROM,c
 11116  001564  ECD6  F02D         	call	_readEEPROM	;wreg free
 11117  001568  D180               	goto	L20
 11118  00156A                     l10959:
 11119                           
 11120                           ; BSR set to: 0
 11121                           ;main.c: 2522: rv = ~val;
 11122  00156A  1C23               	comf	vscp_writeAppReg@val,w,c
 11123  00156C  D17E               	goto	L20
 11124  00156E                     l10963:
 11125                           
 11126                           ; BSR set to: 0
 11127  00156E  5025               	movf	vscp_writeAppReg@reg,w,c
 11128                           
 11129                           ; Switch size 1, requested type "speed"
 11130                           ; Number of cases is 96, Range of values is 0 to 119
 11131                           ; switch strategies available:
 11132                           ; Name         Instructions Cycles
 11133                           ; simple_byte          289   145 (average)
 11134                           ;	Chosen strategy is simple_byte
 11135  001570  E102 EFC2  F005    	bz	l10773
 11136  001576  0A01               	xorlw	1	; case 1
 11137  001578  E102 EFD0  F005    	bz	l10775
 11138  00157E  0A03               	xorlw	3	; case 2
 11139  001580  E102 EFDE  F005    	bz	l10777
 11140  001586  0A01               	xorlw	1	; case 3
 11141  001588  E102 EFEC  F005    	bz	l10779
 11142  00158E  0A07               	xorlw	7	; case 4
 11143  001590  E102 EFFA  F005    	bz	l10781
 11144  001596  0A01               	xorlw	1	; case 5
 11145  001598  E102 EF08  F006    	bz	l10783
 11146  00159E  0A03               	xorlw	3	; case 6
 11147  0015A0  E102 EF16  F006    	bz	l10785
 11148  0015A6  0A01               	xorlw	1	; case 7
 11149  0015A8  E102 EF24  F006    	bz	l10787
 11150  0015AE  0A13               	xorlw	19	; case 20
 11151  0015B0  E102 EF32  F006    	bz	l10789
 11152  0015B6  0A01               	xorlw	1	; case 21
 11153  0015B8  E102 EF40  F006    	bz	l10791
 11154  0015BE  0A03               	xorlw	3	; case 22
 11155  0015C0  E102 EF4E  F006    	bz	l10793
 11156  0015C6  0A01               	xorlw	1	; case 23
 11157  0015C8  E102 EF5C  F006    	bz	l10795
 11158  0015CE  0A0F               	xorlw	15	; case 24
 11159  0015D0  E102 EF6A  F006    	bz	l10797
 11160  0015D6  0A01               	xorlw	1	; case 25
 11161  0015D8  E102 EF78  F006    	bz	l10799
 11162  0015DE  0A3F               	xorlw	63	; case 38
 11163  0015E0  E102 EF86  F006    	bz	l10801
 11164  0015E6  0A01               	xorlw	1	; case 39
 11165  0015E8  E102 EF94  F006    	bz	l10803
 11166  0015EE  0A0F               	xorlw	15	; case 40
 11167  0015F0  E102 EFA2  F006    	bz	l10805
 11168  0015F6  0A01               	xorlw	1	; case 41
 11169  0015F8  E102 EFB0  F006    	bz	l10807
 11170  0015FE  0A03               	xorlw	3	; case 42
 11171  001600  E102 EFBE  F006    	bz	l10809
 11172  001606  0A01               	xorlw	1	; case 43
 11173  001608  E102 EFCC  F006    	bz	l10811
 11174  00160E  0A07               	xorlw	7	; case 44
 11175  001610  E102 EFDA  F006    	bz	l10813
 11176  001616  0A01               	xorlw	1	; case 45
 11177  001618  E102 EFE8  F006    	bz	l10815
 11178  00161E  0A03               	xorlw	3	; case 46
 11179  001620  E102 EFF6  F006    	bz	l10817
 11180  001626  0A01               	xorlw	1	; case 47
 11181  001628  E102 EF04  F007    	bz	l10819
 11182  00162E  0A1F               	xorlw	31	; case 48
 11183  001630  E102 EF12  F007    	bz	l10821
 11184  001636  0A01               	xorlw	1	; case 49
 11185  001638  E101 D402          	bz	l10823
 11186  00163C  0A03               	xorlw	3	; case 50
 11187  00163E  E101 D40D          	bz	l10825
 11188  001642  0A01               	xorlw	1	; case 51
 11189  001644  E101 D418          	bz	l10827
 11190  001648  0A07               	xorlw	7	; case 52
 11191  00164A  E101 D423          	bz	l10829
 11192  00164E  0A01               	xorlw	1	; case 53
 11193  001650  E101 D42E          	bz	l10831
 11194  001654  0A03               	xorlw	3	; case 54
 11195  001656  E101 D439          	bz	l10833
 11196  00165A  0A01               	xorlw	1	; case 55
 11197  00165C  E101 D444          	bz	l10835
 11198  001660  0A0F               	xorlw	15	; case 56
 11199  001662  E101 D44F          	bz	l10837
 11200  001666  0A01               	xorlw	1	; case 57
 11201  001668  E101 D45A          	bz	l10839
 11202  00166C  0A03               	xorlw	3	; case 58
 11203  00166E  E101 D465          	bz	l10841
 11204  001672  0A01               	xorlw	1	; case 59
 11205  001674  E101 D470          	bz	l10843
 11206  001678  0A07               	xorlw	7	; case 60
 11207  00167A  E101 D47B          	bz	l10845
 11208  00167E  0A01               	xorlw	1	; case 61
 11209  001680  E101 D486          	bz	l10847
 11210  001684  0A03               	xorlw	3	; case 62
 11211  001686  E101 D491          	bz	l10849
 11212  00168A  0A01               	xorlw	1	; case 63
 11213  00168C  E101 D49C          	bz	l10851
 11214  001690  0A7F               	xorlw	127	; case 64
 11215  001692  E101 D4A7          	bz	l10853
 11216  001696  0A01               	xorlw	1	; case 65
 11217  001698  E101 D4B2          	bz	l10855
 11218  00169C  0A03               	xorlw	3	; case 66
 11219  00169E  E101 D4BD          	bz	l10857
 11220  0016A2  0A01               	xorlw	1	; case 67
 11221  0016A4  E101 D4C8          	bz	l10859
 11222  0016A8  0A07               	xorlw	7	; case 68
 11223  0016AA  E101 D4D3          	bz	l10861
 11224  0016AE  0A01               	xorlw	1	; case 69
 11225  0016B0  E101 D4DD          	bz	l10863
 11226  0016B4  0A03               	xorlw	3	; case 70
 11227  0016B6  E101 D4E7          	bz	l10865
 11228  0016BA  0A01               	xorlw	1	; case 71
 11229  0016BC  E101 D4F1          	bz	l10867
 11230  0016C0  0A0F               	xorlw	15	; case 72
 11231  0016C2  E101 D4FB          	bz	l10869
 11232  0016C6  0A01               	xorlw	1	; case 73
 11233  0016C8  E101 D505          	bz	l10871
 11234  0016CC  0A03               	xorlw	3	; case 74
 11235  0016CE  E101 D50F          	bz	l10873
 11236  0016D2  0A01               	xorlw	1	; case 75
 11237  0016D4  E101 D519          	bz	l10875
 11238  0016D8  0A07               	xorlw	7	; case 76
 11239  0016DA  E101 D523          	bz	l10877
 11240  0016DE  0A01               	xorlw	1	; case 77
 11241  0016E0  E101 D52D          	bz	l10879
 11242  0016E4  0A03               	xorlw	3	; case 78
 11243  0016E6  E101 D537          	bz	l10881
 11244  0016EA  0A01               	xorlw	1	; case 79
 11245  0016EC  E101 D541          	bz	l10883
 11246  0016F0  0A1F               	xorlw	31	; case 80
 11247  0016F2  E101 D54B          	bz	l10885
 11248  0016F6  0A01               	xorlw	1	; case 81
 11249  0016F8  E101 D555          	bz	l10887
 11250  0016FC  0A03               	xorlw	3	; case 82
 11251  0016FE  E101 D55F          	bz	l10889
 11252  001702  0A01               	xorlw	1	; case 83
 11253  001704  E101 D569          	bz	l10891
 11254  001708  0A07               	xorlw	7	; case 84
 11255  00170A  E101 D573          	bz	l10893
 11256  00170E  0A01               	xorlw	1	; case 85
 11257  001710  E101 D57D          	bz	l10895
 11258  001714  0A03               	xorlw	3	; case 86
 11259  001716  E101 D587          	bz	l10897
 11260  00171A  0A01               	xorlw	1	; case 87
 11261  00171C  E101 D591          	bz	l10899
 11262  001720  0A0F               	xorlw	15	; case 88
 11263  001722  E101 D59B          	bz	l10901
 11264  001726  0A01               	xorlw	1	; case 89
 11265  001728  E101 D5A5          	bz	l10903
 11266  00172C  0A03               	xorlw	3	; case 90
 11267  00172E  E101 D5AF          	bz	l10905
 11268  001732  0A01               	xorlw	1	; case 91
 11269  001734  E101 D5B9          	bz	l10907
 11270  001738  0A07               	xorlw	7	; case 92
 11271  00173A  E101 D5C3          	bz	l10909
 11272  00173E  0A01               	xorlw	1	; case 93
 11273  001740  E101 D5CD          	bz	l10911
 11274  001744  0A03               	xorlw	3	; case 94
 11275  001746  E101 D5D7          	bz	l10913
 11276  00174A  0A01               	xorlw	1	; case 95
 11277  00174C  E101 D5E1          	bz	l10915
 11278  001750  0A3F               	xorlw	63	; case 96
 11279  001752  E101 D5EB          	bz	l10917
 11280  001756  0A01               	xorlw	1	; case 97
 11281  001758  E101 D5F5          	bz	l10919
 11282  00175C  0A03               	xorlw	3	; case 98
 11283  00175E  E101 D5FF          	bz	l10921
 11284  001762  0A01               	xorlw	1	; case 99
 11285  001764  E101 D609          	bz	l10923
 11286  001768  0A07               	xorlw	7	; case 100
 11287  00176A  E101 D613          	bz	l10925
 11288  00176E  0A01               	xorlw	1	; case 101
 11289  001770  E101 D61D          	bz	l10927
 11290  001774  0A03               	xorlw	3	; case 102
 11291  001776  E101 D627          	bz	l10929
 11292  00177A  0A01               	xorlw	1	; case 103
 11293  00177C  E101 D631          	bz	l10931
 11294  001780  0A0F               	xorlw	15	; case 104
 11295  001782  E101 D63B          	bz	l10933
 11296  001786  0A01               	xorlw	1	; case 105
 11297  001788  E101 D645          	bz	l10935
 11298  00178C  0A03               	xorlw	3	; case 106
 11299  00178E  E101 D64F          	bz	l10937
 11300  001792  0A01               	xorlw	1	; case 107
 11301  001794  E101 D659          	bz	l10939
 11302  001798  0A07               	xorlw	7	; case 108
 11303  00179A  E101 D663          	bz	l10941
 11304  00179E  0A01               	xorlw	1	; case 109
 11305  0017A0  E101 D66D          	bz	l10943
 11306  0017A4  0A03               	xorlw	3	; case 110
 11307  0017A6  E101 D677          	bz	l10945
 11308  0017AA  0A01               	xorlw	1	; case 111
 11309  0017AC  E101 D681          	bz	l10947
 11310  0017B0  0A1F               	xorlw	31	; case 112
 11311  0017B2  E101 D68B          	bz	l10949
 11312  0017B6  0A01               	xorlw	1	; case 113
 11313  0017B8  E101 D694          	bz	l518
 11314  0017BC  0A03               	xorlw	3	; case 114
 11315  0017BE  E101 D69E          	bz	l10951
 11316  0017C2  0A01               	xorlw	1	; case 115
 11317  0017C4  E101 D6A8          	bz	l10953
 11318  0017C8  0A07               	xorlw	7	; case 116
 11319  0017CA  E101 D6B2          	bz	l521
 11320  0017CE  0A01               	xorlw	1	; case 117
 11321  0017D0  E101 D6AF          	bz	l521
 11322  0017D4  0A03               	xorlw	3	; case 118
 11323  0017D6  E101 D6AE          	bz	l10955
 11324  0017DA  0A01               	xorlw	1	; case 119
 11325  0017DC  E101 D6B8          	bz	l10957
 11326  0017E0  D6C4               	goto	l10959
 11327  0017E2                     l10965:
 11328                           
 11329                           ; BSR set to: 0
 11330                           ;main.c: 2526: else if (1 == vscp_page_select) {
 11331  0017E2  0446               	decf	_vscp_page_select,w,c
 11332  0017E4  1047               	iorwf	_vscp_page_select+1,w,c
 11333  0017E6  E142               	bnz	l10989
 11334                           
 11335                           ; BSR set to: 0
 11336                           ;main.c: 2529: if (reg < 72) {
 11337  0017E8  0E48               	movlw	72
 11338  0017EA  6025               	cpfslt	vscp_writeAppReg@reg,c
 11339  0017EC  D016               	goto	l10973
 11340                           
 11341                           ; BSR set to: 0
 11342                           ;main.c: 2530: writeEEPROM(0xAA + reg, val);
 11343  0017EE  0EAA               	movlw	170
 11344  0017F0  2425               	addwf	vscp_writeAppReg@reg,w,c
 11345  0017F2  6E0E               	movwf	?_writeEEPROM,c
 11346  0017F4  6A0F               	clrf	?_writeEEPROM+1,c
 11347  0017F6  0E00               	movlw	0
 11348  0017F8  220F               	addwfc	?_writeEEPROM+1,f,c
 11349  0017FA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11350  0017FE  ECCA  F02C         	call	_writeEEPROM	;wreg free
 11351                           
 11352                           ;main.c: 2531: rv = readEEPROM(0xAA + reg );
 11353  001802  0EAA               	movlw	170
 11354  001804  2425               	addwf	vscp_writeAppReg@reg,w,c
 11355  001806  6E16               	movwf	?_readEEPROM,c
 11356  001808  6A17               	clrf	?_readEEPROM+1,c
 11357  00180A  0E00               	movlw	0
 11358  00180C  2217               	addwfc	?_readEEPROM+1,f,c
 11359  00180E  ECD6  F02D         	call	_readEEPROM	;wreg free
 11360  001812  6E26               	movwf	vscp_writeAppReg@rv,c
 11361                           
 11362                           ;main.c: 2532: writeCoeffs2Ram();
 11363  001814  EC2D  F027         	call	_writeCoeffs2Ram	;wreg free
 11364                           
 11365                           ;main.c: 2533: }
 11366  001818  D029               	goto	l10989
 11367  00181A                     l10973:
 11368                           
 11369                           ; BSR set to: 0
 11370                           ;main.c: 2535: else if (reg < 84) {
 11371  00181A  0E54               	movlw	84
 11372  00181C  6025               	cpfslt	vscp_writeAppReg@reg,c
 11373  00181E  D010               	goto	l10985
 11374                           
 11375                           ; BSR set to: 0
 11376                           ;main.c: 2537: uint8_t pos = reg - 72;
 11377  001820  5025               	movf	vscp_writeAppReg@reg,w,c
 11378  001822  0FB8               	addlw	184
 11379  001824  6E24               	movwf	vscp_writeAppReg@pos,c
 11380                           
 11381                           ; BSR set to: 0
 11382                           ;main.c: 2538: if ( pos % 2 ) {
 11383  001826  A024               	btfss	vscp_writeAppReg@pos,0,c
 11384  001828  D002               	goto	l10981
 11385                           
 11386                           ; BSR set to: 0
 11387                           ;main.c: 2539: pos--;
 11388  00182A  0624               	decf	vscp_writeAppReg@pos,f,c
 11389                           
 11390                           ;main.c: 2540: }
 11391  00182C  D001               	goto	l10983
 11392  00182E                     l10981:
 11393                           
 11394                           ; BSR set to: 0
 11395                           ;main.c: 2541: else {
 11396                           ;main.c: 2542: pos++;
 11397  00182E  2A24               	incf	vscp_writeAppReg@pos,f,c
 11398  001830                     l10983:
 11399                           
 11400                           ; BSR set to: 0
 11401                           ;main.c: 2543: }
 11402                           ;main.c: 2544: rv = adc[ pos ];
 11403  001830  0E9E               	movlw	low _adc
 11404  001832  2424               	addwf	vscp_writeAppReg@pos,w,c
 11405  001834  6ED9               	movwf	fsr2l,c
 11406  001836  6ADA               	clrf	fsr2h,c
 11407  001838  0E01               	movlw	high _adc
 11408  00183A  22DA               	addwfc	fsr2h,f,c
 11409  00183C  50DF               	movf	indf2,w,c
 11410  00183E  D015               	goto	L20
 11411  001840                     l10985:
 11412                           
 11413                           ; BSR set to: 0
 11414                           ;main.c: 2547: else if (reg < 98) {
 11415  001840  0E62               	movlw	98
 11416  001842  6025               	cpfslt	vscp_writeAppReg@reg,c
 11417  001844  D013               	goto	l10989
 11418                           
 11419                           ; BSR set to: 0
 11420                           ;main.c: 2548: writeEEPROM( 0x9E + reg - 84, val );
 11421  001846  0E4A               	movlw	74
 11422  001848  2425               	addwf	vscp_writeAppReg@reg,w,c
 11423  00184A  6E0E               	movwf	?_writeEEPROM,c
 11424  00184C  6A0F               	clrf	?_writeEEPROM+1,c
 11425  00184E  0E00               	movlw	0
 11426  001850  220F               	addwfc	?_writeEEPROM+1,f,c
 11427  001852  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11428  001856  ECCA  F02C         	call	_writeEEPROM	;wreg free
 11429                           
 11430                           ;main.c: 2549: rv = readEEPROM( 0x9E + reg - 84 ) ;
 11431  00185A  0E4A               	movlw	74
 11432  00185C  2425               	addwf	vscp_writeAppReg@reg,w,c
 11433  00185E  6E16               	movwf	?_readEEPROM,c
 11434  001860  6A17               	clrf	?_readEEPROM+1,c
 11435  001862  0E00               	movlw	0
 11436  001864  2217               	addwfc	?_readEEPROM+1,f,c
 11437  001866  ECD6  F02D         	call	_readEEPROM	;wreg free
 11438  00186A                     L20:
 11439  00186A  6E26               	movwf	vscp_writeAppReg@rv,c
 11440  00186C                     l10989:
 11441                           
 11442                           ;main.c: 2550: }
 11443                           ;main.c: 2551: }
 11444                           ;main.c: 2553: return rv;
 11445  00186C  5026               	movf	vscp_writeAppReg@rv,w,c
 11446  00186E  0012               	return	
 11447  001870                     __end_of_vscp_writeAppReg:
 11448                           	opt stack 0
 11449                           tblptru	equ	0xFF8
 11450                           tblptrh	equ	0xFF7
 11451                           tblptrl	equ	0xFF6
 11452                           tablat	equ	0xFF5
 11453                           prodh	equ	0xFF4
 11454                           prodl	equ	0xFF3
 11455                           postinc0	equ	0xFEE
 11456                           wreg	equ	0xFE8
 11457                           postdec1	equ	0xFE5
 11458                           fsr1h	equ	0xFE2
 11459                           fsr1l	equ	0xFE1
 11460                           indf2	equ	0xFDF
 11461                           postinc2	equ	0xFDE
 11462                           postdec2	equ	0xFDD
 11463                           fsr2h	equ	0xFDA
 11464                           fsr2l	equ	0xFD9
 11465                           status	equ	0xFD8
 11466                           
 11467 ;; *************** function _writeCoeffs2Ram *****************
 11468 ;; Defined at:
 11469 ;;		line 969 in file "../main.c"
 11470 ;; Parameters:    Size  Location     Type
 11471 ;;		None
 11472 ;; Auto vars:     Size  Location     Type
 11473 ;;  c               3   27[COMRAM] unsigned char [3]
 11474 ;;  j               2   32[COMRAM] int 
 11475 ;;  i               2   30[COMRAM] int 
 11476 ;; Return value:  Size  Location     Type
 11477 ;;		None               void
 11478 ;; Registers used:
 11479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11480 ;; Tracked objects:
 11481 ;;		On entry : 0/0
 11482 ;;		On exit  : F/1
 11483 ;;		Unchanged: 0/0
 11484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11485 ;;      Params:         0       0       0       0       0       0       0
 11486 ;;      Locals:         7       0       0       0       0       0       0
 11487 ;;      Temps:          2       0       0       0       0       0       0
 11488 ;;      Totals:         9       0       0       0       0       0       0
 11489 ;;Total ram usage:        9 bytes
 11490 ;; Hardware stack levels used:    1
 11491 ;; Hardware stack levels required when called:    3
 11492 ;; This function calls:
 11493 ;;		_readEEPROM
 11494 ;;		___wmul
 11495 ;; This function is called by:
 11496 ;;		_vscp_writeAppReg
 11497 ;; This function uses a non-reentrant model
 11498 ;;
 11499                           
 11500                           	psect	text42
 11501  004E5A                     __ptext42:
 11502                           	opt stack 0
 11503  004E5A                     _writeCoeffs2Ram:
 11504                           	opt stack 24
 11505                           
 11506                           ;main.c: 970: int i, j;
 11507                           ;main.c: 971: uint8_t c[3];
 11508                           ;main.c: 973: for (i = 0; i < 6; i++) {
 11509                           
 11510                           ;incstack = 0
 11511                           ;incstack = 0
 11512  004E5A  6A1F               	clrf	writeCoeffs2Ram@i,c
 11513  004E5C  6A20               	clrf	writeCoeffs2Ram@i+1,c
 11514  004E5E                     l10517:
 11515                           
 11516                           ;main.c: 974: for (j = 2; j > 0; j--) {
 11517  004E5E  6A22               	clrf	writeCoeffs2Ram@j+1,c
 11518  004E60  0E02               	movlw	2
 11519  004E62  6E21               	movwf	writeCoeffs2Ram@j,c
 11520  004E64                     l10523:
 11521                           
 11522                           ;main.c: 976: c[2 - j] = readEEPROM(0xAA + i * 3 + j);
 11523  004E64  5021               	movf	writeCoeffs2Ram@j,w,c
 11524  004E66  0802               	sublw	2
 11525  004E68  6E1A               	movwf	??_writeCoeffs2Ram& (0+255),c
 11526  004E6A  501A               	movf	??_writeCoeffs2Ram,w,c
 11527  004E6C  0F1C               	addlw	low writeCoeffs2Ram@c
 11528  004E6E  6ED9               	movwf	fsr2l,c
 11529  004E70  6ADA               	clrf	fsr2h,c
 11530  004E72  C01F  F00E         	movff	writeCoeffs2Ram@i,?___wmul
 11531  004E76  C020  F00F         	movff	writeCoeffs2Ram@i+1,?___wmul+1
 11532  004E7A  6A11               	clrf	?___wmul+3,c
 11533  004E7C  0E03               	movlw	3
 11534  004E7E  6E10               	movwf	?___wmul+2,c
 11535  004E80  ECAE  F02B         	call	___wmul	;wreg free
 11536  004E84  5021               	movf	writeCoeffs2Ram@j,w,c
 11537  004E86  260E               	addwf	?___wmul,f,c
 11538  004E88  5022               	movf	writeCoeffs2Ram@j+1,w,c
 11539  004E8A  220F               	addwfc	?___wmul+1,f,c
 11540  004E8C  0EAA               	movlw	170
 11541  004E8E  240E               	addwf	?___wmul,w,c
 11542  004E90  6E16               	movwf	?_readEEPROM,c
 11543  004E92  0E00               	movlw	0
 11544  004E94  200F               	addwfc	?___wmul+1,w,c
 11545  004E96  6E17               	movwf	?_readEEPROM+1,c
 11546  004E98  ECD6  F02D         	call	_readEEPROM	;wreg free
 11547  004E9C  6EDF               	movwf	indf2,c
 11548  004E9E  0621               	decf	writeCoeffs2Ram@j,f,c
 11549  004EA0  A0D8               	btfss	status,0,c
 11550  004EA2  0622               	decf	writeCoeffs2Ram@j+1,f,c
 11551  004EA4  5022               	movf	writeCoeffs2Ram@j+1,w,c
 11552  004EA6  0A80               	xorlw	128
 11553  004EA8  0F80               	addlw	-128
 11554  004EAA  0E01               	movlw	1
 11555  004EAC  B4D8               	btfsc	status,2,c
 11556  004EAE  5C21               	subwf	writeCoeffs2Ram@j,w,c
 11557  004EB0  E2D9               	bc	l10523
 11558                           
 11559                           ;main.c: 977: }
 11560                           ;main.c: 978: sh_coefficients[i] = *((double*) c);
 11561  004EB2  C01F  F01A         	movff	writeCoeffs2Ram@i,??_writeCoeffs2Ram
 11562  004EB6  C020  F01B         	movff	writeCoeffs2Ram@i+1,??_writeCoeffs2Ram+1
 11563  004EBA  90D8               	bcf	status,0,c
 11564  004EBC  361A               	rlcf	??_writeCoeffs2Ram,f,c
 11565  004EBE  361B               	rlcf	??_writeCoeffs2Ram+1,f,c
 11566  004EC0  90D8               	bcf	status,0,c
 11567  004EC2  361A               	rlcf	??_writeCoeffs2Ram,f,c
 11568  004EC4  361B               	rlcf	??_writeCoeffs2Ram+1,f,c
 11569  004EC6  0101               	movlb	1	; () banked
 11570  004EC8  0E22               	movlw	low _sh_coefficients
 11571  004ECA  241A               	addwf	??_writeCoeffs2Ram,w,c
 11572  004ECC  6ED9               	movwf	fsr2l,c
 11573  004ECE  0E01               	movlw	high _sh_coefficients
 11574  004ED0  201B               	addwfc	??_writeCoeffs2Ram+1,w,c
 11575  004ED2  6EDA               	movwf	fsr2h,c
 11576  004ED4  C01C  FFDE         	movff	writeCoeffs2Ram@c,postinc2
 11577  004ED8  C01D  FFDE         	movff	writeCoeffs2Ram@c+1,postinc2
 11578  004EDC  C01E  FFDE         	movff	writeCoeffs2Ram@c+2,postinc2
 11579  004EE0  C01F  FFDE         	movff	writeCoeffs2Ram@c+3,postinc2
 11580                           
 11581                           ; BSR set to: 1
 11582  004EE4  4A1F               	infsnz	writeCoeffs2Ram@i,f,c
 11583  004EE6  2A20               	incf	writeCoeffs2Ram@i+1,f,c
 11584                           
 11585                           ; BSR set to: 1
 11586  004EE8  5020               	movf	writeCoeffs2Ram@i+1,w,c
 11587  004EEA  0A80               	xorlw	128
 11588  004EEC  0F80               	addlw	-128
 11589  004EEE  0E06               	movlw	6
 11590  004EF0  B4D8               	btfsc	status,2,c
 11591  004EF2  5C1F               	subwf	writeCoeffs2Ram@i,w,c
 11592  004EF4  B0D8               	btfsc	status,0,c
 11593                           
 11594                           ; BSR set to: 1
 11595  004EF6  0012               	return	
 11596  004EF8  D7B2               	goto	l10517
 11597  004EFA                     __end_of_writeCoeffs2Ram:
 11598                           	opt stack 0
 11599                           tblptru	equ	0xFF8
 11600                           tblptrh	equ	0xFF7
 11601                           tblptrl	equ	0xFF6
 11602                           tablat	equ	0xFF5
 11603                           prodh	equ	0xFF4
 11604                           prodl	equ	0xFF3
 11605                           postinc0	equ	0xFEE
 11606                           wreg	equ	0xFE8
 11607                           postdec1	equ	0xFE5
 11608                           fsr1h	equ	0xFE2
 11609                           fsr1l	equ	0xFE1
 11610                           indf2	equ	0xFDF
 11611                           postinc2	equ	0xFDE
 11612                           postdec2	equ	0xFDD
 11613                           fsr2h	equ	0xFDA
 11614                           fsr2l	equ	0xFD9
 11615                           status	equ	0xFD8
 11616                           
 11617 ;; *************** function ___wmul *****************
 11618 ;; Defined at:
 11619 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/common/wmul.c"
 11620 ;; Parameters:    Size  Location     Type
 11621 ;;  multiplier      2   13[COMRAM] unsigned int 
 11622 ;;  multiplicand    2   15[COMRAM] unsigned int 
 11623 ;; Auto vars:     Size  Location     Type
 11624 ;;  product         2   19[COMRAM] unsigned int 
 11625 ;; Return value:  Size  Location     Type
 11626 ;;                  2   13[COMRAM] unsigned int 
 11627 ;; Registers used:
 11628 ;;		wreg, status,2, status,0, prodl, prodh
 11629 ;; Tracked objects:
 11630 ;;		On entry : 0/1
 11631 ;;		On exit  : 0/0
 11632 ;;		Unchanged: 0/0
 11633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11634 ;;      Params:         4       0       0       0       0       0       0
 11635 ;;      Locals:         4       0       0       0       0       0       0
 11636 ;;      Temps:          0       0       0       0       0       0       0
 11637 ;;      Totals:         8       0       0       0       0       0       0
 11638 ;;Total ram usage:        8 bytes
 11639 ;; Hardware stack levels used:    1
 11640 ;; Hardware stack levels required when called:    2
 11641 ;; This function calls:
 11642 ;;		Nothing
 11643 ;; This function is called by:
 11644 ;;		_doOneSecondWork
 11645 ;;		_writeCoeffs2Ram
 11646 ;; This function uses a non-reentrant model
 11647 ;;
 11648                           
 11649                           	psect	text43
 11650  00575C                     __ptext43:
 11651                           	opt stack 0
 11652  00575C                     ___wmul:
 11653                           	opt stack 27
 11654                           
 11655                           ; BSR set to: 1
 11656                           ;incstack = 0
 11657                           ;incstack = 0
 11658  00575C  500E               	movf	___wmul@multiplier,w,c
 11659  00575E  0210               	mulwf	___wmul@multiplicand,c
 11660  005760  CFF3 F014          	movff	prodl,___wmul@product
 11661  005764  CFF4 F015          	movff	prodh,___wmul@product+1
 11662  005768  500E               	movf	___wmul@multiplier,w,c
 11663  00576A  0211               	mulwf	___wmul@multiplicand+1,c
 11664  00576C  CFF3 FFF4          	movff	prodl,prodh
 11665  005770  6AF3               	clrf	prodl,c
 11666  005772  50F3               	movf	prodl,w,c
 11667  005774  2614               	addwf	___wmul@product,f,c
 11668  005776  50F4               	movf	prodh,w,c
 11669  005778  2215               	addwfc	___wmul@product+1,f,c
 11670  00577A  500F               	movf	___wmul@multiplier+1,w,c
 11671  00577C  0210               	mulwf	___wmul@multiplicand,c
 11672  00577E  CFF3 FFF4          	movff	prodl,prodh
 11673  005782  6AF3               	clrf	prodl,c
 11674  005784  50F3               	movf	prodl,w,c
 11675  005786  2614               	addwf	___wmul@product,f,c
 11676  005788  50F4               	movf	prodh,w,c
 11677  00578A  2215               	addwfc	___wmul@product+1,f,c
 11678  00578C  C014  F00E         	movff	___wmul@product,?___wmul
 11679  005790  C015  F00F         	movff	___wmul@product+1,?___wmul+1
 11680  005794  0012               	return	
 11681  005796                     __end_of___wmul:
 11682                           	opt stack 0
 11683                           tblptru	equ	0xFF8
 11684                           tblptrh	equ	0xFF7
 11685                           tblptrl	equ	0xFF6
 11686                           tablat	equ	0xFF5
 11687                           prodh	equ	0xFF4
 11688                           prodl	equ	0xFF3
 11689                           postinc0	equ	0xFEE
 11690                           wreg	equ	0xFE8
 11691                           postdec1	equ	0xFE5
 11692                           fsr1h	equ	0xFE2
 11693                           fsr1l	equ	0xFE1
 11694                           indf2	equ	0xFDF
 11695                           postinc2	equ	0xFDE
 11696                           postdec2	equ	0xFDD
 11697                           fsr2h	equ	0xFDA
 11698                           fsr2l	equ	0xFD9
 11699                           status	equ	0xFD8
 11700                           
 11701 ;; *************** function _vscp_readRegister *****************
 11702 ;; Defined at:
 11703 ;;		line 550 in file "../../vscp_firmware/common/vscp_firmware.c"
 11704 ;; Parameters:    Size  Location     Type
 11705 ;;  reg             1    wreg     unsigned char 
 11706 ;; Auto vars:     Size  Location     Type
 11707 ;;  reg             1   43[COMRAM] unsigned char 
 11708 ;; Return value:  Size  Location     Type
 11709 ;;                  1    wreg      unsigned char 
 11710 ;; Registers used:
 11711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11712 ;; Tracked objects:
 11713 ;;		On entry : F/0
 11714 ;;		On exit  : 0/0
 11715 ;;		Unchanged: 0/0
 11716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11717 ;;      Params:         0       0       0       0       0       0       0
 11718 ;;      Locals:         1       0       0       0       0       0       0
 11719 ;;      Temps:          0       0       0       0       0       0       0
 11720 ;;      Totals:         1       0       0       0       0       0       0
 11721 ;;Total ram usage:        1 bytes
 11722 ;; Hardware stack levels used:    1
 11723 ;; Hardware stack levels required when called:    5
 11724 ;; This function calls:
 11725 ;;		_vscp_readAppReg
 11726 ;;		_vscp_readStdReg
 11727 ;; This function is called by:
 11728 ;;		_vscp_handleProtocolEvent
 11729 ;; This function uses a non-reentrant model
 11730 ;;
 11731                           
 11732                           	psect	text44
 11733  005ADC                     __ptext44:
 11734                           	opt stack 0
 11735  005ADC                     _vscp_readRegister:
 11736                           	opt stack 24
 11737                           
 11738                           ;incstack = 0
 11739                           ;incstack = 0
 11740                           ;vscp_readRegister@reg stored from wreg
 11741  005ADC  CFE8 F02C          	movff	wreg,vscp_readRegister@reg
 11742                           
 11743                           ; BSR set to: 0
 11744                           ;vscp_firmware.c: 551: if (reg >= 0x80) {
 11745  005AE0  0E7F               	movlw	127
 11746  005AE2  642C               	cpfsgt	vscp_readRegister@reg,c
 11747  005AE4  D004               	goto	l11197
 11748                           
 11749                           ; BSR set to: 0
 11750                           ;vscp_firmware.c: 552: return vscp_readStdReg(reg);
 11751  005AE6  502C               	movf	vscp_readRegister@reg,w,c
 11752  005AE8  EC2E  F01E         	call	_vscp_readStdReg
 11753  005AEC  D003               	goto	l1108
 11754  005AEE                     l11197:
 11755                           
 11756                           ; BSR set to: 0
 11757                           ;vscp_firmware.c: 554: else {
 11758                           ;vscp_firmware.c: 555: return vscp_readAppReg(reg);
 11759  005AEE  502C               	movf	vscp_readRegister@reg,w,c
 11760  005AF0  EC27  F010         	call	_vscp_readAppReg
 11761  005AF4                     l1108:
 11762  005AF4  0012               	return	
 11763  005AF6                     __end_of_vscp_readRegister:
 11764                           	opt stack 0
 11765                           tblptru	equ	0xFF8
 11766                           tblptrh	equ	0xFF7
 11767                           tblptrl	equ	0xFF6
 11768                           tablat	equ	0xFF5
 11769                           prodh	equ	0xFF4
 11770                           prodl	equ	0xFF3
 11771                           postinc0	equ	0xFEE
 11772                           wreg	equ	0xFE8
 11773                           postdec1	equ	0xFE5
 11774                           fsr1h	equ	0xFE2
 11775                           fsr1l	equ	0xFE1
 11776                           indf2	equ	0xFDF
 11777                           postinc2	equ	0xFDE
 11778                           postdec2	equ	0xFDD
 11779                           fsr2h	equ	0xFDA
 11780                           fsr2l	equ	0xFD9
 11781                           status	equ	0xFD8
 11782                           
 11783 ;; *************** function _vscp_readStdReg *****************
 11784 ;; Defined at:
 11785 ;;		line 564 in file "../../vscp_firmware/common/vscp_firmware.c"
 11786 ;; Parameters:    Size  Location     Type
 11787 ;;  reg             1    wreg     unsigned char 
 11788 ;; Auto vars:     Size  Location     Type
 11789 ;;  reg             1   42[COMRAM] unsigned char 
 11790 ;;  code            4   35[COMRAM] unsigned long 
 11791 ;;  idx             1   40[COMRAM] unsigned char 
 11792 ;;  code            4   31[COMRAM] unsigned long 
 11793 ;;  idx             1   39[COMRAM] unsigned char 
 11794 ;;  rv              1   41[COMRAM] unsigned char 
 11795 ;; Return value:  Size  Location     Type
 11796 ;;                  1    wreg      unsigned char 
 11797 ;; Registers used:
 11798 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11799 ;; Tracked objects:
 11800 ;;		On entry : F/0
 11801 ;;		On exit  : 0/0
 11802 ;;		Unchanged: 0/0
 11803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11804 ;;      Params:         0       0       0       0       0       0       0
 11805 ;;      Locals:        12       0       0       0       0       0       0
 11806 ;;      Temps:          5       0       0       0       0       0       0
 11807 ;;      Totals:        17       0       0       0       0       0       0
 11808 ;;Total ram usage:       17 bytes
 11809 ;; Hardware stack levels used:    1
 11810 ;; Hardware stack levels required when called:    4
 11811 ;; This function calls:
 11812 ;;		_vscp_getMajorVersion
 11813 ;;		_vscp_getMinorVersion
 11814 ;;		_vscp_getSubMinorVersion
 11815 ;;		_vscp_getGUID
 11816 ;;		_vscp_getMDF_URL
 11817 ;;		_vscp_getUserID
 11818 ;;		_vscp_getManufacturerId
 11819 ;;		_vscp_getBootLoaderAlgorithm
 11820 ;;		_vscp_getBufferSize
 11821 ;;		_vscp_getRegisterPagesUsed
 11822 ;;		_vscp_getFamilyCode
 11823 ;;		_vscp_getFamilyType
 11824 ;; This function is called by:
 11825 ;;		_vscp_readRegister
 11826 ;;		_vscp_handleProtocolEvent
 11827 ;; This function uses a non-reentrant model
 11828 ;;
 11829                           
 11830                           	psect	text45
 11831  003C5C                     __ptext45:
 11832                           	opt stack 0
 11833  003C5C                     _vscp_readStdReg:
 11834                           	opt stack 25
 11835                           
 11836                           ;incstack = 0
 11837                           ;incstack = 0
 11838                           ;vscp_readStdReg@reg stored from wreg
 11839  003C5C  CFE8 F02B          	movff	wreg,vscp_readStdReg@reg
 11840                           
 11841                           ; BSR set to: 0
 11842                           ;vscp_firmware.c: 565: uint8_t rv = 0;
 11843  003C60  6A2A               	clrf	vscp_readStdReg@rv,c
 11844                           
 11845                           ; BSR set to: 0
 11846                           ;vscp_firmware.c: 567: if (0x80 == reg) {
 11847  003C62  502B               	movf	vscp_readStdReg@reg,w,c
 11848  003C64  0A80               	xorlw	128
 11849  003C66  E104               	bnz	l11207
 11850                           
 11851                           ; BSR set to: 0
 11852                           ;vscp_firmware.c: 570: rv = vscp_alarmstatus;
 11853  003C68  C04A  F02A         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 11854                           
 11855                           ;vscp_firmware.c: 571: vscp_alarmstatus = 0x00;
 11856  003C6C  6A4A               	clrf	_vscp_alarmstatus,c
 11857                           
 11858                           ;vscp_firmware.c: 573: }
 11859  003C6E  D0CC               	goto	l11295
 11860  003C70                     l11207:
 11861                           
 11862                           ; BSR set to: 0
 11863                           ;vscp_firmware.c: 574: else if (0x81 == reg) {
 11864  003C70  502B               	movf	vscp_readStdReg@reg,w,c
 11865  003C72  0A81               	xorlw	129
 11866  003C74  E102               	bnz	l11211
 11867                           
 11868                           ; BSR set to: 0
 11869                           ;vscp_firmware.c: 577: rv = 1;
 11870  003C76  0E01               	movlw	1
 11871  003C78  D082               	goto	L31
 11872  003C7A                     l11211:
 11873                           
 11874                           ; BSR set to: 0
 11875                           ;vscp_firmware.c: 580: else if (0x82 == reg) {
 11876  003C7A  502B               	movf	vscp_readStdReg@reg,w,c
 11877  003C7C  0A82               	xorlw	130
 11878  003C7E  E102               	bnz	l11215
 11879                           
 11880                           ; BSR set to: 0
 11881                           ;vscp_firmware.c: 583: rv = 6;
 11882  003C80  0E06               	movlw	6
 11883  003C82  D07D               	goto	L31
 11884  003C84                     l11215:
 11885                           
 11886                           ; BSR set to: 0
 11887                           ;vscp_firmware.c: 586: else if (0x83 == reg) {
 11888  003C84  502B               	movf	vscp_readStdReg@reg,w,c
 11889  003C86  0A83               	xorlw	131
 11890  003C88  E103               	bnz	l11219
 11891                           
 11892                           ; BSR set to: 0
 11893                           ;vscp_firmware.c: 589: rv = vscp_errorcnt;
 11894  003C8A  C04B  F02A         	movff	_vscp_errorcnt,vscp_readStdReg@rv
 11895                           
 11896                           ;vscp_firmware.c: 591: }
 11897  003C8E  D0BC               	goto	l11295
 11898  003C90                     l11219:
 11899                           
 11900                           ; BSR set to: 0
 11901                           ;vscp_firmware.c: 592: else if (0x94 == reg) {
 11902  003C90  502B               	movf	vscp_readStdReg@reg,w,c
 11903  003C92  0A94               	xorlw	148
 11904  003C94  E103               	bnz	l11223
 11905                           
 11906                           ; BSR set to: 0
 11907                           ;vscp_firmware.c: 595: rv = vscp_getMajorVersion();
 11908  003C96  EC25  F02E         	call	_vscp_getMajorVersion	;wreg free
 11909  003C9A  D071               	goto	L31
 11910  003C9C                     l11223:
 11911                           
 11912                           ; BSR set to: 0
 11913                           ;vscp_firmware.c: 598: else if (0x95 == reg) {
 11914  003C9C  502B               	movf	vscp_readStdReg@reg,w,c
 11915  003C9E  0A95               	xorlw	149
 11916  003CA0  E103               	bnz	l11227
 11917                           
 11918                           ; BSR set to: 0
 11919                           ;vscp_firmware.c: 601: rv = vscp_getMinorVersion();
 11920  003CA2  EC24  F02E         	call	_vscp_getMinorVersion	;wreg free
 11921  003CA6  D06B               	goto	L31
 11922  003CA8                     l11227:
 11923                           
 11924                           ; BSR set to: 0
 11925                           ;vscp_firmware.c: 604: else if (0x96 == reg) {
 11926  003CA8  502B               	movf	vscp_readStdReg@reg,w,c
 11927  003CAA  0A96               	xorlw	150
 11928  003CAC  E103               	bnz	l11231
 11929                           
 11930                           ; BSR set to: 0
 11931                           ;vscp_firmware.c: 607: rv = vscp_getSubMinorVersion();
 11932  003CAE  EC23  F02E         	call	_vscp_getSubMinorVersion	;wreg free
 11933  003CB2  D065               	goto	L31
 11934  003CB4                     l11231:
 11935                           
 11936                           ; BSR set to: 0
 11937                           ;vscp_firmware.c: 610: else if (reg < 0x89) {
 11938  003CB4  0E89               	movlw	137
 11939  003CB6  602B               	cpfslt	vscp_readStdReg@reg,c
 11940  003CB8  D005               	goto	l11235
 11941                           
 11942                           ; BSR set to: 0
 11943                           ;vscp_firmware.c: 613: rv = vscp_getUserID(reg - 0x84);
 11944  003CBA  502B               	movf	vscp_readStdReg@reg,w,c
 11945  003CBC  0F7C               	addlw	124
 11946  003CBE  ECC2  F02D         	call	_vscp_getUserID
 11947  003CC2  D05D               	goto	L31
 11948  003CC4                     l11235:
 11949                           
 11950                           ; BSR set to: 0
 11951                           ;vscp_firmware.c: 616: else if ((reg > 0x88) &&
 11952                           ;vscp_firmware.c: 617: (reg < 0x91)) {
 11953  003CC4  0E88               	movlw	136
 11954  003CC6  642B               	cpfsgt	vscp_readStdReg@reg,c
 11955  003CC8  D008               	goto	l11241
 11956                           
 11957                           ; BSR set to: 0
 11958  003CCA  0E91               	movlw	145
 11959  003CCC  602B               	cpfslt	vscp_readStdReg@reg,c
 11960  003CCE  D005               	goto	l11241
 11961                           
 11962                           ; BSR set to: 0
 11963                           ;vscp_firmware.c: 620: rv = vscp_getManufacturerId(reg - 0x89);
 11964  003CD0  502B               	movf	vscp_readStdReg@reg,w,c
 11965  003CD2  0F77               	addlw	119
 11966  003CD4  ECB8  F02D         	call	_vscp_getManufacturerId
 11967  003CD8  D052               	goto	L31
 11968  003CDA                     l11241:
 11969                           
 11970                           ; BSR set to: 0
 11971                           ;vscp_firmware.c: 623: else if (0x91 == reg) {
 11972  003CDA  502B               	movf	vscp_readStdReg@reg,w,c
 11973  003CDC  0A91               	xorlw	145
 11974  003CDE  E103               	bnz	l11245
 11975                           
 11976                           ; BSR set to: 0
 11977                           ;vscp_firmware.c: 626: rv = vscp_nickname;
 11978  003CE0  C0BB  F02A         	movff	_vscp_nickname,vscp_readStdReg@rv
 11979                           
 11980                           ;vscp_firmware.c: 628: }
 11981  003CE4  D091               	goto	l11295
 11982  003CE6                     l11245:
 11983                           
 11984                           ; BSR set to: 0
 11985                           ;vscp_firmware.c: 629: else if (0x93 == reg) {
 11986  003CE6  502B               	movf	vscp_readStdReg@reg,w,c
 11987  003CE8  0A93               	xorlw	147
 11988  003CEA  E103               	bnz	l11249
 11989                           
 11990                           ; BSR set to: 0
 11991                           ;vscp_firmware.c: 632: rv = (vscp_page_select & 0xff);
 11992  003CEC  C046  F02A         	movff	_vscp_page_select,vscp_readStdReg@rv
 11993                           
 11994                           ;vscp_firmware.c: 634: }
 11995  003CF0  D08B               	goto	l11295
 11996  003CF2                     l11249:
 11997                           
 11998                           ; BSR set to: 0
 11999                           ;vscp_firmware.c: 636: else if (0x92 == reg) {
 12000  003CF2  502B               	movf	vscp_readStdReg@reg,w,c
 12001  003CF4  0A92               	xorlw	146
 12002  003CF6  E102               	bnz	l11253
 12003                           
 12004                           ; BSR set to: 0
 12005                           ;vscp_firmware.c: 639: rv = (vscp_page_select >> 8) & 0xff;
 12006  003CF8  5047               	movf	_vscp_page_select+1,w,c
 12007  003CFA  D041               	goto	L31
 12008  003CFC                     l11253:
 12009                           
 12010                           ; BSR set to: 0
 12011                           ;vscp_firmware.c: 642: else if (0x97 == reg) {
 12012  003CFC  502B               	movf	vscp_readStdReg@reg,w,c
 12013  003CFE  0A97               	xorlw	151
 12014  003D00  E103               	bnz	l11257
 12015                           
 12016                           ; BSR set to: 0
 12017                           ;vscp_firmware.c: 644: rv = vscp_getBootLoaderAlgorithm();
 12018  003D02  EC22  F02E         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 12019  003D06  D03B               	goto	L31
 12020  003D08                     l11257:
 12021                           
 12022                           ; BSR set to: 0
 12023                           ;vscp_firmware.c: 646: else if (0x98 == reg) {
 12024  003D08  502B               	movf	vscp_readStdReg@reg,w,c
 12025  003D0A  0A98               	xorlw	152
 12026  003D0C  E103               	bnz	l11261
 12027                           
 12028                           ; BSR set to: 0
 12029                           ;vscp_firmware.c: 648: rv = vscp_getBufferSize();
 12030  003D0E  EC21  F02E         	call	_vscp_getBufferSize	;wreg free
 12031  003D12  D035               	goto	L31
 12032  003D14                     l11261:
 12033                           
 12034                           ; BSR set to: 0
 12035                           ;vscp_firmware.c: 650: else if (0x99 == reg) {
 12036  003D14  502B               	movf	vscp_readStdReg@reg,w,c
 12037  003D16  0A99               	xorlw	153
 12038  003D18  E103               	bnz	l11265
 12039                           
 12040                           ; BSR set to: 0
 12041                           ;vscp_firmware.c: 652: rv = vscp_getRegisterPagesUsed();
 12042  003D1A  EC20  F02E         	call	_vscp_getRegisterPagesUsed	;wreg free
 12043  003D1E  D02F               	goto	L31
 12044  003D20                     l11265:
 12045                           
 12046                           ; BSR set to: 0
 12047                           ;vscp_firmware.c: 654: else if ( ( reg >= 0x9A ) &&
 12048                           ;vscp_firmware.c: 655: ( reg < ( 0x9A + 4 ) ) ) {
 12049  003D20  0E99               	movlw	153
 12050  003D22  642B               	cpfsgt	vscp_readStdReg@reg,c
 12051  003D24  D02E               	goto	l11275
 12052                           
 12053                           ; BSR set to: 0
 12054  003D26  0E9E               	movlw	158
 12055  003D28  602B               	cpfslt	vscp_readStdReg@reg,c
 12056  003D2A  D02B               	goto	l11275
 12057                           
 12058                           ; BSR set to: 0
 12059                           ;vscp_firmware.c: 657: uint32_t code = vscp_getFamilyCode();
 12060  003D2C  EC0A  F02E         	call	_vscp_getFamilyCode	;wreg free
 12061  003D30  C011  F023         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 12062  003D34  C010  F022         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 12063  003D38  C00F  F021         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 12064  003D3C  C00E  F020         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 12065                           
 12066                           ; BSR set to: 0
 12067                           ;vscp_firmware.c: 658: uint8_t idx = reg - 0x9A;
 12068  003D40  502B               	movf	vscp_readStdReg@reg,w,c
 12069  003D42  0F66               	addlw	102
 12070  003D44  6E28               	movwf	vscp_readStdReg@idx,c
 12071                           
 12072                           ; BSR set to: 0
 12073                           ;vscp_firmware.c: 659: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 12074  003D46  5028               	movf	vscp_readStdReg@idx,w,c
 12075  003D48  0803               	sublw	3
 12076  003D4A  6E1B               	movwf	??_vscp_readStdReg& (0+255),c
 12077  003D4C  90D8               	bcf	status,0,c
 12078  003D4E  361B               	rlcf	??_vscp_readStdReg,f,c
 12079  003D50  90D8               	bcf	status,0,c
 12080  003D52  361B               	rlcf	??_vscp_readStdReg,f,c
 12081  003D54  90D8               	bcf	status,0,c
 12082  003D56  361B               	rlcf	??_vscp_readStdReg,f,c
 12083  003D58  501B               	movf	??_vscp_readStdReg,w,c
 12084  003D5A  C020  F01C         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 12085  003D5E  C021  F01D         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 12086  003D62  C022  F01E         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 12087  003D66  C023  F01F         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 12088  003D6A  2AE8               	incf	wreg,f,c
 12089  003D6C  D005               	goto	u9410
 12090  003D6E                     u9415:
 12091  003D6E  90D8               	bcf	status,0,c
 12092  003D70  321F               	rrcf	??_vscp_readStdReg+4,f,c
 12093  003D72  321E               	rrcf	??_vscp_readStdReg+3,f,c
 12094  003D74  321D               	rrcf	??_vscp_readStdReg+2,f,c
 12095  003D76  321C               	rrcf	??_vscp_readStdReg+1,f,c
 12096  003D78                     u9410:
 12097  003D78  2EE8               	decfsz	wreg,f,c
 12098  003D7A  D7F9               	goto	u9415
 12099  003D7C  D030               	goto	L32
 12100  003D7E                     L31:
 12101  003D7E  6E2A               	movwf	vscp_readStdReg@rv,c
 12102                           
 12103                           ;vscp_firmware.c: 660: }
 12104  003D80  D043               	goto	l11295
 12105  003D82                     l11275:
 12106                           
 12107                           ; BSR set to: 0
 12108                           ;vscp_firmware.c: 661: else if ( ( reg >= 0x9E ) &&
 12109                           ;vscp_firmware.c: 662: ( reg < ( 0x9E + 4 ) ) ) {
 12110  003D82  0E9D               	movlw	157
 12111  003D84  642B               	cpfsgt	vscp_readStdReg@reg,c
 12112  003D86  D02D               	goto	l11285
 12113                           
 12114                           ; BSR set to: 0
 12115  003D88  0EA2               	movlw	162
 12116  003D8A  602B               	cpfslt	vscp_readStdReg@reg,c
 12117  003D8C  D02A               	goto	l11285
 12118                           
 12119                           ; BSR set to: 0
 12120                           ;vscp_firmware.c: 664: uint32_t code = vscp_getFamilyType();
 12121  003D8E  EC05  F02E         	call	_vscp_getFamilyType	;wreg free
 12122  003D92  C011  F027         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1139+3
 12123  003D96  C010  F026         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1139+2
 12124  003D9A  C00F  F025         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1139+1
 12125  003D9E  C00E  F024         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1139
 12126                           
 12127                           ; BSR set to: 0
 12128                           ;vscp_firmware.c: 665: uint8_t idx = reg - 0x9E;
 12129  003DA2  502B               	movf	vscp_readStdReg@reg,w,c
 12130  003DA4  0F62               	addlw	98
 12131  003DA6  6E29               	movwf	vscp_readStdReg@idx_1140,c
 12132                           
 12133                           ; BSR set to: 0
 12134                           ;vscp_firmware.c: 666: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 12135  003DA8  5029               	movf	vscp_readStdReg@idx_1140,w,c
 12136  003DAA  0803               	sublw	3
 12137  003DAC  6E1B               	movwf	??_vscp_readStdReg& (0+255),c
 12138  003DAE  90D8               	bcf	status,0,c
 12139  003DB0  361B               	rlcf	??_vscp_readStdReg,f,c
 12140  003DB2  90D8               	bcf	status,0,c
 12141  003DB4  361B               	rlcf	??_vscp_readStdReg,f,c
 12142  003DB6  90D8               	bcf	status,0,c
 12143  003DB8  361B               	rlcf	??_vscp_readStdReg,f,c
 12144  003DBA  501B               	movf	??_vscp_readStdReg,w,c
 12145  003DBC  C024  F01C         	movff	vscp_readStdReg@code_1139,??_vscp_readStdReg+1
 12146  003DC0  C025  F01D         	movff	vscp_readStdReg@code_1139+1,??_vscp_readStdReg+2
 12147  003DC4  C026  F01E         	movff	vscp_readStdReg@code_1139+2,??_vscp_readStdReg+3
 12148  003DC8  C027  F01F         	movff	vscp_readStdReg@code_1139+3,??_vscp_readStdReg+4
 12149  003DCC  2AE8               	incf	wreg,f,c
 12150  003DCE  D005               	goto	u9440
 12151  003DD0                     u9445:
 12152  003DD0  90D8               	bcf	status,0,c
 12153  003DD2  321F               	rrcf	??_vscp_readStdReg+4,f,c
 12154  003DD4  321E               	rrcf	??_vscp_readStdReg+3,f,c
 12155  003DD6  321D               	rrcf	??_vscp_readStdReg+2,f,c
 12156  003DD8  321C               	rrcf	??_vscp_readStdReg+1,f,c
 12157  003DDA                     u9440:
 12158  003DDA  2EE8               	decfsz	wreg,f,c
 12159  003DDC  D7F9               	goto	u9445
 12160  003DDE                     L32:
 12161  003DDE  501C               	movf	??_vscp_readStdReg+1,w,c
 12162  003DE0  D7CE               	goto	L31
 12163  003DE2                     l11285:
 12164                           
 12165                           ; BSR set to: 0
 12166                           ;vscp_firmware.c: 668: else if ((reg > (0xD0 - 1)) &&
 12167                           ;vscp_firmware.c: 669: (reg < 0xE0)) {
 12168  003DE2  0ECF               	movlw	207
 12169  003DE4  642B               	cpfsgt	vscp_readStdReg@reg,c
 12170  003DE6  D008               	goto	l11291
 12171                           
 12172                           ; BSR set to: 0
 12173  003DE8  0EE0               	movlw	224
 12174  003DEA  602B               	cpfslt	vscp_readStdReg@reg,c
 12175  003DEC  D005               	goto	l11291
 12176                           
 12177                           ; BSR set to: 0
 12178                           ;vscp_firmware.c: 672: rv = vscp_getGUID(reg - 0xD0);
 12179  003DEE  502B               	movf	vscp_readStdReg@reg,w,c
 12180  003DF0  0F30               	addlw	48
 12181  003DF2  ECCC  F02D         	call	_vscp_getGUID
 12182  003DF6  D7C3               	goto	L31
 12183  003DF8                     l11291:
 12184                           
 12185                           ; BSR set to: 0
 12186                           ;vscp_firmware.c: 675: else if ( reg >= 0xE0 ) {
 12187  003DF8  0EDF               	movlw	223
 12188  003DFA  642B               	cpfsgt	vscp_readStdReg@reg,c
 12189  003DFC  D005               	goto	l11295
 12190                           
 12191                           ; BSR set to: 0
 12192                           ;vscp_firmware.c: 678: rv = vscp_getMDF_URL(reg - 0xE0);
 12193  003DFE  502B               	movf	vscp_readStdReg@reg,w,c
 12194  003E00  0F20               	addlw	32
 12195  003E02  ECA0  F02D         	call	_vscp_getMDF_URL
 12196  003E06  D7BB               	goto	L31
 12197  003E08                     l11295:
 12198                           
 12199                           ;vscp_firmware.c: 680: }
 12200                           ;vscp_firmware.c: 682: return rv;
 12201  003E08  502A               	movf	vscp_readStdReg@rv,w,c
 12202  003E0A  0012               	return	
 12203  003E0C                     __end_of_vscp_readStdReg:
 12204                           	opt stack 0
 12205                           tblptru	equ	0xFF8
 12206                           tblptrh	equ	0xFF7
 12207                           tblptrl	equ	0xFF6
 12208                           tablat	equ	0xFF5
 12209                           prodh	equ	0xFF4
 12210                           prodl	equ	0xFF3
 12211                           postinc0	equ	0xFEE
 12212                           wreg	equ	0xFE8
 12213                           postdec1	equ	0xFE5
 12214                           fsr1h	equ	0xFE2
 12215                           fsr1l	equ	0xFE1
 12216                           indf2	equ	0xFDF
 12217                           postinc2	equ	0xFDE
 12218                           postdec2	equ	0xFDD
 12219                           fsr2h	equ	0xFDA
 12220                           fsr2l	equ	0xFD9
 12221                           status	equ	0xFD8
 12222                           
 12223 ;; *************** function _vscp_getFamilyType *****************
 12224 ;; Defined at:
 12225 ;;		line 2847 in file "../main.c"
 12226 ;; Parameters:    Size  Location     Type
 12227 ;;		None
 12228 ;; Auto vars:     Size  Location     Type
 12229 ;;		None
 12230 ;; Return value:  Size  Location     Type
 12231 ;;                  4   13[COMRAM] unsigned long 
 12232 ;; Registers used:
 12233 ;;		None
 12234 ;; Tracked objects:
 12235 ;;		On entry : F/0
 12236 ;;		On exit  : F/0
 12237 ;;		Unchanged: F/0
 12238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12239 ;;      Params:         4       0       0       0       0       0       0
 12240 ;;      Locals:         0       0       0       0       0       0       0
 12241 ;;      Temps:          0       0       0       0       0       0       0
 12242 ;;      Totals:         4       0       0       0       0       0       0
 12243 ;;Total ram usage:        4 bytes
 12244 ;; Hardware stack levels used:    1
 12245 ;; Hardware stack levels required when called:    2
 12246 ;; This function calls:
 12247 ;;		Nothing
 12248 ;; This function is called by:
 12249 ;;		_vscp_readStdReg
 12250 ;; This function uses a non-reentrant model
 12251 ;;
 12252                           
 12253                           	psect	text46
 12254  005C0A                     __ptext46:
 12255                           	opt stack 0
 12256  005C0A                     _vscp_getFamilyType:
 12257                           	opt stack 26
 12258                           
 12259                           ; BSR set to: 0
 12260                           ;main.c: 2848: return 0;
 12261                           
 12262                           ;incstack = 0
 12263                           ;incstack = 0
 12264  005C0A  6A0E               	clrf	?_vscp_getFamilyType,c
 12265  005C0C  6A0F               	clrf	?_vscp_getFamilyType+1,c
 12266  005C0E  6A10               	clrf	?_vscp_getFamilyType+2,c
 12267  005C10  6A11               	clrf	?_vscp_getFamilyType+3,c
 12268                           
 12269                           ; BSR set to: 0
 12270  005C12  0012               	return	
 12271  005C14                     __end_of_vscp_getFamilyType:
 12272                           	opt stack 0
 12273                           tblptru	equ	0xFF8
 12274                           tblptrh	equ	0xFF7
 12275                           tblptrl	equ	0xFF6
 12276                           tablat	equ	0xFF5
 12277                           prodh	equ	0xFF4
 12278                           prodl	equ	0xFF3
 12279                           postinc0	equ	0xFEE
 12280                           wreg	equ	0xFE8
 12281                           postdec1	equ	0xFE5
 12282                           fsr1h	equ	0xFE2
 12283                           fsr1l	equ	0xFE1
 12284                           indf2	equ	0xFDF
 12285                           postinc2	equ	0xFDE
 12286                           postdec2	equ	0xFDD
 12287                           fsr2h	equ	0xFDA
 12288                           fsr2l	equ	0xFD9
 12289                           status	equ	0xFD8
 12290                           
 12291 ;; *************** function _vscp_getFamilyCode *****************
 12292 ;; Defined at:
 12293 ;;		line 2837 in file "../main.c"
 12294 ;; Parameters:    Size  Location     Type
 12295 ;;		None
 12296 ;; Auto vars:     Size  Location     Type
 12297 ;;		None
 12298 ;; Return value:  Size  Location     Type
 12299 ;;                  4   13[COMRAM] unsigned long 
 12300 ;; Registers used:
 12301 ;;		None
 12302 ;; Tracked objects:
 12303 ;;		On entry : F/0
 12304 ;;		On exit  : F/0
 12305 ;;		Unchanged: F/0
 12306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12307 ;;      Params:         4       0       0       0       0       0       0
 12308 ;;      Locals:         0       0       0       0       0       0       0
 12309 ;;      Temps:          0       0       0       0       0       0       0
 12310 ;;      Totals:         4       0       0       0       0       0       0
 12311 ;;Total ram usage:        4 bytes
 12312 ;; Hardware stack levels used:    1
 12313 ;; Hardware stack levels required when called:    2
 12314 ;; This function calls:
 12315 ;;		Nothing
 12316 ;; This function is called by:
 12317 ;;		_vscp_readStdReg
 12318 ;; This function uses a non-reentrant model
 12319 ;;
 12320                           
 12321                           	psect	text47
 12322  005C14                     __ptext47:
 12323                           	opt stack 0
 12324  005C14                     _vscp_getFamilyCode:
 12325                           	opt stack 26
 12326                           
 12327                           ; BSR set to: 0
 12328                           ;main.c: 2838: return 0L;
 12329                           
 12330                           ; BSR set to: 0
 12331                           ;incstack = 0
 12332                           ;incstack = 0
 12333  005C14  6A0E               	clrf	?_vscp_getFamilyCode,c
 12334  005C16  6A0F               	clrf	?_vscp_getFamilyCode+1,c
 12335  005C18  6A10               	clrf	?_vscp_getFamilyCode+2,c
 12336  005C1A  6A11               	clrf	?_vscp_getFamilyCode+3,c
 12337                           
 12338                           ; BSR set to: 0
 12339  005C1C  0012               	return	
 12340  005C1E                     __end_of_vscp_getFamilyCode:
 12341                           	opt stack 0
 12342                           tblptru	equ	0xFF8
 12343                           tblptrh	equ	0xFF7
 12344                           tblptrl	equ	0xFF6
 12345                           tablat	equ	0xFF5
 12346                           prodh	equ	0xFF4
 12347                           prodl	equ	0xFF3
 12348                           postinc0	equ	0xFEE
 12349                           wreg	equ	0xFE8
 12350                           postdec1	equ	0xFE5
 12351                           fsr1h	equ	0xFE2
 12352                           fsr1l	equ	0xFE1
 12353                           indf2	equ	0xFDF
 12354                           postinc2	equ	0xFDE
 12355                           postdec2	equ	0xFDD
 12356                           fsr2h	equ	0xFDA
 12357                           fsr2l	equ	0xFD9
 12358                           status	equ	0xFD8
 12359                           
 12360 ;; *************** function _vscp_getRegisterPagesUsed *****************
 12361 ;; Defined at:
 12362 ;;		line 2725 in file "../main.c"
 12363 ;; Parameters:    Size  Location     Type
 12364 ;;		None
 12365 ;; Auto vars:     Size  Location     Type
 12366 ;;		None
 12367 ;; Return value:  Size  Location     Type
 12368 ;;                  1    wreg      unsigned char 
 12369 ;; Registers used:
 12370 ;;		wreg
 12371 ;; Tracked objects:
 12372 ;;		On entry : F/0
 12373 ;;		On exit  : F/0
 12374 ;;		Unchanged: F/0
 12375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12376 ;;      Params:         0       0       0       0       0       0       0
 12377 ;;      Locals:         0       0       0       0       0       0       0
 12378 ;;      Temps:          0       0       0       0       0       0       0
 12379 ;;      Totals:         0       0       0       0       0       0       0
 12380 ;;Total ram usage:        0 bytes
 12381 ;; Hardware stack levels used:    1
 12382 ;; Hardware stack levels required when called:    2
 12383 ;; This function calls:
 12384 ;;		Nothing
 12385 ;; This function is called by:
 12386 ;;		_vscp_readStdReg
 12387 ;; This function uses a non-reentrant model
 12388 ;;
 12389                           
 12390                           	psect	text48
 12391  005C40                     __ptext48:
 12392                           	opt stack 0
 12393  005C40                     _vscp_getRegisterPagesUsed:
 12394                           	opt stack 26
 12395                           
 12396                           ; BSR set to: 0
 12397                           
 12398                           ; BSR set to: 0
 12399                           ;main.c: 2726: return 1;
 12400                           
 12401                           ; BSR set to: 0
 12402                           ;incstack = 0
 12403                           ;incstack = 0
 12404  005C40  0C01               	retlw	1
 12405  005C42                     __end_of_vscp_getRegisterPagesUsed:
 12406                           	opt stack 0
 12407                           tblptru	equ	0xFF8
 12408                           tblptrh	equ	0xFF7
 12409                           tblptrl	equ	0xFF6
 12410                           tablat	equ	0xFF5
 12411                           prodh	equ	0xFF4
 12412                           prodl	equ	0xFF3
 12413                           postinc0	equ	0xFEE
 12414                           wreg	equ	0xFE8
 12415                           postdec1	equ	0xFE5
 12416                           fsr1h	equ	0xFE2
 12417                           fsr1l	equ	0xFE1
 12418                           indf2	equ	0xFDF
 12419                           postinc2	equ	0xFDE
 12420                           postdec2	equ	0xFDD
 12421                           fsr2h	equ	0xFDA
 12422                           fsr2l	equ	0xFD9
 12423                           status	equ	0xFD8
 12424                           
 12425 ;; *************** function _vscp_getBufferSize *****************
 12426 ;; Defined at:
 12427 ;;		line 2678 in file "../main.c"
 12428 ;; Parameters:    Size  Location     Type
 12429 ;;		None
 12430 ;; Auto vars:     Size  Location     Type
 12431 ;;		None
 12432 ;; Return value:  Size  Location     Type
 12433 ;;                  1    wreg      unsigned char 
 12434 ;; Registers used:
 12435 ;;		wreg
 12436 ;; Tracked objects:
 12437 ;;		On entry : F/0
 12438 ;;		On exit  : F/0
 12439 ;;		Unchanged: F/0
 12440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12441 ;;      Params:         0       0       0       0       0       0       0
 12442 ;;      Locals:         0       0       0       0       0       0       0
 12443 ;;      Temps:          0       0       0       0       0       0       0
 12444 ;;      Totals:         0       0       0       0       0       0       0
 12445 ;;Total ram usage:        0 bytes
 12446 ;; Hardware stack levels used:    1
 12447 ;; Hardware stack levels required when called:    2
 12448 ;; This function calls:
 12449 ;;		Nothing
 12450 ;; This function is called by:
 12451 ;;		_vscp_readStdReg
 12452 ;; This function uses a non-reentrant model
 12453 ;;
 12454                           
 12455                           	psect	text49
 12456  005C42                     __ptext49:
 12457                           	opt stack 0
 12458  005C42                     _vscp_getBufferSize:
 12459                           	opt stack 26
 12460                           
 12461                           ; BSR set to: 0
 12462                           
 12463                           ; BSR set to: 0
 12464                           ;main.c: 2679: return 8;
 12465                           
 12466                           ; BSR set to: 0
 12467                           ;incstack = 0
 12468                           ;incstack = 0
 12469  005C42  0C08               	retlw	8
 12470  005C44                     __end_of_vscp_getBufferSize:
 12471                           	opt stack 0
 12472                           tblptru	equ	0xFF8
 12473                           tblptrh	equ	0xFF7
 12474                           tblptrl	equ	0xFF6
 12475                           tablat	equ	0xFF5
 12476                           prodh	equ	0xFF4
 12477                           prodl	equ	0xFF3
 12478                           postinc0	equ	0xFEE
 12479                           wreg	equ	0xFE8
 12480                           postdec1	equ	0xFE5
 12481                           fsr1h	equ	0xFE2
 12482                           fsr1l	equ	0xFE1
 12483                           indf2	equ	0xFDF
 12484                           postinc2	equ	0xFDE
 12485                           postdec2	equ	0xFDD
 12486                           fsr2h	equ	0xFDA
 12487                           fsr2l	equ	0xFD9
 12488                           status	equ	0xFD8
 12489                           
 12490 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 12491 ;; Defined at:
 12492 ;;		line 2669 in file "../main.c"
 12493 ;; Parameters:    Size  Location     Type
 12494 ;;		None
 12495 ;; Auto vars:     Size  Location     Type
 12496 ;;		None
 12497 ;; Return value:  Size  Location     Type
 12498 ;;                  1    wreg      unsigned char 
 12499 ;; Registers used:
 12500 ;;		wreg
 12501 ;; Tracked objects:
 12502 ;;		On entry : F/0
 12503 ;;		On exit  : F/0
 12504 ;;		Unchanged: F/0
 12505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12506 ;;      Params:         0       0       0       0       0       0       0
 12507 ;;      Locals:         0       0       0       0       0       0       0
 12508 ;;      Temps:          0       0       0       0       0       0       0
 12509 ;;      Totals:         0       0       0       0       0       0       0
 12510 ;;Total ram usage:        0 bytes
 12511 ;; Hardware stack levels used:    1
 12512 ;; Hardware stack levels required when called:    2
 12513 ;; This function calls:
 12514 ;;		Nothing
 12515 ;; This function is called by:
 12516 ;;		_vscp_readStdReg
 12517 ;; This function uses a non-reentrant model
 12518 ;;
 12519                           
 12520                           	psect	text50
 12521  005C44                     __ptext50:
 12522                           	opt stack 0
 12523  005C44                     _vscp_getBootLoaderAlgorithm:
 12524                           	opt stack 26
 12525                           
 12526                           ; BSR set to: 0
 12527                           
 12528                           ; BSR set to: 0
 12529                           ;main.c: 2670: return 0x01;
 12530                           
 12531                           ; BSR set to: 0
 12532                           ;incstack = 0
 12533                           ;incstack = 0
 12534  005C44  0C01               	retlw	1
 12535  005C46                     __end_of_vscp_getBootLoaderAlgorithm:
 12536                           	opt stack 0
 12537                           tblptru	equ	0xFF8
 12538                           tblptrh	equ	0xFF7
 12539                           tblptrl	equ	0xFF6
 12540                           tablat	equ	0xFF5
 12541                           prodh	equ	0xFF4
 12542                           prodl	equ	0xFF3
 12543                           postinc0	equ	0xFEE
 12544                           wreg	equ	0xFE8
 12545                           postdec1	equ	0xFE5
 12546                           fsr1h	equ	0xFE2
 12547                           fsr1l	equ	0xFE1
 12548                           indf2	equ	0xFDF
 12549                           postinc2	equ	0xFDE
 12550                           postdec2	equ	0xFDD
 12551                           fsr2h	equ	0xFDA
 12552                           fsr2l	equ	0xFD9
 12553                           status	equ	0xFD8
 12554                           
 12555 ;; *************** function _vscp_getManufacturerId *****************
 12556 ;; Defined at:
 12557 ;;		line 2649 in file "../main.c"
 12558 ;; Parameters:    Size  Location     Type
 12559 ;;  idx             1    wreg     unsigned char 
 12560 ;; Auto vars:     Size  Location     Type
 12561 ;;  idx             1   25[COMRAM] unsigned char 
 12562 ;; Return value:  Size  Location     Type
 12563 ;;                  1    wreg      unsigned char 
 12564 ;; Registers used:
 12565 ;;		wreg, status,2, status,0, cstack
 12566 ;; Tracked objects:
 12567 ;;		On entry : 0/0
 12568 ;;		On exit  : 0/0
 12569 ;;		Unchanged: 0/0
 12570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12571 ;;      Params:         0       0       0       0       0       0       0
 12572 ;;      Locals:         1       0       0       0       0       0       0
 12573 ;;      Temps:          0       0       0       0       0       0       0
 12574 ;;      Totals:         1       0       0       0       0       0       0
 12575 ;;Total ram usage:        1 bytes
 12576 ;; Hardware stack levels used:    1
 12577 ;; Hardware stack levels required when called:    3
 12578 ;; This function calls:
 12579 ;;		_readEEPROM
 12580 ;; This function is called by:
 12581 ;;		_vscp_readStdReg
 12582 ;;		_vscp_writeStdReg
 12583 ;; This function uses a non-reentrant model
 12584 ;;
 12585                           
 12586                           	psect	text51
 12587  005B70                     __ptext51:
 12588                           	opt stack 0
 12589  005B70                     _vscp_getManufacturerId:
 12590                           	opt stack 25
 12591                           
 12592                           ; BSR set to: 0
 12593                           ;incstack = 0
 12594                           ;incstack = 0
 12595                           ;vscp_getManufacturerId@idx stored from wreg
 12596  005B70  CFE8 F01A          	movff	wreg,vscp_getManufacturerId@idx
 12597                           
 12598                           ;main.c: 2650: return readEEPROM(0x0A + idx);
 12599  005B74  0E0A               	movlw	10
 12600  005B76  241A               	addwf	vscp_getManufacturerId@idx,w,c
 12601  005B78  6E16               	movwf	?_readEEPROM,c
 12602  005B7A  6A17               	clrf	?_readEEPROM+1,c
 12603  005B7C  0E00               	movlw	0
 12604  005B7E  2217               	addwfc	?_readEEPROM+1,f,c
 12605  005B80  EFD6  F02D         	goto	_readEEPROM	;wreg free
 12606  005B84                     __end_of_vscp_getManufacturerId:
 12607                           	opt stack 0
 12608                           tblptru	equ	0xFF8
 12609                           tblptrh	equ	0xFF7
 12610                           tblptrl	equ	0xFF6
 12611                           tablat	equ	0xFF5
 12612                           prodh	equ	0xFF4
 12613                           prodl	equ	0xFF3
 12614                           postinc0	equ	0xFEE
 12615                           wreg	equ	0xFE8
 12616                           postdec1	equ	0xFE5
 12617                           fsr1h	equ	0xFE2
 12618                           fsr1l	equ	0xFE1
 12619                           indf2	equ	0xFDF
 12620                           postinc2	equ	0xFDE
 12621                           postdec2	equ	0xFDD
 12622                           fsr2h	equ	0xFDA
 12623                           fsr2l	equ	0xFD9
 12624                           status	equ	0xFD8
 12625                           
 12626 ;; *************** function _vscp_getUserID *****************
 12627 ;; Defined at:
 12628 ;;		line 2629 in file "../main.c"
 12629 ;; Parameters:    Size  Location     Type
 12630 ;;  idx             1    wreg     unsigned char 
 12631 ;; Auto vars:     Size  Location     Type
 12632 ;;  idx             1   25[COMRAM] unsigned char 
 12633 ;; Return value:  Size  Location     Type
 12634 ;;                  1    wreg      unsigned char 
 12635 ;; Registers used:
 12636 ;;		wreg, status,2, status,0, cstack
 12637 ;; Tracked objects:
 12638 ;;		On entry : 0/0
 12639 ;;		On exit  : 0/0
 12640 ;;		Unchanged: 0/0
 12641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12642 ;;      Params:         0       0       0       0       0       0       0
 12643 ;;      Locals:         1       0       0       0       0       0       0
 12644 ;;      Temps:          0       0       0       0       0       0       0
 12645 ;;      Totals:         1       0       0       0       0       0       0
 12646 ;;Total ram usage:        1 bytes
 12647 ;; Hardware stack levels used:    1
 12648 ;; Hardware stack levels required when called:    3
 12649 ;; This function calls:
 12650 ;;		_readEEPROM
 12651 ;; This function is called by:
 12652 ;;		_vscp_readStdReg
 12653 ;;		_vscp_writeStdReg
 12654 ;; This function uses a non-reentrant model
 12655 ;;
 12656                           
 12657                           	psect	text52
 12658  005B84                     __ptext52:
 12659                           	opt stack 0
 12660  005B84                     _vscp_getUserID:
 12661                           	opt stack 25
 12662                           
 12663                           ;incstack = 0
 12664                           ;incstack = 0
 12665                           ;vscp_getUserID@idx stored from wreg
 12666  005B84  CFE8 F01A          	movff	wreg,vscp_getUserID@idx
 12667                           
 12668                           ;main.c: 2630: return readEEPROM(0x05 + idx);
 12669  005B88  0E05               	movlw	5
 12670  005B8A  241A               	addwf	vscp_getUserID@idx,w,c
 12671  005B8C  6E16               	movwf	?_readEEPROM,c
 12672  005B8E  6A17               	clrf	?_readEEPROM+1,c
 12673  005B90  0E00               	movlw	0
 12674  005B92  2217               	addwfc	?_readEEPROM+1,f,c
 12675  005B94  EFD6  F02D         	goto	_readEEPROM	;wreg free
 12676  005B98                     __end_of_vscp_getUserID:
 12677                           	opt stack 0
 12678                           tblptru	equ	0xFF8
 12679                           tblptrh	equ	0xFF7
 12680                           tblptrl	equ	0xFF6
 12681                           tablat	equ	0xFF5
 12682                           prodh	equ	0xFF4
 12683                           prodl	equ	0xFF3
 12684                           postinc0	equ	0xFEE
 12685                           wreg	equ	0xFE8
 12686                           postdec1	equ	0xFE5
 12687                           fsr1h	equ	0xFE2
 12688                           fsr1l	equ	0xFE1
 12689                           indf2	equ	0xFDF
 12690                           postinc2	equ	0xFDE
 12691                           postdec2	equ	0xFDD
 12692                           fsr2h	equ	0xFDA
 12693                           fsr2l	equ	0xFD9
 12694                           status	equ	0xFD8
 12695                           
 12696 ;; *************** function _vscp_getMDF_URL *****************
 12697 ;; Defined at:
 12698 ;;		line 2620 in file "../main.c"
 12699 ;; Parameters:    Size  Location     Type
 12700 ;;  idx             1    wreg     unsigned char 
 12701 ;; Auto vars:     Size  Location     Type
 12702 ;;  idx             1   14[COMRAM] unsigned char 
 12703 ;; Return value:  Size  Location     Type
 12704 ;;                  1    wreg      unsigned char 
 12705 ;; Registers used:
 12706 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 12707 ;; Tracked objects:
 12708 ;;		On entry : F/0
 12709 ;;		On exit  : F/0
 12710 ;;		Unchanged: F/0
 12711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12712 ;;      Params:         0       0       0       0       0       0       0
 12713 ;;      Locals:         1       0       0       0       0       0       0
 12714 ;;      Temps:          1       0       0       0       0       0       0
 12715 ;;      Totals:         2       0       0       0       0       0       0
 12716 ;;Total ram usage:        2 bytes
 12717 ;; Hardware stack levels used:    1
 12718 ;; Hardware stack levels required when called:    2
 12719 ;; This function calls:
 12720 ;;		Nothing
 12721 ;; This function is called by:
 12722 ;;		_vscp_readStdReg
 12723 ;;		_vscp_handleProtocolEvent
 12724 ;; This function uses a non-reentrant model
 12725 ;;
 12726                           
 12727                           	psect	text53
 12728  005B40                     __ptext53:
 12729                           	opt stack 0
 12730  005B40                     _vscp_getMDF_URL:
 12731                           	opt stack 26
 12732                           
 12733                           ;incstack = 0
 12734                           ;incstack = 0
 12735                           ;vscp_getMDF_URL@idx stored from wreg
 12736  005B40  CFE8 F00F          	movff	wreg,vscp_getMDF_URL@idx
 12737                           
 12738                           ; BSR set to: 0
 12739                           ;main.c: 2621: return vscp_deviceURL[ idx ];
 12740  005B44  500F               	movf	vscp_getMDF_URL@idx,w,c
 12741  005B46  0F00               	addlw	low _vscp_deviceURL
 12742  005B48  6E0E               	movwf	??_vscp_getMDF_URL& (0+255),c
 12743  005B4A  C00E  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 12744  005B4E  0E0B               	movlw	high __smallconst
 12745  005B50  6EF7               	movwf	tblptrh,c
 12746  005B52  0008               	tblrd		*
 12747  005B54  50F5               	movf	tablat,w,c
 12748                           
 12749                           ; BSR set to: 0
 12750  005B56  0012               	return	
 12751  005B58                     __end_of_vscp_getMDF_URL:
 12752                           	opt stack 0
 12753                           tblptru	equ	0xFF8
 12754                           tblptrh	equ	0xFF7
 12755                           tblptrl	equ	0xFF6
 12756                           tablat	equ	0xFF5
 12757                           prodh	equ	0xFF4
 12758                           prodl	equ	0xFF3
 12759                           postinc0	equ	0xFEE
 12760                           wreg	equ	0xFE8
 12761                           postdec1	equ	0xFE5
 12762                           fsr1h	equ	0xFE2
 12763                           fsr1l	equ	0xFE1
 12764                           indf2	equ	0xFDF
 12765                           postinc2	equ	0xFDE
 12766                           postdec2	equ	0xFDD
 12767                           fsr2h	equ	0xFDA
 12768                           fsr2l	equ	0xFD9
 12769                           status	equ	0xFD8
 12770                           
 12771 ;; *************** function _vscp_getGUID *****************
 12772 ;; Defined at:
 12773 ;;		line 2597 in file "../main.c"
 12774 ;; Parameters:    Size  Location     Type
 12775 ;;  idx             1    wreg     unsigned char 
 12776 ;; Auto vars:     Size  Location     Type
 12777 ;;  idx             1   25[COMRAM] unsigned char 
 12778 ;; Return value:  Size  Location     Type
 12779 ;;                  1    wreg      unsigned char 
 12780 ;; Registers used:
 12781 ;;		wreg, status,2, status,0, cstack
 12782 ;; Tracked objects:
 12783 ;;		On entry : 0/0
 12784 ;;		On exit  : 0/0
 12785 ;;		Unchanged: 0/0
 12786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12787 ;;      Params:         0       0       0       0       0       0       0
 12788 ;;      Locals:         1       0       0       0       0       0       0
 12789 ;;      Temps:          0       0       0       0       0       0       0
 12790 ;;      Totals:         1       0       0       0       0       0       0
 12791 ;;Total ram usage:        1 bytes
 12792 ;; Hardware stack levels used:    1
 12793 ;; Hardware stack levels required when called:    3
 12794 ;; This function calls:
 12795 ;;		_readEEPROM
 12796 ;; This function is called by:
 12797 ;;		_vscp_readStdReg
 12798 ;;		_vscp_writeStdReg
 12799 ;;		_vscp_handleProtocolEvent
 12800 ;; This function uses a non-reentrant model
 12801 ;;
 12802                           
 12803                           	psect	text54
 12804  005B98                     __ptext54:
 12805                           	opt stack 0
 12806  005B98                     _vscp_getGUID:
 12807                           	opt stack 25
 12808                           
 12809                           ; BSR set to: 0
 12810                           ;incstack = 0
 12811                           ;incstack = 0
 12812                           ;vscp_getGUID@idx stored from wreg
 12813  005B98  CFE8 F01A          	movff	wreg,vscp_getGUID@idx
 12814                           
 12815                           ;main.c: 2598: return readEEPROM(0x12 + idx);
 12816  005B9C  0E12               	movlw	18
 12817  005B9E  241A               	addwf	vscp_getGUID@idx,w,c
 12818  005BA0  6E16               	movwf	?_readEEPROM,c
 12819  005BA2  6A17               	clrf	?_readEEPROM+1,c
 12820  005BA4  0E00               	movlw	0
 12821  005BA6  2217               	addwfc	?_readEEPROM+1,f,c
 12822  005BA8  EFD6  F02D         	goto	_readEEPROM	;wreg free
 12823  005BAC                     __end_of_vscp_getGUID:
 12824                           	opt stack 0
 12825                           tblptru	equ	0xFF8
 12826                           tblptrh	equ	0xFF7
 12827                           tblptrl	equ	0xFF6
 12828                           tablat	equ	0xFF5
 12829                           prodh	equ	0xFF4
 12830                           prodl	equ	0xFF3
 12831                           postinc0	equ	0xFEE
 12832                           wreg	equ	0xFE8
 12833                           postdec1	equ	0xFE5
 12834                           fsr1h	equ	0xFE2
 12835                           fsr1l	equ	0xFE1
 12836                           indf2	equ	0xFDF
 12837                           postinc2	equ	0xFDE
 12838                           postdec2	equ	0xFDD
 12839                           fsr2h	equ	0xFDA
 12840                           fsr2l	equ	0xFD9
 12841                           status	equ	0xFD8
 12842                           
 12843 ;; *************** function _vscp_getSubMinorVersion *****************
 12844 ;; Defined at:
 12845 ;;		line 2586 in file "../main.c"
 12846 ;; Parameters:    Size  Location     Type
 12847 ;;		None
 12848 ;; Auto vars:     Size  Location     Type
 12849 ;;		None
 12850 ;; Return value:  Size  Location     Type
 12851 ;;                  1    wreg      unsigned char 
 12852 ;; Registers used:
 12853 ;;		wreg
 12854 ;; Tracked objects:
 12855 ;;		On entry : F/0
 12856 ;;		On exit  : F/0
 12857 ;;		Unchanged: F/0
 12858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12859 ;;      Params:         0       0       0       0       0       0       0
 12860 ;;      Locals:         0       0       0       0       0       0       0
 12861 ;;      Temps:          0       0       0       0       0       0       0
 12862 ;;      Totals:         0       0       0       0       0       0       0
 12863 ;;Total ram usage:        0 bytes
 12864 ;; Hardware stack levels used:    1
 12865 ;; Hardware stack levels required when called:    2
 12866 ;; This function calls:
 12867 ;;		Nothing
 12868 ;; This function is called by:
 12869 ;;		_vscp_readStdReg
 12870 ;; This function uses a non-reentrant model
 12871 ;;
 12872                           
 12873                           	psect	text55
 12874  005C46                     __ptext55:
 12875                           	opt stack 0
 12876  005C46                     _vscp_getSubMinorVersion:
 12877                           	opt stack 26
 12878                           
 12879                           ; BSR set to: 0
 12880                           
 12881                           ; BSR set to: 0
 12882                           ;main.c: 2587: return 2;
 12883                           
 12884                           ;incstack = 0
 12885                           ;incstack = 0
 12886  005C46  0C02               	retlw	2
 12887  005C48                     __end_of_vscp_getSubMinorVersion:
 12888                           	opt stack 0
 12889                           tblptru	equ	0xFF8
 12890                           tblptrh	equ	0xFF7
 12891                           tblptrl	equ	0xFF6
 12892                           tablat	equ	0xFF5
 12893                           prodh	equ	0xFF4
 12894                           prodl	equ	0xFF3
 12895                           postinc0	equ	0xFEE
 12896                           wreg	equ	0xFE8
 12897                           postdec1	equ	0xFE5
 12898                           fsr1h	equ	0xFE2
 12899                           fsr1l	equ	0xFE1
 12900                           indf2	equ	0xFDF
 12901                           postinc2	equ	0xFDE
 12902                           postdec2	equ	0xFDD
 12903                           fsr2h	equ	0xFDA
 12904                           fsr2l	equ	0xFD9
 12905                           status	equ	0xFD8
 12906                           
 12907 ;; *************** function _vscp_getMinorVersion *****************
 12908 ;; Defined at:
 12909 ;;		line 2577 in file "../main.c"
 12910 ;; Parameters:    Size  Location     Type
 12911 ;;		None
 12912 ;; Auto vars:     Size  Location     Type
 12913 ;;		None
 12914 ;; Return value:  Size  Location     Type
 12915 ;;                  1    wreg      unsigned char 
 12916 ;; Registers used:
 12917 ;;		wreg
 12918 ;; Tracked objects:
 12919 ;;		On entry : F/0
 12920 ;;		On exit  : F/0
 12921 ;;		Unchanged: F/0
 12922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12923 ;;      Params:         0       0       0       0       0       0       0
 12924 ;;      Locals:         0       0       0       0       0       0       0
 12925 ;;      Temps:          0       0       0       0       0       0       0
 12926 ;;      Totals:         0       0       0       0       0       0       0
 12927 ;;Total ram usage:        0 bytes
 12928 ;; Hardware stack levels used:    1
 12929 ;; Hardware stack levels required when called:    2
 12930 ;; This function calls:
 12931 ;;		Nothing
 12932 ;; This function is called by:
 12933 ;;		_vscp_readStdReg
 12934 ;; This function uses a non-reentrant model
 12935 ;;
 12936                           
 12937                           	psect	text56
 12938  005C48                     __ptext56:
 12939                           	opt stack 0
 12940  005C48                     _vscp_getMinorVersion:
 12941                           	opt stack 26
 12942                           
 12943                           ; BSR set to: 0
 12944                           
 12945                           ; BSR set to: 0
 12946                           ;main.c: 2578: return 2;
 12947                           
 12948                           ; BSR set to: 0
 12949                           ;incstack = 0
 12950                           ;incstack = 0
 12951  005C48  0C02               	retlw	2
 12952  005C4A                     __end_of_vscp_getMinorVersion:
 12953                           	opt stack 0
 12954                           tblptru	equ	0xFF8
 12955                           tblptrh	equ	0xFF7
 12956                           tblptrl	equ	0xFF6
 12957                           tablat	equ	0xFF5
 12958                           prodh	equ	0xFF4
 12959                           prodl	equ	0xFF3
 12960                           postinc0	equ	0xFEE
 12961                           wreg	equ	0xFE8
 12962                           postdec1	equ	0xFE5
 12963                           fsr1h	equ	0xFE2
 12964                           fsr1l	equ	0xFE1
 12965                           indf2	equ	0xFDF
 12966                           postinc2	equ	0xFDE
 12967                           postdec2	equ	0xFDD
 12968                           fsr2h	equ	0xFDA
 12969                           fsr2l	equ	0xFD9
 12970                           status	equ	0xFD8
 12971                           
 12972 ;; *************** function _vscp_getMajorVersion *****************
 12973 ;; Defined at:
 12974 ;;		line 2568 in file "../main.c"
 12975 ;; Parameters:    Size  Location     Type
 12976 ;;		None
 12977 ;; Auto vars:     Size  Location     Type
 12978 ;;		None
 12979 ;; Return value:  Size  Location     Type
 12980 ;;                  1    wreg      unsigned char 
 12981 ;; Registers used:
 12982 ;;		wreg
 12983 ;; Tracked objects:
 12984 ;;		On entry : F/0
 12985 ;;		On exit  : F/0
 12986 ;;		Unchanged: F/0
 12987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12988 ;;      Params:         0       0       0       0       0       0       0
 12989 ;;      Locals:         0       0       0       0       0       0       0
 12990 ;;      Temps:          0       0       0       0       0       0       0
 12991 ;;      Totals:         0       0       0       0       0       0       0
 12992 ;;Total ram usage:        0 bytes
 12993 ;; Hardware stack levels used:    1
 12994 ;; Hardware stack levels required when called:    2
 12995 ;; This function calls:
 12996 ;;		Nothing
 12997 ;; This function is called by:
 12998 ;;		_vscp_readStdReg
 12999 ;; This function uses a non-reentrant model
 13000 ;;
 13001                           
 13002                           	psect	text57
 13003  005C4A                     __ptext57:
 13004                           	opt stack 0
 13005  005C4A                     _vscp_getMajorVersion:
 13006                           	opt stack 26
 13007                           
 13008                           ; BSR set to: 0
 13009                           
 13010                           ; BSR set to: 0
 13011                           ;main.c: 2569: return 1;
 13012                           
 13013                           ; BSR set to: 0
 13014                           ;incstack = 0
 13015                           ;incstack = 0
 13016  005C4A  0C01               	retlw	1
 13017  005C4C                     __end_of_vscp_getMajorVersion:
 13018                           	opt stack 0
 13019                           tblptru	equ	0xFF8
 13020                           tblptrh	equ	0xFF7
 13021                           tblptrl	equ	0xFF6
 13022                           tablat	equ	0xFF5
 13023                           prodh	equ	0xFF4
 13024                           prodl	equ	0xFF3
 13025                           postinc0	equ	0xFEE
 13026                           wreg	equ	0xFE8
 13027                           postdec1	equ	0xFE5
 13028                           fsr1h	equ	0xFE2
 13029                           fsr1l	equ	0xFE1
 13030                           indf2	equ	0xFDF
 13031                           postinc2	equ	0xFDE
 13032                           postdec2	equ	0xFDD
 13033                           fsr2h	equ	0xFDA
 13034                           fsr2l	equ	0xFD9
 13035                           status	equ	0xFD8
 13036                           
 13037 ;; *************** function _vscp_newNodeOnline *****************
 13038 ;; Defined at:
 13039 ;;		line 491 in file "../../vscp_firmware/common/vscp_firmware.c"
 13040 ;; Parameters:    Size  Location     Type
 13041 ;;		None
 13042 ;; Auto vars:     Size  Location     Type
 13043 ;;		None
 13044 ;; Return value:  Size  Location     Type
 13045 ;;		None               void
 13046 ;; Registers used:
 13047 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13048 ;; Tracked objects:
 13049 ;;		On entry : F/0
 13050 ;;		On exit  : 0/0
 13051 ;;		Unchanged: 0/0
 13052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13053 ;;      Params:         0       0       0       0       0       0       0
 13054 ;;      Locals:         0       0       0       0       0       0       0
 13055 ;;      Temps:          1       0       0       0       0       0       0
 13056 ;;      Totals:         1       0       0       0       0       0       0
 13057 ;;Total ram usage:        1 bytes
 13058 ;; Hardware stack levels used:    1
 13059 ;; Hardware stack levels required when called:    7
 13060 ;; This function calls:
 13061 ;;		_vscp_sendEvent
 13062 ;; This function is called by:
 13063 ;;		_vscp_handleProtocolEvent
 13064 ;; This function uses a non-reentrant model
 13065 ;;
 13066                           
 13067                           	psect	text58
 13068  0058F2                     __ptext58:
 13069                           	opt stack 0
 13070  0058F2                     _vscp_newNodeOnline:
 13071                           	opt stack 22
 13072                           
 13073                           ; BSR set to: 0
 13074                           ;vscp_firmware.c: 492: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 13075                           ;vscp_firmware.c: 493: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 13076                           
 13077                           ; BSR set to: 0
 13078                           ;incstack = 0
 13079                           ;incstack = 0
 13080  0058F2  C0BD  F044         	movff	_vscp_imsg,??_vscp_newNodeOnline
 13081  0058F6  0E0F               	movlw	15
 13082  0058F8  1644               	andwf	??_vscp_newNodeOnline,f,c
 13083  0058FA  0444               	decf	??_vscp_newNodeOnline,w,c
 13084  0058FC  E10E               	bnz	l1095
 13085                           
 13086                           ; BSR set to: 0
 13087  0058FE  51BB               	movf	_vscp_nickname& (0+255),w,b
 13088  005900  EE20  F0C3         	lfsr	2,_vscp_imsg+6
 13089  005904  62DF               	cpfseq	indf2,c
 13090  005906  D009               	goto	l1095
 13091                           
 13092                           ; BSR set to: 0
 13093                           ;vscp_firmware.c: 499: vscp_omsg.flags = 0x80;
 13094  005908  0E80               	movlw	128
 13095  00590A  6FCB               	movwf	_vscp_omsg& (0+255),b
 13096                           
 13097                           ; BSR set to: 0
 13098                           ;vscp_firmware.c: 500: vscp_omsg.priority = 0x00;
 13099  00590C  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
 13100                           
 13101                           ; BSR set to: 0
 13102                           ;vscp_firmware.c: 501: vscp_omsg.vscp_class = 0;
 13103  00590E  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
 13104  005910  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
 13105                           
 13106                           ;vscp_firmware.c: 502: vscp_omsg.vscp_type = 3;
 13107  005912  0E03               	movlw	3
 13108  005914  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
 13109                           
 13110                           ; BSR set to: 0
 13111                           ;vscp_firmware.c: 503: vscp_sendEvent();
 13112  005916  EC37  F02C         	call	_vscp_sendEvent	;wreg free
 13113  00591A                     l1095:
 13114  00591A  0012               	return	
 13115  00591C                     __end_of_vscp_newNodeOnline:
 13116                           	opt stack 0
 13117                           tblptru	equ	0xFF8
 13118                           tblptrh	equ	0xFF7
 13119                           tblptrl	equ	0xFF6
 13120                           tablat	equ	0xFF5
 13121                           prodh	equ	0xFF4
 13122                           prodl	equ	0xFF3
 13123                           postinc0	equ	0xFEE
 13124                           wreg	equ	0xFE8
 13125                           postdec1	equ	0xFE5
 13126                           fsr1h	equ	0xFE2
 13127                           fsr1l	equ	0xFE1
 13128                           indf2	equ	0xFDF
 13129                           postinc2	equ	0xFDE
 13130                           postdec2	equ	0xFDD
 13131                           fsr2h	equ	0xFDA
 13132                           fsr2l	equ	0xFD9
 13133                           status	equ	0xFD8
 13134                           
 13135 ;; *************** function _vscp_handleDropNickname *****************
 13136 ;; Defined at:
 13137 ;;		line 425 in file "../../vscp_firmware/common/vscp_firmware.c"
 13138 ;; Parameters:    Size  Location     Type
 13139 ;;		None
 13140 ;; Auto vars:     Size  Location     Type
 13141 ;;  bytes           1   25[COMRAM] unsigned char 
 13142 ;; Return value:  Size  Location     Type
 13143 ;;		None               void
 13144 ;; Registers used:
 13145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13146 ;; Tracked objects:
 13147 ;;		On entry : F/0
 13148 ;;		On exit  : E/0
 13149 ;;		Unchanged: 0/0
 13150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13151 ;;      Params:         0       0       0       0       0       0       0
 13152 ;;      Locals:         1       0       0       0       0       0       0
 13153 ;;      Temps:          0       0       0       0       0       0       0
 13154 ;;      Totals:         1       0       0       0       0       0       0
 13155 ;;Total ram usage:        1 bytes
 13156 ;; Hardware stack levels used:    1
 13157 ;; Hardware stack levels required when called:    5
 13158 ;; This function calls:
 13159 ;;		_vscp_init
 13160 ;;		_vscp_writeNicknamePermanent
 13161 ;; This function is called by:
 13162 ;;		_vscp_handleProtocolEvent
 13163 ;; This function uses a non-reentrant model
 13164 ;;
 13165                           
 13166                           	psect	text59
 13167  00583E                     __ptext59:
 13168                           	opt stack 0
 13169  00583E                     _vscp_handleDropNickname:
 13170                           	opt stack 24
 13171                           
 13172                           ; BSR set to: 0
 13173                           ;vscp_firmware.c: 426: uint8_t bytes = vscp_imsg.flags & 0x0f;
 13174                           
 13175                           ;incstack = 0
 13176                           ;incstack = 0
 13177  00583E  51BD               	movf	_vscp_imsg& (0+255),w,b
 13178  005840  0B0F               	andlw	15
 13179  005842  6E1A               	movwf	vscp_handleDropNickname@bytes,c
 13180                           
 13181                           ; BSR set to: 0
 13182                           ;vscp_firmware.c: 432: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 13183  005844  501A               	movf	vscp_handleDropNickname@bytes,w,c
 13184  005846  E012               	bz	l1091
 13185                           
 13186                           ; BSR set to: 0
 13187  005848  51BB               	movf	_vscp_nickname& (0+255),w,b
 13188  00584A  EE20  F0C3         	lfsr	2,_vscp_imsg+6
 13189  00584E  62DF               	cpfseq	indf2,c
 13190  005850  D00D               	goto	l1091
 13191                           
 13192                           ; BSR set to: 0
 13193                           ;vscp_firmware.c: 465: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 13194  005852  041A               	decf	vscp_handleDropNickname@bytes,w,c
 13195  005854  E005               	bz	l1090
 13196                           
 13197                           ; BSR set to: 0
 13198  005856  0E01               	movlw	1
 13199  005858  641A               	cpfsgt	vscp_handleDropNickname@bytes,c
 13200  00585A  D008               	goto	l1091
 13201                           
 13202                           ; BSR set to: 0
 13203  00585C  67C4               	tstfsz	(_vscp_imsg+7)& (0+255),b
 13204  00585E  D006               	goto	l1091
 13205  005860                     l1090:
 13206                           
 13207                           ; BSR set to: 0
 13208                           ;vscp_firmware.c: 467: vscp_nickname = 0xff;
 13209  005860  69BB               	setf	_vscp_nickname& (0+255),b
 13210                           
 13211                           ; BSR set to: 0
 13212                           ;vscp_firmware.c: 468: vscp_writeNicknamePermanent(0xff);
 13213  005862  0EFF               	movlw	255
 13214  005864  ECE0  F02D         	call	_vscp_writeNicknamePermanent
 13215                           
 13216                           ;vscp_firmware.c: 469: vscp_init();
 13217  005868  ECC7  F02A         	call	_vscp_init	;wreg free
 13218  00586C                     l1091:
 13219  00586C  0012               	return	
 13220  00586E                     __end_of_vscp_handleDropNickname:
 13221                           	opt stack 0
 13222                           tblptru	equ	0xFF8
 13223                           tblptrh	equ	0xFF7
 13224                           tblptrl	equ	0xFF6
 13225                           tablat	equ	0xFF5
 13226                           prodh	equ	0xFF4
 13227                           prodl	equ	0xFF3
 13228                           postinc0	equ	0xFEE
 13229                           wreg	equ	0xFE8
 13230                           postdec1	equ	0xFE5
 13231                           fsr1h	equ	0xFE2
 13232                           fsr1l	equ	0xFE1
 13233                           indf2	equ	0xFDF
 13234                           postinc2	equ	0xFDE
 13235                           postdec2	equ	0xFDD
 13236                           fsr2h	equ	0xFDA
 13237                           fsr2l	equ	0xFD9
 13238                           status	equ	0xFD8
 13239                           
 13240 ;; *************** function _vscp_init *****************
 13241 ;; Defined at:
 13242 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 13243 ;; Parameters:    Size  Location     Type
 13244 ;;		None
 13245 ;; Auto vars:     Size  Location     Type
 13246 ;;		None
 13247 ;; Return value:  Size  Location     Type
 13248 ;;		None               void
 13249 ;; Registers used:
 13250 ;;		wreg, status,2, cstack
 13251 ;; Tracked objects:
 13252 ;;		On entry : 0/0
 13253 ;;		On exit  : F/1
 13254 ;;		Unchanged: 0/0
 13255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13256 ;;      Params:         0       0       0       0       0       0       0
 13257 ;;      Locals:         0       0       0       0       0       0       0
 13258 ;;      Temps:          0       0       0       0       0       0       0
 13259 ;;      Totals:         0       0       0       0       0       0       0
 13260 ;;Total ram usage:        0 bytes
 13261 ;; Hardware stack levels used:    1
 13262 ;; Hardware stack levels required when called:    4
 13263 ;; This function calls:
 13264 ;;		_vscp_readNicknamePermanent
 13265 ;; This function is called by:
 13266 ;;		_main
 13267 ;;		_vscp_handleDropNickname
 13268 ;;		_vscp_handleProtocolEvent
 13269 ;; This function uses a non-reentrant model
 13270 ;;
 13271                           
 13272                           	psect	text60
 13273  00558E                     __ptext60:
 13274                           	opt stack 0
 13275  00558E                     _vscp_init:
 13276                           	opt stack 24
 13277                           
 13278                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 13279                           
 13280                           ;incstack = 0
 13281                           ;incstack = 0
 13282  00558E  0E02               	movlw	2
 13283  005590  6E4D               	movwf	_vscp_initledfunc,c
 13284                           
 13285                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 13286  005592  EC0F  F02E         	call	_vscp_readNicknamePermanent	;wreg free
 13287  005596  0100               	movlb	0	; () banked
 13288  005598  6FBB               	movwf	_vscp_nickname& (0+255),b
 13289                           
 13290                           ; BSR set to: 0
 13291                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 13292  00559A  67BB               	tstfsz	_vscp_nickname& (0+255),b
 13293  00559C  D001               	goto	l1035
 13294                           
 13295                           ; BSR set to: 0
 13296  00559E  69BB               	setf	_vscp_nickname& (0+255),b
 13297  0055A0                     l1035:
 13298                           
 13299                           ; BSR set to: 0
 13300                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 13301  0055A0  6BBD               	clrf	_vscp_imsg& (0+255),b
 13302                           
 13303                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 13304  0055A2  6BBE               	clrf	(_vscp_imsg+1)& (0+255),b
 13305                           
 13306                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 13307  0055A4  6BBF               	clrf	(_vscp_imsg+2)& (0+255),b
 13308  0055A6  6BC0               	clrf	(_vscp_imsg+3)& (0+255),b
 13309                           
 13310                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 13311  0055A8  6BC1               	clrf	(_vscp_imsg+4)& (0+255),b
 13312                           
 13313                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 13314  0055AA  6BCB               	clrf	_vscp_omsg& (0+255),b
 13315                           
 13316                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 13317  0055AC  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
 13318                           
 13319                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 13320  0055AE  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
 13321  0055B0  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
 13322                           
 13323                           ;vscp_firmware.c: 138: vscp_omsg.vscp_type = 0;
 13324  0055B2  6BCF               	clrf	(_vscp_omsg+4)& (0+255),b
 13325                           
 13326                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 13327  0055B4  6A4B               	clrf	_vscp_errorcnt,c
 13328                           
 13329                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 13330  0055B6  6A4A               	clrf	_vscp_alarmstatus,c
 13331                           
 13332                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 13333  0055B8  6A4F               	clrf	_vscp_probe_address,c
 13334                           
 13335                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 13336  0055BA  6BBC               	clrf	_vscp_node_state& (0+255),b
 13337                           
 13338                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 13339  0055BC  6A4E               	clrf	_vscp_node_substate,c
 13340                           
 13341                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 13342  0055BE  6A50               	clrf	_vscp_probe_cnt,c
 13343                           
 13344                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 13345  0055C0  6A46               	clrf	_vscp_page_select,c
 13346  0055C2  6A47               	clrf	_vscp_page_select+1,c
 13347                           
 13348                           ;vscp_firmware.c: 153: vscp_timer = 0;
 13349  0055C4  0101               	movlb	1	; () banked
 13350  0055C6  6B1E               	clrf	_vscp_timer& (0+255),b	;volatile
 13351  0055C8  6B1F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 13352                           
 13353                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 13354  0055CA  6B1C               	clrf	_vscp_configtimer& (0+255),b	;volatile
 13355  0055CC  6B1D               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 13356                           
 13357                           ;vscp_firmware.c: 155: vscp_second = 0;
 13358  0055CE  6A51               	clrf	_vscp_second,c
 13359                           
 13360                           ;vscp_firmware.c: 156: vscp_minute = 0;
 13361  0055D0  6B21               	clrf	_vscp_minute& (0+255),b
 13362                           
 13363                           ;vscp_firmware.c: 157: vscp_hour = 0;
 13364  0055D2  6B20               	clrf	_vscp_hour& (0+255),b
 13365                           
 13366                           ; BSR set to: 1
 13367  0055D4  0012               	return	
 13368  0055D6                     __end_of_vscp_init:
 13369                           	opt stack 0
 13370                           tblptru	equ	0xFF8
 13371                           tblptrh	equ	0xFF7
 13372                           tblptrl	equ	0xFF6
 13373                           tablat	equ	0xFF5
 13374                           prodh	equ	0xFF4
 13375                           prodl	equ	0xFF3
 13376                           postinc0	equ	0xFEE
 13377                           wreg	equ	0xFE8
 13378                           postdec1	equ	0xFE5
 13379                           fsr1h	equ	0xFE2
 13380                           fsr1l	equ	0xFE1
 13381                           indf2	equ	0xFDF
 13382                           postinc2	equ	0xFDE
 13383                           postdec2	equ	0xFDD
 13384                           fsr2h	equ	0xFDA
 13385                           fsr2l	equ	0xFD9
 13386                           status	equ	0xFD8
 13387                           
 13388 ;; *************** function _vscp_readNicknamePermanent *****************
 13389 ;; Defined at:
 13390 ;;		line 2771 in file "../main.c"
 13391 ;; Parameters:    Size  Location     Type
 13392 ;;		None
 13393 ;; Auto vars:     Size  Location     Type
 13394 ;;		None
 13395 ;; Return value:  Size  Location     Type
 13396 ;;                  1    wreg      unsigned char 
 13397 ;; Registers used:
 13398 ;;		wreg, status,2, cstack
 13399 ;; Tracked objects:
 13400 ;;		On entry : 0/0
 13401 ;;		On exit  : 0/0
 13402 ;;		Unchanged: 0/0
 13403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13404 ;;      Params:         0       0       0       0       0       0       0
 13405 ;;      Locals:         0       0       0       0       0       0       0
 13406 ;;      Temps:          0       0       0       0       0       0       0
 13407 ;;      Totals:         0       0       0       0       0       0       0
 13408 ;;Total ram usage:        0 bytes
 13409 ;; Hardware stack levels used:    1
 13410 ;; Hardware stack levels required when called:    3
 13411 ;; This function calls:
 13412 ;;		_readEEPROM
 13413 ;; This function is called by:
 13414 ;;		_vscp_init
 13415 ;; This function uses a non-reentrant model
 13416 ;;
 13417                           
 13418                           	psect	text61
 13419  005C1E                     __ptext61:
 13420                           	opt stack 0
 13421  005C1E                     _vscp_readNicknamePermanent:
 13422                           	opt stack 24
 13423                           
 13424                           ;main.c: 2772: return readEEPROM( 0x01 );
 13425                           
 13426                           ; BSR set to: 1
 13427                           ;incstack = 0
 13428                           ;incstack = 0
 13429  005C1E  6A17               	clrf	?_readEEPROM+1,c
 13430  005C20  0E01               	movlw	1
 13431  005C22  6E16               	movwf	?_readEEPROM,c
 13432  005C24  EFD6  F02D         	goto	_readEEPROM	;wreg free
 13433  005C28                     __end_of_vscp_readNicknamePermanent:
 13434                           	opt stack 0
 13435                           tblptru	equ	0xFF8
 13436                           tblptrh	equ	0xFF7
 13437                           tblptrl	equ	0xFF6
 13438                           tablat	equ	0xFF5
 13439                           prodh	equ	0xFF4
 13440                           prodl	equ	0xFF3
 13441                           postinc0	equ	0xFEE
 13442                           wreg	equ	0xFE8
 13443                           postdec1	equ	0xFE5
 13444                           fsr1h	equ	0xFE2
 13445                           fsr1l	equ	0xFE1
 13446                           indf2	equ	0xFDF
 13447                           postinc2	equ	0xFDE
 13448                           postdec2	equ	0xFDD
 13449                           fsr2h	equ	0xFDA
 13450                           fsr2l	equ	0xFD9
 13451                           status	equ	0xFD8
 13452                           
 13453 ;; *************** function _readEEPROM *****************
 13454 ;; Defined at:
 13455 ;;		line 94 in file "../../vscp_firmware/pic/common/eeprom.c"
 13456 ;; Parameters:    Size  Location     Type
 13457 ;;  address         2   21[COMRAM] unsigned short 
 13458 ;; Auto vars:     Size  Location     Type
 13459 ;;  data            1   24[COMRAM] unsigned char 
 13460 ;; Return value:  Size  Location     Type
 13461 ;;                  1    wreg      unsigned char 
 13462 ;; Registers used:
 13463 ;;		wreg, status,2
 13464 ;; Tracked objects:
 13465 ;;		On entry : 0/0
 13466 ;;		On exit  : 0/0
 13467 ;;		Unchanged: 0/0
 13468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13469 ;;      Params:         2       0       0       0       0       0       0
 13470 ;;      Locals:         2       0       0       0       0       0       0
 13471 ;;      Temps:          0       0       0       0       0       0       0
 13472 ;;      Totals:         4       0       0       0       0       0       0
 13473 ;;Total ram usage:        4 bytes
 13474 ;; Hardware stack levels used:    1
 13475 ;; Hardware stack levels required when called:    2
 13476 ;; This function calls:
 13477 ;;		Nothing
 13478 ;; This function is called by:
 13479 ;;		_doWork
 13480 ;;		_doOneSecondWork
 13481 ;;		_sendTempEvent
 13482 ;;		_getCalibrationValue
 13483 ;;		_writeCoeffs2Ram
 13484 ;;		_handle_sync
 13485 ;;		_vscp_readAppReg
 13486 ;;		_vscp_writeAppReg
 13487 ;;		_vscp_getGUID
 13488 ;;		_vscp_getUserID
 13489 ;;		_vscp_getManufacturerId
 13490 ;;		_vscp_getZone
 13491 ;;		_vscp_getSubzone
 13492 ;;		_vscp_readNicknamePermanent
 13493 ;;		_vscp_getControlByte
 13494 ;; This function uses a non-reentrant model
 13495 ;;
 13496                           
 13497                           	psect	text62
 13498  005BAC                     __ptext62:
 13499                           	opt stack 0
 13500  005BAC                     _readEEPROM:
 13501                           	opt stack 26
 13502                           
 13503                           ;eeprom.c: 95: uint8_t data;
 13504                           ;eeprom.c: 100: EEADR = address & 0xff;
 13505                           
 13506                           ;incstack = 0
 13507                           ;incstack = 0
 13508  005BAC  C016  FFA9         	movff	readEEPROM@address,4009	;volatile
 13509                           
 13510                           ;eeprom.c: 101: EECON1bits.EEPGD= 0;
 13511  005BB0  9EA6               	bcf	4006,7,c	;volatile
 13512                           
 13513                           ;eeprom.c: 102: EECON1bits.CFGS = 0;
 13514  005BB2  9CA6               	bcf	4006,6,c	;volatile
 13515                           
 13516                           ;eeprom.c: 103: EECON1bits.RD = 1;
 13517  005BB4  80A6               	bsf	4006,0,c	;volatile
 13518  005BB6  F000               	nop		;# 
 13519                           
 13520                           ;eeprom.c: 105: data = EEDATA;
 13521  005BB8  CFA8 F019          	movff	4008,readEEPROM@data	;volatile
 13522                           
 13523                           ;eeprom.c: 107: return data;
 13524  005BBC  5019               	movf	readEEPROM@data,w,c
 13525  005BBE  0012               	return	
 13526  005BC0                     __end_of_readEEPROM:
 13527                           	opt stack 0
 13528                           tblptru	equ	0xFF8
 13529                           tblptrh	equ	0xFF7
 13530                           tblptrl	equ	0xFF6
 13531                           tablat	equ	0xFF5
 13532                           prodh	equ	0xFF4
 13533                           prodl	equ	0xFF3
 13534                           postinc0	equ	0xFEE
 13535                           wreg	equ	0xFE8
 13536                           postdec1	equ	0xFE5
 13537                           fsr1h	equ	0xFE2
 13538                           fsr1l	equ	0xFE1
 13539                           indf2	equ	0xFDF
 13540                           postinc2	equ	0xFDE
 13541                           postdec2	equ	0xFDD
 13542                           fsr2h	equ	0xFDA
 13543                           fsr2l	equ	0xFD9
 13544                           status	equ	0xFD8
 13545                           
 13546 ;; *************** function _vscp_handleSetNickname *****************
 13547 ;; Defined at:
 13548 ;;		line 409 in file "../../vscp_firmware/common/vscp_firmware.c"
 13549 ;; Parameters:    Size  Location     Type
 13550 ;;		None
 13551 ;; Auto vars:     Size  Location     Type
 13552 ;;		None
 13553 ;; Return value:  Size  Location     Type
 13554 ;;		None               void
 13555 ;; Registers used:
 13556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13557 ;; Tracked objects:
 13558 ;;		On entry : F/0
 13559 ;;		On exit  : 0/0
 13560 ;;		Unchanged: 0/0
 13561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13562 ;;      Params:         0       0       0       0       0       0       0
 13563 ;;      Locals:         0       0       0       0       0       0       0
 13564 ;;      Temps:          0       0       0       0       0       0       0
 13565 ;;      Totals:         0       0       0       0       0       0       0
 13566 ;;Total ram usage:        0 bytes
 13567 ;; Hardware stack levels used:    1
 13568 ;; Hardware stack levels required when called:    4
 13569 ;; This function calls:
 13570 ;;		_vscp_writeNicknamePermanent
 13571 ;; This function is called by:
 13572 ;;		_vscp_handleProtocolEvent
 13573 ;; This function uses a non-reentrant model
 13574 ;;
 13575                           
 13576                           	psect	text63
 13577  005A64                     __ptext63:
 13578                           	opt stack 0
 13579  005A64                     _vscp_handleSetNickname:
 13580                           	opt stack 25
 13581                           
 13582                           ; BSR set to: 0
 13583                           ;vscp_firmware.c: 410: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 13584                           ;vscp_firmware.c: 411: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 13585                           
 13586                           ;incstack = 0
 13587                           ;incstack = 0
 13588  005A64  51BD               	movf	_vscp_imsg& (0+255),w,b
 13589  005A66  0B0F               	andlw	15
 13590  005A68  0A02               	xorlw	2
 13591  005A6A  E10A               	bnz	l1084
 13592                           
 13593                           ; BSR set to: 0
 13594  005A6C  51BB               	movf	_vscp_nickname& (0+255),w,b
 13595  005A6E  EE20  F0C3         	lfsr	2,_vscp_imsg+6
 13596  005A72  62DF               	cpfseq	indf2,c
 13597  005A74  D005               	goto	l1084
 13598                           
 13599                           ; BSR set to: 0
 13600                           ;vscp_firmware.c: 414: vscp_nickname = vscp_imsg.data[ 1 ];
 13601  005A76  C0C4  F0BB         	movff	_vscp_imsg+7,_vscp_nickname
 13602                           
 13603                           ; BSR set to: 0
 13604                           ;vscp_firmware.c: 415: vscp_writeNicknamePermanent(vscp_nickname);
 13605  005A7A  51BB               	movf	_vscp_nickname& (0+255),w,b
 13606  005A7C  ECE0  F02D         	call	_vscp_writeNicknamePermanent
 13607  005A80                     l1084:
 13608  005A80  0012               	return	
 13609  005A82                     __end_of_vscp_handleSetNickname:
 13610                           	opt stack 0
 13611                           tblptru	equ	0xFF8
 13612                           tblptrh	equ	0xFF7
 13613                           tblptrl	equ	0xFF6
 13614                           tablat	equ	0xFF5
 13615                           prodh	equ	0xFF4
 13616                           prodl	equ	0xFF3
 13617                           postinc0	equ	0xFEE
 13618                           wreg	equ	0xFE8
 13619                           postdec1	equ	0xFE5
 13620                           fsr1h	equ	0xFE2
 13621                           fsr1l	equ	0xFE1
 13622                           indf2	equ	0xFDF
 13623                           postinc2	equ	0xFDE
 13624                           postdec2	equ	0xFDD
 13625                           fsr2h	equ	0xFDA
 13626                           fsr2l	equ	0xFD9
 13627                           status	equ	0xFD8
 13628                           
 13629 ;; *************** function _vscp_handleHeartbeat *****************
 13630 ;; Defined at:
 13631 ;;		line 400 in file "../../vscp_firmware/common/vscp_firmware.c"
 13632 ;; Parameters:    Size  Location     Type
 13633 ;;		None
 13634 ;; Auto vars:     Size  Location     Type
 13635 ;;		None
 13636 ;; Return value:  Size  Location     Type
 13637 ;;		None               void
 13638 ;; Registers used:
 13639 ;;		None
 13640 ;; Tracked objects:
 13641 ;;		On entry : F/0
 13642 ;;		On exit  : F/0
 13643 ;;		Unchanged: F/0
 13644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13645 ;;      Params:         0       0       0       0       0       0       0
 13646 ;;      Locals:         0       0       0       0       0       0       0
 13647 ;;      Temps:          0       0       0       0       0       0       0
 13648 ;;      Totals:         0       0       0       0       0       0       0
 13649 ;;Total ram usage:        0 bytes
 13650 ;; Hardware stack levels used:    1
 13651 ;; Hardware stack levels required when called:    2
 13652 ;; This function calls:
 13653 ;;		Nothing
 13654 ;; This function is called by:
 13655 ;;		_vscp_handleProtocolEvent
 13656 ;; This function uses a non-reentrant model
 13657 ;;
 13658                           
 13659                           	psect	text64
 13660  005C4C                     __ptext64:
 13661                           	opt stack 0
 13662  005C4C                     _vscp_handleHeartbeat:
 13663                           	opt stack 27
 13664                           
 13665                           ; BSR set to: 0
 13666                           
 13667                           ;incstack = 0
 13668                           ;incstack = 0
 13669  005C4C  0012               	return	
 13670  005C4E                     __end_of_vscp_handleHeartbeat:
 13671                           	opt stack 0
 13672                           tblptru	equ	0xFF8
 13673                           tblptrh	equ	0xFF7
 13674                           tblptrl	equ	0xFF6
 13675                           tablat	equ	0xFF5
 13676                           prodh	equ	0xFF4
 13677                           prodl	equ	0xFF3
 13678                           postinc0	equ	0xFEE
 13679                           wreg	equ	0xFE8
 13680                           postdec1	equ	0xFE5
 13681                           fsr1h	equ	0xFE2
 13682                           fsr1l	equ	0xFE1
 13683                           indf2	equ	0xFDF
 13684                           postinc2	equ	0xFDE
 13685                           postdec2	equ	0xFDD
 13686                           fsr2h	equ	0xFDA
 13687                           fsr2l	equ	0xFD9
 13688                           status	equ	0xFD8
 13689                           
 13690 ;; *************** function _vscp_goBootloaderMode *****************
 13691 ;; Defined at:
 13692 ;;		line 2752 in file "../main.c"
 13693 ;; Parameters:    Size  Location     Type
 13694 ;;  algorithm       1    wreg     unsigned char 
 13695 ;; Auto vars:     Size  Location     Type
 13696 ;;  algorithm       1   16[COMRAM] unsigned char 
 13697 ;; Return value:  Size  Location     Type
 13698 ;;		None               void
 13699 ;; Registers used:
 13700 ;;		wreg, status,2, status,0, cstack
 13701 ;; Tracked objects:
 13702 ;;		On entry : F/0
 13703 ;;		On exit  : 0/0
 13704 ;;		Unchanged: 0/0
 13705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13706 ;;      Params:         0       0       0       0       0       0       0
 13707 ;;      Locals:         1       0       0       0       0       0       0
 13708 ;;      Temps:          0       0       0       0       0       0       0
 13709 ;;      Totals:         1       0       0       0       0       0       0
 13710 ;;Total ram usage:        1 bytes
 13711 ;; Hardware stack levels used:    1
 13712 ;; Hardware stack levels required when called:    3
 13713 ;; This function calls:
 13714 ;;		_writeEEPROM
 13715 ;;		_ECANSetOperationMode
 13716 ;; This function is called by:
 13717 ;;		_vscp_handleProtocolEvent
 13718 ;; This function uses a non-reentrant model
 13719 ;;
 13720                           
 13721                           	psect	text65
 13722  005A82                     __ptext65:
 13723                           	opt stack 0
 13724  005A82                     _vscp_goBootloaderMode:
 13725                           	opt stack 26
 13726                           
 13727                           ; BSR set to: 0
 13728                           ;incstack = 0
 13729                           ;incstack = 0
 13730                           ;vscp_goBootloaderMode@algorithm stored from wreg
 13731  005A82  CFE8 F011          	movff	wreg,vscp_goBootloaderMode@algorithm
 13732                           
 13733                           ; BSR set to: 0
 13734                           ;main.c: 2753: if ( 0x01 != algorithm ) return;
 13735  005A86  0411               	decf	vscp_goBootloaderMode@algorithm,w,c
 13736  005A88  E10A               	bnz	l593
 13737                           
 13738                           ; BSR set to: 0
 13739                           ;main.c: 2757: writeEEPROM(0x00, 0xff);
 13740  005A8A  6A0F               	clrf	?_writeEEPROM+1,c
 13741  005A8C  6A0E               	clrf	?_writeEEPROM,c
 13742  005A8E  0EFF               	movlw	255
 13743  005A90  6810               	setf	?_writeEEPROM+2,c
 13744  005A92  ECCA  F02C         	call	_writeEEPROM	;wreg free
 13745                           
 13746                           ;main.c: 2760: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 13747  005A96  0E80               	movlw	128
 13748  005A98  ECAC  F02D         	call	_ECANSetOperationMode
 13749  005A9C  00FF               	reset		;# 
 13750  005A9E                     l593:
 13751  005A9E  0012               	return	
 13752  005AA0                     __end_of_vscp_goBootloaderMode:
 13753                           	opt stack 0
 13754                           tblptru	equ	0xFF8
 13755                           tblptrh	equ	0xFF7
 13756                           tblptrl	equ	0xFF6
 13757                           tablat	equ	0xFF5
 13758                           prodh	equ	0xFF4
 13759                           prodl	equ	0xFF3
 13760                           postinc0	equ	0xFEE
 13761                           wreg	equ	0xFE8
 13762                           postdec1	equ	0xFE5
 13763                           fsr1h	equ	0xFE2
 13764                           fsr1l	equ	0xFE1
 13765                           indf2	equ	0xFDF
 13766                           postinc2	equ	0xFDE
 13767                           postdec2	equ	0xFDD
 13768                           fsr2h	equ	0xFDA
 13769                           fsr2l	equ	0xFD9
 13770                           status	equ	0xFD8
 13771                           
 13772 ;; *************** function _vscp_getMatrixInfo *****************
 13773 ;; Defined at:
 13774 ;;		line 2687 in file "../main.c"
 13775 ;; Parameters:    Size  Location     Type
 13776 ;;  pData           1    wreg     PTR unsigned char 
 13777 ;;		 -> vscp_omsg(14), 
 13778 ;; Auto vars:     Size  Location     Type
 13779 ;;  pData           1   13[COMRAM] PTR unsigned char 
 13780 ;;		 -> vscp_omsg(14), 
 13781 ;;  i               1   14[COMRAM] unsigned char 
 13782 ;; Return value:  Size  Location     Type
 13783 ;;		None               void
 13784 ;; Registers used:
 13785 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13786 ;; Tracked objects:
 13787 ;;		On entry : F/0
 13788 ;;		On exit  : F/0
 13789 ;;		Unchanged: F/0
 13790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13791 ;;      Params:         0       0       0       0       0       0       0
 13792 ;;      Locals:         2       0       0       0       0       0       0
 13793 ;;      Temps:          0       0       0       0       0       0       0
 13794 ;;      Totals:         2       0       0       0       0       0       0
 13795 ;;Total ram usage:        2 bytes
 13796 ;; Hardware stack levels used:    1
 13797 ;; Hardware stack levels required when called:    2
 13798 ;; This function calls:
 13799 ;;		Nothing
 13800 ;; This function is called by:
 13801 ;;		_vscp_handleProtocolEvent
 13802 ;; This function uses a non-reentrant model
 13803 ;;
 13804                           
 13805                           	psect	text66
 13806  005AF6                     __ptext66:
 13807                           	opt stack 0
 13808  005AF6                     _vscp_getMatrixInfo:
 13809                           	opt stack 27
 13810                           
 13811                           ;incstack = 0
 13812                           ;incstack = 0
 13813                           ;vscp_getMatrixInfo@pData stored from wreg
 13814  005AF6  CFE8 F00E          	movff	wreg,vscp_getMatrixInfo@pData
 13815                           
 13816                           ; BSR set to: 0
 13817                           ;main.c: 2688: uint8_t i;
 13818                           ;main.c: 2692: for (i = 0; i < 8; i++) {
 13819  005AFA  6A0F               	clrf	vscp_getMatrixInfo@i,c
 13820  005AFC                     l8109:
 13821                           
 13822                           ; BSR set to: 0
 13823                           ;main.c: 2693: pData[ i ] = 0;
 13824  005AFC  500E               	movf	vscp_getMatrixInfo@pData,w,c
 13825  005AFE  240F               	addwf	vscp_getMatrixInfo@i,w,c
 13826  005B00  6ED9               	movwf	fsr2l,c
 13827  005B02  6ADA               	clrf	fsr2h,c
 13828  005B04  6ADF               	clrf	indf2,c
 13829                           
 13830                           ; BSR set to: 0
 13831  005B06  2A0F               	incf	vscp_getMatrixInfo@i,f,c
 13832                           
 13833                           ; BSR set to: 0
 13834  005B08  0E07               	movlw	7
 13835  005B0A  640F               	cpfsgt	vscp_getMatrixInfo@i,c
 13836  005B0C  D7F7               	goto	l8109
 13837                           
 13838                           ; BSR set to: 0
 13839  005B0E  0C07               	retlw	7
 13840  005B10                     __end_of_vscp_getMatrixInfo:
 13841                           	opt stack 0
 13842                           tblptru	equ	0xFF8
 13843                           tblptrh	equ	0xFF7
 13844                           tblptrl	equ	0xFF6
 13845                           tablat	equ	0xFF5
 13846                           prodh	equ	0xFF4
 13847                           prodl	equ	0xFF3
 13848                           postinc0	equ	0xFEE
 13849                           wreg	equ	0xFE8
 13850                           postdec1	equ	0xFE5
 13851                           fsr1h	equ	0xFE2
 13852                           fsr1l	equ	0xFE1
 13853                           indf2	equ	0xFDF
 13854                           postinc2	equ	0xFDE
 13855                           postdec2	equ	0xFDD
 13856                           fsr2h	equ	0xFDA
 13857                           fsr2l	equ	0xFD9
 13858                           status	equ	0xFD8
 13859                           
 13860 ;; *************** function _vscp_handleProbeState *****************
 13861 ;; Defined at:
 13862 ;;		line 206 in file "../../vscp_firmware/common/vscp_firmware.c"
 13863 ;; Parameters:    Size  Location     Type
 13864 ;;		None
 13865 ;; Auto vars:     Size  Location     Type
 13866 ;;		None
 13867 ;; Return value:  Size  Location     Type
 13868 ;;		None               void
 13869 ;; Registers used:
 13870 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13871 ;; Tracked objects:
 13872 ;;		On entry : 0/0
 13873 ;;		On exit  : F/0
 13874 ;;		Unchanged: 0/0
 13875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13876 ;;      Params:         0       0       0       0       0       0       0
 13877 ;;      Locals:         0       0       0       0       0       0       0
 13878 ;;      Temps:          0       0       0       0       0       0       0
 13879 ;;      Totals:         0       0       0       0       0       0       0
 13880 ;;Total ram usage:        0 bytes
 13881 ;; Hardware stack levels used:    1
 13882 ;; Hardware stack levels required when called:    8
 13883 ;; This function calls:
 13884 ;;		_vscp_goActiveState
 13885 ;;		_vscp_sendEvent
 13886 ;;		_vscp_writeNicknamePermanent
 13887 ;; This function is called by:
 13888 ;;		_main
 13889 ;; This function uses a non-reentrant model
 13890 ;;
 13891                           
 13892                           	psect	text67
 13893  004A2E                     __ptext67:
 13894                           	opt stack 0
 13895  004A2E                     _vscp_handleProbeState:
 13896                           	opt stack 22
 13897                           
 13898                           ;vscp_firmware.c: 207: switch (vscp_node_substate) {
 13899                           
 13900                           ; BSR set to: 0
 13901                           ;incstack = 0
 13902                           ;incstack = 0
 13903  004A2E  D055               	goto	l9685
 13904  004A30                     l9617:
 13905                           
 13906                           ;vscp_firmware.c: 211: if (0xff != vscp_probe_address) {
 13907  004A30  284F               	incf	_vscp_probe_address,w,c
 13908  004A32  E012               	bz	l9633
 13909                           
 13910                           ;vscp_firmware.c: 213: vscp_omsg.flags = 0x80 + 1;
 13911  004A34  0E81               	movlw	129
 13912  004A36  0100               	movlb	0	; () banked
 13913  004A38  6FCB               	movwf	_vscp_omsg& (0+255),b
 13914                           
 13915                           ; BSR set to: 0
 13916                           ;vscp_firmware.c: 214: vscp_omsg.priority = 0x00;
 13917  004A3A  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
 13918                           
 13919                           ; BSR set to: 0
 13920                           ;vscp_firmware.c: 215: vscp_omsg.vscp_class = 0;
 13921  004A3C  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
 13922  004A3E  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
 13923                           
 13924                           ;vscp_firmware.c: 216: vscp_omsg.vscp_type = 2;
 13925  004A40  0E02               	movlw	2
 13926  004A42  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
 13927                           
 13928                           ; BSR set to: 0
 13929                           ;vscp_firmware.c: 217: vscp_omsg.data[ 0 ] = vscp_probe_address;
 13930  004A44  C04F  F0D1         	movff	_vscp_probe_address,_vscp_omsg+6
 13931                           
 13932                           ; BSR set to: 0
 13933                           ;vscp_firmware.c: 220: vscp_sendEvent();
 13934  004A48  EC37  F02C         	call	_vscp_sendEvent	;wreg free
 13935                           
 13936                           ;vscp_firmware.c: 222: vscp_node_substate = 0x01;
 13937  004A4C  0E01               	movlw	1
 13938  004A4E  6E4E               	movwf	_vscp_node_substate,c
 13939  004A50                     l9631:
 13940                           
 13941                           ;vscp_firmware.c: 223: vscp_timer = 0;
 13942  004A50  0101               	movlb	1	; () banked
 13943  004A52  6B1E               	clrf	_vscp_timer& (0+255),b	;volatile
 13944  004A54  6B1F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 13945                           
 13946                           ;vscp_firmware.c: 225: }
 13947  004A56  D047               	goto	l1050
 13948  004A58                     l9633:
 13949                           
 13950                           ;vscp_firmware.c: 226: else {
 13951                           ;vscp_firmware.c: 229: vscp_node_state = 0x04;
 13952  004A58  0E04               	movlw	4
 13953  004A5A  0100               	movlb	0	; () banked
 13954  004A5C  6FBC               	movwf	_vscp_node_state& (0+255),b
 13955                           
 13956                           ;vscp_firmware.c: 232: vscp_omsg.flags = 0x80 + 1;
 13957  004A5E  0E81               	movlw	129
 13958  004A60  6FCB               	movwf	_vscp_omsg& (0+255),b
 13959                           
 13960                           ; BSR set to: 0
 13961                           ;vscp_firmware.c: 233: vscp_omsg.data[ 0 ] = 0xff;
 13962  004A62  69D1               	setf	(_vscp_omsg+6)& (0+255),b
 13963                           
 13964                           ;vscp_firmware.c: 234: vscp_omsg.priority = 0x07;
 13965  004A64  0E07               	movlw	7
 13966  004A66  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
 13967                           
 13968                           ; BSR set to: 0
 13969                           ;vscp_firmware.c: 235: vscp_omsg.vscp_class = 0;
 13970  004A68  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
 13971  004A6A  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
 13972                           
 13973                           ;vscp_firmware.c: 236: vscp_omsg.vscp_type = 3;
 13974  004A6C  0E03               	movlw	3
 13975  004A6E  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
 13976                           
 13977                           ; BSR set to: 0
 13978                           ;vscp_firmware.c: 239: vscp_sendEvent();
 13979  004A70  EC37  F02C         	call	_vscp_sendEvent	;wreg free
 13980  004A74  D038               	goto	l1050
 13981  004A76                     l1051:
 13982                           
 13983                           ;vscp_firmware.c: 246: if (vscp_imsg.flags & 0x80) {
 13984  004A76  0100               	movlb	0	; () banked
 13985  004A78  AFBD               	btfss	_vscp_imsg& (0+255),7,b
 13986  004A7A  D00F               	goto	l9657
 13987                           
 13988                           ; BSR set to: 0
 13989                           ;vscp_firmware.c: 249: if ((0 == vscp_imsg.vscp_class) &&
 13990                           ;vscp_firmware.c: 250: (3 == vscp_imsg.vscp_type)) {
 13991  004A7C  51C0               	movf	(_vscp_imsg+3)& (0+255),w,b
 13992  004A7E  11BF               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 13993  004A80  E132               	bnz	l1050
 13994                           
 13995                           ; BSR set to: 0
 13996  004A82  51C1               	movf	(_vscp_imsg+4)& (0+255),w,b
 13997  004A84  0A03               	xorlw	3
 13998  004A86  E12F               	bnz	l1050
 13999                           
 14000                           ; BSR set to: 0
 14001                           ;vscp_firmware.c: 253: if (0 == vscp_probe_address) {
 14002  004A88  664F               	tstfsz	_vscp_probe_address,c
 14003  004A8A  D003               	goto	l9651
 14004                           
 14005                           ; BSR set to: 0
 14006                           ;vscp_firmware.c: 257: vscp_node_state = 0x02;
 14007  004A8C  0E02               	movlw	2
 14008  004A8E  6FBC               	movwf	_vscp_node_state& (0+255),b
 14009  004A90  D7DF               	goto	l9631
 14010  004A92                     l9651:
 14011                           
 14012                           ; BSR set to: 0
 14013                           ;vscp_firmware.c: 261: else {
 14014                           ;vscp_firmware.c: 264: vscp_probe_address++;
 14015  004A92  2A4F               	incf	_vscp_probe_address,f,c
 14016                           
 14017                           ; BSR set to: 0
 14018                           ;vscp_firmware.c: 265: vscp_node_substate = 0x00;
 14019  004A94  6A4E               	clrf	_vscp_node_substate,c
 14020  004A96                     l9655:
 14021                           
 14022                           ;vscp_firmware.c: 266: vscp_probe_cnt = 0;
 14023  004A96  6A50               	clrf	_vscp_probe_cnt,c
 14024  004A98  D026               	goto	l1050
 14025  004A9A                     l9657:
 14026                           
 14027                           ; BSR set to: 0
 14028                           ;vscp_firmware.c: 271: else {
 14029                           ;vscp_firmware.c: 273: if (vscp_timer > 1000) {
 14030  004A9A  0EE9               	movlw	233
 14031  004A9C  0101               	movlb	1	; () banked
 14032  004A9E  5D1E               	subwf	_vscp_timer& (0+255),w,b	;volatile
 14033  004AA0  0E03               	movlw	3
 14034  004AA2  591F               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 14035  004AA4  E320               	bnc	l1050
 14036                           
 14037                           ; BSR set to: 1
 14038                           ;vscp_firmware.c: 275: vscp_probe_cnt++;
 14039  004AA6  2A50               	incf	_vscp_probe_cnt,f,c
 14040                           
 14041                           ; BSR set to: 1
 14042                           ;vscp_firmware.c: 277: if (vscp_probe_cnt >= 3) {
 14043  004AA8  0E02               	movlw	2
 14044  004AAA  6450               	cpfsgt	_vscp_probe_cnt,c
 14045  004AAC  D014               	goto	l1058
 14046                           
 14047                           ; BSR set to: 1
 14048                           ;vscp_firmware.c: 280: if (0 == vscp_probe_address) {
 14049  004AAE  664F               	tstfsz	_vscp_probe_address,c
 14050  004AB0  D005               	goto	l1059
 14051                           
 14052                           ; BSR set to: 1
 14053                           ;vscp_firmware.c: 283: vscp_probe_address++;
 14054  004AB2  2A4F               	incf	_vscp_probe_address,f,c
 14055                           
 14056                           ; BSR set to: 1
 14057                           ;vscp_firmware.c: 284: vscp_node_substate = 0x00;
 14058  004AB4  6A4E               	clrf	_vscp_node_substate,c
 14059                           
 14060                           ; BSR set to: 1
 14061                           ;vscp_firmware.c: 285: vscp_timer = 0;
 14062  004AB6  6B1E               	clrf	_vscp_timer& (0+255),b	;volatile
 14063  004AB8  6B1F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14064  004ABA  D7ED               	goto	l9655
 14065  004ABC                     l1059:
 14066                           
 14067                           ; BSR set to: 1
 14068                           ;vscp_firmware.c: 289: else {
 14069                           ;vscp_firmware.c: 292: vscp_nickname = vscp_probe_address;
 14070  004ABC  C04F  F0BB         	movff	_vscp_probe_address,_vscp_nickname
 14071                           
 14072                           ; BSR set to: 1
 14073                           ;vscp_firmware.c: 293: vscp_node_state = 0x03;
 14074  004AC0  0E03               	movlw	3
 14075  004AC2  0100               	movlb	0	; () banked
 14076  004AC4  6FBC               	movwf	_vscp_node_state& (0+255),b
 14077                           
 14078                           ; BSR set to: 0
 14079                           ;vscp_firmware.c: 294: vscp_node_substate = 0x00;
 14080  004AC6  6A4E               	clrf	_vscp_node_substate,c
 14081                           
 14082                           ; BSR set to: 0
 14083                           ;vscp_firmware.c: 295: vscp_writeNicknamePermanent(vscp_nickname);
 14084  004AC8  51BB               	movf	_vscp_nickname& (0+255),w,b
 14085  004ACA  ECE0  F02D         	call	_vscp_writeNicknamePermanent
 14086                           
 14087                           ;vscp_firmware.c: 298: vscp_probe_cnt = 0;
 14088  004ACE  6A50               	clrf	_vscp_probe_cnt,c
 14089                           
 14090                           ;vscp_firmware.c: 299: vscp_goActiveState();
 14091  004AD0  EC50  F02D         	call	_vscp_goActiveState	;wreg free
 14092  004AD4  D008               	goto	l1050
 14093  004AD6                     l1058:
 14094                           
 14095                           ;vscp_firmware.c: 303: else {
 14096                           ;vscp_firmware.c: 304: vscp_node_substate = 0x00;
 14097  004AD6  6A4E               	clrf	_vscp_node_substate,c
 14098  004AD8  D006               	goto	l1050
 14099  004ADA                     l9685:
 14100  004ADA  504E               	movf	_vscp_node_substate,w,c
 14101                           
 14102                           ; Switch size 1, requested type "speed"
 14103                           ; Number of cases is 3, Range of values is 0 to 2
 14104                           ; switch strategies available:
 14105                           ; Name         Instructions Cycles
 14106                           ; simple_byte           10     6 (average)
 14107                           ;	Chosen strategy is simple_byte
 14108  004ADC  E0A9               	bz	l9617
 14109  004ADE  0A01               	xorlw	1	; case 1
 14110  004AE0  E0CA               	bz	l1051
 14111  004AE2  0A03               	xorlw	3	; case 2
 14112  004AE4  E1F8               	bnz	l1058
 14113  004AE6                     l1050:
 14114                           
 14115                           ;vscp_firmware.c: 319: vscp_imsg.flags = 0;
 14116  004AE6  0100               	movlb	0	; () banked
 14117  004AE8  6BBD               	clrf	_vscp_imsg& (0+255),b
 14118                           
 14119                           ; BSR set to: 0
 14120  004AEA  0012               	return	
 14121  004AEC                     __end_of_vscp_handleProbeState:
 14122                           	opt stack 0
 14123                           tblptru	equ	0xFF8
 14124                           tblptrh	equ	0xFF7
 14125                           tblptrl	equ	0xFF6
 14126                           tablat	equ	0xFF5
 14127                           prodh	equ	0xFF4
 14128                           prodl	equ	0xFF3
 14129                           postinc0	equ	0xFEE
 14130                           wreg	equ	0xFE8
 14131                           postdec1	equ	0xFE5
 14132                           fsr1h	equ	0xFE2
 14133                           fsr1l	equ	0xFE1
 14134                           indf2	equ	0xFDF
 14135                           postinc2	equ	0xFDE
 14136                           postdec2	equ	0xFDD
 14137                           fsr2h	equ	0xFDA
 14138                           fsr2l	equ	0xFD9
 14139                           status	equ	0xFD8
 14140                           
 14141 ;; *************** function _vscp_goActiveState *****************
 14142 ;; Defined at:
 14143 ;;		line 362 in file "../../vscp_firmware/common/vscp_firmware.c"
 14144 ;; Parameters:    Size  Location     Type
 14145 ;;		None
 14146 ;; Auto vars:     Size  Location     Type
 14147 ;;		None
 14148 ;; Return value:  Size  Location     Type
 14149 ;;		None               void
 14150 ;; Registers used:
 14151 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14152 ;; Tracked objects:
 14153 ;;		On entry : 0/0
 14154 ;;		On exit  : 0/0
 14155 ;;		Unchanged: 0/0
 14156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14157 ;;      Params:         0       0       0       0       0       0       0
 14158 ;;      Locals:         0       0       0       0       0       0       0
 14159 ;;      Temps:          0       0       0       0       0       0       0
 14160 ;;      Totals:         0       0       0       0       0       0       0
 14161 ;;Total ram usage:        0 bytes
 14162 ;; Hardware stack levels used:    1
 14163 ;; Hardware stack levels required when called:    7
 14164 ;; This function calls:
 14165 ;;		_vscp_sendEvent
 14166 ;; This function is called by:
 14167 ;;		_main
 14168 ;;		_vscp_handleProbeState
 14169 ;; This function uses a non-reentrant model
 14170 ;;
 14171                           
 14172                           	psect	text68
 14173  005AA0                     __ptext68:
 14174                           	opt stack 0
 14175  005AA0                     _vscp_goActiveState:
 14176                           	opt stack 22
 14177                           
 14178                           ;vscp_firmware.c: 363: vscp_omsg.flags = 0x80 + 1;
 14179                           
 14180                           ; BSR set to: 0
 14181                           ;incstack = 0
 14182                           ;incstack = 0
 14183  005AA0  0E81               	movlw	129
 14184  005AA2  0100               	movlb	0	; () banked
 14185  005AA4  6FCB               	movwf	_vscp_omsg& (0+255),b
 14186                           
 14187                           ; BSR set to: 0
 14188                           ;vscp_firmware.c: 364: vscp_omsg.priority = 0x00;
 14189  005AA6  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
 14190                           
 14191                           ; BSR set to: 0
 14192                           ;vscp_firmware.c: 365: vscp_omsg.vscp_class = 0;
 14193  005AA8  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
 14194  005AAA  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
 14195                           
 14196                           ;vscp_firmware.c: 366: vscp_omsg.vscp_type = 2;
 14197  005AAC  0E02               	movlw	2
 14198  005AAE  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
 14199                           
 14200                           ; BSR set to: 0
 14201                           ;vscp_firmware.c: 367: vscp_omsg.data[ 0 ] = vscp_nickname;
 14202  005AB0  C0BB  F0D1         	movff	_vscp_nickname,_vscp_omsg+6
 14203                           
 14204                           ; BSR set to: 0
 14205                           ;vscp_firmware.c: 370: vscp_sendEvent();
 14206  005AB4  EC37  F02C         	call	_vscp_sendEvent	;wreg free
 14207                           
 14208                           ;vscp_firmware.c: 372: vscp_initledfunc = 0x01;
 14209  005AB8  0E01               	movlw	1
 14210  005ABA  6E4D               	movwf	_vscp_initledfunc,c
 14211  005ABC  0C01               	retlw	1
 14212  005ABE                     __end_of_vscp_goActiveState:
 14213                           	opt stack 0
 14214                           tblptru	equ	0xFF8
 14215                           tblptrh	equ	0xFF7
 14216                           tblptrl	equ	0xFF6
 14217                           tablat	equ	0xFF5
 14218                           prodh	equ	0xFF4
 14219                           prodl	equ	0xFF3
 14220                           postinc0	equ	0xFEE
 14221                           wreg	equ	0xFE8
 14222                           postdec1	equ	0xFE5
 14223                           fsr1h	equ	0xFE2
 14224                           fsr1l	equ	0xFE1
 14225                           indf2	equ	0xFDF
 14226                           postinc2	equ	0xFDE
 14227                           postdec2	equ	0xFDD
 14228                           fsr2h	equ	0xFDA
 14229                           fsr2l	equ	0xFD9
 14230                           status	equ	0xFD8
 14231                           
 14232 ;; *************** function _vscp_sendEvent *****************
 14233 ;; Defined at:
 14234 ;;		line 1280 in file "../../vscp_firmware/common/vscp_firmware.c"
 14235 ;; Parameters:    Size  Location     Type
 14236 ;;		None
 14237 ;; Auto vars:     Size  Location     Type
 14238 ;;  rv              1   66[COMRAM] unsigned char 
 14239 ;; Return value:  Size  Location     Type
 14240 ;;                  1    wreg      unsigned char 
 14241 ;; Registers used:
 14242 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14243 ;; Tracked objects:
 14244 ;;		On entry : F/0
 14245 ;;		On exit  : 0/0
 14246 ;;		Unchanged: 0/0
 14247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14248 ;;      Params:         0       0       0       0       0       0       0
 14249 ;;      Locals:         1       0       0       0       0       0       0
 14250 ;;      Temps:          0       0       0       0       0       0       0
 14251 ;;      Totals:         1       0       0       0       0       0       0
 14252 ;;Total ram usage:        1 bytes
 14253 ;; Hardware stack levels used:    1
 14254 ;; Hardware stack levels required when called:    6
 14255 ;; This function calls:
 14256 ;;		_sendVSCPFrame
 14257 ;; This function is called by:
 14258 ;;		_doOneSecondWork
 14259 ;;		_sendTempEvent
 14260 ;;		_vscp_handleProbeState
 14261 ;;		_vscp_goActiveState
 14262 ;;		_vscp_sendHeartBeat
 14263 ;;		_vscp_newNodeOnline
 14264 ;;		_vscp_handleProtocolEvent
 14265 ;; This function uses a non-reentrant model
 14266 ;;
 14267                           
 14268                           	psect	text69
 14269  00586E                     __ptext69:
 14270                           	opt stack 0
 14271  00586E                     _vscp_sendEvent:
 14272                           	opt stack 22
 14273                           
 14274                           ; BSR set to: 0
 14275                           ;vscp_firmware.c: 1281: int8_t rv;
 14276                           ;vscp_firmware.c: 1283: if ( !(rv = sendVSCPFrame( vscp_omsg.vscp_class,
 14277                           ;vscp_firmware.c: 1284: vscp_omsg.vscp_type,
 14278                           ;vscp_firmware.c: 1285: vscp_nickname,
 14279                           ;vscp_firmware.c: 1286: vscp_omsg.priority,
 14280                           ;vscp_firmware.c: 1287: (vscp_omsg.flags & 0x0f),
 14281                           ;vscp_firmware.c: 1288: vscp_omsg.data ) ) ) {
 14282                           
 14283                           ;incstack = 0
 14284                           ;incstack = 0
 14285  00586E  C0CD  F060         	movff	_vscp_omsg+2,?_sendVSCPFrame
 14286  005872  C0CE  F061         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 14287  005876  C0CF  F062         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 14288  00587A  C0BB  F063         	movff	_vscp_nickname,?_sendVSCPFrame+3
 14289  00587E  C0CC  F064         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 14290  005882  51CB               	movf	_vscp_omsg& (0+255),w,b
 14291  005884  0B0F               	andlw	15
 14292  005886  6F65               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 14293  005888  0ED1               	movlw	low (_vscp_omsg+6)
 14294  00588A  6F66               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 14295  00588C  ECD4  F025         	call	_sendVSCPFrame	;wreg free
 14296  005890  6E43               	movwf	vscp_sendEvent@rv,c
 14297  005892  6643               	tstfsz	vscp_sendEvent@rv& (0+255),c
 14298  005894  D001               	goto	l10485
 14299                           
 14300                           ;vscp_firmware.c: 1289: vscp_errorcnt++;
 14301  005896  2A4B               	incf	_vscp_errorcnt,f,c
 14302  005898                     l10485:
 14303                           
 14304                           ;vscp_firmware.c: 1290: }
 14305                           ;vscp_firmware.c: 1292: return rv;
 14306  005898  5043               	movf	vscp_sendEvent@rv,w,c
 14307  00589A  0012               	return	
 14308  00589C                     __end_of_vscp_sendEvent:
 14309                           	opt stack 0
 14310                           tblptru	equ	0xFF8
 14311                           tblptrh	equ	0xFF7
 14312                           tblptrl	equ	0xFF6
 14313                           tablat	equ	0xFF5
 14314                           prodh	equ	0xFF4
 14315                           prodl	equ	0xFF3
 14316                           postinc0	equ	0xFEE
 14317                           wreg	equ	0xFE8
 14318                           postdec1	equ	0xFE5
 14319                           fsr1h	equ	0xFE2
 14320                           fsr1l	equ	0xFE1
 14321                           indf2	equ	0xFDF
 14322                           postinc2	equ	0xFDE
 14323                           postdec2	equ	0xFDD
 14324                           fsr2h	equ	0xFDA
 14325                           fsr2l	equ	0xFD9
 14326                           status	equ	0xFD8
 14327                           
 14328 ;; *************** function _sendVSCPFrame *****************
 14329 ;; Defined at:
 14330 ;;		line 2871 in file "../main.c"
 14331 ;; Parameters:    Size  Location     Type
 14332 ;;  vscpclass       2    0[BANK0 ] unsigned short 
 14333 ;;  vscptype        1    2[BANK0 ] unsigned char 
 14334 ;;  nodeid          1    3[BANK0 ] unsigned char 
 14335 ;;  priority        1    4[BANK0 ] unsigned char 
 14336 ;;  size            1    5[BANK0 ] unsigned char 
 14337 ;;  pData           1    6[BANK0 ] PTR unsigned char 
 14338 ;;		 -> vscp_omsg(14), 
 14339 ;; Auto vars:     Size  Location     Type
 14340 ;;  id              4   27[BANK0 ] unsigned long 
 14341 ;; Return value:  Size  Location     Type
 14342 ;;                  1    wreg      unsigned char 
 14343 ;; Registers used:
 14344 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14345 ;; Tracked objects:
 14346 ;;		On entry : F/0
 14347 ;;		On exit  : F/0
 14348 ;;		Unchanged: 0/0
 14349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14350 ;;      Params:         0       7       0       0       0       0       0
 14351 ;;      Locals:         0       4       0       0       0       0       0
 14352 ;;      Temps:          0      20       0       0       0       0       0
 14353 ;;      Totals:         0      31       0       0       0       0       0
 14354 ;;Total ram usage:       31 bytes
 14355 ;; Hardware stack levels used:    1
 14356 ;; Hardware stack levels required when called:    5
 14357 ;; This function calls:
 14358 ;;		_sendCANFrame
 14359 ;; This function is called by:
 14360 ;;		_vscp_sendEvent
 14361 ;; This function uses a non-reentrant model
 14362 ;;
 14363                           
 14364                           	psect	text70
 14365  004BA8                     __ptext70:
 14366                           	opt stack 0
 14367  004BA8                     _sendVSCPFrame:
 14368                           	opt stack 22
 14369                           
 14370                           ; BSR set to: 0
 14371                           ;main.c: 2872: uint32_t id = ((uint32_t) priority << 26) |
 14372                           ;main.c: 2873: ((uint32_t) vscpclass << 16) |
 14373                           ;main.c: 2874: ((uint32_t) vscptype << 8) |
 14374                           ;main.c: 2875: nodeid;
 14375                           
 14376                           ;incstack = 0
 14377                           ;incstack = 0
 14378  004BA8  C062  F067         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 14379  004BAC  6B68               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 14380  004BAE  6B69               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 14381  004BB0  6B6A               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 14382  004BB2  C069  F06A         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 14383  004BB6  C068  F069         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 14384  004BBA  C067  F068         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 14385  004BBE  6B67               	clrf	??_sendVSCPFrame& (0+255),b
 14386  004BC0  5160               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 14387  004BC2  6F6B               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 14388  004BC4  5161               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 14389  004BC6  6F6C               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 14390  004BC8  6B6D               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 14391  004BCA  6B6E               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 14392  004BCC  C06C  F06E         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 14393  004BD0  C06B  F06D         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 14394  004BD4  6B6C               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 14395  004BD6  6B6B               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 14396  004BD8  C064  F06F         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 14397  004BDC  6B70               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 14398  004BDE  6B71               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 14399  004BE0  6B72               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 14400  004BE2  0E1A               	movlw	26
 14401  004BE4                     u8985:
 14402  004BE4  90D8               	bcf	status,0,c
 14403  004BE6  376F               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 14404  004BE8  3770               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 14405  004BEA  3771               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 14406  004BEC  3772               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 14407  004BEE  2EE8               	decfsz	wreg,f,c
 14408  004BF0  D7F9               	goto	u8985
 14409  004BF2  516B               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 14410  004BF4  116F               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 14411  004BF6  6F73               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 14412  004BF8  516C               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 14413  004BFA  1170               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 14414  004BFC  6F74               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 14415  004BFE  516D               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 14416  004C00  1171               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 14417  004C02  6F75               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 14418  004C04  516E               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 14419  004C06  1172               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 14420  004C08  6F76               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 14421  004C0A  5167               	movf	??_sendVSCPFrame& (0+255),w,b
 14422  004C0C  1173               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 14423  004C0E  6F77               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 14424  004C10  5168               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 14425  004C12  1174               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 14426  004C14  6F78               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 14427  004C16  5169               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 14428  004C18  1175               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 14429  004C1A  6F79               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 14430  004C1C  516A               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 14431  004C1E  1176               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 14432  004C20  6F7A               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 14433  004C22  5163               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 14434  004C24  1177               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 14435  004C26  6F7B               	movwf	sendVSCPFrame@id& (0+255),b
 14436  004C28  5178               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 14437  004C2A  6F7C               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 14438  004C2C  5179               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 14439  004C2E  6F7D               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 14440  004C30  517A               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 14441  004C32  6F7E               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 14442                           
 14443                           ; BSR set to: 0
 14444                           ;main.c: 2877: if (!sendCANFrame(id, size, pData)) {
 14445  004C34  C07B  F03C         	movff	sendVSCPFrame@id,?_sendCANFrame
 14446  004C38  C07C  F03D         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 14447  004C3C  C07D  F03E         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 14448  004C40  C07E  F03F         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 14449  004C44  C065  F040         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 14450  004C48  C066  F041         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 14451  004C4C  ECEB  F02A         	call	_sendCANFrame	;wreg free
 14452  004C50  0900               	iorlw	0
 14453  004C52  E103               	bnz	l11037
 14454                           
 14455                           ; BSR set to: 0
 14456                           ;main.c: 2879: vscp_errorcnt++;
 14457  004C54  2A4B               	incf	_vscp_errorcnt,f,c
 14458                           
 14459                           ; BSR set to: 0
 14460                           ;main.c: 2880: return 0;
 14461  004C56  0E00               	movlw	0
 14462  004C58  D001               	goto	l629
 14463  004C5A                     l11037:
 14464                           
 14465                           ; BSR set to: 0
 14466                           ;main.c: 2881: }
 14467                           ;main.c: 2883: return 1;
 14468  004C5A  0E01               	movlw	1
 14469  004C5C                     l629:
 14470                           
 14471                           ; BSR set to: 0
 14472  004C5C  0012               	return	
 14473  004C5E                     __end_of_sendVSCPFrame:
 14474                           	opt stack 0
 14475                           tblptru	equ	0xFF8
 14476                           tblptrh	equ	0xFF7
 14477                           tblptrl	equ	0xFF6
 14478                           tablat	equ	0xFF5
 14479                           prodh	equ	0xFF4
 14480                           prodl	equ	0xFF3
 14481                           postinc0	equ	0xFEE
 14482                           wreg	equ	0xFE8
 14483                           postdec1	equ	0xFE5
 14484                           fsr1h	equ	0xFE2
 14485                           fsr1l	equ	0xFE1
 14486                           indf2	equ	0xFDF
 14487                           postinc2	equ	0xFDE
 14488                           postdec2	equ	0xFDD
 14489                           fsr2h	equ	0xFDA
 14490                           fsr2l	equ	0xFD9
 14491                           status	equ	0xFD8
 14492                           
 14493 ;; *************** function _sendCANFrame *****************
 14494 ;; Defined at:
 14495 ;;		line 2918 in file "../main.c"
 14496 ;; Parameters:    Size  Location     Type
 14497 ;;  id              4   59[COMRAM] unsigned long 
 14498 ;;  dlc             1   63[COMRAM] unsigned char 
 14499 ;;  pdata           1   64[COMRAM] PTR unsigned char 
 14500 ;;		 -> vscp_omsg(14), 
 14501 ;; Auto vars:     Size  Location     Type
 14502 ;;  rv              1   65[COMRAM] unsigned char 
 14503 ;; Return value:  Size  Location     Type
 14504 ;;                  1    wreg      unsigned char 
 14505 ;; Registers used:
 14506 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14507 ;; Tracked objects:
 14508 ;;		On entry : F/0
 14509 ;;		On exit  : F/0
 14510 ;;		Unchanged: 0/0
 14511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14512 ;;      Params:         6       0       0       0       0       0       0
 14513 ;;      Locals:         1       0       0       0       0       0       0
 14514 ;;      Temps:          0       0       0       0       0       0       0
 14515 ;;      Totals:         7       0       0       0       0       0       0
 14516 ;;Total ram usage:        7 bytes
 14517 ;; Hardware stack levels used:    1
 14518 ;; Hardware stack levels required when called:    4
 14519 ;; This function calls:
 14520 ;;		_ECANSendMessage
 14521 ;; This function is called by:
 14522 ;;		_sendVSCPFrame
 14523 ;; This function uses a non-reentrant model
 14524 ;;
 14525                           
 14526                           	psect	text71
 14527  0055D6                     __ptext71:
 14528                           	opt stack 0
 14529  0055D6                     _sendCANFrame:
 14530                           	opt stack 22
 14531                           
 14532                           ; BSR set to: 0
 14533                           ;main.c: 2919: uint8_t rv = 0;
 14534                           
 14535                           ; BSR set to: 0
 14536                           ;incstack = 0
 14537                           ;incstack = 0
 14538  0055D6  6A42               	clrf	sendCANFrame@rv,c
 14539                           
 14540                           ;main.c: 2921: sendTimer = 0;
 14541  0055D8  0101               	movlb	1	; () banked
 14542  0055DA  6B1A               	clrf	_sendTimer& (0+255),b	;volatile
 14543  0055DC  6B1B               	clrf	(_sendTimer+1)& (0+255),b	;volatile
 14544                           
 14545                           ;main.c: 2922: while ( sendTimer < 1000 ) {
 14546  0055DE  D015               	goto	l11047
 14547  0055E0                     l11043:
 14548                           
 14549                           ; BSR set to: 1
 14550                           ;main.c: 2923: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 14551  0055E0  C03C  F018         	movff	sendCANFrame@id,?_ECANSendMessage
 14552  0055E4  C03D  F019         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 14553  0055E8  C03E  F01A         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 14554  0055EC  C03F  F01B         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 14555  0055F0  C041  F01C         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 14556  0055F4  C040  F01D         	movff	sendCANFrame@dlc,?_ECANSendMessage+5
 14557  0055F8  0E20               	movlw	32
 14558  0055FA  6E1E               	movwf	?_ECANSendMessage+6,c
 14559  0055FC  EC06  F01F         	call	_ECANSendMessage	;wreg free
 14560  005600  0900               	iorlw	0
 14561  005602  E003               	bz	l11047
 14562                           
 14563                           ;main.c: 2924: rv = 1;
 14564  005604  0E01               	movlw	1
 14565  005606  6E42               	movwf	sendCANFrame@rv,c
 14566                           
 14567                           ;main.c: 2925: break;
 14568  005608  D006               	goto	l639
 14569  00560A                     l11047:
 14570  00560A  0EE8               	movlw	232
 14571  00560C  0101               	movlb	1	; () banked
 14572  00560E  5D1A               	subwf	_sendTimer& (0+255),w,b	;volatile
 14573  005610  0E03               	movlw	3
 14574  005612  591B               	subwfb	(_sendTimer+1)& (0+255),w,b	;volatile
 14575  005614  E3E5               	bnc	l11043
 14576  005616                     l639:
 14577                           
 14578                           ;main.c: 2926: }
 14579                           ;main.c: 2927: }
 14580                           ;main.c: 2929: vscp_omsg.flags = 0;
 14581  005616  0100               	movlb	0	; () banked
 14582  005618  6BCB               	clrf	_vscp_omsg& (0+255),b
 14583                           
 14584                           ; BSR set to: 0
 14585                           ;main.c: 2931: return rv;
 14586  00561A  5042               	movf	sendCANFrame@rv,w,c
 14587                           
 14588                           ; BSR set to: 0
 14589  00561C  0012               	return	
 14590  00561E                     __end_of_sendCANFrame:
 14591                           	opt stack 0
 14592                           tblptru	equ	0xFF8
 14593                           tblptrh	equ	0xFF7
 14594                           tblptrl	equ	0xFF6
 14595                           tablat	equ	0xFF5
 14596                           prodh	equ	0xFF4
 14597                           prodl	equ	0xFF3
 14598                           postinc0	equ	0xFEE
 14599                           wreg	equ	0xFE8
 14600                           postdec1	equ	0xFE5
 14601                           fsr1h	equ	0xFE2
 14602                           fsr1l	equ	0xFE1
 14603                           indf2	equ	0xFDF
 14604                           postinc2	equ	0xFDE
 14605                           postdec2	equ	0xFDD
 14606                           fsr2h	equ	0xFDA
 14607                           fsr2l	equ	0xFD9
 14608                           status	equ	0xFD8
 14609                           
 14610 ;; *************** function _ECANSendMessage *****************
 14611 ;; Defined at:
 14612 ;;		line 617 in file "../ECAN.c"
 14613 ;; Parameters:    Size  Location     Type
 14614 ;;  id              4   23[COMRAM] unsigned long 
 14615 ;;  data            1   27[COMRAM] PTR unsigned char 
 14616 ;;		 -> vscp_omsg(14), 
 14617 ;;  dataLen         1   28[COMRAM] unsigned char 
 14618 ;;  msgFlags        1   29[COMRAM] enum E16306
 14619 ;; Auto vars:     Size  Location     Type
 14620 ;;  pb             18   31[COMRAM] PTR unsigned char [9]
 14621 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 14622 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 14623 ;;		 -> B0CON(1), 
 14624 ;;  ptr             2   57[COMRAM] PTR unsigned char 
 14625 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 14626 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 14627 ;;		 -> B0CON(1), 
 14628 ;;  tempPtr         2   53[COMRAM] PTR unsigned char 
 14629 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 14630 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 14631 ;;		 -> B0CON(1), 
 14632 ;;  i               1   56[COMRAM] unsigned char 
 14633 ;;  temp            1   55[COMRAM] unsigned char 
 14634 ;;  tempBSEL0       1   52[COMRAM] struct .
 14635 ;;  j               1   51[COMRAM] unsigned char 
 14636 ;;  buffers         1   50[COMRAM] unsigned char 
 14637 ;;  mode            1   49[COMRAM] unsigned char 
 14638 ;; Return value:  Size  Location     Type
 14639 ;;                  1    wreg      enum E15660
 14640 ;; Registers used:
 14641 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14642 ;; Tracked objects:
 14643 ;;		On entry : E/1
 14644 ;;		On exit  : 3/1
 14645 ;;		Unchanged: 0/0
 14646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14647 ;;      Params:         7       0       0       0       0       0       0
 14648 ;;      Locals:        28       0       0       0       0       0       0
 14649 ;;      Temps:          1       0       0       0       0       0       0
 14650 ;;      Totals:        36       0       0       0       0       0       0
 14651 ;;Total ram usage:       36 bytes
 14652 ;; Hardware stack levels used:    1
 14653 ;; Hardware stack levels required when called:    3
 14654 ;; This function calls:
 14655 ;;		__CANIDToRegs
 14656 ;; This function is called by:
 14657 ;;		_sendCANFrame
 14658 ;; This function uses a non-reentrant model
 14659 ;;
 14660                           
 14661                           	psect	text72
 14662  003E0C                     __ptext72:
 14663                           	opt stack 0
 14664  003E0C                     _ECANSendMessage:
 14665                           	opt stack 22
 14666                           
 14667                           ;ECAN.c: 619: BYTE mode;
 14668                           ;ECAN.c: 620: BYTE buffers;
 14669                           ;ECAN.c: 628: BYTE i,j;
 14670                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 14671                           ;ECAN.c: 630: BYTE* pb[9];
 14672                           ;ECAN.c: 631: BYTE temp;
 14673                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 14674                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 14675                           
 14676                           ; BSR set to: 0
 14677                           ;incstack = 0
 14678                           ;incstack = 0
 14679  003E0C  0E0F               	movlw	15	;volatile
 14680  003E0E  6E21               	movwf	ECANSendMessage@pb+1,c
 14681  003E10  0E40               	movlw	64	;volatile
 14682  003E12  6E20               	movwf	ECANSendMessage@pb,c
 14683                           
 14684                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 14685  003E14  0E0F               	movlw	15	;volatile
 14686  003E16  6E23               	movwf	ECANSendMessage@pb+3,c
 14687  003E18  0E30               	movlw	48	;volatile
 14688  003E1A  6E22               	movwf	ECANSendMessage@pb+2,c
 14689                           
 14690                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 14691  003E1C  0E0F               	movlw	15	;volatile
 14692  003E1E  6E25               	movwf	ECANSendMessage@pb+5,c
 14693  003E20  0E20               	movlw	32	;volatile
 14694  003E22  6E24               	movwf	ECANSendMessage@pb+4,c
 14695                           
 14696                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 14697  003E24  0E0E               	movlw	14	;volatile
 14698  003E26  6E27               	movwf	ECANSendMessage@pb+7,c
 14699  003E28  0E20               	movlw	32	;volatile
 14700  003E2A  6E26               	movwf	ECANSendMessage@pb+6,c
 14701                           
 14702                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 14703  003E2C  0E0E               	movlw	14	;volatile
 14704  003E2E  6E29               	movwf	ECANSendMessage@pb+9,c
 14705  003E30  0E30               	movlw	48	;volatile
 14706  003E32  6E28               	movwf	ECANSendMessage@pb+8,c
 14707                           
 14708                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 14709  003E34  0E0E               	movlw	14	;volatile
 14710  003E36  6E2B               	movwf	ECANSendMessage@pb+11,c
 14711  003E38  0E40               	movlw	64	;volatile
 14712  003E3A  6E2A               	movwf	ECANSendMessage@pb+10,c
 14713                           
 14714                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 14715  003E3C  0E0E               	movlw	14	;volatile
 14716  003E3E  6E2D               	movwf	ECANSendMessage@pb+13,c
 14717  003E40  0E50               	movlw	80	;volatile
 14718  003E42  6E2C               	movwf	ECANSendMessage@pb+12,c
 14719                           
 14720                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 14721  003E44  0E0E               	movlw	14	;volatile
 14722  003E46  6E2F               	movwf	ECANSendMessage@pb+15,c
 14723  003E48  0E60               	movlw	96	;volatile
 14724  003E4A  6E2E               	movwf	ECANSendMessage@pb+14,c
 14725                           
 14726                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 14727  003E4C  0E0E               	movlw	14	;volatile
 14728  003E4E  6E31               	movwf	ECANSendMessage@pb+17,c
 14729  003E50  0E70               	movlw	112	;volatile
 14730  003E52  6E30               	movwf	ECANSendMessage@pb+16,c
 14731                           
 14732                           ; BSR set to: 14
 14733                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 14734  003E54  5077               	movf	3959,w,c	;volatile
 14735  003E56  0BC0               	andlw	192
 14736  003E58  6E32               	movwf	ECANSendMessage@mode,c
 14737                           
 14738                           ; BSR set to: 14
 14739                           ;ECAN.c: 660: if ( mode == 0x00 )
 14740  003E5A  6632               	tstfsz	ECANSendMessage@mode,c
 14741  003E5C  D002               	goto	l11061
 14742                           
 14743                           ; BSR set to: 14
 14744                           ;ECAN.c: 661: buffers = 2;
 14745  003E5E  0E02               	movlw	2
 14746  003E60  D001               	goto	L33
 14747  003E62                     l11061:
 14748                           
 14749                           ; BSR set to: 14
 14750                           ;ECAN.c: 662: else
 14751                           ;ECAN.c: 663: buffers = 8;
 14752  003E62  0E08               	movlw	8
 14753  003E64                     L33:
 14754  003E64  6E33               	movwf	ECANSendMessage@buffers,c
 14755                           
 14756                           ; BSR set to: 14
 14757                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 14758  003E66  010D               	movlb	13	; () banked
 14759  003E68  90D8               	bcf	status,0,c
 14760  003E6A  31F8               	rrcf	248,w,b	;volatile
 14761  003E6C  6E35               	movwf	ECANSendMessage@tempBSEL0,c
 14762                           
 14763                           ; BSR set to: 13
 14764                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 14765  003E6E  6A39               	clrf	ECANSendMessage@i,c
 14766  003E70  D07B               	goto	l11121
 14767  003E72                     l11067:
 14768                           
 14769                           ;ECAN.c: 688: {
 14770                           ;ECAN.c: 693: ptr = pb[i];
 14771  003E72  5039               	movf	ECANSendMessage@i,w,c
 14772  003E74  0D02               	mullw	2
 14773  003E76  50F3               	movf	prodl,w,c
 14774  003E78  0F20               	addlw	low ECANSendMessage@pb
 14775  003E7A  6ED9               	movwf	fsr2l,c
 14776  003E7C  6ADA               	clrf	fsr2h,c
 14777  003E7E  CFDE F03A          	movff	postinc2,ECANSendMessage@ptr
 14778  003E82  CFDD F03B          	movff	postdec2,ECANSendMessage@ptr+1
 14779                           
 14780                           ;ECAN.c: 694: tempPtr = ptr;
 14781  003E86  C03A  F036         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 14782  003E8A  C03B  F037         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 14783                           
 14784                           ;ECAN.c: 702: if ( i > 2 )
 14785  003E8E  0E02               	movlw	2
 14786  003E90  6439               	cpfsgt	ECANSendMessage@i,c
 14787  003E92  D004               	goto	l11079
 14788                           
 14789                           ;ECAN.c: 703: {
 14790                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 14791  003E94  90D8               	bcf	status,0,c
 14792  003E96  3235               	rrcf	ECANSendMessage@tempBSEL0,f,c
 14793                           
 14794                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 14795  003E98  A035               	btfss	ECANSendMessage@tempBSEL0,0,c
 14796  003E9A  D065               	goto	l11119
 14797  003E9C                     l11079:
 14798                           
 14799                           ;ECAN.c: 714: }
 14800                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 14801  003E9C  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 14802  003EA0  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 14803  003EA4  50DF               	movf	indf2,w,c
 14804  003EA6  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 14805  003EA8  B61F               	btfsc	??_ECANSendMessage,3,c
 14806  003EAA  D05D               	goto	l11119
 14807                           
 14808                           ;ECAN.c: 721: {
 14809                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 14810  003EAC  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 14811  003EB0  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 14812  003EB4  0EFC               	movlw	252
 14813  003EB6  16DF               	andwf	indf2,f,c
 14814                           
 14815                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 14816  003EB8  C01E  F01F         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 14817  003EBC  0E03               	movlw	3
 14818  003EBE  161F               	andwf	??_ECANSendMessage,f,c
 14819  003EC0  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 14820  003EC4  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 14821  003EC8  501F               	movf	??_ECANSendMessage,w,c
 14822  003ECA  12DF               	iorwf	indf2,f,c
 14823                           
 14824                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 14825  003ECC  AC1E               	btfss	ECANSendMessage@msgFlags,6,c
 14826  003ECE  D004               	goto	l827
 14827                           
 14828                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 14829  003ED0  501D               	movf	ECANSendMessage@dataLen,w,c
 14830  003ED2  0940               	iorlw	64
 14831  003ED4  6E38               	movwf	ECANSendMessage@temp,c
 14832  003ED6  D002               	goto	l11089
 14833  003ED8                     l827:
 14834                           
 14835                           ;ECAN.c: 729: else
 14836                           ;ECAN.c: 730: temp = dataLen;
 14837  003ED8  C01D  F038         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 14838  003EDC                     l11089:
 14839                           
 14840                           ;ECAN.c: 732: *(ptr+5) = temp;
 14841  003EDC  EE20 F005          	lfsr	2,5
 14842  003EE0  503A               	movf	ECANSendMessage@ptr,w,c
 14843  003EE2  26D9               	addwf	fsr2l,f,c
 14844  003EE4  503B               	movf	ECANSendMessage@ptr+1,w,c
 14845  003EE6  22DA               	addwfc	fsr2h,f,c
 14846  003EE8  C038  FFDF         	movff	ECANSendMessage@temp,indf2
 14847                           
 14848                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 14849  003EEC  AA1E               	btfss	ECANSendMessage@msgFlags,5,c
 14850  003EEE  D003               	goto	l829
 14851                           
 14852                           ;ECAN.c: 736: temp = 1;
 14853  003EF0  0E01               	movlw	1
 14854  003EF2  6E38               	movwf	ECANSendMessage@temp,c
 14855  003EF4  D001               	goto	l11095
 14856  003EF6                     l829:
 14857                           
 14858                           ;ECAN.c: 738: else
 14859                           ;ECAN.c: 739: temp = 0;
 14860  003EF6  6A38               	clrf	ECANSendMessage@temp,c
 14861  003EF8                     l11095:
 14862                           
 14863                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 14864  003EF8  283A               	incf	ECANSendMessage@ptr,w,c
 14865  003EFA  6E0E               	movwf	?__CANIDToRegs,c
 14866  003EFC  0E00               	movlw	0
 14867  003EFE  203B               	addwfc	ECANSendMessage@ptr+1,w,c
 14868  003F00  6E0F               	movwf	?__CANIDToRegs+1,c
 14869  003F02  C018  F010         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 14870  003F06  C019  F011         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 14871  003F0A  C01A  F012         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 14872  003F0E  C01B  F013         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 14873  003F12  C038  F014         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 14874  003F16  EC1B  F021         	call	__CANIDToRegs	;wreg free
 14875                           
 14876                           ;ECAN.c: 745: ptr += 6;
 14877  003F1A  0E06               	movlw	6
 14878  003F1C  263A               	addwf	ECANSendMessage@ptr,f,c
 14879  003F1E  0E00               	movlw	0
 14880  003F20  223B               	addwfc	ECANSendMessage@ptr+1,f,c
 14881                           
 14882                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 14883  003F22  6A34               	clrf	ECANSendMessage@j,c
 14884  003F24  D00D               	goto	l11109
 14885  003F26                     l11101:
 14886                           
 14887                           ;ECAN.c: 748: *ptr++ = *data++;
 14888  003F26  501C               	movf	ECANSendMessage@data,w,c
 14889  003F28  6ED9               	movwf	fsr2l,c
 14890  003F2A  6ADA               	clrf	fsr2h,c
 14891  003F2C  C03A  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 14892  003F30  C03B  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 14893  003F34  CFDF FFE7          	movff	indf2,indf1
 14894  003F38  2A1C               	incf	ECANSendMessage@data,f,c
 14895  003F3A  4A3A               	infsnz	ECANSendMessage@ptr,f,c
 14896  003F3C  2A3B               	incf	ECANSendMessage@ptr+1,f,c
 14897  003F3E  2A34               	incf	ECANSendMessage@j,f,c
 14898  003F40                     l11109:
 14899  003F40  501D               	movf	ECANSendMessage@dataLen,w,c
 14900  003F42  5C34               	subwf	ECANSendMessage@j,w,c
 14901  003F44  E3F0               	bnc	l11101
 14902                           
 14903                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 14904  003F46  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 14905  003F4A  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 14906  003F4E  50DF               	movf	indf2,w,c
 14907  003F50  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 14908  003F52  B41F               	btfsc	??_ECANSendMessage,2,c
 14909  003F54  D006               	goto	l11115
 14910                           
 14911                           ;ECAN.c: 753: *tempPtr |= 0x08;
 14912  003F56  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 14913  003F5A  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 14914  003F5E  0E00               	movlw	0
 14915  003F60  86DB               	bsf	plusw2,3,c
 14916  003F62                     l11115:
 14917                           
 14918                           ;ECAN.c: 755: return TRUE;
 14919  003F62  0E01               	movlw	1
 14920  003F64  D005               	goto	l835
 14921  003F66                     l11119:
 14922  003F66  2A39               	incf	ECANSendMessage@i,f,c
 14923  003F68                     l11121:
 14924  003F68  5033               	movf	ECANSendMessage@buffers,w,c
 14925  003F6A  5C39               	subwf	ECANSendMessage@i,w,c
 14926  003F6C  E382               	bnc	l11067
 14927                           
 14928                           ;ECAN.c: 756: }
 14929                           ;ECAN.c: 757: }
 14930                           ;ECAN.c: 760: return FALSE;
 14931  003F6E  0E00               	movlw	0
 14932  003F70                     l835:
 14933  003F70  0012               	return	
 14934  003F72                     __end_of_ECANSendMessage:
 14935                           	opt stack 0
 14936                           tblptru	equ	0xFF8
 14937                           tblptrh	equ	0xFF7
 14938                           tblptrl	equ	0xFF6
 14939                           tablat	equ	0xFF5
 14940                           prodh	equ	0xFF4
 14941                           prodl	equ	0xFF3
 14942                           postinc0	equ	0xFEE
 14943                           wreg	equ	0xFE8
 14944                           indf1	equ	0xFE7
 14945                           postdec1	equ	0xFE5
 14946                           fsr1h	equ	0xFE2
 14947                           fsr1l	equ	0xFE1
 14948                           indf2	equ	0xFDF
 14949                           postinc2	equ	0xFDE
 14950                           postdec2	equ	0xFDD
 14951                           plusw2	equ	0xFDB
 14952                           fsr2h	equ	0xFDA
 14953                           fsr2l	equ	0xFD9
 14954                           status	equ	0xFD8
 14955                           
 14956 ;; *************** function __CANIDToRegs *****************
 14957 ;; Defined at:
 14958 ;;		line 1099 in file "../ECAN.c"
 14959 ;; Parameters:    Size  Location     Type
 14960 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 14961 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 14962 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 14963 ;;		 -> B0CON(1), 
 14964 ;;  val             4   15[COMRAM] unsigned long 
 14965 ;;  type            1   19[COMRAM] unsigned char 
 14966 ;; Auto vars:     Size  Location     Type
 14967 ;;  Value           1   22[COMRAM] PTR struct _CAN_MESSAGE_
 14968 ;;		 -> _CANIDToRegs@val(4), 
 14969 ;; Return value:  Size  Location     Type
 14970 ;;		None               void
 14971 ;; Registers used:
 14972 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14973 ;; Tracked objects:
 14974 ;;		On entry : 3/D
 14975 ;;		On exit  : 3/1
 14976 ;;		Unchanged: 2/0
 14977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14978 ;;      Params:         7       0       0       0       0       0       0
 14979 ;;      Locals:         1       0       0       0       0       0       0
 14980 ;;      Temps:          2       0       0       0       0       0       0
 14981 ;;      Totals:        10       0       0       0       0       0       0
 14982 ;;Total ram usage:       10 bytes
 14983 ;; Hardware stack levels used:    1
 14984 ;; Hardware stack levels required when called:    2
 14985 ;; This function calls:
 14986 ;;		Nothing
 14987 ;; This function is called by:
 14988 ;;		_ECANSendMessage
 14989 ;; This function uses a non-reentrant model
 14990 ;;
 14991                           
 14992                           	psect	text73
 14993  004236                     __ptext73:
 14994                           	opt stack 0
 14995  004236                     __CANIDToRegs:
 14996                           	opt stack 22
 14997                           
 14998                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 14999                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 15000                           
 15001                           ;incstack = 0
 15002                           ;incstack = 0
 15003  004236  0E10               	movlw	low __CANIDToRegs@val
 15004  004238  6E17               	movwf	__CANIDToRegs@Value,c
 15005                           
 15006                           ;ECAN.c: 1104: if ( type == 0 )
 15007  00423A  6614               	tstfsz	__CANIDToRegs@type,c
 15008  00423C  D037               	goto	l11137
 15009                           
 15010                           ;ECAN.c: 1105: {
 15011                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 15012  00423E  5017               	movf	__CANIDToRegs@Value,w,c
 15013  004240  6ED9               	movwf	fsr2l,c
 15014  004242  6ADA               	clrf	fsr2h,c
 15015  004244  50DF               	movf	indf2,w,c
 15016  004246  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15017  004248  90D8               	bcf	status,0,c
 15018  00424A  3215               	rrcf	??__CANIDToRegs,f,c
 15019  00424C  90D8               	bcf	status,0,c
 15020  00424E  3215               	rrcf	??__CANIDToRegs,f,c
 15021  004250  90D8               	bcf	status,0,c
 15022  004252  3015               	rrcf	??__CANIDToRegs,w,c
 15023  004254  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15024  004258  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15025  00425C  6EDF               	movwf	indf2,c
 15026                           
 15027                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 15028  00425E  5017               	movf	__CANIDToRegs@Value,w,c
 15029  004260  6ED9               	movwf	fsr2l,c
 15030  004262  6ADA               	clrf	fsr2h,c
 15031  004264  2AD9               	incf	fsr2l,f,c
 15032  004266  6ADA               	clrf	fsr2h,c
 15033  004268  50DF               	movf	indf2,w,c
 15034  00426A  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15035  00426C  0E05               	movlw	5
 15036  00426E  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 15037  004270                     u9125:
 15038  004270  90D8               	bcf	status,0,c
 15039  004272  3615               	rlcf	??__CANIDToRegs,f,c
 15040  004274  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 15041  004276  D7FC               	goto	u9125
 15042  004278  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15043  00427C  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15044  004280  5015               	movf	??__CANIDToRegs,w,c
 15045  004282  12DF               	iorwf	indf2,f,c
 15046                           
 15047                           ;ECAN.c: 1109: ptr++;
 15048  004284  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 15049  004286  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 15050                           
 15051                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 15052  004288  5017               	movf	__CANIDToRegs@Value,w,c
 15053  00428A  6ED9               	movwf	fsr2l,c
 15054  00428C  6ADA               	clrf	fsr2h,c
 15055  00428E  50DF               	movf	indf2,w,c
 15056  004290  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15057  004292  0E05               	movlw	5
 15058  004294  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 15059  004296                     u9135:
 15060  004296  90D8               	bcf	status,0,c
 15061  004298  3615               	rlcf	??__CANIDToRegs,f,c
 15062  00429A  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 15063  00429C  D7FC               	goto	u9135
 15064  00429E  5015               	movf	??__CANIDToRegs,w,c
 15065  0042A0  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15066  0042A4  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15067  0042A8  6EDF               	movwf	indf2,c
 15068                           
 15069                           ;ECAN.c: 1111: }
 15070  0042AA  D06C               	goto	l889
 15071  0042AC                     l11137:
 15072                           
 15073                           ;ECAN.c: 1112: else
 15074                           ;ECAN.c: 1113: {
 15075                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 15076  0042AC  5017               	movf	__CANIDToRegs@Value,w,c
 15077  0042AE  6ED9               	movwf	fsr2l,c
 15078  0042B0  6ADA               	clrf	fsr2h,c
 15079  0042B2  0E02               	movlw	2
 15080  0042B4  26D9               	addwf	fsr2l,f,c
 15081  0042B6  6ADA               	clrf	fsr2h,c
 15082  0042B8  50DF               	movf	indf2,w,c
 15083  0042BA  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15084  0042BC  0E05               	movlw	5
 15085  0042BE  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 15086  0042C0                     u9145:
 15087  0042C0  90D8               	bcf	status,0,c
 15088  0042C2  3215               	rrcf	??__CANIDToRegs,f,c
 15089  0042C4  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 15090  0042C6  D7FC               	goto	u9145
 15091  0042C8  5015               	movf	??__CANIDToRegs,w,c
 15092  0042CA  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15093  0042CE  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15094  0042D2  6EDF               	movwf	indf2,c
 15095                           
 15096                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 15097  0042D4  5017               	movf	__CANIDToRegs@Value,w,c
 15098  0042D6  6ED9               	movwf	fsr2l,c
 15099  0042D8  6ADA               	clrf	fsr2h,c
 15100  0042DA  0E03               	movlw	3
 15101  0042DC  26D9               	addwf	fsr2l,f,c
 15102  0042DE  6ADA               	clrf	fsr2h,c
 15103  0042E0  50DF               	movf	indf2,w,c
 15104  0042E2  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15105  0042E4  90D8               	bcf	status,0,c
 15106  0042E6  3615               	rlcf	??__CANIDToRegs,f,c
 15107  0042E8  90D8               	bcf	status,0,c
 15108  0042EA  3615               	rlcf	??__CANIDToRegs,f,c
 15109  0042EC  90D8               	bcf	status,0,c
 15110  0042EE  3615               	rlcf	??__CANIDToRegs,f,c
 15111  0042F0  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15112  0042F4  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15113  0042F8  5015               	movf	??__CANIDToRegs,w,c
 15114  0042FA  12DF               	iorwf	indf2,f,c
 15115                           
 15116                           ;ECAN.c: 1117: ptr++;
 15117  0042FC  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 15118  0042FE  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 15119                           
 15120                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 15121  004300  5017               	movf	__CANIDToRegs@Value,w,c
 15122  004302  6ED9               	movwf	fsr2l,c
 15123  004304  6ADA               	clrf	fsr2h,c
 15124  004306  0E02               	movlw	2
 15125  004308  26D9               	addwf	fsr2l,f,c
 15126  00430A  6ADA               	clrf	fsr2h,c
 15127  00430C  50DF               	movf	indf2,w,c
 15128  00430E  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15129  004310  90D8               	bcf	status,0,c
 15130  004312  3615               	rlcf	??__CANIDToRegs,f,c
 15131  004314  90D8               	bcf	status,0,c
 15132  004316  3615               	rlcf	??__CANIDToRegs,f,c
 15133  004318  90D8               	bcf	status,0,c
 15134  00431A  3415               	rlcf	??__CANIDToRegs,w,c
 15135  00431C  0BE0               	andlw	224
 15136  00431E  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15137  004322  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15138  004326  6EDF               	movwf	indf2,c
 15139                           
 15140                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 15141  004328  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15142  00432C  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15143  004330  0E00               	movlw	0
 15144  004332  86DB               	bsf	plusw2,3,c
 15145                           
 15146                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 15147  004334  5017               	movf	__CANIDToRegs@Value,w,c
 15148  004336  6ED9               	movwf	fsr2l,c
 15149  004338  6ADA               	clrf	fsr2h,c
 15150  00433A  0E02               	movlw	2
 15151  00433C  26D9               	addwf	fsr2l,f,c
 15152  00433E  6ADA               	clrf	fsr2h,c
 15153  004340  50DF               	movf	indf2,w,c
 15154  004342  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15155  004344  0E03               	movlw	3
 15156  004346  1615               	andwf	??__CANIDToRegs,f,c
 15157  004348  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15158  00434C  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15159  004350  5015               	movf	??__CANIDToRegs,w,c
 15160  004352  12DF               	iorwf	indf2,f,c
 15161                           
 15162                           ;ECAN.c: 1122: ptr++;
 15163  004354  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 15164  004356  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 15165                           
 15166                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 15167  004358  5017               	movf	__CANIDToRegs@Value,w,c
 15168  00435A  6ED9               	movwf	fsr2l,c
 15169  00435C  6ADA               	clrf	fsr2h,c
 15170  00435E  2AD9               	incf	fsr2l,f,c
 15171  004360  6ADA               	clrf	fsr2h,c
 15172  004362  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 15173  004366  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 15174  00436A  CFDF FFE7          	movff	indf2,indf1
 15175                           
 15176                           ;ECAN.c: 1124: ptr++;
 15177  00436E  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 15178  004370  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 15179                           
 15180                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 15181  004372  5017               	movf	__CANIDToRegs@Value,w,c
 15182  004374  6ED9               	movwf	fsr2l,c
 15183  004376  6ADA               	clrf	fsr2h,c
 15184  004378  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 15185  00437C  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 15186  004380  CFDF FFE7          	movff	indf2,indf1
 15187  004384                     l889:
 15188  004384  0012               	return	
 15189  004386                     __end_of__CANIDToRegs:
 15190                           	opt stack 0
 15191                           tblptru	equ	0xFF8
 15192                           tblptrh	equ	0xFF7
 15193                           tblptrl	equ	0xFF6
 15194                           tablat	equ	0xFF5
 15195                           prodh	equ	0xFF4
 15196                           prodl	equ	0xFF3
 15197                           postinc0	equ	0xFEE
 15198                           wreg	equ	0xFE8
 15199                           indf1	equ	0xFE7
 15200                           postdec1	equ	0xFE5
 15201                           fsr1h	equ	0xFE2
 15202                           fsr1l	equ	0xFE1
 15203                           indf2	equ	0xFDF
 15204                           postinc2	equ	0xFDE
 15205                           postdec2	equ	0xFDD
 15206                           plusw2	equ	0xFDB
 15207                           fsr2h	equ	0xFDA
 15208                           fsr2l	equ	0xFD9
 15209                           status	equ	0xFD8
 15210                           
 15211 ;; *************** function _vscp_getEvent *****************
 15212 ;; Defined at:
 15213 ;;		line 1300 in file "../../vscp_firmware/common/vscp_firmware.c"
 15214 ;; Parameters:    Size  Location     Type
 15215 ;;		None
 15216 ;; Auto vars:     Size  Location     Type
 15217 ;;  rv              1   49[COMRAM] unsigned char 
 15218 ;; Return value:  Size  Location     Type
 15219 ;;                  1    wreg      unsigned char 
 15220 ;; Registers used:
 15221 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15222 ;; Tracked objects:
 15223 ;;		On entry : F/0
 15224 ;;		On exit  : 0/0
 15225 ;;		Unchanged: 0/0
 15226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15227 ;;      Params:         0       0       0       0       0       0       0
 15228 ;;      Locals:         1       0       0       0       0       0       0
 15229 ;;      Temps:          0       0       0       0       0       0       0
 15230 ;;      Totals:         1       0       0       0       0       0       0
 15231 ;;Total ram usage:        1 bytes
 15232 ;; Hardware stack levels used:    1
 15233 ;; Hardware stack levels required when called:    6
 15234 ;; This function calls:
 15235 ;;		_getVSCPFrame
 15236 ;; This function is called by:
 15237 ;;		_main
 15238 ;; This function uses a non-reentrant model
 15239 ;;
 15240                           
 15241                           	psect	text74
 15242  00591C                     __ptext74:
 15243                           	opt stack 0
 15244  00591C                     _vscp_getEvent:
 15245                           	opt stack 24
 15246                           
 15247                           ; BSR set to: 0
 15248                           ;vscp_firmware.c: 1301: int8_t rv;
 15249                           ;vscp_firmware.c: 1307: if (vscp_imsg.flags & 0x80) return !0;
 15250                           
 15251                           ;incstack = 0
 15252                           ;incstack = 0
 15253  00591C  BFBD               	btfsc	_vscp_imsg& (0+255),7,b
 15254  00591E  D012               	goto	l1283
 15255                           
 15256                           ; BSR set to: 0
 15257                           ;vscp_firmware.c: 1310: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 15258                           ;vscp_firmware.c: 1311: &vscp_imsg.vscp_type,
 15259                           ;vscp_firmware.c: 1312: &vscp_imsg.oaddr,
 15260                           ;vscp_firmware.c: 1313: &vscp_imsg.priority,
 15261                           ;vscp_firmware.c: 1314: &vscp_imsg.flags,
 15262                           ;vscp_firmware.c: 1315: vscp_imsg.data ) ) ) {
 15263  005920  0EC1               	movlw	low (_vscp_imsg+4)
 15264  005922  6E24               	movwf	?_getVSCPFrame,c
 15265  005924  0EC2               	movlw	low (_vscp_imsg+5)
 15266  005926  6E25               	movwf	?_getVSCPFrame+1,c
 15267  005928  0EBE               	movlw	low (_vscp_imsg+1)
 15268  00592A  6E26               	movwf	?_getVSCPFrame+2,c
 15269  00592C  0EBD               	movlw	low _vscp_imsg
 15270  00592E  6E27               	movwf	?_getVSCPFrame+3,c
 15271  005930  0EC3               	movlw	low (_vscp_imsg+6)
 15272  005932  6E28               	movwf	?_getVSCPFrame+4,c
 15273  005934  0EBF               	movlw	(_vscp_imsg+2)& (0+255)
 15274  005936  ECDD  F028         	call	_getVSCPFrame
 15275  00593A  6E32               	movwf	vscp_getEvent@rv,c
 15276  00593C  5032               	movf	vscp_getEvent@rv& (0+255),w,c
 15277  00593E  E002               	bz	l1283
 15278                           
 15279                           ;vscp_firmware.c: 1317: vscp_imsg.flags |= 0x80;
 15280  005940  0100               	movlb	0	; () banked
 15281  005942  8FBD               	bsf	_vscp_imsg& (0+255),7,b
 15282  005944                     l1283:
 15283  005944  0012               	return	
 15284  005946                     __end_of_vscp_getEvent:
 15285                           	opt stack 0
 15286                           tblptru	equ	0xFF8
 15287                           tblptrh	equ	0xFF7
 15288                           tblptrl	equ	0xFF6
 15289                           tablat	equ	0xFF5
 15290                           prodh	equ	0xFF4
 15291                           prodl	equ	0xFF3
 15292                           postinc0	equ	0xFEE
 15293                           wreg	equ	0xFE8
 15294                           indf1	equ	0xFE7
 15295                           postdec1	equ	0xFE5
 15296                           fsr1h	equ	0xFE2
 15297                           fsr1l	equ	0xFE1
 15298                           indf2	equ	0xFDF
 15299                           postinc2	equ	0xFDE
 15300                           postdec2	equ	0xFDD
 15301                           plusw2	equ	0xFDB
 15302                           fsr2h	equ	0xFDA
 15303                           fsr2l	equ	0xFD9
 15304                           status	equ	0xFD8
 15305                           
 15306 ;; *************** function _getVSCPFrame *****************
 15307 ;; Defined at:
 15308 ;;		line 2897 in file "../main.c"
 15309 ;; Parameters:    Size  Location     Type
 15310 ;;  pvscpclass      1    wreg     PTR unsigned short 
 15311 ;;		 -> vscp_imsg(14), 
 15312 ;;  pvscptype       1   35[COMRAM] PTR unsigned char 
 15313 ;;		 -> vscp_imsg(14), 
 15314 ;;  pNodeId         1   36[COMRAM] PTR unsigned char 
 15315 ;;		 -> vscp_imsg(14), 
 15316 ;;  pPriority       1   37[COMRAM] PTR unsigned char 
 15317 ;;		 -> vscp_imsg(14), 
 15318 ;;  pSize           1   38[COMRAM] PTR unsigned char 
 15319 ;;		 -> vscp_imsg(14), 
 15320 ;;  pData           1   39[COMRAM] PTR unsigned char 
 15321 ;;		 -> vscp_imsg(14), 
 15322 ;; Auto vars:     Size  Location     Type
 15323 ;;  pvscpclass      1   44[COMRAM] PTR unsigned short 
 15324 ;;		 -> vscp_imsg(14), 
 15325 ;;  id              4   45[COMRAM] unsigned long 
 15326 ;; Return value:  Size  Location     Type
 15327 ;;                  1    wreg      unsigned char 
 15328 ;; Registers used:
 15329 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15330 ;; Tracked objects:
 15331 ;;		On entry : F/0
 15332 ;;		On exit  : 0/0
 15333 ;;		Unchanged: 0/0
 15334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15335 ;;      Params:         5       0       0       0       0       0       0
 15336 ;;      Locals:         5       0       0       0       0       0       0
 15337 ;;      Temps:          4       0       0       0       0       0       0
 15338 ;;      Totals:        14       0       0       0       0       0       0
 15339 ;;Total ram usage:       14 bytes
 15340 ;; Hardware stack levels used:    1
 15341 ;; Hardware stack levels required when called:    5
 15342 ;; This function calls:
 15343 ;;		_getCANFrame
 15344 ;; This function is called by:
 15345 ;;		_vscp_getEvent
 15346 ;; This function uses a non-reentrant model
 15347 ;;
 15348                           
 15349                           	psect	text75
 15350  0051BA                     __ptext75:
 15351                           	opt stack 0
 15352  0051BA                     _getVSCPFrame:
 15353                           	opt stack 24
 15354                           
 15355                           ;incstack = 0
 15356                           ;incstack = 0
 15357                           ;getVSCPFrame@pvscpclass stored from wreg
 15358  0051BA  CFE8 F02D          	movff	wreg,getVSCPFrame@pvscpclass
 15359                           
 15360                           ; BSR set to: 0
 15361                           ;main.c: 2898: uint32_t id;
 15362                           ;main.c: 2900: if (!getCANFrame(&id, pSize, pData)) {
 15363  0051BE  C027  F020         	movff	getVSCPFrame@pSize,?_getCANFrame
 15364  0051C2  C028  F021         	movff	getVSCPFrame@pData,?_getCANFrame+1
 15365  0051C6  0E2E               	movlw	getVSCPFrame@id& (0+255)
 15366  0051C8  EC4E  F02C         	call	_getCANFrame
 15367  0051CC  0900               	iorlw	0
 15368  0051CE  E102               	bnz	l8203
 15369                           
 15370                           ;main.c: 2901: return 0;
 15371  0051D0  0E00               	movlw	0
 15372  0051D2  D02E               	goto	l633
 15373  0051D4                     l8203:
 15374                           
 15375                           ;main.c: 2902: }
 15376                           ;main.c: 2904: *pNodeId = id & 0x0ff;
 15377  0051D4  5025               	movf	getVSCPFrame@pNodeId,w,c
 15378  0051D6  6ED9               	movwf	fsr2l,c
 15379  0051D8  6ADA               	clrf	fsr2h,c
 15380  0051DA  C02E  FFDF         	movff	getVSCPFrame@id,indf2
 15381                           
 15382                           ;main.c: 2905: *pvscptype = (id >> 8) & 0xff;
 15383  0051DE  5024               	movf	getVSCPFrame@pvscptype,w,c
 15384  0051E0  6ED9               	movwf	fsr2l,c
 15385  0051E2  6ADA               	clrf	fsr2h,c
 15386  0051E4  C02F  FFDF         	movff	getVSCPFrame@id+1,indf2
 15387                           
 15388                           ;main.c: 2906: *pvscpclass = (id >> 16) & 0x1ff;
 15389  0051E8  5030               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 15390  0051EA  6E29               	movwf	??_getVSCPFrame& (0+255),c
 15391  0051EC  0E01               	movlw	1
 15392  0051EE  1431               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 15393  0051F0  6E2A               	movwf	(??_getVSCPFrame+1)& (0+255),c
 15394  0051F2  502D               	movf	getVSCPFrame@pvscpclass,w,c
 15395  0051F4  6ED9               	movwf	fsr2l,c
 15396  0051F6  6ADA               	clrf	fsr2h,c
 15397  0051F8  C029  FFDE         	movff	??_getVSCPFrame,postinc2
 15398  0051FC  C02A  FFDD         	movff	??_getVSCPFrame+1,postdec2
 15399                           
 15400                           ;main.c: 2907: *pPriority = (uint16_t) (0x07 & (id >> 26));
 15401  005200  5026               	movf	getVSCPFrame@pPriority,w,c
 15402  005202  6ED9               	movwf	fsr2l,c
 15403  005204  6ADA               	clrf	fsr2h,c
 15404  005206  C02E  F029         	movff	getVSCPFrame@id,??_getVSCPFrame
 15405  00520A  C02F  F02A         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 15406  00520E  C030  F02B         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 15407  005212  C031  F02C         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 15408  005216  0E1B               	movlw	27
 15409  005218  D005               	goto	u5490
 15410  00521A                     u5495:
 15411  00521A  90D8               	bcf	status,0,c
 15412  00521C  322C               	rrcf	??_getVSCPFrame+3,f,c
 15413  00521E  322B               	rrcf	??_getVSCPFrame+2,f,c
 15414  005220  322A               	rrcf	??_getVSCPFrame+1,f,c
 15415  005222  3229               	rrcf	??_getVSCPFrame,f,c
 15416  005224                     u5490:
 15417  005224  2EE8               	decfsz	wreg,f,c
 15418  005226  D7F9               	goto	u5495
 15419  005228  5029               	movf	??_getVSCPFrame,w,c
 15420  00522A  0B07               	andlw	7
 15421  00522C  6EDF               	movwf	indf2,c
 15422                           
 15423                           ;main.c: 2909: return 1;
 15424  00522E  0E01               	movlw	1
 15425  005230                     l633:
 15426  005230  0012               	return	
 15427  005232                     __end_of_getVSCPFrame:
 15428                           	opt stack 0
 15429                           tblptru	equ	0xFF8
 15430                           tblptrh	equ	0xFF7
 15431                           tblptrl	equ	0xFF6
 15432                           tablat	equ	0xFF5
 15433                           prodh	equ	0xFF4
 15434                           prodl	equ	0xFF3
 15435                           postinc0	equ	0xFEE
 15436                           wreg	equ	0xFE8
 15437                           indf1	equ	0xFE7
 15438                           postdec1	equ	0xFE5
 15439                           fsr1h	equ	0xFE2
 15440                           fsr1l	equ	0xFE1
 15441                           indf2	equ	0xFDF
 15442                           postinc2	equ	0xFDE
 15443                           postdec2	equ	0xFDD
 15444                           plusw2	equ	0xFDB
 15445                           fsr2h	equ	0xFDA
 15446                           fsr2l	equ	0xFD9
 15447                           status	equ	0xFD8
 15448                           
 15449 ;; *************** function _getCANFrame *****************
 15450 ;; Defined at:
 15451 ;;		line 2939 in file "../main.c"
 15452 ;; Parameters:    Size  Location     Type
 15453 ;;  pid             1    wreg     PTR unsigned long 
 15454 ;;		 -> getVSCPFrame@id(4), 
 15455 ;;  pdlc            1   31[COMRAM] PTR unsigned char 
 15456 ;;		 -> vscp_imsg(14), 
 15457 ;;  pdata           1   32[COMRAM] PTR unsigned char 
 15458 ;;		 -> vscp_imsg(14), 
 15459 ;; Auto vars:     Size  Location     Type
 15460 ;;  pid             1   33[COMRAM] PTR unsigned long 
 15461 ;;		 -> getVSCPFrame@id(4), 
 15462 ;;  flags           1   34[COMRAM] enum E16409
 15463 ;; Return value:  Size  Location     Type
 15464 ;;                  1    wreg      unsigned char 
 15465 ;; Registers used:
 15466 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15467 ;; Tracked objects:
 15468 ;;		On entry : F/0
 15469 ;;		On exit  : 0/0
 15470 ;;		Unchanged: 0/0
 15471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15472 ;;      Params:         2       0       0       0       0       0       0
 15473 ;;      Locals:         2       0       0       0       0       0       0
 15474 ;;      Temps:          0       0       0       0       0       0       0
 15475 ;;      Totals:         4       0       0       0       0       0       0
 15476 ;;Total ram usage:        4 bytes
 15477 ;; Hardware stack levels used:    1
 15478 ;; Hardware stack levels required when called:    4
 15479 ;; This function calls:
 15480 ;;		_ECANReceiveMessage
 15481 ;; This function is called by:
 15482 ;;		_getVSCPFrame
 15483 ;; This function uses a non-reentrant model
 15484 ;;
 15485                           
 15486                           	psect	text76
 15487  00589C                     __ptext76:
 15488                           	opt stack 0
 15489  00589C                     _getCANFrame:
 15490                           	opt stack 24
 15491                           
 15492                           ;incstack = 0
 15493                           ;incstack = 0
 15494                           ;getCANFrame@pid stored from wreg
 15495  00589C  CFE8 F022          	movff	wreg,getCANFrame@pid
 15496                           
 15497                           ; BSR set to: 0
 15498                           ;main.c: 2940: ECAN_RX_MSG_FLAGS flags;
 15499                           ;main.c: 2944: if (vscp_imsg.flags & 0x80) return 0;
 15500  0058A0  AFBD               	btfss	_vscp_imsg& (0+255),7,b
 15501  0058A2  D002               	goto	l8219
 15502  0058A4                     l8215:
 15503  0058A4  0E00               	movlw	0
 15504  0058A6  D00F               	goto	l644
 15505  0058A8                     l8219:
 15506                           
 15507                           ; BSR set to: 0
 15508                           ;main.c: 2946: if (ECANReceiveMessage((unsigned long *) pid, (BYTE*) pdata, (BYTE*) pdlc
      +                          , &flags)) {
 15509  0058A8  C021  F015         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 15510  0058AC  C020  F016         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 15511  0058B0  0E23               	movlw	low getCANFrame@flags
 15512  0058B2  6E17               	movwf	?_ECANReceiveMessage+2,c
 15513  0058B4  5022               	movf	getCANFrame@pid,w,c
 15514  0058B6  EC35  F01C         	call	_ECANReceiveMessage
 15515  0058BA  0900               	iorlw	0
 15516  0058BC  E0F3               	bz	l8215
 15517                           
 15518                           ;main.c: 2948: if (flags & ECAN_RX_RTR_FRAME) return 0;
 15519  0058BE  AC23               	btfss	getCANFrame@flags,6,c
 15520                           
 15521                           ;main.c: 2951: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 15522  0058C0  AA23               	btfss	getCANFrame@flags,5,c
 15523  0058C2  D7F0               	goto	l8215
 15524                           
 15525                           ;main.c: 2953: return 1;
 15526  0058C4  0E01               	movlw	1
 15527  0058C6                     l644:
 15528  0058C6  0012               	return	
 15529  0058C8                     __end_of_getCANFrame:
 15530                           	opt stack 0
 15531                           tblptru	equ	0xFF8
 15532                           tblptrh	equ	0xFF7
 15533                           tblptrl	equ	0xFF6
 15534                           tablat	equ	0xFF5
 15535                           prodh	equ	0xFF4
 15536                           prodl	equ	0xFF3
 15537                           postinc0	equ	0xFEE
 15538                           wreg	equ	0xFE8
 15539                           indf1	equ	0xFE7
 15540                           postdec1	equ	0xFE5
 15541                           fsr1h	equ	0xFE2
 15542                           fsr1l	equ	0xFE1
 15543                           indf2	equ	0xFDF
 15544                           postinc2	equ	0xFDE
 15545                           postdec2	equ	0xFDD
 15546                           plusw2	equ	0xFDB
 15547                           fsr2h	equ	0xFDA
 15548                           fsr2l	equ	0xFD9
 15549                           status	equ	0xFD8
 15550                           
 15551 ;; *************** function _ECANReceiveMessage *****************
 15552 ;; Defined at:
 15553 ;;		line 803 in file "../ECAN.c"
 15554 ;; Parameters:    Size  Location     Type
 15555 ;;  id              1    wreg     PTR unsigned long 
 15556 ;;		 -> getVSCPFrame@id(4), 
 15557 ;;  data            1   20[COMRAM] PTR unsigned char 
 15558 ;;		 -> vscp_imsg(14), 
 15559 ;;  dataLen         1   21[COMRAM] PTR unsigned char 
 15560 ;;		 -> vscp_imsg(14), 
 15561 ;;  msgFlags        1   22[COMRAM] PTR enum E16324
 15562 ;;		 -> getCANFrame@flags(1), 
 15563 ;; Auto vars:     Size  Location     Type
 15564 ;;  id              1   25[COMRAM] PTR unsigned long 
 15565 ;;		 -> getVSCPFrame@id(4), 
 15566 ;;  ptr             2   29[COMRAM] PTR unsigned char 
 15567 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 15568 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 15569 ;;  savedPtr        2   23[COMRAM] PTR unsigned char 
 15570 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 15571 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 15572 ;;  temp            1   28[COMRAM] struct .
 15573 ;;  mode            1   27[COMRAM] unsigned char 
 15574 ;;  i               1   26[COMRAM] unsigned char 
 15575 ;; Return value:  Size  Location     Type
 15576 ;;                  1    wreg      enum E15660
 15577 ;; Registers used:
 15578 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 15579 ;; Tracked objects:
 15580 ;;		On entry : F/0
 15581 ;;		On exit  : 0/0
 15582 ;;		Unchanged: 0/0
 15583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15584 ;;      Params:         3       0       0       0       0       0       0
 15585 ;;      Locals:         8       0       0       0       0       0       0
 15586 ;;      Temps:          0       0       0       0       0       0       0
 15587 ;;      Totals:        11       0       0       0       0       0       0
 15588 ;;Total ram usage:       11 bytes
 15589 ;; Hardware stack levels used:    1
 15590 ;; Hardware stack levels required when called:    3
 15591 ;; This function calls:
 15592 ;;		__ECANPointBuffer
 15593 ;;		__RegsToCANID
 15594 ;; This function is called by:
 15595 ;;		_getCANFrame
 15596 ;; This function uses a non-reentrant model
 15597 ;;
 15598                           
 15599                           	psect	text77
 15600  00386A                     __ptext77:
 15601                           	opt stack 0
 15602  00386A                     _ECANReceiveMessage:
 15603                           	opt stack 24
 15604                           
 15605                           ;incstack = 0
 15606                           ;incstack = 0
 15607                           ;ECANReceiveMessage@id stored from wreg
 15608  00386A  CFE8 F01A          	movff	wreg,ECANReceiveMessage@id
 15609                           
 15610                           ; BSR set to: 0
 15611                           ;ECAN.c: 805: BYTE mode;
 15612                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 15613                           ;ECAN.c: 809: char i;
 15614                           ;ECAN.c: 810: BYTE_VAL temp;
 15615                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 15616  00386E  6A48               	clrf	__ECANRxFilterHitInfo,c
 15617                           
 15618                           ; BSR set to: 0
 15619                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 15620  003870  5077               	movf	3959,w,c	;volatile
 15621  003872  0BC0               	andlw	192
 15622  003874  6E1C               	movwf	ECANReceiveMessage@mode,c
 15623                           
 15624                           ; BSR set to: 0
 15625                           ;ECAN.c: 816: if ( mode == 0x00 )
 15626  003876  661C               	tstfsz	ECANReceiveMessage@mode,c
 15627  003878  D032               	goto	l8351
 15628                           
 15629                           ; BSR set to: 0
 15630                           ;ECAN.c: 822: {
 15631                           ;ECAN.c: 824: if ( RXB0FUL )
 15632  00387A  AE60               	btfss	3936,7,c	;volatile
 15633  00387C  D012               	goto	l840
 15634                           
 15635                           ; BSR set to: 0
 15636                           ;ECAN.c: 825: {
 15637                           ;ECAN.c: 827: RXB0IF = 0;
 15638  00387E  90A4               	bcf	4004,0,c	;volatile
 15639                           
 15640                           ;ECAN.c: 830: if ( RXB0OVFL )
 15641  003880  AE74               	btfss	3956,7,c	;volatile
 15642  003882  D006               	goto	l8327
 15643                           
 15644                           ; BSR set to: 0
 15645                           ;ECAN.c: 831: {
 15646                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 15647  003884  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 15648  003886  6ED9               	movwf	fsr2l,c
 15649  003888  6ADA               	clrf	fsr2h,c
 15650  00388A  0E00               	movlw	0
 15651  00388C  86DB               	bsf	plusw2,3,c
 15652                           
 15653                           ; BSR set to: 0
 15654                           ;ECAN.c: 833: RXB0OVFL = 0;
 15655  00388E  9E74               	bcf	3956,7,c	;volatile
 15656  003890                     l8327:
 15657                           
 15658                           ; BSR set to: 0
 15659                           ;ECAN.c: 834: }
 15660                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 15661  003890  A060               	btfss	3936,0,c	;volatile
 15662  003892  D002               	bra	u5665
 15663  003894  8048               	bsf	__ECANRxFilterHitInfo,0,c
 15664  003896  D001               	bra	u5667
 15665  003898                     u5665:
 15666  003898  9048               	bcf	__ECANRxFilterHitInfo,0,c
 15667  00389A                     u5667:
 15668                           
 15669                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 15670  00389A  0E0F               	movlw	15	;volatile
 15671  00389C  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 15672  00389E  0E60               	movlw	96	;volatile
 15673  0038A0  D01A               	goto	L34
 15674  0038A2                     l840:
 15675                           
 15676                           ; BSR set to: 0
 15677                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 15678  0038A2  010F               	movlb	15	; () banked
 15679  0038A4  AF50               	btfss	80,7,b	;volatile
 15680  0038A6  D019               	goto	l8345
 15681                           
 15682                           ; BSR set to: 15
 15683                           ;ECAN.c: 842: {
 15684                           ;ECAN.c: 844: RXB1IF = 0;
 15685  0038A8  92A4               	bcf	4004,1,c	;volatile
 15686                           
 15687                           ;ECAN.c: 847: if ( RXB1OVFL )
 15688  0038AA  AC74               	btfss	3956,6,c	;volatile
 15689  0038AC  D006               	goto	l8337
 15690                           
 15691                           ; BSR set to: 15
 15692                           ;ECAN.c: 848: {
 15693                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 15694  0038AE  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 15695  0038B0  6ED9               	movwf	fsr2l,c
 15696  0038B2  6ADA               	clrf	fsr2h,c
 15697  0038B4  0E00               	movlw	0
 15698  0038B6  86DB               	bsf	plusw2,3,c
 15699                           
 15700                           ; BSR set to: 15
 15701                           ;ECAN.c: 850: RXB1OVFL = 0;
 15702  0038B8  9C74               	bcf	3956,6,c	;volatile
 15703  0038BA                     l8337:
 15704                           
 15705                           ; BSR set to: 15
 15706                           ;ECAN.c: 851: }
 15707                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 15708  0038BA  5150               	movf	80,w,b	;volatile
 15709  0038BC  0B07               	andlw	7
 15710  0038BE  6E48               	movwf	__ECANRxFilterHitInfo,c
 15711                           
 15712                           ; BSR set to: 15
 15713                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 15714  0038C0  0E02               	movlw	2
 15715  0038C2  6048               	cpfslt	__ECANRxFilterHitInfo,c
 15716  0038C4  D005               	goto	l8343
 15717                           
 15718                           ; BSR set to: 15
 15719                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 15720  0038C6  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 15721  0038C8  6ED9               	movwf	fsr2l,c
 15722  0038CA  6ADA               	clrf	fsr2h,c
 15723  0038CC  0E00               	movlw	0
 15724  0038CE  8EDB               	bsf	plusw2,7,c
 15725  0038D0                     l8343:
 15726                           
 15727                           ; BSR set to: 15
 15728                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 15729  0038D0  0E0F               	movlw	15	;volatile
 15730  0038D2  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 15731  0038D4  0E50               	movlw	80	;volatile
 15732  0038D6                     L34:
 15733  0038D6  6E1E               	movwf	ECANReceiveMessage@ptr,c
 15734                           
 15735                           ;ECAN.c: 860: }
 15736  0038D8  D065               	goto	l8405
 15737  0038DA                     l8345:
 15738                           
 15739                           ;ECAN.c: 861: else
 15740                           ;ECAN.c: 862: return FALSE;
 15741  0038DA  0E00               	movlw	0
 15742  0038DC  D0CC               	goto	l847
 15743  0038DE                     l8351:
 15744                           
 15745                           ; BSR set to: 0
 15746                           ;ECAN.c: 869: else if ( mode == 0x40 )
 15747  0038DE  501C               	movf	ECANReceiveMessage@mode,w,c
 15748  0038E0  0A40               	xorlw	64
 15749  0038E2  E146               	bnz	l850
 15750                           
 15751                           ; BSR set to: 0
 15752                           ;ECAN.c: 875: {
 15753                           ;ECAN.c: 876: if ( RXB0FUL )
 15754  0038E4  AE60               	btfss	3936,7,c	;volatile
 15755  0038E6  D004               	goto	l851
 15756                           
 15757                           ; BSR set to: 0
 15758                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 15759  0038E8  0E0F               	movlw	15	;volatile
 15760  0038EA  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 15761  0038EC  0E60               	movlw	96	;volatile
 15762  0038EE  D03E               	goto	L41
 15763  0038F0                     l851:
 15764                           
 15765                           ; BSR set to: 0
 15766                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 15767  0038F0  010F               	movlb	15	; () banked
 15768  0038F2  AF50               	btfss	80,7,b	;volatile
 15769  0038F4  D004               	goto	l853
 15770                           
 15771                           ; BSR set to: 15
 15772                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 15773  0038F6  0E0F               	movlw	15	;volatile
 15774  0038F8  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 15775  0038FA  0E50               	movlw	80	;volatile
 15776  0038FC  D037               	goto	L41
 15777  0038FE                     l853:
 15778                           
 15779                           ; BSR set to: 15
 15780                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 15781  0038FE  010D               	movlb	13
 15782  003900  B5F8               	btfsc	248,2,b	;volatile
 15783  003902  D007               	goto	l855
 15784  003904  010E               	movlb	14
 15785  003906  AF20               	btfss	32,7,b	;volatile
 15786  003908  D004               	goto	l855
 15787                           
 15788                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 15789  00390A  0E0E               	movlw	14	;volatile
 15790  00390C  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 15791  00390E  0E20               	movlw	32	;volatile
 15792  003910  D02D               	goto	L41
 15793  003912                     l855:
 15794                           
 15795                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 15796  003912  010D               	movlb	13
 15797  003914  B7F8               	btfsc	248,3,b	;volatile
 15798  003916  D007               	goto	l857
 15799  003918  010E               	movlb	14
 15800  00391A  AF30               	btfss	48,7,b	;volatile
 15801  00391C  D004               	goto	l857
 15802                           
 15803                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 15804  00391E  0E0E               	movlw	14	;volatile
 15805  003920  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 15806  003922  0E30               	movlw	48	;volatile
 15807  003924  D023               	goto	L41
 15808  003926                     l857:
 15809                           
 15810                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 15811  003926  010D               	movlb	13
 15812  003928  B9F8               	btfsc	248,4,b	;volatile
 15813  00392A  D007               	goto	l859
 15814  00392C  010E               	movlb	14
 15815  00392E  AF40               	btfss	64,7,b	;volatile
 15816  003930  D004               	goto	l859
 15817                           
 15818                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 15819  003932  0E0E               	movlw	14	;volatile
 15820  003934  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 15821  003936  0E40               	movlw	64	;volatile
 15822  003938  D019               	goto	L41
 15823  00393A                     l859:
 15824                           
 15825                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 15826  00393A  010D               	movlb	13
 15827  00393C  BBF8               	btfsc	248,5,b	;volatile
 15828  00393E  D005               	goto	l861
 15829  003940  010E               	movlb	14
 15830  003942  AF50               	btfss	80,7,b	;volatile
 15831  003944  D002               	goto	l861
 15832                           
 15833                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 15834  003946  0E0E               	movlw	14	;volatile
 15835  003948  D7D7               	goto	L42
 15836  00394A                     l861:
 15837                           
 15838                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 15839  00394A  010D               	movlb	13
 15840  00394C  BDF8               	btfsc	248,6,b	;volatile
 15841  00394E  D005               	goto	l863
 15842  003950  010E               	movlb	14
 15843  003952  AF60               	btfss	96,7,b	;volatile
 15844  003954  D002               	goto	l863
 15845                           
 15846                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 15847  003956  0E0E               	movlw	14	;volatile
 15848  003958  D7C8               	goto	L43
 15849  00395A                     l863:
 15850                           
 15851                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 15852  00395A  010D               	movlb	13
 15853  00395C  BFF8               	btfsc	248,7,b	;volatile
 15854  00395E  D7BD               	goto	l8345
 15855  003960  010E               	movlb	14
 15856  003962  AF70               	btfss	112,7,b	;volatile
 15857  003964  D7BA               	goto	l8345
 15858                           
 15859                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 15860  003966  0E0E               	movlw	14	;volatile
 15861  003968  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 15862  00396A  0E70               	movlw	112	;volatile
 15863  00396C                     L41:
 15864  00396C  6E1E               	movwf	ECANReceiveMessage@ptr,c
 15865  00396E  D00A               	goto	l8395
 15866  003970                     l850:
 15867                           
 15868                           ; BSR set to: 0
 15869                           ;ECAN.c: 910: else
 15870                           ;ECAN.c: 915: {
 15871                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 15872  003970  AE74               	btfss	3956,7,c	;volatile
 15873  003972  D7B3               	goto	l8345
 15874                           
 15875                           ; BSR set to: 0
 15876                           ;ECAN.c: 917: {
 15877                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 15878  003974  506F               	movf	3951,w,c	;volatile
 15879  003976  0B07               	andlw	7
 15880  003978  EC19  F029         	call	__ECANPointBuffer
 15881  00397C  C00E  F01E         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 15882  003980  C00F  F01F         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 15883  003984                     l8395:
 15884                           
 15885                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 15886  003984  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 15887  003988  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 15888  00398C  50DF               	movf	indf2,w,c
 15889  00398E  0B1F               	andlw	31
 15890  003990  6E48               	movwf	__ECANRxFilterHitInfo,c
 15891                           
 15892                           ;ECAN.c: 932: RXB1IF = 0;
 15893  003992  92A4               	bcf	4004,1,c	;volatile
 15894                           
 15895                           ;ECAN.c: 934: if ( RXB1OVFL )
 15896  003994  AC74               	btfss	3956,6,c	;volatile
 15897  003996  D006               	goto	l8405
 15898                           
 15899                           ;ECAN.c: 935: {
 15900                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 15901  003998  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 15902  00399A  6ED9               	movwf	fsr2l,c
 15903  00399C  6ADA               	clrf	fsr2h,c
 15904  00399E  0E00               	movlw	0
 15905  0039A0  86DB               	bsf	plusw2,3,c
 15906                           
 15907                           ;ECAN.c: 937: RXB1OVFL = 0;
 15908  0039A2  9C74               	bcf	3956,6,c	;volatile
 15909  0039A4                     l8405:
 15910                           
 15911                           ;ECAN.c: 942: savedPtr = ptr;
 15912  0039A4  C01E  F018         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 15913  0039A8  C01F  F019         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 15914                           
 15915                           ;ECAN.c: 943: *msgFlags = 0;
 15916  0039AC  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 15917  0039AE  6ED9               	movwf	fsr2l,c
 15918  0039B0  6ADA               	clrf	fsr2h,c
 15919  0039B2  6ADF               	clrf	indf2,c
 15920                           
 15921                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 15922  0039B4  EE20 F005          	lfsr	2,5
 15923  0039B8  501E               	movf	ECANReceiveMessage@ptr,w,c
 15924  0039BA  26D9               	addwf	fsr2l,f,c
 15925  0039BC  501F               	movf	ECANReceiveMessage@ptr+1,w,c
 15926  0039BE  22DA               	addwfc	fsr2h,f,c
 15927  0039C0  50DF               	movf	indf2,w,c
 15928  0039C2  6E1D               	movwf	ECANReceiveMessage@temp,c
 15929                           
 15930                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 15931  0039C4  5016               	movf	ECANReceiveMessage@dataLen,w,c
 15932  0039C6  6ED9               	movwf	fsr2l,c
 15933  0039C8  6ADA               	clrf	fsr2h,c
 15934  0039CA  501D               	movf	ECANReceiveMessage@temp,w,c
 15935  0039CC  0B0F               	andlw	15
 15936  0039CE  6EDF               	movwf	indf2,c
 15937                           
 15938                           ;ECAN.c: 950: if ( temp.bits.b6 )
 15939  0039D0  AC1D               	btfss	ECANReceiveMessage@temp,6,c
 15940  0039D2  D005               	goto	l871
 15941                           
 15942                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 15943  0039D4  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 15944  0039D6  6ED9               	movwf	fsr2l,c
 15945  0039D8  6ADA               	clrf	fsr2h,c
 15946  0039DA  0E00               	movlw	0
 15947  0039DC  8CDB               	bsf	plusw2,6,c
 15948  0039DE                     l871:
 15949                           
 15950                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 15951  0039DE  EE20 F002          	lfsr	2,2
 15952  0039E2  501E               	movf	ECANReceiveMessage@ptr,w,c
 15953  0039E4  26D9               	addwf	fsr2l,f,c
 15954  0039E6  501F               	movf	ECANReceiveMessage@ptr+1,w,c
 15955  0039E8  22DA               	addwfc	fsr2h,f,c
 15956  0039EA  50DF               	movf	indf2,w,c
 15957  0039EC  6E1D               	movwf	ECANReceiveMessage@temp,c
 15958                           
 15959                           ;ECAN.c: 955: if ( temp.bits.b3 )
 15960  0039EE  A61D               	btfss	ECANReceiveMessage@temp,3,c
 15961  0039F0  D008               	goto	l872
 15962                           
 15963                           ;ECAN.c: 956: {
 15964                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 15965  0039F2  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 15966  0039F4  6ED9               	movwf	fsr2l,c
 15967  0039F6  6ADA               	clrf	fsr2h,c
 15968  0039F8  0E00               	movlw	0
 15969  0039FA  8ADB               	bsf	plusw2,5,c
 15970                           
 15971                           ;ECAN.c: 958: temp.Val = 1;
 15972  0039FC  0E01               	movlw	1
 15973  0039FE  6E1D               	movwf	ECANReceiveMessage@temp,c
 15974                           
 15975                           ;ECAN.c: 959: }
 15976  003A00  D001               	goto	l8423
 15977  003A02                     l872:
 15978                           
 15979                           ;ECAN.c: 960: else
 15980                           ;ECAN.c: 961: temp.Val = 0;
 15981  003A02  6A1D               	clrf	ECANReceiveMessage@temp,c
 15982  003A04                     l8423:
 15983                           
 15984                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 15985  003A04  281E               	incf	ECANReceiveMessage@ptr,w,c
 15986  003A06  6E0E               	movwf	?__RegsToCANID,c
 15987  003A08  0E00               	movlw	0
 15988  003A0A  201F               	addwfc	ECANReceiveMessage@ptr+1,w,c
 15989  003A0C  6E0F               	movwf	?__RegsToCANID+1,c
 15990  003A0E  C01A  F010         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 15991  003A12  C01D  F011         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 15992  003A16  ECB9  F01F         	call	__RegsToCANID	;wreg free
 15993                           
 15994                           ;ECAN.c: 966: ptr += 6;
 15995  003A1A  0E06               	movlw	6
 15996  003A1C  261E               	addwf	ECANReceiveMessage@ptr,f,c
 15997  003A1E  0E00               	movlw	0
 15998  003A20  221F               	addwfc	ECANReceiveMessage@ptr+1,f,c
 15999                           
 16000                           ;ECAN.c: 967: temp.Val = *dataLen;
 16001  003A22  5016               	movf	ECANReceiveMessage@dataLen,w,c
 16002  003A24  6ED9               	movwf	fsr2l,c
 16003  003A26  6ADA               	clrf	fsr2h,c
 16004  003A28  50DF               	movf	indf2,w,c
 16005  003A2A  6E1D               	movwf	ECANReceiveMessage@temp,c
 16006                           
 16007                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 16008  003A2C  6A1B               	clrf	ECANReceiveMessage@i,c
 16009  003A2E  D00D               	goto	l8439
 16010  003A30                     l8431:
 16011                           
 16012                           ;ECAN.c: 969: *data++ = *ptr++;
 16013  003A30  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 16014  003A34  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 16015  003A38  5015               	movf	ECANReceiveMessage@data,w,c
 16016  003A3A  6EE1               	movwf	fsr1l,c
 16017  003A3C  6AE2               	clrf	fsr1h,c
 16018  003A3E  CFDF FFE7          	movff	indf2,indf1
 16019  003A42  4A1E               	infsnz	ECANReceiveMessage@ptr,f,c
 16020  003A44  2A1F               	incf	ECANReceiveMessage@ptr+1,f,c
 16021  003A46  2A15               	incf	ECANReceiveMessage@data,f,c
 16022  003A48  2A1B               	incf	ECANReceiveMessage@i,f,c
 16023  003A4A                     l8439:
 16024  003A4A  501D               	movf	ECANReceiveMessage@temp,w,c
 16025  003A4C  5C1B               	subwf	ECANReceiveMessage@i,w,c
 16026  003A4E  E3F0               	bnc	l8431
 16027                           
 16028                           ;ECAN.c: 972: if ( IRXIF )
 16029  003A50  AEA4               	btfss	4004,7,c	;volatile
 16030  003A52  D006               	goto	l8445
 16031                           
 16032                           ;ECAN.c: 973: {
 16033                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 16034  003A54  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16035  003A56  6ED9               	movwf	fsr2l,c
 16036  003A58  6ADA               	clrf	fsr2h,c
 16037  003A5A  0E00               	movlw	0
 16038  003A5C  88DB               	bsf	plusw2,4,c
 16039                           
 16040                           ;ECAN.c: 975: IRXIF = 0;
 16041  003A5E  9EA4               	bcf	4004,7,c	;volatile
 16042  003A60                     l8445:
 16043                           
 16044                           ;ECAN.c: 976: }
 16045                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 16046  003A60  C018  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 16047  003A64  C019  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 16048  003A68  0E7F               	movlw	127
 16049  003A6A  16DF               	andwf	indf2,f,c
 16050                           
 16051                           ;ECAN.c: 983: if ( mode == 0x80 )
 16052  003A6C  501C               	movf	ECANReceiveMessage@mode,w,c
 16053  003A6E  0A80               	xorlw	128
 16054  003A70  B4D8               	btfsc	status,2,c
 16055                           
 16056                           ;ECAN.c: 984: FIFOEMPTY = 0;
 16057  003A72  9E74               	bcf	3956,7,c	;volatile
 16058                           
 16059                           ;ECAN.c: 990: return TRUE;
 16060  003A74  0E01               	movlw	1
 16061  003A76                     l847:
 16062  003A76  0012               	return	
 16063  003A78                     __end_of_ECANReceiveMessage:
 16064                           	opt stack 0
 16065                           tblptru	equ	0xFF8
 16066                           tblptrh	equ	0xFF7
 16067                           tblptrl	equ	0xFF6
 16068                           tablat	equ	0xFF5
 16069                           prodh	equ	0xFF4
 16070                           prodl	equ	0xFF3
 16071                           postinc0	equ	0xFEE
 16072                           wreg	equ	0xFE8
 16073                           indf1	equ	0xFE7
 16074                           postdec1	equ	0xFE5
 16075                           fsr1h	equ	0xFE2
 16076                           fsr1l	equ	0xFE1
 16077                           indf2	equ	0xFDF
 16078                           postinc2	equ	0xFDE
 16079                           postdec2	equ	0xFDD
 16080                           plusw2	equ	0xFDB
 16081                           fsr2h	equ	0xFDA
 16082                           fsr2l	equ	0xFD9
 16083                           status	equ	0xFD8
 16084                           
 16085 ;; *************** function __RegsToCANID *****************
 16086 ;; Defined at:
 16087 ;;		line 1156 in file "../ECAN.c"
 16088 ;; Parameters:    Size  Location     Type
 16089 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 16090 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16091 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16092 ;;  val             1   15[COMRAM] PTR unsigned long 
 16093 ;;		 -> getVSCPFrame@id(4), 
 16094 ;;  type            1   16[COMRAM] unsigned char 
 16095 ;; Auto vars:     Size  Location     Type
 16096 ;;  Value           1   19[COMRAM] PTR struct _CAN_MESSAGE_
 16097 ;;		 -> getVSCPFrame@id(4), 
 16098 ;; Return value:  Size  Location     Type
 16099 ;;		None               void
 16100 ;; Registers used:
 16101 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16102 ;; Tracked objects:
 16103 ;;		On entry : 0/0
 16104 ;;		On exit  : 0/0
 16105 ;;		Unchanged: 0/0
 16106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16107 ;;      Params:         4       0       0       0       0       0       0
 16108 ;;      Locals:         1       0       0       0       0       0       0
 16109 ;;      Temps:          2       0       0       0       0       0       0
 16110 ;;      Totals:         7       0       0       0       0       0       0
 16111 ;;Total ram usage:        7 bytes
 16112 ;; Hardware stack levels used:    1
 16113 ;; Hardware stack levels required when called:    2
 16114 ;; This function calls:
 16115 ;;		Nothing
 16116 ;; This function is called by:
 16117 ;;		_ECANReceiveMessage
 16118 ;; This function uses a non-reentrant model
 16119 ;;
 16120                           
 16121                           	psect	text78
 16122  003F72                     __ptext78:
 16123                           	opt stack 0
 16124  003F72                     __RegsToCANID:
 16125                           	opt stack 24
 16126                           
 16127                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 16128                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 16129                           
 16130                           ;incstack = 0
 16131                           ;incstack = 0
 16132  003F72  C010  F014         	movff	__RegsToCANID@val,__RegsToCANID@Value
 16133                           
 16134                           ;ECAN.c: 1161: if ( type == 0 )
 16135  003F76  6611               	tstfsz	__RegsToCANID@type,c
 16136  003F78  D046               	goto	l8515
 16137                           
 16138                           ;ECAN.c: 1162: {
 16139                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 16140  003F7A  5014               	movf	__RegsToCANID@Value,w,c
 16141  003F7C  6ED9               	movwf	fsr2l,c
 16142  003F7E  6ADA               	clrf	fsr2h,c
 16143  003F80  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 16144  003F84  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 16145  003F88  50E7               	movf	indf1,w,c
 16146  003F8A  6E12               	movwf	??__RegsToCANID& (0+255),c
 16147  003F8C  90D8               	bcf	status,0,c
 16148  003F8E  3612               	rlcf	??__RegsToCANID,f,c
 16149  003F90  90D8               	bcf	status,0,c
 16150  003F92  3612               	rlcf	??__RegsToCANID,f,c
 16151  003F94  90D8               	bcf	status,0,c
 16152  003F96  3412               	rlcf	??__RegsToCANID,w,c
 16153  003F98  6EDF               	movwf	indf2,c
 16154                           
 16155                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 16156  003F9A  5014               	movf	__RegsToCANID@Value,w,c
 16157  003F9C  6ED9               	movwf	fsr2l,c
 16158  003F9E  6ADA               	clrf	fsr2h,c
 16159  003FA0  2AD9               	incf	fsr2l,f,c
 16160  003FA2  6ADA               	clrf	fsr2h,c
 16161  003FA4  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 16162  003FA8  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 16163  003FAC  50E7               	movf	indf1,w,c
 16164  003FAE  6E12               	movwf	??__RegsToCANID& (0+255),c
 16165  003FB0  0E05               	movlw	5
 16166  003FB2  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 16167  003FB4                     u5975:
 16168  003FB4  90D8               	bcf	status,0,c
 16169  003FB6  3212               	rrcf	??__RegsToCANID,f,c
 16170  003FB8  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 16171  003FBA  D7FC               	goto	u5975
 16172  003FBC  5012               	movf	??__RegsToCANID,w,c
 16173  003FBE  6EDF               	movwf	indf2,c
 16174                           
 16175                           ;ECAN.c: 1166: ptr++;
 16176  003FC0  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 16177  003FC2  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 16178                           
 16179                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 16180  003FC4  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 16181  003FC8  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 16182  003FCC  50DF               	movf	indf2,w,c
 16183  003FCE  6E12               	movwf	??__RegsToCANID& (0+255),c
 16184  003FD0  0E05               	movlw	5
 16185  003FD2  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 16186  003FD4                     u5985:
 16187  003FD4  90D8               	bcf	status,0,c
 16188  003FD6  3212               	rrcf	??__RegsToCANID,f,c
 16189  003FD8  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 16190  003FDA  D7FC               	goto	u5985
 16191  003FDC  5014               	movf	__RegsToCANID@Value,w,c
 16192  003FDE  6ED9               	movwf	fsr2l,c
 16193  003FE0  6ADA               	clrf	fsr2h,c
 16194  003FE2  5012               	movf	??__RegsToCANID,w,c
 16195  003FE4  12DF               	iorwf	indf2,f,c
 16196                           
 16197                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 16198  003FE6  5014               	movf	__RegsToCANID@Value,w,c
 16199  003FE8  6ED9               	movwf	fsr2l,c
 16200  003FEA  6ADA               	clrf	fsr2h,c
 16201  003FEC  0E02               	movlw	2
 16202  003FEE  26D9               	addwf	fsr2l,f,c
 16203  003FF0  6ADA               	clrf	fsr2h,c
 16204  003FF2  6ADF               	clrf	indf2,c
 16205                           
 16206                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 16207  003FF4  5014               	movf	__RegsToCANID@Value,w,c
 16208  003FF6  6ED9               	movwf	fsr2l,c
 16209  003FF8  6ADA               	clrf	fsr2h,c
 16210  003FFA  0E03               	movlw	3
 16211  003FFC  26D9               	addwf	fsr2l,f,c
 16212  003FFE  6ADA               	clrf	fsr2h,c
 16213  004000  0E00               	movlw	0
 16214  004002  6EDF               	movwf	indf2,c
 16215                           
 16216                           ;ECAN.c: 1170: }
 16217  004004  D067               	goto	l894
 16218  004006                     l8515:
 16219                           
 16220                           ;ECAN.c: 1171: else
 16221                           ;ECAN.c: 1172: {
 16222                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 16223  004006  5014               	movf	__RegsToCANID@Value,w,c
 16224  004008  6ED9               	movwf	fsr2l,c
 16225  00400A  6ADA               	clrf	fsr2h,c
 16226  00400C  0E02               	movlw	2
 16227  00400E  26D9               	addwf	fsr2l,f,c
 16228  004010  6ADA               	clrf	fsr2h,c
 16229  004012  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 16230  004016  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 16231  00401A  50E7               	movf	indf1,w,c
 16232  00401C  6E12               	movwf	??__RegsToCANID& (0+255),c
 16233  00401E  0E05               	movlw	5
 16234  004020  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 16235  004022                     u5995:
 16236  004022  90D8               	bcf	status,0,c
 16237  004024  3612               	rlcf	??__RegsToCANID,f,c
 16238  004026  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 16239  004028  D7FC               	goto	u5995
 16240  00402A  5012               	movf	??__RegsToCANID,w,c
 16241  00402C  6EDF               	movwf	indf2,c
 16242                           
 16243                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 16244  00402E  5014               	movf	__RegsToCANID@Value,w,c
 16245  004030  6ED9               	movwf	fsr2l,c
 16246  004032  6ADA               	clrf	fsr2h,c
 16247  004034  0E03               	movlw	3
 16248  004036  26D9               	addwf	fsr2l,f,c
 16249  004038  6ADA               	clrf	fsr2h,c
 16250  00403A  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 16251  00403E  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 16252  004042  50E7               	movf	indf1,w,c
 16253  004044  6E12               	movwf	??__RegsToCANID& (0+255),c
 16254  004046  90D8               	bcf	status,0,c
 16255  004048  3212               	rrcf	??__RegsToCANID,f,c
 16256  00404A  90D8               	bcf	status,0,c
 16257  00404C  3212               	rrcf	??__RegsToCANID,f,c
 16258  00404E  90D8               	bcf	status,0,c
 16259  004050  3012               	rrcf	??__RegsToCANID,w,c
 16260  004052  6EDF               	movwf	indf2,c
 16261                           
 16262                           ;ECAN.c: 1176: ptr++;
 16263  004054  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 16264  004056  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 16265                           
 16266                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 16267  004058  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 16268  00405C  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 16269  004060  50DF               	movf	indf2,w,c
 16270  004062  6E12               	movwf	??__RegsToCANID& (0+255),c
 16271  004064  0E03               	movlw	3
 16272  004066  1612               	andwf	??__RegsToCANID,f,c
 16273  004068  5014               	movf	__RegsToCANID@Value,w,c
 16274  00406A  6ED9               	movwf	fsr2l,c
 16275  00406C  6ADA               	clrf	fsr2h,c
 16276  00406E  0E02               	movlw	2
 16277  004070  26D9               	addwf	fsr2l,f,c
 16278  004072  6ADA               	clrf	fsr2h,c
 16279  004074  5012               	movf	??__RegsToCANID,w,c
 16280  004076  12DF               	iorwf	indf2,f,c
 16281                           
 16282                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 16283  004078  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 16284  00407C  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 16285  004080  50DF               	movf	indf2,w,c
 16286  004082  6E12               	movwf	??__RegsToCANID& (0+255),c
 16287  004084  90D8               	bcf	status,0,c
 16288  004086  3212               	rrcf	??__RegsToCANID,f,c
 16289  004088  90D8               	bcf	status,0,c
 16290  00408A  3212               	rrcf	??__RegsToCANID,f,c
 16291  00408C  90D8               	bcf	status,0,c
 16292  00408E  3212               	rrcf	??__RegsToCANID,f,c
 16293  004090  0E1C               	movlw	28
 16294  004092  1612               	andwf	??__RegsToCANID,f,c
 16295  004094  5014               	movf	__RegsToCANID@Value,w,c
 16296  004096  6ED9               	movwf	fsr2l,c
 16297  004098  6ADA               	clrf	fsr2h,c
 16298  00409A  0E02               	movlw	2
 16299  00409C  26D9               	addwf	fsr2l,f,c
 16300  00409E  6ADA               	clrf	fsr2h,c
 16301  0040A0  5012               	movf	??__RegsToCANID,w,c
 16302  0040A2  12DF               	iorwf	indf2,f,c
 16303                           
 16304                           ;ECAN.c: 1180: ptr++;
 16305  0040A4  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 16306  0040A6  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 16307                           
 16308                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 16309  0040A8  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 16310  0040AC  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 16311  0040B0  5014               	movf	__RegsToCANID@Value,w,c
 16312  0040B2  6EE1               	movwf	fsr1l,c
 16313  0040B4  6AE2               	clrf	fsr1h,c
 16314  0040B6  2AE1               	incf	fsr1l,f,c
 16315  0040B8  6AE2               	clrf	fsr1h,c
 16316  0040BA  CFDF FFE7          	movff	indf2,indf1
 16317                           
 16318                           ;ECAN.c: 1182: ptr++;
 16319  0040BE  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 16320  0040C0  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 16321                           
 16322                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 16323  0040C2  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 16324  0040C6  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 16325  0040CA  5014               	movf	__RegsToCANID@Value,w,c
 16326  0040CC  6EE1               	movwf	fsr1l,c
 16327  0040CE  6AE2               	clrf	fsr1h,c
 16328  0040D0  CFDF FFE7          	movff	indf2,indf1
 16329  0040D4                     l894:
 16330  0040D4  0012               	return	
 16331  0040D6                     __end_of__RegsToCANID:
 16332                           	opt stack 0
 16333                           tblptru	equ	0xFF8
 16334                           tblptrh	equ	0xFF7
 16335                           tblptrl	equ	0xFF6
 16336                           tablat	equ	0xFF5
 16337                           prodh	equ	0xFF4
 16338                           prodl	equ	0xFF3
 16339                           postinc0	equ	0xFEE
 16340                           wreg	equ	0xFE8
 16341                           indf1	equ	0xFE7
 16342                           postdec1	equ	0xFE5
 16343                           fsr1h	equ	0xFE2
 16344                           fsr1l	equ	0xFE1
 16345                           indf2	equ	0xFDF
 16346                           postinc2	equ	0xFDE
 16347                           postdec2	equ	0xFDD
 16348                           plusw2	equ	0xFDB
 16349                           fsr2h	equ	0xFDA
 16350                           fsr2l	equ	0xFD9
 16351                           status	equ	0xFD8
 16352                           
 16353 ;; *************** function __ECANPointBuffer *****************
 16354 ;; Defined at:
 16355 ;;		line 1207 in file "../ECAN.c"
 16356 ;; Parameters:    Size  Location     Type
 16357 ;;  b               1    wreg     unsigned char 
 16358 ;; Auto vars:     Size  Location     Type
 16359 ;;  b               1   16[COMRAM] unsigned char 
 16360 ;;  pt              2   17[COMRAM] PTR unsigned char 
 16361 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16362 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16363 ;; Return value:  Size  Location     Type
 16364 ;;                  2   13[COMRAM] PTR unsigned char 
 16365 ;; Registers used:
 16366 ;;		wreg, status,2, status,0
 16367 ;; Tracked objects:
 16368 ;;		On entry : F/0
 16369 ;;		On exit  : 0/0
 16370 ;;		Unchanged: 0/0
 16371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16372 ;;      Params:         3       0       0       0       0       0       0
 16373 ;;      Locals:         3       0       0       0       0       0       0
 16374 ;;      Temps:          0       0       0       0       0       0       0
 16375 ;;      Totals:         6       0       0       0       0       0       0
 16376 ;;Total ram usage:        6 bytes
 16377 ;; Hardware stack levels used:    1
 16378 ;; Hardware stack levels required when called:    2
 16379 ;; This function calls:
 16380 ;;		Nothing
 16381 ;; This function is called by:
 16382 ;;		_ECANReceiveMessage
 16383 ;; This function uses a non-reentrant model
 16384 ;;
 16385                           
 16386                           	psect	text79
 16387  005232                     __ptext79:
 16388                           	opt stack 0
 16389  005232                     __ECANPointBuffer:
 16390                           	opt stack 24
 16391                           
 16392                           ;incstack = 0
 16393                           ;incstack = 0
 16394                           ;__ECANPointBuffer@b stored from wreg
 16395  005232  CFE8 F011          	movff	wreg,__ECANPointBuffer@b
 16396                           
 16397                           ; BSR set to: 0
 16398                           ;ECAN.c: 1208: BYTE* pt;
 16399                           ;ECAN.c: 1210: switch(b)
 16400  005236  D024               	goto	l8501
 16401  005238                     l8483:
 16402                           
 16403                           ; BSR set to: 0
 16404                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 16405  005238  0E0F               	movlw	15	;volatile
 16406  00523A  6E13               	movwf	__ECANPointBuffer@pt+1,c
 16407  00523C  0E60               	movlw	96	;volatile
 16408  00523E  D01E               	goto	L50
 16409  005240                     l8485:
 16410                           
 16411                           ; BSR set to: 0
 16412                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 16413  005240  010F               	movlb	15	; () banked
 16414  005242  0E0F               	movlw	15	;volatile
 16415  005244  6E13               	movwf	__ECANPointBuffer@pt+1,c
 16416  005246  0E50               	movlw	80	;volatile
 16417  005248  D019               	goto	L50
 16418  00524A                     l8487:
 16419                           
 16420                           ; BSR set to: 0
 16421                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 16422  00524A  010E               	movlb	14	; () banked
 16423  00524C  0E0E               	movlw	14	;volatile
 16424  00524E  6E13               	movwf	__ECANPointBuffer@pt+1,c
 16425  005250  0E20               	movlw	32	;volatile
 16426  005252  D014               	goto	L50
 16427  005254                     l8489:
 16428                           
 16429                           ; BSR set to: 0
 16430                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 16431  005254  010E               	movlb	14	; () banked
 16432  005256  0E0E               	movlw	14	;volatile
 16433  005258  6E13               	movwf	__ECANPointBuffer@pt+1,c
 16434  00525A  0E30               	movlw	48	;volatile
 16435  00525C  D00F               	goto	L50
 16436  00525E                     l8491:
 16437                           
 16438                           ; BSR set to: 0
 16439                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 16440  00525E  010E               	movlb	14	; () banked
 16441  005260  0E0E               	movlw	14	;volatile
 16442  005262  6E13               	movwf	__ECANPointBuffer@pt+1,c
 16443  005264  0E40               	movlw	64	;volatile
 16444  005266  D00A               	goto	L50
 16445  005268                     l8493:
 16446                           
 16447                           ; BSR set to: 0
 16448                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 16449  005268  010E               	movlb	14	; () banked
 16450  00526A  0E0E               	movlw	14	;volatile
 16451  00526C  D7EB               	goto	L51
 16452  00526E                     l8495:
 16453                           
 16454                           ; BSR set to: 0
 16455                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 16456  00526E  010E               	movlb	14	; () banked
 16457  005270  0E0E               	movlw	14	;volatile
 16458  005272  D7E3               	goto	L52
 16459  005274                     l8497:
 16460                           
 16461                           ; BSR set to: 0
 16462                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 16463  005274  010E               	movlb	14	; () banked
 16464  005276  0E0E               	movlw	14	;volatile
 16465  005278  6E13               	movwf	__ECANPointBuffer@pt+1,c
 16466  00527A  0E70               	movlw	112	;volatile
 16467  00527C                     L50:
 16468  00527C  6E12               	movwf	__ECANPointBuffer@pt,c
 16469                           
 16470                           ;ECAN.c: 1235: break;
 16471  00527E  D00F               	goto	l899
 16472  005280                     l8501:
 16473                           
 16474                           ; BSR set to: 0
 16475  005280  5011               	movf	__ECANPointBuffer@b,w,c
 16476                           
 16477                           ; Switch size 1, requested type "speed"
 16478                           ; Number of cases is 7, Range of values is 0 to 6
 16479                           ; switch strategies available:
 16480                           ; Name         Instructions Cycles
 16481                           ; simple_byte           22    12 (average)
 16482                           ;	Chosen strategy is simple_byte
 16483  005282  E0DA               	bz	l8483
 16484  005284  0A01               	xorlw	1	; case 1
 16485  005286  E0DC               	bz	l8485
 16486  005288  0A03               	xorlw	3	; case 2
 16487  00528A  E0DF               	bz	l8487
 16488  00528C  0A01               	xorlw	1	; case 3
 16489  00528E  E0E2               	bz	l8489
 16490  005290  0A07               	xorlw	7	; case 4
 16491  005292  E0E5               	bz	l8491
 16492  005294  0A01               	xorlw	1	; case 5
 16493  005296  E0E8               	bz	l8493
 16494  005298  0A03               	xorlw	3	; case 6
 16495  00529A  E0E9               	bz	l8495
 16496  00529C  D7EB               	goto	l8497
 16497  00529E                     l899:
 16498                           
 16499                           ;ECAN.c: 1237: return (pt);
 16500  00529E  C012  F00E         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 16501  0052A2  C013  F00F         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 16502  0052A6  0012               	return	
 16503  0052A8                     __end_of__ECANPointBuffer:
 16504                           	opt stack 0
 16505                           tblptru	equ	0xFF8
 16506                           tblptrh	equ	0xFF7
 16507                           tblptrl	equ	0xFF6
 16508                           tablat	equ	0xFF5
 16509                           prodh	equ	0xFF4
 16510                           prodl	equ	0xFF3
 16511                           postinc0	equ	0xFEE
 16512                           wreg	equ	0xFE8
 16513                           indf1	equ	0xFE7
 16514                           postdec1	equ	0xFE5
 16515                           fsr1h	equ	0xFE2
 16516                           fsr1l	equ	0xFE1
 16517                           indf2	equ	0xFDF
 16518                           postinc2	equ	0xFDE
 16519                           postdec2	equ	0xFDD
 16520                           plusw2	equ	0xFDB
 16521                           fsr2h	equ	0xFDA
 16522                           fsr2l	equ	0xFD9
 16523                           status	equ	0xFD8
 16524                           
 16525 ;; *************** function _vscp_check_pstorage *****************
 16526 ;; Defined at:
 16527 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 16528 ;; Parameters:    Size  Location     Type
 16529 ;;		None
 16530 ;; Auto vars:     Size  Location     Type
 16531 ;;		None
 16532 ;; Return value:  Size  Location     Type
 16533 ;;                  1    wreg      unsigned char 
 16534 ;; Registers used:
 16535 ;;		wreg, status,2, status,0, cstack
 16536 ;; Tracked objects:
 16537 ;;		On entry : 0/0
 16538 ;;		On exit  : 0/0
 16539 ;;		Unchanged: 0/0
 16540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16541 ;;      Params:         0       0       0       0       0       0       0
 16542 ;;      Locals:         0       0       0       0       0       0       0
 16543 ;;      Temps:          0       0       0       0       0       0       0
 16544 ;;      Totals:         0       0       0       0       0       0       0
 16545 ;;Total ram usage:        0 bytes
 16546 ;; Hardware stack levels used:    1
 16547 ;; Hardware stack levels required when called:    5
 16548 ;; This function calls:
 16549 ;;		_vscp_writeNicknamePermanent
 16550 ;;		_vscp_setControlByte
 16551 ;;		_vscp_getControlByte
 16552 ;;		_vscp_init_pstorage
 16553 ;; This function is called by:
 16554 ;;		_main
 16555 ;; This function uses a non-reentrant model
 16556 ;;
 16557                           
 16558                           	psect	text80
 16559  005796                     __ptext80:
 16560                           	opt stack 0
 16561  005796                     _vscp_check_pstorage:
 16562                           	opt stack 25
 16563                           
 16564                           ;vscp_firmware.c: 170: if ( ( 0x55 ==
 16565                           ;vscp_firmware.c: 171: vscp_getControlByte( 0 ) ) &&
 16566                           ;vscp_firmware.c: 172: ( 0xAA ==
 16567                           ;vscp_firmware.c: 173: vscp_getControlByte( 1 ) ) ) {
 16568                           
 16569                           ;incstack = 0
 16570                           ;incstack = 0
 16571  005796  0E00               	movlw	0
 16572  005798  EC22  F02D         	call	_vscp_getControlByte
 16573  00579C  0A55               	xorlw	85
 16574  00579E  E107               	bnz	l9585
 16575  0057A0  0E01               	movlw	1
 16576  0057A2  EC22  F02D         	call	_vscp_getControlByte
 16577  0057A6  0AAA               	xorlw	170
 16578  0057A8  E102               	bnz	l9585
 16579                           
 16580                           ;vscp_firmware.c: 174: return !0;
 16581  0057AA  0E01               	movlw	1
 16582  0057AC  D010               	goto	l1040
 16583  0057AE                     l9585:
 16584                           
 16585                           ;vscp_firmware.c: 175: }
 16586                           ;vscp_firmware.c: 178: vscp_init_pstorage();
 16587  0057AE  EC1A  F02E         	call	_vscp_init_pstorage	;wreg free
 16588                           
 16589                           ;vscp_firmware.c: 181: vscp_writeNicknamePermanent( 0xff );
 16590  0057B2  0EFF               	movlw	255
 16591  0057B4  ECE0  F02D         	call	_vscp_writeNicknamePermanent
 16592                           
 16593                           ;vscp_firmware.c: 184: vscp_setControlByte( 0,
 16594                           ;vscp_firmware.c: 185: 0x55 );
 16595  0057B8  0E55               	movlw	85
 16596  0057BA  6E11               	movwf	?_vscp_setControlByte,c
 16597  0057BC  0E00               	movlw	0
 16598  0057BE  EC11  F02D         	call	_vscp_setControlByte
 16599                           
 16600                           ;vscp_firmware.c: 186: vscp_setControlByte( 1,
 16601                           ;vscp_firmware.c: 187: 0xAA );
 16602  0057C2  0EAA               	movlw	170
 16603  0057C4  6E11               	movwf	?_vscp_setControlByte,c
 16604  0057C6  0E01               	movlw	1
 16605  0057C8  EC11  F02D         	call	_vscp_setControlByte
 16606                           
 16607                           ;vscp_firmware.c: 189: return 0;
 16608  0057CC  0E00               	movlw	0
 16609  0057CE                     l1040:
 16610  0057CE  0012               	return	
 16611  0057D0                     __end_of_vscp_check_pstorage:
 16612                           	opt stack 0
 16613                           tblptru	equ	0xFF8
 16614                           tblptrh	equ	0xFF7
 16615                           tblptrl	equ	0xFF6
 16616                           tablat	equ	0xFF5
 16617                           prodh	equ	0xFF4
 16618                           prodl	equ	0xFF3
 16619                           postinc0	equ	0xFEE
 16620                           wreg	equ	0xFE8
 16621                           indf1	equ	0xFE7
 16622                           postdec1	equ	0xFE5
 16623                           fsr1h	equ	0xFE2
 16624                           fsr1l	equ	0xFE1
 16625                           indf2	equ	0xFDF
 16626                           postinc2	equ	0xFDE
 16627                           postdec2	equ	0xFDD
 16628                           plusw2	equ	0xFDB
 16629                           fsr2h	equ	0xFDA
 16630                           fsr2l	equ	0xFD9
 16631                           status	equ	0xFD8
 16632                           
 16633 ;; *************** function _vscp_init_pstorage *****************
 16634 ;; Defined at:
 16635 ;;		line 2828 in file "../main.c"
 16636 ;; Parameters:    Size  Location     Type
 16637 ;;		None
 16638 ;; Auto vars:     Size  Location     Type
 16639 ;;		None
 16640 ;; Return value:  Size  Location     Type
 16641 ;;		None               void
 16642 ;; Registers used:
 16643 ;;		wreg, status,2, cstack
 16644 ;; Tracked objects:
 16645 ;;		On entry : 0/0
 16646 ;;		On exit  : 0/0
 16647 ;;		Unchanged: 0/0
 16648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16649 ;;      Params:         0       0       0       0       0       0       0
 16650 ;;      Locals:         0       0       0       0       0       0       0
 16651 ;;      Temps:          0       0       0       0       0       0       0
 16652 ;;      Totals:         0       0       0       0       0       0       0
 16653 ;;Total ram usage:        0 bytes
 16654 ;; Hardware stack levels used:    1
 16655 ;; Hardware stack levels required when called:    4
 16656 ;; This function calls:
 16657 ;;		_init_app_eeprom
 16658 ;; This function is called by:
 16659 ;;		_vscp_check_pstorage
 16660 ;; This function uses a non-reentrant model
 16661 ;;
 16662                           
 16663                           	psect	text81
 16664  005C34                     __ptext81:
 16665                           	opt stack 0
 16666  005C34                     _vscp_init_pstorage:
 16667                           	opt stack 25
 16668                           
 16669                           ;main.c: 2829: init_app_eeprom();
 16670                           
 16671                           ;incstack = 0
 16672                           ;incstack = 0
 16673  005C34  EF27  F017         	goto	_init_app_eeprom	;wreg free
 16674  005C38                     __end_of_vscp_init_pstorage:
 16675                           	opt stack 0
 16676                           tblptru	equ	0xFF8
 16677                           tblptrh	equ	0xFF7
 16678                           tblptrl	equ	0xFF6
 16679                           tablat	equ	0xFF5
 16680                           prodh	equ	0xFF4
 16681                           prodl	equ	0xFF3
 16682                           postinc0	equ	0xFEE
 16683                           wreg	equ	0xFE8
 16684                           indf1	equ	0xFE7
 16685                           postdec1	equ	0xFE5
 16686                           fsr1h	equ	0xFE2
 16687                           fsr1l	equ	0xFE1
 16688                           indf2	equ	0xFDF
 16689                           postinc2	equ	0xFDE
 16690                           postdec2	equ	0xFDD
 16691                           plusw2	equ	0xFDB
 16692                           fsr2h	equ	0xFDA
 16693                           fsr2l	equ	0xFD9
 16694                           status	equ	0xFD8
 16695                           
 16696 ;; *************** function _init_app_eeprom *****************
 16697 ;; Defined at:
 16698 ;;		line 1022 in file "../main.c"
 16699 ;; Parameters:    Size  Location     Type
 16700 ;;		None
 16701 ;; Auto vars:     Size  Location     Type
 16702 ;;		None
 16703 ;; Return value:  Size  Location     Type
 16704 ;;		None               void
 16705 ;; Registers used:
 16706 ;;		wreg, status,2, cstack
 16707 ;; Tracked objects:
 16708 ;;		On entry : 0/0
 16709 ;;		On exit  : 0/0
 16710 ;;		Unchanged: 0/0
 16711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16712 ;;      Params:         0       0       0       0       0       0       0
 16713 ;;      Locals:         0       0       0       0       0       0       0
 16714 ;;      Temps:          0       0       0       0       0       0       0
 16715 ;;      Totals:         0       0       0       0       0       0       0
 16716 ;;Total ram usage:        0 bytes
 16717 ;; Hardware stack levels used:    1
 16718 ;; Hardware stack levels required when called:    3
 16719 ;; This function calls:
 16720 ;;		_writeEEPROM
 16721 ;; This function is called by:
 16722 ;;		_main
 16723 ;;		_vscp_init_pstorage
 16724 ;;		_vscp_restoreDefaults
 16725 ;; This function uses a non-reentrant model
 16726 ;;
 16727                           
 16728                           	psect	text82
 16729  002E4E                     __ptext82:
 16730                           	opt stack 0
 16731  002E4E                     _init_app_eeprom:
 16732                           	opt stack 24
 16733                           
 16734                           ;main.c: 1024: writeEEPROM( 0x41, 0 );
 16735                           
 16736                           ;incstack = 0
 16737                           ;incstack = 0
 16738  002E4E  6A0F               	clrf	?_writeEEPROM+1,c
 16739  002E50  0E41               	movlw	65
 16740  002E52  6E0E               	movwf	?_writeEEPROM,c
 16741  002E54  0E00               	movlw	0
 16742  002E56  6A10               	clrf	?_writeEEPROM+2,c
 16743  002E58  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16744                           
 16745                           ;main.c: 1025: writeEEPROM( 0x41, 0 );
 16746  002E5C  6A0F               	clrf	?_writeEEPROM+1,c
 16747  002E5E  0E41               	movlw	65
 16748  002E60  6E0E               	movwf	?_writeEEPROM,c
 16749  002E62  0E00               	movlw	0
 16750  002E64  6A10               	clrf	?_writeEEPROM+2,c
 16751  002E66  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16752                           
 16753                           ;main.c: 1027: writeEEPROM(0x43, 0b00000001);
 16754  002E6A  6A0F               	clrf	?_writeEEPROM+1,c
 16755  002E6C  0E43               	movlw	67
 16756  002E6E  6E0E               	movwf	?_writeEEPROM,c
 16757  002E70  0E01               	movlw	1
 16758  002E72  6E10               	movwf	?_writeEEPROM+2,c
 16759  002E74  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16760                           
 16761                           ;main.c: 1028: writeEEPROM(0x44, 0b00000001);
 16762  002E78  6A0F               	clrf	?_writeEEPROM+1,c
 16763  002E7A  0E44               	movlw	68
 16764  002E7C  6E0E               	movwf	?_writeEEPROM,c
 16765  002E7E  0E01               	movlw	1
 16766  002E80  6E10               	movwf	?_writeEEPROM+2,c
 16767  002E82  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16768                           
 16769                           ;main.c: 1029: writeEEPROM(0x45, 0b00000001);
 16770  002E86  6A0F               	clrf	?_writeEEPROM+1,c
 16771  002E88  0E45               	movlw	69
 16772  002E8A  6E0E               	movwf	?_writeEEPROM,c
 16773  002E8C  0E01               	movlw	1
 16774  002E8E  6E10               	movwf	?_writeEEPROM+2,c
 16775  002E90  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16776                           
 16777                           ;main.c: 1030: writeEEPROM(0x46, 0b00000001);
 16778  002E94  6A0F               	clrf	?_writeEEPROM+1,c
 16779  002E96  0E46               	movlw	70
 16780  002E98  6E0E               	movwf	?_writeEEPROM,c
 16781  002E9A  0E01               	movlw	1
 16782  002E9C  6E10               	movwf	?_writeEEPROM+2,c
 16783  002E9E  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16784                           
 16785                           ;main.c: 1031: writeEEPROM(0x47, 0b00000001);
 16786  002EA2  6A0F               	clrf	?_writeEEPROM+1,c
 16787  002EA4  0E47               	movlw	71
 16788  002EA6  6E0E               	movwf	?_writeEEPROM,c
 16789  002EA8  0E01               	movlw	1
 16790  002EAA  6E10               	movwf	?_writeEEPROM+2,c
 16791  002EAC  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16792                           
 16793                           ;main.c: 1032: writeEEPROM(0x48, 0b00000001);
 16794  002EB0  6A0F               	clrf	?_writeEEPROM+1,c
 16795  002EB2  0E48               	movlw	72
 16796  002EB4  6E0E               	movwf	?_writeEEPROM,c
 16797  002EB6  0E01               	movlw	1
 16798  002EB8  6E10               	movwf	?_writeEEPROM+2,c
 16799  002EBA  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16800                           
 16801                           ;main.c: 1034: writeEEPROM(0x49, 30);
 16802  002EBE  6A0F               	clrf	?_writeEEPROM+1,c
 16803  002EC0  0E49               	movlw	73
 16804  002EC2  6E0E               	movwf	?_writeEEPROM,c
 16805  002EC4  0E1E               	movlw	30
 16806  002EC6  6E10               	movwf	?_writeEEPROM+2,c
 16807  002EC8  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16808                           
 16809                           ;main.c: 1035: writeEEPROM(0x4A, 0);
 16810  002ECC  6A0F               	clrf	?_writeEEPROM+1,c
 16811  002ECE  0E4A               	movlw	74
 16812  002ED0  6E0E               	movwf	?_writeEEPROM,c
 16813  002ED2  0E00               	movlw	0
 16814  002ED4  6A10               	clrf	?_writeEEPROM+2,c
 16815  002ED6  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16816                           
 16817                           ;main.c: 1036: writeEEPROM(0x4B, 0);
 16818  002EDA  6A0F               	clrf	?_writeEEPROM+1,c
 16819  002EDC  0E4B               	movlw	75
 16820  002EDE  6E0E               	movwf	?_writeEEPROM,c
 16821  002EE0  0E00               	movlw	0
 16822  002EE2  6A10               	clrf	?_writeEEPROM+2,c
 16823  002EE4  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16824                           
 16825                           ;main.c: 1037: writeEEPROM(0x4C, 0);
 16826  002EE8  6A0F               	clrf	?_writeEEPROM+1,c
 16827  002EEA  0E4C               	movlw	76
 16828  002EEC  6E0E               	movwf	?_writeEEPROM,c
 16829  002EEE  0E00               	movlw	0
 16830  002EF0  6A10               	clrf	?_writeEEPROM+2,c
 16831  002EF2  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16832                           
 16833                           ;main.c: 1038: writeEEPROM(0x4D, 0);
 16834  002EF6  6A0F               	clrf	?_writeEEPROM+1,c
 16835  002EF8  0E4D               	movlw	77
 16836  002EFA  6E0E               	movwf	?_writeEEPROM,c
 16837  002EFC  0E00               	movlw	0
 16838  002EFE  6A10               	clrf	?_writeEEPROM+2,c
 16839  002F00  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16840                           
 16841                           ;main.c: 1039: writeEEPROM(0x4E, 0);
 16842  002F04  6A0F               	clrf	?_writeEEPROM+1,c
 16843  002F06  0E4E               	movlw	78
 16844  002F08  6E0E               	movwf	?_writeEEPROM,c
 16845  002F0A  0E00               	movlw	0
 16846  002F0C  6A10               	clrf	?_writeEEPROM+2,c
 16847  002F0E  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16848                           
 16849                           ;main.c: 1043: writeEEPROM(0x4F, 0x0F);
 16850  002F12  6A0F               	clrf	?_writeEEPROM+1,c
 16851  002F14  0E4F               	movlw	79
 16852  002F16  6E0E               	movwf	?_writeEEPROM,c
 16853  002F18  0E0F               	movlw	15
 16854  002F1A  6E10               	movwf	?_writeEEPROM+2,c
 16855  002F1C  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16856                           
 16857                           ;main.c: 1044: writeEEPROM(0x50, 0x68);
 16858  002F20  6A0F               	clrf	?_writeEEPROM+1,c
 16859  002F22  0E50               	movlw	80
 16860  002F24  6E0E               	movwf	?_writeEEPROM,c
 16861  002F26  0E68               	movlw	104
 16862  002F28  6E10               	movwf	?_writeEEPROM+2,c
 16863  002F2A  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16864                           
 16865                           ;main.c: 1046: writeEEPROM(0x51, 0x0D);
 16866  002F2E  6A0F               	clrf	?_writeEEPROM+1,c
 16867  002F30  0E51               	movlw	81
 16868  002F32  6E0E               	movwf	?_writeEEPROM,c
 16869  002F34  0E0D               	movlw	13
 16870  002F36  6E10               	movwf	?_writeEEPROM+2,c
 16871  002F38  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16872                           
 16873                           ;main.c: 1047: writeEEPROM(0x52, 0x7F);
 16874  002F3C  6A0F               	clrf	?_writeEEPROM+1,c
 16875  002F3E  0E52               	movlw	82
 16876  002F40  6E0E               	movwf	?_writeEEPROM,c
 16877  002F42  0E7F               	movlw	127
 16878  002F44  6E10               	movwf	?_writeEEPROM+2,c
 16879  002F46  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16880                           
 16881                           ;main.c: 1049: writeEEPROM(0x53, 0x0D);
 16882  002F4A  6A0F               	clrf	?_writeEEPROM+1,c
 16883  002F4C  0E53               	movlw	83
 16884  002F4E  6E0E               	movwf	?_writeEEPROM,c
 16885  002F50  0E0D               	movlw	13
 16886  002F52  6E10               	movwf	?_writeEEPROM+2,c
 16887  002F54  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16888                           
 16889                           ;main.c: 1050: writeEEPROM(0x54, 0x7F);
 16890  002F58  6A0F               	clrf	?_writeEEPROM+1,c
 16891  002F5A  0E54               	movlw	84
 16892  002F5C  6E0E               	movwf	?_writeEEPROM,c
 16893  002F5E  0E7F               	movlw	127
 16894  002F60  6E10               	movwf	?_writeEEPROM+2,c
 16895  002F62  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16896                           
 16897                           ;main.c: 1052: writeEEPROM(0x55, 0x0D);
 16898  002F66  6A0F               	clrf	?_writeEEPROM+1,c
 16899  002F68  0E55               	movlw	85
 16900  002F6A  6E0E               	movwf	?_writeEEPROM,c
 16901  002F6C  0E0D               	movlw	13
 16902  002F6E  6E10               	movwf	?_writeEEPROM+2,c
 16903  002F70  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16904                           
 16905                           ;main.c: 1053: writeEEPROM(0x56, 0x7F);
 16906  002F74  6A0F               	clrf	?_writeEEPROM+1,c
 16907  002F76  0E56               	movlw	86
 16908  002F78  6E0E               	movwf	?_writeEEPROM,c
 16909  002F7A  0E7F               	movlw	127
 16910  002F7C  6E10               	movwf	?_writeEEPROM+2,c
 16911  002F7E  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16912                           
 16913                           ;main.c: 1055: writeEEPROM(0x57, 0x0D);
 16914  002F82  6A0F               	clrf	?_writeEEPROM+1,c
 16915  002F84  0E57               	movlw	87
 16916  002F86  6E0E               	movwf	?_writeEEPROM,c
 16917  002F88  0E0D               	movlw	13
 16918  002F8A  6E10               	movwf	?_writeEEPROM+2,c
 16919  002F8C  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16920                           
 16921                           ;main.c: 1056: writeEEPROM(0x58, 0x7F);
 16922  002F90  6A0F               	clrf	?_writeEEPROM+1,c
 16923  002F92  0E58               	movlw	88
 16924  002F94  6E0E               	movwf	?_writeEEPROM,c
 16925  002F96  0E7F               	movlw	127
 16926  002F98  6E10               	movwf	?_writeEEPROM+2,c
 16927  002F9A  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16928                           
 16929                           ;main.c: 1058: writeEEPROM(0x59, 0x0D);
 16930  002F9E  6A0F               	clrf	?_writeEEPROM+1,c
 16931  002FA0  0E59               	movlw	89
 16932  002FA2  6E0E               	movwf	?_writeEEPROM,c
 16933  002FA4  0E0D               	movlw	13
 16934  002FA6  6E10               	movwf	?_writeEEPROM+2,c
 16935  002FA8  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16936                           
 16937                           ;main.c: 1059: writeEEPROM(0x5A, 0x7F);
 16938  002FAC  6A0F               	clrf	?_writeEEPROM+1,c
 16939  002FAE  0E5A               	movlw	90
 16940  002FB0  6E0E               	movwf	?_writeEEPROM,c
 16941  002FB2  0E7F               	movlw	127
 16942  002FB4  6E10               	movwf	?_writeEEPROM+2,c
 16943  002FB6  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16944                           
 16945                           ;main.c: 1063: writeEEPROM(0x5B, 0x80);
 16946  002FBA  6A0F               	clrf	?_writeEEPROM+1,c
 16947  002FBC  0E5B               	movlw	91
 16948  002FBE  6E0E               	movwf	?_writeEEPROM,c
 16949  002FC0  0E80               	movlw	128
 16950  002FC2  6E10               	movwf	?_writeEEPROM+2,c
 16951  002FC4  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16952                           
 16953                           ;main.c: 1064: writeEEPROM(0x5C, 0xff);
 16954  002FC8  6A0F               	clrf	?_writeEEPROM+1,c
 16955  002FCA  0E5C               	movlw	92
 16956  002FCC  6E0E               	movwf	?_writeEEPROM,c
 16957  002FCE  0EFF               	movlw	255
 16958  002FD0  6810               	setf	?_writeEEPROM+2,c
 16959  002FD2  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16960                           
 16961                           ;main.c: 1066: writeEEPROM(0x5D, 0x80);
 16962  002FD6  6A0F               	clrf	?_writeEEPROM+1,c
 16963  002FD8  0E5D               	movlw	93
 16964  002FDA  6E0E               	movwf	?_writeEEPROM,c
 16965  002FDC  0E80               	movlw	128
 16966  002FDE  6E10               	movwf	?_writeEEPROM+2,c
 16967  002FE0  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16968                           
 16969                           ;main.c: 1067: writeEEPROM(0x5E, 0xff);
 16970  002FE4  6A0F               	clrf	?_writeEEPROM+1,c
 16971  002FE6  0E5E               	movlw	94
 16972  002FE8  6E0E               	movwf	?_writeEEPROM,c
 16973  002FEA  0EFF               	movlw	255
 16974  002FEC  6810               	setf	?_writeEEPROM+2,c
 16975  002FEE  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16976                           
 16977                           ;main.c: 1069: writeEEPROM(0x5F, 0x80);
 16978  002FF2  6A0F               	clrf	?_writeEEPROM+1,c
 16979  002FF4  0E5F               	movlw	95
 16980  002FF6  6E0E               	movwf	?_writeEEPROM,c
 16981  002FF8  0E80               	movlw	128
 16982  002FFA  6E10               	movwf	?_writeEEPROM+2,c
 16983  002FFC  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16984                           
 16985                           ;main.c: 1070: writeEEPROM(0x60, 0xff);
 16986  003000  6A0F               	clrf	?_writeEEPROM+1,c
 16987  003002  0E60               	movlw	96
 16988  003004  6E0E               	movwf	?_writeEEPROM,c
 16989  003006  0EFF               	movlw	255
 16990  003008  6810               	setf	?_writeEEPROM+2,c
 16991  00300A  ECCA  F02C         	call	_writeEEPROM	;wreg free
 16992                           
 16993                           ;main.c: 1072: writeEEPROM(0x61, 0x80);
 16994  00300E  6A0F               	clrf	?_writeEEPROM+1,c
 16995  003010  0E61               	movlw	97
 16996  003012  6E0E               	movwf	?_writeEEPROM,c
 16997  003014  0E80               	movlw	128
 16998  003016  6E10               	movwf	?_writeEEPROM+2,c
 16999  003018  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17000                           
 17001                           ;main.c: 1073: writeEEPROM(0x62, 0xff);
 17002  00301C  6A0F               	clrf	?_writeEEPROM+1,c
 17003  00301E  0E62               	movlw	98
 17004  003020  6E0E               	movwf	?_writeEEPROM,c
 17005  003022  0EFF               	movlw	255
 17006  003024  6810               	setf	?_writeEEPROM+2,c
 17007  003026  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17008                           
 17009                           ;main.c: 1075: writeEEPROM(0x63, 0x80);
 17010  00302A  6A0F               	clrf	?_writeEEPROM+1,c
 17011  00302C  0E63               	movlw	99
 17012  00302E  6E0E               	movwf	?_writeEEPROM,c
 17013  003030  0E80               	movlw	128
 17014  003032  6E10               	movwf	?_writeEEPROM+2,c
 17015  003034  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17016                           
 17017                           ;main.c: 1076: writeEEPROM(0x64, 0xff);
 17018  003038  6A0F               	clrf	?_writeEEPROM+1,c
 17019  00303A  0E64               	movlw	100
 17020  00303C  6E0E               	movwf	?_writeEEPROM,c
 17021  00303E  0EFF               	movlw	255
 17022  003040  6810               	setf	?_writeEEPROM+2,c
 17023  003042  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17024                           
 17025                           ;main.c: 1078: writeEEPROM(0x65, 0x80);
 17026  003046  6A0F               	clrf	?_writeEEPROM+1,c
 17027  003048  0E65               	movlw	101
 17028  00304A  6E0E               	movwf	?_writeEEPROM,c
 17029  00304C  0E80               	movlw	128
 17030  00304E  6E10               	movwf	?_writeEEPROM+2,c
 17031  003050  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17032                           
 17033                           ;main.c: 1079: writeEEPROM(0x66, 0xff);
 17034  003054  6A0F               	clrf	?_writeEEPROM+1,c
 17035  003056  0E66               	movlw	102
 17036  003058  6E0E               	movwf	?_writeEEPROM,c
 17037  00305A  0EFF               	movlw	255
 17038  00305C  6810               	setf	?_writeEEPROM+2,c
 17039  00305E  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17040                           
 17041                           ;main.c: 1083: writeEEPROM(0x67, 0x7f);
 17042  003062  6A0F               	clrf	?_writeEEPROM+1,c
 17043  003064  0E67               	movlw	103
 17044  003066  6E0E               	movwf	?_writeEEPROM,c
 17045  003068  0E7F               	movlw	127
 17046  00306A  6E10               	movwf	?_writeEEPROM+2,c
 17047  00306C  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17048                           
 17049                           ;main.c: 1084: writeEEPROM(0x68, 0xff);
 17050  003070  6A0F               	clrf	?_writeEEPROM+1,c
 17051  003072  0E68               	movlw	104
 17052  003074  6E0E               	movwf	?_writeEEPROM,c
 17053  003076  0EFF               	movlw	255
 17054  003078  6810               	setf	?_writeEEPROM+2,c
 17055  00307A  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17056                           
 17057                           ;main.c: 1086: writeEEPROM(0x69, 0x7f);
 17058  00307E  6A0F               	clrf	?_writeEEPROM+1,c
 17059  003080  0E69               	movlw	105
 17060  003082  6E0E               	movwf	?_writeEEPROM,c
 17061  003084  0E7F               	movlw	127
 17062  003086  6E10               	movwf	?_writeEEPROM+2,c
 17063  003088  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17064                           
 17065                           ;main.c: 1087: writeEEPROM(0x6A, 0xff);
 17066  00308C  6A0F               	clrf	?_writeEEPROM+1,c
 17067  00308E  0E6A               	movlw	106
 17068  003090  6E0E               	movwf	?_writeEEPROM,c
 17069  003092  0EFF               	movlw	255
 17070  003094  6810               	setf	?_writeEEPROM+2,c
 17071  003096  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17072                           
 17073                           ;main.c: 1089: writeEEPROM(0x6B, 0x7f);
 17074  00309A  6A0F               	clrf	?_writeEEPROM+1,c
 17075  00309C  0E6B               	movlw	107
 17076  00309E  6E0E               	movwf	?_writeEEPROM,c
 17077  0030A0  0E7F               	movlw	127
 17078  0030A2  6E10               	movwf	?_writeEEPROM+2,c
 17079  0030A4  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17080                           
 17081                           ;main.c: 1090: writeEEPROM(0x6C, 0xff);
 17082  0030A8  6A0F               	clrf	?_writeEEPROM+1,c
 17083  0030AA  0E6C               	movlw	108
 17084  0030AC  6E0E               	movwf	?_writeEEPROM,c
 17085  0030AE  0EFF               	movlw	255
 17086  0030B0  6810               	setf	?_writeEEPROM+2,c
 17087  0030B2  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17088                           
 17089                           ;main.c: 1092: writeEEPROM(0x6D, 0x7f);
 17090  0030B6  6A0F               	clrf	?_writeEEPROM+1,c
 17091  0030B8  0E6D               	movlw	109
 17092  0030BA  6E0E               	movwf	?_writeEEPROM,c
 17093  0030BC  0E7F               	movlw	127
 17094  0030BE  6E10               	movwf	?_writeEEPROM+2,c
 17095  0030C0  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17096                           
 17097                           ;main.c: 1093: writeEEPROM(0x6E, 0xff);
 17098  0030C4  6A0F               	clrf	?_writeEEPROM+1,c
 17099  0030C6  0E6E               	movlw	110
 17100  0030C8  6E0E               	movwf	?_writeEEPROM,c
 17101  0030CA  0EFF               	movlw	255
 17102  0030CC  6810               	setf	?_writeEEPROM+2,c
 17103  0030CE  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17104                           
 17105                           ;main.c: 1095: writeEEPROM(0x6F, 0x7f);
 17106  0030D2  6A0F               	clrf	?_writeEEPROM+1,c
 17107  0030D4  0E6F               	movlw	111
 17108  0030D6  6E0E               	movwf	?_writeEEPROM,c
 17109  0030D8  0E7F               	movlw	127
 17110  0030DA  6E10               	movwf	?_writeEEPROM+2,c
 17111  0030DC  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17112                           
 17113                           ;main.c: 1096: writeEEPROM(0x70, 0xff);
 17114  0030E0  6A0F               	clrf	?_writeEEPROM+1,c
 17115  0030E2  0E70               	movlw	112
 17116  0030E4  6E0E               	movwf	?_writeEEPROM,c
 17117  0030E6  0EFF               	movlw	255
 17118  0030E8  6810               	setf	?_writeEEPROM+2,c
 17119  0030EA  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17120                           
 17121                           ;main.c: 1098: writeEEPROM(0x71, 0x7f);
 17122  0030EE  6A0F               	clrf	?_writeEEPROM+1,c
 17123  0030F0  0E71               	movlw	113
 17124  0030F2  6E0E               	movwf	?_writeEEPROM,c
 17125  0030F4  0E7F               	movlw	127
 17126  0030F6  6E10               	movwf	?_writeEEPROM+2,c
 17127  0030F8  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17128                           
 17129                           ;main.c: 1099: writeEEPROM(0x72, 0xff);
 17130  0030FC  6A0F               	clrf	?_writeEEPROM+1,c
 17131  0030FE  0E72               	movlw	114
 17132  003100  6E0E               	movwf	?_writeEEPROM,c
 17133  003102  0EFF               	movlw	255
 17134  003104  6810               	setf	?_writeEEPROM+2,c
 17135  003106  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17136                           
 17137                           ;main.c: 1103: writeEEPROM(0x73, 0);
 17138  00310A  6A0F               	clrf	?_writeEEPROM+1,c
 17139  00310C  0E73               	movlw	115
 17140  00310E  6E0E               	movwf	?_writeEEPROM,c
 17141  003110  0E00               	movlw	0
 17142  003112  6A10               	clrf	?_writeEEPROM+2,c
 17143  003114  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17144                           
 17145                           ;main.c: 1104: writeEEPROM(0x74, 0);
 17146  003118  6A0F               	clrf	?_writeEEPROM+1,c
 17147  00311A  0E74               	movlw	116
 17148  00311C  6E0E               	movwf	?_writeEEPROM,c
 17149  00311E  0E00               	movlw	0
 17150  003120  6A10               	clrf	?_writeEEPROM+2,c
 17151  003122  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17152                           
 17153                           ;main.c: 1106: writeEEPROM(0x75, 0);
 17154  003126  6A0F               	clrf	?_writeEEPROM+1,c
 17155  003128  0E75               	movlw	117
 17156  00312A  6E0E               	movwf	?_writeEEPROM,c
 17157  00312C  0E00               	movlw	0
 17158  00312E  6A10               	clrf	?_writeEEPROM+2,c
 17159  003130  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17160                           
 17161                           ;main.c: 1107: writeEEPROM(0x76, 0);
 17162  003134  6A0F               	clrf	?_writeEEPROM+1,c
 17163  003136  0E76               	movlw	118
 17164  003138  6E0E               	movwf	?_writeEEPROM,c
 17165  00313A  0E00               	movlw	0
 17166  00313C  6A10               	clrf	?_writeEEPROM+2,c
 17167  00313E  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17168                           
 17169                           ;main.c: 1109: writeEEPROM(0x77, 0);
 17170  003142  6A0F               	clrf	?_writeEEPROM+1,c
 17171  003144  0E77               	movlw	119
 17172  003146  6E0E               	movwf	?_writeEEPROM,c
 17173  003148  0E00               	movlw	0
 17174  00314A  6A10               	clrf	?_writeEEPROM+2,c
 17175  00314C  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17176                           
 17177                           ;main.c: 1110: writeEEPROM(0x78, 0);
 17178  003150  6A0F               	clrf	?_writeEEPROM+1,c
 17179  003152  0E78               	movlw	120
 17180  003154  6E0E               	movwf	?_writeEEPROM,c
 17181  003156  0E00               	movlw	0
 17182  003158  6A10               	clrf	?_writeEEPROM+2,c
 17183  00315A  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17184                           
 17185                           ;main.c: 1112: writeEEPROM(0x79, 0);
 17186  00315E  6A0F               	clrf	?_writeEEPROM+1,c
 17187  003160  0E79               	movlw	121
 17188  003162  6E0E               	movwf	?_writeEEPROM,c
 17189  003164  0E00               	movlw	0
 17190  003166  6A10               	clrf	?_writeEEPROM+2,c
 17191  003168  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17192                           
 17193                           ;main.c: 1113: writeEEPROM(0x7A, 0);
 17194  00316C  6A0F               	clrf	?_writeEEPROM+1,c
 17195  00316E  0E7A               	movlw	122
 17196  003170  6E0E               	movwf	?_writeEEPROM,c
 17197  003172  0E00               	movlw	0
 17198  003174  6A10               	clrf	?_writeEEPROM+2,c
 17199  003176  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17200                           
 17201                           ;main.c: 1115: writeEEPROM(0x7B, 0);
 17202  00317A  6A0F               	clrf	?_writeEEPROM+1,c
 17203  00317C  0E7B               	movlw	123
 17204  00317E  6E0E               	movwf	?_writeEEPROM,c
 17205  003180  0E00               	movlw	0
 17206  003182  6A10               	clrf	?_writeEEPROM+2,c
 17207  003184  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17208                           
 17209                           ;main.c: 1116: writeEEPROM(0x7C, 0);
 17210  003188  6A0F               	clrf	?_writeEEPROM+1,c
 17211  00318A  0E7C               	movlw	124
 17212  00318C  6E0E               	movwf	?_writeEEPROM,c
 17213  00318E  0E00               	movlw	0
 17214  003190  6A10               	clrf	?_writeEEPROM+2,c
 17215  003192  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17216                           
 17217                           ;main.c: 1118: writeEEPROM(0x7D, 0);
 17218  003196  6A0F               	clrf	?_writeEEPROM+1,c
 17219  003198  0E7D               	movlw	125
 17220  00319A  6E0E               	movwf	?_writeEEPROM,c
 17221  00319C  0E00               	movlw	0
 17222  00319E  6A10               	clrf	?_writeEEPROM+2,c
 17223  0031A0  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17224                           
 17225                           ;main.c: 1119: writeEEPROM(0x7E, 0);
 17226  0031A4  6A0F               	clrf	?_writeEEPROM+1,c
 17227  0031A6  0E7E               	movlw	126
 17228  0031A8  6E0E               	movwf	?_writeEEPROM,c
 17229  0031AA  0E00               	movlw	0
 17230  0031AC  6A10               	clrf	?_writeEEPROM+2,c
 17231  0031AE  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17232                           
 17233                           ;main.c: 1123: writeEEPROM(0x7F, 0x7f);
 17234  0031B2  6A0F               	clrf	?_writeEEPROM+1,c
 17235  0031B4  0E7F               	movlw	127
 17236  0031B6  6E0E               	movwf	?_writeEEPROM,c
 17237  0031B8  6E10               	movwf	?_writeEEPROM+2,c
 17238  0031BA  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17239                           
 17240                           ;main.c: 1124: writeEEPROM(0x80, 0xff);
 17241  0031BE  6A0F               	clrf	?_writeEEPROM+1,c
 17242  0031C0  0E80               	movlw	128
 17243  0031C2  6E0E               	movwf	?_writeEEPROM,c
 17244  0031C4  0EFF               	movlw	255
 17245  0031C6  6810               	setf	?_writeEEPROM+2,c
 17246  0031C8  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17247                           
 17248                           ;main.c: 1126: writeEEPROM(0x81, 0x7f);
 17249  0031CC  6A0F               	clrf	?_writeEEPROM+1,c
 17250  0031CE  0E81               	movlw	129
 17251  0031D0  6E0E               	movwf	?_writeEEPROM,c
 17252  0031D2  0E7F               	movlw	127
 17253  0031D4  6E10               	movwf	?_writeEEPROM+2,c
 17254  0031D6  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17255                           
 17256                           ;main.c: 1127: writeEEPROM(0x82, 0xff);
 17257  0031DA  6A0F               	clrf	?_writeEEPROM+1,c
 17258  0031DC  0E82               	movlw	130
 17259  0031DE  6E0E               	movwf	?_writeEEPROM,c
 17260  0031E0  0EFF               	movlw	255
 17261  0031E2  6810               	setf	?_writeEEPROM+2,c
 17262  0031E4  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17263                           
 17264                           ;main.c: 1129: writeEEPROM(0x83, 0x7f);
 17265  0031E8  6A0F               	clrf	?_writeEEPROM+1,c
 17266  0031EA  0E83               	movlw	131
 17267  0031EC  6E0E               	movwf	?_writeEEPROM,c
 17268  0031EE  0E7F               	movlw	127
 17269  0031F0  6E10               	movwf	?_writeEEPROM+2,c
 17270  0031F2  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17271                           
 17272                           ;main.c: 1130: writeEEPROM(0x84, 0xff);
 17273  0031F6  6A0F               	clrf	?_writeEEPROM+1,c
 17274  0031F8  0E84               	movlw	132
 17275  0031FA  6E0E               	movwf	?_writeEEPROM,c
 17276  0031FC  0EFF               	movlw	255
 17277  0031FE  6810               	setf	?_writeEEPROM+2,c
 17278  003200  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17279                           
 17280                           ;main.c: 1132: writeEEPROM(0x85, 0x7f);
 17281  003204  6A0F               	clrf	?_writeEEPROM+1,c
 17282  003206  0E85               	movlw	133
 17283  003208  6E0E               	movwf	?_writeEEPROM,c
 17284  00320A  0E7F               	movlw	127
 17285  00320C  6E10               	movwf	?_writeEEPROM+2,c
 17286  00320E  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17287                           
 17288                           ;main.c: 1133: writeEEPROM(0x86, 0xff);
 17289  003212  6A0F               	clrf	?_writeEEPROM+1,c
 17290  003214  0E86               	movlw	134
 17291  003216  6E0E               	movwf	?_writeEEPROM,c
 17292  003218  0EFF               	movlw	255
 17293  00321A  6810               	setf	?_writeEEPROM+2,c
 17294  00321C  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17295                           
 17296                           ;main.c: 1135: writeEEPROM(0x87, 0x7f);
 17297  003220  6A0F               	clrf	?_writeEEPROM+1,c
 17298  003222  0E87               	movlw	135
 17299  003224  6E0E               	movwf	?_writeEEPROM,c
 17300  003226  0E7F               	movlw	127
 17301  003228  6E10               	movwf	?_writeEEPROM+2,c
 17302  00322A  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17303                           
 17304                           ;main.c: 1136: writeEEPROM(0x88, 0xff);
 17305  00322E  6A0F               	clrf	?_writeEEPROM+1,c
 17306  003230  0E88               	movlw	136
 17307  003232  6E0E               	movwf	?_writeEEPROM,c
 17308  003234  0EFF               	movlw	255
 17309  003236  6810               	setf	?_writeEEPROM+2,c
 17310  003238  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17311                           
 17312                           ;main.c: 1138: writeEEPROM(0x89, 0x7f);
 17313  00323C  6A0F               	clrf	?_writeEEPROM+1,c
 17314  00323E  0E89               	movlw	137
 17315  003240  6E0E               	movwf	?_writeEEPROM,c
 17316  003242  0E7F               	movlw	127
 17317  003244  6E10               	movwf	?_writeEEPROM+2,c
 17318  003246  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17319                           
 17320                           ;main.c: 1139: writeEEPROM(0x8A, 0xff);
 17321  00324A  6A0F               	clrf	?_writeEEPROM+1,c
 17322  00324C  0E8A               	movlw	138
 17323  00324E  6E0E               	movwf	?_writeEEPROM,c
 17324  003250  0EFF               	movlw	255
 17325  003252  6810               	setf	?_writeEEPROM+2,c
 17326  003254  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17327                           
 17328                           ;main.c: 1143: writeEEPROM(0x8B, 0x80);
 17329  003258  6A0F               	clrf	?_writeEEPROM+1,c
 17330  00325A  0E8B               	movlw	139
 17331  00325C  6E0E               	movwf	?_writeEEPROM,c
 17332  00325E  0E80               	movlw	128
 17333  003260  6E10               	movwf	?_writeEEPROM+2,c
 17334  003262  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17335                           
 17336                           ;main.c: 1144: writeEEPROM(0x8C, 0x00);
 17337  003266  6A0F               	clrf	?_writeEEPROM+1,c
 17338  003268  0E8C               	movlw	140
 17339  00326A  6E0E               	movwf	?_writeEEPROM,c
 17340  00326C  0E00               	movlw	0
 17341  00326E  6A10               	clrf	?_writeEEPROM+2,c
 17342  003270  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17343                           
 17344                           ;main.c: 1146: writeEEPROM(0x8D, 0x80);
 17345  003274  6A0F               	clrf	?_writeEEPROM+1,c
 17346  003276  0E8D               	movlw	141
 17347  003278  6E0E               	movwf	?_writeEEPROM,c
 17348  00327A  0E80               	movlw	128
 17349  00327C  6E10               	movwf	?_writeEEPROM+2,c
 17350  00327E  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17351                           
 17352                           ;main.c: 1147: writeEEPROM(0x8E, 0x00);
 17353  003282  6A0F               	clrf	?_writeEEPROM+1,c
 17354  003284  0E8E               	movlw	142
 17355  003286  6E0E               	movwf	?_writeEEPROM,c
 17356  003288  0E00               	movlw	0
 17357  00328A  6A10               	clrf	?_writeEEPROM+2,c
 17358  00328C  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17359                           
 17360                           ;main.c: 1149: writeEEPROM(0x8F, 0x80);
 17361  003290  6A0F               	clrf	?_writeEEPROM+1,c
 17362  003292  0E8F               	movlw	143
 17363  003294  6E0E               	movwf	?_writeEEPROM,c
 17364  003296  0E80               	movlw	128
 17365  003298  6E10               	movwf	?_writeEEPROM+2,c
 17366  00329A  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17367                           
 17368                           ;main.c: 1150: writeEEPROM(0x90, 0x00);
 17369  00329E  6A0F               	clrf	?_writeEEPROM+1,c
 17370  0032A0  0E90               	movlw	144
 17371  0032A2  6E0E               	movwf	?_writeEEPROM,c
 17372  0032A4  0E00               	movlw	0
 17373  0032A6  6A10               	clrf	?_writeEEPROM+2,c
 17374  0032A8  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17375                           
 17376                           ;main.c: 1152: writeEEPROM(0x91, 0x80);
 17377  0032AC  6A0F               	clrf	?_writeEEPROM+1,c
 17378  0032AE  0E91               	movlw	145
 17379  0032B0  6E0E               	movwf	?_writeEEPROM,c
 17380  0032B2  0E80               	movlw	128
 17381  0032B4  6E10               	movwf	?_writeEEPROM+2,c
 17382  0032B6  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17383                           
 17384                           ;main.c: 1153: writeEEPROM(0x92, 0x00);
 17385  0032BA  6A0F               	clrf	?_writeEEPROM+1,c
 17386  0032BC  0E92               	movlw	146
 17387  0032BE  6E0E               	movwf	?_writeEEPROM,c
 17388  0032C0  0E00               	movlw	0
 17389  0032C2  6A10               	clrf	?_writeEEPROM+2,c
 17390  0032C4  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17391                           
 17392                           ;main.c: 1155: writeEEPROM(0x93, 0x80);
 17393  0032C8  6A0F               	clrf	?_writeEEPROM+1,c
 17394  0032CA  0E93               	movlw	147
 17395  0032CC  6E0E               	movwf	?_writeEEPROM,c
 17396  0032CE  0E80               	movlw	128
 17397  0032D0  6E10               	movwf	?_writeEEPROM+2,c
 17398  0032D2  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17399                           
 17400                           ;main.c: 1156: writeEEPROM(0x94, 0x00);
 17401  0032D6  6A0F               	clrf	?_writeEEPROM+1,c
 17402  0032D8  0E94               	movlw	148
 17403  0032DA  6E0E               	movwf	?_writeEEPROM,c
 17404  0032DC  0E00               	movlw	0
 17405  0032DE  6A10               	clrf	?_writeEEPROM+2,c
 17406  0032E0  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17407                           
 17408                           ;main.c: 1158: writeEEPROM(0x95, 0x80);
 17409  0032E4  6A0F               	clrf	?_writeEEPROM+1,c
 17410  0032E6  0E95               	movlw	149
 17411  0032E8  6E0E               	movwf	?_writeEEPROM,c
 17412  0032EA  0E80               	movlw	128
 17413  0032EC  6E10               	movwf	?_writeEEPROM+2,c
 17414  0032EE  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17415                           
 17416                           ;main.c: 1159: writeEEPROM(0x96, 0x00);
 17417  0032F2  6A0F               	clrf	?_writeEEPROM+1,c
 17418  0032F4  0E96               	movlw	150
 17419  0032F6  6E0E               	movwf	?_writeEEPROM,c
 17420  0032F8  0E00               	movlw	0
 17421  0032FA  6A10               	clrf	?_writeEEPROM+2,c
 17422  0032FC  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17423                           
 17424                           ;main.c: 1163: writeEEPROM(0x97, 2);
 17425  003300  6A0F               	clrf	?_writeEEPROM+1,c
 17426  003302  0E97               	movlw	151
 17427  003304  6E0E               	movwf	?_writeEEPROM,c
 17428  003306  0E02               	movlw	2
 17429  003308  6E10               	movwf	?_writeEEPROM+2,c
 17430  00330A  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17431                           
 17432                           ;main.c: 1164: writeEEPROM(0x98, 2);
 17433  00330E  6A0F               	clrf	?_writeEEPROM+1,c
 17434  003310  0E98               	movlw	152
 17435  003312  6E0E               	movwf	?_writeEEPROM,c
 17436  003314  0E02               	movlw	2
 17437  003316  6E10               	movwf	?_writeEEPROM+2,c
 17438  003318  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17439                           
 17440                           ;main.c: 1165: writeEEPROM(0x99, 2);
 17441  00331C  6A0F               	clrf	?_writeEEPROM+1,c
 17442  00331E  0E99               	movlw	153
 17443  003320  6E0E               	movwf	?_writeEEPROM,c
 17444  003322  0E02               	movlw	2
 17445  003324  6E10               	movwf	?_writeEEPROM+2,c
 17446  003326  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17447                           
 17448                           ;main.c: 1166: writeEEPROM(0x9A, 2);
 17449  00332A  6A0F               	clrf	?_writeEEPROM+1,c
 17450  00332C  0E9A               	movlw	154
 17451  00332E  6E0E               	movwf	?_writeEEPROM,c
 17452  003330  0E02               	movlw	2
 17453  003332  6E10               	movwf	?_writeEEPROM+2,c
 17454  003334  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17455                           
 17456                           ;main.c: 1167: writeEEPROM(0x9B, 2);
 17457  003338  6A0F               	clrf	?_writeEEPROM+1,c
 17458  00333A  0E9B               	movlw	155
 17459  00333C  6E0E               	movwf	?_writeEEPROM,c
 17460  00333E  0E02               	movlw	2
 17461  003340  6E10               	movwf	?_writeEEPROM+2,c
 17462  003342  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17463                           
 17464                           ;main.c: 1168: writeEEPROM(0x9C, 2);
 17465  003346  6A0F               	clrf	?_writeEEPROM+1,c
 17466  003348  0E9C               	movlw	156
 17467  00334A  6E0E               	movwf	?_writeEEPROM,c
 17468  00334C  0E02               	movlw	2
 17469  00334E  6E10               	movwf	?_writeEEPROM+2,c
 17470  003350  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17471                           
 17472                           ;main.c: 1172: writeEEPROM(0xF2, 0xc3);
 17473  003354  6A0F               	clrf	?_writeEEPROM+1,c
 17474  003356  0EF2               	movlw	242
 17475  003358  6E0E               	movwf	?_writeEEPROM,c
 17476  00335A  0EC3               	movlw	195
 17477  00335C  6E10               	movwf	?_writeEEPROM+2,c
 17478  00335E  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17479                           
 17480                           ;main.c: 1173: writeEEPROM(0xF3, 0x50);
 17481  003362  6A0F               	clrf	?_writeEEPROM+1,c
 17482  003364  0EF3               	movlw	243
 17483  003366  6E0E               	movwf	?_writeEEPROM,c
 17484  003368  0E50               	movlw	80
 17485  00336A  6E10               	movwf	?_writeEEPROM+2,c
 17486  00336C  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17487                           
 17488                           ;main.c: 1177: writeEEPROM(0x9E, 0);
 17489  003370  6A0F               	clrf	?_writeEEPROM+1,c
 17490  003372  0E9E               	movlw	158
 17491  003374  6E0E               	movwf	?_writeEEPROM,c
 17492  003376  0E00               	movlw	0
 17493  003378  6A10               	clrf	?_writeEEPROM+2,c
 17494  00337A  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17495                           
 17496                           ;main.c: 1178: writeEEPROM(0x9F, 0);
 17497  00337E  6A0F               	clrf	?_writeEEPROM+1,c
 17498  003380  0E9F               	movlw	159
 17499  003382  6E0E               	movwf	?_writeEEPROM,c
 17500  003384  0E00               	movlw	0
 17501  003386  6A10               	clrf	?_writeEEPROM+2,c
 17502  003388  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17503                           
 17504                           ;main.c: 1179: writeEEPROM(0xA0, 0);
 17505  00338C  6A0F               	clrf	?_writeEEPROM+1,c
 17506  00338E  0EA0               	movlw	160
 17507  003390  6E0E               	movwf	?_writeEEPROM,c
 17508  003392  0E00               	movlw	0
 17509  003394  6A10               	clrf	?_writeEEPROM+2,c
 17510  003396  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17511                           
 17512                           ;main.c: 1180: writeEEPROM(0xA1, 0);
 17513  00339A  6A0F               	clrf	?_writeEEPROM+1,c
 17514  00339C  0EA1               	movlw	161
 17515  00339E  6E0E               	movwf	?_writeEEPROM,c
 17516  0033A0  0E00               	movlw	0
 17517  0033A2  6A10               	clrf	?_writeEEPROM+2,c
 17518  0033A4  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17519                           
 17520                           ;main.c: 1181: writeEEPROM(0xA2, 0);
 17521  0033A8  6A0F               	clrf	?_writeEEPROM+1,c
 17522  0033AA  0EA2               	movlw	162
 17523  0033AC  6E0E               	movwf	?_writeEEPROM,c
 17524  0033AE  0E00               	movlw	0
 17525  0033B0  6A10               	clrf	?_writeEEPROM+2,c
 17526  0033B2  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17527                           
 17528                           ;main.c: 1182: writeEEPROM(0xA3, 0);
 17529  0033B6  6A0F               	clrf	?_writeEEPROM+1,c
 17530  0033B8  0EA3               	movlw	163
 17531  0033BA  6E0E               	movwf	?_writeEEPROM,c
 17532  0033BC  0E00               	movlw	0
 17533  0033BE  6A10               	clrf	?_writeEEPROM+2,c
 17534  0033C0  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17535                           
 17536                           ;main.c: 1183: writeEEPROM(0xA4, 0);
 17537  0033C4  6A0F               	clrf	?_writeEEPROM+1,c
 17538  0033C6  0EA4               	movlw	164
 17539  0033C8  6E0E               	movwf	?_writeEEPROM,c
 17540  0033CA  0E00               	movlw	0
 17541  0033CC  6A10               	clrf	?_writeEEPROM+2,c
 17542  0033CE  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17543                           
 17544                           ;main.c: 1184: writeEEPROM(0xA5, 0);
 17545  0033D2  6A0F               	clrf	?_writeEEPROM+1,c
 17546  0033D4  0EA5               	movlw	165
 17547  0033D6  6E0E               	movwf	?_writeEEPROM,c
 17548  0033D8  0E00               	movlw	0
 17549  0033DA  6A10               	clrf	?_writeEEPROM+2,c
 17550  0033DC  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17551                           
 17552                           ;main.c: 1185: writeEEPROM(0xA6, 0);
 17553  0033E0  6A0F               	clrf	?_writeEEPROM+1,c
 17554  0033E2  0EA6               	movlw	166
 17555  0033E4  6E0E               	movwf	?_writeEEPROM,c
 17556  0033E6  0E00               	movlw	0
 17557  0033E8  6A10               	clrf	?_writeEEPROM+2,c
 17558  0033EA  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17559                           
 17560                           ;main.c: 1186: writeEEPROM(0xA7, 0);
 17561  0033EE  6A0F               	clrf	?_writeEEPROM+1,c
 17562  0033F0  0EA7               	movlw	167
 17563  0033F2  6E0E               	movwf	?_writeEEPROM,c
 17564  0033F4  0E00               	movlw	0
 17565  0033F6  6A10               	clrf	?_writeEEPROM+2,c
 17566  0033F8  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17567                           
 17568                           ;main.c: 1187: writeEEPROM(0xA8, 0);
 17569  0033FC  6A0F               	clrf	?_writeEEPROM+1,c
 17570  0033FE  0EA8               	movlw	168
 17571  003400  6E0E               	movwf	?_writeEEPROM,c
 17572  003402  0E00               	movlw	0
 17573  003404  6A10               	clrf	?_writeEEPROM+2,c
 17574  003406  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17575                           
 17576                           ;main.c: 1188: writeEEPROM(0xA9, 0);
 17577  00340A  6A0F               	clrf	?_writeEEPROM+1,c
 17578  00340C  0EA9               	movlw	169
 17579  00340E  6E0E               	movwf	?_writeEEPROM,c
 17580  003410  6A10               	clrf	?_writeEEPROM+2,c
 17581  003412  EFCA  F02C         	goto	_writeEEPROM	;wreg free
 17582  003416                     __end_of_init_app_eeprom:
 17583                           	opt stack 0
 17584                           tblptru	equ	0xFF8
 17585                           tblptrh	equ	0xFF7
 17586                           tblptrl	equ	0xFF6
 17587                           tablat	equ	0xFF5
 17588                           prodh	equ	0xFF4
 17589                           prodl	equ	0xFF3
 17590                           postinc0	equ	0xFEE
 17591                           wreg	equ	0xFE8
 17592                           indf1	equ	0xFE7
 17593                           postdec1	equ	0xFE5
 17594                           fsr1h	equ	0xFE2
 17595                           fsr1l	equ	0xFE1
 17596                           indf2	equ	0xFDF
 17597                           postinc2	equ	0xFDE
 17598                           postdec2	equ	0xFDD
 17599                           plusw2	equ	0xFDB
 17600                           fsr2h	equ	0xFDA
 17601                           fsr2l	equ	0xFD9
 17602                           status	equ	0xFD8
 17603                           
 17604 ;; *************** function _vscp_getControlByte *****************
 17605 ;; Defined at:
 17606 ;;		line 2818 in file "../main.c"
 17607 ;; Parameters:    Size  Location     Type
 17608 ;;  idx             1    wreg     unsigned char 
 17609 ;; Auto vars:     Size  Location     Type
 17610 ;;  idx             1   25[COMRAM] unsigned char 
 17611 ;; Return value:  Size  Location     Type
 17612 ;;                  1    wreg      unsigned char 
 17613 ;; Registers used:
 17614 ;;		wreg, status,2, status,0, cstack
 17615 ;; Tracked objects:
 17616 ;;		On entry : 0/0
 17617 ;;		On exit  : 0/0
 17618 ;;		Unchanged: 0/0
 17619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17620 ;;      Params:         0       0       0       0       0       0       0
 17621 ;;      Locals:         1       0       0       0       0       0       0
 17622 ;;      Temps:          0       0       0       0       0       0       0
 17623 ;;      Totals:         1       0       0       0       0       0       0
 17624 ;;Total ram usage:        1 bytes
 17625 ;; Hardware stack levels used:    1
 17626 ;; Hardware stack levels required when called:    3
 17627 ;; This function calls:
 17628 ;;		_readEEPROM
 17629 ;; This function is called by:
 17630 ;;		_vscp_check_pstorage
 17631 ;; This function uses a non-reentrant model
 17632 ;;
 17633                           
 17634                           	psect	text83
 17635  005A44                     __ptext83:
 17636                           	opt stack 0
 17637  005A44                     _vscp_getControlByte:
 17638                           	opt stack 26
 17639                           
 17640                           ;incstack = 0
 17641                           ;incstack = 0
 17642                           ;vscp_getControlByte@idx stored from wreg
 17643  005A44  CFE8 F01A          	movff	wreg,vscp_getControlByte@idx
 17644                           
 17645                           ;main.c: 2819: if ( idx > 1 ) return 0;
 17646  005A48  0E01               	movlw	1
 17647  005A4A  641A               	cpfsgt	vscp_getControlByte@idx,c
 17648  005A4C  D002               	goto	l11023
 17649  005A4E  0E00               	movlw	0
 17650  005A50  D008               	goto	l613
 17651  005A52                     l11023:
 17652                           
 17653                           ;main.c: 2820: return readEEPROM( 0x03 + idx );
 17654  005A52  0E03               	movlw	3
 17655  005A54  241A               	addwf	vscp_getControlByte@idx,w,c
 17656  005A56  6E16               	movwf	?_readEEPROM,c
 17657  005A58  6A17               	clrf	?_readEEPROM+1,c
 17658  005A5A  0E00               	movlw	0
 17659  005A5C  2217               	addwfc	?_readEEPROM+1,f,c
 17660  005A5E  ECD6  F02D         	call	_readEEPROM	;wreg free
 17661  005A62                     l613:
 17662  005A62  0012               	return	
 17663  005A64                     __end_of_vscp_getControlByte:
 17664                           	opt stack 0
 17665                           tblptru	equ	0xFF8
 17666                           tblptrh	equ	0xFF7
 17667                           tblptrl	equ	0xFF6
 17668                           tablat	equ	0xFF5
 17669                           prodh	equ	0xFF4
 17670                           prodl	equ	0xFF3
 17671                           postinc0	equ	0xFEE
 17672                           wreg	equ	0xFE8
 17673                           indf1	equ	0xFE7
 17674                           postdec1	equ	0xFE5
 17675                           fsr1h	equ	0xFE2
 17676                           fsr1l	equ	0xFE1
 17677                           indf2	equ	0xFDF
 17678                           postinc2	equ	0xFDE
 17679                           postdec2	equ	0xFDD
 17680                           plusw2	equ	0xFDB
 17681                           fsr2h	equ	0xFDA
 17682                           fsr2l	equ	0xFD9
 17683                           status	equ	0xFD8
 17684                           
 17685 ;; *************** function _vscp_setControlByte *****************
 17686 ;; Defined at:
 17687 ;;		line 2807 in file "../main.c"
 17688 ;; Parameters:    Size  Location     Type
 17689 ;;  ctrl            1    wreg     unsigned char 
 17690 ;;  idx             1   16[COMRAM] unsigned char 
 17691 ;; Auto vars:     Size  Location     Type
 17692 ;;  ctrl            1   17[COMRAM] unsigned char 
 17693 ;; Return value:  Size  Location     Type
 17694 ;;		None               void
 17695 ;; Registers used:
 17696 ;;		wreg, status,2, status,0, cstack
 17697 ;; Tracked objects:
 17698 ;;		On entry : 0/0
 17699 ;;		On exit  : 0/0
 17700 ;;		Unchanged: 0/0
 17701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17702 ;;      Params:         1       0       0       0       0       0       0
 17703 ;;      Locals:         1       0       0       0       0       0       0
 17704 ;;      Temps:          0       0       0       0       0       0       0
 17705 ;;      Totals:         2       0       0       0       0       0       0
 17706 ;;Total ram usage:        2 bytes
 17707 ;; Hardware stack levels used:    1
 17708 ;; Hardware stack levels required when called:    3
 17709 ;; This function calls:
 17710 ;;		_writeEEPROM
 17711 ;; This function is called by:
 17712 ;;		_vscp_check_pstorage
 17713 ;; This function uses a non-reentrant model
 17714 ;;
 17715                           
 17716                           	psect	text84
 17717  005A22                     __ptext84:
 17718                           	opt stack 0
 17719  005A22                     _vscp_setControlByte:
 17720                           	opt stack 26
 17721                           
 17722                           ;incstack = 0
 17723                           ;incstack = 0
 17724                           ;vscp_setControlByte@ctrl stored from wreg
 17725  005A22  CFE8 F012          	movff	wreg,vscp_setControlByte@ctrl
 17726                           
 17727                           ;main.c: 2808: if ( idx > 1 ) return;
 17728  005A26  0E01               	movlw	1
 17729  005A28  6411               	cpfsgt	vscp_setControlByte@idx,c
 17730  005A2A  D001               	goto	l8149
 17731  005A2C  D00A               	goto	l609
 17732  005A2E                     l8149:
 17733                           
 17734                           ;main.c: 2809: writeEEPROM( 0x03 + idx, ctrl );
 17735  005A2E  0E03               	movlw	3
 17736  005A30  2411               	addwf	vscp_setControlByte@idx,w,c
 17737  005A32  6E0E               	movwf	?_writeEEPROM,c
 17738  005A34  6A0F               	clrf	?_writeEEPROM+1,c
 17739  005A36  0E00               	movlw	0
 17740  005A38  220F               	addwfc	?_writeEEPROM+1,f,c
 17741  005A3A  C012  F010         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 17742  005A3E  ECCA  F02C         	call	_writeEEPROM	;wreg free
 17743  005A42                     l609:
 17744  005A42  0012               	return	
 17745  005A44                     __end_of_vscp_setControlByte:
 17746                           	opt stack 0
 17747                           tblptru	equ	0xFF8
 17748                           tblptrh	equ	0xFF7
 17749                           tblptrl	equ	0xFF6
 17750                           tablat	equ	0xFF5
 17751                           prodh	equ	0xFF4
 17752                           prodl	equ	0xFF3
 17753                           postinc0	equ	0xFEE
 17754                           wreg	equ	0xFE8
 17755                           indf1	equ	0xFE7
 17756                           postdec1	equ	0xFE5
 17757                           fsr1h	equ	0xFE2
 17758                           fsr1l	equ	0xFE1
 17759                           indf2	equ	0xFDF
 17760                           postinc2	equ	0xFDE
 17761                           postdec2	equ	0xFDD
 17762                           plusw2	equ	0xFDB
 17763                           fsr2h	equ	0xFDA
 17764                           fsr2l	equ	0xFD9
 17765                           status	equ	0xFD8
 17766                           
 17767 ;; *************** function _vscp_writeNicknamePermanent *****************
 17768 ;; Defined at:
 17769 ;;		line 2780 in file "../main.c"
 17770 ;; Parameters:    Size  Location     Type
 17771 ;;  nickname        1    wreg     unsigned char 
 17772 ;; Auto vars:     Size  Location     Type
 17773 ;;  nickname        1   16[COMRAM] unsigned char 
 17774 ;; Return value:  Size  Location     Type
 17775 ;;		None               void
 17776 ;; Registers used:
 17777 ;;		wreg, status,2, cstack
 17778 ;; Tracked objects:
 17779 ;;		On entry : 0/0
 17780 ;;		On exit  : 0/0
 17781 ;;		Unchanged: 0/0
 17782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17783 ;;      Params:         0       0       0       0       0       0       0
 17784 ;;      Locals:         1       0       0       0       0       0       0
 17785 ;;      Temps:          0       0       0       0       0       0       0
 17786 ;;      Totals:         1       0       0       0       0       0       0
 17787 ;;Total ram usage:        1 bytes
 17788 ;; Hardware stack levels used:    1
 17789 ;; Hardware stack levels required when called:    3
 17790 ;; This function calls:
 17791 ;;		_writeEEPROM
 17792 ;; This function is called by:
 17793 ;;		_vscp_check_pstorage
 17794 ;;		_vscp_handleProbeState
 17795 ;;		_vscp_handleSetNickname
 17796 ;;		_vscp_handleDropNickname
 17797 ;; This function uses a non-reentrant model
 17798 ;;
 17799                           
 17800                           	psect	text85
 17801  005BC0                     __ptext85:
 17802                           	opt stack 0
 17803  005BC0                     _vscp_writeNicknamePermanent:
 17804                           	opt stack 25
 17805                           
 17806                           ;incstack = 0
 17807                           ;incstack = 0
 17808                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 17809  005BC0  CFE8 F011          	movff	wreg,vscp_writeNicknamePermanent@nickname
 17810                           
 17811                           ;main.c: 2781: writeEEPROM( 0x01, nickname );
 17812  005BC4  6A0F               	clrf	?_writeEEPROM+1,c
 17813  005BC6  0E01               	movlw	1
 17814  005BC8  6E0E               	movwf	?_writeEEPROM,c
 17815  005BCA  C011  F010         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 17816  005BCE  EFCA  F02C         	goto	_writeEEPROM	;wreg free
 17817  005BD2                     __end_of_vscp_writeNicknamePermanent:
 17818                           	opt stack 0
 17819                           tblptru	equ	0xFF8
 17820                           tblptrh	equ	0xFF7
 17821                           tblptrl	equ	0xFF6
 17822                           tablat	equ	0xFF5
 17823                           prodh	equ	0xFF4
 17824                           prodl	equ	0xFF3
 17825                           postinc0	equ	0xFEE
 17826                           wreg	equ	0xFE8
 17827                           indf1	equ	0xFE7
 17828                           postdec1	equ	0xFE5
 17829                           fsr1h	equ	0xFE2
 17830                           fsr1l	equ	0xFE1
 17831                           indf2	equ	0xFDF
 17832                           postinc2	equ	0xFDE
 17833                           postdec2	equ	0xFDD
 17834                           plusw2	equ	0xFDB
 17835                           fsr2h	equ	0xFDA
 17836                           fsr2l	equ	0xFD9
 17837                           status	equ	0xFD8
 17838                           
 17839 ;; *************** function _writeEEPROM *****************
 17840 ;; Defined at:
 17841 ;;		line 24 in file "../../vscp_firmware/pic/common/eeprom.c"
 17842 ;; Parameters:    Size  Location     Type
 17843 ;;  address         2   13[COMRAM] unsigned short 
 17844 ;;  data            1   15[COMRAM] unsigned char 
 17845 ;; Auto vars:     Size  Location     Type
 17846 ;;		None
 17847 ;; Return value:  Size  Location     Type
 17848 ;;		None               void
 17849 ;; Registers used:
 17850 ;;		wreg, status,2
 17851 ;; Tracked objects:
 17852 ;;		On entry : 0/0
 17853 ;;		On exit  : 0/0
 17854 ;;		Unchanged: 0/0
 17855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17856 ;;      Params:         3       0       0       0       0       0       0
 17857 ;;      Locals:         0       0       0       0       0       0       0
 17858 ;;      Temps:          0       0       0       0       0       0       0
 17859 ;;      Totals:         3       0       0       0       0       0       0
 17860 ;;Total ram usage:        3 bytes
 17861 ;; Hardware stack levels used:    1
 17862 ;; Hardware stack levels required when called:    2
 17863 ;; This function calls:
 17864 ;;		Nothing
 17865 ;; This function is called by:
 17866 ;;		_main
 17867 ;;		_doOneSecondWork
 17868 ;;		_init_app_eeprom
 17869 ;;		_vscp_writeAppReg
 17870 ;;		_vscp_setGUID
 17871 ;;		_vscp_setUserID
 17872 ;;		_vscp_setManufacturerId
 17873 ;;		_vscp_goBootloaderMode
 17874 ;;		_vscp_writeNicknamePermanent
 17875 ;;		_vscp_setControlByte
 17876 ;; This function uses a non-reentrant model
 17877 ;;
 17878                           
 17879                           	psect	text86
 17880  005994                     __ptext86:
 17881                           	opt stack 0
 17882  005994                     _writeEEPROM:
 17883                           	opt stack 27
 17884                           
 17885                           ;eeprom.c: 30: EEADR = address & 0xff;
 17886                           
 17887                           ;incstack = 0
 17888                           ;incstack = 0
 17889  005994  C00E  FFA9         	movff	writeEEPROM@address,4009	;volatile
 17890                           
 17891                           ;eeprom.c: 31: EEDATA = data;
 17892  005998  C010  FFA8         	movff	writeEEPROM@data,4008	;volatile
 17893                           
 17894                           ;eeprom.c: 32: EECON1bits.EEPGD = 0;
 17895  00599C  9EA6               	bcf	4006,7,c	;volatile
 17896                           
 17897                           ;eeprom.c: 33: EECON1bits.CFGS = 0;
 17898  00599E  9CA6               	bcf	4006,6,c	;volatile
 17899                           
 17900                           ;eeprom.c: 34: EECON1bits.WREN = 1;
 17901  0059A0  84A6               	bsf	4006,2,c	;volatile
 17902                           
 17903                           ;eeprom.c: 37: INTCONbits.GIE = 0;
 17904  0059A2  9EF2               	bcf	intcon,7,c	;volatile
 17905                           
 17906                           ;eeprom.c: 38: EECON2 = 0x55;
 17907  0059A4  0E55               	movlw	85
 17908  0059A6  6EA7               	movwf	4007,c	;volatile
 17909                           
 17910                           ;eeprom.c: 39: EECON2 = 0xaa;
 17911  0059A8  0EAA               	movlw	170
 17912  0059AA  6EA7               	movwf	4007,c	;volatile
 17913                           
 17914                           ;eeprom.c: 40: EECON1bits.WR = 1;
 17915  0059AC  82A6               	bsf	4006,1,c	;volatile
 17916                           
 17917                           ;eeprom.c: 41: INTCONbits.GIE = 1;
 17918  0059AE  8EF2               	bsf	intcon,7,c	;volatile
 17919  0059B0                     l922:
 17920  0059B0  A8A1               	btfss	4001,4,c	;volatile
 17921  0059B2  D7FE               	goto	l922
 17922                           
 17923                           ;eeprom.c: 49: PIR2bits.EEIF = 0;
 17924  0059B4  98A1               	bcf	4001,4,c	;volatile
 17925                           
 17926                           ;eeprom.c: 51: EECON1bits.WREN = 0;
 17927  0059B6  94A6               	bcf	4006,2,c	;volatile
 17928  0059B8  0012               	return	
 17929  0059BA                     __end_of_writeEEPROM:
 17930                           	opt stack 0
 17931                           tblptru	equ	0xFF8
 17932                           tblptrh	equ	0xFF7
 17933                           tblptrl	equ	0xFF6
 17934                           tablat	equ	0xFF5
 17935                           prodh	equ	0xFF4
 17936                           prodl	equ	0xFF3
 17937                           intcon	equ	0xFF2
 17938                           postinc0	equ	0xFEE
 17939                           wreg	equ	0xFE8
 17940                           indf1	equ	0xFE7
 17941                           postdec1	equ	0xFE5
 17942                           fsr1h	equ	0xFE2
 17943                           fsr1l	equ	0xFE1
 17944                           indf2	equ	0xFDF
 17945                           postinc2	equ	0xFDE
 17946                           postdec2	equ	0xFDD
 17947                           plusw2	equ	0xFDB
 17948                           fsr2h	equ	0xFDA
 17949                           fsr2l	equ	0xFD9
 17950                           status	equ	0xFD8
 17951                           
 17952 ;; *************** function _init *****************
 17953 ;; Defined at:
 17954 ;;		line 888 in file "../main.c"
 17955 ;; Parameters:    Size  Location     Type
 17956 ;;		None
 17957 ;; Auto vars:     Size  Location     Type
 17958 ;;		None
 17959 ;; Return value:  Size  Location     Type
 17960 ;;		None               void
 17961 ;; Registers used:
 17962 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 17963 ;; Tracked objects:
 17964 ;;		On entry : 0/0
 17965 ;;		On exit  : 0/0
 17966 ;;		Unchanged: 0/0
 17967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17968 ;;      Params:         0       0       0       0       0       0       0
 17969 ;;      Locals:         0       0       0       0       0       0       0
 17970 ;;      Temps:          0       0       0       0       0       0       0
 17971 ;;      Totals:         0       0       0       0       0       0       0
 17972 ;;Total ram usage:        0 bytes
 17973 ;; Hardware stack levels used:    1
 17974 ;; Hardware stack levels required when called:    4
 17975 ;; This function calls:
 17976 ;;		_WriteTimer0
 17977 ;;		_ConvertADC
 17978 ;;		_init_app_ram
 17979 ;;		_OpenTimer0
 17980 ;;		_OpenADC
 17981 ;;		_ECANInitialize
 17982 ;; This function is called by:
 17983 ;;		_main
 17984 ;; This function uses a non-reentrant model
 17985 ;;
 17986                           
 17987                           	psect	text87
 17988  005720                     __ptext87:
 17989                           	opt stack 0
 17990  005720                     _init:
 17991                           	opt stack 26
 17992                           
 17993                           ;main.c: 892: init_app_ram();
 17994                           
 17995                           ;incstack = 0
 17996                           ;incstack = 0
 17997  005720  EC0F  F02B         	call	_init_app_ram	;wreg free
 17998                           
 17999                           ; BSR set to: 0
 18000                           ;main.c: 900: TRISA = 0x07;
 18001  005724  0E07               	movlw	7
 18002  005726  6E92               	movwf	3986,c	;volatile
 18003                           
 18004                           ; BSR set to: 0
 18005                           ;main.c: 911: TRISB = 0x1B;
 18006  005728  0E1B               	movlw	27
 18007  00572A  6E93               	movwf	3987,c	;volatile
 18008                           
 18009                           ; BSR set to: 0
 18010                           ;main.c: 921: TRISC = 0x01;
 18011  00572C  0E01               	movlw	1
 18012  00572E  6E94               	movwf	3988,c	;volatile
 18013                           
 18014                           ; BSR set to: 0
 18015                           ;main.c: 922: PORTC = 0x00;
 18016  005730  6A82               	clrf	3970,c	;volatile
 18017                           
 18018                           ; BSR set to: 0
 18019                           ;main.c: 924: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 18020  005732  0E92               	movlw	146
 18021  005734  EC5F  F02D         	call	_OpenTimer0
 18022                           
 18023                           ; BSR set to: 0
 18024                           ;main.c: 925: WriteTimer0(0xfb1d);
 18025  005738  0EFB               	movlw	251
 18026  00573A  6E0F               	movwf	?_WriteTimer0+1,c
 18027  00573C  0E1D               	movlw	29
 18028  00573E  6E0E               	movwf	?_WriteTimer0,c
 18029  005740  ECE9  F02D         	call	_WriteTimer0	;wreg free
 18030                           
 18031                           ; BSR set to: 0
 18032                           ;main.c: 927: OpenADC(0b11101111 & 0b11111111 & 0b11111111,
 18033                           ;main.c: 928: 0b10000111 & 0b11111111 & 0b11110100 &
 18034                           ;main.c: 929: 0b11111110 & 0b11111101,
 18035                           ;main.c: 930: 15);
 18036  005744  0E84               	movlw	132
 18037  005746  6E0E               	movwf	?_OpenADC,c
 18038  005748  0E0F               	movlw	15
 18039  00574A  6E0F               	movwf	?_OpenADC+1,c
 18040  00574C  0EEF               	movlw	239
 18041  00574E  EC8E  F029         	call	_OpenADC
 18042                           
 18043                           ; BSR set to: 0
 18044                           ;main.c: 933: ECANInitialize();
 18045  005752  ECCC  F027         	call	_ECANInitialize	;wreg free
 18046                           
 18047                           ;main.c: 957: INTCONbits.GIE = 1;
 18048  005756  8EF2               	bsf	intcon,7,c	;volatile
 18049                           
 18050                           ;main.c: 959: ConvertADC();
 18051  005758  EF1C  F02E         	goto	_ConvertADC	;wreg free
 18052  00575C                     __end_of_init:
 18053                           	opt stack 0
 18054                           tblptru	equ	0xFF8
 18055                           tblptrh	equ	0xFF7
 18056                           tblptrl	equ	0xFF6
 18057                           tablat	equ	0xFF5
 18058                           prodh	equ	0xFF4
 18059                           prodl	equ	0xFF3
 18060                           intcon	equ	0xFF2
 18061                           postinc0	equ	0xFEE
 18062                           wreg	equ	0xFE8
 18063                           indf1	equ	0xFE7
 18064                           postdec1	equ	0xFE5
 18065                           fsr1h	equ	0xFE2
 18066                           fsr1l	equ	0xFE1
 18067                           indf2	equ	0xFDF
 18068                           postinc2	equ	0xFDE
 18069                           postdec2	equ	0xFDD
 18070                           plusw2	equ	0xFDB
 18071                           fsr2h	equ	0xFDA
 18072                           fsr2l	equ	0xFD9
 18073                           status	equ	0xFD8
 18074                           
 18075 ;; *************** function _ECANInitialize *****************
 18076 ;; Defined at:
 18077 ;;		line 168 in file "../ECAN.c"
 18078 ;; Parameters:    Size  Location     Type
 18079 ;;		None
 18080 ;; Auto vars:     Size  Location     Type
 18081 ;;		None
 18082 ;; Return value:  Size  Location     Type
 18083 ;;		None               void
 18084 ;; Registers used:
 18085 ;;		wreg, status,2, status,0, cstack
 18086 ;; Tracked objects:
 18087 ;;		On entry : F/0
 18088 ;;		On exit  : 0/0
 18089 ;;		Unchanged: 0/0
 18090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18091 ;;      Params:         0       0       0       0       0       0       0
 18092 ;;      Locals:         0       0       0       0       0       0       0
 18093 ;;      Temps:          0       0       0       0       0       0       0
 18094 ;;      Totals:         0       0       0       0       0       0       0
 18095 ;;Total ram usage:        0 bytes
 18096 ;; Hardware stack levels used:    1
 18097 ;; Hardware stack levels required when called:    3
 18098 ;; This function calls:
 18099 ;;		_ECANSetOperationMode
 18100 ;; This function is called by:
 18101 ;;		_init
 18102 ;; This function uses a non-reentrant model
 18103 ;;
 18104                           
 18105                           	psect	text88
 18106  004F98                     __ptext88:
 18107                           	opt stack 0
 18108  004F98                     _ECANInitialize:
 18109                           	opt stack 26
 18110                           
 18111                           ; BSR set to: 0
 18112                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 18113                           
 18114                           ;incstack = 0
 18115                           ;incstack = 0
 18116  004F98  0E80               	movlw	128
 18117  004F9A  ECAC  F02D         	call	_ECANSetOperationMode
 18118                           
 18119                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 18120  004F9E  0E09               	movlw	9
 18121  004FA0  6E70               	movwf	3952,c	;volatile
 18122                           
 18123                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 18124  004FA2  0EFC               	movlw	252
 18125  004FA4  6E71               	movwf	3953,c	;volatile
 18126                           
 18127                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 18128                           ;ECAN.c: 181: (0 << 6) |
 18129                           ;ECAN.c: 182: (2-1);
 18130  004FA6  0E01               	movlw	1
 18131  004FA8  6E72               	movwf	3954,c	;volatile
 18132                           
 18133                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 18134  004FAA  0E20               	movlw	32
 18135  004FAC  6E73               	movwf	3955,c	;volatile
 18136                           
 18137                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 18138  004FAE  8E77               	bsf	3959,7,c	;volatile
 18139                           
 18140                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 18141  004FB0  9C77               	bcf	3959,6,c	;volatile
 18142                           
 18143                           ;ECAN.c: 205: RXB0CON = 0;
 18144  004FB2  6A60               	clrf	3936,c	;volatile
 18145                           
 18146                           ;ECAN.c: 211: RXB1CON = 0;
 18147  004FB4  010F               	movlb	15	; () banked
 18148  004FB6  6B50               	clrf	80,b	;volatile
 18149                           
 18150                           ; BSR set to: 15
 18151                           ;ECAN.c: 221: B0CON = 0;
 18152  004FB8  010E               	movlb	14	; () banked
 18153  004FBA  6B20               	clrf	32,b	;volatile
 18154                           
 18155                           ; BSR set to: 14
 18156                           ;ECAN.c: 231: B1CON = 0;
 18157  004FBC  6B30               	clrf	48,b	;volatile
 18158                           
 18159                           ; BSR set to: 14
 18160                           ;ECAN.c: 241: B2CON = 0;
 18161  004FBE  6B40               	clrf	64,b	;volatile
 18162                           
 18163                           ; BSR set to: 14
 18164                           ;ECAN.c: 254: B3CON = 0 << 2;
 18165  004FC0  6B50               	clrf	80,b	;volatile
 18166                           
 18167                           ; BSR set to: 14
 18168                           ;ECAN.c: 264: B4CON = 0 << 2;
 18169  004FC2  6B60               	clrf	96,b	;volatile
 18170                           
 18171                           ; BSR set to: 14
 18172                           ;ECAN.c: 274: B5CON = 0 << 2;
 18173  004FC4  6B70               	clrf	112,b	;volatile
 18174                           
 18175                           ; BSR set to: 14
 18176                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 18177  004FC6  0EE0               	movlw	224
 18178  004FC8  010D               	movlb	13	; () banked
 18179  004FCA  6FF8               	movwf	248,b	;volatile
 18180                           
 18181                           ; BSR set to: 13
 18182                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 18183  004FCC  010F               	movlb	15	; () banked
 18184  004FCE  6B00               	clrf	0,b	;volatile
 18185                           
 18186                           ; BSR set to: 15
 18187  004FD0  0E08               	movlw	8
 18188  004FD2  6F01               	movwf	1,b	;volatile
 18189                           
 18190                           ; BSR set to: 15
 18191  004FD4  6B02               	clrf	2,b	;volatile
 18192                           
 18193                           ; BSR set to: 15
 18194  004FD6  6B03               	clrf	3,b	;volatile
 18195                           
 18196                           ; BSR set to: 15
 18197                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 18198  004FD8  6B04               	clrf	4,b	;volatile
 18199                           
 18200                           ; BSR set to: 15
 18201  004FDA  0EE8               	movlw	232
 18202  004FDC  6F05               	movwf	5,b	;volatile
 18203                           
 18204                           ; BSR set to: 15
 18205  004FDE  0E1A               	movlw	26
 18206  004FE0  6F06               	movwf	6,b	;volatile
 18207                           
 18208                           ; BSR set to: 15
 18209  004FE2  6B07               	clrf	7,b	;volatile
 18210                           
 18211                           ; BSR set to: 15
 18212                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 18213  004FE4  0E03               	movlw	3
 18214  004FE6  010D               	movlb	13	; () banked
 18215  004FE8  6FD4               	movwf	212,b	;volatile
 18216                           
 18217                           ; BSR set to: 13
 18218                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 18219  004FEA  6BD5               	clrf	213,b	;volatile
 18220                           
 18221                           ; BSR set to: 13
 18222                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 18223  004FEC  6BE0               	clrf	224,b	;volatile
 18224                           
 18225                           ; BSR set to: 13
 18226                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 18227  004FEE  0E11               	movlw	17
 18228  004FF0  6FE1               	movwf	225,b	;volatile
 18229                           
 18230                           ; BSR set to: 13
 18231                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 18232  004FF2  6FE2               	movwf	226,b	;volatile
 18233                           
 18234                           ; BSR set to: 13
 18235                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 18236  004FF4  6BE3               	clrf	227,b	;volatile
 18237                           
 18238                           ; BSR set to: 13
 18239                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 18240  004FF6  6BE4               	clrf	228,b	;volatile
 18241                           
 18242                           ; BSR set to: 13
 18243                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 18244  004FF8  6BE5               	clrf	229,b	;volatile
 18245                           
 18246                           ; BSR set to: 13
 18247                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 18248  004FFA  6BE6               	clrf	230,b	;volatile
 18249                           
 18250                           ; BSR set to: 13
 18251                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 18252  004FFC  6BE7               	clrf	231,b	;volatile
 18253                           
 18254                           ; BSR set to: 13
 18255                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 18256  004FFE  0E54               	movlw	84
 18257  005000  6FF0               	movwf	240,b	;volatile
 18258                           
 18259                           ; BSR set to: 13
 18260                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 18261  005002  0E05               	movlw	5
 18262  005004  6FF1               	movwf	241,b	;volatile
 18263                           
 18264                           ; BSR set to: 13
 18265                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18266  005006  6BF2               	clrf	242,b	;volatile
 18267                           
 18268                           ; BSR set to: 13
 18269                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18270  005008  6BF2               	clrf	242,b	;volatile
 18271                           
 18272                           ; BSR set to: 13
 18273                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 18274  00500A  0E0F               	movlw	15
 18275  00500C  010F               	movlb	15	; () banked
 18276  00500E  6F18               	movwf	24,b	;volatile
 18277                           
 18278                           ; BSR set to: 15
 18279  005010  0EE0               	movlw	224
 18280  005012  6F19               	movwf	25,b	;volatile
 18281                           
 18282                           ; BSR set to: 15
 18283  005014  6B1A               	clrf	26,b	;volatile
 18284                           
 18285                           ; BSR set to: 15
 18286  005016  6B1B               	clrf	27,b	;volatile
 18287                           
 18288                           ; BSR set to: 15
 18289                           ;ECAN.c: 482: RXM0EXIDM = 1;
 18290  005018  8719               	bsf	25,3,b	;volatile
 18291                           
 18292                           ; BSR set to: 15
 18293                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 18294  00501A  0E0F               	movlw	15
 18295  00501C  6F1C               	movwf	28,b	;volatile
 18296                           
 18297                           ; BSR set to: 15
 18298  00501E  0EE0               	movlw	224
 18299  005020  6F1D               	movwf	29,b	;volatile
 18300                           
 18301                           ; BSR set to: 15
 18302  005022  691E               	setf	30,b	;volatile
 18303                           
 18304                           ; BSR set to: 15
 18305  005024  6B1F               	clrf	31,b	;volatile
 18306                           
 18307                           ; BSR set to: 15
 18308                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 18309  005026  871D               	bsf	29,3,b	;volatile
 18310                           
 18311                           ; BSR set to: 15
 18312                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 18313  005028  0E00               	movlw	0
 18314  00502A  EFAC  F02D         	goto	_ECANSetOperationMode
 18315  00502E                     __end_of_ECANInitialize:
 18316                           	opt stack 0
 18317                           tblptru	equ	0xFF8
 18318                           tblptrh	equ	0xFF7
 18319                           tblptrl	equ	0xFF6
 18320                           tablat	equ	0xFF5
 18321                           prodh	equ	0xFF4
 18322                           prodl	equ	0xFF3
 18323                           intcon	equ	0xFF2
 18324                           postinc0	equ	0xFEE
 18325                           wreg	equ	0xFE8
 18326                           indf1	equ	0xFE7
 18327                           postdec1	equ	0xFE5
 18328                           fsr1h	equ	0xFE2
 18329                           fsr1l	equ	0xFE1
 18330                           indf2	equ	0xFDF
 18331                           postinc2	equ	0xFDE
 18332                           postdec2	equ	0xFDD
 18333                           plusw2	equ	0xFDB
 18334                           fsr2h	equ	0xFDA
 18335                           fsr2l	equ	0xFD9
 18336                           status	equ	0xFD8
 18337                           
 18338 ;; *************** function _ECANSetOperationMode *****************
 18339 ;; Defined at:
 18340 ;;		line 1012 in file "../ECAN.c"
 18341 ;; Parameters:    Size  Location     Type
 18342 ;;  mode            1    wreg     enum E16337
 18343 ;; Auto vars:     Size  Location     Type
 18344 ;;  mode            1   13[COMRAM] enum E16337
 18345 ;; Return value:  Size  Location     Type
 18346 ;;		None               void
 18347 ;; Registers used:
 18348 ;;		wreg, status,2, status,0
 18349 ;; Tracked objects:
 18350 ;;		On entry : 0/0
 18351 ;;		On exit  : 0/0
 18352 ;;		Unchanged: 0/0
 18353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18354 ;;      Params:         0       0       0       0       0       0       0
 18355 ;;      Locals:         1       0       0       0       0       0       0
 18356 ;;      Temps:          0       0       0       0       0       0       0
 18357 ;;      Totals:         1       0       0       0       0       0       0
 18358 ;;Total ram usage:        1 bytes
 18359 ;; Hardware stack levels used:    1
 18360 ;; Hardware stack levels required when called:    2
 18361 ;; This function calls:
 18362 ;;		Nothing
 18363 ;; This function is called by:
 18364 ;;		_vscp_goBootloaderMode
 18365 ;;		_ECANInitialize
 18366 ;; This function uses a non-reentrant model
 18367 ;;
 18368                           
 18369                           	psect	text89
 18370  005B58                     __ptext89:
 18371                           	opt stack 0
 18372  005B58                     _ECANSetOperationMode:
 18373                           	opt stack 26
 18374                           
 18375                           ;incstack = 0
 18376                           ;incstack = 0
 18377                           ;ECANSetOperationMode@mode stored from wreg
 18378  005B58  CFE8 F00E          	movff	wreg,ECANSetOperationMode@mode
 18379                           
 18380                           ;ECAN.c: 1013: CANCON &= 0x1F;
 18381  005B5C  0E1F               	movlw	31
 18382  005B5E  166F               	andwf	3951,f,c	;volatile
 18383                           
 18384                           ;ECAN.c: 1014: CANCON |= mode;
 18385  005B60  500E               	movf	ECANSetOperationMode@mode,w,c
 18386  005B62  126F               	iorwf	3951,f,c	;volatile
 18387  005B64                     l8137:
 18388  005B64  506F               	movf	3951,w,c	;volatile
 18389  005B66  0BE0               	andlw	224
 18390  005B68  180E               	xorwf	ECANSetOperationMode@mode,w,c
 18391  005B6A  B4D8               	btfsc	status,2,c
 18392  005B6C  0012               	return	
 18393  005B6E  D7FA               	goto	l8137
 18394  005B70                     __end_of_ECANSetOperationMode:
 18395                           	opt stack 0
 18396                           tblptru	equ	0xFF8
 18397                           tblptrh	equ	0xFF7
 18398                           tblptrl	equ	0xFF6
 18399                           tablat	equ	0xFF5
 18400                           prodh	equ	0xFF4
 18401                           prodl	equ	0xFF3
 18402                           intcon	equ	0xFF2
 18403                           postinc0	equ	0xFEE
 18404                           wreg	equ	0xFE8
 18405                           indf1	equ	0xFE7
 18406                           postdec1	equ	0xFE5
 18407                           fsr1h	equ	0xFE2
 18408                           fsr1l	equ	0xFE1
 18409                           indf2	equ	0xFDF
 18410                           postinc2	equ	0xFDE
 18411                           postdec2	equ	0xFDD
 18412                           plusw2	equ	0xFDB
 18413                           fsr2h	equ	0xFDA
 18414                           fsr2l	equ	0xFD9
 18415                           status	equ	0xFD8
 18416                           
 18417 ;; *************** function _OpenADC *****************
 18418 ;; Defined at:
 18419 ;;		line 71 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/ADC/adcopen.c"
 18420 ;; Parameters:    Size  Location     Type
 18421 ;;  config          1    wreg     unsigned char 
 18422 ;;  config2         1   13[COMRAM] unsigned char 
 18423 ;;  portconfig      1   14[COMRAM] unsigned char 
 18424 ;; Auto vars:     Size  Location     Type
 18425 ;;  config          1   17[COMRAM] unsigned char 
 18426 ;; Return value:  Size  Location     Type
 18427 ;;		None               void
 18428 ;; Registers used:
 18429 ;;		wreg, status,2, status,0
 18430 ;; Tracked objects:
 18431 ;;		On entry : F/0
 18432 ;;		On exit  : F/0
 18433 ;;		Unchanged: F/0
 18434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18435 ;;      Params:         2       0       0       0       0       0       0
 18436 ;;      Locals:         1       0       0       0       0       0       0
 18437 ;;      Temps:          2       0       0       0       0       0       0
 18438 ;;      Totals:         5       0       0       0       0       0       0
 18439 ;;Total ram usage:        5 bytes
 18440 ;; Hardware stack levels used:    1
 18441 ;; Hardware stack levels required when called:    2
 18442 ;; This function calls:
 18443 ;;		Nothing
 18444 ;; This function is called by:
 18445 ;;		_init
 18446 ;; This function uses a non-reentrant model
 18447 ;;
 18448                           
 18449                           	psect	text90
 18450  00531C                     __ptext90:
 18451                           	opt stack 0
 18452  00531C                     _OpenADC:
 18453                           	opt stack 27
 18454                           
 18455                           ;incstack = 0
 18456                           ;incstack = 0
 18457                           ;OpenADC@config stored from wreg
 18458  00531C  CFE8 F012          	movff	wreg,OpenADC@config
 18459                           
 18460                           ; BSR set to: 0
 18461  005320  6AC2               	clrf	4034,c	;volatile
 18462  005322  6AC0               	clrf	4032,c	;volatile
 18463                           
 18464                           ; BSR set to: 0
 18465  005324  90D8               	bcf	status,0,c
 18466  005326  300E               	rrcf	OpenADC@config2,w,c
 18467  005328  0B3C               	andlw	60
 18468  00532A  6EC2               	movwf	4034,c	;volatile
 18469  00532C  C00E  F010         	movff	OpenADC@config2,??_OpenADC
 18470  005330  3A10               	swapf	??_OpenADC,f,c
 18471  005332  0EF0               	movlw	240
 18472  005334  1610               	andwf	??_OpenADC,f,c
 18473  005336  0E30               	movlw	48
 18474  005338  1610               	andwf	??_OpenADC,f,c
 18475  00533A  500F               	movf	OpenADC@portconfig,w,c
 18476  00533C  0B0F               	andlw	15
 18477  00533E  1010               	iorwf	??_OpenADC,w,c
 18478  005340  6EC1               	movwf	4033,c	;volatile
 18479  005342  C012  F010         	movff	OpenADC@config,??_OpenADC
 18480  005346  90D8               	bcf	status,0,c
 18481  005348  3610               	rlcf	??_OpenADC,f,c
 18482  00534A  90D8               	bcf	status,0,c
 18483  00534C  3610               	rlcf	??_OpenADC,f,c
 18484  00534E  0E38               	movlw	56
 18485  005350  1610               	andwf	??_OpenADC,f,c
 18486  005352  C012  F011         	movff	OpenADC@config,??_OpenADC+1
 18487  005356  3A11               	swapf	??_OpenADC+1,f,c
 18488  005358  0E0F               	movlw	15
 18489  00535A  1611               	andwf	??_OpenADC+1,f,c
 18490  00535C  0E07               	movlw	7
 18491  00535E  1611               	andwf	??_OpenADC+1,f,c
 18492  005360  5012               	movf	OpenADC@config,w,c
 18493  005362  0B80               	andlw	128
 18494  005364  1011               	iorwf	??_OpenADC+1,w,c
 18495  005366  1010               	iorwf	??_OpenADC,w,c
 18496  005368  6EC0               	movwf	4032,c	;volatile
 18497                           
 18498                           ; BSR set to: 0
 18499  00536A  AE0E               	btfss	OpenADC@config2,7,c
 18500  00536C  D003               	goto	l1306
 18501                           
 18502                           ; BSR set to: 0
 18503  00536E  9C9E               	bcf	3998,6,c	;volatile
 18504  005370  8C9D               	bsf	3997,6,c	;volatile
 18505  005372  8CF2               	bsf	intcon,6,c	;volatile
 18506  005374                     l1306:
 18507                           
 18508                           ; BSR set to: 0
 18509  005374  80C2               	bsf	4034,0,c	;volatile
 18510                           
 18511                           ; BSR set to: 0
 18512  005376  0012               	return	
 18513  005378                     __end_of_OpenADC:
 18514                           	opt stack 0
 18515                           tblptru	equ	0xFF8
 18516                           tblptrh	equ	0xFF7
 18517                           tblptrl	equ	0xFF6
 18518                           tablat	equ	0xFF5
 18519                           prodh	equ	0xFF4
 18520                           prodl	equ	0xFF3
 18521                           intcon	equ	0xFF2
 18522                           postinc0	equ	0xFEE
 18523                           wreg	equ	0xFE8
 18524                           indf1	equ	0xFE7
 18525                           postdec1	equ	0xFE5
 18526                           fsr1h	equ	0xFE2
 18527                           fsr1l	equ	0xFE1
 18528                           indf2	equ	0xFDF
 18529                           postinc2	equ	0xFDE
 18530                           postdec2	equ	0xFDD
 18531                           plusw2	equ	0xFDB
 18532                           fsr2h	equ	0xFDA
 18533                           fsr2l	equ	0xFD9
 18534                           status	equ	0xFD8
 18535                           
 18536 ;; *************** function _OpenTimer0 *****************
 18537 ;; Defined at:
 18538 ;;		line 19 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/Timers/t0open.c"
 18539 ;; Parameters:    Size  Location     Type
 18540 ;;  config          1    wreg     unsigned char 
 18541 ;; Auto vars:     Size  Location     Type
 18542 ;;  config          1   13[COMRAM] unsigned char 
 18543 ;; Return value:  Size  Location     Type
 18544 ;;		None               void
 18545 ;; Registers used:
 18546 ;;		wreg, status,2, status,0
 18547 ;; Tracked objects:
 18548 ;;		On entry : F/0
 18549 ;;		On exit  : F/0
 18550 ;;		Unchanged: F/0
 18551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18552 ;;      Params:         0       0       0       0       0       0       0
 18553 ;;      Locals:         1       0       0       0       0       0       0
 18554 ;;      Temps:          0       0       0       0       0       0       0
 18555 ;;      Totals:         1       0       0       0       0       0       0
 18556 ;;Total ram usage:        1 bytes
 18557 ;; Hardware stack levels used:    1
 18558 ;; Hardware stack levels required when called:    2
 18559 ;; This function calls:
 18560 ;;		Nothing
 18561 ;; This function is called by:
 18562 ;;		_init
 18563 ;; This function uses a non-reentrant model
 18564 ;;
 18565                           
 18566                           	psect	text91
 18567  005ABE                     __ptext91:
 18568                           	opt stack 0
 18569  005ABE                     _OpenTimer0:
 18570                           	opt stack 27
 18571                           
 18572                           ; BSR set to: 0
 18573                           ;incstack = 0
 18574                           ;incstack = 0
 18575                           ;OpenTimer0@config stored from wreg
 18576  005ABE  CFE8 F00E          	movff	wreg,OpenTimer0@config
 18577                           
 18578                           ; BSR set to: 0
 18579  005AC2  500E               	movf	OpenTimer0@config,w,c
 18580  005AC4  0B7F               	andlw	127
 18581  005AC6  6ED5               	movwf	4053,c	;volatile
 18582                           
 18583                           ; BSR set to: 0
 18584  005AC8  6AD7               	clrf	4055,c	;volatile
 18585                           
 18586                           ; BSR set to: 0
 18587  005ACA  6AD6               	clrf	4054,c	;volatile
 18588                           
 18589                           ; BSR set to: 0
 18590  005ACC  94F2               	bcf	intcon,2,c	;volatile
 18591                           
 18592                           ; BSR set to: 0
 18593  005ACE  AE0E               	btfss	OpenTimer0@config,7,c
 18594  005AD0  D002               	goto	l1320
 18595                           
 18596                           ; BSR set to: 0
 18597  005AD2  8AF2               	bsf	intcon,5,c	;volatile
 18598  005AD4  D001               	goto	l1321
 18599  005AD6                     l1320:
 18600                           
 18601                           ; BSR set to: 0
 18602  005AD6  9AF2               	bcf	intcon,5,c	;volatile
 18603  005AD8                     l1321:
 18604                           
 18605                           ; BSR set to: 0
 18606  005AD8  8ED5               	bsf	4053,7,c	;volatile
 18607                           
 18608                           ; BSR set to: 0
 18609  005ADA  0012               	return	
 18610  005ADC                     __end_of_OpenTimer0:
 18611                           	opt stack 0
 18612                           tblptru	equ	0xFF8
 18613                           tblptrh	equ	0xFF7
 18614                           tblptrl	equ	0xFF6
 18615                           tablat	equ	0xFF5
 18616                           prodh	equ	0xFF4
 18617                           prodl	equ	0xFF3
 18618                           intcon	equ	0xFF2
 18619                           postinc0	equ	0xFEE
 18620                           wreg	equ	0xFE8
 18621                           indf1	equ	0xFE7
 18622                           postdec1	equ	0xFE5
 18623                           fsr1h	equ	0xFE2
 18624                           fsr1l	equ	0xFE1
 18625                           indf2	equ	0xFDF
 18626                           postinc2	equ	0xFDE
 18627                           postdec2	equ	0xFDD
 18628                           plusw2	equ	0xFDB
 18629                           fsr2h	equ	0xFDA
 18630                           fsr2l	equ	0xFD9
 18631                           status	equ	0xFD8
 18632                           
 18633 ;; *************** function _init_app_ram *****************
 18634 ;; Defined at:
 18635 ;;		line 987 in file "../main.c"
 18636 ;; Parameters:    Size  Location     Type
 18637 ;;		None
 18638 ;; Auto vars:     Size  Location     Type
 18639 ;;  i               1   13[COMRAM] unsigned char 
 18640 ;; Return value:  Size  Location     Type
 18641 ;;		None               void
 18642 ;; Registers used:
 18643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18644 ;; Tracked objects:
 18645 ;;		On entry : 0/1
 18646 ;;		On exit  : F/0
 18647 ;;		Unchanged: 0/0
 18648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18649 ;;      Params:         0       0       0       0       0       0       0
 18650 ;;      Locals:         1       0       0       0       0       0       0
 18651 ;;      Temps:          0       0       0       0       0       0       0
 18652 ;;      Totals:         1       0       0       0       0       0       0
 18653 ;;Total ram usage:        1 bytes
 18654 ;; Hardware stack levels used:    1
 18655 ;; Hardware stack levels required when called:    2
 18656 ;; This function calls:
 18657 ;;		Nothing
 18658 ;; This function is called by:
 18659 ;;		_init
 18660 ;;		_vscp_restoreDefaults
 18661 ;; This function uses a non-reentrant model
 18662 ;;
 18663                           
 18664                           	psect	text92
 18665  00561E                     __ptext92:
 18666                           	opt stack 0
 18667  00561E                     _init_app_ram:
 18668                           	opt stack 25
 18669                           
 18670                           ;main.c: 988: char i;
 18671                           ;main.c: 990: measurement_clock = 0;
 18672                           
 18673                           ; BSR set to: 0
 18674                           ;incstack = 0
 18675                           ;incstack = 0
 18676  00561E  0101               	movlb	1	; () banked
 18677  005620  6B12               	clrf	_measurement_clock& (0+255),b	;volatile
 18678  005622  6B13               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 18679  005624  6B14               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 18680  005626  6B15               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 18681                           
 18682                           ;main.c: 991: seconds = 0;
 18683  005628  0100               	movlb	0	; () banked
 18684  00562A  6BB9               	clrf	_seconds& (0+255),b
 18685                           
 18686                           ;main.c: 994: for (i = 0; i < 6; i++) {
 18687  00562C  6A0E               	clrf	init_app_ram@i,c
 18688  00562E                     l7449:
 18689                           
 18690                           ;main.c: 995: seconds_temp[i] = 0;
 18691  00562E  0E0C               	movlw	low _seconds_temp
 18692  005630  240E               	addwf	init_app_ram@i,w,c
 18693  005632  6ED9               	movwf	fsr2l,c
 18694  005634  6ADA               	clrf	fsr2h,c
 18695  005636  0E01               	movlw	high _seconds_temp
 18696  005638  22DA               	addwfc	fsr2h,f,c
 18697  00563A  6ADF               	clrf	indf2,c
 18698                           
 18699                           ; BSR set to: 1
 18700                           ;main.c: 996: current_temp[i] = 0;
 18701  00563C  500E               	movf	init_app_ram@i,w,c
 18702  00563E  0D02               	mullw	2
 18703  005640  0E00               	movlw	low _current_temp
 18704  005642  24F3               	addwf	prodl,w,c
 18705  005644  6ED9               	movwf	fsr2l,c
 18706  005646  0E01               	movlw	high _current_temp
 18707  005648  20F4               	addwfc	prodh,w,c
 18708  00564A  6EDA               	movwf	fsr2h,c
 18709  00564C  6ADE               	clrf	postinc2,c
 18710  00564E  6ADD               	clrf	postdec2,c
 18711                           
 18712                           ; BSR set to: 1
 18713  005650  2A0E               	incf	init_app_ram@i,f,c
 18714                           
 18715                           ; BSR set to: 1
 18716  005652  0E05               	movlw	5
 18717  005654  640E               	cpfsgt	init_app_ram@i,c
 18718  005656  D7EB               	goto	l7449
 18719                           
 18720                           ; BSR set to: 1
 18721                           ;main.c: 997: }
 18722                           ;main.c: 1000: adc_conversion_flags = 0;
 18723  005658  0100               	movlb	0	; () banked
 18724  00565A  6BB6               	clrf	_adc_conversion_flags& (0+255),b
 18725                           
 18726                           ;main.c: 1003: adc_series_counter = 0;
 18727  00565C  6A49               	clrf	_adc_series_counter,c
 18728                           
 18729                           ;main.c: 1006: low_alarm = 0;
 18730  00565E  6BB8               	clrf	_low_alarm& (0+255),b
 18731                           
 18732                           ;main.c: 1009: high_alarm = 0;
 18733  005660  6BB7               	clrf	_high_alarm& (0+255),b
 18734                           
 18735                           ; BSR set to: 0
 18736  005662  0012               	return	
 18737  005664                     __end_of_init_app_ram:
 18738                           	opt stack 0
 18739                           tblptru	equ	0xFF8
 18740                           tblptrh	equ	0xFF7
 18741                           tblptrl	equ	0xFF6
 18742                           tablat	equ	0xFF5
 18743                           prodh	equ	0xFF4
 18744                           prodl	equ	0xFF3
 18745                           intcon	equ	0xFF2
 18746                           postinc0	equ	0xFEE
 18747                           wreg	equ	0xFE8
 18748                           indf1	equ	0xFE7
 18749                           postdec1	equ	0xFE5
 18750                           fsr1h	equ	0xFE2
 18751                           fsr1l	equ	0xFE1
 18752                           indf2	equ	0xFDF
 18753                           postinc2	equ	0xFDE
 18754                           postdec2	equ	0xFDD
 18755                           plusw2	equ	0xFDB
 18756                           fsr2h	equ	0xFDA
 18757                           fsr2l	equ	0xFD9
 18758                           status	equ	0xFD8
 18759                           
 18760 ;; *************** function _ConvertADC *****************
 18761 ;; Defined at:
 18762 ;;		line 23 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/ADC/adcconv.c"
 18763 ;; Parameters:    Size  Location     Type
 18764 ;;		None
 18765 ;; Auto vars:     Size  Location     Type
 18766 ;;		None
 18767 ;; Return value:  Size  Location     Type
 18768 ;;		None               void
 18769 ;; Registers used:
 18770 ;;		None
 18771 ;; Tracked objects:
 18772 ;;		On entry : 0/0
 18773 ;;		On exit  : 0/0
 18774 ;;		Unchanged: 0/0
 18775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18776 ;;      Params:         0       0       0       0       0       0       0
 18777 ;;      Locals:         0       0       0       0       0       0       0
 18778 ;;      Temps:          0       0       0       0       0       0       0
 18779 ;;      Totals:         0       0       0       0       0       0       0
 18780 ;;Total ram usage:        0 bytes
 18781 ;; Hardware stack levels used:    1
 18782 ;; Hardware stack levels required when called:    2
 18783 ;; This function calls:
 18784 ;;		Nothing
 18785 ;; This function is called by:
 18786 ;;		_init
 18787 ;; This function uses a non-reentrant model
 18788 ;;
 18789                           
 18790                           	psect	text93
 18791  005C38                     __ptext93:
 18792                           	opt stack 0
 18793  005C38                     _ConvertADC:
 18794                           	opt stack 27
 18795                           
 18796                           ; BSR set to: 0
 18797                           ;incstack = 0
 18798                           ;incstack = 0
 18799  005C38  82C2               	bsf	4034,1,c	;volatile
 18800  005C3A  0012               	return	
 18801  005C3C                     __end_of_ConvertADC:
 18802                           	opt stack 0
 18803                           tblptru	equ	0xFF8
 18804                           tblptrh	equ	0xFF7
 18805                           tblptrl	equ	0xFF6
 18806                           tablat	equ	0xFF5
 18807                           prodh	equ	0xFF4
 18808                           prodl	equ	0xFF3
 18809                           intcon	equ	0xFF2
 18810                           postinc0	equ	0xFEE
 18811                           wreg	equ	0xFE8
 18812                           indf1	equ	0xFE7
 18813                           postdec1	equ	0xFE5
 18814                           fsr1h	equ	0xFE2
 18815                           fsr1l	equ	0xFE1
 18816                           indf2	equ	0xFDF
 18817                           postinc2	equ	0xFDE
 18818                           postdec2	equ	0xFDD
 18819                           plusw2	equ	0xFDB
 18820                           fsr2h	equ	0xFDA
 18821                           fsr2l	equ	0xFD9
 18822                           status	equ	0xFD8
 18823                           
 18824 ;; *************** function _WriteTimer0 *****************
 18825 ;; Defined at:
 18826 ;;		line 17 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/Timers/t0write.c"
 18827 ;; Parameters:    Size  Location     Type
 18828 ;;  timer0          2   13[COMRAM] unsigned int 
 18829 ;; Auto vars:     Size  Location     Type
 18830 ;;  timer           2   15[COMRAM] struct Timers
 18831 ;; Return value:  Size  Location     Type
 18832 ;;		None               void
 18833 ;; Registers used:
 18834 ;;		None
 18835 ;; Tracked objects:
 18836 ;;		On entry : F/0
 18837 ;;		On exit  : F/0
 18838 ;;		Unchanged: F/0
 18839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18840 ;;      Params:         2       0       0       0       0       0       0
 18841 ;;      Locals:         2       0       0       0       0       0       0
 18842 ;;      Temps:          0       0       0       0       0       0       0
 18843 ;;      Totals:         4       0       0       0       0       0       0
 18844 ;;Total ram usage:        4 bytes
 18845 ;; Hardware stack levels used:    1
 18846 ;; Hardware stack levels required when called:    2
 18847 ;; This function calls:
 18848 ;;		Nothing
 18849 ;; This function is called by:
 18850 ;;		_init
 18851 ;; This function uses a non-reentrant model
 18852 ;;
 18853                           
 18854                           	psect	text94
 18855  005BD2                     __ptext94:
 18856                           	opt stack 0
 18857  005BD2                     _WriteTimer0:
 18858                           	opt stack 27
 18859                           
 18860                           ; BSR set to: 0
 18861                           
 18862                           ;incstack = 0
 18863                           ;incstack = 0
 18864  005BD2  C00E  F010         	movff	WriteTimer0@timer0,WriteTimer0@timer
 18865  005BD6  C00F  F011         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 18866  005BDA  C011  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 18867  005BDE  C010  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 18868                           
 18869                           ; BSR set to: 0
 18870  005BE2  0012               	return	
 18871  005BE4                     __end_of_WriteTimer0:
 18872                           	opt stack 0
 18873                           tblptru	equ	0xFF8
 18874                           tblptrh	equ	0xFF7
 18875                           tblptrl	equ	0xFF6
 18876                           tablat	equ	0xFF5
 18877                           prodh	equ	0xFF4
 18878                           prodl	equ	0xFF3
 18879                           intcon	equ	0xFF2
 18880                           postinc0	equ	0xFEE
 18881                           wreg	equ	0xFE8
 18882                           indf1	equ	0xFE7
 18883                           postdec1	equ	0xFE5
 18884                           fsr1h	equ	0xFE2
 18885                           fsr1l	equ	0xFE1
 18886                           indf2	equ	0xFDF
 18887                           postinc2	equ	0xFDE
 18888                           postdec2	equ	0xFDD
 18889                           plusw2	equ	0xFDB
 18890                           fsr2h	equ	0xFDA
 18891                           fsr2l	equ	0xFD9
 18892                           status	equ	0xFD8
 18893                           
 18894 ;; *************** function ___awtofl *****************
 18895 ;; Defined at:
 18896 ;;		line 32 in file "/opt/microchip/xc8/v1.21/sources/common/awtofl.c"
 18897 ;; Parameters:    Size  Location     Type
 18898 ;;  c               2   23[COMRAM] int 
 18899 ;; Auto vars:     Size  Location     Type
 18900 ;;  f1              4    0        int 
 18901 ;;  sign            1   29[COMRAM] unsigned char 
 18902 ;; Return value:  Size  Location     Type
 18903 ;;                  4   23[COMRAM] unsigned char 
 18904 ;; Registers used:
 18905 ;;		wreg, status,2, status,0, cstack
 18906 ;; Tracked objects:
 18907 ;;		On entry : F/0
 18908 ;;		On exit  : 0/0
 18909 ;;		Unchanged: 0/0
 18910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18911 ;;      Params:         4       0       0       0       0       0       0
 18912 ;;      Locals:         3       0       0       0       0       0       0
 18913 ;;      Temps:          0       0       0       0       0       0       0
 18914 ;;      Totals:         7       0       0       0       0       0       0
 18915 ;;Total ram usage:        7 bytes
 18916 ;; Hardware stack levels used:    1
 18917 ;; Hardware stack levels required when called:    3
 18918 ;; This function calls:
 18919 ;;		___flpack
 18920 ;; This function is called by:
 18921 ;;		_setEventData
 18922 ;;		_exp
 18923 ;;		_log
 18924 ;; This function uses a non-reentrant model
 18925 ;;
 18926                           
 18927                           	psect	text95
 18928  0057D0                     __ptext95:
 18929                           	opt stack 0
 18930  0057D0                     ___awtofl:
 18931                           	opt stack 25
 18932                           
 18933                           ; BSR set to: 0
 18934                           
 18935                           ; BSR set to: 0
 18936                           ;incstack = 0
 18937                           ;incstack = 0
 18938  0057D0  6A1E               	clrf	___awtofl@sign,c
 18939  0057D2  AE19               	btfss	___awtofl@c+1,7,c
 18940  0057D4  D005               	goto	l11635
 18941                           
 18942                           ; BSR set to: 0
 18943  0057D6  6C18               	negf	___awtofl@c,c
 18944  0057D8  1E19               	comf	___awtofl@c+1,f,c
 18945  0057DA  B0D8               	btfsc	status,0,c
 18946  0057DC  2A19               	incf	___awtofl@c+1,f,c
 18947  0057DE  2A1E               	incf	___awtofl@sign,f,c
 18948  0057E0                     l11635:
 18949                           
 18950                           ; BSR set to: 0
 18951  0057E0  C018  F00E         	movff	___awtofl@c,?___flpack
 18952  0057E4  C019  F00F         	movff	___awtofl@c+1,?___flpack+1
 18953  0057E8  6A10               	clrf	?___flpack+2,c
 18954  0057EA  6A11               	clrf	?___flpack+3,c
 18955  0057EC  0E96               	movlw	150
 18956  0057EE  6E12               	movwf	?___flpack+4,c
 18957  0057F0  C01E  F013         	movff	___awtofl@sign,?___flpack+5
 18958  0057F4  ECB7  F024         	call	___flpack	;wreg free
 18959  0057F8  C011  F01B         	movff	?___flpack+3,?___awtofl+3
 18960  0057FC  C010  F01A         	movff	?___flpack+2,?___awtofl+2
 18961  005800  C00F  F019         	movff	?___flpack+1,?___awtofl+1
 18962  005804  C00E  F018         	movff	?___flpack,?___awtofl
 18963  005808  0012               	return	
 18964  00580A                     __end_of___awtofl:
 18965                           	opt stack 0
 18966                           tblptru	equ	0xFF8
 18967                           tblptrh	equ	0xFF7
 18968                           tblptrl	equ	0xFF6
 18969                           tablat	equ	0xFF5
 18970                           prodh	equ	0xFF4
 18971                           prodl	equ	0xFF3
 18972                           intcon	equ	0xFF2
 18973                           postinc0	equ	0xFEE
 18974                           wreg	equ	0xFE8
 18975                           indf1	equ	0xFE7
 18976                           postdec1	equ	0xFE5
 18977                           fsr1h	equ	0xFE2
 18978                           fsr1l	equ	0xFE1
 18979                           indf2	equ	0xFDF
 18980                           postinc2	equ	0xFDE
 18981                           postdec2	equ	0xFDD
 18982                           plusw2	equ	0xFDB
 18983                           fsr2h	equ	0xFDA
 18984                           fsr2l	equ	0xFD9
 18985                           status	equ	0xFD8
 18986                           
 18987 ;; *************** function ___flmul *****************
 18988 ;; Defined at:
 18989 ;;		line 51 in file "/opt/microchip/xc8/v1.21/sources/common/flmul.c"
 18990 ;; Parameters:    Size  Location     Type
 18991 ;;  f1              4    0[BANK0 ] unsigned char 
 18992 ;;  f2              4    4[BANK0 ] unsigned char 
 18993 ;; Auto vars:     Size  Location     Type
 18994 ;;  f3_as_produc    4   16[BANK0 ] unsigned long 
 18995 ;;  sign            1   21[BANK0 ] unsigned char 
 18996 ;;  cntr            1   20[BANK0 ] unsigned char 
 18997 ;;  exp             1   15[BANK0 ] unsigned char 
 18998 ;; Return value:  Size  Location     Type
 18999 ;;                  4    0[BANK0 ] unsigned char 
 19000 ;; Registers used:
 19001 ;;		wreg, status,2, status,0, cstack
 19002 ;; Tracked objects:
 19003 ;;		On entry : 0/0
 19004 ;;		On exit  : 0/0
 19005 ;;		Unchanged: 0/0
 19006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19007 ;;      Params:         0       8       0       0       0       0       0
 19008 ;;      Locals:         0      14       0       0       0       0       0
 19009 ;;      Temps:          0       0       0       0       0       0       0
 19010 ;;      Totals:         0      22       0       0       0       0       0
 19011 ;;Total ram usage:       22 bytes
 19012 ;; Hardware stack levels used:    1
 19013 ;; Hardware stack levels required when called:    3
 19014 ;; This function calls:
 19015 ;;		___flpack
 19016 ;; This function is called by:
 19017 ;;		_doWork
 19018 ;;		_Celsius2Fahrenheit
 19019 ;;		___asflmul
 19020 ;;		_log
 19021 ;;		_eval_poly
 19022 ;; This function uses a non-reentrant model
 19023 ;;
 19024                           
 19025                           	psect	text96
 19026  0047D8                     __ptext96:
 19027                           	opt stack 0
 19028  0047D8                     ___flmul:
 19029                           	opt stack 26
 19030                           
 19031                           ;incstack = 0
 19032                           ;incstack = 0
 19033  0047D8  0100               	movlb	0	; () banked
 19034  0047DA  3562               	rlcf	(___flmul@f1+2)& (0+255),w,b
 19035  0047DC  3563               	rlcf	(___flmul@f1+3)& (0+255),w,b
 19036  0047DE  6F6F               	movwf	___flmul@exp& (0+255),b
 19037  0047E0  676F               	tstfsz	___flmul@exp& (0+255),b
 19038  0047E2  D001               	goto	l11579
 19039  0047E4  D006               	goto	u10030
 19040  0047E6                     l11579:
 19041                           
 19042                           ; BSR set to: 0
 19043  0047E6  0100               	movlb	0	; () banked
 19044  0047E8  3566               	rlcf	(___flmul@f2+2)& (0+255),w,b
 19045  0047EA  3567               	rlcf	(___flmul@f2+3)& (0+255),w,b
 19046  0047EC  6F75               	movwf	___flmul@sign& (0+255),b
 19047  0047EE  6775               	tstfsz	___flmul@sign& (0+255),b
 19048  0047F0  D005               	goto	l11583
 19049  0047F2                     u10030:
 19050                           
 19051                           ; BSR set to: 0
 19052  0047F2  6B60               	clrf	?___flmul& (0+255),b
 19053  0047F4  6B61               	clrf	(?___flmul+1)& (0+255),b
 19054  0047F6  6B62               	clrf	(?___flmul+2)& (0+255),b
 19055  0047F8  6B63               	clrf	(?___flmul+3)& (0+255),b
 19056  0047FA  D058               	goto	l1625
 19057  0047FC                     l11583:
 19058                           
 19059                           ; BSR set to: 0
 19060  0047FC  5175               	movf	___flmul@sign& (0+255),w,b
 19061  0047FE  0F7B               	addlw	123
 19062  004800  276F               	addwf	___flmul@exp& (0+255),f,b
 19063                           
 19064                           ; BSR set to: 0
 19065  004802  C063  F075         	movff	___flmul@f1+3,___flmul@sign
 19066  004806  0100               	movlb	0	; () banked
 19067  004808  5167               	movf	(___flmul@f2+3)& (0+255),w,b
 19068  00480A  1B75               	xorwf	___flmul@sign& (0+255),f,b
 19069  00480C  0E80               	movlw	128
 19070  00480E  1775               	andwf	___flmul@sign& (0+255),f,b
 19071                           
 19072                           ; BSR set to: 0
 19073  004810  8F62               	bsf	(___flmul@f1+2)& (0+255),7,b
 19074                           
 19075                           ; BSR set to: 0
 19076  004812  8F66               	bsf	(___flmul@f2+2)& (0+255),7,b
 19077  004814  0E00               	movlw	0
 19078  004816  1767               	andwf	(___flmul@f2+3)& (0+255),f,b
 19079                           
 19080                           ; BSR set to: 0
 19081  004818  6B70               	clrf	___flmul@f3_as_product& (0+255),b
 19082  00481A  6B71               	clrf	(___flmul@f3_as_product+1)& (0+255),b
 19083  00481C  6B72               	clrf	(___flmul@f3_as_product+2)& (0+255),b
 19084  00481E  6B73               	clrf	(___flmul@f3_as_product+3)& (0+255),b
 19085                           
 19086                           ; BSR set to: 0
 19087  004820  0E07               	movlw	7
 19088  004822  6F74               	movwf	___flmul@cntr& (0+255),b
 19089  004824                     l11595:
 19090                           
 19091                           ; BSR set to: 0
 19092  004824  A160               	btfss	___flmul@f1& (0+255),0,b
 19093  004826  D008               	goto	l11599
 19094                           
 19095                           ; BSR set to: 0
 19096  004828  5164               	movf	___flmul@f2& (0+255),w,b
 19097  00482A  2770               	addwf	___flmul@f3_as_product& (0+255),f,b
 19098  00482C  5165               	movf	(___flmul@f2+1)& (0+255),w,b
 19099  00482E  2371               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
 19100  004830  5166               	movf	(___flmul@f2+2)& (0+255),w,b
 19101  004832  2372               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
 19102  004834  5167               	movf	(___flmul@f2+3)& (0+255),w,b
 19103  004836  2373               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
 19104  004838                     l11599:
 19105                           
 19106                           ; BSR set to: 0
 19107  004838  90D8               	bcf	status,0,c
 19108  00483A  3363               	rrcf	(___flmul@f1+3)& (0+255),f,b
 19109  00483C  3362               	rrcf	(___flmul@f1+2)& (0+255),f,b
 19110  00483E  3361               	rrcf	(___flmul@f1+1)& (0+255),f,b
 19111  004840  3360               	rrcf	___flmul@f1& (0+255),f,b
 19112                           
 19113                           ; BSR set to: 0
 19114  004842  90D8               	bcf	status,0,c
 19115  004844  3764               	rlcf	___flmul@f2& (0+255),f,b
 19116  004846  3765               	rlcf	(___flmul@f2+1)& (0+255),f,b
 19117  004848  3766               	rlcf	(___flmul@f2+2)& (0+255),f,b
 19118  00484A  3767               	rlcf	(___flmul@f2+3)& (0+255),f,b
 19119                           
 19120                           ; BSR set to: 0
 19121  00484C  2F74               	decfsz	___flmul@cntr& (0+255),f,b
 19122  00484E  D7EA               	goto	l11595
 19123                           
 19124                           ; BSR set to: 0
 19125  004850  0E11               	movlw	17
 19126  004852  6F74               	movwf	___flmul@cntr& (0+255),b
 19127  004854                     l11607:
 19128                           
 19129                           ; BSR set to: 0
 19130  004854  A160               	btfss	___flmul@f1& (0+255),0,b
 19131  004856  D008               	goto	l11611
 19132                           
 19133                           ; BSR set to: 0
 19134  004858  5164               	movf	___flmul@f2& (0+255),w,b
 19135  00485A  2770               	addwf	___flmul@f3_as_product& (0+255),f,b
 19136  00485C  5165               	movf	(___flmul@f2+1)& (0+255),w,b
 19137  00485E  2371               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
 19138  004860  5166               	movf	(___flmul@f2+2)& (0+255),w,b
 19139  004862  2372               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
 19140  004864  5167               	movf	(___flmul@f2+3)& (0+255),w,b
 19141  004866  2373               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
 19142  004868                     l11611:
 19143                           
 19144                           ; BSR set to: 0
 19145  004868  90D8               	bcf	status,0,c
 19146  00486A  3363               	rrcf	(___flmul@f1+3)& (0+255),f,b
 19147  00486C  3362               	rrcf	(___flmul@f1+2)& (0+255),f,b
 19148  00486E  3361               	rrcf	(___flmul@f1+1)& (0+255),f,b
 19149  004870  3360               	rrcf	___flmul@f1& (0+255),f,b
 19150                           
 19151                           ; BSR set to: 0
 19152  004872  90D8               	bcf	status,0,c
 19153  004874  3373               	rrcf	(___flmul@f3_as_product+3)& (0+255),f,b
 19154  004876  3372               	rrcf	(___flmul@f3_as_product+2)& (0+255),f,b
 19155  004878  3371               	rrcf	(___flmul@f3_as_product+1)& (0+255),f,b
 19156  00487A  3370               	rrcf	___flmul@f3_as_product& (0+255),f,b
 19157                           
 19158                           ; BSR set to: 0
 19159  00487C  2F74               	decfsz	___flmul@cntr& (0+255),f,b
 19160  00487E  D7EA               	goto	l11607
 19161                           
 19162                           ; BSR set to: 0
 19163  004880  C070  F00E         	movff	___flmul@f3_as_product,?___flpack
 19164  004884  C071  F00F         	movff	___flmul@f3_as_product+1,?___flpack+1
 19165  004888  C072  F010         	movff	___flmul@f3_as_product+2,?___flpack+2
 19166  00488C  C073  F011         	movff	___flmul@f3_as_product+3,?___flpack+3
 19167  004890  C06F  F012         	movff	___flmul@exp,?___flpack+4
 19168  004894  C075  F013         	movff	___flmul@sign,?___flpack+5
 19169  004898  ECB7  F024         	call	___flpack	;wreg free
 19170  00489C  C011  F063         	movff	?___flpack+3,?___flmul+3
 19171  0048A0  C010  F062         	movff	?___flpack+2,?___flmul+2
 19172  0048A4  C00F  F061         	movff	?___flpack+1,?___flmul+1
 19173  0048A8  C00E  F060         	movff	?___flpack,?___flmul
 19174  0048AC                     l1625:
 19175  0048AC  0012               	return	
 19176  0048AE                     __end_of___flmul:
 19177                           	opt stack 0
 19178                           tblptru	equ	0xFF8
 19179                           tblptrh	equ	0xFF7
 19180                           tblptrl	equ	0xFF6
 19181                           tablat	equ	0xFF5
 19182                           prodh	equ	0xFF4
 19183                           prodl	equ	0xFF3
 19184                           intcon	equ	0xFF2
 19185                           postinc0	equ	0xFEE
 19186                           wreg	equ	0xFE8
 19187                           indf1	equ	0xFE7
 19188                           postdec1	equ	0xFE5
 19189                           fsr1h	equ	0xFE2
 19190                           fsr1l	equ	0xFE1
 19191                           indf2	equ	0xFDF
 19192                           postinc2	equ	0xFDE
 19193                           postdec2	equ	0xFDD
 19194                           plusw2	equ	0xFDB
 19195                           fsr2h	equ	0xFDA
 19196                           fsr2l	equ	0xFD9
 19197                           status	equ	0xFD8
 19198                           
 19199 ;; *************** function ___flpack *****************
 19200 ;; Defined at:
 19201 ;;		line 64 in file "/opt/microchip/xc8/v1.21/sources/common/double.c"
 19202 ;; Parameters:    Size  Location     Type
 19203 ;;  arg             4   13[COMRAM] unsigned long 
 19204 ;;  exp             1   17[COMRAM] unsigned char 
 19205 ;;  sign            1   18[COMRAM] unsigned char 
 19206 ;; Auto vars:     Size  Location     Type
 19207 ;;		None
 19208 ;; Return value:  Size  Location     Type
 19209 ;;                  4   13[COMRAM] unsigned char 
 19210 ;; Registers used:
 19211 ;;		wreg, status,2, status,0
 19212 ;; Tracked objects:
 19213 ;;		On entry : 0/0
 19214 ;;		On exit  : 0/0
 19215 ;;		Unchanged: 0/0
 19216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19217 ;;      Params:         6       0       0       0       0       0       0
 19218 ;;      Locals:         0       0       0       0       0       0       0
 19219 ;;      Temps:          4       0       0       0       0       0       0
 19220 ;;      Totals:        10       0       0       0       0       0       0
 19221 ;;Total ram usage:       10 bytes
 19222 ;; Hardware stack levels used:    1
 19223 ;; Hardware stack levels required when called:    2
 19224 ;; This function calls:
 19225 ;;		Nothing
 19226 ;; This function is called by:
 19227 ;;		___altofl
 19228 ;;		___awtofl
 19229 ;;		___fladd
 19230 ;;		___fldiv
 19231 ;;		___flmul
 19232 ;;		___lwtofl
 19233 ;; This function uses a non-reentrant model
 19234 ;;
 19235                           
 19236                           	psect	text97
 19237  00496E                     __ptext97:
 19238                           	opt stack 0
 19239  00496E                     ___flpack:
 19240                           	opt stack 26
 19241                           
 19242                           ;incstack = 0
 19243                           ;incstack = 0
 19244  00496E  5012               	movf	___flpack@exp,w,c
 19245  004970  E005               	bz	l1540
 19246  004972  5011               	movf	___flpack@arg+3,w,c
 19247  004974  100E               	iorwf	___flpack@arg,w,c
 19248  004976  100F               	iorwf	___flpack@arg+1,w,c
 19249  004978  1010               	iorwf	___flpack@arg+2,w,c
 19250  00497A  E10B               	bnz	l11385
 19251  00497C                     l1540:
 19252  00497C  6A0E               	clrf	?___flpack,c
 19253  00497E  6A0F               	clrf	?___flpack+1,c
 19254  004980  6A10               	clrf	?___flpack+2,c
 19255  004982  6A11               	clrf	?___flpack+3,c
 19256  004984  D053               	goto	l1541
 19257  004986                     l11383:
 19258  004986  2A12               	incf	___flpack@exp,f,c
 19259  004988  90D8               	bcf	status,0,c
 19260  00498A  3211               	rrcf	___flpack@arg+3,f,c
 19261  00498C  3210               	rrcf	___flpack@arg+2,f,c
 19262  00498E  320F               	rrcf	___flpack@arg+1,f,c
 19263  004990  320E               	rrcf	___flpack@arg,f,c
 19264  004992                     l11385:
 19265  004992  6A14               	clrf	??___flpack& (0+255),c
 19266  004994  6A15               	clrf	(??___flpack+1)& (0+255),c
 19267  004996  6A16               	clrf	(??___flpack+2)& (0+255),c
 19268  004998  0EFE               	movlw	254
 19269  00499A  1411               	andwf	___flpack@arg+3,w,c
 19270  00499C  6E17               	movwf	(??___flpack+3)& (0+255),c
 19271  00499E  5017               	movf	??___flpack+3,w,c
 19272  0049A0  1014               	iorwf	??___flpack,w,c
 19273  0049A2  1015               	iorwf	??___flpack+1,w,c
 19274  0049A4  1016               	iorwf	??___flpack+2,w,c
 19275  0049A6  E00C               	bz	l1545
 19276  0049A8  D7EE               	goto	l11383
 19277  0049AA                     l11387:
 19278  0049AA  2A12               	incf	___flpack@exp,f,c
 19279  0049AC  2A0E               	incf	___flpack@arg,f,c
 19280  0049AE  0E00               	movlw	0
 19281  0049B0  220F               	addwfc	___flpack@arg+1,f,c
 19282  0049B2  2210               	addwfc	___flpack@arg+2,f,c
 19283  0049B4  2211               	addwfc	___flpack@arg+3,f,c
 19284  0049B6  90D8               	bcf	status,0,c
 19285  0049B8  3211               	rrcf	___flpack@arg+3,f,c
 19286  0049BA  3210               	rrcf	___flpack@arg+2,f,c
 19287  0049BC  320F               	rrcf	___flpack@arg+1,f,c
 19288  0049BE  320E               	rrcf	___flpack@arg,f,c
 19289  0049C0                     l1545:
 19290  0049C0  6A14               	clrf	??___flpack& (0+255),c
 19291  0049C2  6A15               	clrf	(??___flpack+1)& (0+255),c
 19292  0049C4  6A16               	clrf	(??___flpack+2)& (0+255),c
 19293  0049C6  5011               	movf	___flpack@arg+3,w,c
 19294  0049C8  6E17               	movwf	(??___flpack+3)& (0+255),c
 19295  0049CA  5017               	movf	??___flpack+3,w,c
 19296  0049CC  1014               	iorwf	??___flpack,w,c
 19297  0049CE  1015               	iorwf	??___flpack+1,w,c
 19298  0049D0  1016               	iorwf	??___flpack+2,w,c
 19299  0049D2  E007               	bz	l11395
 19300  0049D4  D7EA               	goto	l11387
 19301  0049D6                     l11393:
 19302  0049D6  0612               	decf	___flpack@exp,f,c
 19303  0049D8  90D8               	bcf	status,0,c
 19304  0049DA  360E               	rlcf	___flpack@arg,f,c
 19305  0049DC  360F               	rlcf	___flpack@arg+1,f,c
 19306  0049DE  3610               	rlcf	___flpack@arg+2,f,c
 19307  0049E0  3611               	rlcf	___flpack@arg+3,f,c
 19308  0049E2                     l11395:
 19309  0049E2  AE10               	btfss	___flpack@arg+2,7,c
 19310  0049E4  D7F8               	goto	l11393
 19311  0049E6  B012               	btfsc	___flpack@exp,0,c
 19312  0049E8  D002               	goto	l1551
 19313  0049EA  0E7F               	movlw	127
 19314  0049EC  1610               	andwf	___flpack@arg+2,f,c
 19315  0049EE                     l1551:
 19316  0049EE  90D8               	bcf	status,0,c
 19317  0049F0  3212               	rrcf	___flpack@exp,f,c
 19318  0049F2  C012  F014         	movff	___flpack@exp,??___flpack
 19319  0049F6  6A15               	clrf	(??___flpack+1)& (0+255),c
 19320  0049F8  6A16               	clrf	(??___flpack+2)& (0+255),c
 19321  0049FA  6A17               	clrf	(??___flpack+3)& (0+255),c
 19322  0049FC  C014  F017         	movff	??___flpack,??___flpack+3
 19323  004A00  6A16               	clrf	??___flpack+2,c
 19324  004A02  6A15               	clrf	??___flpack+1,c
 19325  004A04  6A14               	clrf	??___flpack,c
 19326  004A06  5014               	movf	??___flpack,w,c
 19327  004A08  120E               	iorwf	___flpack@arg,f,c
 19328  004A0A  5015               	movf	??___flpack+1,w,c
 19329  004A0C  120F               	iorwf	___flpack@arg+1,f,c
 19330  004A0E  5016               	movf	??___flpack+2,w,c
 19331  004A10  1210               	iorwf	___flpack@arg+2,f,c
 19332  004A12  5017               	movf	??___flpack+3,w,c
 19333  004A14  1211               	iorwf	___flpack@arg+3,f,c
 19334  004A16  5013               	movf	___flpack@sign,w,c
 19335  004A18  A4D8               	btfss	status,2,c
 19336  004A1A  8E11               	bsf	___flpack@arg+3,7,c
 19337  004A1C  C00E  F00E         	movff	___flpack@arg,?___flpack
 19338  004A20  C00F  F00F         	movff	___flpack@arg+1,?___flpack+1
 19339  004A24  C010  F010         	movff	___flpack@arg+2,?___flpack+2
 19340  004A28  C011  F011         	movff	___flpack@arg+3,?___flpack+3
 19341  004A2C                     l1541:
 19342  004A2C  0012               	return	
 19343  004A2E                     __end_of___flpack:
 19344                           	opt stack 0
 19345                           tblptru	equ	0xFF8
 19346                           tblptrh	equ	0xFF7
 19347                           tblptrl	equ	0xFF6
 19348                           tablat	equ	0xFF5
 19349                           prodh	equ	0xFF4
 19350                           prodl	equ	0xFF3
 19351                           intcon	equ	0xFF2
 19352                           postinc0	equ	0xFEE
 19353                           wreg	equ	0xFE8
 19354                           indf1	equ	0xFE7
 19355                           postdec1	equ	0xFE5
 19356                           fsr1h	equ	0xFE2
 19357                           fsr1l	equ	0xFE1
 19358                           indf2	equ	0xFDF
 19359                           postinc2	equ	0xFDE
 19360                           postdec2	equ	0xFDD
 19361                           plusw2	equ	0xFDB
 19362                           fsr2h	equ	0xFDA
 19363                           fsr2l	equ	0xFD9
 19364                           status	equ	0xFD8
 19365                           
 19366 ;; *************** function _vscp_readAppReg *****************
 19367 ;; Defined at:
 19368 ;;		line 1282 in file "../main.c"
 19369 ;; Parameters:    Size  Location     Type
 19370 ;;  reg             1    wreg     unsigned char 
 19371 ;; Auto vars:     Size  Location     Type
 19372 ;;  reg             1   26[COMRAM] unsigned char 
 19373 ;;  pos             1   25[COMRAM] unsigned char 
 19374 ;;  rv              1   27[COMRAM] unsigned char 
 19375 ;; Return value:  Size  Location     Type
 19376 ;;                  1    wreg      unsigned char 
 19377 ;; Registers used:
 19378 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19379 ;; Tracked objects:
 19380 ;;		On entry : F/0
 19381 ;;		On exit  : 0/0
 19382 ;;		Unchanged: 0/0
 19383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19384 ;;      Params:         0       0       0       0       0       0       0
 19385 ;;      Locals:         3       0       0       0       0       0       0
 19386 ;;      Temps:          0       0       0       0       0       0       0
 19387 ;;      Totals:         3       0       0       0       0       0       0
 19388 ;;Total ram usage:        3 bytes
 19389 ;; Hardware stack levels used:    1
 19390 ;; Hardware stack levels required when called:    3
 19391 ;; This function calls:
 19392 ;;		_readEEPROM
 19393 ;; This function is called by:
 19394 ;;		_vscp_readRegister
 19395 ;;		_vscp_handleProtocolEvent
 19396 ;; This function uses a non-reentrant model
 19397 ;;
 19398                           
 19399                           	psect	text98
 19400  00204E                     __ptext98:
 19401                           	opt stack 0
 19402  00204E                     _vscp_readAppReg:
 19403                           	opt stack 25
 19404                           
 19405                           ;incstack = 0
 19406                           ;incstack = 0
 19407                           ;vscp_readAppReg@reg stored from wreg
 19408  00204E  CFE8 F01B          	movff	wreg,vscp_readAppReg@reg
 19409                           
 19410                           ; BSR set to: 0
 19411                           ;main.c: 1283: uint8_t rv;
 19412                           ;main.c: 1288: if (0 == vscp_page_select) {
 19413  002052  5047               	movf	_vscp_page_select+1,w,c
 19414  002054  1046               	iorwf	_vscp_page_select,w,c
 19415  002056  E101 D25B          	bz	l10741
 19416  00205A  D39F               	goto	l10743
 19417  00205C                     l10539:
 19418                           
 19419                           ; BSR set to: 0
 19420                           ;main.c: 1294: rv = readEEPROM( 0x41 );
 19421  00205C  6A17               	clrf	?_readEEPROM+1,c
 19422  00205E  0E41               	movlw	65
 19423  002060  6E16               	movwf	?_readEEPROM,c
 19424  002062  ECD6  F02D         	call	_readEEPROM	;wreg free
 19425  002066  D3C6               	goto	L53
 19426  002068                     l10541:
 19427                           
 19428                           ; BSR set to: 0
 19429                           ;main.c: 1299: rv = readEEPROM( 0x42 );
 19430  002068  6A17               	clrf	?_readEEPROM+1,c
 19431  00206A  0E42               	movlw	66
 19432  00206C  6E16               	movwf	?_readEEPROM,c
 19433  00206E  ECD6  F02D         	call	_readEEPROM	;wreg free
 19434  002072  D3C0               	goto	L53
 19435  002074                     l10543:
 19436                           
 19437                           ; BSR set to: 0
 19438                           ;main.c: 1304: rv = readEEPROM( 0x43 );
 19439  002074  6A17               	clrf	?_readEEPROM+1,c
 19440  002076  0E43               	movlw	67
 19441  002078  6E16               	movwf	?_readEEPROM,c
 19442  00207A  ECD6  F02D         	call	_readEEPROM	;wreg free
 19443  00207E  D3BA               	goto	L53
 19444  002080                     l10545:
 19445                           
 19446                           ; BSR set to: 0
 19447                           ;main.c: 1309: rv = readEEPROM (0x44 );
 19448  002080  6A17               	clrf	?_readEEPROM+1,c
 19449  002082  0E44               	movlw	68
 19450  002084  6E16               	movwf	?_readEEPROM,c
 19451  002086  ECD6  F02D         	call	_readEEPROM	;wreg free
 19452  00208A  D3B4               	goto	L53
 19453  00208C                     l10547:
 19454                           
 19455                           ; BSR set to: 0
 19456                           ;main.c: 1314: rv = readEEPROM( 0x45 );
 19457  00208C  6A17               	clrf	?_readEEPROM+1,c
 19458  00208E  0E45               	movlw	69
 19459  002090  6E16               	movwf	?_readEEPROM,c
 19460  002092  ECD6  F02D         	call	_readEEPROM	;wreg free
 19461  002096  D3AE               	goto	L53
 19462  002098                     l10549:
 19463                           
 19464                           ; BSR set to: 0
 19465                           ;main.c: 1319: rv = readEEPROM( 0x46 );
 19466  002098  6A17               	clrf	?_readEEPROM+1,c
 19467  00209A  0E46               	movlw	70
 19468  00209C  6E16               	movwf	?_readEEPROM,c
 19469  00209E  ECD6  F02D         	call	_readEEPROM	;wreg free
 19470  0020A2  D3A8               	goto	L53
 19471  0020A4                     l10551:
 19472                           
 19473                           ; BSR set to: 0
 19474                           ;main.c: 1324: rv = readEEPROM( 0x47 );
 19475  0020A4  6A17               	clrf	?_readEEPROM+1,c
 19476  0020A6  0E47               	movlw	71
 19477  0020A8  6E16               	movwf	?_readEEPROM,c
 19478  0020AA  ECD6  F02D         	call	_readEEPROM	;wreg free
 19479  0020AE  D3A2               	goto	L53
 19480  0020B0                     l10553:
 19481                           
 19482                           ; BSR set to: 0
 19483                           ;main.c: 1329: rv = readEEPROM( 0x48 );
 19484  0020B0  6A17               	clrf	?_readEEPROM+1,c
 19485  0020B2  0E48               	movlw	72
 19486  0020B4  6E16               	movwf	?_readEEPROM,c
 19487  0020B6  ECD6  F02D         	call	_readEEPROM	;wreg free
 19488  0020BA  D39C               	goto	L53
 19489  0020BC                     l10555:
 19490                           
 19491                           ; BSR set to: 0
 19492                           ;main.c: 1334: rv = ((current_temp[0] & 0xff00) >> 8);
 19493  0020BC  0101               	movlb	1	; () banked
 19494  0020BE  5101               	movf	(_current_temp+1)& (0+255),w,b
 19495  0020C0  D399               	goto	L53
 19496  0020C2                     l314:
 19497                           
 19498                           ; BSR set to: 0
 19499                           ;main.c: 1339: rv = (current_temp[0] & 0x00ff);
 19500  0020C2  C100  F01C         	movff	_current_temp,vscp_readAppReg@rv
 19501                           
 19502                           ;main.c: 1340: break;
 19503  0020C6  D397               	goto	l10765
 19504  0020C8                     l10557:
 19505                           
 19506                           ; BSR set to: 0
 19507                           ;main.c: 1344: rv = ((current_temp[1] & 0xff00) >> 8);
 19508  0020C8  0101               	movlb	1	; () banked
 19509  0020CA  5103               	movf	(_current_temp+3)& (0+255),w,b
 19510  0020CC  D393               	goto	L53
 19511  0020CE                     l316:
 19512                           
 19513                           ; BSR set to: 0
 19514                           ;main.c: 1349: rv = (current_temp[1] & 0x00ff);
 19515  0020CE  C102  F01C         	movff	_current_temp+2,vscp_readAppReg@rv
 19516                           
 19517                           ;main.c: 1350: break;
 19518  0020D2  D391               	goto	l10765
 19519  0020D4                     l10559:
 19520                           
 19521                           ; BSR set to: 0
 19522                           ;main.c: 1354: rv = ((current_temp[2] & 0xff00) >> 8);
 19523  0020D4  0101               	movlb	1	; () banked
 19524  0020D6  5105               	movf	(_current_temp+5)& (0+255),w,b
 19525  0020D8  D38D               	goto	L53
 19526  0020DA                     l318:
 19527                           
 19528                           ; BSR set to: 0
 19529                           ;main.c: 1359: rv = (current_temp[2] & 0x00ff);
 19530  0020DA  C104  F01C         	movff	_current_temp+4,vscp_readAppReg@rv
 19531                           
 19532                           ;main.c: 1360: break;
 19533  0020DE  D38B               	goto	l10765
 19534  0020E0                     l10561:
 19535                           
 19536                           ; BSR set to: 0
 19537                           ;main.c: 1364: rv = ((current_temp[3] & 0xff00) >> 8);
 19538  0020E0  0101               	movlb	1	; () banked
 19539  0020E2  5107               	movf	(_current_temp+7)& (0+255),w,b
 19540  0020E4  D387               	goto	L53
 19541  0020E6                     l320:
 19542                           
 19543                           ; BSR set to: 0
 19544                           ;main.c: 1369: rv = (current_temp[3] & 0x00ff);
 19545  0020E6  C106  F01C         	movff	_current_temp+6,vscp_readAppReg@rv
 19546                           
 19547                           ;main.c: 1370: break;
 19548  0020EA  D385               	goto	l10765
 19549  0020EC                     l10563:
 19550                           
 19551                           ; BSR set to: 0
 19552                           ;main.c: 1374: rv = ((current_temp[4] & 0xff00) >> 8);
 19553  0020EC  0101               	movlb	1	; () banked
 19554  0020EE  5109               	movf	(_current_temp+9)& (0+255),w,b
 19555  0020F0  D381               	goto	L53
 19556  0020F2                     l322:
 19557                           
 19558                           ; BSR set to: 0
 19559                           ;main.c: 1379: rv = (current_temp[4] & 0x00ff);
 19560  0020F2  C108  F01C         	movff	_current_temp+8,vscp_readAppReg@rv
 19561                           
 19562                           ;main.c: 1380: break;
 19563  0020F6  D37F               	goto	l10765
 19564  0020F8                     l10565:
 19565                           
 19566                           ; BSR set to: 0
 19567                           ;main.c: 1384: rv = ((current_temp[5] & 0xff00) >> 8);
 19568  0020F8  0101               	movlb	1	; () banked
 19569  0020FA  510B               	movf	(_current_temp+11)& (0+255),w,b
 19570  0020FC  D37B               	goto	L53
 19571  0020FE                     l324:
 19572                           
 19573                           ; BSR set to: 0
 19574                           ;main.c: 1389: rv = (current_temp[5] & 0x00ff);
 19575  0020FE  C10A  F01C         	movff	_current_temp+10,vscp_readAppReg@rv
 19576                           
 19577                           ;main.c: 1390: break;
 19578  002102  D379               	goto	l10765
 19579  002104                     l10567:
 19580                           
 19581                           ; BSR set to: 0
 19582                           ;main.c: 1394: rv = readEEPROM(0x49);
 19583  002104  6A17               	clrf	?_readEEPROM+1,c
 19584  002106  0E49               	movlw	73
 19585  002108  6E16               	movwf	?_readEEPROM,c
 19586  00210A  ECD6  F02D         	call	_readEEPROM	;wreg free
 19587  00210E  D372               	goto	L53
 19588  002110                     l10569:
 19589                           
 19590                           ; BSR set to: 0
 19591                           ;main.c: 1399: rv = readEEPROM(0x4A);
 19592  002110  6A17               	clrf	?_readEEPROM+1,c
 19593  002112  0E4A               	movlw	74
 19594  002114  6E16               	movwf	?_readEEPROM,c
 19595  002116  ECD6  F02D         	call	_readEEPROM	;wreg free
 19596  00211A  D36C               	goto	L53
 19597  00211C                     l10571:
 19598                           
 19599                           ; BSR set to: 0
 19600                           ;main.c: 1404: rv = readEEPROM(0x4B);
 19601  00211C  6A17               	clrf	?_readEEPROM+1,c
 19602  00211E  0E4B               	movlw	75
 19603  002120  6E16               	movwf	?_readEEPROM,c
 19604  002122  ECD6  F02D         	call	_readEEPROM	;wreg free
 19605  002126  D366               	goto	L53
 19606  002128                     l10573:
 19607                           
 19608                           ; BSR set to: 0
 19609                           ;main.c: 1409: rv = readEEPROM(0x4C);
 19610  002128  6A17               	clrf	?_readEEPROM+1,c
 19611  00212A  0E4C               	movlw	76
 19612  00212C  6E16               	movwf	?_readEEPROM,c
 19613  00212E  ECD6  F02D         	call	_readEEPROM	;wreg free
 19614  002132  D360               	goto	L53
 19615  002134                     l10575:
 19616                           
 19617                           ; BSR set to: 0
 19618                           ;main.c: 1414: rv = readEEPROM(0x4D);
 19619  002134  6A17               	clrf	?_readEEPROM+1,c
 19620  002136  0E4D               	movlw	77
 19621  002138  6E16               	movwf	?_readEEPROM,c
 19622  00213A  ECD6  F02D         	call	_readEEPROM	;wreg free
 19623  00213E  D35A               	goto	L53
 19624  002140                     l10577:
 19625                           
 19626                           ; BSR set to: 0
 19627                           ;main.c: 1419: rv = readEEPROM(0x4E);
 19628  002140  6A17               	clrf	?_readEEPROM+1,c
 19629  002142  0E4E               	movlw	78
 19630  002144  6E16               	movwf	?_readEEPROM,c
 19631  002146  ECD6  F02D         	call	_readEEPROM	;wreg free
 19632  00214A  D354               	goto	L53
 19633  00214C                     l10579:
 19634                           
 19635                           ; BSR set to: 0
 19636                           ;main.c: 1426: rv = readEEPROM(0x4F);
 19637  00214C  6A17               	clrf	?_readEEPROM+1,c
 19638  00214E  0E4F               	movlw	79
 19639  002150  6E16               	movwf	?_readEEPROM,c
 19640  002152  ECD6  F02D         	call	_readEEPROM	;wreg free
 19641  002156  D34E               	goto	L53
 19642  002158                     l10581:
 19643                           
 19644                           ; BSR set to: 0
 19645                           ;main.c: 1431: rv = readEEPROM(0x50);
 19646  002158  6A17               	clrf	?_readEEPROM+1,c
 19647  00215A  0E50               	movlw	80
 19648  00215C  6E16               	movwf	?_readEEPROM,c
 19649  00215E  ECD6  F02D         	call	_readEEPROM	;wreg free
 19650  002162  D348               	goto	L53
 19651  002164                     l10583:
 19652                           
 19653                           ; BSR set to: 0
 19654                           ;main.c: 1436: rv = readEEPROM(0x51);
 19655  002164  6A17               	clrf	?_readEEPROM+1,c
 19656  002166  0E51               	movlw	81
 19657  002168  6E16               	movwf	?_readEEPROM,c
 19658  00216A  ECD6  F02D         	call	_readEEPROM	;wreg free
 19659  00216E  D342               	goto	L53
 19660  002170                     l10585:
 19661                           
 19662                           ; BSR set to: 0
 19663                           ;main.c: 1441: rv = readEEPROM(0x52);
 19664  002170  6A17               	clrf	?_readEEPROM+1,c
 19665  002172  0E52               	movlw	82
 19666  002174  6E16               	movwf	?_readEEPROM,c
 19667  002176  ECD6  F02D         	call	_readEEPROM	;wreg free
 19668  00217A  D33C               	goto	L53
 19669  00217C                     l10587:
 19670                           
 19671                           ; BSR set to: 0
 19672                           ;main.c: 1446: rv = readEEPROM(0x53);
 19673  00217C  6A17               	clrf	?_readEEPROM+1,c
 19674  00217E  0E53               	movlw	83
 19675  002180  6E16               	movwf	?_readEEPROM,c
 19676  002182  ECD6  F02D         	call	_readEEPROM	;wreg free
 19677  002186  D336               	goto	L53
 19678  002188                     l10589:
 19679                           
 19680                           ; BSR set to: 0
 19681                           ;main.c: 1451: rv = readEEPROM(0x54);
 19682  002188  6A17               	clrf	?_readEEPROM+1,c
 19683  00218A  0E54               	movlw	84
 19684  00218C  6E16               	movwf	?_readEEPROM,c
 19685  00218E  ECD6  F02D         	call	_readEEPROM	;wreg free
 19686  002192  D330               	goto	L53
 19687  002194                     l10591:
 19688                           
 19689                           ; BSR set to: 0
 19690                           ;main.c: 1456: rv = readEEPROM(0x55);
 19691  002194  6A17               	clrf	?_readEEPROM+1,c
 19692  002196  0E55               	movlw	85
 19693  002198  6E16               	movwf	?_readEEPROM,c
 19694  00219A  ECD6  F02D         	call	_readEEPROM	;wreg free
 19695  00219E  D32A               	goto	L53
 19696  0021A0                     l10593:
 19697                           
 19698                           ; BSR set to: 0
 19699                           ;main.c: 1461: rv = readEEPROM(0x56);
 19700  0021A0  6A17               	clrf	?_readEEPROM+1,c
 19701  0021A2  0E56               	movlw	86
 19702  0021A4  6E16               	movwf	?_readEEPROM,c
 19703  0021A6  ECD6  F02D         	call	_readEEPROM	;wreg free
 19704  0021AA  D324               	goto	L53
 19705  0021AC                     l10595:
 19706                           
 19707                           ; BSR set to: 0
 19708                           ;main.c: 1466: rv = readEEPROM(0x57);
 19709  0021AC  6A17               	clrf	?_readEEPROM+1,c
 19710  0021AE  0E57               	movlw	87
 19711  0021B0  6E16               	movwf	?_readEEPROM,c
 19712  0021B2  ECD6  F02D         	call	_readEEPROM	;wreg free
 19713  0021B6  D31E               	goto	L53
 19714  0021B8                     l10597:
 19715                           
 19716                           ; BSR set to: 0
 19717                           ;main.c: 1471: rv = readEEPROM(0x58);
 19718  0021B8  6A17               	clrf	?_readEEPROM+1,c
 19719  0021BA  0E58               	movlw	88
 19720  0021BC  6E16               	movwf	?_readEEPROM,c
 19721  0021BE  ECD6  F02D         	call	_readEEPROM	;wreg free
 19722  0021C2  D318               	goto	L53
 19723  0021C4                     l10599:
 19724                           
 19725                           ; BSR set to: 0
 19726                           ;main.c: 1476: rv = readEEPROM(0x59);
 19727  0021C4  6A17               	clrf	?_readEEPROM+1,c
 19728  0021C6  0E59               	movlw	89
 19729  0021C8  6E16               	movwf	?_readEEPROM,c
 19730  0021CA  ECD6  F02D         	call	_readEEPROM	;wreg free
 19731  0021CE  D312               	goto	L53
 19732  0021D0                     l10601:
 19733                           
 19734                           ; BSR set to: 0
 19735                           ;main.c: 1481: rv = readEEPROM(0x5A);
 19736  0021D0  6A17               	clrf	?_readEEPROM+1,c
 19737  0021D2  0E5A               	movlw	90
 19738  0021D4  6E16               	movwf	?_readEEPROM,c
 19739  0021D6  ECD6  F02D         	call	_readEEPROM	;wreg free
 19740  0021DA  D30C               	goto	L53
 19741  0021DC                     l10603:
 19742                           
 19743                           ; BSR set to: 0
 19744                           ;main.c: 1490: rv = readEEPROM(0x5B);
 19745  0021DC  6A17               	clrf	?_readEEPROM+1,c
 19746  0021DE  0E5B               	movlw	91
 19747  0021E0  6E16               	movwf	?_readEEPROM,c
 19748  0021E2  ECD6  F02D         	call	_readEEPROM	;wreg free
 19749  0021E6  D306               	goto	L53
 19750  0021E8                     l10605:
 19751                           
 19752                           ; BSR set to: 0
 19753                           ;main.c: 1495: rv = readEEPROM(0x5C);
 19754  0021E8  6A17               	clrf	?_readEEPROM+1,c
 19755  0021EA  0E5C               	movlw	92
 19756  0021EC  6E16               	movwf	?_readEEPROM,c
 19757  0021EE  ECD6  F02D         	call	_readEEPROM	;wreg free
 19758  0021F2  D300               	goto	L53
 19759  0021F4                     l10607:
 19760                           
 19761                           ; BSR set to: 0
 19762                           ;main.c: 1500: rv = readEEPROM(0x5D);
 19763  0021F4  6A17               	clrf	?_readEEPROM+1,c
 19764  0021F6  0E5D               	movlw	93
 19765  0021F8  6E16               	movwf	?_readEEPROM,c
 19766  0021FA  ECD6  F02D         	call	_readEEPROM	;wreg free
 19767  0021FE  D2FA               	goto	L53
 19768  002200                     l10609:
 19769                           
 19770                           ; BSR set to: 0
 19771                           ;main.c: 1505: rv = readEEPROM(0x5E);
 19772  002200  6A17               	clrf	?_readEEPROM+1,c
 19773  002202  0E5E               	movlw	94
 19774  002204  6E16               	movwf	?_readEEPROM,c
 19775  002206  ECD6  F02D         	call	_readEEPROM	;wreg free
 19776  00220A  D2F4               	goto	L53
 19777  00220C                     l10611:
 19778                           
 19779                           ; BSR set to: 0
 19780                           ;main.c: 1510: rv = readEEPROM(0x5F);
 19781  00220C  6A17               	clrf	?_readEEPROM+1,c
 19782  00220E  0E5F               	movlw	95
 19783  002210  6E16               	movwf	?_readEEPROM,c
 19784  002212  ECD6  F02D         	call	_readEEPROM	;wreg free
 19785  002216  D2EE               	goto	L53
 19786  002218                     l10613:
 19787                           
 19788                           ; BSR set to: 0
 19789                           ;main.c: 1515: rv = readEEPROM(0x60);
 19790  002218  6A17               	clrf	?_readEEPROM+1,c
 19791  00221A  0E60               	movlw	96
 19792  00221C  6E16               	movwf	?_readEEPROM,c
 19793  00221E  ECD6  F02D         	call	_readEEPROM	;wreg free
 19794  002222  D2E8               	goto	L53
 19795  002224                     l10615:
 19796                           
 19797                           ; BSR set to: 0
 19798                           ;main.c: 1520: rv = readEEPROM(0x61);
 19799  002224  6A17               	clrf	?_readEEPROM+1,c
 19800  002226  0E61               	movlw	97
 19801  002228  6E16               	movwf	?_readEEPROM,c
 19802  00222A  ECD6  F02D         	call	_readEEPROM	;wreg free
 19803  00222E  D2E2               	goto	L53
 19804  002230                     l10617:
 19805                           
 19806                           ; BSR set to: 0
 19807                           ;main.c: 1525: rv = readEEPROM(0x62);
 19808  002230  6A17               	clrf	?_readEEPROM+1,c
 19809  002232  0E62               	movlw	98
 19810  002234  6E16               	movwf	?_readEEPROM,c
 19811  002236  ECD6  F02D         	call	_readEEPROM	;wreg free
 19812  00223A  D2DC               	goto	L53
 19813  00223C                     l10619:
 19814                           
 19815                           ; BSR set to: 0
 19816                           ;main.c: 1530: rv = readEEPROM(0x63);
 19817  00223C  6A17               	clrf	?_readEEPROM+1,c
 19818  00223E  0E63               	movlw	99
 19819  002240  6E16               	movwf	?_readEEPROM,c
 19820  002242  ECD6  F02D         	call	_readEEPROM	;wreg free
 19821  002246  D2D6               	goto	L53
 19822  002248                     l10621:
 19823                           
 19824                           ; BSR set to: 0
 19825                           ;main.c: 1535: rv = readEEPROM(0x64);
 19826  002248  6A17               	clrf	?_readEEPROM+1,c
 19827  00224A  0E64               	movlw	100
 19828  00224C  6E16               	movwf	?_readEEPROM,c
 19829  00224E  ECD6  F02D         	call	_readEEPROM	;wreg free
 19830  002252  D2D0               	goto	L53
 19831  002254                     l10623:
 19832                           
 19833                           ; BSR set to: 0
 19834                           ;main.c: 1540: rv = readEEPROM(0x65);
 19835  002254  6A17               	clrf	?_readEEPROM+1,c
 19836  002256  0E65               	movlw	101
 19837  002258  6E16               	movwf	?_readEEPROM,c
 19838  00225A  ECD6  F02D         	call	_readEEPROM	;wreg free
 19839  00225E  D2CA               	goto	L53
 19840  002260                     l10625:
 19841                           
 19842                           ; BSR set to: 0
 19843                           ;main.c: 1545: rv = readEEPROM(0x66);
 19844  002260  6A17               	clrf	?_readEEPROM+1,c
 19845  002262  0E66               	movlw	102
 19846  002264  6E16               	movwf	?_readEEPROM,c
 19847  002266  ECD6  F02D         	call	_readEEPROM	;wreg free
 19848  00226A  D2C4               	goto	L53
 19849  00226C                     l10627:
 19850                           
 19851                           ; BSR set to: 0
 19852                           ;main.c: 1555: rv = readEEPROM(0x67);
 19853  00226C  6A17               	clrf	?_readEEPROM+1,c
 19854  00226E  0E67               	movlw	103
 19855  002270  6E16               	movwf	?_readEEPROM,c
 19856  002272  ECD6  F02D         	call	_readEEPROM	;wreg free
 19857  002276  D2BE               	goto	L53
 19858  002278                     l10629:
 19859                           
 19860                           ; BSR set to: 0
 19861                           ;main.c: 1560: rv = readEEPROM(0x68);
 19862  002278  6A17               	clrf	?_readEEPROM+1,c
 19863  00227A  0E68               	movlw	104
 19864  00227C  6E16               	movwf	?_readEEPROM,c
 19865  00227E  ECD6  F02D         	call	_readEEPROM	;wreg free
 19866  002282  D2B8               	goto	L53
 19867  002284                     l10631:
 19868                           
 19869                           ; BSR set to: 0
 19870                           ;main.c: 1565: rv = readEEPROM(0x69);
 19871  002284  6A17               	clrf	?_readEEPROM+1,c
 19872  002286  0E69               	movlw	105
 19873  002288  6E16               	movwf	?_readEEPROM,c
 19874  00228A  ECD6  F02D         	call	_readEEPROM	;wreg free
 19875  00228E  D2B2               	goto	L53
 19876  002290                     l10633:
 19877                           
 19878                           ; BSR set to: 0
 19879                           ;main.c: 1570: rv = readEEPROM(0x6A);
 19880  002290  6A17               	clrf	?_readEEPROM+1,c
 19881  002292  0E6A               	movlw	106
 19882  002294  6E16               	movwf	?_readEEPROM,c
 19883  002296  ECD6  F02D         	call	_readEEPROM	;wreg free
 19884  00229A  D2AC               	goto	L53
 19885  00229C                     l10635:
 19886                           
 19887                           ; BSR set to: 0
 19888                           ;main.c: 1575: rv = readEEPROM(0x6B);
 19889  00229C  6A17               	clrf	?_readEEPROM+1,c
 19890  00229E  0E6B               	movlw	107
 19891  0022A0  6E16               	movwf	?_readEEPROM,c
 19892  0022A2  ECD6  F02D         	call	_readEEPROM	;wreg free
 19893  0022A6  D2A6               	goto	L53
 19894  0022A8                     l10637:
 19895                           
 19896                           ; BSR set to: 0
 19897                           ;main.c: 1580: rv = readEEPROM(0x6C);
 19898  0022A8  6A17               	clrf	?_readEEPROM+1,c
 19899  0022AA  0E6C               	movlw	108
 19900  0022AC  6E16               	movwf	?_readEEPROM,c
 19901  0022AE  ECD6  F02D         	call	_readEEPROM	;wreg free
 19902  0022B2  D2A0               	goto	L53
 19903  0022B4                     l10639:
 19904                           
 19905                           ; BSR set to: 0
 19906                           ;main.c: 1585: rv = readEEPROM(0x6D);
 19907  0022B4  6A17               	clrf	?_readEEPROM+1,c
 19908  0022B6  0E6D               	movlw	109
 19909  0022B8  6E16               	movwf	?_readEEPROM,c
 19910  0022BA  ECD6  F02D         	call	_readEEPROM	;wreg free
 19911  0022BE  D29A               	goto	L53
 19912  0022C0                     l10641:
 19913                           
 19914                           ; BSR set to: 0
 19915                           ;main.c: 1590: rv = readEEPROM(0x6E);
 19916  0022C0  6A17               	clrf	?_readEEPROM+1,c
 19917  0022C2  0E6E               	movlw	110
 19918  0022C4  6E16               	movwf	?_readEEPROM,c
 19919  0022C6  ECD6  F02D         	call	_readEEPROM	;wreg free
 19920  0022CA  D294               	goto	L53
 19921  0022CC                     l10643:
 19922                           
 19923                           ; BSR set to: 0
 19924                           ;main.c: 1595: rv = readEEPROM(0x6F);
 19925  0022CC  6A17               	clrf	?_readEEPROM+1,c
 19926  0022CE  0E6F               	movlw	111
 19927  0022D0  6E16               	movwf	?_readEEPROM,c
 19928  0022D2  ECD6  F02D         	call	_readEEPROM	;wreg free
 19929  0022D6  D28E               	goto	L53
 19930  0022D8                     l10645:
 19931                           
 19932                           ; BSR set to: 0
 19933                           ;main.c: 1600: rv = readEEPROM(0x70);
 19934  0022D8  6A17               	clrf	?_readEEPROM+1,c
 19935  0022DA  0E70               	movlw	112
 19936  0022DC  6E16               	movwf	?_readEEPROM,c
 19937  0022DE  ECD6  F02D         	call	_readEEPROM	;wreg free
 19938  0022E2  D288               	goto	L53
 19939  0022E4                     l10647:
 19940                           
 19941                           ; BSR set to: 0
 19942                           ;main.c: 1605: rv = readEEPROM(0x71);
 19943  0022E4  6A17               	clrf	?_readEEPROM+1,c
 19944  0022E6  0E71               	movlw	113
 19945  0022E8  6E16               	movwf	?_readEEPROM,c
 19946  0022EA  ECD6  F02D         	call	_readEEPROM	;wreg free
 19947  0022EE  D282               	goto	L53
 19948  0022F0                     l10649:
 19949                           
 19950                           ; BSR set to: 0
 19951                           ;main.c: 1610: rv = readEEPROM(0x72);
 19952  0022F0  6A17               	clrf	?_readEEPROM+1,c
 19953  0022F2  0E72               	movlw	114
 19954  0022F4  6E16               	movwf	?_readEEPROM,c
 19955  0022F6  ECD6  F02D         	call	_readEEPROM	;wreg free
 19956  0022FA  D27C               	goto	L53
 19957  0022FC                     l10651:
 19958                           
 19959                           ; BSR set to: 0
 19960                           ;main.c: 1619: rv = readEEPROM(0x73);
 19961  0022FC  6A17               	clrf	?_readEEPROM+1,c
 19962  0022FE  0E73               	movlw	115
 19963  002300  6E16               	movwf	?_readEEPROM,c
 19964  002302  ECD6  F02D         	call	_readEEPROM	;wreg free
 19965  002306  D276               	goto	L53
 19966  002308                     l10653:
 19967                           
 19968                           ; BSR set to: 0
 19969                           ;main.c: 1624: rv = readEEPROM(0x74);
 19970  002308  6A17               	clrf	?_readEEPROM+1,c
 19971  00230A  0E74               	movlw	116
 19972  00230C  6E16               	movwf	?_readEEPROM,c
 19973  00230E  ECD6  F02D         	call	_readEEPROM	;wreg free
 19974  002312  D270               	goto	L53
 19975  002314                     l10655:
 19976                           
 19977                           ; BSR set to: 0
 19978                           ;main.c: 1629: rv = readEEPROM(0x75);
 19979  002314  6A17               	clrf	?_readEEPROM+1,c
 19980  002316  0E75               	movlw	117
 19981  002318  6E16               	movwf	?_readEEPROM,c
 19982  00231A  ECD6  F02D         	call	_readEEPROM	;wreg free
 19983  00231E  D26A               	goto	L53
 19984  002320                     l10657:
 19985                           
 19986                           ; BSR set to: 0
 19987                           ;main.c: 1634: rv = readEEPROM(0x76);
 19988  002320  6A17               	clrf	?_readEEPROM+1,c
 19989  002322  0E76               	movlw	118
 19990  002324  6E16               	movwf	?_readEEPROM,c
 19991  002326  ECD6  F02D         	call	_readEEPROM	;wreg free
 19992  00232A  D264               	goto	L53
 19993  00232C                     l10659:
 19994                           
 19995                           ; BSR set to: 0
 19996                           ;main.c: 1639: rv = readEEPROM(0x77);
 19997  00232C  6A17               	clrf	?_readEEPROM+1,c
 19998  00232E  0E77               	movlw	119
 19999  002330  6E16               	movwf	?_readEEPROM,c
 20000  002332  ECD6  F02D         	call	_readEEPROM	;wreg free
 20001  002336  D25E               	goto	L53
 20002  002338                     l10661:
 20003                           
 20004                           ; BSR set to: 0
 20005                           ;main.c: 1644: rv = readEEPROM(0x78);
 20006  002338  6A17               	clrf	?_readEEPROM+1,c
 20007  00233A  0E78               	movlw	120
 20008  00233C  6E16               	movwf	?_readEEPROM,c
 20009  00233E  ECD6  F02D         	call	_readEEPROM	;wreg free
 20010  002342  D258               	goto	L53
 20011  002344                     l10663:
 20012                           
 20013                           ; BSR set to: 0
 20014                           ;main.c: 1649: rv = readEEPROM(0x79);
 20015  002344  6A17               	clrf	?_readEEPROM+1,c
 20016  002346  0E79               	movlw	121
 20017  002348  6E16               	movwf	?_readEEPROM,c
 20018  00234A  ECD6  F02D         	call	_readEEPROM	;wreg free
 20019  00234E  D252               	goto	L53
 20020  002350                     l10665:
 20021                           
 20022                           ; BSR set to: 0
 20023                           ;main.c: 1654: rv = readEEPROM(0x7A);
 20024  002350  6A17               	clrf	?_readEEPROM+1,c
 20025  002352  0E7A               	movlw	122
 20026  002354  6E16               	movwf	?_readEEPROM,c
 20027  002356  ECD6  F02D         	call	_readEEPROM	;wreg free
 20028  00235A  D24C               	goto	L53
 20029  00235C                     l10667:
 20030                           
 20031                           ; BSR set to: 0
 20032                           ;main.c: 1659: rv = readEEPROM(0x7B);
 20033  00235C  6A17               	clrf	?_readEEPROM+1,c
 20034  00235E  0E7B               	movlw	123
 20035  002360  6E16               	movwf	?_readEEPROM,c
 20036  002362  ECD6  F02D         	call	_readEEPROM	;wreg free
 20037  002366  D246               	goto	L53
 20038  002368                     l10669:
 20039                           
 20040                           ; BSR set to: 0
 20041                           ;main.c: 1664: rv = readEEPROM(0x7C);
 20042  002368  6A17               	clrf	?_readEEPROM+1,c
 20043  00236A  0E7C               	movlw	124
 20044  00236C  6E16               	movwf	?_readEEPROM,c
 20045  00236E  ECD6  F02D         	call	_readEEPROM	;wreg free
 20046  002372  D240               	goto	L53
 20047  002374                     l10671:
 20048                           
 20049                           ; BSR set to: 0
 20050                           ;main.c: 1669: rv = readEEPROM(0x7D);
 20051  002374  6A17               	clrf	?_readEEPROM+1,c
 20052  002376  0E7D               	movlw	125
 20053  002378  6E16               	movwf	?_readEEPROM,c
 20054  00237A  ECD6  F02D         	call	_readEEPROM	;wreg free
 20055  00237E  D23A               	goto	L53
 20056  002380                     l10673:
 20057                           
 20058                           ; BSR set to: 0
 20059                           ;main.c: 1674: rv = readEEPROM(0x7E);
 20060  002380  6A17               	clrf	?_readEEPROM+1,c
 20061  002382  0E7E               	movlw	126
 20062  002384  6E16               	movwf	?_readEEPROM,c
 20063  002386  ECD6  F02D         	call	_readEEPROM	;wreg free
 20064  00238A  D234               	goto	L53
 20065  00238C                     l10675:
 20066                           
 20067                           ; BSR set to: 0
 20068                           ;main.c: 1683: rv = readEEPROM(0x7F);
 20069  00238C  6A17               	clrf	?_readEEPROM+1,c
 20070  00238E  0E7F               	movlw	127
 20071  002390  6E16               	movwf	?_readEEPROM,c
 20072  002392  ECD6  F02D         	call	_readEEPROM	;wreg free
 20073  002396  D22E               	goto	L53
 20074  002398                     l10677:
 20075                           
 20076                           ; BSR set to: 0
 20077                           ;main.c: 1688: rv = readEEPROM(0x80);
 20078  002398  6A17               	clrf	?_readEEPROM+1,c
 20079  00239A  0E80               	movlw	128
 20080  00239C  6E16               	movwf	?_readEEPROM,c
 20081  00239E  ECD6  F02D         	call	_readEEPROM	;wreg free
 20082  0023A2  D228               	goto	L53
 20083  0023A4                     l10679:
 20084                           
 20085                           ; BSR set to: 0
 20086                           ;main.c: 1693: rv = readEEPROM(0x81);
 20087  0023A4  6A17               	clrf	?_readEEPROM+1,c
 20088  0023A6  0E81               	movlw	129
 20089  0023A8  6E16               	movwf	?_readEEPROM,c
 20090  0023AA  ECD6  F02D         	call	_readEEPROM	;wreg free
 20091  0023AE  D222               	goto	L53
 20092  0023B0                     l10681:
 20093                           
 20094                           ; BSR set to: 0
 20095                           ;main.c: 1698: rv = readEEPROM(0x82);
 20096  0023B0  6A17               	clrf	?_readEEPROM+1,c
 20097  0023B2  0E82               	movlw	130
 20098  0023B4  6E16               	movwf	?_readEEPROM,c
 20099  0023B6  ECD6  F02D         	call	_readEEPROM	;wreg free
 20100  0023BA  D21C               	goto	L53
 20101  0023BC                     l10683:
 20102                           
 20103                           ; BSR set to: 0
 20104                           ;main.c: 1703: rv = readEEPROM(0x83);
 20105  0023BC  6A17               	clrf	?_readEEPROM+1,c
 20106  0023BE  0E83               	movlw	131
 20107  0023C0  6E16               	movwf	?_readEEPROM,c
 20108  0023C2  ECD6  F02D         	call	_readEEPROM	;wreg free
 20109  0023C6  D216               	goto	L53
 20110  0023C8                     l10685:
 20111                           
 20112                           ; BSR set to: 0
 20113                           ;main.c: 1708: rv = readEEPROM(0x84);
 20114  0023C8  6A17               	clrf	?_readEEPROM+1,c
 20115  0023CA  0E84               	movlw	132
 20116  0023CC  6E16               	movwf	?_readEEPROM,c
 20117  0023CE  ECD6  F02D         	call	_readEEPROM	;wreg free
 20118  0023D2  D210               	goto	L53
 20119  0023D4                     l10687:
 20120                           
 20121                           ; BSR set to: 0
 20122                           ;main.c: 1713: rv = readEEPROM(0x85);
 20123  0023D4  6A17               	clrf	?_readEEPROM+1,c
 20124  0023D6  0E85               	movlw	133
 20125  0023D8  6E16               	movwf	?_readEEPROM,c
 20126  0023DA  ECD6  F02D         	call	_readEEPROM	;wreg free
 20127  0023DE  D20A               	goto	L53
 20128  0023E0                     l10689:
 20129                           
 20130                           ; BSR set to: 0
 20131                           ;main.c: 1718: rv = readEEPROM(0x86);
 20132  0023E0  6A17               	clrf	?_readEEPROM+1,c
 20133  0023E2  0E86               	movlw	134
 20134  0023E4  6E16               	movwf	?_readEEPROM,c
 20135  0023E6  ECD6  F02D         	call	_readEEPROM	;wreg free
 20136  0023EA  D204               	goto	L53
 20137  0023EC                     l10691:
 20138                           
 20139                           ; BSR set to: 0
 20140                           ;main.c: 1723: rv = readEEPROM(0x87);
 20141  0023EC  6A17               	clrf	?_readEEPROM+1,c
 20142  0023EE  0E87               	movlw	135
 20143  0023F0  6E16               	movwf	?_readEEPROM,c
 20144  0023F2  ECD6  F02D         	call	_readEEPROM	;wreg free
 20145  0023F6  D1FE               	goto	L53
 20146  0023F8                     l10693:
 20147                           
 20148                           ; BSR set to: 0
 20149                           ;main.c: 1728: rv = readEEPROM(0x88);
 20150  0023F8  6A17               	clrf	?_readEEPROM+1,c
 20151  0023FA  0E88               	movlw	136
 20152  0023FC  6E16               	movwf	?_readEEPROM,c
 20153  0023FE  ECD6  F02D         	call	_readEEPROM	;wreg free
 20154  002402  D1F8               	goto	L53
 20155  002404                     l10695:
 20156                           
 20157                           ; BSR set to: 0
 20158                           ;main.c: 1733: rv = readEEPROM(0x89);
 20159  002404  6A17               	clrf	?_readEEPROM+1,c
 20160  002406  0E89               	movlw	137
 20161  002408  6E16               	movwf	?_readEEPROM,c
 20162  00240A  ECD6  F02D         	call	_readEEPROM	;wreg free
 20163  00240E  D1F2               	goto	L53
 20164  002410                     l10697:
 20165                           
 20166                           ; BSR set to: 0
 20167                           ;main.c: 1738: rv = readEEPROM(0x8A);
 20168  002410  6A17               	clrf	?_readEEPROM+1,c
 20169  002412  0E8A               	movlw	138
 20170  002414  6E16               	movwf	?_readEEPROM,c
 20171  002416  ECD6  F02D         	call	_readEEPROM	;wreg free
 20172  00241A  D1EC               	goto	L53
 20173  00241C                     l10699:
 20174                           
 20175                           ; BSR set to: 0
 20176                           ;main.c: 1747: rv = readEEPROM(0x8B);
 20177  00241C  6A17               	clrf	?_readEEPROM+1,c
 20178  00241E  0E8B               	movlw	139
 20179  002420  6E16               	movwf	?_readEEPROM,c
 20180  002422  ECD6  F02D         	call	_readEEPROM	;wreg free
 20181  002426  D1E6               	goto	L53
 20182  002428                     l10701:
 20183                           
 20184                           ; BSR set to: 0
 20185                           ;main.c: 1752: rv = readEEPROM(0x8C);
 20186  002428  6A17               	clrf	?_readEEPROM+1,c
 20187  00242A  0E8C               	movlw	140
 20188  00242C  6E16               	movwf	?_readEEPROM,c
 20189  00242E  ECD6  F02D         	call	_readEEPROM	;wreg free
 20190  002432  D1E0               	goto	L53
 20191  002434                     l10703:
 20192                           
 20193                           ; BSR set to: 0
 20194                           ;main.c: 1757: rv = readEEPROM(0x8D);
 20195  002434  6A17               	clrf	?_readEEPROM+1,c
 20196  002436  0E8D               	movlw	141
 20197  002438  6E16               	movwf	?_readEEPROM,c
 20198  00243A  ECD6  F02D         	call	_readEEPROM	;wreg free
 20199  00243E  D1DA               	goto	L53
 20200  002440                     l10705:
 20201                           
 20202                           ; BSR set to: 0
 20203                           ;main.c: 1762: rv = readEEPROM(0x8E);
 20204  002440  6A17               	clrf	?_readEEPROM+1,c
 20205  002442  0E8E               	movlw	142
 20206  002444  6E16               	movwf	?_readEEPROM,c
 20207  002446  ECD6  F02D         	call	_readEEPROM	;wreg free
 20208  00244A  D1D4               	goto	L53
 20209  00244C                     l10707:
 20210                           
 20211                           ; BSR set to: 0
 20212                           ;main.c: 1767: rv = readEEPROM(0x8F);
 20213  00244C  6A17               	clrf	?_readEEPROM+1,c
 20214  00244E  0E8F               	movlw	143
 20215  002450  6E16               	movwf	?_readEEPROM,c
 20216  002452  ECD6  F02D         	call	_readEEPROM	;wreg free
 20217  002456  D1CE               	goto	L53
 20218  002458                     l10709:
 20219                           
 20220                           ; BSR set to: 0
 20221                           ;main.c: 1772: rv = readEEPROM(0x90);
 20222  002458  6A17               	clrf	?_readEEPROM+1,c
 20223  00245A  0E90               	movlw	144
 20224  00245C  6E16               	movwf	?_readEEPROM,c
 20225  00245E  ECD6  F02D         	call	_readEEPROM	;wreg free
 20226  002462  D1C8               	goto	L53
 20227  002464                     l10711:
 20228                           
 20229                           ; BSR set to: 0
 20230                           ;main.c: 1777: rv = readEEPROM(0x91);
 20231  002464  6A17               	clrf	?_readEEPROM+1,c
 20232  002466  0E91               	movlw	145
 20233  002468  6E16               	movwf	?_readEEPROM,c
 20234  00246A  ECD6  F02D         	call	_readEEPROM	;wreg free
 20235  00246E  D1C2               	goto	L53
 20236  002470                     l10713:
 20237                           
 20238                           ; BSR set to: 0
 20239                           ;main.c: 1782: rv = readEEPROM(0x92);
 20240  002470  6A17               	clrf	?_readEEPROM+1,c
 20241  002472  0E92               	movlw	146
 20242  002474  6E16               	movwf	?_readEEPROM,c
 20243  002476  ECD6  F02D         	call	_readEEPROM	;wreg free
 20244  00247A  D1BC               	goto	L53
 20245  00247C                     l10715:
 20246                           
 20247                           ; BSR set to: 0
 20248                           ;main.c: 1787: rv = readEEPROM(0x93);
 20249  00247C  6A17               	clrf	?_readEEPROM+1,c
 20250  00247E  0E93               	movlw	147
 20251  002480  6E16               	movwf	?_readEEPROM,c
 20252  002482  ECD6  F02D         	call	_readEEPROM	;wreg free
 20253  002486  D1B6               	goto	L53
 20254  002488                     l10717:
 20255                           
 20256                           ; BSR set to: 0
 20257                           ;main.c: 1792: rv = readEEPROM(0x94);
 20258  002488  6A17               	clrf	?_readEEPROM+1,c
 20259  00248A  0E94               	movlw	148
 20260  00248C  6E16               	movwf	?_readEEPROM,c
 20261  00248E  ECD6  F02D         	call	_readEEPROM	;wreg free
 20262  002492  D1B0               	goto	L53
 20263  002494                     l10719:
 20264                           
 20265                           ; BSR set to: 0
 20266                           ;main.c: 1797: rv = readEEPROM(0x95);
 20267  002494  6A17               	clrf	?_readEEPROM+1,c
 20268  002496  0E95               	movlw	149
 20269  002498  6E16               	movwf	?_readEEPROM,c
 20270  00249A  ECD6  F02D         	call	_readEEPROM	;wreg free
 20271  00249E  D1AA               	goto	L53
 20272  0024A0                     l10721:
 20273                           
 20274                           ; BSR set to: 0
 20275                           ;main.c: 1802: rv = readEEPROM(0x96);
 20276  0024A0  6A17               	clrf	?_readEEPROM+1,c
 20277  0024A2  0E96               	movlw	150
 20278  0024A4  6E16               	movwf	?_readEEPROM,c
 20279  0024A6  ECD6  F02D         	call	_readEEPROM	;wreg free
 20280  0024AA  D1A4               	goto	L53
 20281  0024AC                     l10723:
 20282                           
 20283                           ; BSR set to: 0
 20284                           ;main.c: 1812: rv = readEEPROM(0x97);
 20285  0024AC  6A17               	clrf	?_readEEPROM+1,c
 20286  0024AE  0E97               	movlw	151
 20287  0024B0  6E16               	movwf	?_readEEPROM,c
 20288  0024B2  ECD6  F02D         	call	_readEEPROM	;wreg free
 20289  0024B6  D19E               	goto	L53
 20290  0024B8                     l10725:
 20291                           
 20292                           ; BSR set to: 0
 20293                           ;main.c: 1817: rv = readEEPROM(0x98);
 20294  0024B8  6A17               	clrf	?_readEEPROM+1,c
 20295  0024BA  0E98               	movlw	152
 20296  0024BC  6E16               	movwf	?_readEEPROM,c
 20297  0024BE  ECD6  F02D         	call	_readEEPROM	;wreg free
 20298  0024C2  D198               	goto	L53
 20299  0024C4                     l10727:
 20300                           
 20301                           ; BSR set to: 0
 20302                           ;main.c: 1822: rv = readEEPROM(0x99);
 20303  0024C4  6A17               	clrf	?_readEEPROM+1,c
 20304  0024C6  0E99               	movlw	153
 20305  0024C8  6E16               	movwf	?_readEEPROM,c
 20306  0024CA  ECD6  F02D         	call	_readEEPROM	;wreg free
 20307  0024CE  D192               	goto	L53
 20308  0024D0                     l10729:
 20309                           
 20310                           ; BSR set to: 0
 20311                           ;main.c: 1827: rv = readEEPROM(0x9A);
 20312  0024D0  6A17               	clrf	?_readEEPROM+1,c
 20313  0024D2  0E9A               	movlw	154
 20314  0024D4  6E16               	movwf	?_readEEPROM,c
 20315  0024D6  ECD6  F02D         	call	_readEEPROM	;wreg free
 20316  0024DA  D18C               	goto	L53
 20317  0024DC                     l10731:
 20318                           
 20319                           ; BSR set to: 0
 20320                           ;main.c: 1832: rv = readEEPROM(0x9B);
 20321  0024DC  6A17               	clrf	?_readEEPROM+1,c
 20322  0024DE  0E9B               	movlw	155
 20323  0024E0  6E16               	movwf	?_readEEPROM,c
 20324  0024E2  ECD6  F02D         	call	_readEEPROM	;wreg free
 20325  0024E6  D186               	goto	L53
 20326  0024E8                     l10733:
 20327                           
 20328                           ; BSR set to: 0
 20329                           ;main.c: 1837: rv = readEEPROM(0x9C);
 20330  0024E8  6A17               	clrf	?_readEEPROM+1,c
 20331  0024EA  0E9C               	movlw	156
 20332  0024EC  6E16               	movwf	?_readEEPROM,c
 20333  0024EE  ECD6  F02D         	call	_readEEPROM	;wreg free
 20334  0024F2  D180               	goto	L53
 20335  0024F4                     l409:
 20336                           
 20337                           ; BSR set to: 0
 20338                           ;main.c: 1842: rv = 0;
 20339  0024F4  6A1C               	clrf	vscp_readAppReg@rv,c
 20340                           
 20341                           ;main.c: 1843: break;
 20342  0024F6  D17F               	goto	l10765
 20343  0024F8                     l10735:
 20344                           
 20345                           ; BSR set to: 0
 20346                           ;main.c: 1852: rv = readEEPROM(0xF2);
 20347  0024F8  6A17               	clrf	?_readEEPROM+1,c
 20348  0024FA  0EF2               	movlw	242
 20349  0024FC  6E16               	movwf	?_readEEPROM,c
 20350  0024FE  ECD6  F02D         	call	_readEEPROM	;wreg free
 20351  002502  D178               	goto	L53
 20352  002504                     l10737:
 20353                           
 20354                           ; BSR set to: 0
 20355                           ;main.c: 1857: rv = readEEPROM(0xF3);
 20356  002504  6A17               	clrf	?_readEEPROM+1,c
 20357  002506  0EF3               	movlw	243
 20358  002508  6E16               	movwf	?_readEEPROM,c
 20359  00250A  ECD6  F02D         	call	_readEEPROM	;wreg free
 20360  00250E  D172               	goto	L53
 20361  002510                     l10741:
 20362                           
 20363                           ; BSR set to: 0
 20364  002510  501B               	movf	vscp_readAppReg@reg,w,c
 20365                           
 20366                           ; Switch size 1, requested type "speed"
 20367                           ; Number of cases is 108, Range of values is 0 to 119
 20368                           ; switch strategies available:
 20369                           ; Name         Instructions Cycles
 20370                           ; simple_byte          325   163 (average)
 20371                           ;	Chosen strategy is simple_byte
 20372  002512  E101 D5A3          	bz	l10539
 20373  002516  0A01               	xorlw	1	; case 1
 20374  002518  E101 D5A6          	bz	l10541
 20375  00251C  0A03               	xorlw	3	; case 2
 20376  00251E  E101 D5A9          	bz	l10543
 20377  002522  0A01               	xorlw	1	; case 3
 20378  002524  E101 D5AC          	bz	l10545
 20379  002528  0A07               	xorlw	7	; case 4
 20380  00252A  E101 D5AF          	bz	l10547
 20381  00252E  0A01               	xorlw	1	; case 5
 20382  002530  E101 D5B2          	bz	l10549
 20383  002534  0A03               	xorlw	3	; case 6
 20384  002536  E101 D5B5          	bz	l10551
 20385  00253A  0A01               	xorlw	1	; case 7
 20386  00253C  E101 D5B8          	bz	l10553
 20387  002540  0A0F               	xorlw	15	; case 8
 20388  002542  E101 D5BB          	bz	l10555
 20389  002546  0A01               	xorlw	1	; case 9
 20390  002548  E101 D5BB          	bz	l314
 20391  00254C  0A03               	xorlw	3	; case 10
 20392  00254E  E101 D5BB          	bz	l10557
 20393  002552  0A01               	xorlw	1	; case 11
 20394  002554  E101 D5BB          	bz	l316
 20395  002558  0A07               	xorlw	7	; case 12
 20396  00255A  E101 D5BB          	bz	l10559
 20397  00255E  0A01               	xorlw	1	; case 13
 20398  002560  E101 D5BB          	bz	l318
 20399  002564  0A03               	xorlw	3	; case 14
 20400  002566  E101 D5BB          	bz	l10561
 20401  00256A  0A01               	xorlw	1	; case 15
 20402  00256C  E101 D5BB          	bz	l320
 20403  002570  0A1F               	xorlw	31	; case 16
 20404  002572  E101 D5BB          	bz	l10563
 20405  002576  0A01               	xorlw	1	; case 17
 20406  002578  E101 D5BB          	bz	l322
 20407  00257C  0A03               	xorlw	3	; case 18
 20408  00257E  E101 D5BB          	bz	l10565
 20409  002582  0A01               	xorlw	1	; case 19
 20410  002584  E101 D5BB          	bz	l324
 20411  002588  0A07               	xorlw	7	; case 20
 20412  00258A  E101 D5BB          	bz	l10567
 20413  00258E  0A01               	xorlw	1	; case 21
 20414  002590  E101 D5BE          	bz	l10569
 20415  002594  0A03               	xorlw	3	; case 22
 20416  002596  E101 D5C1          	bz	l10571
 20417  00259A  0A01               	xorlw	1	; case 23
 20418  00259C  E101 D5C4          	bz	l10573
 20419  0025A0  0A0F               	xorlw	15	; case 24
 20420  0025A2  E101 D5C7          	bz	l10575
 20421  0025A6  0A01               	xorlw	1	; case 25
 20422  0025A8  E101 D5CA          	bz	l10577
 20423  0025AC  0A3F               	xorlw	63	; case 38
 20424  0025AE  E101 D5CD          	bz	l10579
 20425  0025B2  0A01               	xorlw	1	; case 39
 20426  0025B4  E101 D5D0          	bz	l10581
 20427  0025B8  0A0F               	xorlw	15	; case 40
 20428  0025BA  E101 D5D3          	bz	l10583
 20429  0025BE  0A01               	xorlw	1	; case 41
 20430  0025C0  E101 D5D6          	bz	l10585
 20431  0025C4  0A03               	xorlw	3	; case 42
 20432  0025C6  E101 D5D9          	bz	l10587
 20433  0025CA  0A01               	xorlw	1	; case 43
 20434  0025CC  E101 D5DC          	bz	l10589
 20435  0025D0  0A07               	xorlw	7	; case 44
 20436  0025D2  E101 D5DF          	bz	l10591
 20437  0025D6  0A01               	xorlw	1	; case 45
 20438  0025D8  E101 D5E2          	bz	l10593
 20439  0025DC  0A03               	xorlw	3	; case 46
 20440  0025DE  E101 D5E5          	bz	l10595
 20441  0025E2  0A01               	xorlw	1	; case 47
 20442  0025E4  E101 D5E8          	bz	l10597
 20443  0025E8  0A1F               	xorlw	31	; case 48
 20444  0025EA  E101 D5EB          	bz	l10599
 20445  0025EE  0A01               	xorlw	1	; case 49
 20446  0025F0  E101 D5EE          	bz	l10601
 20447  0025F4  0A03               	xorlw	3	; case 50
 20448  0025F6  E101 D5F1          	bz	l10603
 20449  0025FA  0A01               	xorlw	1	; case 51
 20450  0025FC  E101 D5F4          	bz	l10605
 20451  002600  0A07               	xorlw	7	; case 52
 20452  002602  E101 D5F7          	bz	l10607
 20453  002606  0A01               	xorlw	1	; case 53
 20454  002608  E101 D5FA          	bz	l10609
 20455  00260C  0A03               	xorlw	3	; case 54
 20456  00260E  E101 D5FD          	bz	l10611
 20457  002612  0A01               	xorlw	1	; case 55
 20458  002614  E101 D600          	bz	l10613
 20459  002618  0A0F               	xorlw	15	; case 56
 20460  00261A  E101 D603          	bz	l10615
 20461  00261E  0A01               	xorlw	1	; case 57
 20462  002620  E101 D606          	bz	l10617
 20463  002624  0A03               	xorlw	3	; case 58
 20464  002626  E101 D609          	bz	l10619
 20465  00262A  0A01               	xorlw	1	; case 59
 20466  00262C  E101 D60C          	bz	l10621
 20467  002630  0A07               	xorlw	7	; case 60
 20468  002632  E101 D60F          	bz	l10623
 20469  002636  0A01               	xorlw	1	; case 61
 20470  002638  E101 D612          	bz	l10625
 20471  00263C  0A03               	xorlw	3	; case 62
 20472  00263E  E101 D615          	bz	l10627
 20473  002642  0A01               	xorlw	1	; case 63
 20474  002644  E101 D618          	bz	l10629
 20475  002648  0A7F               	xorlw	127	; case 64
 20476  00264A  E101 D61B          	bz	l10631
 20477  00264E  0A01               	xorlw	1	; case 65
 20478  002650  E101 D61E          	bz	l10633
 20479  002654  0A03               	xorlw	3	; case 66
 20480  002656  E101 D621          	bz	l10635
 20481  00265A  0A01               	xorlw	1	; case 67
 20482  00265C  E101 D624          	bz	l10637
 20483  002660  0A07               	xorlw	7	; case 68
 20484  002662  E101 D627          	bz	l10639
 20485  002666  0A01               	xorlw	1	; case 69
 20486  002668  E101 D62A          	bz	l10641
 20487  00266C  0A03               	xorlw	3	; case 70
 20488  00266E  E101 D62D          	bz	l10643
 20489  002672  0A01               	xorlw	1	; case 71
 20490  002674  E101 D630          	bz	l10645
 20491  002678  0A0F               	xorlw	15	; case 72
 20492  00267A  E101 D633          	bz	l10647
 20493  00267E  0A01               	xorlw	1	; case 73
 20494  002680  E101 D636          	bz	l10649
 20495  002684  0A03               	xorlw	3	; case 74
 20496  002686  E101 D639          	bz	l10651
 20497  00268A  0A01               	xorlw	1	; case 75
 20498  00268C  E101 D63C          	bz	l10653
 20499  002690  0A07               	xorlw	7	; case 76
 20500  002692  E101 D63F          	bz	l10655
 20501  002696  0A01               	xorlw	1	; case 77
 20502  002698  E101 D642          	bz	l10657
 20503  00269C  0A03               	xorlw	3	; case 78
 20504  00269E  E101 D645          	bz	l10659
 20505  0026A2  0A01               	xorlw	1	; case 79
 20506  0026A4  E101 D648          	bz	l10661
 20507  0026A8  0A1F               	xorlw	31	; case 80
 20508  0026AA  E101 D64B          	bz	l10663
 20509  0026AE  0A01               	xorlw	1	; case 81
 20510  0026B0  E101 D64E          	bz	l10665
 20511  0026B4  0A03               	xorlw	3	; case 82
 20512  0026B6  E101 D651          	bz	l10667
 20513  0026BA  0A01               	xorlw	1	; case 83
 20514  0026BC  E101 D654          	bz	l10669
 20515  0026C0  0A07               	xorlw	7	; case 84
 20516  0026C2  E101 D657          	bz	l10671
 20517  0026C6  0A01               	xorlw	1	; case 85
 20518  0026C8  E101 D65A          	bz	l10673
 20519  0026CC  0A03               	xorlw	3	; case 86
 20520  0026CE  E101 D65D          	bz	l10675
 20521  0026D2  0A01               	xorlw	1	; case 87
 20522  0026D4  E101 D660          	bz	l10677
 20523  0026D8  0A0F               	xorlw	15	; case 88
 20524  0026DA  E101 D663          	bz	l10679
 20525  0026DE  0A01               	xorlw	1	; case 89
 20526  0026E0  E101 D666          	bz	l10681
 20527  0026E4  0A03               	xorlw	3	; case 90
 20528  0026E6  E101 D669          	bz	l10683
 20529  0026EA  0A01               	xorlw	1	; case 91
 20530  0026EC  E101 D66C          	bz	l10685
 20531  0026F0  0A07               	xorlw	7	; case 92
 20532  0026F2  E101 D66F          	bz	l10687
 20533  0026F6  0A01               	xorlw	1	; case 93
 20534  0026F8  E101 D672          	bz	l10689
 20535  0026FC  0A03               	xorlw	3	; case 94
 20536  0026FE  E101 D675          	bz	l10691
 20537  002702  0A01               	xorlw	1	; case 95
 20538  002704  E101 D678          	bz	l10693
 20539  002708  0A3F               	xorlw	63	; case 96
 20540  00270A  E101 D67B          	bz	l10695
 20541  00270E  0A01               	xorlw	1	; case 97
 20542  002710  E101 D67E          	bz	l10697
 20543  002714  0A03               	xorlw	3	; case 98
 20544  002716  E101 D681          	bz	l10699
 20545  00271A  0A01               	xorlw	1	; case 99
 20546  00271C  E101 D684          	bz	l10701
 20547  002720  0A07               	xorlw	7	; case 100
 20548  002722  E101 D687          	bz	l10703
 20549  002726  0A01               	xorlw	1	; case 101
 20550  002728  E101 D68A          	bz	l10705
 20551  00272C  0A03               	xorlw	3	; case 102
 20552  00272E  E101 D68D          	bz	l10707
 20553  002732  0A01               	xorlw	1	; case 103
 20554  002734  E101 D690          	bz	l10709
 20555  002738  0A0F               	xorlw	15	; case 104
 20556  00273A  E101 D693          	bz	l10711
 20557  00273E  0A01               	xorlw	1	; case 105
 20558  002740  E101 D696          	bz	l10713
 20559  002744  0A03               	xorlw	3	; case 106
 20560  002746  E101 D699          	bz	l10715
 20561  00274A  0A01               	xorlw	1	; case 107
 20562  00274C  E101 D69C          	bz	l10717
 20563  002750  0A07               	xorlw	7	; case 108
 20564  002752  E101 D69F          	bz	l10719
 20565  002756  0A01               	xorlw	1	; case 109
 20566  002758  E101 D6A2          	bz	l10721
 20567  00275C  0A03               	xorlw	3	; case 110
 20568  00275E  E101 D6A5          	bz	l10723
 20569  002762  0A01               	xorlw	1	; case 111
 20570  002764  E101 D6A8          	bz	l10725
 20571  002768  0A1F               	xorlw	31	; case 112
 20572  00276A  E101 D6AB          	bz	l10727
 20573  00276E  0A01               	xorlw	1	; case 113
 20574  002770  E101 D6AE          	bz	l10729
 20575  002774  0A03               	xorlw	3	; case 114
 20576  002776  E101 D6B1          	bz	l10731
 20577  00277A  0A01               	xorlw	1	; case 115
 20578  00277C  E101 D6B4          	bz	l10733
 20579  002780  0A07               	xorlw	7	; case 116
 20580  002782  E101 D6B7          	bz	l409
 20581  002786  0A01               	xorlw	1	; case 117
 20582  002788  E101 D6B4          	bz	l409
 20583  00278C  0A03               	xorlw	3	; case 118
 20584  00278E  E101 D6B3          	bz	l10735
 20585  002792  0A01               	xorlw	1	; case 119
 20586  002794  E101 D6B6          	bz	l10737
 20587  002798  D6AD               	goto	l409
 20588  00279A                     l10743:
 20589                           
 20590                           ; BSR set to: 0
 20591                           ;main.c: 1865: else if (1 == vscp_page_select) {
 20592  00279A  0446               	decf	_vscp_page_select,w,c
 20593  00279C  1047               	iorwf	_vscp_page_select+1,w,c
 20594  00279E  E12B               	bnz	l10765
 20595                           
 20596                           ; BSR set to: 0
 20597                           ;main.c: 1868: if (reg < 72) {
 20598  0027A0  0E48               	movlw	72
 20599  0027A2  601B               	cpfslt	vscp_readAppReg@reg,c
 20600  0027A4  D009               	goto	l10749
 20601                           
 20602                           ; BSR set to: 0
 20603                           ;main.c: 1869: rv = readEEPROM(0xAA + reg ) ;
 20604  0027A6  0EAA               	movlw	170
 20605  0027A8  241B               	addwf	vscp_readAppReg@reg,w,c
 20606  0027AA  6E16               	movwf	?_readEEPROM,c
 20607  0027AC  6A17               	clrf	?_readEEPROM+1,c
 20608  0027AE  0E00               	movlw	0
 20609  0027B0  2217               	addwfc	?_readEEPROM+1,f,c
 20610  0027B2  ECD6  F02D         	call	_readEEPROM	;wreg free
 20611  0027B6  D01E               	goto	L53
 20612  0027B8                     l10749:
 20613                           
 20614                           ; BSR set to: 0
 20615                           ;main.c: 1872: else if (reg < 84) {
 20616  0027B8  0E54               	movlw	84
 20617  0027BA  601B               	cpfslt	vscp_readAppReg@reg,c
 20618  0027BC  D010               	goto	l10761
 20619                           
 20620                           ; BSR set to: 0
 20621                           ;main.c: 1874: uint8_t pos = reg - 72;
 20622  0027BE  501B               	movf	vscp_readAppReg@reg,w,c
 20623  0027C0  0FB8               	addlw	184
 20624  0027C2  6E1A               	movwf	vscp_readAppReg@pos,c
 20625                           
 20626                           ; BSR set to: 0
 20627                           ;main.c: 1875: if ( pos % 2 ) {
 20628  0027C4  A01A               	btfss	vscp_readAppReg@pos,0,c
 20629  0027C6  D002               	goto	l10757
 20630                           
 20631                           ; BSR set to: 0
 20632                           ;main.c: 1876: pos--;
 20633  0027C8  061A               	decf	vscp_readAppReg@pos,f,c
 20634                           
 20635                           ;main.c: 1877: }
 20636  0027CA  D001               	goto	l10759
 20637  0027CC                     l10757:
 20638                           
 20639                           ; BSR set to: 0
 20640                           ;main.c: 1878: else {
 20641                           ;main.c: 1879: pos++;
 20642  0027CC  2A1A               	incf	vscp_readAppReg@pos,f,c
 20643  0027CE                     l10759:
 20644                           
 20645                           ; BSR set to: 0
 20646                           ;main.c: 1880: }
 20647                           ;main.c: 1881: rv = adc[ pos ];
 20648  0027CE  0E9E               	movlw	low _adc
 20649  0027D0  241A               	addwf	vscp_readAppReg@pos,w,c
 20650  0027D2  6ED9               	movwf	fsr2l,c
 20651  0027D4  6ADA               	clrf	fsr2h,c
 20652  0027D6  0E01               	movlw	high _adc
 20653  0027D8  22DA               	addwfc	fsr2h,f,c
 20654  0027DA  50DF               	movf	indf2,w,c
 20655  0027DC  D00B               	goto	L53
 20656  0027DE                     l10761:
 20657                           
 20658                           ; BSR set to: 0
 20659                           ;main.c: 1884: else if (reg < 98) {
 20660  0027DE  0E62               	movlw	98
 20661  0027E0  601B               	cpfslt	vscp_readAppReg@reg,c
 20662  0027E2  D009               	goto	l10765
 20663                           
 20664                           ; BSR set to: 0
 20665                           ;main.c: 1885: rv = readEEPROM( 0x9E + reg - 84 ) ;
 20666  0027E4  0E4A               	movlw	74
 20667  0027E6  241B               	addwf	vscp_readAppReg@reg,w,c
 20668  0027E8  6E16               	movwf	?_readEEPROM,c
 20669  0027EA  6A17               	clrf	?_readEEPROM+1,c
 20670  0027EC  0E00               	movlw	0
 20671  0027EE  2217               	addwfc	?_readEEPROM+1,f,c
 20672  0027F0  ECD6  F02D         	call	_readEEPROM	;wreg free
 20673  0027F4                     L53:
 20674  0027F4  6E1C               	movwf	vscp_readAppReg@rv,c
 20675  0027F6                     l10765:
 20676                           
 20677                           ;main.c: 1886: }
 20678                           ;main.c: 1887: }
 20679                           ;main.c: 1889: return rv;
 20680  0027F6  501C               	movf	vscp_readAppReg@rv,w,c
 20681  0027F8  0012               	return	
 20682  0027FA                     __end_of_vscp_readAppReg:
 20683                           	opt stack 0
 20684                           tblptru	equ	0xFF8
 20685                           tblptrh	equ	0xFF7
 20686                           tblptrl	equ	0xFF6
 20687                           tablat	equ	0xFF5
 20688                           prodh	equ	0xFF4
 20689                           prodl	equ	0xFF3
 20690                           intcon	equ	0xFF2
 20691                           postinc0	equ	0xFEE
 20692                           wreg	equ	0xFE8
 20693                           indf1	equ	0xFE7
 20694                           postdec1	equ	0xFE5
 20695                           fsr1h	equ	0xFE2
 20696                           fsr1l	equ	0xFE1
 20697                           indf2	equ	0xFDF
 20698                           postinc2	equ	0xFDE
 20699                           postdec2	equ	0xFDD
 20700                           plusw2	equ	0xFDB
 20701                           fsr2h	equ	0xFDA
 20702                           fsr2l	equ	0xFD9
 20703                           status	equ	0xFD8
 20704                           
 20705 ;; *************** function _interrupt_at_low_vector *****************
 20706 ;; Defined at:
 20707 ;;		line 128 in file "../main.c"
 20708 ;; Parameters:    Size  Location     Type
 20709 ;;		None
 20710 ;; Auto vars:     Size  Location     Type
 20711 ;;		None
 20712 ;; Return value:  Size  Location     Type
 20713 ;;		None               void
 20714 ;; Registers used:
 20715 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20716 ;; Tracked objects:
 20717 ;;		On entry : 0/0
 20718 ;;		On exit  : 0/0
 20719 ;;		Unchanged: 0/0
 20720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20721 ;;      Params:         0       0       0       0       0       0       0
 20722 ;;      Locals:         0       0       0       0       0       0       0
 20723 ;;      Temps:          9       0       0       0       0       0       0
 20724 ;;      Totals:         9       0       0       0       0       0       0
 20725 ;;Total ram usage:        9 bytes
 20726 ;; Hardware stack levels used:    1
 20727 ;; Hardware stack levels required when called:    1
 20728 ;; This function calls:
 20729 ;;		i1_ConvertADC
 20730 ;;		i1_WriteTimer0
 20731 ;; This function is called by:
 20732 ;;		Interrupt level 1
 20733 ;; This function uses a non-reentrant model
 20734 ;;
 20735                           
 20736                           	psect	intcodelo
 20737  000818                     __pintcodelo:
 20738                           	opt stack 0
 20739  000818                     _interrupt_at_low_vector:
 20740                           	opt stack 22
 20741                           
 20742                           ;incstack = 0
 20743  000818  CFD8 F007          	movff	status,??_interrupt_at_low_vector+2
 20744  00081C  CFE8 F008          	movff	wreg,??_interrupt_at_low_vector+3
 20745  000820  CFE0 F009          	movff	bsr,??_interrupt_at_low_vector+4
 20746  000824  CFD9 F00A          	movff	fsr2l,??_interrupt_at_low_vector+5
 20747  000828  CFDA F00B          	movff	fsr2h,??_interrupt_at_low_vector+6
 20748  00082C  CFF3 F00C          	movff	prodl,??_interrupt_at_low_vector+7
 20749  000830  CFF4 F00D          	movff	prodh,??_interrupt_at_low_vector+8
 20750  000834                     
 20751                           ;main.c: 130: if (INTCONbits.TMR0IF) {
 20752  000834  A4F2               	btfss	intcon,2,c	;volatile
 20753  000836  D001               	goto	i1u716_21
 20754  000838  D001               	goto	i1u716_20
 20755  00083A                     i1u716_21:
 20756  00083A  D047               	goto	i1l9237
 20757  00083C                     i1u716_20:
 20758  00083C                     
 20759                           ;main.c: 133: WriteTimer0(0xfb1d);
 20760  00083C  0EFB               	movlw	251
 20761  00083E  6E02               	movwf	?i1_WriteTimer0+1,c
 20762  000840  0E1D               	movlw	29
 20763  000842  6E01               	movwf	?i1_WriteTimer0,c
 20764  000844  ECF2  F02D         	call	i1_WriteTimer0	;wreg free
 20765  000848                     
 20766                           ;main.c: 135: vscp_timer++;
 20767  000848  0101               	movlb	1	; () banked
 20768  00084A  4B1E               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 20769  00084C  2B1F               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 20770  00084E                     
 20771                           ; BSR set to: 1
 20772                           ;main.c: 136: vscp_configtimer++;
 20773  00084E  4B1C               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 20774  000850  2B1D               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 20775  000852                     
 20776                           ; BSR set to: 1
 20777                           ;main.c: 137: measurement_clock++;
 20778  000852  0E01               	movlw	1
 20779  000854  2712               	addwf	_measurement_clock& (0+255),f,b	;volatile
 20780  000856  0E00               	movlw	0
 20781  000858  2313               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 20782  00085A  0E00               	movlw	0
 20783  00085C  2314               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 20784  00085E  0E00               	movlw	0
 20785  000860  2315               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 20786  000862                     
 20787                           ; BSR set to: 1
 20788                           ;main.c: 138: timeout_clock++;
 20789  000862  0E01               	movlw	1
 20790  000864  2716               	addwf	_timeout_clock& (0+255),f,b	;volatile
 20791  000866  0E00               	movlw	0
 20792  000868  2317               	addwfc	(_timeout_clock+1)& (0+255),f,b	;volatile
 20793  00086A  0E00               	movlw	0
 20794  00086C  2318               	addwfc	(_timeout_clock+2)& (0+255),f,b	;volatile
 20795  00086E  0E00               	movlw	0
 20796  000870  2319               	addwfc	(_timeout_clock+3)& (0+255),f,b	;volatile
 20797  000872                     
 20798                           ; BSR set to: 1
 20799                           ;main.c: 139: sendTimer++;
 20800  000872  4B1A               	infsnz	_sendTimer& (0+255),f,b	;volatile
 20801  000874  2B1B               	incf	(_sendTimer+1)& (0+255),f,b	;volatile
 20802  000876                     
 20803                           ; BSR set to: 1
 20804                           ;main.c: 142: if (!(PORTC & 0x01)) {
 20805  000876  B082               	btfsc	3970,0,c	;volatile
 20806  000878  D001               	goto	i1u717_21
 20807  00087A  D001               	goto	i1u717_20
 20808  00087C                     i1u717_21:
 20809  00087C  D003               	goto	i1l140
 20810  00087E                     i1u717_20:
 20811  00087E                     
 20812                           ; BSR set to: 1
 20813                           ;main.c: 144: vscp_initbtncnt++;
 20814  00087E  0100               	movlb	0	; () banked
 20815  000880  2BBA               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 20816                           
 20817                           ;main.c: 145: }
 20818  000882  D002               	goto	i1l9211
 20819  000884                     i1l140:
 20820                           
 20821                           ; BSR set to: 1
 20822                           ;main.c: 146: else {
 20823                           ;main.c: 147: vscp_initbtncnt = 0;
 20824  000884  0100               	movlb	0	; () banked
 20825  000886  6BBA               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 20826  000888                     i1l9211:
 20827                           
 20828                           ; BSR set to: 0
 20829                           ;main.c: 148: }
 20830                           ;main.c: 151: vscp_statuscnt++;
 20831  000888  2A52               	incf	_vscp_statuscnt,f,c	;volatile
 20832  00088A                     
 20833                           ; BSR set to: 0
 20834                           ;main.c: 152: if ( ( 0x02 ==
 20835                           ;main.c: 153: vscp_initledfunc) && (vscp_statuscnt > 100)) {
 20836  00088A  504D               	movf	_vscp_initledfunc,w,c
 20837  00088C  0A02               	xorlw	2
 20838  00088E  A4D8               	btfss	status,2,c
 20839  000890  D001               	goto	i1u718_21
 20840  000892  D001               	goto	i1u718_20
 20841  000894                     i1u718_21:
 20842  000894  D00E               	goto	i1l9225
 20843  000896                     i1u718_20:
 20844  000896                     
 20845                           ; BSR set to: 0
 20846  000896  0E64               	movlw	100
 20847  000898  6452               	cpfsgt	_vscp_statuscnt,c	;volatile
 20848  00089A  D001               	goto	i1u719_21
 20849  00089C  D001               	goto	i1u719_20
 20850  00089E                     i1u719_21:
 20851  00089E  D009               	goto	i1l9225
 20852  0008A0                     i1u719_20:
 20853  0008A0                     
 20854                           ; BSR set to: 0
 20855                           ;main.c: 154: if ( PORTC & 0x02 ) {
 20856  0008A0  A282               	btfss	3970,1,c	;volatile
 20857  0008A2  D001               	goto	i1u720_21
 20858  0008A4  D001               	goto	i1u720_20
 20859  0008A6                     i1u720_21:
 20860  0008A6  D002               	goto	i1l9221
 20861  0008A8                     i1u720_20:
 20862  0008A8                     i1l9219:
 20863                           
 20864                           ; BSR set to: 0
 20865                           ;main.c: 155: PORTC &= ~0x02;
 20866  0008A8  9282               	bcf	3970,1,c	;volatile
 20867                           
 20868                           ;main.c: 156: }
 20869  0008AA  D001               	goto	i1l9223
 20870  0008AC                     i1l9221:
 20871                           
 20872                           ; BSR set to: 0
 20873                           ;main.c: 157: else {
 20874                           ;main.c: 158: PORTC |= 0x02;
 20875  0008AC  8282               	bsf	3970,1,c	;volatile
 20876  0008AE                     i1l9223:
 20877                           
 20878                           ; BSR set to: 0
 20879                           ;main.c: 159: }
 20880                           ;main.c: 160: vscp_statuscnt = 0;
 20881  0008AE  6A52               	clrf	_vscp_statuscnt,c	;volatile
 20882                           
 20883                           ;main.c: 161: }
 20884  0008B0  D00B               	goto	i1l9235
 20885  0008B2                     i1l9225:
 20886                           
 20887                           ; BSR set to: 0
 20888                           ;main.c: 162: else if (0x01 == vscp_initledfunc) {
 20889  0008B2  044D               	decf	_vscp_initledfunc,w,c
 20890  0008B4  A4D8               	btfss	status,2,c
 20891  0008B6  D001               	goto	i1u721_21
 20892  0008B8  D001               	goto	i1u721_20
 20893  0008BA                     i1u721_21:
 20894  0008BA  D001               	goto	i1l146
 20895  0008BC                     i1u721_20:
 20896  0008BC  D7F7               	goto	i1l9221
 20897  0008BE                     i1l146:
 20898                           
 20899                           ; BSR set to: 0
 20900                           ;main.c: 166: else if (0x00 == vscp_initledfunc) {
 20901  0008BE  664D               	tstfsz	_vscp_initledfunc,c
 20902  0008C0  D001               	goto	i1u722_21
 20903  0008C2  D001               	goto	i1u722_20
 20904  0008C4                     i1u722_21:
 20905  0008C4  D001               	goto	i1l9235
 20906  0008C6                     i1u722_20:
 20907  0008C6  D7F0               	goto	i1l9219
 20908  0008C8                     i1l9235:
 20909                           
 20910                           ; BSR set to: 0
 20911                           ;main.c: 169: }
 20912                           ;main.c: 171: INTCONbits.TMR0IF = 0;
 20913  0008C8  94F2               	bcf	intcon,2,c	;volatile
 20914  0008CA                     i1l9237:
 20915                           
 20916                           ;main.c: 173: }
 20917                           ;main.c: 176: if ( PIR1bits.ADIF ) {
 20918  0008CA  AC9E               	btfss	3998,6,c	;volatile
 20919  0008CC  D001               	goto	i1u723_21
 20920  0008CE  D001               	goto	i1u723_20
 20921  0008D0                     i1u723_21:
 20922  0008D0  D0E5               	goto	i1l166
 20923  0008D2                     i1u723_20:
 20924  0008D2  D0C4               	goto	i1l9299
 20925  0008D4                     i1l9241:
 20926                           
 20927                           ;main.c: 182: adc[(12 * adc_series_counter) + 0] = ADRESH;
 20928  0008D4  5049               	movf	_adc_series_counter,w,c
 20929  0008D6  0D0C               	mullw	12
 20930  0008D8  0E9E               	movlw	low _adc
 20931  0008DA  24F3               	addwf	prodl,w,c
 20932  0008DC  6ED9               	movwf	fsr2l,c
 20933  0008DE  0E01               	movlw	high _adc
 20934  0008E0  20F4               	addwfc	prodh,w,c
 20935  0008E2  6EDA               	movwf	fsr2h,c
 20936  0008E4  CFC4 FFDF          	movff	4036,indf2	;volatile
 20937                           
 20938                           ;main.c: 183: adc[(12 * adc_series_counter) + 1] = ADRESL;
 20939  0008E8  5049               	movf	_adc_series_counter,w,c
 20940  0008EA  0D0C               	mullw	12
 20941  0008EC  0E9F               	movlw	low (_adc+1)
 20942  0008EE  24F3               	addwf	prodl,w,c
 20943  0008F0  6ED9               	movwf	fsr2l,c
 20944  0008F2  0E01               	movlw	high (_adc+1)
 20945  0008F4  20F4               	addwfc	prodh,w,c
 20946  0008F6  6EDA               	movwf	fsr2h,c
 20947  0008F8  CFC3 FFDF          	movff	4035,indf2	;volatile
 20948  0008FC                     
 20949                           ;main.c: 185: ADCON0 = (2<<2) + 1;
 20950  0008FC  0E09               	movlw	9
 20951  0008FE  6EC2               	movwf	4034,c	;volatile
 20952  000900                     
 20953                           ;main.c: 189: if ((80 - 1) == adc_series_counter) {
 20954  000900  5049               	movf	_adc_series_counter,w,c
 20955  000902  0A4F               	xorlw	79
 20956  000904  A4D8               	btfss	status,2,c
 20957  000906  D001               	goto	i1u724_21
 20958  000908  D001               	goto	i1u724_20
 20959  00090A                     i1u724_21:
 20960  00090A  D0C5               	goto	i1l9301
 20961  00090C                     i1u724_20:
 20962  00090C                     
 20963                           ;main.c: 190: adc_conversion_flags |= 1;
 20964  00090C  0100               	movlb	0	; () banked
 20965  00090E  81B6               	bsf	_adc_conversion_flags& (0+255),0,b
 20966  000910  D0C2               	goto	i1l9301
 20967  000912                     i1l9249:
 20968                           
 20969                           ;main.c: 196: adc[(12 * adc_series_counter) + 2] = ADRESH;
 20970  000912  5049               	movf	_adc_series_counter,w,c
 20971  000914  0D0C               	mullw	12
 20972  000916  0EA0               	movlw	low (_adc+2)
 20973  000918  24F3               	addwf	prodl,w,c
 20974  00091A  6ED9               	movwf	fsr2l,c
 20975  00091C  0E01               	movlw	high (_adc+2)
 20976  00091E  20F4               	addwfc	prodh,w,c
 20977  000920  6EDA               	movwf	fsr2h,c
 20978  000922  CFC4 FFDF          	movff	4036,indf2	;volatile
 20979                           
 20980                           ;main.c: 197: adc[(12 * adc_series_counter) + 3] = ADRESL;
 20981  000926  5049               	movf	_adc_series_counter,w,c
 20982  000928  0D0C               	mullw	12
 20983  00092A  0EA1               	movlw	low (_adc+3)
 20984  00092C  24F3               	addwf	prodl,w,c
 20985  00092E  6ED9               	movwf	fsr2l,c
 20986  000930  0E01               	movlw	high (_adc+3)
 20987  000932  20F4               	addwfc	prodh,w,c
 20988  000934  6EDA               	movwf	fsr2h,c
 20989  000936  CFC3 FFDF          	movff	4035,indf2	;volatile
 20990  00093A                     
 20991                           ;main.c: 200: ADCON0 = (1<<2) + 1;
 20992  00093A  0E05               	movlw	5
 20993  00093C  6EC2               	movwf	4034,c	;volatile
 20994  00093E                     
 20995                           ;main.c: 204: if ((80 - 1) == adc_series_counter) {
 20996  00093E  5049               	movf	_adc_series_counter,w,c
 20997  000940  0A4F               	xorlw	79
 20998  000942  A4D8               	btfss	status,2,c
 20999  000944  D001               	goto	i1u725_21
 21000  000946  D001               	goto	i1u725_20
 21001  000948                     i1u725_21:
 21002  000948  D0A6               	goto	i1l9301
 21003  00094A                     i1u725_20:
 21004  00094A                     
 21005                           ;main.c: 205: adc_conversion_flags |= 1 << 1;
 21006  00094A  0100               	movlb	0	; () banked
 21007  00094C  83B6               	bsf	_adc_conversion_flags& (0+255),1,b
 21008  00094E  D0A3               	goto	i1l9301
 21009  000950                     i1l9257:
 21010                           
 21011                           ;main.c: 211: adc[(12 * adc_series_counter) + 4] = ADRESH;
 21012  000950  5049               	movf	_adc_series_counter,w,c
 21013  000952  0D0C               	mullw	12
 21014  000954  0EA2               	movlw	low (_adc+4)
 21015  000956  24F3               	addwf	prodl,w,c
 21016  000958  6ED9               	movwf	fsr2l,c
 21017  00095A  0E01               	movlw	high (_adc+4)
 21018  00095C  20F4               	addwfc	prodh,w,c
 21019  00095E  6EDA               	movwf	fsr2h,c
 21020  000960  CFC4 FFDF          	movff	4036,indf2	;volatile
 21021                           
 21022                           ;main.c: 212: adc[(12 * adc_series_counter) + 5] = ADRESL;
 21023  000964  5049               	movf	_adc_series_counter,w,c
 21024  000966  0D0C               	mullw	12
 21025  000968  0EA3               	movlw	low (_adc+5)
 21026  00096A  24F3               	addwf	prodl,w,c
 21027  00096C  6ED9               	movwf	fsr2l,c
 21028  00096E  0E01               	movlw	high (_adc+5)
 21029  000970  20F4               	addwfc	prodh,w,c
 21030  000972  6EDA               	movwf	fsr2h,c
 21031  000974  CFC3 FFDF          	movff	4035,indf2	;volatile
 21032  000978                     
 21033                           ;main.c: 215: ADCON0 = (0<<2) + 1;
 21034  000978  0E01               	movlw	1
 21035  00097A  6EC2               	movwf	4034,c	;volatile
 21036  00097C                     
 21037                           ;main.c: 219: if ((80 - 1) == adc_series_counter) {
 21038  00097C  5049               	movf	_adc_series_counter,w,c
 21039  00097E  0A4F               	xorlw	79
 21040  000980  A4D8               	btfss	status,2,c
 21041  000982  D001               	goto	i1u726_21
 21042  000984  D001               	goto	i1u726_20
 21043  000986                     i1u726_21:
 21044  000986  D087               	goto	i1l9301
 21045  000988                     i1u726_20:
 21046  000988                     
 21047                           ;main.c: 220: adc_conversion_flags |= 1 << 2;
 21048  000988  0100               	movlb	0	; () banked
 21049  00098A  85B6               	bsf	_adc_conversion_flags& (0+255),2,b
 21050  00098C  D084               	goto	i1l9301
 21051  00098E                     i1l9265:
 21052                           
 21053                           ;main.c: 226: adc[(12 * adc_series_counter) + 6] = ADRESH;
 21054  00098E  5049               	movf	_adc_series_counter,w,c
 21055  000990  0D0C               	mullw	12
 21056  000992  0EA4               	movlw	low (_adc+6)
 21057  000994  24F3               	addwf	prodl,w,c
 21058  000996  6ED9               	movwf	fsr2l,c
 21059  000998  0E01               	movlw	high (_adc+6)
 21060  00099A  20F4               	addwfc	prodh,w,c
 21061  00099C  6EDA               	movwf	fsr2h,c
 21062  00099E  CFC4 FFDF          	movff	4036,indf2	;volatile
 21063                           
 21064                           ;main.c: 227: adc[(12 * adc_series_counter) + 7] = ADRESL;
 21065  0009A2  5049               	movf	_adc_series_counter,w,c
 21066  0009A4  0D0C               	mullw	12
 21067  0009A6  0EA5               	movlw	low (_adc+7)
 21068  0009A8  24F3               	addwf	prodl,w,c
 21069  0009AA  6ED9               	movwf	fsr2l,c
 21070  0009AC  0E01               	movlw	high (_adc+7)
 21071  0009AE  20F4               	addwfc	prodh,w,c
 21072  0009B0  6EDA               	movwf	fsr2h,c
 21073  0009B2  CFC3 FFDF          	movff	4035,indf2	;volatile
 21074  0009B6                     
 21075                           ;main.c: 229: ADCON0 = (9<<2) + 1;
 21076  0009B6  0E25               	movlw	37
 21077  0009B8  6EC2               	movwf	4034,c	;volatile
 21078  0009BA                     
 21079                           ;main.c: 233: if ((80 - 1) == adc_series_counter) {
 21080  0009BA  5049               	movf	_adc_series_counter,w,c
 21081  0009BC  0A4F               	xorlw	79
 21082  0009BE  A4D8               	btfss	status,2,c
 21083  0009C0  D001               	goto	i1u727_21
 21084  0009C2  D001               	goto	i1u727_20
 21085  0009C4                     i1u727_21:
 21086  0009C4  D068               	goto	i1l9301
 21087  0009C6                     i1u727_20:
 21088  0009C6                     
 21089                           ;main.c: 234: adc_conversion_flags |= 1 << 3;
 21090  0009C6  0100               	movlb	0	; () banked
 21091  0009C8  87B6               	bsf	_adc_conversion_flags& (0+255),3,b
 21092  0009CA  D065               	goto	i1l9301
 21093  0009CC                     i1l9273:
 21094                           
 21095                           ;main.c: 240: adc[(12 * adc_series_counter) + 8] = ADRESH;
 21096  0009CC  5049               	movf	_adc_series_counter,w,c
 21097  0009CE  0D0C               	mullw	12
 21098  0009D0  0EA6               	movlw	low (_adc+8)
 21099  0009D2  24F3               	addwf	prodl,w,c
 21100  0009D4  6ED9               	movwf	fsr2l,c
 21101  0009D6  0E01               	movlw	high (_adc+8)
 21102  0009D8  20F4               	addwfc	prodh,w,c
 21103  0009DA  6EDA               	movwf	fsr2h,c
 21104  0009DC  CFC4 FFDF          	movff	4036,indf2	;volatile
 21105                           
 21106                           ;main.c: 241: adc[(12 * adc_series_counter) + 9] = ADRESL;
 21107  0009E0  5049               	movf	_adc_series_counter,w,c
 21108  0009E2  0D0C               	mullw	12
 21109  0009E4  0EA7               	movlw	low (_adc+9)
 21110  0009E6  24F3               	addwf	prodl,w,c
 21111  0009E8  6ED9               	movwf	fsr2l,c
 21112  0009EA  0E01               	movlw	high (_adc+9)
 21113  0009EC  20F4               	addwfc	prodh,w,c
 21114  0009EE  6EDA               	movwf	fsr2h,c
 21115  0009F0  CFC3 FFDF          	movff	4035,indf2	;volatile
 21116  0009F4                     
 21117                           ;main.c: 243: ADCON0 = (8<<2) + 1;
 21118  0009F4  0E21               	movlw	33
 21119  0009F6  6EC2               	movwf	4034,c	;volatile
 21120  0009F8                     
 21121                           ;main.c: 247: if ((80 - 1) == adc_series_counter) {
 21122  0009F8  5049               	movf	_adc_series_counter,w,c
 21123  0009FA  0A4F               	xorlw	79
 21124  0009FC  A4D8               	btfss	status,2,c
 21125  0009FE  D001               	goto	i1u728_21
 21126  000A00  D001               	goto	i1u728_20
 21127  000A02                     i1u728_21:
 21128  000A02  D049               	goto	i1l9301
 21129  000A04                     i1u728_20:
 21130  000A04                     
 21131                           ;main.c: 248: adc_conversion_flags |= 1 << 4;
 21132  000A04  0100               	movlb	0	; () banked
 21133  000A06  89B6               	bsf	_adc_conversion_flags& (0+255),4,b
 21134  000A08  D046               	goto	i1l9301
 21135  000A0A                     i1l9281:
 21136                           
 21137                           ;main.c: 254: adc[(12 * adc_series_counter) + 10] = ADRESH;
 21138  000A0A  5049               	movf	_adc_series_counter,w,c
 21139  000A0C  0D0C               	mullw	12
 21140  000A0E  0EA8               	movlw	low (_adc+10)
 21141  000A10  24F3               	addwf	prodl,w,c
 21142  000A12  6ED9               	movwf	fsr2l,c
 21143  000A14  0E01               	movlw	high (_adc+10)
 21144  000A16  20F4               	addwfc	prodh,w,c
 21145  000A18  6EDA               	movwf	fsr2h,c
 21146  000A1A  CFC4 FFDF          	movff	4036,indf2	;volatile
 21147                           
 21148                           ;main.c: 255: adc[(12 * adc_series_counter) + 11] = ADRESL;
 21149  000A1E  5049               	movf	_adc_series_counter,w,c
 21150  000A20  0D0C               	mullw	12
 21151  000A22  0EA9               	movlw	low (_adc+11)
 21152  000A24  24F3               	addwf	prodl,w,c
 21153  000A26  6ED9               	movwf	fsr2l,c
 21154  000A28  0E01               	movlw	high (_adc+11)
 21155  000A2A  20F4               	addwfc	prodh,w,c
 21156  000A2C  6EDA               	movwf	fsr2h,c
 21157  000A2E  CFC3 FFDF          	movff	4035,indf2	;volatile
 21158  000A32                     
 21159                           ;main.c: 257: ADCON0 = (10<<2) + 1;
 21160  000A32  0E29               	movlw	41
 21161  000A34  6EC2               	movwf	4034,c	;volatile
 21162  000A36                     
 21163                           ;main.c: 261: if ((80 - 1) == adc_series_counter) {
 21164  000A36  5049               	movf	_adc_series_counter,w,c
 21165  000A38  0A4F               	xorlw	79
 21166  000A3A  A4D8               	btfss	status,2,c
 21167  000A3C  D001               	goto	i1u729_21
 21168  000A3E  D001               	goto	i1u729_20
 21169  000A40                     i1u729_21:
 21170  000A40  D002               	goto	i1l163
 21171  000A42                     i1u729_20:
 21172  000A42                     
 21173                           ;main.c: 262: adc_conversion_flags |= 1 << 5;
 21174  000A42  0100               	movlb	0	; () banked
 21175  000A44  8BB6               	bsf	_adc_conversion_flags& (0+255),5,b
 21176  000A46                     i1l163:
 21177                           
 21178                           ;main.c: 263: }
 21179                           ;main.c: 266: adc_series_counter++;
 21180  000A46  2A49               	incf	_adc_series_counter,f,c
 21181  000A48                     
 21182                           ;main.c: 267: if (adc_series_counter >= 80) {
 21183  000A48  0E4F               	movlw	79
 21184  000A4A  6449               	cpfsgt	_adc_series_counter,c
 21185  000A4C  D001               	goto	i1u730_21
 21186  000A4E  D001               	goto	i1u730_20
 21187  000A50                     i1u730_21:
 21188  000A50  D022               	goto	i1l9301
 21189  000A52                     i1u730_20:
 21190  000A52                     i1l9291:
 21191                           
 21192                           ;main.c: 268: adc_series_counter = 0;
 21193  000A52  6A49               	clrf	_adc_series_counter,c
 21194  000A54  D020               	goto	i1l9301
 21195  000A56                     i1l9293:
 21196                           
 21197                           ;main.c: 274: ADCON0 = (10<<2) + 1;
 21198  000A56  0E29               	movlw	41
 21199  000A58  6EC2               	movwf	4034,c	;volatile
 21200  000A5A  D7FB               	goto	i1l9291
 21201  000A5C                     i1l9299:
 21202  000A5C  50C2               	movf	4034,w,c	;volatile
 21203  000A5E  0B3C               	andlw	60
 21204  000A60  6E05               	movwf	??_interrupt_at_low_vector& (0+255),c
 21205  000A62  6A06               	clrf	(??_interrupt_at_low_vector+1)& (0+255),c
 21206                           
 21207                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21208                           ; Switch size 1, requested type "speed"
 21209                           ; Number of cases is 1, Range of values is 0 to 0
 21210                           ; switch strategies available:
 21211                           ; Name         Instructions Cycles
 21212                           ; simple_byte            4     3 (average)
 21213                           ;	Chosen strategy is simple_byte
 21214  000A64  5006               	movf	??_interrupt_at_low_vector+1,w,c
 21215  000A66  0A00               	xorlw	0	; case 0
 21216  000A68  B4D8               	btfsc	status,2,c
 21217  000A6A  D001               	goto	i1l12093
 21218  000A6C  D7F4               	goto	i1l9293
 21219  000A6E                     i1l12093:
 21220                           
 21221                           ; Switch size 1, requested type "speed"
 21222                           ; Number of cases is 6, Range of values is 0 to 40
 21223                           ; switch strategies available:
 21224                           ; Name         Instructions Cycles
 21225                           ; simple_byte           19    10 (average)
 21226                           ;	Chosen strategy is simple_byte
 21227  000A6E  5005               	movf	??_interrupt_at_low_vector,w,c
 21228  000A70  0A00               	xorlw	0	; case 0
 21229  000A72  B4D8               	btfsc	status,2,c
 21230  000A74  D78C               	goto	i1l9265
 21231  000A76  0A04               	xorlw	4	; case 4
 21232  000A78  B4D8               	btfsc	status,2,c
 21233  000A7A  D76A               	goto	i1l9257
 21234  000A7C  0A0C               	xorlw	12	; case 8
 21235  000A7E  B4D8               	btfsc	status,2,c
 21236  000A80  D748               	goto	i1l9249
 21237  000A82  0A28               	xorlw	40	; case 32
 21238  000A84  B4D8               	btfsc	status,2,c
 21239  000A86  D7C1               	goto	i1l9281
 21240  000A88  0A04               	xorlw	4	; case 36
 21241  000A8A  B4D8               	btfsc	status,2,c
 21242  000A8C  D79F               	goto	i1l9273
 21243  000A8E  0A0C               	xorlw	12	; case 40
 21244  000A90  B4D8               	btfsc	status,2,c
 21245  000A92  D720               	goto	i1l9241
 21246  000A94  D7E0               	goto	i1l9293
 21247  000A96                     i1l9301:
 21248                           
 21249                           ;main.c: 280: ConvertADC();
 21250  000A96  EC1E  F02E         	call	i1_ConvertADC	;wreg free
 21251  000A9A                     
 21252                           ;main.c: 282: PIR1bits.ADIF = 0;
 21253  000A9A  9C9E               	bcf	3998,6,c	;volatile
 21254  000A9C                     i1l166:
 21255  000A9C  C00D  FFF4         	movff	??_interrupt_at_low_vector+8,prodh
 21256  000AA0  C00C  FFF3         	movff	??_interrupt_at_low_vector+7,prodl
 21257  000AA4  C00B  FFDA         	movff	??_interrupt_at_low_vector+6,fsr2h
 21258  000AA8  C00A  FFD9         	movff	??_interrupt_at_low_vector+5,fsr2l
 21259  000AAC  C009  FFE0         	movff	??_interrupt_at_low_vector+4,bsr
 21260  000AB0  C008  FFE8         	movff	??_interrupt_at_low_vector+3,wreg
 21261  000AB4  C007  FFD8         	movff	??_interrupt_at_low_vector+2,status
 21262  000AB8  0010               	retfie	
 21263  000ABA                     __end_of_interrupt_at_low_vector:
 21264                           	opt stack 0
 21265                           tblptru	equ	0xFF8
 21266                           tblptrh	equ	0xFF7
 21267                           tblptrl	equ	0xFF6
 21268                           tablat	equ	0xFF5
 21269                           prodh	equ	0xFF4
 21270                           prodl	equ	0xFF3
 21271                           intcon	equ	0xFF2
 21272                           postinc0	equ	0xFEE
 21273                           wreg	equ	0xFE8
 21274                           indf1	equ	0xFE7
 21275                           postdec1	equ	0xFE5
 21276                           fsr1h	equ	0xFE2
 21277                           fsr1l	equ	0xFE1
 21278                           bsr	equ	0xFE0
 21279                           indf2	equ	0xFDF
 21280                           postinc2	equ	0xFDE
 21281                           postdec2	equ	0xFDD
 21282                           plusw2	equ	0xFDB
 21283                           fsr2h	equ	0xFDA
 21284                           fsr2l	equ	0xFD9
 21285                           status	equ	0xFD8
 21286                           
 21287 ;; *************** function i1_WriteTimer0 *****************
 21288 ;; Defined at:
 21289 ;;		line 17 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/Timers/t0write.c"
 21290 ;; Parameters:    Size  Location     Type
 21291 ;;  timer0          2    0[COMRAM] unsigned int 
 21292 ;; Auto vars:     Size  Location     Type
 21293 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 21294 ;; Return value:  Size  Location     Type
 21295 ;;		None               void
 21296 ;; Registers used:
 21297 ;;		None
 21298 ;; Tracked objects:
 21299 ;;		On entry : 0/0
 21300 ;;		On exit  : 0/0
 21301 ;;		Unchanged: 0/0
 21302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21303 ;;      Params:         2       0       0       0       0       0       0
 21304 ;;      Locals:         2       0       0       0       0       0       0
 21305 ;;      Temps:          0       0       0       0       0       0       0
 21306 ;;      Totals:         4       0       0       0       0       0       0
 21307 ;;Total ram usage:        4 bytes
 21308 ;; Hardware stack levels used:    1
 21309 ;; This function calls:
 21310 ;;		Nothing
 21311 ;; This function is called by:
 21312 ;;		_interrupt_at_low_vector
 21313 ;; This function uses a non-reentrant model
 21314 ;;
 21315                           
 21316                           	psect	text100
 21317  005BE4                     __ptext100:
 21318                           	opt stack 0
 21319  005BE4                     i1_WriteTimer0:
 21320                           	opt stack 22
 21321                           
 21322                           ;incstack = 0
 21323                           ;incstack = 0
 21324  005BE4  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 21325  005BE8  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 21326  005BEC  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 21327  005BF0  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 21328  005BF4  0012               	return	
 21329  005BF6                     __end_ofi1_WriteTimer0:
 21330                           	opt stack 0
 21331                           tblptru	equ	0xFF8
 21332                           tblptrh	equ	0xFF7
 21333                           tblptrl	equ	0xFF6
 21334                           tablat	equ	0xFF5
 21335                           prodh	equ	0xFF4
 21336                           prodl	equ	0xFF3
 21337                           intcon	equ	0xFF2
 21338                           postinc0	equ	0xFEE
 21339                           wreg	equ	0xFE8
 21340                           indf1	equ	0xFE7
 21341                           postdec1	equ	0xFE5
 21342                           fsr1h	equ	0xFE2
 21343                           fsr1l	equ	0xFE1
 21344                           bsr	equ	0xFE0
 21345                           indf2	equ	0xFDF
 21346                           postinc2	equ	0xFDE
 21347                           postdec2	equ	0xFDD
 21348                           plusw2	equ	0xFDB
 21349                           fsr2h	equ	0xFDA
 21350                           fsr2l	equ	0xFD9
 21351                           status	equ	0xFD8
 21352                           
 21353 ;; *************** function i1_ConvertADC *****************
 21354 ;; Defined at:
 21355 ;;		line 23 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/ADC/adcconv.c"
 21356 ;; Parameters:    Size  Location     Type
 21357 ;;		None
 21358 ;; Auto vars:     Size  Location     Type
 21359 ;;		None
 21360 ;; Return value:  Size  Location     Type
 21361 ;;		None               void
 21362 ;; Registers used:
 21363 ;;		None
 21364 ;; Tracked objects:
 21365 ;;		On entry : 0/0
 21366 ;;		On exit  : 0/0
 21367 ;;		Unchanged: 0/0
 21368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21369 ;;      Params:         0       0       0       0       0       0       0
 21370 ;;      Locals:         0       0       0       0       0       0       0
 21371 ;;      Temps:          0       0       0       0       0       0       0
 21372 ;;      Totals:         0       0       0       0       0       0       0
 21373 ;;Total ram usage:        0 bytes
 21374 ;; Hardware stack levels used:    1
 21375 ;; This function calls:
 21376 ;;		Nothing
 21377 ;; This function is called by:
 21378 ;;		_interrupt_at_low_vector
 21379 ;; This function uses a non-reentrant model
 21380 ;;
 21381                           
 21382                           	psect	text101
 21383  005C3C                     __ptext101:
 21384                           	opt stack 0
 21385  005C3C                     i1_ConvertADC:
 21386                           	opt stack 22
 21387                           
 21388                           ;incstack = 0
 21389                           ;incstack = 0
 21390  005C3C  82C2               	bsf	4034,1,c	;volatile
 21391  005C3E  0012               	return	
 21392  005C40                     __end_ofi1_ConvertADC:
 21393                           	opt stack 0
 21394                           tblptru	equ	0xFF8
 21395                           tblptrh	equ	0xFF7
 21396                           tblptrl	equ	0xFF6
 21397                           tablat	equ	0xFF5
 21398                           prodh	equ	0xFF4
 21399                           prodl	equ	0xFF3
 21400                           intcon	equ	0xFF2
 21401                           postinc0	equ	0xFEE
 21402                           wreg	equ	0xFE8
 21403                           indf1	equ	0xFE7
 21404                           postdec1	equ	0xFE5
 21405                           fsr1h	equ	0xFE2
 21406                           fsr1l	equ	0xFE1
 21407                           bsr	equ	0xFE0
 21408                           indf2	equ	0xFDF
 21409                           postinc2	equ	0xFDE
 21410                           postdec2	equ	0xFDD
 21411                           plusw2	equ	0xFDB
 21412                           fsr2h	equ	0xFDA
 21413                           fsr2l	equ	0xFD9
 21414                           status	equ	0xFD8
 21415                           tblptru	equ	0xFF8
 21416                           tblptrh	equ	0xFF7
 21417                           tblptrl	equ	0xFF6
 21418                           tablat	equ	0xFF5
 21419                           prodh	equ	0xFF4
 21420                           prodl	equ	0xFF3
 21421                           intcon	equ	0xFF2
 21422                           postinc0	equ	0xFEE
 21423                           wreg	equ	0xFE8
 21424                           indf1	equ	0xFE7
 21425                           postdec1	equ	0xFE5
 21426                           fsr1h	equ	0xFE2
 21427                           fsr1l	equ	0xFE1
 21428                           bsr	equ	0xFE0
 21429                           indf2	equ	0xFDF
 21430                           postinc2	equ	0xFDE
 21431                           postdec2	equ	0xFDD
 21432                           plusw2	equ	0xFDB
 21433                           fsr2h	equ	0xFDA
 21434                           fsr2l	equ	0xFD9
 21435                           status	equ	0xFD8
 21436                           
 21437                           	psect	text102
 21438  000000                     __ptext102:
 21439                           	opt stack 0
 21440                           tblptru	equ	0xFF8
 21441                           tblptrh	equ	0xFF7
 21442                           tblptrl	equ	0xFF6
 21443                           tablat	equ	0xFF5
 21444                           prodh	equ	0xFF4
 21445                           prodl	equ	0xFF3
 21446                           intcon	equ	0xFF2
 21447                           postinc0	equ	0xFEE
 21448                           wreg	equ	0xFE8
 21449                           indf1	equ	0xFE7
 21450                           postdec1	equ	0xFE5
 21451                           fsr1h	equ	0xFE2
 21452                           fsr1l	equ	0xFE1
 21453                           bsr	equ	0xFE0
 21454                           indf2	equ	0xFDF
 21455                           postinc2	equ	0xFDE
 21456                           postdec2	equ	0xFDD
 21457                           plusw2	equ	0xFDB
 21458                           fsr2h	equ	0xFDA
 21459                           fsr2l	equ	0xFD9
 21460                           status	equ	0xFD8
 21461                           
 21462                           	psect	rparam
 21463  0000                     tblptru	equ	0xFF8
 21464                           tblptrh	equ	0xFF7
 21465                           tblptrl	equ	0xFF6
 21466                           tablat	equ	0xFF5
 21467                           prodh	equ	0xFF4
 21468                           prodl	equ	0xFF3
 21469                           intcon	equ	0xFF2
 21470                           postinc0	equ	0xFEE
 21471                           wreg	equ	0xFE8
 21472                           indf1	equ	0xFE7
 21473                           postdec1	equ	0xFE5
 21474                           fsr1h	equ	0xFE2
 21475                           fsr1l	equ	0xFE1
 21476                           bsr	equ	0xFE0
 21477                           indf2	equ	0xFDF
 21478                           postinc2	equ	0xFDE
 21479                           postdec2	equ	0xFDD
 21480                           plusw2	equ	0xFDB
 21481                           fsr2h	equ	0xFDA
 21482                           fsr2l	equ	0xFD9
 21483                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    108
    Data        0
    BSS         1114
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     69      82
    BANK0           160     86     121
    BANK1           256     52     158
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_frexp	 size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_ldexp	 size(2) Largest target is 0

    ?_eval_poly	 size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_floor	 size(2) Largest target is 0

    ?___flneg	 size(2) Largest target is 0

    ?___asflmul	 size(2) Largest target is 0

    ?___flpack	 size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_getCalibrationValue	short  size(2) Largest target is 0

    ?_Celsius2Fahrenheit	short  size(2) Largest target is 0

    ?___awtofl	short  size(2) Largest target is 0

    ?_Celsius2Kelvin	short  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?___fladd	unsigned int  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?___altofl	unsigned int  size(2) Largest target is 0

    ?___aldiv	long  size(2) Largest target is 0

    ?___fltol	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___asflsub	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?_log	long  size(2) Largest target is 0

    ?___flsub	long  size(2) Largest target is 0

    ?___flmul	long  size(2) Largest target is 0

    ?___fldiv	long  size(2) Largest target is 0

    ?_exp	long  size(2) Largest target is 0

    ?___asfldiv	long  size(2) Largest target is 0

    ?___asfladd	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___lwtofl	long  size(2) Largest target is 0

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    __asflsub@f1p	PTR  size(2) Largest target is 4
		 -> exp@x(BANK0[4]), doWork@temp(BANK1[4]), 

    __asflmul@mp	PTR  size(1) Largest target is 4
		 -> exp@x(BANK0[4]), 

    __asfldiv@f1p	PTR  size(2) Largest target is 4
		 -> doWork@avarage(BANK1[4]), 

    __asfladd@f1p	PTR  size(2) Largest target is 4
		 -> doWork@temp(BANK1[4]), doWork@avarage(BANK1[4]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_omsg(BANK0[14]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_omsg(BANK0[14]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_omsg(BANK0[14]), 

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_omsg(BANK0[14]), 


Critical Paths under _main in COMRAM

    _doWork->___fltol
    ___lwtofl->_readEEPROM
    ___asfldiv->___fldiv
    ___asfladd->___fladd
    ___aldiv->___fltol
    _getCalibrationValue->_readEEPROM
    _log->_eval_poly
    _exp->_ldexp
    _exp->___fltol
    _ldexp->_eval_poly
    _floor->___fltol
    ___altofl->___fltol
    ___fldiv->___fladd
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _setEventData->___fltol
    _Celsius2Fahrenheit->___fldiv
    _Celsius2Kelvin->___fladd
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeStdReg->_vscp_getGUID
    _vscp_writeStdReg->_vscp_getUserID
    _vscp_writeStdReg->_vscp_getManufacturerId
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_writeCoeffs2Ram
    _writeCoeffs2Ram->_readEEPROM
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_readNicknamePermanent->_readEEPROM
    _readEEPROM->___wmul
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_getControlByte
    _init_app_eeprom->_writeEEPROM
    _vscp_getControlByte->_readEEPROM
    _vscp_setControlByte->_writeEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_OpenADC
    _ECANInitialize->_ECANSetOperationMode
    ___awtofl->___flpack
    ___flmul->___fldiv
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_doWork
    _doWork->_exp
    ___aldiv->___fltol
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _eval_poly->___flmul
    _floor->___altofl
    ___fltol->___flmul
    ___altofl->___aldiv
    ___asflsub->___flsub
    ___flsub->___flmul
    ___asflmul->___flmul
    _doOneSecondWork->_sendTempEvent
    _handle_sync->_sendTempEvent
    _sendTempEvent->_setEventData
    _setEventData->___fltol
    _Celsius2Fahrenheit->___flmul
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doWork

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   86080
                                             82 BANK0      4     4      0
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                        _handle_sync
                         _vscp_error
                    _doOneSecondWork
               _vscp_doOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                              66    66      0   29834
                                             68 BANK0     14    14      0
                                              0 BANK1     52    52      0
                         _readEEPROM
                                _exp
                                _log
                _getCalibrationValue
                            ___aldiv
                           ___altofl
                          ___asfladd
                            ___fladd
                          ___asfldiv
                            ___fldiv
                            ___flmul
                          ___asflsub
                            ___flsub
                            ___fltol
                           ___lwtofl
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4     343
                                             25 COMRAM     4     0      4
                         _readEEPROM (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___asfldiv                                            6     0      6     855
                                              0 BANK0      6     0      6
                            ___fldiv
 ---------------------------------------------------------------------------------
 (2) ___asfladd                                            6     0      6    1630
                                             43 COMRAM     6     0      6
                            ___fladd
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     445
                                             28 BANK0     14     6      8
                _getCalibrationValue (ARG)
                            ___flmul (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) _getCalibrationValue                                  6     4      2     161
                                             25 COMRAM     6     4      2
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     2      4    5945
                                             66 COMRAM     2     2      0
                                             33 BANK0      4     0      4
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
                           ___awtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 11     7      4   11079
                                             57 BANK0     11     7      4
                            ___fldiv
                          ___asflmul
                          ___asflsub
                           ___awtofl
                              _floor
                          _eval_poly
                              _ldexp
                             ___flge
                            ___flneg
                            ___fltol
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4      65
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                9     3      6     359
                                             66 COMRAM     3     3      0
                                             33 BANK0      6     0      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7    2591
                                             65 COMRAM     1     1      0
                                             22 BANK0     11     4      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) _floor                                               10     6      4    3207
                                             47 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                              _frexp
                            ___fltol
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     337
                                             65 COMRAM     4     4      0
                                             22 BANK0      6     2      4
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _frexp                                                9     3      6     322
                                             13 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___flge                                               8     0      8     198
                                             13 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (2) ___altofl                                             5     1      4     445
                                             42 BANK0      5     1      4
                           ___flpack
                            ___aldiv (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asflsub                                            6     0      6    1695
                                             30 BANK0      6     0      6
                            ___flsub
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    1602
                                             22 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___asflmul                                            5     1      4     893
                                             65 COMRAM     1     1      0
                                             22 BANK0      4     0      4
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8     729
                                             43 COMRAM    22    14      8
                           ___flpack
                            ___fladd (ARG)
                            ___flsub (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2462
                                             31 BANK0      1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2332
                                             67 COMRAM     2     1      1
                     _vscp_sendEvent
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _doOneSecondWork                                     11    11      0   12426
                                             39 BANK0     11    11      0
                        _writeEEPROM
                         _readEEPROM
                      _sendTempEvent
                     _vscp_sendEvent
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_sync                                          3     3      0    7768
                                             39 BANK0      3     3      0
                         _readEEPROM
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (2) _sendTempEvent                                        2     2      0    7542
                                             37 BANK0      2     2      0
                         _readEEPROM
                     _vscp_sendEvent
                       _setEventData
 ---------------------------------------------------------------------------------
 (3) _setEventData                                         9     6      3    5083
                                             28 BANK0      9     6      3
                         _readEEPROM (ARG)
                     _Celsius2Kelvin
                 _Celsius2Fahrenheit
                           ___awtofl
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) _Celsius2Fahrenheit                                   4     0      4    2785
                                             22 BANK0      4     0      4
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    1537
                                             28 COMRAM    15     7      8
                           ___flpack
                            ___flmul (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) _Celsius2Kelvin                                       4     0      4    1256
                                             43 COMRAM     4     0      4
                            ___fladd
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   24075
                                             31 BANK0     28    28      0
                          _vscp_init
                     _vscp_sendEvent
                    _vscp_readAppReg
                   _vscp_writeAppReg
                       _vscp_getGUID
                    _vscp_getMDF_URL
                 _vscp_getMatrixInfo
              _vscp_goBootloaderMode
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                             13 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    6156
                                             38 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    1615
                                             26 COMRAM     7     6      1
                       _vscp_getGUID
                       _vscp_setGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
             _vscp_setManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     134
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1      88
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1      88
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     110
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     4     3      1    4386
                                             34 COMRAM     4     3      1
                        _writeEEPROM
                         _readEEPROM
                    _writeCoeffs2Ram
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (4) _writeCoeffs2Ram                                      9     9      0     555
                                             25 COMRAM     9     9      0
                         _readEEPROM
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     159
                                             13 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    2249
                                             43 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1436
                                             26 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
          _vscp_getRegisterPagesUsed
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             25 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             25 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             25 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2270
                                             67 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     227
                                             25 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                             21 COMRAM     4     2      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0      66
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0     110
                                             16 COMRAM     1     1      0
                        _writeEEPROM
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      90
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4606
                 _vscp_goActiveState
                     _vscp_sendEvent
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2270
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2270
                                             66 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       31    24      7    2236
                                              0 BANK0     31    24      7
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (5) _sendCANFrame                                         7     1      6    2016
                                             59 COMRAM     7     1      6
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (6) _ECANSendMessage                                     36    29      7    1886
                                             23 COMRAM    36    29      7
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (7) __CANIDToRegs                                        10     3      7     693
                                             13 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             49 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             35 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             31 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             20 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                             13 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                             13 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     347
        _vscp_writeNicknamePermanent
                _vscp_setControlByte
                _vscp_getControlByte
                 _vscp_init_pstorage
 ---------------------------------------------------------------------------------
 (2) _vscp_init_pstorage                                   0     0      0      44
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      0     0      0      44
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getControlByte                                  1     1      0     127
                                             25 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  2     1      1     110
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      66
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      44
                                             13 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     402
                        _WriteTimer0
                         _ConvertADC
                       _init_app_ram
                         _OpenTimer0
                            _OpenADC
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     154
                                             13 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0      90
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4     445
                                             23 COMRAM     7     3      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8     800
                                              0 BANK0     22    14      8
                           ___flpack
                            ___fldiv (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     312
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     312
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      3     3      0     720
                                             25 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              9     9      0     221
                                              4 COMRAM     9     9      0
                       i1_ConvertADC
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) i1_ConvertADC                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _ConvertADC
     _init_app_ram
     _OpenTimer0
     _OpenADC
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
     _vscp_getControlByte
       _readEEPROM
         ___wmul (ARG)
     _vscp_init_pstorage
       _init_app_eeprom
         _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
         ___wmul (ARG)
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
           ___wmul (ARG)
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_readAppReg
       _readEEPROM
         ___wmul (ARG)
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
         ___wmul (ARG)
       _writeCoeffs2Ram
         _readEEPROM
           ___wmul (ARG)
         ___wmul
       _vscp_readAppReg (ARG)
         _readEEPROM
           ___wmul (ARG)
     _vscp_getGUID
       _readEEPROM
         ___wmul (ARG)
     _vscp_getMDF_URL
     _vscp_getMatrixInfo
     _vscp_goBootloaderMode
       _writeEEPROM
       _ECANSetOperationMode
     _vscp_handleHeartbeat
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
             ___wmul (ARG)
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
           ___wmul (ARG)
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
             ___wmul (ARG)
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
             ___wmul (ARG)
         _vscp_getManufacturerId
           _readEEPROM
             ___wmul (ARG)
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getRegisterPagesUsed
         _vscp_getFamilyCode
         _vscp_getFamilyType
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
           ___wmul (ARG)
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
           ___wmul (ARG)
       _vscp_getManufacturerId
         _readEEPROM
           ___wmul (ARG)
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getRegisterPagesUsed
       _vscp_getFamilyCode
       _vscp_getFamilyType
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
           ___wmul (ARG)
         _writeCoeffs2Ram
           _readEEPROM
             ___wmul (ARG)
           ___wmul
         _vscp_readAppReg (ARG)
           _readEEPROM
             ___wmul (ARG)
       _vscp_writeStdReg
         _vscp_getGUID
           _readEEPROM
             ___wmul (ARG)
         _vscp_setGUID
           _writeEEPROM
         _vscp_getUserID
           _readEEPROM
             ___wmul (ARG)
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
             ___wmul (ARG)
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
     _vscp_writeStdReg
       _vscp_getGUID
         _readEEPROM
           ___wmul (ARG)
       _vscp_setGUID
         _writeEEPROM
       _vscp_getUserID
         _readEEPROM
           ___wmul (ARG)
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
           ___wmul (ARG)
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
     ___lbmod
   _handle_sync
     _readEEPROM
       ___wmul (ARG)
     _sendTempEvent
       _readEEPROM
         ___wmul (ARG)
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
           ___wmul (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
   _vscp_error
   _doOneSecondWork
     _writeEEPROM
     _readEEPROM
       ___wmul (ARG)
     _sendTempEvent
       _readEEPROM
         ___wmul (ARG)
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
           ___wmul (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     ___wmul
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
         ___wmul (ARG)
     _vscp_getSubzone
       _readEEPROM
         ___wmul (ARG)
     _vscp_sendHeartBeat
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_getZone (ARG)
         _readEEPROM
           ___wmul (ARG)
       _vscp_getSubzone (ARG)
         _readEEPROM
           ___wmul (ARG)
   _doWork
     _readEEPROM
       ___wmul (ARG)
     _exp
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___asflmul
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___asflsub
         ___flsub
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
       ___awtofl
         ___flpack
       _floor
         ___altofl
           ___flpack
           ___aldiv (ARG)
             _getCalibrationValue (ARG)
               _readEEPROM
                 ___wmul (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___fltol (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___fldiv (ARG)
                   ___flpack
                   ___fladd (ARG)
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                   ___flsub (ARG)
                     ___fladd
                       ___flpack
                       ___awtofl (ARG)
                         ___flpack
                       _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
           ___fltol (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flge
         _frexp
         ___fltol
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       _eval_poly
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       _ldexp
         _eval_poly (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       ___flge
       ___flneg
       ___fltol
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     _log
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _eval_poly (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       _frexp (ARG)
     _getCalibrationValue
       _readEEPROM
         ___wmul (ARG)
     ___aldiv
       _getCalibrationValue (ARG)
         _readEEPROM
           ___wmul (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
     ___altofl
       ___flpack
       ___aldiv (ARG)
         _getCalibrationValue (ARG)
           _readEEPROM
             ___wmul (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
     ___asfladd
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___fladd
       ___flpack
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___flsub (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
     ___asfldiv
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___fldiv
       ___flpack
       ___fladd (ARG)
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flsub (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___flmul
       ___flpack
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___asflsub
       ___flsub
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
     ___flsub
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___fltol
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___lwtofl
       _readEEPROM (ARG)
         ___wmul (ARG)
       ___flpack (ARG)

 _interrupt_at_low_vector (ROOT)
   i1_ConvertADC
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     3C0      16       62.5%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     34      9E       7       61.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     56      79       5       75.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     45      52       1       86.3%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     169       3        0.0%
DATA                 0      0     534      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Tue Mar  8 10:24:30 2016

                          ___asfldiv@f1p 0060                            ___altofl@sign 008E  
                           ___fldiv@cntr 003F                  __end_of_vscp_readAppReg 27FA  
                           ___fldiv@sign 0041                    __end_of_sendVSCPFrame 4C5E  
                           ___asflmul@mp 0042                             ___asflsub@f2 0080  
                            __CFG_CPB$ON 000000             ?_vscp_writeNicknamePermanent 0001  
            ??_vscp_getRegisterPagesUsed 000E                                       bsr 000FE0  
    vscp_writeNicknamePermanent@nickname 0011                      ___wmul@multiplicand 0010  
                            __CFG_BORV$3 000000                  __end_of_vscp_readStdReg 3E0C  
                          ___asflsub@f1p 007E                             ___flpack@arg 000E  
                            __CFG_LVP$ON 000000                             ___flpack@exp 0012  
                         _Celsius2Kelvin 580A                              __CFG_WDT$ON 000000  
                                    l320 20E6                                      l209 1942  
                                    l322 20F2                                      l314 20C2  
                                    l170 44C8                                      l324 20FE  
                                    l316 20CE                                      l228 1E26  
                                    l318 20DA                                      l254 4CE8  
                                    l409 24F4                                      l521 1532  
                                    l185 4538                       vscp_readStdReg@idx 0028  
                                    l179 450E                                      l613 5A62  
                                    l518 14E4                                      l294 5182  
                                    l551 5A20                                      l609 5A42  
                                    l633 5230                                      l644 58C6  
                                    l629 4C5C                                      l639 5616  
                                    l840 38A2                                      l593 5A9E  
                                    l922 59B0                                      l850 3970  
                                    l851 38F0                                      l835 3F70  
                                    l827 3ED8                                      l861 394A  
                                    l853 38FE                                      l829 3EF6  
                     vscp_readStdReg@reg 002B                                      l871 39DE  
                                    l863 395A                                      l855 3912  
                                    l847 3A76                                      l872 3A02  
                                    l857 3926                                      l859 393A  
                                    l894 40D4                                      l889 4384  
                                    l899 529E           __size_of_vscp_handleProbeState 00BE  
                       setEventData@ival 0083                           getVSCPFrame@id 002E  
          __end_of_vscp_handleProbeState 4AEC                    ?_vscp_restoreDefaults 0001  
                   __size_of_WriteTimer0 0012                         setEventData@unit 007E  
                                    _adc 019E                                      _exp 3A78  
                                    _log 4386                                      fsr2 000FD9  
           __size_of_vscp_getControlByte 0020                                      prod 000FF3  
                                    wreg 000FE8                             ___flmul@cntr 0074  
                           ___flmul@sign 0075                            ___flpack@sign 0013  
                           ___fltol@exp1 007B                                     l1040 57CE  
                                   l1104 53CA                                     l1050 4AE6  
                                   l1051 4A76                                     l1035 55A0  
                                   l1108 5AF4                                     l1215 29C0  
                                   l1320 5AD6                                     l1240 2B6E  
                                   l1321 5AD8                                     l1153 59FE  
                                   l1241 2BB2                                     l1306 5374  
                                   l1058 4AD6                                     l1090 5860  
                                   l1250 2BF0                                     l1059 4ABC  
                                   l1091 586C                                     l1084 5A80  
                                   l1181 46D6                                     l1095 591A  
                                   l1239 2B5A                                     l1610 4DB4  
                                   l1283 5944                                     l1275 2E4C  
                                   l1540 497C                                     l1541 4A2C  
                                   l1551 49EE                                     l1545 49C0  
                                   l1625 48AC                                     l1618 5446  
                                   l1570 3C4A                                     l1619 5464  
                                   l1660 47D6                                     l1582 4120  
                                   l1662 47C6                                     l1566 3C5A  
                                   l1671 4F96                                     l1593 41B0  
                                   l1569 3B26                                     l1578 40F8  
                                   l1579 4234                                     l1659 4710  
                                   l1691 4E58                                     l1687 50B2  
                                   l1858 44B2                  __end_of_doOneSecondWork 204E  
                    vscp_readStdReg@code 0020                vscp_getManufacturerId@idx 001A  
                                   l8203 51D4                                     ?_exp 0099  
                                   l8109 5AFC                                     ?_log 0081  
                                   l8215 58A4                                     l8137 5B64  
                                   l8219 58A8                                     l8149 5A2E  
                                   l8501 5280                                     l8405 39A4  
                                   l8077 5A0C                                     l8431 3A30  
                                   l8423 3A04                                     l8343 38D0  
                                   l8327 3890                                     l8351 38DE  
                                   l7449 562E                                     l8337 38BA  
                                   l8345 38DA                                     l8515 4006  
                                   l8445 3A60                                     l9173 5966  
                                   l9165 5950                                     l8439 3A4A  
                                   l8491 525E                                     l8483 5238  
                                   l8395 3984                                     l8493 5268  
                                   l8485 5240                                     l8495 526E  
                                   l8487 524A                                     l9631 4A50  
                                   l8497 5274                                     l8489 5254  
                                   l9633 4A58                                     l9617 4A30  
                                   l9651 4A92                                     l9803 2958  
                                   l9813 298C                                     l9733 2862  
                                   l9717 2854                                     l9655 4A96  
                                   l9831 29F2                                     l9719 285A  
                                   l9585 57AE                                     l9657 4A9A  
                                   l9841 2A54                                     l9825 29C4  
                                   l9753 2888                                     l9923 2B4E  
                                   l9907 2B2E                                     l9835 2A0A  
                                   l9827 29E2                                     l9691 2804  
                                   l9685 4ADA                                     l9845 2A6A  
                                   l9861 2A9C                                     l9693 280A  
                                   l9951 2B94                                     l9943 2B76  
                                   l9863 2A9E                                     l9783 28F0  
                                   l9767 2894                                     l9695 2810  
                                   l9873 2AC2                                     l9865 2AA8  
                                   l9793 2924                                     l9697 2816  
                                   l9955 2B9C                                     l9891 2B0E  
                                   l9699 281C                                     l9973 2BCE  
                                   l9959 2BA4                                     l9879 2AF2  
                                   l9969 2BB4                                     l9995 2BF8  
            __size_of_vscp_getMatrixInfo 001A                           sendCANFrame@id 003C  
                                   u5490 5224                                     u5495 521A  
                                   u5665 3898                                     u5667 389A  
                                   u9125 4270                                     u8414 1CDA  
                                   u8334 1B4E                                     u9135 4296  
                                   u8415 1CD6                                     u8335 1B4A  
                                   u9145 42C0                                     u9410 3D78  
                                   u8514 1EF4                                     u8434 1D66  
                                   u8515 1EF0                                     u8435 1D62  
                                   u8284 1A82                                     u8285 1A7E  
                                   u8534 1F82                                     u5975 3FB4  
                                   u9415 3D6E                                     u8535 1F7E  
                                   u9440 3DDA                                     u8384 1C1A  
                         sendCANFrame@rv 0042                                     u5985 3FD4  
                                   u8385 1C16                                     u5995 4022  
                                   u8484 1E38                                     u9445 3DD0  
                                   u8485 1E34                                     u8760 3C0E  
                                   u8780 439A                                     u8985 4BE4  
                       ??_ECANInitialize 000F                vscp_setManufacturerId@idx 0012  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 44B4                                     _init 5720  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   exp@x 0099                                     log@x 0081  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 0B6E                              _vscp_minute 0121  
                            _vscp_second 0051                                     prodh 000FF4  
                                   prodl 000FF3                                     start 0ABA  
          __size_of_vscp_doOneSecondWork 0054                        vscp_getUserID@idx 001A  
                  __size_of_vscp_setGUID 0022                         _vscp_writeStdReg 45C8  
                            _writeEEPROM 5994                ECANReceiveMessage@dataLen 0016  
                  getVSCPFrame@pPriority 0026                          __end_of_OpenADC 5378  
                        _sh_coefficients 0122                     __end_of_getVSCPFrame 5232  
                                  ??_exp 0046                                    ??_log 0043  
                       __RegsToCANID@val 0010                         __RegsToCANID@ptr 000E  
                 __end_of_Celsius2Kelvin 583E                     __size_of_getCANFrame 002C  
                                  l10031 2C70                                    l10009 2C22  
                                  l10035 2C82                                    l10019 2C44  
                                  l10131 518E                                    l10123 513A  
                                  l11101 3F26                                    l10061 2CEC  
                                  l10053 2CBC                                    l10037 2C88  
                                  l10109 2DEA                                    l10205 1BB0  
                                  l11023 5A52                                    l10135 51A2  
                                  l10127 515E                                    l10223 1CC8  
                                  l10207 1BBA                                    l11121 3F68  
                                  l10065 2D08                                    l10057 2CD6  
                                  l10137 51AE                                    l10225 1CE4  
                                  l10217 1C08                                    l10153 1A12  
                                  l10313 539C                                    l11115 3F62  
                                  l11043 55E0                                    l11211 3C7A  
                                  l10083 2D62                                    l10075 2D34  
                                  l10163 1A58                                    l10147 1874  
                                  l10323 53B0                                    l11109 3F40  
                                  l11061 3E62                                    l11037 4C5A  
                                  l10245 1DC8                                    l10181 1AEE  
                                  l11119 3F66                                    l11047 560A  
                                  l11231 3CB4                                    l11223 3C9C  
                                  l11215 3C84                                    l11207 3C70  
                                  l10087 2D8A                                    l10263 1EE2  
                                  l10247 1DD2                                    l10191 1B3C  
                                  l10319 53A8                                    l10415 3ACA  
                                  _B0CON 000E20                                    l10601 21D0  
                                  l11137 42AC                                    l11241 3CDA  
                                  l11321 45FC                                    l10265 1EFE  
                                  l10409 3A96                                    l12033 385E  
                                  l10611 220C                                    l10603 21DC  
                                  l11067 3E72                                    l11235 3CC4  
                                  l11227 3CA8                                    l11219 3C90  
                                  l10523 4E64                                    l11315 45DA  
                                  l11307 59F4                                    l10179 1AE4  
                                  l10435 3C18                                    l10419 3AF4  
                                  l10701 2428                                    l10621 2248  
                                  l10613 2218                                    l10605 21E8  
                                  l10541 2068                                    l11261 3D14  
                                  l11253 3CFC                                    l11245 3CE6  
                                  l10517 4E5E                                    l11341 4656  
                                  l11333 4638                                    l11501 417C  
                                  l10285 1FE4                                    l11413 4B06  
                                  l10711 2464                                    l10703 2434  
                                  l10631 2284                                    l10623 2254  
                                  l10615 2224                                    l10607 21F4  
                                  l10551 20A4                                    l10543 2074  
                                  l11095 3EF8                                    l11079 3E9C  
                                  l11343 465A                                    l11327 461C  
                                  l11511 41AA                                    l11503 4182  
                                  l10287 1FEE                                    l10447 43A4  
                                  _B1CON 000E30                                    l10721 24A0  
                                  l10713 2470                                    l10705 2440  
                                  l10641 22C0                                    l10633 2290  
                                  l10625 2260                                    l10617 2230  
                                  l10609 2200                                    l10561 20E0  
                                  l10553 20B0                                    l10545 2080  
                                  l11089 3EDC                                    l11265 3D20  
                                  l11257 3D08                                    l11249 3CF2  
                                  l10801 0D0C                                    l11345 4670  
                                  l11425 4B36                                    l11441 4B82  
                                  l10731 24DC                                    l10723 24AC  
                                  l10715 247C                                    l10707 244C  
                                  l10651 22FC                                    l10643 22CC  
                                  l10635 229C                                    l10627 226C  
                                  l10619 223C                                    l10571 211C  
                                  l10563 20EC                                    l10555 20BC  
                                  l10547 208C                                    l10539 205C  
                                  l11611 4868                                    l11291 3DF8  
                                  l11275 3D82                                    l10811 0D98  
                                  l10803 0D28                                    l11515 41C6  
                                  l10299 2042                                    l11427 4B42  
                                  l11419 4B1E                                    l10733 24E8  
                                  l10725 24B8                                    l10717 2488  
                                  l10709 2458                                    l10661 2338  
                                  l10653 2308                                    l10645 22D8  
                                  l10637 22A8                                    l10629 2278  
                                  l10581 2158                                    l10573 2128  
                                  l10565 20F8                                    l10557 20C8  
                                  l10549 2098                                    l10741 2510  
                                  l10485 5898                                    l11285 3DE2  
                                  l11197 5AEE                                    l10901 125C  
                                  l10821 0E24                                    l10813 0DB4  
                                  l10805 0D44                                    l11365 46BA  
                                  l11357 46A4                                    l11509 419E  
                                  l10493 4C94                                    l11701 5430  
                                  l11445 4B96                                    l11437 4B74  
                                  l11429 4B46                                    l10735 24F8  
                                  l10727 24C4                                    l10719 2494  
                                  l10671 2374                                    l10663 2344  
                                  l10655 2314                                    l10647 22E4  
                                  l10639 22B4                                    l10591 2194  
                                  l10583 2164                                    l10575 2134  
                                  l10567 2104                                    l10559 20D4  
                                  l10743 279A                                    l11383 4986  
                                  l11607 4854                                    l11295 3E08  
                                  l10911 12DE                                    l10903 1276  
                                  l10831 0EB0                                    l10823 0E40  
                                  l10815 0DD0                                    l10807 0D60  
                                  l11375 46D8                                    l11527 4208  
                                  l11519 41DC                                    l11543 4D2E  
                                  l11455 5560                                    _B2CON 000E40  
                                  l10761 27DE                                    l10737 2504  
                                  l10729 24D0                                    l10681 23B0  
                                  l10673 2380                                    l10665 2350  
                                  l10657 2320                                    l10649 22F0  
                                  l10593 21A0                                    l10585 2170  
                                  l10577 2140                                    l10569 2110  
                                  l11393 49D6                                    l11385 4992  
                                  l10921 1360                                    l10913 12F8  
                                  l10905 1290                                    l10841 0F3C  
                                  l10833 0ECC                                    l10825 0E5C  
                                  l10817 0DEC                                    l10809 0D7C  
                                  l10497 4CCC                                    l10691 23EC  
                                  l10683 23BC                                    l10675 238C  
                                  l10667 235C                                    l10659 232C  
                                  l10595 21AC                                    l10587 217C  
                                  l10579 214C                                    l11395 49E2  
                                  l11387 49AA                                    l11635 57E0  
                                  l10931 13E2                                    l10923 137A  
                                  l10915 1312                                    l10907 12AA  
                                  l10851 0FC8                                    l10843 0F58  
                                  l10835 0EE8                                    l10827 0E78  
                                  l10819 0E08                                    l11491 414C  
                                  l11475 4132                                    l11563 4D7A  
                                  l11555 4D4C                                    l11539 4D1A  
                                  l11707 5462                                    l11715 59CC  
                                  l10757 27CC                                    l10749 27B8  
                                  l10693 23F8                                    l10685 23C8  
                                  l10677 2398                                    l10669 2368  
                                  l10597 21B8                                    l10589 2188  
                                  l10765 27F6                                    l10941 1464  
                                  l10933 13FC                                    l10925 1394  
                                  l10917 132C                                    l10909 12C4  
                                  l10861 1054                                    l10853 0FE4  
                                  l10845 0F74                                    l10837 0F04  
                                  l10829 0E94                                    l10781 0BF4  
                                  l10773 0B84                                    l11469 410A  
                                  l11741 4F06                                    l11653 4736  
                                  l11661 48DA                                    l10759 27CE  
                                  l10695 2404                                    l10687 23D4  
                                  l10679 23A4                                    l10599 21C4  
                                  l11583 47FC                                    l10951 14FE  
                                  l10943 147E                                    l10935 1416  
                                  l10927 13AE                                    l10919 1346  
                                  l10871 10D6                                    l10863 106E  
                                  l10855 1000                                    l10847 0F90  
                                  l10839 0F20                                    l10791 0C80  
                                  l10783 0C10                                    l10775 0BA0  
                                  l11727 5054                                    l11743 4F10  
                                  l11663 4954                                    _B3CON 000E50  
                                  l10697 2410                                    l10689 23E0  
                                  l10953 1518                                    l10945 1498  
                                  l10937 1430                                    l10929 13C8  
                                  l10881 1158                                    l10873 10F0  
                                  l10865 1088                                    l10857 101C  
                                  l10849 0FAC                                    l10793 0C9C  
                                  l10785 0C2C                                    l10777 0BBC  
                                  l11497 4168                                    l11761 4F5A  
                                  l11649 471A                                    l11921 4508  
                                  l11913 44F4                                    l10699 241C  
                                  l11595 4824                                    l11579 47E6  
                                  l10955 1536                                    l10947 14B2  
                                  l10939 144A                                    l10891 11DA  
                                  l10883 1172                                    l10875 110A  
                                  l10867 10A2                                    l10859 1038  
                                  l10795 0CB8                                    l10787 0C48  
                                  l10779 0BD8                                    l10963 156E  
                                  l11499 4174                                    l11691 4E20  
                                  l10981 182E                                    l10973 181A  
                                  l10957 1550                                    l10949 14CC  
                                  l10893 11F4                                    l10885 118C  
                                  l10877 1124                                    l10869 10BC  
                                  l10797 0CD4                                    l10789 0C64  
                                  l10965 17E2                                    l11773 4F86  
                                  l11765 4F62                                    l11757 4F4A  
                                  l11677 4DF6                                    l11941 4554  
                                  l11917 44FE                                    l11909 44EA  
                                  l11599 4838                                    l10983 1830  
                                  l10959 156A                                    l10895 120E  
                                  l10887 11A6                                    l10879 113E  
                                  l10799 0CF0                                    l11767 4F6E  
                                  l11687 4E14                                    l11935 4532  
                                  l11919 4502                                    _B4CON 000E60  
                                  l10985 1840                                    l10897 1228  
                                  l10889 11C0                                    l11769 4F72  
                                  l11929 451E                                    l10899 1242  
                                  l11963 45B0                                    l11939 453C  
          __size_of_vscp_getMajorVersion 0002                                    l10989 186C  
                                  l11957 4584                                    l11967 45B8  
                                  _B5CON 000E70                                    l11987 3478  
                                  l11979 344E               __end_of_vscp_goActiveState 5ABE  
                          ___fltol@sign1 007A                          __end_of___aldiv 4BA8  
          ??_vscp_writeNicknamePermanent 0011                       writeEEPROM@address 000E  
                        __end_of___fladd 4236                                    ?_main 0001  
                                  ?_init 0001                   ?_vscp_goBootloaderMode 0001  
                        __end_of___fldiv 4DB6                            i1_WriteTimer0 5BE4  
                        __end_of___flneg 59DE                                    _EEADR 000FA9  
                        __end_of___lbmod 596E                          __end_of___flmul 48AE  
                        __end_of___flsub 5720                          __end_of___fltol 4F98  
                _vscp_handleDropNickname 583E                                    _BSEL0 000DF8  
                                  u10000 4D24                                    u10030 47F2  
                                  u10130 4DEC                                    u10220 4F2E  
                                  u10225 4F24                                    u10414 3460  
                                  u10415 345C                                    _T0CON 000FD5  
                                  u10444 3856                                    u10445 3852  
                                  i1l140 0884                                    i1l146 08BE  
                                  i1l163 0A46                                    i1l166 0A9C  
                        sendCANFrame@dlc 0040                                    _MSEL0 000DF0  
                                  _MSEL1 000DF1                                    _MSEL2 000DF2  
                                  _IRXIF 007D27                        ??_writeCoeffs2Ram 001A  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 5C28               _vscp_readNicknamePermanent 5C1E  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                     setEventData@newval 007F                         ?_vscp_getSubzone 0001  
                         __CFG_EBTR0$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                            ___awtofl@sign 001E  
                         __CFG_EBTR3$OFF 000000                    __end_of_sendTempEvent 5138  
                           _vscp_getGUID 5B98                            __CFG_WRTD$OFF 000000  
                         __CFG_EBTRB$OFF 000000                                    _floor 46DC  
                                  _ldexp 4DB6                             _vscp_getZone 5C00  
                                  _frexp 502E                       vscp_writeAppReg@rv 0026  
              _vscp_getRegisterPagesUsed 5C40                   __size_of_vscp_getEvent 002A  
                                  main@i 00B2                               _ConvertADC 5C38  
                           _vscp_setGUID 5A00                                    tablat 000FF5  
                _vscp_getSubMinorVersion 5C46                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 5994  
                            exp@exponent 00A1                              ldexp@newexp 0085  
                   _ECANSetOperationMode 5B58                          __initialization 5664  
                            log@exponent 0043                             __end_of_main 45C8  
                           __end_of_init 575C                         ?_vscp_readAppReg 0001  
                _interrupt_at_low_vector 0818                          ?_Celsius2Kelvin 002C  
                         __CFG_OSC$HSPLL 000000                        ??_ECANSendMessage 001F  
                         ?i1_WriteTimer0 0001                         ?_vscp_readStdReg 0001  
                  getVSCPFrame@pvscptype 0024                   ??_vscp_restoreDefaults 0011  
                                 ??_main 0046                                   ??_init 0013  
          __size_of_vscp_handleHeartbeat 0002                 ??_vscp_getManufacturerId 001A  
               ??_vscp_setManufacturerId 0012                 _vscp_handleProtocolEvent 27FA  
                          __activetblptr 000002                        __RegsToCANID@type 0011  
             ECANReceiveMessage@msgFlags 0017                         doWork@calVoltage 016E  
              __size_of__ECANPointBuffer 0076                                   _B0TXEN 006FC2  
                                 _B1TXEN 006FC3                                   _B2TXEN 006FC4  
                                 _B3TXEN 006FC5                                   _B4TXEN 006FC6  
                                 _B5TXEN 006FC7                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                                   _ADCON2 000FC0  
                                 ?_floor 008F                                   ?_ldexp 0081  
                   __size_of_handle_sync 0082                                   ?_frexp 000E  
                       __end_of___altofl 558E               ECANReceiveMessage@savedPtr 0018  
                                 _CANCON 000F6F                                   _ADRESH 000FC4  
                                 _ADRESL 000FC3                                   _EEDATA 000FA8  
                       __end_of___flpack 4A2E                                   _EECON2 000FA7  
                                 _CIOCON 000F73                         __end_of___awtofl 580A  
                        __CFG_BBSIZ$2048 000000                         ?_doOneSecondWork 0001  
                     vscp_writeStdReg@rv 0020                            ?_init_app_ram 0001  
                                 _MDSEL0 007BBE                                   _MDSEL1 007BBF  
                             _OpenTimer0 5ABE                                   i1l9201 0852  
                                 i1l9211 0888                                   i1l9203 0862  
                                 i1l9301 0A96                                   i1l9221 08AC  
                                 i1l9213 088A                                   i1l9205 0872  
                                 i1l9303 0A9A                                   i1l9223 08AE  
                                 i1l9215 0896                                   i1l9207 0876  
                                 i1l9241 08D4                                   i1l9217 08A0  
                                 i1l9225 08B2                                   i1l9209 087E  
                                 i1l9251 093A                                   i1l9243 08FC  
                                 i1l9235 08C8                                   i1l9219 08A8  
                                 i1l9261 097C                                   i1l9253 093E  
                                 i1l9245 0900                                   i1l9237 08CA  
                                 i1l9271 09C6                                   i1l9263 0988  
                                 i1l9255 094A                                   i1l9247 090C  
                                 i1l9281 0A0A                                   i1l9273 09CC  
                                 i1l9265 098E                                   i1l9257 0950  
                                 i1l9249 0912                                   i1l9193 0834  
                                 i1l9291 0A52                                   i1l9283 0A32  
                                 i1l9275 09F4                                   i1l9267 09B6  
                                 i1l9259 0978                                   i1l9195 083C  
                                 i1l9293 0A56                                   i1l9285 0A36  
                                 i1l9277 09F8                                   i1l9269 09BA  
                                 i1l9197 0848                                   i1l9287 0A42  
                                 i1l9279 0A04                                   i1l9199 084E  
                                 i1l9289 0A48                                   i1l9299 0A5C  
                        _init_app_eeprom 2E4E                         __end_of___lwtofl 58F2  
                                 _RXB0IF 007D20                                   _RXB1IF 007D21  
                         __CFG_WDTPS$128 000000                   ECANReceiveMessage@data 0015  
                 ECANReceiveMessage@mode 001C                   ECANReceiveMessage@temp 001D  
                      getVSCPFrame@pData 0028                        getVSCPFrame@pSize 0027  
                              ??_OpenADC 0010                       _vscp_newNodeOnline 58F2  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0017  
 vscp_handleProtocolEvent@page_save_1166 0088                                   ___flge 541A  
                         getCANFrame@pid 0022                                ??___aldiv 0046  
                              ??___fladd 0025                                   ___wmul 575C  
                              ??___fldiv 0034                                ??___flneg 0012  
                         __CFG_STVREN$ON 000000                                ??___lbmod 000F  
                              ??___flmul 0042                                ??___flsub 0042  
                              ??___fltol 0042                            _vscp_getEvent 591C  
                                 _doWork 3416                         OpenTimer0@config 000E  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 001A  
                    vscp_writeAppReg@reg 0025                      vscp_writeAppReg@val 0023  
                    vscp_writeAppReg@pos 0024                                   clear_0 566C  
                                 clear_1 567E                                   clear_2 568A  
                                 clear_3 5696                            ?_sendCANFrame 003C  
           vscp_handleProtocolEvent@byte 0095                                   floor@i 0093  
                                 floor@x 008F                  __size_of_vscp_getUserID 0014  
                          _vscp_nickname 00BB                            _vscp_errorcnt 004B  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                     _vscp_init_pstorage 5C34                ??_vscp_getSubMinorVersion 000E  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 000E  
                   ??_vscp_newNodeOnline 0044                              ?_ConvertADC 0001  
                     __size_of___asfladd 004A                       __size_of___asfldiv 004A  
                     __size_of___asflmul 004C                               ___fladd@f1 001D  
                             ___fladd@f2 0021                       __size_of___asflsub 004E  
                             ___flge@ff1 000E                               ___flge@ff2 0012  
                       __end_ofexp@coeff 0B48                         __end_oflog@coeff 0B6C  
                        ___lbmod@divisor 000E                               ___altofl@c 008A  
                             ___fldiv@f1 002C                               ___fldiv@f2 0030  
                             ___fldiv@f3 003B                               __accesstop 0060  
                __end_of__initialization 569C                          ___lbmod@counter 0010  
                     _Celsius2Fahrenheit 52A8                               ___flneg@f1 000E  
          __size_of_vscp_getMinorVersion 0002                      ?_vscp_init_pstorage 0001  
                             ___flmul@f1 0060                               ___flmul@f2 0064  
                           eval_poly@res 007D                               ___flsub@f1 0076  
                             ___flsub@f2 007A                               ___fltol@f1 0076  
                        writeEEPROM@data 0010                    __size_of_getVSCPFrame 0078  
                     _vscp_writeRegister 59DE                      _vscp_getControlByte 5A44  
                             ___awtofl@c 0018                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 002E                      ?_Celsius2Fahrenheit 0076  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
                 ___asflmul@multiplicand 0076              __end_of_vscp_check_pstorage 57D0  
                __size_of_vscp_setUserID 0018                          ??i1_WriteTimer0 0003  
                          __end_of_floor 47D8                            __end_of_ldexp 4E5A  
                          __end_of_frexp 50B4                      ?_vscp_writeRegister 0027  
                         ??_sendCANFrame 0042                               ___lwtofl@c 001A  
                   ??_vscp_init_pstorage 0011               __end_of_vscp_getFamilyCode 5C1E  
                          ?__RegsToCANID 000E              __size_of_ECANReceiveMessage 020E  
           __size_of_getCalibrationValue 003E                       sendVSCPFrame@pData 0066  
             __end_of_vscp_getFamilyType 5C14          __size_of_vscp_getManufacturerId 0014  
                vscp_writeRegister@value 0027          __size_of_vscp_setManufacturerId 0018  
               __end_of_vscp_writeAppReg 1870                     ?_vscp_getControlByte 0001  
                 getVSCPFrame@pvscpclass 002D                  __end_of_init_app_eeprom 3416  
                   ??_Celsius2Fahrenheit 0042              __end_of_vscp_setControlByte 5A44  
               __end_of_vscp_writeStdReg 46DC                       __RegsToCANID@Value 0014  
                                ??_floor 0046                                  ??_ldexp 0043  
                                ??_frexp 0014                            ?_setEventData 007C  
                   ??_vscp_writeRegister 0028          __end_of_vscp_handleDropNickname 586E  
                           _getVSCPFrame 51BA                               __pbssBANK0 00B6  
                             __pbssBANK1 0100                              ?_OpenTimer0 0001  
                     __size_of_eval_poly 00C0               __end_of_vscp_getBufferSize 5C44  
                       Celsius2Kelvin@tc 002C                    vscp_writeRegister@reg 0028  
                 ??_ECANSetOperationMode 000E       __size_of_vscp_getRegisterPagesUsed 0002  
                           ?_writeEEPROM 000E                          _writeCoeffs2Ram 4E5A  
                                ?___flge 000E          __end_of_vscp_getSubMinorVersion 5C48  
               ECANSetOperationMode@mode 000E                                  ?___wmul 000E  
                                _B0RXFUL 007107                                  _B1RXFUL 007187  
                   __ECANRxFilterHitInfo 0048                                  _B2RXFUL 007207  
                                _B3RXFUL 007287                                  _B4RXFUL 007307  
                                ?_doWork 0001                  ??_vscp_goBootloaderMode 0011  
                                _B5RXFUL 007387                        __end_of___asfladd 5546  
                      __end_of___asfldiv 54FC                         WriteTimer0@timer 0010  
                              ?___altofl 008A                        __end_of___asflmul 54B2  
                                _ECANCON 000F77                        __end_of___asflsub 541A  
                              ?___flpack 000E                            ??_WriteTimer0 0010  
                       doWork@resistance 0190                      __size_of_ConvertADC 0004  
                              ?___awtofl 0018                           ??__RegsToCANID 0012  
                  sendVSCPFrame@priority 0064                                  _BRGCON1 000F70  
                                _BRGCON2 000F71                                  _BRGCON3 000F72  
                              ?___lwtofl 001A                      vscp_writeStdReg@reg 0021  
           __end_of_vscp_doOneSecondWork 53CC                    ??_vscp_getControlByte 001A  
                                i1l12093 0A6E                       _adc_series_counter 0049  
            ?_vscp_readNicknamePermanent 0001                    sendVSCPFrame@vscptype 0062  
                             _high_alarm 00B7          __end_of_interrupt_at_low_vector 0ABA  
               vscp_readStdReg@code_1139 0024                        sendCANFrame@pdata 0041  
                  _vscp_handleProbeState 4A2E                                  _RXB0CON 000F60  
                                _RXB1CON 000F50                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 5232               __end_of_vscp_getMatrixInfo 5B10  
                                _TXB0CON 000F40                                  _TXB1CON 000F30  
                                _TXB2CON 000F20                           ??_setEventData 0046  
                                _RXFCON0 000DD4                                  _RXFCON1 000DD5  
                          setEventData@v 007C                       _vscp_goActiveState 5AA0  
                 __size_of_sendVSCPFrame 00B6             __end_of_vscp_getMajorVersion 5C4C  
                     __size_of_vscp_init 0048                               _readEEPROM 5BAC  
                 _vscp_getManufacturerId 5B70                   _vscp_setManufacturerId 5B10  
                        _ECANSendMessage 3E0C                      ?_vscp_goActiveState 0001  
                                _OpenADC 531C                                  __Hparam 0000  
                        ??_vscp_getEvent 0032                         ??_Celsius2Kelvin 0030  
                                __Lparam 0000                       _vscp_node_substate 004E  
             ??_vscp_handleProtocolEvent 007F                            ??_getCANFrame 0022  
      __end_of_vscp_getRegisterPagesUsed 5C42                 __size_of_vscp_getMDF_URL 0018  
                                ___aldiv 4AEC                          __size_of___flge 004C  
                                ___fladd 40D6                                  ___fldiv 4D0E  
                                ___flneg 59BA                                  ___lbmod 5946  
                                ___flmul 47D8                                  ___flsub 56E4  
                                ___fltol 4EFA                          __size_of___wmul 003A  
                        getCANFrame@pdlc 0020                                _FIFOEMPTY 007BA7  
                          ?i1_ConvertADC 0001                          __size_of_doWork 0454  
                           __psmallconst 0B00                               ??___altofl 0046  
                   __end_of_init_app_ram 5664                               ??___flpack 0014  
                     _vscp_sendHeartBeat 596E                                  __pcinit 5664  
                             ??___awtofl 001C                           _vscp_deviceURL 0B00  
                      __end_of_eval_poly 496E                                  __ramtop 0600  
                    __size_of_OpenTimer0 001E                                  __ptext0 44B4  
                                __ptext1 3416                                  __ptext2 58C8  
                                __ptext3 54B2                                  __ptext4 54FC  
                                __ptext5 4AEC                                  __ptext6 56A6  
                                __ptext7 4386                                  __ptext8 3A78  
                                __ptext9 59BA                               ??___lwtofl 001E  
                         _vscp_getUserID 5B84                                _T0CONbits 000FD5  
                   ??_vscp_goActiveState 0044                             __size_of_exp 01E4  
                           __size_of_log 012E                    vscp_writeStdReg@value 001B  
                       ___aldiv@dividend 007C                      ?_vscp_sendHeartBeat 0044  
               ??_vscp_handleSetNickname 0012                                  _seconds 00B9  
                                doWork@B 018E                                  doWork@i 019D  
                                doWork@j 0194                                  doWork@v 018A  
                    __end_of_WriteTimer0 5BE4                         ?_init_app_eeprom 0001  
                      vscp_readAppReg@rv 001C                       vscp_getMDF_URL@idx 000F  
                         OpenADC@config2 000E            vscp_handleProtocolEvent@bytes 008C  
                   end_of_initialization 569C                                  exp@sign 00A3  
           __end_of_vscp_handleHeartbeat 5C4E                 __size_of_vscp_getSubzone 000A  
                          __Lmediumconst 0000                  __end_of_writeCoeffs2Ram 4EFA  
                   __end_of_sendCANFrame 561E                               doWork@Rinf 016A  
                     doOneSecondWork@tmp 008E                               doWork@temp 0199  
              vscp_handleProtocolEvent@i 0099                vscp_handleProtocolEvent@j 009A  
              vscp_handleProtocolEvent@k 0093                     ??_vscp_sendHeartBeat 0045  
                         _vscp_sendEvent 586E                   vscp_getControlByte@idx 001A  
                 vscp_setControlByte@idx 0011                        ECANSendMessage@id 0018  
                      ECANSendMessage@pb 0020                         ___aldiv@quotient 0086  
                                postdec1 000FE5                                  postdec2 000FDD  
                __size_of_ECANInitialize 0096                   __size_of_sendTempEvent 0084  
                         _vscp_setUserID 5B28                                  postinc0 000FEE  
                                postinc2 000FDE                           ??i1_ConvertADC 0001  
                 __end_of_vscp_deviceURL 0B20      __end_of_vscp_writeNicknamePermanent 5BD2  
            _vscp_writeNicknamePermanent 5BC0                       __ECANPointBuffer@b 0011  
                          _sendVSCPFrame 4BA8                   __end_of_vscp_getUserID 5B98  
           ?_vscp_getBootLoaderAlgorithm 0001                                _RXM0EXIDM 0078CB  
                      __end_of_vscp_init 55D6                           _vscp_probe_cnt 0050  
                    __end_of_getCANFrame 58C8            __size_of_vscp_restoreDefaults 0008  
                 ?_vscp_handleProbeState 0001                            ??_handle_sync 0087  
               __size_of_vscp_readAppReg 07AC                         ___lbmod@dividend 000F  
                       writeCoeffs2Ram@c 001C                         writeCoeffs2Ram@i 001F  
                       writeCoeffs2Ram@j 0021                              ___fldiv@exp 0040  
                         _vscp_statuscnt 0052                 __size_of_vscp_readStdReg 01B0  
                      readEEPROM@address 0016                             ??_ConvertADC 000E  
             vscp_handleProtocolEvent@cb 0091                  __end_of_ECANSendMessage 3F72  
                      vscp_readStdReg@rv 002A                              ___lbmod@rem 0011  
                            ___flmul@exp 006F                            ?__CANIDToRegs 000E  
                   __end_of__RegsToCANID 40D6                      _getCalibrationValue 56A6  
                            ?_readEEPROM 0016                   __end_of_vscp_sendEvent 589C  
                             _vscp_error 5C30                     _vscp_doOneSecondWork 5378  
                     i1WriteTimer0@timer 0003                               _vscp_timer 011E  
                 __end_of_vscp_setUserID 5B40                 __size_of_doOneSecondWork 07DE  
                 vscp_sendHeartBeat@zone 0045                     __end_of_setEventData 4D0E  
                         ?_sendVSCPFrame 0060                           __end_of___flge 5466  
                   __size_of_writeEEPROM 0026                           __end_of___wmul 5796  
                        ?_vscp_getUserID 0001                           __end_of_doWork 386A  
           __end_of_vscp_getMinorVersion 5C4A                              _WriteTimer0 5BD2  
                   _vscp_getMajorVersion 5C4A                       __end_of_ConvertADC 5C3C  
                   ?_getCalibrationValue 001A                        ??_vscp_getMDF_URL 000E  
          ??_vscp_getBootLoaderAlgorithm 000E                               floor@expon 0097  
                      ?_vscp_writeAppReg 0023                      start_initialization 5664  
                             eval_poly@d 007A                               eval_poly@n 007B  
                             eval_poly@x 0076                               ldexp@value 0081  
        __size_of_vscp_handleSetNickname 001E                              __end_of_exp 3C5C  
                            __end_of_log 44B4                       ??_vscp_writeAppReg 0024  
                          _sendTempEvent 50B4                        ?_vscp_writeStdReg 001B  
                    __CFG_BOREN$BOACTIVE 000000              __size_of_vscp_newNodeOnline 002A  
                           ??_OpenTimer0 000E                       ??_vscp_writeStdReg 001C  
                     _vscp_getFamilyCode 5C14                      __end_of_handle_sync 51BA  
                doOneSecondWork@setpoint 008F                           ??__CANIDToRegs 0015  
                     _vscp_getFamilyType 5C0A                               frexp@value 000E  
                    sendVSCPFrame@nodeid 0063                         ?_writeCoeffs2Ram 0001  
                      _vscp_readRegister 5ADC                     Celsius2Fahrenheit@tc 0076  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 0090  
                  ?_vscp_doOneSecondWork 0001                    ECANReceiveMessage@ptr 001E  
                    ?_vscp_getFamilyCode 000E                       ?_vscp_readRegister 0001  
       __end_of_vscp_handleProtocolEvent 2E4E                          ?_vscp_setUserID 0011  
                    ?_vscp_getFamilyType 000E                    __size_of_init_app_ram 0046  
               ?_vscp_handleDropNickname 0001                   getCalibrationValue@cal 001D  
                      ??_vscp_getSubzone 001A                                 ??___flge 0016  
               __end_of__ECANPointBuffer 52A8                        __CANIDToRegs@type 0014  
                            _getCANFrame 589C                                 ??___wmul 0012  
                               ??_doWork 00A4                       _vscp_getBufferSize 5C42  
            vscp_handleProtocolEvent@len 008D              vscp_handleProtocolEvent@pos 008B  
             __end_of_ECANReceiveMessage 3A78                      ??_vscp_readRegister 002C  
         __size_of_vscp_goBootloaderMode 001E                    ?_vscp_getMajorVersion 0001  
                  ??_getCalibrationValue 001C                    __end_ofi1_WriteTimer0 5BF6  
          __end_of_vscp_goBootloaderMode 5AA0                     _vscp_handleHeartbeat 5C4C  
            __size_of_vscp_init_pstorage 0004                       __end_of_OpenTimer0 5ADC  
                      __size_of___altofl 0048                        __size_of___flpack 00C0  
                              ___asfladd 54FC                      ?_vscp_getBufferSize 0001  
                      __size_of___awtofl 003A                      __size_of_readEEPROM 0014  
                              ___asfldiv 54B2                              __pbssBIGRAM 019E  
                              ___asflmul 5466                                ___asflsub 53CC  
           __size_of_vscp_check_pstorage 003A                     ??_vscp_getFamilyCode 0012  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0046  
                   ??_vscp_getFamilyType 0012                        __size_of___lwtofl 002A  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 0060  
                          __pcstackBANK1 016A                           ?_sendTempEvent 0001  
                       _vscp_alarmstatus 004A              __size_of_Celsius2Fahrenheit 0074  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 0048  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 0011  
                   __end_ofi1_ConvertADC 5C40                            ?_vscp_setGUID 0011  
            __size_of_vscp_writeRegister 0022                         ?_ECANSendMessage 0018  
                      ??_vscp_readAppReg 001A                        sendVSCPFrame@size 0065  
              __end_of_vscp_readRegister 5AF6                             _init_app_ram 561E  
                   getCalibrationValue@i 001F                              _doWork$2275 0172  
                            _doWork$2276 0176                              _doWork$2277 017A  
           __size_of_vscp_setControlByte 0022                            doWork@avarage 0195  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 001B  
                   ??_vscp_getBufferSize 000E                             _current_temp 0100  
                      OpenADC@portconfig 000F                                 ?_OpenADC 000E  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 5AF6  
                 _vscp_handleSetNickname 5A64            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 0067                           _ECANInitialize 4F98  
                               ?___aldiv 007C                                 ?___fladd 001D  
                               ?___fldiv 002C                                __ptext100 5BE4  
                              __ptext101 5C3C                                __ptext102 0000  
                               ?___flneg 000E                                 ?___lbmod 000E  
                               ?___flmul 0060                                 ?___flsub 0076  
                               ?___fltol 0076              __end_of_vscp_getControlByte 5A64  
                    ?_vscp_getMatrixInfo 0001                          vscp_getGUID@idx 001A  
                            __pintcodelo 0818                        ??_doOneSecondWork 0087  
                  ?_vscp_handleHeartbeat 0001         vscp_handleProtocolEvent@len_1156 008F  
                vscp_readStdReg@idx_1140 0029               vscp_setManufacturerId@data 0011  
                           _sendCANFrame 55D6                              __smallconst 0B00  
                             ?___asfladd 002C                        WriteTimer0@timer0 000E  
                             ?___asfldiv 0060                               ?___asflmul 0076  
                             ?___asflsub 007E                           ??_vscp_getGUID 001A  
                              _eval_poly 48AE                              _handle_sync 5138  
                         ??_vscp_getZone 001A           __end_of_vscp_getManufacturerId 5B84  
         __end_of_vscp_setManufacturerId 5B28                    __size_of__RegsToCANID 0164  
       vscp_handleProtocolEvent@pos_1155 008E                           __size_of_floor 00FC  
                         __size_of_ldexp 00A4                           ??_vscp_setGUID 0012  
                         __size_of_frexp 0086                     ??_vscp_getMatrixInfo 000E  
                       _vscp_configtimer 011C                          ___aldiv@divisor 0080  
                        ___aldiv@counter 0084                           ___wmul@product 0014  
                 ??_vscp_doOneSecondWork 007F                   sendVSCPFrame@vscpclass 0060  
                          OpenADC@config 0012                     _vscp_getMinorVersion 5C48  
                              _sendTimer 011A                                 _PIE1bits 000F9D  
                              _low_alarm 00B8                    __size_of_setEventData 00B0  
                 __end_of_ECANInitialize 502E                                 i1u720_20 08A8  
                               i1u720_21 08A6                                 i1u721_20 08BC  
                               i1u721_21 08BA                                 i1u730_20 0A52  
                               i1u722_20 08C6                                 i1u730_21 0A50  
                               i1u722_21 08C4                                 i1u723_20 08D2  
                               i1u723_21 08D0                                 i1u724_20 090C  
                               i1u716_20 083C                                 i1u724_21 090A  
                               i1u716_21 083A                                 i1u725_20 094A  
                               i1u717_20 087E                                 i1u725_21 0948  
                               i1u717_21 087C                                 i1u726_20 0988  
                               i1u718_20 0896                                 i1u726_21 0986  
                               i1u718_21 0894                                 i1u727_20 09C6  
                               i1u719_20 08A0                                 i1u727_21 09C4  
                               i1u719_21 089E                                 i1u728_20 0A04  
                               i1u728_21 0A02                                 i1u729_20 0A42  
                               i1u729_21 0A40                                 _PIR1bits 000F9E  
                               _PIR2bits 000FA1                         ECANSendMessage@i 0039  
                       ECANSendMessage@j 0034                    __end_of_vscp_getEvent 5946  
                               _RXF0EIDH 000F02                                 _RXF0EIDL 000F03  
                               _RXB0OVFL 007BA7                                 _RXF1EIDH 000F06  
                               _RXF1EIDL 000F07                                 _RXB1OVFL 007BA6  
                               _RXF0SIDH 000F00                                 _RXF0SIDL 000F01  
                               _RXF1SIDH 000F04                                 _RXF1SIDL 000F05  
                               _RXM0EIDH 000F1A                                 _RXM0EIDL 000F1B  
                        vscp_getEvent@rv 0032                                 _RXM1EIDH 000F1E  
                               _RXM1EIDL 000F1F                                 _RXFBCON0 000DE0  
                               _RXFBCON1 000DE1                                 _RXFBCON2 000DE2  
                               _RXFBCON3 000DE3                                 _RXFBCON4 000DE4  
                               _RXFBCON5 000DE5                                 _RXFBCON6 000DE6  
                               _RXFBCON7 000DE7                                 _RXM0SIDH 000F18  
                               _RXM0SIDL 000F19                                 _RXM1SIDH 000F1C  
                 ??_vscp_getMajorVersion 000E                                 _RXM1SIDL 000F1D  
             ?_vscp_getRegisterPagesUsed 0001                  ??_vscp_handleProbeState 0044  
                     vscp_setUserID@data 0011                     __end_of__CANIDToRegs 4386  
                             _ADCON0bits 000FC2                        ___wmul@multiplier 000E  
                           __RegsToCANID 3F72                       _vscp_probe_address 004F  
                        ??_sendTempEvent 0085              __size_of_vscp_goActiveState 001E  
                             ?_eval_poly 0076                      getVSCPFrame@pNodeId 0025  
                              _vscp_init 558E                                _vscp_imsg 00BD  
                              _vscp_hour 0120                                _vscp_omsg 00CB  
                       vscp_setGUID@data 0011        __size_of_vscp_handleProtocolEvent 0654  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
   __size_of_vscp_writeNicknamePermanent 0012                         _vscp_page_select 0046  
                           _setEventData 4C5E               __size_of_vscp_readRegister 001A  
                      _measurement_clock 0112                    ?_vscp_getMinorVersion 0001  
                           ??_readEEPROM 0018                 __size_of_init_app_eeprom 05C8  
           __end_of_vscp_restoreDefaults 5C30                                frexp@eptr 0012  
                             _EECON1bits 000FA6                          ?_ECANInitialize 0001  
                               __Hrparam 0000                     ECANReceiveMessage@id 001A  
                           _seconds_temp 010C              __size_of_vscp_sendHeartBeat 0026  
                       __size_of_OpenADC 005C                         ??_vscp_getUserID 001A  
                        _vscp_getMDF_URL 5B40                                 __Lrparam 0000  
                       __CANIDToRegs@val 0010                         __CANIDToRegs@ptr 000E  
                       __size_of___aldiv 00BC                         __size_of___fladd 0160  
                       __size_of___fldiv 00A8                         __size_of___flneg 0024  
                       _vscp_initledfunc 004D                         __size_of___lbmod 0028  
                       __size_of___flmul 00D6                   ??_vscp_handleHeartbeat 000E  
                       __size_of___flsub 003C                         __size_of___fltol 009E  
                               ___altofl 5546                                 ___flpack 496E  
                       getCANFrame@flags 0023                             ?_WriteTimer0 000E  
                               ___awtofl 57D0                         getCANFrame@pdata 0021  
                               ___lwtofl 58C8                           sendTempEvent@i 0086  
                __size_of_Celsius2Kelvin 0034                              ??___asfladd 0032  
                            ??___asfldiv 0042                              ??___asflmul 0042  
                               _exp$2281 009D                              ??___asflsub 0042  
                     __end_of_readEEPROM 5BC0                    __size_ofi1_ConvertADC 0004  
                             ?_vscp_init 0001                                 __ptext10 4DB6  
                               __ptext11 48AE                                 __ptext20 4D0E  
                               __ptext12 46DC                                 __ptext21 5378  
                               __ptext13 4EFA                                 __ptext30 52A8  
                               __ptext22 596E                                 __ptext14 502E  
                               __ptext31 40D6                                 __ptext23 5BF6  
                               __ptext15 541A                                 __ptext40 5A00  
                               __ptext32 580A                                 __ptext24 5C00  
                               __ptext16 5546                                 __ptext41 0B6E  
                               __ptext33 27FA                                 __ptext25 1870  
                               __ptext17 53CC                                 __ptext50 5C44  
                               __ptext42 4E5A                                 __ptext34 5946  
                               __ptext26 5C30                                 __ptext18 56E4  
                               __ptext51 5B70                                 __ptext43 575C  
                               __ptext35 59DE                                 __ptext27 5138  
                               __ptext19 5466                                 __ptext60 558E  
                               __ptext52 5B84                                 __ptext44 5ADC  
                               __ptext36 45C8                                 __ptext28 50B4  
                               __ptext61 5C1E                                 __ptext53 5B40  
                               __ptext45 3C5C                                 __ptext37 5C28  
                               __ptext29 4C5E                                 __ptext70 4BA8  
                               __ptext62 5BAC                                 __ptext54 5B98  
                               __ptext46 5C0A                                 __ptext38 5B10  
                               __ptext71 55D6                                 __ptext63 5A64  
                               __ptext55 5C46                                 __ptext47 5C14  
                               __ptext39 5B28                                 __ptext80 5796  
                               __ptext72 3E0C                                 __ptext64 5C4C  
                               __ptext56 5C48                                 __ptext48 5C40  
                               __ptext81 5C34                                 __ptext73 4236  
                               __ptext65 5A82                                 __ptext57 5C4A  
                               __ptext49 5C42                                 __ptext90 531C  
                               __ptext82 2E4E                                 __ptext74 591C  
                               __ptext66 5AF6                                 __ptext58 58F2  
                               __ptext91 5ABE                                 __ptext83 5A44  
                               __ptext75 51BA                                 __ptext67 4A2E  
                               __ptext59 583E                                 __ptext92 561E  
                               __ptext84 5A22                                 __ptext76 589C  
                               __ptext68 5AA0                                 __ptext93 5C38  
                               __ptext85 5BC0                                 __ptext77 386A  
                               __ptext69 586E                                 __ptext94 5BD2  
                               __ptext86 5994                                 __ptext78 3F72  
                               __ptext95 57D0                                 __ptext87 5720  
                               __ptext79 5232                                 __ptext96 47D8  
                               __ptext88 4F98                                 __ptext97 496E  
                               __ptext89 5B58                                 __ptext98 204E  
         vscp_goBootloaderMode@algorithm 0011                vscp_sendHeartBeat@subzone 0044  
                          ?_getVSCPFrame 0024                         ??_vscp_sendEvent 0043  
                        _vscp_getSubzone 5BF6                         ??_vscp_setUserID 0012  
                          __size_of_main 0114                            __size_of_init 003C  
              __size_of_vscp_writeAppReg 0D02                      _vscp_check_pstorage 5796  
                          init_app_ram@i 000E           vscp_handleProtocolEvent@i_1154 0094  
         vscp_handleProtocolEvent@i_1157 0098           vscp_handleProtocolEvent@i_1165 0092  
                       doOneSecondWork@i 0091                     __end_of_vscp_getGUID 5BAC  
                          ??_writeEEPROM 0011                __size_of_vscp_writeStdReg 0114  
                    ECANSendMessage@data 001C                 ECANSendMessage@tempBSEL0 0035  
                           ?_getCANFrame 0020                      ECANSendMessage@mode 0032  
                   __end_of_vscp_getZone 5C0A                      ECANSendMessage@temp 0038  
                      ?__ECANPointBuffer 000E                        vscp_setUserID@idx 0012  
                   __end_of_vscp_setGUID 5A22                       vscp_readAppReg@reg 001B  
                     vscp_readAppReg@pos 001A                             i1_ConvertADC 5C3C  
                       vscp_sendEvent@rv 0043                       ??__ECANPointBuffer 0011  
         vscp_handleProtocolEvent@offset 008A                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 0012                      _vscp_setControlByte 5A22  
                               exp@coeff 0B20                    ___flmul@f3_as_product 0070  
                               log@coeff 0B48                          _vscp_readAppReg 204E  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F50  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
                            ??_eval_poly 0042             ??_vscp_readNicknamePermanent 001A  
                    ECANReceiveMessage@i 001B                          _vscp_guid_reset 004C  
                        _vscp_readStdReg 3C5C             vscp_handleDropNickname@bytes 001A  
             __end_of_vscp_newNodeOnline 591C                       _ECANReceiveMessage 386A  
                         ??_getVSCPFrame 0029                          _vscp_initbtncnt 00BA  
                        sendVSCPFrame@id 007B                                 intlevel1 0000  
                 ??_vscp_getMinorVersion 000E                  vscp_getMatrixInfo@pData 000E  
                __end_of_vscp_getMDF_URL 5B58                     ?_vscp_setControlByte 0011  
                          _timeout_clock 0116                      ?_ECANReceiveMessage 0015  
                ?_vscp_handleSetNickname 0001         __size_of_vscp_getSubMinorVersion 0002  
                        _vscp_node_state 00BC                             handle_sync@i 0089  
                        _doOneSecondWork 1870                             ??_vscp_error 000E  
                ECANSendMessage@msgFlags 001E                      vscp_getMatrixInfo@i 000F  
                vscp_setControlByte@ctrl 0012              __end_of_getCalibrationValue 56E4  
                     ECANSendMessage@ptr 003A                        ??_init_app_eeprom 0011  
                  __size_of__CANIDToRegs 0150                           readEEPROM@data 0019  
               __size_of_writeCoeffs2Ram 00A0      __size_of_vscp_readNicknamePermanent 000A  
             __end_of_vscp_init_pstorage 5C38      __end_of_vscp_getBootLoaderAlgorithm 5C46  
            _vscp_getBootLoaderAlgorithm 5C44         __size_of_interrupt_at_low_vector 02A2  
                 ECANSendMessage@dataLen 001D                      __end_of_writeEEPROM 59BA  
                    __ECANPointBuffer@pt 0012                     ??_ECANReceiveMessage 0018  
                  ??_vscp_check_pstorage 001B                   ECANSendMessage@buffers 0033  
                  _vscp_goBootloaderMode 5A82               __end_of_Celsius2Fahrenheit 531C  
           __end_of_ECANSetOperationMode 5B70                     _vscp_restoreDefaults 5C28  
            __size_of_vscp_getFamilyCode 000A                              ??_vscp_init 001A  
                __end_of_vscp_getSubzone 5C00                             ?_handle_sync 0001  
            __size_of_vscp_getFamilyType 000A                             ___aldiv@sign 0085  
                             _RXM1EXIDEN 0078EB               __end_of_vscp_writeRegister 5A00  
                     __end_of_vscp_error 5C34                   ECANSendMessage@tempPtr 0036  
                   _adc_conversion_flags 00B6           __end_of_vscp_handleSetNickname 5A82  
     vscp_handleProtocolEvent@bytes_1161 0096                    ??_vscp_setControlByte 0012  
                   vscp_readRegister@reg 002C                             ___fladd@exp1 002B  
                           ___fladd@exp2 002A                             ___fladd@sign 0029  
                           __CANIDToRegs 4236                   __size_ofi1_WriteTimer0 0012  
      vscp_handleProtocolEvent@page_save 0086                            ___asfladd@f1p 002C  
            __size_of_vscp_getBufferSize 0002                             ___asfladd@f2 002E  
               __size_of_ECANSendMessage 0166                             ___asfldiv@f2 0062  
