

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Tue Mar  8 12:32:06 2016

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18LF26K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	text79,global,reloc=2,class=CODE,delta=1
    94                           	psect	text80,global,reloc=2,class=CODE,delta=1
    95                           	psect	text81,global,reloc=2,class=CODE,delta=1
    96                           	psect	text82,global,reloc=2,class=CODE,delta=1
    97                           	psect	text83,global,reloc=2,class=CODE,delta=1
    98                           	psect	text84,global,reloc=2,class=CODE,delta=1
    99                           	psect	text85,global,reloc=2,class=CODE,delta=1
   100                           	psect	text86,global,reloc=2,class=CODE,delta=1
   101                           	psect	text87,global,reloc=2,class=CODE,delta=1
   102                           	psect	text88,global,reloc=2,class=CODE,delta=1
   103                           	psect	text89,global,reloc=2,class=CODE,delta=1
   104                           	psect	text90,global,reloc=2,class=CODE,delta=1
   105                           	psect	text91,global,reloc=2,class=CODE,delta=1
   106                           	psect	text92,global,reloc=2,class=CODE,delta=1
   107                           	psect	text93,global,reloc=2,class=CODE,delta=1
   108                           	psect	text94,global,reloc=2,class=CODE,delta=1
   109                           	psect	text95,global,reloc=2,class=CODE,delta=1
   110                           	psect	text96,global,reloc=2,class=CODE,delta=1
   111                           	psect	text97,global,reloc=2,class=CODE,delta=1
   112                           	psect	text98,global,reloc=2,class=CODE,delta=1
   113                           	psect	text99,global,reloc=2,class=CODE,delta=1
   114                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   115                           	psect	text101,global,reloc=2,class=CODE,delta=1
   116                           	psect	text102,global,reloc=2,class=CODE,delta=1
   117                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   118                           	psect	text103,global,reloc=2,class=CODE,delta=1
   119                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   120                           	psect	pa_nodes,global,class=CODE,delta=1
   121  0000                     tblptru	equ	0xFF8
   122                           tblptrh	equ	0xFF7
   123                           tblptrl	equ	0xFF6
   124                           tablat	equ	0xFF5
   125                           prodh	equ	0xFF4
   126                           prodl	equ	0xFF3
   127                           intcon	equ	0xFF2
   128                           wreg	equ	0xFE8
   129                           indf1	equ	0xFE7
   130                           fsr1h	equ	0xFE2
   131                           fsr1l	equ	0xFE1
   132                           indf2	equ	0xFDF
   133                           postinc2	equ	0xFDE
   134                           postdec2	equ	0xFDD
   135                           plusw2	equ	0xFDB
   136                           fsr2h	equ	0xFDA
   137                           fsr2l	equ	0xFD9
   138                           status	equ	0xFD8
   139                           
   140                           	psect	smallconst
   141  000F00                     __psmallconst:
   142                           	opt stack 0
   143  000F00                     _vscp_deviceURL:
   144                           	opt stack 0
   145  000F00  77                 	db	119
   146  000F01  77                 	db	119
   147  000F02  77                 	db	119
   148  000F03  2E                 	db	46
   149  000F04  65                 	db	101
   150  000F05  75                 	db	117
   151  000F06  72                 	db	114
   152  000F07  6F                 	db	111
   153  000F08  73                 	db	115
   154  000F09  6F                 	db	111
   155  000F0A  75                 	db	117
   156  000F0B  72                 	db	114
   157  000F0C  63                 	db	99
   158  000F0D  65                 	db	101
   159  000F0E  2E                 	db	46
   160  000F0F  73                 	db	115
   161  000F10  65                 	db	101
   162  000F11  2F                 	db	47
   163  000F12  6E                 	db	110
   164  000F13  74                 	db	116
   165  000F14  63                 	db	99
   166  000F15  31                 	db	49
   167  000F16  30                 	db	48
   168  000F17  4B                 	db	75
   169  000F18  41                 	db	65
   170  000F19  5F                 	db	95
   171  000F1A  33                 	db	51
   172  000F1B  2E                 	db	46
   173  000F1C  78                 	db	120
   174  000F1D  6D                 	db	109
   175  000F1E  6C                 	db	108
   176  000F1F  00                 	db	0
   177  000F20                     __end_of_vscp_deviceURL:
   178                           	opt stack 0
   179  000F20                     exp@coeff:
   180                           	opt stack 0
   181  000F20  0000               	dw	0
   182  000F22  3F80               	dw	16256
   183  000F24  7218               	dw	29208
   184  000F26  3F31               	dw	16177
   185  000F28  FDF0               	dw	65008
   186  000F2A  3E75               	dw	15989
   187  000F2C  5847               	dw	22599
   188  000F2E  3D63               	dw	15715
   189  000F30  9558               	dw	38232
   190  000F32  3C1D               	dw	15389
   191  000F34  C482               	dw	50306
   192  000F36  3AAE               	dw	15022
   193  000F38  78A8               	dw	30888
   194  000F3A  3921               	dw	14625
   195  000F3C  93EF               	dw	37871
   196  000F3E  3780               	dw	14208
   197  000F40  92A0               	dw	37536
   198  000F42  35A7               	dw	13735
   199  000F44  5646               	dw	22086
   200  000F46  3415               	dw	13333
   201  000F48                     __end_ofexp@coeff:
   202                           	opt stack 0
   203  000F48                     log@coeff:
   204                           	opt stack 0
   205  000F48  0000               	dw	0
   206  000F4A  0000               	dw	0
   207  000F4C  FFC4               	dw	65476
   208  000F4E  3F7F               	dw	16255
   209  000F50  EF80               	dw	61312
   210  000F52  BEFF               	dw	48895
   211  000F54  E190               	dw	57744
   212  000F56  3EA9               	dw	16041
   213  000F58  82EC               	dw	33516
   214  000F5A  BE76               	dw	48758
   215  000F5C  AD82               	dw	44418
   216  000F5E  3E2B               	dw	15915
   217  000F60  3C0E               	dw	15374
   218  000F62  BDC3               	dw	48579
   219  000F64  D187               	dw	53639
   220  000F66  3D13               	dw	15635
   221  000F68  7841               	dw	30785
   222  000F6A  BBD3               	dw	48083
   223  000F6C                     __end_oflog@coeff:
   224                           	opt stack 0
   225  0000                     _ADCON0	set	4034
   226  0000                     _ADCON0bits	set	4034
   227  0000                     _ADCON1	set	4033
   228  0000                     _ADCON2	set	4032
   229  0000                     _ADRESH	set	4036
   230  0000                     _ADRESL	set	4035
   231  0000                     _BRGCON1	set	3651
   232  0000                     _BRGCON2	set	3652
   233  0000                     _BRGCON3	set	3653
   234  0000                     _BSEL0	set	3709
   235  0000                     _CANCON	set	3951
   236  0000                     _CIOCON	set	3952
   237  0000                     _ECANCON	set	3954
   238  0000                     _EEADR	set	3956
   239  0000                     _EEADRH	set	3957
   240  0000                     _EECON1bits	set	3967
   241  0000                     _EECON2	set	3966
   242  0000                     _EEDATA	set	3955
   243  0000                     _INTCONbits	set	4082
   244  0000                     _MSEL0	set	3705
   245  0000                     _MSEL1	set	3706
   246  0000                     _MSEL2	set	3707
   247  0000                     _PIE1bits	set	3997
   248  0000                     _PIR1bits	set	3998
   249  0000                     _PORTC	set	3970
   250  0000                     _RXB1CONbits	set	3888
   251  0000                     _RXF0EIDH	set	3810
   252  0000                     _RXF0EIDL	set	3811
   253  0000                     _RXF0SIDH	set	3808
   254  0000                     _RXF0SIDL	set	3809
   255  0000                     _RXF1EIDH	set	3814
   256  0000                     _RXF1EIDL	set	3815
   257  0000                     _RXF1SIDH	set	3812
   258  0000                     _RXF1SIDL	set	3813
   259  0000                     _RXFBCON0	set	3697
   260  0000                     _RXFBCON1	set	3698
   261  0000                     _RXFBCON2	set	3699
   262  0000                     _RXFBCON3	set	3700
   263  0000                     _RXFBCON4	set	3701
   264  0000                     _RXFBCON5	set	3702
   265  0000                     _RXFBCON6	set	3703
   266  0000                     _RXFBCON7	set	3704
   267  0000                     _RXFCON0	set	3654
   268  0000                     _RXFCON1	set	3655
   269  0000                     _RXM0EIDH	set	3834
   270  0000                     _RXM0EIDL	set	3835
   271  0000                     _RXM0SIDH	set	3832
   272  0000                     _RXM0SIDL	set	3833
   273  0000                     _RXM1EIDH	set	3838
   274  0000                     _RXM1EIDL	set	3839
   275  0000                     _RXM1SIDH	set	3836
   276  0000                     _RXM1SIDL	set	3837
   277  0000                     _T0CON	set	4053
   278  0000                     _T0CONbits	set	4053
   279  0000                     _TMR0H	set	4055
   280  0000                     _TMR0L	set	4054
   281  0000                     _TRISA	set	3986
   282  0000                     _TRISB	set	3987
   283  0000                     _TRISC	set	3988
   284  0000                     _B0RXFUL	set	29703
   285  0000                     _B0TXEN	set	29674
   286  0000                     _B1RXFUL	set	29831
   287  0000                     _B1TXEN	set	29675
   288  0000                     _B2RXFUL	set	29959
   289  0000                     _B2TXEN	set	29676
   290  0000                     _B3RXFUL	set	30087
   291  0000                     _B3TXEN	set	29677
   292  0000                     _B4RXFUL	set	30215
   293  0000                     _B4TXEN	set	29678
   294  0000                     _B5RXFUL	set	30343
   295  0000                     _B5TXEN	set	29679
   296  0000                     _FIFOEMPTY	set	31631
   297  0000                     _IRXIF	set	31679
   298  0000                     _MDSEL0	set	31638
   299  0000                     _MDSEL1	set	31639
   300  0000                     _RXB0FILHIT0	set	31488
   301  0000                     _RXB0FUL	set	31495
   302  0000                     _RXB0IF	set	31672
   303  0000                     _RXB0OVFL	set	31631
   304  0000                     _RXB1IF	set	31673
   305  0000                     _RXB1OVFL	set	31630
   306  0000                     _RXM0EXIDM	set	30667
   307  0000                     _RXM1EXIDEN	set	30699
   308  0000                     _B0CON	set	3712
   309  0000                     _B1CON	set	3728
   310  0000                     _B2CON	set	3744
   311  0000                     _B3CON	set	3760
   312  0000                     _B4CON	set	3776
   313  0000                     _B5CON	set	3792
   314  0000                     _RXB0CON	set	3936
   315  0000                     _RXB1CON	set	3888
   316  0000                     _TXB0CON	set	3872
   317  0000                     _TXB1CON	set	3856
   318  0000                     _TXB2CON	set	3840
   319                           
   320                           ; #config settings
   321  000F6C  00                 	db	0	; dummy byte at the end
   322  0000                     tblptru	equ	0xFF8
   323                           tblptrh	equ	0xFF7
   324                           tblptrl	equ	0xFF6
   325                           tablat	equ	0xFF5
   326                           prodh	equ	0xFF4
   327                           prodl	equ	0xFF3
   328                           intcon	equ	0xFF2
   329                           wreg	equ	0xFE8
   330                           indf1	equ	0xFE7
   331                           fsr1h	equ	0xFE2
   332                           fsr1l	equ	0xFE1
   333                           indf2	equ	0xFDF
   334                           postinc2	equ	0xFDE
   335                           postdec2	equ	0xFDD
   336                           plusw2	equ	0xFDB
   337                           fsr2h	equ	0xFDA
   338                           fsr2l	equ	0xFD9
   339                           status	equ	0xFD8
   340                           
   341                           	psect	cinit
   342  005A5E                     __pcinit:
   343                           	opt stack 0
   344  005A5E                     start_initialization:
   345                           	opt stack 0
   346  005A5E                     __initialization:
   347                           	opt stack 0
   348                           
   349                           ; Clear objects allocated to BIGRAM (960 bytes)
   350  005A5E  EE01  F09E         	lfsr	0,__pbssBIGRAM
   351  005A62  EE13 F0C0          	lfsr	1,960
   352  005A66                     clear_0:
   353  005A66  6AEE               	clrf	postinc0,c
   354  005A68  50E5               	movf	postdec1,w,c
   355  005A6A  50E1               	movf	fsr1l,w,c
   356  005A6C  E1FC               	bnz	clear_0
   357  005A6E  50E2               	movf	fsr1h,w,c
   358  005A70  E1FA               	bnz	clear_0
   359                           
   360                           ; Clear objects allocated to BANK1 (106 bytes)
   361  005A72  EE01  F000         	lfsr	0,__pbssBANK1
   362  005A76  0E6A               	movlw	106
   363  005A78                     clear_1:
   364  005A78  6AEE               	clrf	postinc0,c
   365  005A7A  06E8               	decf	wreg,f,c
   366  005A7C  E1FD               	bnz	clear_1
   367                           
   368                           ; Clear objects allocated to BANK0 (35 bytes)
   369  005A7E  EE00  F0B6         	lfsr	0,__pbssBANK0
   370  005A82  0E23               	movlw	35
   371  005A84                     clear_2:
   372  005A84  6AEE               	clrf	postinc0,c
   373  005A86  06E8               	decf	wreg,f,c
   374  005A88  E1FD               	bnz	clear_2
   375                           
   376                           ; Clear objects allocated to COMRAM (13 bytes)
   377  005A8A  EE00  F046         	lfsr	0,__pbssCOMRAM
   378  005A8E  0E0D               	movlw	13
   379  005A90                     clear_3:
   380  005A90  6AEE               	clrf	postinc0,c
   381  005A92  06E8               	decf	wreg,f,c
   382  005A94  E1FD               	bnz	clear_3
   383  005A96                     end_of_initialization:
   384                           	opt stack 0
   385  005A96                     __end_of__initialization:
   386                           	opt stack 0
   387  005A96  0100               	movlb	0
   388  005A98  EF02  F024         	goto	_main	;jump to C main() function
   389                           tblptru	equ	0xFF8
   390                           tblptrh	equ	0xFF7
   391                           tblptrl	equ	0xFF6
   392                           tablat	equ	0xFF5
   393                           prodh	equ	0xFF4
   394                           prodl	equ	0xFF3
   395                           intcon	equ	0xFF2
   396                           postinc0	equ	0xFEE
   397                           wreg	equ	0xFE8
   398                           indf1	equ	0xFE7
   399                           postdec1	equ	0xFE5
   400                           fsr1h	equ	0xFE2
   401                           fsr1l	equ	0xFE1
   402                           indf2	equ	0xFDF
   403                           postinc2	equ	0xFDE
   404                           postdec2	equ	0xFDD
   405                           plusw2	equ	0xFDB
   406                           fsr2h	equ	0xFDA
   407                           fsr2l	equ	0xFD9
   408                           status	equ	0xFD8
   409                           
   410                           	psect	bssCOMRAM
   411  000046                     __pbssCOMRAM:
   412                           	opt stack 0
   413  000046                     _vscp_page_select:
   414                           	opt stack 0
   415  000046                     	ds	2
   416  000048                     __ECANRxFilterHitInfo:
   417                           	opt stack 0
   418  000048                     	ds	1
   419  000049                     _adc_series_counter:
   420                           	opt stack 0
   421  000049                     	ds	1
   422  00004A                     _vscp_alarmstatus:
   423                           	opt stack 0
   424  00004A                     	ds	1
   425  00004B                     _vscp_errorcnt:
   426                           	opt stack 0
   427  00004B                     	ds	1
   428  00004C                     _vscp_guid_reset:
   429                           	opt stack 0
   430  00004C                     	ds	1
   431  00004D                     _vscp_initledfunc:
   432                           	opt stack 0
   433  00004D                     	ds	1
   434  00004E                     _vscp_node_substate:
   435                           	opt stack 0
   436  00004E                     	ds	1
   437  00004F                     _vscp_probe_address:
   438                           	opt stack 0
   439  00004F                     	ds	1
   440  000050                     _vscp_probe_cnt:
   441                           	opt stack 0
   442  000050                     	ds	1
   443  000051                     _vscp_second:
   444                           	opt stack 0
   445  000051                     	ds	1
   446  000052                     _vscp_statuscnt:
   447                           	opt stack 0
   448  000052                     	ds	1
   449                           tblptru	equ	0xFF8
   450                           tblptrh	equ	0xFF7
   451                           tblptrl	equ	0xFF6
   452                           tablat	equ	0xFF5
   453                           prodh	equ	0xFF4
   454                           prodl	equ	0xFF3
   455                           intcon	equ	0xFF2
   456                           postinc0	equ	0xFEE
   457                           wreg	equ	0xFE8
   458                           indf1	equ	0xFE7
   459                           postdec1	equ	0xFE5
   460                           fsr1h	equ	0xFE2
   461                           fsr1l	equ	0xFE1
   462                           indf2	equ	0xFDF
   463                           postinc2	equ	0xFDE
   464                           postdec2	equ	0xFDD
   465                           plusw2	equ	0xFDB
   466                           fsr2h	equ	0xFDA
   467                           fsr2l	equ	0xFD9
   468                           status	equ	0xFD8
   469                           
   470                           	psect	bssBANK0
   471  0000B6                     __pbssBANK0:
   472                           	opt stack 0
   473  0000B6                     _adc_conversion_flags:
   474                           	opt stack 0
   475  0000B6                     	ds	1
   476  0000B7                     _high_alarm:
   477                           	opt stack 0
   478  0000B7                     	ds	1
   479  0000B8                     _low_alarm:
   480                           	opt stack 0
   481  0000B8                     	ds	1
   482  0000B9                     _seconds:
   483                           	opt stack 0
   484  0000B9                     	ds	1
   485  0000BA                     _vscp_initbtncnt:
   486                           	opt stack 0
   487  0000BA                     	ds	1
   488  0000BB                     _vscp_nickname:
   489                           	opt stack 0
   490  0000BB                     	ds	1
   491  0000BC                     _vscp_node_state:
   492                           	opt stack 0
   493  0000BC                     	ds	1
   494  0000BD                     _vscp_imsg:
   495                           	opt stack 0
   496  0000BD                     	ds	14
   497  0000CB                     _vscp_omsg:
   498                           	opt stack 0
   499  0000CB                     	ds	14
   500                           tblptru	equ	0xFF8
   501                           tblptrh	equ	0xFF7
   502                           tblptrl	equ	0xFF6
   503                           tablat	equ	0xFF5
   504                           prodh	equ	0xFF4
   505                           prodl	equ	0xFF3
   506                           intcon	equ	0xFF2
   507                           postinc0	equ	0xFEE
   508                           wreg	equ	0xFE8
   509                           indf1	equ	0xFE7
   510                           postdec1	equ	0xFE5
   511                           fsr1h	equ	0xFE2
   512                           fsr1l	equ	0xFE1
   513                           indf2	equ	0xFDF
   514                           postinc2	equ	0xFDE
   515                           postdec2	equ	0xFDD
   516                           plusw2	equ	0xFDB
   517                           fsr2h	equ	0xFDA
   518                           fsr2l	equ	0xFD9
   519                           status	equ	0xFD8
   520                           
   521                           	psect	bssBANK1
   522  000100                     __pbssBANK1:
   523                           	opt stack 0
   524  000100                     _current_temp:
   525                           	opt stack 0
   526  000100                     	ds	12
   527  00010C                     _seconds_temp:
   528                           	opt stack 0
   529  00010C                     	ds	6
   530  000112                     _measurement_clock:
   531                           	opt stack 0
   532  000112                     	ds	4
   533  000116                     _timeout_clock:
   534                           	opt stack 0
   535  000116                     	ds	4
   536  00011A                     _sendTimer:
   537                           	opt stack 0
   538  00011A                     	ds	2
   539  00011C                     _vscp_configtimer:
   540                           	opt stack 0
   541  00011C                     	ds	2
   542  00011E                     _vscp_timer:
   543                           	opt stack 0
   544  00011E                     	ds	2
   545  000120                     _vscp_hour:
   546                           	opt stack 0
   547  000120                     	ds	1
   548  000121                     _vscp_minute:
   549                           	opt stack 0
   550  000121                     	ds	1
   551  000122                     _sh_coefficients:
   552                           	opt stack 0
   553  000122                     	ds	72
   554                           tblptru	equ	0xFF8
   555                           tblptrh	equ	0xFF7
   556                           tblptrl	equ	0xFF6
   557                           tablat	equ	0xFF5
   558                           prodh	equ	0xFF4
   559                           prodl	equ	0xFF3
   560                           intcon	equ	0xFF2
   561                           postinc0	equ	0xFEE
   562                           wreg	equ	0xFE8
   563                           indf1	equ	0xFE7
   564                           postdec1	equ	0xFE5
   565                           fsr1h	equ	0xFE2
   566                           fsr1l	equ	0xFE1
   567                           indf2	equ	0xFDF
   568                           postinc2	equ	0xFDE
   569                           postdec2	equ	0xFDD
   570                           plusw2	equ	0xFDB
   571                           fsr2h	equ	0xFDA
   572                           fsr2l	equ	0xFD9
   573                           status	equ	0xFD8
   574                           
   575                           	psect	bssBIGRAM
   576  00019E                     __pbssBIGRAM:
   577                           	opt stack 0
   578  00019E                     _adc:
   579                           	opt stack 0
   580  00019E                     	ds	960
   581                           tblptru	equ	0xFF8
   582                           tblptrh	equ	0xFF7
   583                           tblptrl	equ	0xFF6
   584                           tablat	equ	0xFF5
   585                           prodh	equ	0xFF4
   586                           prodl	equ	0xFF3
   587                           intcon	equ	0xFF2
   588                           postinc0	equ	0xFEE
   589                           wreg	equ	0xFE8
   590                           indf1	equ	0xFE7
   591                           postdec1	equ	0xFE5
   592                           fsr1h	equ	0xFE2
   593                           fsr1l	equ	0xFE1
   594                           indf2	equ	0xFDF
   595                           postinc2	equ	0xFDE
   596                           postdec2	equ	0xFDD
   597                           plusw2	equ	0xFDB
   598                           fsr2h	equ	0xFDA
   599                           fsr2l	equ	0xFD9
   600                           status	equ	0xFD8
   601                           
   602                           	psect	cstackBANK1
   603  00016A                     __pcstackBANK1:
   604                           	opt stack 0
   605  00016A                     doWork@Rinf:
   606                           	opt stack 0
   607                           
   608                           ; 4 bytes @ 0x0
   609  00016A                     	ds	4
   610  00016E                     doWork@calVoltage:
   611                           	opt stack 0
   612                           
   613                           ; 4 bytes @ 0x4
   614  00016E                     	ds	4
   615  000172                     _doWork$2235:
   616                           	opt stack 0
   617                           
   618                           ; 4 bytes @ 0x8
   619  000172                     	ds	4
   620  000176                     _doWork$2236:
   621                           	opt stack 0
   622                           
   623                           ; 4 bytes @ 0xC
   624  000176                     	ds	4
   625  00017A                     _doWork$2237:
   626                           	opt stack 0
   627                           
   628                           ; 4 bytes @ 0x10
   629  00017A                     	ds	16
   630  00018A                     doWork@v:
   631                           	opt stack 0
   632                           
   633                           ; 4 bytes @ 0x20
   634  00018A                     	ds	4
   635  00018E                     doWork@B:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x24
   639  00018E                     	ds	2
   640  000190                     doWork@resistance:
   641                           	opt stack 0
   642                           
   643                           ; 4 bytes @ 0x26
   644  000190                     	ds	4
   645  000194                     doWork@j:
   646                           	opt stack 0
   647                           
   648                           ; 1 bytes @ 0x2A
   649  000194                     	ds	1
   650  000195                     doWork@avarage:
   651                           	opt stack 0
   652                           
   653                           ; 4 bytes @ 0x2B
   654  000195                     	ds	4
   655  000199                     doWork@temp:
   656                           	opt stack 0
   657                           
   658                           ; 4 bytes @ 0x2F
   659  000199                     	ds	4
   660  00019D                     doWork@i:
   661                           	opt stack 0
   662                           
   663                           ; 1 bytes @ 0x33
   664  00019D                     	ds	1
   665                           tblptru	equ	0xFF8
   666                           tblptrh	equ	0xFF7
   667                           tblptrl	equ	0xFF6
   668                           tablat	equ	0xFF5
   669                           prodh	equ	0xFF4
   670                           prodl	equ	0xFF3
   671                           intcon	equ	0xFF2
   672                           postinc0	equ	0xFEE
   673                           wreg	equ	0xFE8
   674                           indf1	equ	0xFE7
   675                           postdec1	equ	0xFE5
   676                           fsr1h	equ	0xFE2
   677                           fsr1l	equ	0xFE1
   678                           indf2	equ	0xFDF
   679                           postinc2	equ	0xFDE
   680                           postdec2	equ	0xFDD
   681                           plusw2	equ	0xFDB
   682                           fsr2h	equ	0xFDA
   683                           fsr2l	equ	0xFD9
   684                           status	equ	0xFD8
   685                           
   686                           	psect	cstackBANK0
   687  000060                     __pcstackBANK0:
   688                           	opt stack 0
   689  000060                     ?_sendVSCPFrame:
   690                           	opt stack 0
   691  000060                     ?___flmul:
   692                           	opt stack 0
   693  000060                     ?___asfldiv:
   694                           	opt stack 0
   695  000060                     sendVSCPFrame@vscpclass:
   696                           	opt stack 0
   697  000060                     ___asfldiv@f1p:
   698                           	opt stack 0
   699  000060                     ___flmul@f1:
   700                           	opt stack 0
   701                           
   702                           ; 4 bytes @ 0x0
   703  000060                     	ds	2
   704  000062                     sendVSCPFrame@vscptype:
   705                           	opt stack 0
   706  000062                     ___asfldiv@f2:
   707                           	opt stack 0
   708                           
   709                           ; 4 bytes @ 0x2
   710  000062                     	ds	1
   711  000063                     sendVSCPFrame@nodeid:
   712                           	opt stack 0
   713                           
   714                           ; 1 bytes @ 0x3
   715  000063                     	ds	1
   716  000064                     sendVSCPFrame@priority:
   717                           	opt stack 0
   718  000064                     ___flmul@f2:
   719                           	opt stack 0
   720                           
   721                           ; 4 bytes @ 0x4
   722  000064                     	ds	1
   723  000065                     sendVSCPFrame@size:
   724                           	opt stack 0
   725                           
   726                           ; 1 bytes @ 0x5
   727  000065                     	ds	1
   728  000066                     sendVSCPFrame@pData:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0x6
   732  000066                     	ds	1
   733  000067                     ??_sendVSCPFrame:
   734                           
   735                           ; 0 bytes @ 0x7
   736  000067                     	ds	8
   737  00006F                     ___flmul@exp:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0xF
   741  00006F                     	ds	1
   742  000070                     ___flmul@f3_as_product:
   743                           	opt stack 0
   744                           
   745                           ; 4 bytes @ 0x10
   746  000070                     	ds	4
   747  000074                     ___flmul@cntr:
   748                           	opt stack 0
   749                           
   750                           ; 1 bytes @ 0x14
   751  000074                     	ds	1
   752  000075                     ___flmul@sign:
   753                           	opt stack 0
   754                           
   755                           ; 1 bytes @ 0x15
   756  000075                     	ds	1
   757  000076                     ?_Celsius2Fahrenheit:
   758                           	opt stack 0
   759  000076                     ?___flsub:
   760                           	opt stack 0
   761  000076                     ?_eval_poly:
   762                           	opt stack 0
   763  000076                     ?___asflmul:
   764                           	opt stack 0
   765  000076                     ?___fltol:
   766                           	opt stack 0
   767  000076                     Celsius2Fahrenheit@tc:
   768                           	opt stack 0
   769  000076                     ___asflmul@multiplicand:
   770                           	opt stack 0
   771  000076                     ___flsub@f1:
   772                           	opt stack 0
   773  000076                     ___fltol@f1:
   774                           	opt stack 0
   775  000076                     eval_poly@x:
   776                           	opt stack 0
   777                           
   778                           ; 4 bytes @ 0x16
   779  000076                     	ds	4
   780  00007A                     ___fltol@sign1:
   781                           	opt stack 0
   782  00007A                     eval_poly@d:
   783                           	opt stack 0
   784  00007A                     ___flsub@f2:
   785                           	opt stack 0
   786                           
   787                           ; 4 bytes @ 0x1A
   788  00007A                     	ds	1
   789  00007B                     ___fltol@exp1:
   790                           	opt stack 0
   791  00007B                     eval_poly@n:
   792                           	opt stack 0
   793  00007B                     sendVSCPFrame@id:
   794                           	opt stack 0
   795                           
   796                           ; 4 bytes @ 0x1B
   797  00007B                     	ds	1
   798  00007C                     ?_setEventData:
   799                           	opt stack 0
   800  00007C                     ?___aldiv:
   801                           	opt stack 0
   802  00007C                     setEventData@v:
   803                           	opt stack 0
   804  00007C                     ___aldiv@dividend:
   805                           	opt stack 0
   806                           
   807                           ; 4 bytes @ 0x1C
   808  00007C                     	ds	1
   809  00007D                     eval_poly@res:
   810                           	opt stack 0
   811                           
   812                           ; 4 bytes @ 0x1D
   813  00007D                     	ds	1
   814  00007E                     ?___asflsub:
   815                           	opt stack 0
   816  00007E                     setEventData@unit:
   817                           	opt stack 0
   818  00007E                     ___asflsub@f1p:
   819                           	opt stack 0
   820                           
   821                           ; 2 bytes @ 0x1E
   822  00007E                     	ds	1
   823  00007F                     ??_vscp_handleProtocolEvent:
   824  00007F                     ??_vscp_doOneSecondWork:
   825  00007F                     setEventData@newval:
   826                           	opt stack 0
   827                           
   828                           ; 4 bytes @ 0x1F
   829  00007F                     	ds	1
   830  000080                     ___aldiv@divisor:
   831                           	opt stack 0
   832  000080                     ___asflsub@f2:
   833                           	opt stack 0
   834                           
   835                           ; 4 bytes @ 0x20
   836  000080                     	ds	1
   837  000081                     ?_log:
   838                           	opt stack 0
   839  000081                     ?_ldexp:
   840                           	opt stack 0
   841  000081                     ldexp@value:
   842                           	opt stack 0
   843  000081                     log@x:
   844                           	opt stack 0
   845                           
   846                           ; 4 bytes @ 0x21
   847  000081                     	ds	2
   848  000083                     setEventData@ival:
   849                           	opt stack 0
   850                           
   851                           ; 2 bytes @ 0x23
   852  000083                     	ds	1
   853  000084                     ___aldiv@counter:
   854                           	opt stack 0
   855                           
   856                           ; 1 bytes @ 0x24
   857  000084                     	ds	1
   858  000085                     ??_sendTempEvent:
   859  000085                     ___aldiv@sign:
   860                           	opt stack 0
   861  000085                     ldexp@newexp:
   862                           	opt stack 0
   863                           
   864                           ; 2 bytes @ 0x25
   865  000085                     	ds	1
   866  000086                     sendTempEvent@i:
   867                           	opt stack 0
   868  000086                     vscp_handleProtocolEvent@page_save:
   869                           	opt stack 0
   870  000086                     ___aldiv@quotient:
   871                           	opt stack 0
   872                           
   873                           ; 4 bytes @ 0x26
   874  000086                     	ds	1
   875  000087                     ??_handle_sync:
   876  000087                     ??_doOneSecondWork:
   877                           
   878                           ; 0 bytes @ 0x27
   879  000087                     	ds	1
   880  000088                     vscp_handleProtocolEvent@page_save_1030:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x28
   884  000088                     	ds	1
   885  000089                     handle_sync@i:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x29
   889  000089                     	ds	1
   890  00008A                     ?___altofl:
   891                           	opt stack 0
   892  00008A                     vscp_handleProtocolEvent@offset:
   893                           	opt stack 0
   894  00008A                     ___altofl@c:
   895                           	opt stack 0
   896                           
   897                           ; 4 bytes @ 0x2A
   898  00008A                     	ds	1
   899  00008B                     vscp_handleProtocolEvent@pos:
   900                           	opt stack 0
   901                           
   902                           ; 1 bytes @ 0x2B
   903  00008B                     	ds	1
   904  00008C                     vscp_handleProtocolEvent@bytes:
   905                           	opt stack 0
   906                           
   907                           ; 1 bytes @ 0x2C
   908  00008C                     	ds	1
   909  00008D                     vscp_handleProtocolEvent@len:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x2D
   913  00008D                     	ds	1
   914  00008E                     doOneSecondWork@tmp:
   915                           	opt stack 0
   916  00008E                     vscp_handleProtocolEvent@pos_1019:
   917                           	opt stack 0
   918  00008E                     ___altofl@sign:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x2E
   922  00008E                     	ds	1
   923  00008F                     ?_floor:
   924                           	opt stack 0
   925  00008F                     vscp_handleProtocolEvent@len_1020:
   926                           	opt stack 0
   927  00008F                     doOneSecondWork@setpoint:
   928                           	opt stack 0
   929  00008F                     floor@x:
   930                           	opt stack 0
   931                           
   932                           ; 4 bytes @ 0x2F
   933  00008F                     	ds	1
   934  000090                     vscp_handleProtocolEvent@bytes_this_time:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x30
   938  000090                     	ds	1
   939  000091                     doOneSecondWork@i:
   940                           	opt stack 0
   941  000091                     vscp_handleProtocolEvent@cb:
   942                           	opt stack 0
   943                           
   944                           ; 1 bytes @ 0x31
   945  000091                     	ds	1
   946  000092                     vscp_handleProtocolEvent@i_1029:
   947                           	opt stack 0
   948                           
   949                           ; 1 bytes @ 0x32
   950  000092                     	ds	1
   951  000093                     vscp_handleProtocolEvent@k:
   952                           	opt stack 0
   953  000093                     floor@i:
   954                           	opt stack 0
   955                           
   956                           ; 4 bytes @ 0x33
   957  000093                     	ds	1
   958  000094                     vscp_handleProtocolEvent@i_1018:
   959                           	opt stack 0
   960                           
   961                           ; 1 bytes @ 0x34
   962  000094                     	ds	1
   963  000095                     vscp_handleProtocolEvent@byte:
   964                           	opt stack 0
   965                           
   966                           ; 1 bytes @ 0x35
   967  000095                     	ds	1
   968  000096                     vscp_handleProtocolEvent@bytes_1025:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0x36
   972  000096                     	ds	1
   973  000097                     floor@expon:
   974                           	opt stack 0
   975                           
   976                           ; 2 bytes @ 0x37
   977  000097                     	ds	1
   978  000098                     vscp_handleProtocolEvent@i_1021:
   979                           	opt stack 0
   980                           
   981                           ; 1 bytes @ 0x38
   982  000098                     	ds	1
   983  000099                     ?_exp:
   984                           	opt stack 0
   985  000099                     vscp_handleProtocolEvent@i:
   986                           	opt stack 0
   987  000099                     exp@x:
   988                           	opt stack 0
   989                           
   990                           ; 4 bytes @ 0x39
   991  000099                     	ds	1
   992  00009A                     vscp_handleProtocolEvent@j:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x3A
   996  00009A                     	ds	3
   997  00009D                     _exp$2241:
   998                           	opt stack 0
   999                           
  1000                           ; 4 bytes @ 0x3D
  1001  00009D                     	ds	4
  1002  0000A1                     exp@exponent:
  1003                           	opt stack 0
  1004                           
  1005                           ; 2 bytes @ 0x41
  1006  0000A1                     	ds	2
  1007  0000A3                     exp@sign:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x43
  1011  0000A3                     	ds	1
  1012  0000A4                     ??_doWork:
  1013                           
  1014                           ; 0 bytes @ 0x44
  1015  0000A4                     	ds	14
  1016  0000B2                     main@i:
  1017                           	opt stack 0
  1018                           
  1019                           ; 4 bytes @ 0x52
  1020  0000B2                     	ds	4
  1021                           tblptru	equ	0xFF8
  1022                           tblptrh	equ	0xFF7
  1023                           tblptrl	equ	0xFF6
  1024                           tablat	equ	0xFF5
  1025                           prodh	equ	0xFF4
  1026                           prodl	equ	0xFF3
  1027                           intcon	equ	0xFF2
  1028                           postinc0	equ	0xFEE
  1029                           wreg	equ	0xFE8
  1030                           indf1	equ	0xFE7
  1031                           postdec1	equ	0xFE5
  1032                           fsr1h	equ	0xFE2
  1033                           fsr1l	equ	0xFE1
  1034                           indf2	equ	0xFDF
  1035                           postinc2	equ	0xFDE
  1036                           postdec2	equ	0xFDD
  1037                           plusw2	equ	0xFDB
  1038                           fsr2h	equ	0xFDA
  1039                           fsr2l	equ	0xFD9
  1040                           status	equ	0xFD8
  1041                           
  1042                           	psect	cstackCOMRAM
  1043  000001                     __pcstackCOMRAM:
  1044                           	opt stack 0
  1045  000001                     ?i1_WriteTimer0:
  1046                           	opt stack 0
  1047  000001                     i1WriteTimer0@timer0:
  1048                           	opt stack 0
  1049                           
  1050                           ; 2 bytes @ 0x0
  1051  000001                     	ds	2
  1052  000003                     i1WriteTimer0@timer:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x2
  1056  000003                     	ds	2
  1057  000005                     ??_interrupt_at_low_vector:
  1058                           
  1059                           ; 0 bytes @ 0x4
  1060  000005                     	ds	9
  1061  00000E                     ?_WriteTimer0:
  1062                           	opt stack 0
  1063  00000E                     ?_Write_b_eep:
  1064                           	opt stack 0
  1065  00000E                     ?_OpenADC:
  1066                           	opt stack 0
  1067  00000E                     ?__CANIDToRegs:
  1068                           	opt stack 0
  1069  00000E                     ?__RegsToCANID:
  1070                           	opt stack 0
  1071  00000E                     ??_vscp_getMDF_URL:
  1072  00000E                     ?___flge:
  1073                           	opt stack 0
  1074  00000E                     ?___lbmod:
  1075                           	opt stack 0
  1076  00000E                     ?__ECANPointBuffer:
  1077                           	opt stack 0
  1078  00000E                     ?___wmul:
  1079                           	opt stack 0
  1080  00000E                     ?___flpack:
  1081                           	opt stack 0
  1082  00000E                     ?_frexp:
  1083                           	opt stack 0
  1084  00000E                     ?_vscp_getFamilyCode:
  1085                           	opt stack 0
  1086  00000E                     ?_vscp_getFamilyType:
  1087                           	opt stack 0
  1088  00000E                     ?___flneg:
  1089                           	opt stack 0
  1090  00000E                     init_app_ram@i:
  1091                           	opt stack 0
  1092  00000E                     vscp_getMatrixInfo@pData:
  1093                           	opt stack 0
  1094  00000E                     ECANSetOperationMode@mode:
  1095                           	opt stack 0
  1096  00000E                     OpenADC@config2:
  1097                           	opt stack 0
  1098  00000E                     OpenTimer0@config:
  1099                           	opt stack 0
  1100  00000E                     ___lbmod@divisor:
  1101                           	opt stack 0
  1102  00000E                     __CANIDToRegs@ptr:
  1103                           	opt stack 0
  1104  00000E                     __RegsToCANID@ptr:
  1105                           	opt stack 0
  1106  00000E                     Write_b_eep@badd:
  1107                           	opt stack 0
  1108  00000E                     WriteTimer0@timer0:
  1109                           	opt stack 0
  1110  00000E                     ___wmul@multiplier:
  1111                           	opt stack 0
  1112  00000E                     ___flpack@arg:
  1113                           	opt stack 0
  1114  00000E                     ___flge@ff1:
  1115                           	opt stack 0
  1116  00000E                     ___flneg@f1:
  1117                           	opt stack 0
  1118  00000E                     frexp@value:
  1119                           	opt stack 0
  1120                           
  1121                           ; 4 bytes @ 0xD
  1122  00000E                     	ds	1
  1123  00000F                     vscp_getMDF_URL@idx:
  1124                           	opt stack 0
  1125  00000F                     vscp_getMatrixInfo@i:
  1126                           	opt stack 0
  1127  00000F                     OpenADC@config3:
  1128                           	opt stack 0
  1129  00000F                     ___lbmod@dividend:
  1130                           	opt stack 0
  1131                           
  1132                           ; 1 bytes @ 0xE
  1133  00000F                     	ds	1
  1134  000010                     ??_OpenADC:
  1135  000010                     __RegsToCANID@val:
  1136                           	opt stack 0
  1137  000010                     Write_b_eep@bdat:
  1138                           	opt stack 0
  1139  000010                     ___lbmod@counter:
  1140                           	opt stack 0
  1141  000010                     WriteTimer0@timer:
  1142                           	opt stack 0
  1143  000010                     ___wmul@multiplicand:
  1144                           	opt stack 0
  1145  000010                     __CANIDToRegs@val:
  1146                           	opt stack 0
  1147                           
  1148                           ; 4 bytes @ 0xF
  1149  000010                     	ds	1
  1150  000011                     __RegsToCANID@type:
  1151                           	opt stack 0
  1152  000011                     __ECANPointBuffer@b:
  1153                           	opt stack 0
  1154  000011                     Write_b_eep@GIE_BIT_VAL:
  1155                           	opt stack 0
  1156  000011                     ___lbmod@rem:
  1157                           	opt stack 0
  1158                           
  1159                           ; 1 bytes @ 0x10
  1160  000011                     	ds	1
  1161  000012                     ??__RegsToCANID:
  1162  000012                     ?_vscp_setGUID:
  1163                           	opt stack 0
  1164  000012                     ?_vscp_setUserID:
  1165                           	opt stack 0
  1166  000012                     ?_vscp_setManufacturerId:
  1167                           	opt stack 0
  1168  000012                     ?_vscp_setControlByte:
  1169                           	opt stack 0
  1170  000012                     vscp_setGUID@data:
  1171                           	opt stack 0
  1172  000012                     vscp_setUserID@data:
  1173                           	opt stack 0
  1174  000012                     vscp_setManufacturerId@data:
  1175                           	opt stack 0
  1176  000012                     vscp_goBootloaderMode@algorithm:
  1177                           	opt stack 0
  1178  000012                     vscp_writeNicknamePermanent@nickname:
  1179                           	opt stack 0
  1180  000012                     vscp_setControlByte@idx:
  1181                           	opt stack 0
  1182  000012                     OpenADC@config:
  1183                           	opt stack 0
  1184  000012                     ___flpack@exp:
  1185                           	opt stack 0
  1186  000012                     __ECANPointBuffer@pt:
  1187                           	opt stack 0
  1188  000012                     frexp@eptr:
  1189                           	opt stack 0
  1190  000012                     ___flge@ff2:
  1191                           	opt stack 0
  1192                           
  1193                           ; 4 bytes @ 0x11
  1194  000012                     	ds	1
  1195  000013                     vscp_setGUID@idx:
  1196                           	opt stack 0
  1197  000013                     vscp_setUserID@idx:
  1198                           	opt stack 0
  1199  000013                     vscp_setManufacturerId@idx:
  1200                           	opt stack 0
  1201  000013                     vscp_setControlByte@ctrl:
  1202                           	opt stack 0
  1203  000013                     ___flpack@sign:
  1204                           	opt stack 0
  1205                           
  1206                           ; 1 bytes @ 0x12
  1207  000013                     	ds	1
  1208  000014                     ??___flpack:
  1209  000014                     ??_frexp:
  1210  000014                     __CANIDToRegs@type:
  1211                           	opt stack 0
  1212  000014                     __RegsToCANID@Value:
  1213                           	opt stack 0
  1214  000014                     ___wmul@product:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0x13
  1218  000014                     	ds	1
  1219  000015                     ??__CANIDToRegs:
  1220  000015                     ?_ECANReceiveMessage:
  1221                           	opt stack 0
  1222  000015                     ECANReceiveMessage@data:
  1223                           	opt stack 0
  1224                           
  1225                           ; 1 bytes @ 0x14
  1226  000015                     	ds	1
  1227  000016                     ?_Read_b_eep:
  1228                           	opt stack 0
  1229  000016                     ECANReceiveMessage@dataLen:
  1230                           	opt stack 0
  1231  000016                     Read_b_eep@badd:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0x15
  1235  000016                     	ds	1
  1236  000017                     ECANReceiveMessage@msgFlags:
  1237                           	opt stack 0
  1238  000017                     __CANIDToRegs@Value:
  1239                           	opt stack 0
  1240                           
  1241                           ; 1 bytes @ 0x16
  1242  000017                     	ds	1
  1243  000018                     ??_writeCoeffs2Ram:
  1244  000018                     ?_ECANSendMessage:
  1245                           	opt stack 0
  1246  000018                     ?_getCalibrationValue:
  1247                           	opt stack 0
  1248  000018                     ?___awtofl:
  1249                           	opt stack 0
  1250  000018                     ?___lwtofl:
  1251                           	opt stack 0
  1252  000018                     vscp_readAppReg@pos:
  1253                           	opt stack 0
  1254  000018                     vscp_getGUID@idx:
  1255                           	opt stack 0
  1256  000018                     vscp_getUserID@idx:
  1257                           	opt stack 0
  1258  000018                     vscp_getManufacturerId@idx:
  1259                           	opt stack 0
  1260  000018                     vscp_getControlByte@idx:
  1261                           	opt stack 0
  1262  000018                     vscp_handleDropNickname@bytes:
  1263                           	opt stack 0
  1264  000018                     ECANReceiveMessage@savedPtr:
  1265                           	opt stack 0
  1266  000018                     ___awtofl@c:
  1267                           	opt stack 0
  1268  000018                     ___lwtofl@c:
  1269                           	opt stack 0
  1270  000018                     ECANSendMessage@id:
  1271                           	opt stack 0
  1272                           
  1273                           ; 4 bytes @ 0x17
  1274  000018                     	ds	1
  1275  000019                     ??_vscp_readStdReg:
  1276  000019                     ?_vscp_writeStdReg:
  1277                           	opt stack 0
  1278  000019                     vscp_readAppReg@reg:
  1279                           	opt stack 0
  1280  000019                     vscp_writeStdReg@value:
  1281                           	opt stack 0
  1282                           
  1283                           ; 1 bytes @ 0x18
  1284  000019                     	ds	1
  1285  00001A                     ??_getCalibrationValue:
  1286  00001A                     ??_vscp_writeStdReg:
  1287  00001A                     vscp_readAppReg@rv:
  1288                           	opt stack 0
  1289  00001A                     ECANReceiveMessage@id:
  1290                           	opt stack 0
  1291  00001A                     writeCoeffs2Ram@c:
  1292                           	opt stack 0
  1293                           
  1294                           ; 3 bytes @ 0x19
  1295  00001A                     	ds	1
  1296  00001B                     ECANReceiveMessage@i:
  1297                           	opt stack 0
  1298  00001B                     getCalibrationValue@cal:
  1299                           	opt stack 0
  1300                           
  1301                           ; 2 bytes @ 0x1A
  1302  00001B                     	ds	1
  1303  00001C                     ECANSendMessage@data:
  1304                           	opt stack 0
  1305  00001C                     ECANReceiveMessage@mode:
  1306                           	opt stack 0
  1307                           
  1308                           ; 1 bytes @ 0x1B
  1309  00001C                     	ds	1
  1310  00001D                     ?___fladd:
  1311                           	opt stack 0
  1312  00001D                     getCalibrationValue@i:
  1313                           	opt stack 0
  1314  00001D                     ECANSendMessage@dataLen:
  1315                           	opt stack 0
  1316  00001D                     ECANReceiveMessage@temp:
  1317                           	opt stack 0
  1318  00001D                     writeCoeffs2Ram@i:
  1319                           	opt stack 0
  1320  00001D                     ___fladd@f1:
  1321                           	opt stack 0
  1322                           
  1323                           ; 4 bytes @ 0x1C
  1324  00001D                     	ds	1
  1325  00001E                     ECANSendMessage@msgFlags:
  1326                           	opt stack 0
  1327  00001E                     vscp_writeStdReg@rv:
  1328                           	opt stack 0
  1329  00001E                     ___awtofl@sign:
  1330                           	opt stack 0
  1331  00001E                     ECANReceiveMessage@ptr:
  1332                           	opt stack 0
  1333  00001E                     vscp_readStdReg@code:
  1334                           	opt stack 0
  1335                           
  1336                           ; 4 bytes @ 0x1D
  1337  00001E                     	ds	1
  1338  00001F                     ??_ECANSendMessage:
  1339  00001F                     vscp_writeStdReg@reg:
  1340                           	opt stack 0
  1341  00001F                     writeCoeffs2Ram@j:
  1342                           	opt stack 0
  1343                           
  1344                           ; 2 bytes @ 0x1E
  1345  00001F                     	ds	1
  1346  000020                     ?_getCANFrame:
  1347                           	opt stack 0
  1348  000020                     getCANFrame@pdlc:
  1349                           	opt stack 0
  1350  000020                     ECANSendMessage@pb:
  1351                           	opt stack 0
  1352                           
  1353                           ; 18 bytes @ 0x1F
  1354  000020                     	ds	1
  1355  000021                     ?_vscp_writeAppReg:
  1356                           	opt stack 0
  1357  000021                     vscp_writeAppReg@val:
  1358                           	opt stack 0
  1359  000021                     getCANFrame@pdata:
  1360                           	opt stack 0
  1361  000021                     ___fladd@f2:
  1362                           	opt stack 0
  1363                           
  1364                           ; 4 bytes @ 0x20
  1365  000021                     	ds	1
  1366  000022                     vscp_writeAppReg@pos:
  1367                           	opt stack 0
  1368  000022                     getCANFrame@pid:
  1369                           	opt stack 0
  1370  000022                     vscp_readStdReg@code_1003:
  1371                           	opt stack 0
  1372                           
  1373                           ; 4 bytes @ 0x21
  1374  000022                     	ds	1
  1375  000023                     vscp_writeAppReg@reg:
  1376                           	opt stack 0
  1377  000023                     getCANFrame@flags:
  1378                           	opt stack 0
  1379                           
  1380                           ; 1 bytes @ 0x22
  1381  000023                     	ds	1
  1382  000024                     ?_getVSCPFrame:
  1383                           	opt stack 0
  1384  000024                     vscp_writeAppReg@rv:
  1385                           	opt stack 0
  1386  000024                     getVSCPFrame@pvscptype:
  1387                           	opt stack 0
  1388                           
  1389                           ; 1 bytes @ 0x23
  1390  000024                     	ds	1
  1391  000025                     ??___fladd:
  1392  000025                     ?_vscp_writeRegister:
  1393                           	opt stack 0
  1394  000025                     getVSCPFrame@pNodeId:
  1395                           	opt stack 0
  1396  000025                     vscp_writeRegister@value:
  1397                           	opt stack 0
  1398                           
  1399                           ; 1 bytes @ 0x24
  1400  000025                     	ds	1
  1401  000026                     getVSCPFrame@pPriority:
  1402                           	opt stack 0
  1403  000026                     vscp_readStdReg@idx:
  1404                           	opt stack 0
  1405  000026                     vscp_writeRegister@reg:
  1406                           	opt stack 0
  1407                           
  1408                           ; 1 bytes @ 0x25
  1409  000026                     	ds	1
  1410  000027                     getVSCPFrame@pSize:
  1411                           	opt stack 0
  1412  000027                     vscp_readStdReg@idx_1004:
  1413                           	opt stack 0
  1414                           
  1415                           ; 1 bytes @ 0x26
  1416  000027                     	ds	1
  1417  000028                     getVSCPFrame@pData:
  1418                           	opt stack 0
  1419  000028                     vscp_readStdReg@rv:
  1420                           	opt stack 0
  1421                           
  1422                           ; 1 bytes @ 0x27
  1423  000028                     	ds	1
  1424  000029                     ??_getVSCPFrame:
  1425  000029                     vscp_readStdReg@reg:
  1426                           	opt stack 0
  1427  000029                     ___fladd@sign:
  1428                           	opt stack 0
  1429                           
  1430                           ; 1 bytes @ 0x28
  1431  000029                     	ds	1
  1432  00002A                     vscp_readRegister@reg:
  1433                           	opt stack 0
  1434  00002A                     ___fladd@exp2:
  1435                           	opt stack 0
  1436                           
  1437                           ; 1 bytes @ 0x29
  1438  00002A                     	ds	1
  1439  00002B                     ___fladd@exp1:
  1440                           	opt stack 0
  1441                           
  1442                           ; 1 bytes @ 0x2A
  1443  00002B                     	ds	1
  1444  00002C                     ?_Celsius2Kelvin:
  1445                           	opt stack 0
  1446  00002C                     ?___fldiv:
  1447                           	opt stack 0
  1448  00002C                     ?___asfladd:
  1449                           	opt stack 0
  1450  00002C                     ___asfladd@f1p:
  1451                           	opt stack 0
  1452  00002C                     Celsius2Kelvin@tc:
  1453                           	opt stack 0
  1454  00002C                     ___fldiv@f1:
  1455                           	opt stack 0
  1456                           
  1457                           ; 4 bytes @ 0x2B
  1458  00002C                     	ds	1
  1459  00002D                     getVSCPFrame@pvscpclass:
  1460                           	opt stack 0
  1461                           
  1462                           ; 1 bytes @ 0x2C
  1463  00002D                     	ds	1
  1464  00002E                     getVSCPFrame@id:
  1465                           	opt stack 0
  1466  00002E                     ___asfladd@f2:
  1467                           	opt stack 0
  1468                           
  1469                           ; 4 bytes @ 0x2D
  1470  00002E                     	ds	2
  1471  000030                     ___fldiv@f2:
  1472                           	opt stack 0
  1473                           
  1474                           ; 4 bytes @ 0x2F
  1475  000030                     	ds	2
  1476  000032                     ECANSendMessage@mode:
  1477                           	opt stack 0
  1478  000032                     vscp_getEvent@rv:
  1479                           	opt stack 0
  1480                           
  1481                           ; 1 bytes @ 0x31
  1482  000032                     	ds	1
  1483  000033                     ECANSendMessage@buffers:
  1484                           	opt stack 0
  1485                           
  1486                           ; 1 bytes @ 0x32
  1487  000033                     	ds	1
  1488  000034                     ECANSendMessage@j:
  1489                           	opt stack 0
  1490                           
  1491                           ; 1 bytes @ 0x33
  1492  000034                     	ds	1
  1493  000035                     ECANSendMessage@tempBSEL0:
  1494                           	opt stack 0
  1495                           
  1496                           ; 1 bytes @ 0x34
  1497  000035                     	ds	1
  1498  000036                     ECANSendMessage@tempPtr:
  1499                           	opt stack 0
  1500                           
  1501                           ; 2 bytes @ 0x35
  1502  000036                     	ds	2
  1503  000038                     ECANSendMessage@temp:
  1504                           	opt stack 0
  1505                           
  1506                           ; 1 bytes @ 0x37
  1507  000038                     	ds	1
  1508  000039                     ECANSendMessage@i:
  1509                           	opt stack 0
  1510                           
  1511                           ; 1 bytes @ 0x38
  1512  000039                     	ds	1
  1513  00003A                     ECANSendMessage@ptr:
  1514                           	opt stack 0
  1515                           
  1516                           ; 2 bytes @ 0x39
  1517  00003A                     	ds	1
  1518  00003B                     ___fldiv@f3:
  1519                           	opt stack 0
  1520                           
  1521                           ; 4 bytes @ 0x3A
  1522  00003B                     	ds	1
  1523  00003C                     ?_sendCANFrame:
  1524                           	opt stack 0
  1525  00003C                     sendCANFrame@id:
  1526                           	opt stack 0
  1527                           
  1528                           ; 4 bytes @ 0x3B
  1529  00003C                     	ds	3
  1530  00003F                     ___fldiv@cntr:
  1531                           	opt stack 0
  1532                           
  1533                           ; 1 bytes @ 0x3E
  1534  00003F                     	ds	1
  1535  000040                     sendCANFrame@dlc:
  1536                           	opt stack 0
  1537  000040                     ___fldiv@exp:
  1538                           	opt stack 0
  1539                           
  1540                           ; 1 bytes @ 0x3F
  1541  000040                     	ds	1
  1542  000041                     sendCANFrame@pdata:
  1543                           	opt stack 0
  1544  000041                     ___fldiv@sign:
  1545                           	opt stack 0
  1546                           
  1547                           ; 1 bytes @ 0x40
  1548  000041                     	ds	1
  1549  000042                     ??_eval_poly:
  1550  000042                     ??___fltol:
  1551  000042                     sendCANFrame@rv:
  1552                           	opt stack 0
  1553  000042                     ___asflmul@mp:
  1554                           	opt stack 0
  1555                           
  1556                           ; 1 bytes @ 0x41
  1557  000042                     	ds	1
  1558  000043                     ??_ldexp:
  1559  000043                     vscp_sendEvent@rv:
  1560                           	opt stack 0
  1561  000043                     log@exponent:
  1562                           	opt stack 0
  1563                           
  1564                           ; 2 bytes @ 0x42
  1565  000043                     	ds	1
  1566  000044                     ?_vscp_sendHeartBeat:
  1567                           	opt stack 0
  1568  000044                     ??_vscp_newNodeOnline:
  1569  000044                     vscp_sendHeartBeat@subzone:
  1570                           	opt stack 0
  1571                           
  1572                           ; 1 bytes @ 0x43
  1573  000044                     	ds	1
  1574  000045                     vscp_sendHeartBeat@zone:
  1575                           	opt stack 0
  1576                           
  1577                           ; 1 bytes @ 0x44
  1578  000045                     	ds	1
  1579  000046                     tblptru	equ	0xFF8
  1580                           tblptrh	equ	0xFF7
  1581                           tblptrl	equ	0xFF6
  1582                           tablat	equ	0xFF5
  1583                           prodh	equ	0xFF4
  1584                           prodl	equ	0xFF3
  1585                           intcon	equ	0xFF2
  1586                           postinc0	equ	0xFEE
  1587                           wreg	equ	0xFE8
  1588                           indf1	equ	0xFE7
  1589                           postdec1	equ	0xFE5
  1590                           fsr1h	equ	0xFE2
  1591                           fsr1l	equ	0xFE1
  1592                           indf2	equ	0xFDF
  1593                           postinc2	equ	0xFDE
  1594                           postdec2	equ	0xFDD
  1595                           plusw2	equ	0xFDB
  1596                           fsr2h	equ	0xFDA
  1597                           fsr2l	equ	0xFD9
  1598                           status	equ	0xFD8
  1599                           
  1600                           ; 0 bytes @ 0x45
  1601 ;;
  1602 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1603 ;;
  1604 ;; *************** function _main *****************
  1605 ;; Defined at:
  1606 ;;		line 333 in file "../main.c"
  1607 ;; Parameters:    Size  Location     Type
  1608 ;;		None
  1609 ;; Auto vars:     Size  Location     Type
  1610 ;;  i               4   82[BANK0 ] unsigned long 
  1611 ;; Return value:  Size  Location     Type
  1612 ;;		None               void
  1613 ;; Registers used:
  1614 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : F/1
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1621 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1623 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1624 ;;Total ram usage:        4 bytes
  1625 ;; Hardware stack levels required when called:    9
  1626 ;; This function calls:
  1627 ;;		_init
  1628 ;;		_vscp_check_pstorage
  1629 ;;		_init_app_eeprom
  1630 ;;		_vscp_init
  1631 ;;		_Busy_eep
  1632 ;;		_Write_b_eep
  1633 ;;		_vscp_getEvent
  1634 ;;		_vscp_goActiveState
  1635 ;;		_vscp_handleProbeState
  1636 ;;		_vscp_handleProtocolEvent
  1637 ;;		_handle_sync
  1638 ;;		_vscp_error
  1639 ;;		_doOneSecondWork
  1640 ;;		_vscp_doOneSecondWork
  1641 ;;		_doWork
  1642 ;; This function is called by:
  1643 ;;		Startup code after reset
  1644 ;; This function uses a non-reentrant model
  1645 ;;
  1646                           
  1647                           	psect	text0
  1648  004804                     __ptext0:
  1649                           	opt stack 0
  1650  004804                     _main:
  1651                           	opt stack 22
  1652                           
  1653                           ;main.c: 334: uint32_t i;
  1654                           ;main.c: 336: init();
  1655                           
  1656                           ;incstack = 0
  1657                           ;incstack = 0
  1658  004804  ECAA  F02D         	call	_init	;wreg free
  1659                           
  1660                           ;main.c: 340: if ( !vscp_check_pstorage() ) {
  1661  004808  EC02  F02E         	call	_vscp_check_pstorage	;wreg free
  1662  00480C  0900               	iorlw	0
  1663  00480E  B4D8               	btfsc	status,2,c
  1664                           
  1665                           ;main.c: 343: init_app_eeprom();
  1666  004810  ECDD  F012         	call	_init_app_eeprom	;wreg free
  1667                           
  1668                           ;main.c: 345: }
  1669                           ;main.c: 347: vscp_init();
  1670  004814  ECE7  F02C         	call	_vscp_init	;wreg free
  1671  004818                     l172:
  1672                           
  1673                           ; BSR set to: 1
  1674  004818  0004               	clrwdt		;# 
  1675                           
  1676                           ;main.c: 353: if ( ( vscp_initbtncnt > 250 ) &&
  1677                           ;main.c: 354: ( 0x01 != vscp_node_state ) ) {
  1678  00481A  0EFA               	movlw	250
  1679  00481C  0100               	movlb	0	; () banked
  1680  00481E  65BA               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1681  004820  D00E               	goto	l13479
  1682                           
  1683                           ; BSR set to: 0
  1684  004822  05BC               	decf	_vscp_node_state& (0+255),w,b
  1685  004824  E00C               	bz	l13479
  1686                           
  1687                           ; BSR set to: 0
  1688                           ;main.c: 357: vscp_nickname = 0xff;
  1689  004826  69BB               	setf	_vscp_nickname& (0+255),b
  1690                           
  1691                           ; BSR set to: 0
  1692                           ;main.c: 358: (Busy_eep(), Write_b_eep(0x01,0xff));
  1693  004828  EC3D  F030         	call	_Busy_eep	;wreg free
  1694  00482C  6A0F               	clrf	?_Write_b_eep+1,c
  1695  00482E  0E01               	movlw	1
  1696  004830  6E0E               	movwf	?_Write_b_eep,c
  1697  004832  0EFF               	movlw	255
  1698  004834  6810               	setf	?_Write_b_eep+2,c
  1699  004836  ECC8  F02D         	call	_Write_b_eep	;wreg free
  1700                           
  1701                           ;main.c: 359: vscp_init();
  1702  00483A  ECE7  F02C         	call	_vscp_init	;wreg free
  1703  00483E                     l13479:
  1704                           
  1705                           ;main.c: 361: }
  1706                           ;main.c: 365: vscp_imsg.flags = 0;
  1707  00483E  0100               	movlb	0	; () banked
  1708  004840  6BBD               	clrf	_vscp_imsg& (0+255),b
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;main.c: 366: vscp_getEvent();
  1712  004842  EC7F  F02E         	call	_vscp_getEvent	;wreg free
  1713                           
  1714                           ;main.c: 369: switch (vscp_node_state) {
  1715  004846  D024               	goto	l13509
  1716  004848                     l13483:
  1717                           
  1718                           ; BSR set to: 0
  1719                           ;main.c: 374: if (0xff == vscp_nickname) {
  1720  004848  29BB               	incf	_vscp_nickname& (0+255),w,b
  1721  00484A  E103               	bnz	l13487
  1722                           
  1723                           ; BSR set to: 0
  1724                           ;main.c: 376: vscp_node_state = 0x01;
  1725  00484C  0E01               	movlw	1
  1726  00484E  6FBC               	movwf	_vscp_node_state& (0+255),b
  1727                           
  1728                           ;main.c: 377: }
  1729  004850  D02B               	goto	l13511
  1730  004852                     l13487:
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;main.c: 378: else {
  1734                           ;main.c: 380: vscp_node_state = 0x03;
  1735  004852  0E03               	movlw	3
  1736  004854  6FBC               	movwf	_vscp_node_state& (0+255),b
  1737  004856                     l13489:
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;main.c: 381: vscp_goActiveState();
  1741  004856  EC5F  F02F         	call	_vscp_goActiveState	;wreg free
  1742  00485A  D026               	goto	l13511
  1743  00485C                     l13491:
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;main.c: 386: vscp_handleProbeState();
  1747  00485C  EC87  F026         	call	_vscp_handleProbeState	;wreg free
  1748                           
  1749                           ;main.c: 387: break;
  1750  004860  D023               	goto	l13511
  1751  004862                     l181:
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;main.c: 396: if (vscp_imsg.flags & 0x80) {
  1755  004862  AFBD               	btfss	_vscp_imsg& (0+255),7,b
  1756  004864  D021               	goto	l13511
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;main.c: 398: if ( 0 == vscp_imsg.vscp_class ) {
  1760  004866  51C0               	movf	(_vscp_imsg+3)& (0+255),w,b
  1761  004868  11BF               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1762  00486A  E103               	bnz	l13499
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;main.c: 401: vscp_handleProtocolEvent();
  1766  00486C  EC95  F016         	call	_vscp_handleProtocolEvent	;wreg free
  1767                           
  1768                           ;main.c: 403: }
  1769  004870  D01B               	goto	l13511
  1770  004872                     l13499:
  1771                           
  1772                           ; BSR set to: 0
  1773                           ;main.c: 404: else if ( ( 30 == vscp_imsg.vscp_class ) &&
  1774                           ;main.c: 405: ( 26 == vscp_imsg.vscp_type ) ) {
  1775  004872  51BF               	movf	(_vscp_imsg+2)& (0+255),w,b
  1776  004874  0A1E               	xorlw	30
  1777  004876  11C0               	iorwf	(_vscp_imsg+3)& (0+255),w,b
  1778  004878  E117               	bnz	l13511
  1779                           
  1780                           ; BSR set to: 0
  1781  00487A  51C1               	movf	(_vscp_imsg+4)& (0+255),w,b
  1782  00487C  0A1A               	xorlw	26
  1783  00487E  E114               	bnz	l13511
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;main.c: 406: handle_sync();
  1787  004880  EC88  F02A         	call	_handle_sync	;wreg free
  1788  004884  D011               	goto	l13511
  1789  004886                     l13505:
  1790                           
  1791                           ; BSR set to: 0
  1792                           ;main.c: 413: vscp_error();
  1793  004886  EC40  F030         	call	_vscp_error	;wreg free
  1794                           
  1795                           ;main.c: 414: break;
  1796  00488A  D00E               	goto	l13511
  1797  00488C                     l187:
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;main.c: 417: vscp_node_state = 0x00;
  1801  00488C  6BBC               	clrf	_vscp_node_state& (0+255),b
  1802                           
  1803                           ;main.c: 418: break;
  1804  00488E  D00C               	goto	l13511
  1805  004890                     l13509:
  1806  004890  0100               	movlb	0	; () banked
  1807  004892  51BC               	movf	_vscp_node_state& (0+255),w,b
  1808                           
  1809                           ; Switch size 1, requested type "space"
  1810                           ; Number of cases is 5, Range of values is 0 to 4
  1811                           ; switch strategies available:
  1812                           ; Name         Instructions Cycles
  1813                           ; simple_byte           16     9 (average)
  1814                           ;	Chosen strategy is simple_byte
  1815  004894  E0D9               	bz	l13483
  1816  004896  0A01               	xorlw	1	; case 1
  1817  004898  E0E1               	bz	l13491
  1818  00489A  0A03               	xorlw	3	; case 2
  1819  00489C  E0DC               	bz	l13489
  1820  00489E  0A01               	xorlw	1	; case 3
  1821  0048A0  E0E0               	bz	l181
  1822  0048A2  0A07               	xorlw	7	; case 4
  1823  0048A4  E0F0               	bz	l13505
  1824  0048A6  D7F2               	goto	l187
  1825  0048A8                     l13511:
  1826                           
  1827                           ;main.c: 424: if ( measurement_clock > 1000 ) {
  1828  0048A8  0EE9               	movlw	233
  1829  0048AA  0101               	movlb	1	; () banked
  1830  0048AC  5D12               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1831  0048AE  0E03               	movlw	3
  1832  0048B0  5913               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1833  0048B2  0E00               	movlw	0
  1834  0048B4  5914               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1835  0048B6  0E00               	movlw	0
  1836  0048B8  5915               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1837  0048BA  E3AE               	bnc	l172
  1838                           
  1839                           ; BSR set to: 1
  1840                           ;main.c: 426: measurement_clock = 0;
  1841  0048BC  6B12               	clrf	_measurement_clock& (0+255),b	;volatile
  1842  0048BE  6B13               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1843  0048C0  6B14               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1844  0048C2  6B15               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1845                           
  1846                           ; BSR set to: 1
  1847                           ;main.c: 427: doOneSecondWork();
  1848  0048C4  ECA8  F019         	call	_doOneSecondWork	;wreg free
  1849                           
  1850                           ; BSR set to: 0
  1851                           ;main.c: 428: seconds++;
  1852  0048C8  2BB9               	incf	_seconds& (0+255),f,b
  1853                           
  1854                           ; BSR set to: 0
  1855                           ;main.c: 432: if (0x03 == vscp_node_state) {
  1856  0048CA  51BC               	movf	_vscp_node_state& (0+255),w,b
  1857  0048CC  0A03               	xorlw	3
  1858  0048CE  E11A               	bnz	l13533
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;main.c: 433: for (i = 0; i < 6; i++) {
  1862  0048D0  6BB2               	clrf	main@i& (0+255),b
  1863  0048D2  6BB3               	clrf	(main@i+1)& (0+255),b
  1864  0048D4  6BB4               	clrf	(main@i+2)& (0+255),b
  1865  0048D6  6BB5               	clrf	(main@i+3)& (0+255),b
  1866  0048D8                     l13527:
  1867                           
  1868                           ; BSR set to: 0
  1869                           ;main.c: 434: seconds_temp[i]++;
  1870  0048D8  0E0C               	movlw	low _seconds_temp
  1871  0048DA  0100               	movlb	0	; () banked
  1872  0048DC  25B2               	addwf	main@i& (0+255),w,b
  1873  0048DE  6ED9               	movwf	fsr2l,c
  1874  0048E0  0E01               	movlw	high _seconds_temp
  1875  0048E2  21B3               	addwfc	(main@i+1)& (0+255),w,b
  1876  0048E4  6EDA               	movwf	fsr2h,c
  1877  0048E6  2ADF               	incf	indf2,f,c
  1878                           
  1879                           ; BSR set to: 0
  1880  0048E8  2BB2               	incf	main@i& (0+255),f,b
  1881  0048EA  0E00               	movlw	0
  1882  0048EC  23B3               	addwfc	(main@i+1)& (0+255),f,b
  1883  0048EE  23B4               	addwfc	(main@i+2)& (0+255),f,b
  1884  0048F0  23B5               	addwfc	(main@i+3)& (0+255),f,b
  1885                           
  1886                           ; BSR set to: 0
  1887  0048F2  0E06               	movlw	6
  1888  0048F4  5DB2               	subwf	main@i& (0+255),w,b
  1889  0048F6  0E00               	movlw	0
  1890  0048F8  59B3               	subwfb	(main@i+1)& (0+255),w,b
  1891  0048FA  0E00               	movlw	0
  1892  0048FC  59B4               	subwfb	(main@i+2)& (0+255),w,b
  1893  0048FE  0E00               	movlw	0
  1894  004900  59B5               	subwfb	(main@i+3)& (0+255),w,b
  1895  004902  E3EA               	bnc	l13527
  1896  004904                     l13533:
  1897                           
  1898                           ; BSR set to: 0
  1899                           ;main.c: 435: }
  1900                           ;main.c: 436: }
  1901                           ;main.c: 438: if (seconds > 60) {
  1902  004904  0E3C               	movlw	60
  1903  004906  65B9               	cpfsgt	_seconds& (0+255),b
  1904  004908  D001               	goto	l13537
  1905                           
  1906                           ; BSR set to: 0
  1907                           ;main.c: 439: seconds = 0;
  1908  00490A  6BB9               	clrf	_seconds& (0+255),b
  1909  00490C                     l13537:
  1910                           
  1911                           ; BSR set to: 0
  1912                           ;main.c: 440: }
  1913                           ;main.c: 444: if (0x03 == vscp_node_state) {
  1914  00490C  51BC               	movf	_vscp_node_state& (0+255),w,b
  1915  00490E  0A03               	xorlw	3
  1916  004910  B4D8               	btfsc	status,2,c
  1917                           
  1918                           ; BSR set to: 0
  1919                           ;main.c: 445: vscp_doOneSecondWork();
  1920  004912  ECB6  F02B         	call	_vscp_doOneSecondWork	;wreg free
  1921                           
  1922                           ; BSR set to: 0
  1923                           ;main.c: 446: }
  1924                           ;main.c: 449: doWork();
  1925  004916  EC9F  F01C         	call	_doWork	;wreg free
  1926  00491A  D77E               	goto	l172
  1927  00491C                     __end_of_main:
  1928                           	opt stack 0
  1929                           tblptru	equ	0xFF8
  1930                           tblptrh	equ	0xFF7
  1931                           tblptrl	equ	0xFF6
  1932                           tablat	equ	0xFF5
  1933                           prodh	equ	0xFF4
  1934                           prodl	equ	0xFF3
  1935                           intcon	equ	0xFF2
  1936                           postinc0	equ	0xFEE
  1937                           wreg	equ	0xFE8
  1938                           indf1	equ	0xFE7
  1939                           postdec1	equ	0xFE5
  1940                           fsr1h	equ	0xFE2
  1941                           fsr1l	equ	0xFE1
  1942                           indf2	equ	0xFDF
  1943                           postinc2	equ	0xFDE
  1944                           postdec2	equ	0xFDD
  1945                           plusw2	equ	0xFDB
  1946                           fsr2h	equ	0xFDA
  1947                           fsr2l	equ	0xFD9
  1948                           status	equ	0xFD8
  1949                           
  1950 ;; *************** function _doWork *****************
  1951 ;; Defined at:
  1952 ;;		line 464 in file "../main.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;		None
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;  temp            4   47[BANK1 ] unsigned long 
  1957 ;;  avarage         4   43[BANK1 ] unsigned long 
  1958 ;;  resistance      4   38[BANK1 ] unsigned long 
  1959 ;;  v               4   32[BANK1 ] unsigned long 
  1960 ;;  calVoltage      4    4[BANK1 ] unsigned long 
  1961 ;;  Rinf            4    0[BANK1 ] unsigned long 
  1962 ;;  B               2   36[BANK1 ] unsigned short 
  1963 ;;  i               1   51[BANK1 ] unsigned char 
  1964 ;;  j               1   42[BANK1 ] unsigned char 
  1965 ;; Return value:  Size  Location     Type
  1966 ;;		None               void
  1967 ;; Registers used:
  1968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1969 ;; Tracked objects:
  1970 ;;		On entry : F/0
  1971 ;;		On exit  : F/1
  1972 ;;		Unchanged: 0/0
  1973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1975 ;;      Locals:         0       0      52       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1976 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1977 ;;      Totals:         0      14      52       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1978 ;;Total ram usage:       66 bytes
  1979 ;; Hardware stack levels used:    1
  1980 ;; Hardware stack levels required when called:    7
  1981 ;; This function calls:
  1982 ;;		_Read_b_eep
  1983 ;;		_exp
  1984 ;;		_log
  1985 ;;		_getCalibrationValue
  1986 ;;		___aldiv
  1987 ;;		___altofl
  1988 ;;		___asfladd
  1989 ;;		___fladd
  1990 ;;		___asfldiv
  1991 ;;		___fldiv
  1992 ;;		___flmul
  1993 ;;		___asflsub
  1994 ;;		___flsub
  1995 ;;		___fltol
  1996 ;;		___lwtofl
  1997 ;; This function is called by:
  1998 ;;		_main
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           	psect	text1
  2003  00393E                     __ptext1:
  2004                           	opt stack 0
  2005  00393E                     _doWork:
  2006                           	opt stack 23
  2007                           
  2008                           ; BSR set to: 0
  2009                           ;main.c: 465: uint8_t i, j;
  2010                           ;main.c: 466: uint16_t B;
  2011                           ;main.c: 467: double avarage;
  2012                           ;main.c: 468: double resistance;
  2013                           ;main.c: 469: double Rinf;
  2014                           ;main.c: 470: double temp;
  2015                           ;main.c: 471: double v;
  2016                           ;main.c: 472: double calVoltage;
  2017                           ;main.c: 474: calVoltage = ((uint16_t) Read_b_eep(0xF2)*256 +
  2018                           ;main.c: 475: Read_b_eep(0xF3));
  2019                           
  2020                           ; BSR set to: 1
  2021                           ;incstack = 0
  2022                           ;incstack = 0
  2023  00393E  6A17               	clrf	?_Read_b_eep+1,c
  2024  003940  0EF3               	movlw	243
  2025  003942  6E16               	movwf	?_Read_b_eep,c
  2026  003944  ECC2  F02F         	call	_Read_b_eep	;wreg free
  2027  003948  0100               	movlb	0	; () banked
  2028  00394A  6FA4               	movwf	??_doWork& (0+255),b
  2029  00394C  6A17               	clrf	?_Read_b_eep+1,c
  2030  00394E  0EF2               	movlw	242
  2031  003950  6E16               	movwf	?_Read_b_eep,c
  2032  003952  ECC2  F02F         	call	_Read_b_eep	;wreg free
  2033  003956  6E19               	movwf	?___lwtofl+1,c
  2034  003958  0100               	movlb	0	; () banked
  2035  00395A  51A4               	movf	??_doWork& (0+255),w,b
  2036  00395C  6E18               	movwf	?___lwtofl,c
  2037  00395E  EC95  F02E         	call	___lwtofl	;wreg free
  2038  003962  C01B  F171         	movff	?___lwtofl+3,doWork@calVoltage+3
  2039  003966  C01A  F170         	movff	?___lwtofl+2,doWork@calVoltage+2
  2040  00396A  C019  F16F         	movff	?___lwtofl+1,doWork@calVoltage+1
  2041  00396E  C018  F16E         	movff	?___lwtofl,doWork@calVoltage
  2042                           
  2043                           ;main.c: 480: for (i = 0; i < 6; i++) {
  2044  003972  0101               	movlb	1	; () banked
  2045  003974  6B9D               	clrf	doWork@i& (0+255),b
  2046  003976                     l13549:
  2047                           
  2048                           ; BSR set to: 1
  2049                           ;main.c: 482: if (adc_conversion_flags & 1 << i) {
  2050  003976  C19D  F0A4         	movff	doWork@i,??_doWork
  2051  00397A  0E01               	movlw	1
  2052  00397C  0100               	movlb	0	; () banked
  2053  00397E  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2054  003980  2BA4               	incf	??_doWork& (0+255),f,b
  2055  003982  D002               	goto	u10454
  2056  003984                     u10455:
  2057  003984  90D8               	bcf	status,0,c
  2058  003986  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2059  003988                     u10454:
  2060  003988  2FA4               	decfsz	??_doWork& (0+255),f,b
  2061  00398A  D7FC               	goto	u10455
  2062  00398C  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2063  00398E  15B6               	andwf	_adc_conversion_flags& (0+255),w,b
  2064  003990  E101 D1E3          	bz	l13603
  2065                           
  2066                           ; BSR set to: 0
  2067                           ;main.c: 485: avarage = 0;
  2068  003994  0101               	movlb	1	; () banked
  2069  003996  6B95               	clrf	doWork@avarage& (0+255),b
  2070  003998  6B96               	clrf	(doWork@avarage+1)& (0+255),b
  2071  00399A  6B97               	clrf	(doWork@avarage+2)& (0+255),b
  2072  00399C  6B98               	clrf	(doWork@avarage+3)& (0+255),b
  2073                           
  2074                           ;main.c: 486: for (j = 0; j < 80; j++) {
  2075  00399E  6B94               	clrf	doWork@j& (0+255),b
  2076  0039A0                     l13557:
  2077                           
  2078                           ; BSR set to: 1
  2079                           ;main.c: 487: avarage += ((uint16_t)adc[12 * j + 2 * i])*256 + adc[12 * j + 2 * i + 1];
  2080  0039A0  0E01               	movlw	high doWork@avarage
  2081  0039A2  6E2D               	movwf	?___asfladd+1,c
  2082  0039A4  0E95               	movlw	low doWork@avarage
  2083  0039A6  6E2C               	movwf	?___asfladd,c
  2084  0039A8  90D8               	bcf	status,0,c
  2085  0039AA  359D               	rlcf	doWork@i& (0+255),w,b
  2086  0039AC  0100               	movlb	0	; () banked
  2087  0039AE  6FA4               	movwf	??_doWork& (0+255),b
  2088  0039B0  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2089  0039B2  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2090  0039B4  0101               	movlb	1	; () banked
  2091  0039B6  5194               	movf	doWork@j& (0+255),w,b
  2092  0039B8  0D0C               	mullw	12
  2093  0039BA  0E9F               	movlw	low (_adc+1)
  2094  0039BC  24F3               	addwf	prodl,w,c
  2095  0039BE  0100               	movlb	0	; () banked
  2096  0039C0  6FA6               	movwf	(??_doWork+2)& (0+255),b
  2097  0039C2  0E01               	movlw	high (_adc+1)
  2098  0039C4  20F4               	addwfc	prodh,w,c
  2099  0039C6  6FA7               	movwf	(??_doWork+3)& (0+255),b
  2100  0039C8  51A4               	movf	??_doWork& (0+255),w,b
  2101  0039CA  25A6               	addwf	(??_doWork+2)& (0+255),w,b
  2102  0039CC  6ED9               	movwf	fsr2l,c
  2103  0039CE  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2104  0039D0  21A7               	addwfc	(??_doWork+3)& (0+255),w,b
  2105  0039D2  6EDA               	movwf	fsr2h,c
  2106  0039D4  50DF               	movf	indf2,w,c
  2107  0039D6  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2108  0039D8  90D8               	bcf	status,0,c
  2109  0039DA  0101               	movlb	1	; () banked
  2110  0039DC  359D               	rlcf	doWork@i& (0+255),w,b
  2111  0039DE  0100               	movlb	0	; () banked
  2112  0039E0  6FA9               	movwf	(??_doWork+5)& (0+255),b
  2113  0039E2  6BAA               	clrf	(??_doWork+6)& (0+255),b
  2114  0039E4  37AA               	rlcf	(??_doWork+6)& (0+255),f,b
  2115  0039E6  0101               	movlb	1	; () banked
  2116  0039E8  5194               	movf	doWork@j& (0+255),w,b
  2117  0039EA  0D0C               	mullw	12
  2118  0039EC  0E9E               	movlw	low _adc
  2119  0039EE  24F3               	addwf	prodl,w,c
  2120  0039F0  0100               	movlb	0	; () banked
  2121  0039F2  6FAB               	movwf	(??_doWork+7)& (0+255),b
  2122  0039F4  0E01               	movlw	high _adc
  2123  0039F6  20F4               	addwfc	prodh,w,c
  2124  0039F8  6FAC               	movwf	(??_doWork+8)& (0+255),b
  2125  0039FA  51A9               	movf	(??_doWork+5)& (0+255),w,b
  2126  0039FC  25AB               	addwf	(??_doWork+7)& (0+255),w,b
  2127  0039FE  6ED9               	movwf	fsr2l,c
  2128  003A00  51AA               	movf	(??_doWork+6)& (0+255),w,b
  2129  003A02  21AC               	addwfc	(??_doWork+8)& (0+255),w,b
  2130  003A04  6EDA               	movwf	fsr2h,c
  2131  003A06  50DF               	movf	indf2,w,c
  2132  003A08  6E19               	movwf	?___lwtofl+1,c
  2133  003A0A  51A8               	movf	(??_doWork+4)& (0+255),w,b
  2134  003A0C  6E18               	movwf	?___lwtofl,c
  2135  003A0E  EC95  F02E         	call	___lwtofl	;wreg free
  2136  003A12  C01B  F031         	movff	?___lwtofl+3,?___asfladd+5
  2137  003A16  C01A  F030         	movff	?___lwtofl+2,?___asfladd+4
  2138  003A1A  C019  F02F         	movff	?___lwtofl+1,?___asfladd+3
  2139  003A1E  C018  F02E         	movff	?___lwtofl,?___asfladd+2
  2140  003A22  EC79  F02C         	call	___asfladd	;wreg free
  2141  003A26  0101               	movlb	1	; () banked
  2142  003A28  2B94               	incf	doWork@j& (0+255),f,b
  2143                           
  2144                           ; BSR set to: 1
  2145  003A2A  0E4F               	movlw	79
  2146  003A2C  6594               	cpfsgt	doWork@j& (0+255),b
  2147  003A2E  D7B8               	goto	l13557
  2148                           
  2149                           ; BSR set to: 1
  2150                           ;main.c: 491: if (1) {
  2151  003A30  0E01               	movlw	high doWork@avarage
  2152  003A32  0100               	movlb	0	; () banked
  2153  003A34  6F61               	movwf	(?___asfldiv+1)& (0+255),b
  2154  003A36  0E95               	movlw	low doWork@avarage
  2155  003A38  6F60               	movwf	?___asfldiv& (0+255),b
  2156  003A3A  6B62               	clrf	(?___asfldiv+2)& (0+255),b
  2157  003A3C  6B63               	clrf	(?___asfldiv+3)& (0+255),b
  2158  003A3E  0EA0               	movlw	160
  2159  003A40  6F64               	movwf	(?___asfldiv+4)& (0+255),b
  2160  003A42  0E42               	movlw	66
  2161  003A44  6F65               	movwf	(?___asfldiv+5)& (0+255),b
  2162  003A46  EC54  F02C         	call	___asfldiv	;wreg free
  2163                           
  2164                           ;main.c: 499: B = (uint16_t)Read_b_eep(2 * i + 0x4F)*256 +
  2165                           ;main.c: 500: Read_b_eep(2 * i + 0x50);
  2166  003A4A  0101               	movlb	1	; () banked
  2167  003A4C  519D               	movf	doWork@i& (0+255),w,b
  2168  003A4E  0D02               	mullw	2
  2169  003A50  0E50               	movlw	80
  2170  003A52  24F3               	addwf	prodl,w,c
  2171  003A54  6E16               	movwf	?_Read_b_eep,c
  2172  003A56  0E00               	movlw	0
  2173  003A58  20F4               	addwfc	prodh,w,c
  2174  003A5A  6E17               	movwf	?_Read_b_eep+1,c
  2175  003A5C  ECC2  F02F         	call	_Read_b_eep	;wreg free
  2176  003A60  0100               	movlb	0	; () banked
  2177  003A62  6FA4               	movwf	??_doWork& (0+255),b
  2178  003A64  0101               	movlb	1	; () banked
  2179  003A66  519D               	movf	doWork@i& (0+255),w,b
  2180  003A68  0D02               	mullw	2
  2181  003A6A  0E4F               	movlw	79
  2182  003A6C  24F3               	addwf	prodl,w,c
  2183  003A6E  6E16               	movwf	?_Read_b_eep,c
  2184  003A70  0E00               	movlw	0
  2185  003A72  20F4               	addwfc	prodh,w,c
  2186  003A74  6E17               	movwf	?_Read_b_eep+1,c
  2187  003A76  ECC2  F02F         	call	_Read_b_eep	;wreg free
  2188  003A7A  0101               	movlb	1	; () banked
  2189  003A7C  6F8F               	movwf	(doWork@B+1)& (0+255),b
  2190  003A7E  0100               	movlb	0	; () banked
  2191  003A80  51A4               	movf	??_doWork& (0+255),w,b
  2192  003A82  0101               	movlb	1	; () banked
  2193  003A84  6F8E               	movwf	doWork@B& (0+255),b
  2194                           
  2195                           ; BSR set to: 1
  2196                           ;main.c: 503: Rinf = 10000.0 * exp(B / -298.15);
  2197  003A86  0E33               	movlw	51
  2198  003A88  6E30               	movwf	?___fldiv+4,c
  2199  003A8A  0E13               	movlw	19
  2200  003A8C  6E31               	movwf	?___fldiv+5,c
  2201  003A8E  0E95               	movlw	149
  2202  003A90  6E32               	movwf	?___fldiv+6,c
  2203  003A92  0EC3               	movlw	195
  2204  003A94  6E33               	movwf	?___fldiv+7,c
  2205  003A96  C18E  F018         	movff	doWork@B,?___lwtofl
  2206  003A9A  C18F  F019         	movff	doWork@B+1,?___lwtofl+1
  2207  003A9E  EC95  F02E         	call	___lwtofl	;wreg free
  2208  003AA2  C01B  F02F         	movff	?___lwtofl+3,?___fldiv+3
  2209  003AA6  C01A  F02E         	movff	?___lwtofl+2,?___fldiv+2
  2210  003AAA  C019  F02D         	movff	?___lwtofl+1,?___fldiv+1
  2211  003AAE  C018  F02C         	movff	?___lwtofl,?___fldiv
  2212  003AB2  EC57  F028         	call	___fldiv	;wreg free
  2213  003AB6  C02F  F175         	movff	?___fldiv+3,_doWork$2235+3
  2214  003ABA  C02E  F174         	movff	?___fldiv+2,_doWork$2235+2
  2215  003ABE  C02D  F173         	movff	?___fldiv+1,_doWork$2235+1
  2216  003AC2  C02C  F172         	movff	?___fldiv,_doWork$2235
  2217                           
  2218                           ;main.c: 503: Rinf = 10000.0 * exp(B / -298.15);
  2219  003AC6  C172  F099         	movff	_doWork$2235,?_exp
  2220  003ACA  C173  F09A         	movff	_doWork$2235+1,?_exp+1
  2221  003ACE  C174  F09B         	movff	_doWork$2235+2,?_exp+2
  2222  003AD2  C175  F09C         	movff	_doWork$2235+3,?_exp+3
  2223  003AD6  ECB5  F01F         	call	_exp	;wreg free
  2224  003ADA  C09C  F179         	movff	?_exp+3,_doWork$2236+3
  2225  003ADE  C09B  F178         	movff	?_exp+2,_doWork$2236+2
  2226  003AE2  C09A  F177         	movff	?_exp+1,_doWork$2236+1
  2227  003AE6  C099  F176         	movff	?_exp,_doWork$2236
  2228                           
  2229                           ;main.c: 503: Rinf = 10000.0 * exp(B / -298.15);
  2230  003AEA  C176  F060         	movff	_doWork$2236,?___flmul
  2231  003AEE  C177  F061         	movff	_doWork$2236+1,?___flmul+1
  2232  003AF2  C178  F062         	movff	_doWork$2236+2,?___flmul+2
  2233  003AF6  C179  F063         	movff	_doWork$2236+3,?___flmul+3
  2234  003AFA  D935               	call	PL56	;call to abstracted procedure
  2235  003AFC  EC20  F026         	call	___flmul	;wreg free
  2236  003B00  C063  F16D         	movff	?___flmul+3,doWork@Rinf+3
  2237  003B04  C062  F16C         	movff	?___flmul+2,doWork@Rinf+2
  2238  003B08  C061  F16B         	movff	?___flmul+1,doWork@Rinf+1
  2239  003B0C  C060  F16A         	movff	?___flmul,doWork@Rinf
  2240                           
  2241                           ;main.c: 505: v = 5.0 * (double) avarage / 1025;
  2242  003B10  0100               	movlb	0	; () banked
  2243  003B12  6B64               	clrf	(?___flmul+4)& (0+255),b
  2244  003B14  6B65               	clrf	(?___flmul+5)& (0+255),b
  2245  003B16  0EA0               	movlw	160
  2246  003B18  6F66               	movwf	(?___flmul+6)& (0+255),b
  2247  003B1A  0E40               	movlw	64
  2248  003B1C  6F67               	movwf	(?___flmul+7)& (0+255),b
  2249  003B1E  C195  F060         	movff	doWork@avarage,?___flmul
  2250  003B22  C196  F061         	movff	doWork@avarage+1,?___flmul+1
  2251  003B26  C197  F062         	movff	doWork@avarage+2,?___flmul+2
  2252  003B2A  C198  F063         	movff	doWork@avarage+3,?___flmul+3
  2253  003B2E  EC20  F026         	call	___flmul	;wreg free
  2254  003B32  C063  F02F         	movff	?___flmul+3,?___fldiv+3
  2255  003B36  C062  F02E         	movff	?___flmul+2,?___fldiv+2
  2256  003B3A  C061  F02D         	movff	?___flmul+1,?___fldiv+1
  2257  003B3E  C060  F02C         	movff	?___flmul,?___fldiv
  2258  003B42  6A30               	clrf	?___fldiv+4,c
  2259  003B44  0E20               	movlw	32
  2260  003B46  6E31               	movwf	?___fldiv+5,c
  2261  003B48  0E80               	movlw	128
  2262  003B4A  6E32               	movwf	?___fldiv+6,c
  2263  003B4C  0E44               	movlw	68
  2264  003B4E  6E33               	movwf	?___fldiv+7,c
  2265  003B50  EC57  F028         	call	___fldiv	;wreg free
  2266  003B54  C02F  F18D         	movff	?___fldiv+3,doWork@v+3
  2267  003B58  C02E  F18C         	movff	?___fldiv+2,doWork@v+2
  2268  003B5C  C02D  F18B         	movff	?___fldiv+1,doWork@v+1
  2269  003B60  C02C  F18A         	movff	?___fldiv,doWork@v
  2270                           
  2271                           ;main.c: 507: resistance = (calVoltage - 10000.0 * v) / v;
  2272  003B64  D900               	call	PL56	;call to abstracted procedure
  2273  003B66  C18A  F060         	movff	doWork@v,?___flmul
  2274  003B6A  C18B  F061         	movff	doWork@v+1,?___flmul+1
  2275  003B6E  C18C  F062         	movff	doWork@v+2,?___flmul+2
  2276  003B72  C18D  F063         	movff	doWork@v+3,?___flmul+3
  2277  003B76  EC20  F026         	call	___flmul	;wreg free
  2278  003B7A  C063  F07D         	movff	?___flmul+3,?___flsub+7
  2279  003B7E  C062  F07C         	movff	?___flmul+2,?___flsub+6
  2280  003B82  C061  F07B         	movff	?___flmul+1,?___flsub+5
  2281  003B86  C060  F07A         	movff	?___flmul,?___flsub+4
  2282  003B8A  C16E  F076         	movff	doWork@calVoltage,?___flsub
  2283  003B8E  C16F  F077         	movff	doWork@calVoltage+1,?___flsub+1
  2284  003B92  C170  F078         	movff	doWork@calVoltage+2,?___flsub+2
  2285  003B96  C171  F079         	movff	doWork@calVoltage+3,?___flsub+3
  2286  003B9A  EC8C  F02D         	call	___flsub	;wreg free
  2287  003B9E  C079  F02F         	movff	?___flsub+3,?___fldiv+3
  2288  003BA2  C078  F02E         	movff	?___flsub+2,?___fldiv+2
  2289  003BA6  C077  F02D         	movff	?___flsub+1,?___fldiv+1
  2290  003BAA  C076  F02C         	movff	?___flsub,?___fldiv
  2291  003BAE  C18A  F030         	movff	doWork@v,?___fldiv+4
  2292  003BB2  C18B  F031         	movff	doWork@v+1,?___fldiv+5
  2293  003BB6  C18C  F032         	movff	doWork@v+2,?___fldiv+6
  2294  003BBA  C18D  F033         	movff	doWork@v+3,?___fldiv+7
  2295  003BBE  EC57  F028         	call	___fldiv	;wreg free
  2296  003BC2  C02F  F193         	movff	?___fldiv+3,doWork@resistance+3
  2297  003BC6  C02E  F192         	movff	?___fldiv+2,doWork@resistance+2
  2298  003BCA  C02D  F191         	movff	?___fldiv+1,doWork@resistance+1
  2299  003BCE  C02C  F190         	movff	?___fldiv,doWork@resistance
  2300                           
  2301                           ;main.c: 509: temp = ((double) B) / log(resistance / Rinf);
  2302  003BD2  C16A  F030         	movff	doWork@Rinf,?___fldiv+4
  2303  003BD6  C16B  F031         	movff	doWork@Rinf+1,?___fldiv+5
  2304  003BDA  C16C  F032         	movff	doWork@Rinf+2,?___fldiv+6
  2305  003BDE  C16D  F033         	movff	doWork@Rinf+3,?___fldiv+7
  2306  003BE2  C190  F02C         	movff	doWork@resistance,?___fldiv
  2307  003BE6  C191  F02D         	movff	doWork@resistance+1,?___fldiv+1
  2308  003BEA  C192  F02E         	movff	doWork@resistance+2,?___fldiv+2
  2309  003BEE  C193  F02F         	movff	doWork@resistance+3,?___fldiv+3
  2310  003BF2  EC57  F028         	call	___fldiv	;wreg free
  2311  003BF6  C02F  F084         	movff	?___fldiv+3,?_log+3
  2312  003BFA  C02E  F083         	movff	?___fldiv+2,?_log+2
  2313  003BFE  C02D  F082         	movff	?___fldiv+1,?_log+1
  2314  003C02  C02C  F081         	movff	?___fldiv,?_log
  2315  003C06  ECD7  F022         	call	_log	;wreg free
  2316  003C0A  C084  F17D         	movff	?_log+3,_doWork$2237+3
  2317  003C0E  C083  F17C         	movff	?_log+2,_doWork$2237+2
  2318  003C12  C082  F17B         	movff	?_log+1,_doWork$2237+1
  2319  003C16  C081  F17A         	movff	?_log,_doWork$2237
  2320                           
  2321                           ;main.c: 509: temp = ((double) B) / log(resistance / Rinf);
  2322  003C1A  C18E  F018         	movff	doWork@B,?___lwtofl
  2323  003C1E  C18F  F019         	movff	doWork@B+1,?___lwtofl+1
  2324  003C22  EC95  F02E         	call	___lwtofl	;wreg free
  2325  003C26  C01B  F02F         	movff	?___lwtofl+3,?___fldiv+3
  2326  003C2A  C01A  F02E         	movff	?___lwtofl+2,?___fldiv+2
  2327  003C2E  C019  F02D         	movff	?___lwtofl+1,?___fldiv+1
  2328  003C32  C018  F02C         	movff	?___lwtofl,?___fldiv
  2329  003C36  C17A  F030         	movff	_doWork$2237,?___fldiv+4
  2330  003C3A  C17B  F031         	movff	_doWork$2237+1,?___fldiv+5
  2331  003C3E  C17C  F032         	movff	_doWork$2237+2,?___fldiv+6
  2332  003C42  C17D  F033         	movff	_doWork$2237+3,?___fldiv+7
  2333  003C46  EC57  F028         	call	___fldiv	;wreg free
  2334  003C4A  C02F  F19C         	movff	?___fldiv+3,doWork@temp+3
  2335  003C4E  C02E  F19B         	movff	?___fldiv+2,doWork@temp+2
  2336  003C52  C02D  F19A         	movff	?___fldiv+1,doWork@temp+1
  2337  003C56  C02C  F199         	movff	?___fldiv,doWork@temp
  2338                           
  2339                           ;main.c: 511: temp -= 273.15;
  2340  003C5A  0E01               	movlw	high doWork@temp
  2341  003C5C  0100               	movlb	0	; () banked
  2342  003C5E  6F7F               	movwf	(?___asflsub+1)& (0+255),b
  2343  003C60  0E99               	movlw	low doWork@temp
  2344  003C62  6F7E               	movwf	?___asflsub& (0+255),b
  2345  003C64  0E33               	movlw	51
  2346  003C66  6F80               	movwf	(?___asflsub+2)& (0+255),b
  2347  003C68  0E93               	movlw	147
  2348  003C6A  6F81               	movwf	(?___asflsub+3)& (0+255),b
  2349  003C6C  0E88               	movlw	136
  2350  003C6E  6F82               	movwf	(?___asflsub+4)& (0+255),b
  2351  003C70  0E43               	movlw	67
  2352  003C72  6F83               	movwf	(?___asflsub+5)& (0+255),b
  2353  003C74  ECE1  F02B         	call	___asflsub	;wreg free
  2354                           
  2355                           ; BSR set to: 0
  2356                           ;main.c: 526: current_temp[ i ] = (current_temp[ i ] + ((long) (temp * 100) + getCalibra
      +                          tionValue(i))) / 2;
  2357  003C78  0101               	movlb	1	; () banked
  2358  003C7A  519D               	movf	doWork@i& (0+255),w,b
  2359  003C7C  0D02               	mullw	2
  2360  003C7E  ECF4  F01B         	call	PL2	;call to abstracted procedure
  2361  003C82  CFDE F0A4          	movff	postinc2,??_doWork
  2362  003C86  CFDD F0A5          	movff	postdec2,??_doWork+1
  2363  003C8A  C0A4  F0A6         	movff	??_doWork,??_doWork+2
  2364  003C8E  C0A5  F0A7         	movff	??_doWork+1,??_doWork+3
  2365  003C92  0E00               	movlw	0
  2366  003C94  0100               	movlb	0	; () banked
  2367  003C96  BFA7               	btfsc	(??_doWork+3)& (0+255),7,b
  2368  003C98  0EFF               	movlw	255
  2369  003C9A  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2370  003C9C  6FA9               	movwf	(??_doWork+5)& (0+255),b
  2371  003C9E  0101               	movlb	1	; () banked
  2372  003CA0  519D               	movf	doWork@i& (0+255),w,b
  2373  003CA2  EC4E  F02D         	call	_getCalibrationValue
  2374  003CA6  C018  F0AA         	movff	?_getCalibrationValue,??_doWork+6
  2375  003CAA  C019  F0AB         	movff	?_getCalibrationValue+1,??_doWork+7
  2376  003CAE  0E00               	movlw	0
  2377  003CB0  0100               	movlb	0	; () banked
  2378  003CB2  BFAB               	btfsc	(??_doWork+7)& (0+255),7,b
  2379  003CB4  0EFF               	movlw	255
  2380  003CB6  6FAC               	movwf	(??_doWork+8)& (0+255),b
  2381  003CB8  6FAD               	movwf	(??_doWork+9)& (0+255),b
  2382  003CBA  6B64               	clrf	(?___flmul+4)& (0+255),b
  2383  003CBC  6B65               	clrf	(?___flmul+5)& (0+255),b
  2384  003CBE  0EC8               	movlw	200
  2385  003CC0  6F66               	movwf	(?___flmul+6)& (0+255),b
  2386  003CC2  0E42               	movlw	66
  2387  003CC4  6F67               	movwf	(?___flmul+7)& (0+255),b
  2388  003CC6  C199  F060         	movff	doWork@temp,?___flmul
  2389  003CCA  C19A  F061         	movff	doWork@temp+1,?___flmul+1
  2390  003CCE  C19B  F062         	movff	doWork@temp+2,?___flmul+2
  2391  003CD2  C19C  F063         	movff	doWork@temp+3,?___flmul+3
  2392  003CD6  EC20  F026         	call	___flmul	;wreg free
  2393  003CDA  C063  F079         	movff	?___flmul+3,?___fltol+3
  2394  003CDE  C062  F078         	movff	?___flmul+2,?___fltol+2
  2395  003CE2  C061  F077         	movff	?___flmul+1,?___fltol+1
  2396  003CE6  C060  F076         	movff	?___flmul,?___fltol
  2397  003CEA  ECAE  F029         	call	___fltol	;wreg free
  2398  003CEE  51AA               	movf	(??_doWork+6)& (0+255),w,b
  2399  003CF0  2576               	addwf	?___fltol& (0+255),w,b
  2400  003CF2  6FAE               	movwf	(??_doWork+10)& (0+255),b
  2401  003CF4  51AB               	movf	(??_doWork+7)& (0+255),w,b
  2402  003CF6  2177               	addwfc	(?___fltol+1)& (0+255),w,b
  2403  003CF8  6FAF               	movwf	(??_doWork+11)& (0+255),b
  2404  003CFA  51AC               	movf	(??_doWork+8)& (0+255),w,b
  2405  003CFC  2178               	addwfc	(?___fltol+2)& (0+255),w,b
  2406  003CFE  6FB0               	movwf	(??_doWork+12)& (0+255),b
  2407  003D00  51AD               	movf	(??_doWork+9)& (0+255),w,b
  2408  003D02  2179               	addwfc	(?___fltol+3)& (0+255),w,b
  2409  003D04  6FB1               	movwf	(??_doWork+13)& (0+255),b
  2410  003D06  51A6               	movf	(??_doWork+2)& (0+255),w,b
  2411  003D08  25AE               	addwf	(??_doWork+10)& (0+255),w,b
  2412  003D0A  6F7C               	movwf	?___aldiv& (0+255),b
  2413  003D0C  51A7               	movf	(??_doWork+3)& (0+255),w,b
  2414  003D0E  21AF               	addwfc	(??_doWork+11)& (0+255),w,b
  2415  003D10  6F7D               	movwf	(?___aldiv+1)& (0+255),b
  2416  003D12  51A8               	movf	(??_doWork+4)& (0+255),w,b
  2417  003D14  21B0               	addwfc	(??_doWork+12)& (0+255),w,b
  2418  003D16  6F7E               	movwf	(?___aldiv+2)& (0+255),b
  2419  003D18  51A9               	movf	(??_doWork+5)& (0+255),w,b
  2420  003D1A  21B1               	addwfc	(??_doWork+13)& (0+255),w,b
  2421  003D1C  6F7F               	movwf	(?___aldiv+3)& (0+255),b
  2422  003D1E  0E02               	movlw	2
  2423  003D20  6F80               	movwf	(?___aldiv+4)& (0+255),b
  2424  003D22  0E00               	movlw	0
  2425  003D24  6B81               	clrf	(?___aldiv+5)& (0+255),b
  2426  003D26  6B82               	clrf	(?___aldiv+6)& (0+255),b
  2427  003D28  6B83               	clrf	(?___aldiv+7)& (0+255),b
  2428  003D2A  ECE6  F026         	call	___aldiv	;wreg free
  2429  003D2E  0101               	movlb	1	; () banked
  2430  003D30  519D               	movf	doWork@i& (0+255),w,b
  2431  003D32  0D02               	mullw	2
  2432  003D34  ECF4  F01B         	call	PL2	;call to abstracted procedure
  2433  003D38  0100               	movlb	0	; () banked
  2434  003D3A  C07C  FFDE         	movff	?___aldiv,postinc2
  2435  003D3E  C07D  FFDD         	movff	?___aldiv+1,postdec2
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;main.c: 547: }
  2439                           ;main.c: 550: adc_conversion_flags &= ~(1 << i);
  2440                           
  2441                           ;main.c: 528: }
  2442  003D42  C19D  F0A4         	movff	doWork@i,??_doWork
  2443  003D46  0E01               	movlw	1
  2444  003D48  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2445  003D4A  2BA4               	incf	??_doWork& (0+255),f,b
  2446  003D4C  D002               	goto	u10484
  2447  003D4E                     u10485:
  2448  003D4E  90D8               	bcf	status,0,c
  2449  003D50  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2450  003D52                     u10484:
  2451  003D52  2FA4               	decfsz	??_doWork& (0+255),f,b
  2452  003D54  D7FC               	goto	u10485
  2453  003D56  1DA5               	comf	(??_doWork+1)& (0+255),w,b
  2454  003D58  17B6               	andwf	_adc_conversion_flags& (0+255),f,b
  2455  003D5A                     l13603:
  2456                           
  2457                           ; BSR set to: 0
  2458  003D5A  0101               	movlb	1	; () banked
  2459  003D5C  2B9D               	incf	doWork@i& (0+255),f,b
  2460                           
  2461                           ; BSR set to: 1
  2462  003D5E  0E05               	movlw	5
  2463  003D60  659D               	cpfsgt	doWork@i& (0+255),b
  2464  003D62  D609               	goto	l13549
  2465  003D64  0C05               	retlw	5
  2466  003D66                     __end_of_doWork:
  2467                           	opt stack 0
  2468  003D66                     PL56:
  2469                           	opt stack 23
  2470  003D66  0100               	movlb	0	; () banked
  2471  003D68  6B64               	clrf	(?___flmul+4)& (0+255),b
  2472  003D6A  0E40               	movlw	64
  2473  003D6C  6F65               	movwf	(?___flmul+5)& (0+255),b
  2474  003D6E  0E1C               	movlw	28
  2475  003D70  6F66               	movwf	(?___flmul+6)& (0+255),b
  2476  003D72  0E46               	movlw	70
  2477  003D74  6F67               	movwf	(?___flmul+7)& (0+255),b
  2478  003D76  0C46               	retlw	70
  2479  003D78                     __end_ofPL56:
  2480                           	opt stack 0
  2481                           tblptru	equ	0xFF8
  2482                           tblptrh	equ	0xFF7
  2483                           tblptrl	equ	0xFF6
  2484                           tablat	equ	0xFF5
  2485                           prodh	equ	0xFF4
  2486                           prodl	equ	0xFF3
  2487                           intcon	equ	0xFF2
  2488                           postinc0	equ	0xFEE
  2489                           wreg	equ	0xFE8
  2490                           indf1	equ	0xFE7
  2491                           postdec1	equ	0xFE5
  2492                           fsr1h	equ	0xFE2
  2493                           fsr1l	equ	0xFE1
  2494                           indf2	equ	0xFDF
  2495                           postinc2	equ	0xFDE
  2496                           postdec2	equ	0xFDD
  2497                           plusw2	equ	0xFDB
  2498                           fsr2h	equ	0xFDA
  2499                           fsr2l	equ	0xFD9
  2500                           status	equ	0xFD8
  2501                           
  2502 ;; *************** function ___lwtofl *****************
  2503 ;; Defined at:
  2504 ;;		line 29 in file "/opt/microchip/xc8/v1.21/sources/common/lwtofl.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;  c               2   23[COMRAM] unsigned int 
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;		None
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  4   23[COMRAM] unsigned int 
  2511 ;; Registers used:
  2512 ;;		wreg, status,2, status,0, cstack
  2513 ;; Tracked objects:
  2514 ;;		On entry : 0/0
  2515 ;;		On exit  : 0/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2518 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2521 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2522 ;;Total ram usage:        4 bytes
  2523 ;; Hardware stack levels used:    1
  2524 ;; Hardware stack levels required when called:    3
  2525 ;; This function calls:
  2526 ;;		___flpack
  2527 ;; This function is called by:
  2528 ;;		_doWork
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	text2
  2533  005D2A                     __ptext2:
  2534                           	opt stack 0
  2535  005D2A                     ___lwtofl:
  2536                           	opt stack 26
  2537                           
  2538                           ; BSR set to: 1
  2539                           ;incstack = 0
  2540                           ;incstack = 0
  2541  005D2A  C018  F00E         	movff	___lwtofl@c,?___flpack
  2542  005D2E  C019  F00F         	movff	___lwtofl@c+1,?___flpack+1
  2543  005D32  6A10               	clrf	?___flpack+2,c
  2544  005D34  6A11               	clrf	?___flpack+3,c
  2545  005D36  0E96               	movlw	150
  2546  005D38  6E12               	movwf	?___flpack+4,c
  2547  005D3A  0E00               	movlw	0
  2548  005D3C  6A13               	clrf	?___flpack+5,c
  2549  005D3E  EC44  F027         	call	___flpack	;wreg free
  2550  005D42  C011  F01B         	movff	?___flpack+3,?___lwtofl+3
  2551  005D46  C010  F01A         	movff	?___flpack+2,?___lwtofl+2
  2552  005D4A  C00F  F019         	movff	?___flpack+1,?___lwtofl+1
  2553  005D4E  C00E  F018         	movff	?___flpack,?___lwtofl
  2554  005D52  0012               	return	
  2555  005D54                     __end_of___lwtofl:
  2556                           	opt stack 0
  2557                           tblptru	equ	0xFF8
  2558                           tblptrh	equ	0xFF7
  2559                           tblptrl	equ	0xFF6
  2560                           tablat	equ	0xFF5
  2561                           prodh	equ	0xFF4
  2562                           prodl	equ	0xFF3
  2563                           intcon	equ	0xFF2
  2564                           postinc0	equ	0xFEE
  2565                           wreg	equ	0xFE8
  2566                           indf1	equ	0xFE7
  2567                           postdec1	equ	0xFE5
  2568                           fsr1h	equ	0xFE2
  2569                           fsr1l	equ	0xFE1
  2570                           indf2	equ	0xFDF
  2571                           postinc2	equ	0xFDE
  2572                           postdec2	equ	0xFDD
  2573                           plusw2	equ	0xFDB
  2574                           fsr2h	equ	0xFDA
  2575                           fsr2l	equ	0xFD9
  2576                           status	equ	0xFD8
  2577                           
  2578 ;; *************** function ___asfldiv *****************
  2579 ;; Defined at:
  2580 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/pic18/asfldiv.c"
  2581 ;; Parameters:    Size  Location     Type
  2582 ;;  f1p             2    0[BANK0 ] PTR 
  2583 ;;		 -> doWork@avarage(4), 
  2584 ;;  f2              4    2[BANK0 ] PTR 
  2585 ;; Auto vars:     Size  Location     Type
  2586 ;;		None
  2587 ;; Return value:  Size  Location     Type
  2588 ;;                  4    0[BANK0 ] PTR 
  2589 ;; Registers used:
  2590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2591 ;; Tracked objects:
  2592 ;;		On entry : F/0
  2593 ;;		On exit  : 0/0
  2594 ;;		Unchanged: 0/0
  2595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2596 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2599 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2600 ;;Total ram usage:        6 bytes
  2601 ;; Hardware stack levels used:    1
  2602 ;; Hardware stack levels required when called:    4
  2603 ;; This function calls:
  2604 ;;		___fldiv
  2605 ;; This function is called by:
  2606 ;;		_doWork
  2607 ;; This function uses a non-reentrant model
  2608 ;;
  2609                           
  2610                           	psect	text3
  2611  0058A8                     __ptext3:
  2612                           	opt stack 0
  2613  0058A8                     ___asfldiv:
  2614                           	opt stack 25
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;	Return value of ___asfldiv is never used
  2618                           
  2619                           ;incstack = 0
  2620                           ;incstack = 0
  2621  0058A8  C060  FFD9         	movff	___asfldiv@f1p,fsr2l
  2622  0058AC  C061  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  2623  0058B0  CFDE F02C          	movff	postinc2,?___fldiv
  2624  0058B4  CFDE F02D          	movff	postinc2,?___fldiv+1
  2625  0058B8  CFDE F02E          	movff	postinc2,?___fldiv+2
  2626  0058BC  CFDE F02F          	movff	postinc2,?___fldiv+3
  2627  0058C0  C062  F030         	movff	___asfldiv@f2,?___fldiv+4
  2628  0058C4  C063  F031         	movff	___asfldiv@f2+1,?___fldiv+5
  2629  0058C8  C064  F032         	movff	___asfldiv@f2+2,?___fldiv+6
  2630  0058CC  C065  F033         	movff	___asfldiv@f2+3,?___fldiv+7
  2631  0058D0  EC57  F028         	call	___fldiv	;wreg free
  2632  0058D4  C060  FFD9         	movff	___asfldiv@f1p,fsr2l
  2633  0058D8  C061  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  2634  0058DC  C02C  FFDE         	movff	?___fldiv,postinc2
  2635  0058E0  C02D  FFDE         	movff	?___fldiv+1,postinc2
  2636  0058E4  C02E  FFDE         	movff	?___fldiv+2,postinc2
  2637  0058E8  C02F  FFDD         	movff	?___fldiv+3,postdec2
  2638  0058EC  06D9               	decf	fsr2l,f,c
  2639  0058EE  06D9               	decf	fsr2l,f,c
  2640  0058F0  0012               	return	
  2641  0058F2                     __end_of___asfldiv:
  2642                           	opt stack 0
  2643                           tblptru	equ	0xFF8
  2644                           tblptrh	equ	0xFF7
  2645                           tblptrl	equ	0xFF6
  2646                           tablat	equ	0xFF5
  2647                           prodh	equ	0xFF4
  2648                           prodl	equ	0xFF3
  2649                           intcon	equ	0xFF2
  2650                           postinc0	equ	0xFEE
  2651                           wreg	equ	0xFE8
  2652                           indf1	equ	0xFE7
  2653                           postdec1	equ	0xFE5
  2654                           fsr1h	equ	0xFE2
  2655                           fsr1l	equ	0xFE1
  2656                           indf2	equ	0xFDF
  2657                           postinc2	equ	0xFDE
  2658                           postdec2	equ	0xFDD
  2659                           plusw2	equ	0xFDB
  2660                           fsr2h	equ	0xFDA
  2661                           fsr2l	equ	0xFD9
  2662                           status	equ	0xFD8
  2663                           
  2664 ;; *************** function ___asfladd *****************
  2665 ;; Defined at:
  2666 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/pic18/asfladd.c"
  2667 ;; Parameters:    Size  Location     Type
  2668 ;;  f1p             2   43[COMRAM] PTR 
  2669 ;;		 -> doWork@temp(4), doWork@avarage(4), 
  2670 ;;  f2              4   45[COMRAM] PTR 
  2671 ;; Auto vars:     Size  Location     Type
  2672 ;;		None
  2673 ;; Return value:  Size  Location     Type
  2674 ;;                  4   43[COMRAM] PTR 
  2675 ;; Registers used:
  2676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2677 ;; Tracked objects:
  2678 ;;		On entry : 0/0
  2679 ;;		On exit  : 0/0
  2680 ;;		Unchanged: 0/0
  2681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2682 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2685 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2686 ;;Total ram usage:        6 bytes
  2687 ;; Hardware stack levels used:    1
  2688 ;; Hardware stack levels required when called:    4
  2689 ;; This function calls:
  2690 ;;		___fladd
  2691 ;; This function is called by:
  2692 ;;		_doWork
  2693 ;; This function uses a non-reentrant model
  2694 ;;
  2695                           
  2696                           	psect	text4
  2697  0058F2                     __ptext4:
  2698                           	opt stack 0
  2699  0058F2                     ___asfladd:
  2700                           	opt stack 25
  2701                           
  2702                           ;	Return value of ___asfladd is never used
  2703                           
  2704                           ;incstack = 0
  2705                           ;incstack = 0
  2706  0058F2  C02C  FFD9         	movff	___asfladd@f1p,fsr2l
  2707  0058F6  C02D  FFDA         	movff	___asfladd@f1p+1,fsr2h
  2708  0058FA  CFDE F01D          	movff	postinc2,?___fladd
  2709  0058FE  CFDE F01E          	movff	postinc2,?___fladd+1
  2710  005902  CFDE F01F          	movff	postinc2,?___fladd+2
  2711  005906  CFDE F020          	movff	postinc2,?___fladd+3
  2712  00590A  C02E  F021         	movff	___asfladd@f2,?___fladd+4
  2713  00590E  C02F  F022         	movff	___asfladd@f2+1,?___fladd+5
  2714  005912  C030  F023         	movff	___asfladd@f2+2,?___fladd+6
  2715  005916  C031  F024         	movff	___asfladd@f2+3,?___fladd+7
  2716  00591A  EC2C  F022         	call	___fladd	;wreg free
  2717  00591E  C02C  FFD9         	movff	___asfladd@f1p,fsr2l
  2718  005922  C02D  FFDA         	movff	___asfladd@f1p+1,fsr2h
  2719  005926  C01D  FFDE         	movff	?___fladd,postinc2
  2720  00592A  C01E  FFDE         	movff	?___fladd+1,postinc2
  2721  00592E  C01F  FFDE         	movff	?___fladd+2,postinc2
  2722  005932  C020  FFDD         	movff	?___fladd+3,postdec2
  2723  005936  06D9               	decf	fsr2l,f,c
  2724  005938  06D9               	decf	fsr2l,f,c
  2725  00593A  0012               	return	
  2726  00593C                     __end_of___asfladd:
  2727                           	opt stack 0
  2728                           tblptru	equ	0xFF8
  2729                           tblptrh	equ	0xFF7
  2730                           tblptrl	equ	0xFF6
  2731                           tablat	equ	0xFF5
  2732                           prodh	equ	0xFF4
  2733                           prodl	equ	0xFF3
  2734                           intcon	equ	0xFF2
  2735                           postinc0	equ	0xFEE
  2736                           wreg	equ	0xFE8
  2737                           indf1	equ	0xFE7
  2738                           postdec1	equ	0xFE5
  2739                           fsr1h	equ	0xFE2
  2740                           fsr1l	equ	0xFE1
  2741                           indf2	equ	0xFDF
  2742                           postinc2	equ	0xFDE
  2743                           postdec2	equ	0xFDD
  2744                           plusw2	equ	0xFDB
  2745                           fsr2h	equ	0xFDA
  2746                           fsr2l	equ	0xFD9
  2747                           status	equ	0xFD8
  2748                           
  2749 ;; *************** function ___aldiv *****************
  2750 ;; Defined at:
  2751 ;;		line 10 in file "/opt/microchip/xc8/v1.21/sources/common/aldiv.c"
  2752 ;; Parameters:    Size  Location     Type
  2753 ;;  dividend        4   28[BANK0 ] long 
  2754 ;;  divisor         4   32[BANK0 ] long 
  2755 ;; Auto vars:     Size  Location     Type
  2756 ;;  quotient        4   38[BANK0 ] long 
  2757 ;;  sign            1   37[BANK0 ] unsigned char 
  2758 ;;  counter         1   36[BANK0 ] unsigned char 
  2759 ;; Return value:  Size  Location     Type
  2760 ;;                  4   28[BANK0 ] long 
  2761 ;; Registers used:
  2762 ;;		wreg, status,2, status,0
  2763 ;; Tracked objects:
  2764 ;;		On entry : F/0
  2765 ;;		On exit  : F/0
  2766 ;;		Unchanged: 0/0
  2767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2768 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2769 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2771 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2772 ;;Total ram usage:       14 bytes
  2773 ;; Hardware stack levels used:    1
  2774 ;; Hardware stack levels required when called:    2
  2775 ;; This function calls:
  2776 ;;		Nothing
  2777 ;; This function is called by:
  2778 ;;		_doWork
  2779 ;; This function uses a non-reentrant model
  2780 ;;
  2781                           
  2782                           	psect	text5
  2783  004DCC                     __ptext5:
  2784                           	opt stack 0
  2785  004DCC                     ___aldiv:
  2786                           	opt stack 27
  2787                           
  2788                           ; BSR set to: 0
  2789                           
  2790                           ;incstack = 0
  2791                           ;incstack = 0
  2792  004DCC  6B85               	clrf	___aldiv@sign& (0+255),b
  2793  004DCE  AF83               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2794  004DD0  D00A               	goto	l12979
  2795                           
  2796                           ; BSR set to: 0
  2797  004DD2  1F83               	comf	(___aldiv@divisor+3)& (0+255),f,b
  2798  004DD4  1F82               	comf	(___aldiv@divisor+2)& (0+255),f,b
  2799  004DD6  1F81               	comf	(___aldiv@divisor+1)& (0+255),f,b
  2800  004DD8  6D80               	negf	___aldiv@divisor& (0+255),b
  2801  004DDA  0E00               	movlw	0
  2802  004DDC  2381               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  2803  004DDE  2382               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  2804  004DE0  2383               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  2805                           
  2806                           ; BSR set to: 0
  2807  004DE2  0E01               	movlw	1
  2808  004DE4  6F85               	movwf	___aldiv@sign& (0+255),b
  2809  004DE6                     l12979:
  2810                           
  2811                           ; BSR set to: 0
  2812  004DE6  AF7F               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  2813  004DE8  D00A               	goto	l12985
  2814                           
  2815                           ; BSR set to: 0
  2816  004DEA  1F7F               	comf	(___aldiv@dividend+3)& (0+255),f,b
  2817  004DEC  1F7E               	comf	(___aldiv@dividend+2)& (0+255),f,b
  2818  004DEE  1F7D               	comf	(___aldiv@dividend+1)& (0+255),f,b
  2819  004DF0  6D7C               	negf	___aldiv@dividend& (0+255),b
  2820  004DF2  0E00               	movlw	0
  2821  004DF4  237D               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  2822  004DF6  237E               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  2823  004DF8  237F               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  2824                           
  2825                           ; BSR set to: 0
  2826  004DFA  0E01               	movlw	1
  2827  004DFC  1B85               	xorwf	___aldiv@sign& (0+255),f,b
  2828  004DFE                     l12985:
  2829                           
  2830                           ; BSR set to: 0
  2831  004DFE  6B86               	clrf	___aldiv@quotient& (0+255),b
  2832  004E00  6B87               	clrf	(___aldiv@quotient+1)& (0+255),b
  2833  004E02  6B88               	clrf	(___aldiv@quotient+2)& (0+255),b
  2834  004E04  6B89               	clrf	(___aldiv@quotient+3)& (0+255),b
  2835                           
  2836                           ; BSR set to: 0
  2837  004E06  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2838  004E08  1180               	iorwf	___aldiv@divisor& (0+255),w,b
  2839  004E0A  1181               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  2840  004E0C  1182               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  2841  004E0E  E029               	bz	l13007
  2842                           
  2843                           ; BSR set to: 0
  2844  004E10  0E01               	movlw	1
  2845  004E12  6F84               	movwf	___aldiv@counter& (0+255),b
  2846  004E14  D006               	goto	l12993
  2847  004E16                     l12991:
  2848                           
  2849                           ; BSR set to: 0
  2850  004E16  90D8               	bcf	status,0,c
  2851  004E18  3780               	rlcf	___aldiv@divisor& (0+255),f,b
  2852  004E1A  3781               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  2853  004E1C  3782               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  2854  004E1E  3783               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  2855  004E20  2B84               	incf	___aldiv@counter& (0+255),f,b
  2856  004E22                     l12993:
  2857                           
  2858                           ; BSR set to: 0
  2859  004E22  AF83               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2860  004E24  D7F8               	goto	l12991
  2861  004E26                     l12995:
  2862                           
  2863                           ; BSR set to: 0
  2864  004E26  90D8               	bcf	status,0,c
  2865  004E28  3786               	rlcf	___aldiv@quotient& (0+255),f,b
  2866  004E2A  3787               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  2867  004E2C  3788               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  2868  004E2E  3789               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  2869                           
  2870                           ; BSR set to: 0
  2871  004E30  5180               	movf	___aldiv@divisor& (0+255),w,b
  2872  004E32  5D7C               	subwf	___aldiv@dividend& (0+255),w,b
  2873  004E34  5181               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2874  004E36  597D               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  2875  004E38  5182               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2876  004E3A  597E               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  2877  004E3C  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2878  004E3E  597F               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  2879  004E40  E309               	bnc	l13003
  2880                           
  2881                           ; BSR set to: 0
  2882  004E42  5180               	movf	___aldiv@divisor& (0+255),w,b
  2883  004E44  5F7C               	subwf	___aldiv@dividend& (0+255),f,b
  2884  004E46  5181               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2885  004E48  5B7D               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  2886  004E4A  5182               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2887  004E4C  5B7E               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  2888  004E4E  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2889  004E50  5B7F               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  2890                           
  2891                           ; BSR set to: 0
  2892  004E52  8186               	bsf	___aldiv@quotient& (0+255),0,b
  2893  004E54                     l13003:
  2894                           
  2895                           ; BSR set to: 0
  2896  004E54  90D8               	bcf	status,0,c
  2897  004E56  3383               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  2898  004E58  3382               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  2899  004E5A  3381               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  2900  004E5C  3380               	rrcf	___aldiv@divisor& (0+255),f,b
  2901                           
  2902                           ; BSR set to: 0
  2903  004E5E  2F84               	decfsz	___aldiv@counter& (0+255),f,b
  2904  004E60  D7E2               	goto	l12995
  2905  004E62                     l13007:
  2906                           
  2907                           ; BSR set to: 0
  2908  004E62  5185               	movf	___aldiv@sign& (0+255),w,b
  2909  004E64  E008               	bz	l13011
  2910                           
  2911                           ; BSR set to: 0
  2912  004E66  1F89               	comf	(___aldiv@quotient+3)& (0+255),f,b
  2913  004E68  1F88               	comf	(___aldiv@quotient+2)& (0+255),f,b
  2914  004E6A  1F87               	comf	(___aldiv@quotient+1)& (0+255),f,b
  2915  004E6C  6D86               	negf	___aldiv@quotient& (0+255),b
  2916  004E6E  0E00               	movlw	0
  2917  004E70  2387               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  2918  004E72  2388               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  2919  004E74  2389               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  2920  004E76                     l13011:
  2921                           
  2922                           ; BSR set to: 0
  2923  004E76  C086  F07C         	movff	___aldiv@quotient,?___aldiv
  2924  004E7A  C087  F07D         	movff	___aldiv@quotient+1,?___aldiv+1
  2925  004E7E  C088  F07E         	movff	___aldiv@quotient+2,?___aldiv+2
  2926  004E82  C089  F07F         	movff	___aldiv@quotient+3,?___aldiv+3
  2927                           
  2928                           ; BSR set to: 0
  2929  004E86  0012               	return	
  2930  004E88                     __end_of___aldiv:
  2931                           	opt stack 0
  2932                           tblptru	equ	0xFF8
  2933                           tblptrh	equ	0xFF7
  2934                           tblptrl	equ	0xFF6
  2935                           tablat	equ	0xFF5
  2936                           prodh	equ	0xFF4
  2937                           prodl	equ	0xFF3
  2938                           intcon	equ	0xFF2
  2939                           postinc0	equ	0xFEE
  2940                           wreg	equ	0xFE8
  2941                           indf1	equ	0xFE7
  2942                           postdec1	equ	0xFE5
  2943                           fsr1h	equ	0xFE2
  2944                           fsr1l	equ	0xFE1
  2945                           indf2	equ	0xFDF
  2946                           postinc2	equ	0xFDE
  2947                           postdec2	equ	0xFDD
  2948                           plusw2	equ	0xFDB
  2949                           fsr2h	equ	0xFDA
  2950                           fsr2l	equ	0xFD9
  2951                           status	equ	0xFD8
  2952                           
  2953 ;; *************** function _getCalibrationValue *****************
  2954 ;; Defined at:
  2955 ;;		line 910 in file "../main.c"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;  i               1    wreg     unsigned char 
  2958 ;; Auto vars:     Size  Location     Type
  2959 ;;  i               1   28[COMRAM] unsigned char 
  2960 ;;  cal             2   26[COMRAM] short 
  2961 ;; Return value:  Size  Location     Type
  2962 ;;                  2   23[COMRAM] short 
  2963 ;; Registers used:
  2964 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2965 ;; Tracked objects:
  2966 ;;		On entry : F/1
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2970 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2971 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2972 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2973 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2974 ;;Total ram usage:        6 bytes
  2975 ;; Hardware stack levels used:    1
  2976 ;; Hardware stack levels required when called:    3
  2977 ;; This function calls:
  2978 ;;		_Read_b_eep
  2979 ;; This function is called by:
  2980 ;;		_doWork
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           	psect	text6
  2985  005A9C                     __ptext6:
  2986                           	opt stack 0
  2987  005A9C                     _getCalibrationValue:
  2988                           	opt stack 26
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;incstack = 0
  2992                           ;incstack = 0
  2993                           ;getCalibrationValue@i stored from wreg
  2994  005A9C  CFE8 F01D          	movff	wreg,getCalibrationValue@i
  2995                           
  2996                           ; BSR set to: 1
  2997                           ;main.c: 911: int16_t cal;
  2998                           ;main.c: 913: cal = ((int16_t)( (((uint16_t)Read_b_eep(2 * i + 0x9E))<<8) + (uint16_t)Re
      +                          ad_b_eep(2 * i + 0x9F)) );
  2999  005AA0  501D               	movf	getCalibrationValue@i,w,c
  3000  005AA2  0D02               	mullw	2
  3001  005AA4  0E9F               	movlw	159
  3002  005AA6  24F3               	addwf	prodl,w,c
  3003  005AA8  6E16               	movwf	?_Read_b_eep,c
  3004  005AAA  0E00               	movlw	0
  3005  005AAC  20F4               	addwfc	prodh,w,c
  3006  005AAE  6E17               	movwf	?_Read_b_eep+1,c
  3007  005AB0  ECC2  F02F         	call	_Read_b_eep	;wreg free
  3008  005AB4  6E1A               	movwf	??_getCalibrationValue& (0+255),c
  3009  005AB6  501D               	movf	getCalibrationValue@i,w,c
  3010  005AB8  0D02               	mullw	2
  3011  005ABA  0E9E               	movlw	158
  3012  005ABC  24F3               	addwf	prodl,w,c
  3013  005ABE  6E16               	movwf	?_Read_b_eep,c
  3014  005AC0  0E00               	movlw	0
  3015  005AC2  20F4               	addwfc	prodh,w,c
  3016  005AC4  6E17               	movwf	?_Read_b_eep+1,c
  3017  005AC6  ECC2  F02F         	call	_Read_b_eep	;wreg free
  3018  005ACA  6E1C               	movwf	getCalibrationValue@cal+1,c
  3019  005ACC  501A               	movf	??_getCalibrationValue,w,c
  3020  005ACE  6E1B               	movwf	getCalibrationValue@cal,c
  3021                           
  3022                           ;main.c: 918: return cal;
  3023  005AD0  C01B  F018         	movff	getCalibrationValue@cal,?_getCalibrationValue
  3024  005AD4  C01C  F019         	movff	getCalibrationValue@cal+1,?_getCalibrationValue+1
  3025  005AD8  0012               	return	
  3026  005ADA                     __end_of_getCalibrationValue:
  3027                           	opt stack 0
  3028                           tblptru	equ	0xFF8
  3029                           tblptrh	equ	0xFF7
  3030                           tblptrl	equ	0xFF6
  3031                           tablat	equ	0xFF5
  3032                           prodh	equ	0xFF4
  3033                           prodl	equ	0xFF3
  3034                           intcon	equ	0xFF2
  3035                           postinc0	equ	0xFEE
  3036                           wreg	equ	0xFE8
  3037                           indf1	equ	0xFE7
  3038                           postdec1	equ	0xFE5
  3039                           fsr1h	equ	0xFE2
  3040                           fsr1l	equ	0xFE1
  3041                           indf2	equ	0xFDF
  3042                           postinc2	equ	0xFDE
  3043                           postdec2	equ	0xFDD
  3044                           plusw2	equ	0xFDB
  3045                           fsr2h	equ	0xFDA
  3046                           fsr2l	equ	0xFD9
  3047                           status	equ	0xFD8
  3048                           
  3049 ;; *************** function _log *****************
  3050 ;; Defined at:
  3051 ;;		line 6 in file "/opt/microchip/xc8/v1.21/sources/common/log.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;  x               4   33[BANK0 ] short 
  3054 ;; Auto vars:     Size  Location     Type
  3055 ;;  exponent        2   66[COMRAM] int 
  3056 ;; Return value:  Size  Location     Type
  3057 ;;                  4   33[BANK0 ] int 
  3058 ;; Registers used:
  3059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3060 ;; Tracked objects:
  3061 ;;		On entry : 0/1
  3062 ;;		On exit  : 0/0
  3063 ;;		Unchanged: 0/0
  3064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3065 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3066 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3068 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3069 ;;Total ram usage:        6 bytes
  3070 ;; Hardware stack levels used:    1
  3071 ;; Hardware stack levels required when called:    5
  3072 ;; This function calls:
  3073 ;;		___fladd
  3074 ;;		___flmul
  3075 ;;		___awtofl
  3076 ;;		_eval_poly
  3077 ;;		_frexp
  3078 ;; This function is called by:
  3079 ;;		_doWork
  3080 ;; This function uses a non-reentrant model
  3081 ;;
  3082                           
  3083                           	psect	text7
  3084  0045AE                     __ptext7:
  3085                           	opt stack 0
  3086  0045AE                     _log:
  3087                           	opt stack 24
  3088                           
  3089                           ;incstack = 0
  3090                           ;incstack = 0
  3091  0045AE  0100               	movlb	0	; () banked
  3092  0045B0  AF84               	btfss	(log@x+3)& (0+255),7,b
  3093  0045B2  D005               	goto	l11625
  3094                           
  3095                           ; BSR set to: 0
  3096  0045B4  6B81               	clrf	?_log& (0+255),b
  3097  0045B6  6B82               	clrf	(?_log+1)& (0+255),b
  3098  0045B8  6B83               	clrf	(?_log+2)& (0+255),b
  3099  0045BA  6B84               	clrf	(?_log+3)& (0+255),b
  3100  0045BC  0012               	return	
  3101  0045BE                     l11625:
  3102                           
  3103                           ; BSR set to: 0
  3104  0045BE  EE20  F081         	lfsr	2,log@x
  3105  0045C2  50DE               	movf	postinc2,w,c
  3106  0045C4  10DE               	iorwf	postinc2,w,c
  3107  0045C6  10DE               	iorwf	postinc2,w,c
  3108  0045C8  10DE               	iorwf	postinc2,w,c
  3109  0045CA  E105               	bnz	l11629
  3110                           
  3111                           ; BSR set to: 0
  3112  0045CC  6B81               	clrf	?_log& (0+255),b
  3113  0045CE  6B82               	clrf	(?_log+1)& (0+255),b
  3114  0045D0  6B83               	clrf	(?_log+2)& (0+255),b
  3115  0045D2  6B84               	clrf	(?_log+3)& (0+255),b
  3116  0045D4  0012               	return	
  3117  0045D6                     l11629:
  3118                           
  3119                           ; BSR set to: 0
  3120  0045D6  6B64               	clrf	(?___flmul+4)& (0+255),b
  3121  0045D8  6B65               	clrf	(?___flmul+5)& (0+255),b
  3122  0045DA  6B66               	clrf	(?___flmul+6)& (0+255),b
  3123  0045DC  0E40               	movlw	64
  3124  0045DE  6F67               	movwf	(?___flmul+7)& (0+255),b
  3125  0045E0  0E43               	movlw	low log@exponent
  3126  0045E2  6E12               	movwf	?_frexp+4,c
  3127  0045E4  0E00               	movlw	high log@exponent
  3128  0045E6  6E13               	movwf	?_frexp+5,c
  3129  0045E8  0E0F               	movlw	15
  3130  0045EA  6E13               	movwf	?_frexp+5,c
  3131  0045EC  0E5F               	movlw	__accesstop+-1
  3132  0045EE  6412               	cpfsgt	?_frexp+4,c
  3133  0045F0  6A13               	clrf	?_frexp+5,c
  3134  0045F2  C081  F00E         	movff	log@x,?_frexp
  3135  0045F6  C082  F00F         	movff	log@x+1,?_frexp+1
  3136  0045FA  C083  F010         	movff	log@x+2,?_frexp+2
  3137  0045FE  C084  F011         	movff	log@x+3,?_frexp+3
  3138  004602  EC45  F02A         	call	_frexp	;wreg free
  3139  004606  C011  F063         	movff	?_frexp+3,?___flmul+3
  3140  00460A  C010  F062         	movff	?_frexp+2,?___flmul+2
  3141  00460E  C00F  F061         	movff	?_frexp+1,?___flmul+1
  3142  004612  C00E  F060         	movff	?_frexp,?___flmul
  3143  004616  EC20  F026         	call	___flmul	;wreg free
  3144  00461A  C063  F020         	movff	?___flmul+3,?___fladd+3
  3145  00461E  C062  F01F         	movff	?___flmul+2,?___fladd+2
  3146  004622  C061  F01E         	movff	?___flmul+1,?___fladd+1
  3147  004626  C060  F01D         	movff	?___flmul,?___fladd
  3148  00462A  6A21               	clrf	?___fladd+4,c
  3149  00462C  6A22               	clrf	?___fladd+5,c
  3150  00462E  0E80               	movlw	128
  3151  004630  6E23               	movwf	?___fladd+6,c
  3152  004632  0EBF               	movlw	191
  3153  004634  6E24               	movwf	?___fladd+7,c
  3154  004636  EC2C  F022         	call	___fladd	;wreg free
  3155  00463A  C020  F084         	movff	?___fladd+3,log@x+3
  3156  00463E  C01F  F083         	movff	?___fladd+2,log@x+2
  3157  004642  C01E  F082         	movff	?___fladd+1,log@x+1
  3158  004646  C01D  F081         	movff	?___fladd,log@x
  3159  00464A  0643               	decf	log@exponent,f,c
  3160  00464C  A0D8               	btfss	status,0,c
  3161  00464E  0644               	decf	log@exponent+1,f,c
  3162  004650  C081  F076         	movff	log@x,?_eval_poly
  3163  004654  C082  F077         	movff	log@x+1,?_eval_poly+1
  3164  004658  C083  F078         	movff	log@x+2,?_eval_poly+2
  3165  00465C  C084  F079         	movff	log@x+3,?_eval_poly+3
  3166  004660  0E48               	movlw	low log@coeff
  3167  004662  0100               	movlb	0	; () banked
  3168  004664  6F7A               	movwf	(?_eval_poly+4)& (0+255),b
  3169  004666  6B7C               	clrf	(?_eval_poly+6)& (0+255),b
  3170  004668  0E08               	movlw	8
  3171  00466A  6F7B               	movwf	(?_eval_poly+5)& (0+255),b
  3172  00466C  ECA2  F027         	call	_eval_poly	;wreg free
  3173  004670  C079  F084         	movff	?_eval_poly+3,log@x+3
  3174  004674  C078  F083         	movff	?_eval_poly+2,log@x+2
  3175  004678  C077  F082         	movff	?_eval_poly+1,log@x+1
  3176  00467C  C076  F081         	movff	?_eval_poly,log@x
  3177                           
  3178                           ; BSR set to: 0
  3179  004680  0E18               	movlw	24
  3180  004682  6F64               	movwf	(?___flmul+4)& (0+255),b
  3181  004684  0E72               	movlw	114
  3182  004686  6F65               	movwf	(?___flmul+5)& (0+255),b
  3183  004688  0E31               	movlw	49
  3184  00468A  6F66               	movwf	(?___flmul+6)& (0+255),b
  3185  00468C  0E3F               	movlw	63
  3186  00468E  6F67               	movwf	(?___flmul+7)& (0+255),b
  3187  004690  C043  F018         	movff	log@exponent,?___awtofl
  3188  004694  C044  F019         	movff	log@exponent+1,?___awtofl+1
  3189  004698  ECE5  F02D         	call	___awtofl	;wreg free
  3190  00469C  C01B  F063         	movff	?___awtofl+3,?___flmul+3
  3191  0046A0  C01A  F062         	movff	?___awtofl+2,?___flmul+2
  3192  0046A4  C019  F061         	movff	?___awtofl+1,?___flmul+1
  3193  0046A8  C018  F060         	movff	?___awtofl,?___flmul
  3194  0046AC  EC20  F026         	call	___flmul	;wreg free
  3195  0046B0  C063  F020         	movff	?___flmul+3,?___fladd+3
  3196  0046B4  C062  F01F         	movff	?___flmul+2,?___fladd+2
  3197  0046B8  C061  F01E         	movff	?___flmul+1,?___fladd+1
  3198  0046BC  C060  F01D         	movff	?___flmul,?___fladd
  3199  0046C0  C081  F021         	movff	log@x,?___fladd+4
  3200  0046C4  C082  F022         	movff	log@x+1,?___fladd+5
  3201  0046C8  C083  F023         	movff	log@x+2,?___fladd+6
  3202  0046CC  C084  F024         	movff	log@x+3,?___fladd+7
  3203  0046D0  EC2C  F022         	call	___fladd	;wreg free
  3204  0046D4  C020  F084         	movff	?___fladd+3,?_log+3
  3205  0046D8  C01F  F083         	movff	?___fladd+2,?_log+2
  3206  0046DC  C01E  F082         	movff	?___fladd+1,?_log+1
  3207  0046E0  C01D  F081         	movff	?___fladd,?_log
  3208  0046E4  0012               	return	
  3209  0046E6                     __end_of_log:
  3210                           	opt stack 0
  3211                           tblptru	equ	0xFF8
  3212                           tblptrh	equ	0xFF7
  3213                           tblptrl	equ	0xFF6
  3214                           tablat	equ	0xFF5
  3215                           prodh	equ	0xFF4
  3216                           prodl	equ	0xFF3
  3217                           intcon	equ	0xFF2
  3218                           postinc0	equ	0xFEE
  3219                           wreg	equ	0xFE8
  3220                           indf1	equ	0xFE7
  3221                           postdec1	equ	0xFE5
  3222                           fsr1h	equ	0xFE2
  3223                           fsr1l	equ	0xFE1
  3224                           indf2	equ	0xFDF
  3225                           postinc2	equ	0xFDE
  3226                           postdec2	equ	0xFDD
  3227                           plusw2	equ	0xFDB
  3228                           fsr2h	equ	0xFDA
  3229                           fsr2l	equ	0xFD9
  3230                           status	equ	0xFD8
  3231                           
  3232 ;; *************** function _exp *****************
  3233 ;; Defined at:
  3234 ;;		line 13 in file "/opt/microchip/xc8/v1.21/sources/common/exp.c"
  3235 ;; Parameters:    Size  Location     Type
  3236 ;;  x               4   57[BANK0 ] int 
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;  exponent        2   65[BANK0 ] int 
  3239 ;;  sign            1   67[BANK0 ] unsigned char 
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  4   57[BANK0 ] unsigned char 
  3242 ;; Registers used:
  3243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/1
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3249 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3250 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3252 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3253 ;;Total ram usage:       11 bytes
  3254 ;; Hardware stack levels used:    1
  3255 ;; Hardware stack levels required when called:    6
  3256 ;; This function calls:
  3257 ;;		___fldiv
  3258 ;;		___asflmul
  3259 ;;		___asflsub
  3260 ;;		___awtofl
  3261 ;;		_floor
  3262 ;;		_eval_poly
  3263 ;;		_ldexp
  3264 ;;		___flge
  3265 ;;		___flneg
  3266 ;;		___fltol
  3267 ;; This function is called by:
  3268 ;;		_doWork
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           	psect	text8
  3273  003F6A                     __ptext8:
  3274                           	opt stack 0
  3275  003F6A                     _exp:
  3276                           	opt stack 23
  3277                           
  3278                           ;incstack = 0
  3279                           ;incstack = 0
  3280  003F6A  0100               	movlb	0	; () banked
  3281  003F6C  EE20  F099         	lfsr	2,exp@x
  3282  003F70  50DE               	movf	postinc2,w,c
  3283  003F72  10DE               	iorwf	postinc2,w,c
  3284  003F74  10DE               	iorwf	postinc2,w,c
  3285  003F76  10DE               	iorwf	postinc2,w,c
  3286  003F78  E108               	bnz	l11591
  3287                           
  3288                           ; BSR set to: 0
  3289  003F7A  0E00               	movlw	0
  3290  003F7C  6F99               	movwf	?_exp& (0+255),b
  3291  003F7E  6F9A               	movwf	(?_exp+1)& (0+255),b
  3292  003F80  0E80               	movlw	128
  3293  003F82  6F9B               	movwf	(?_exp+2)& (0+255),b
  3294  003F84  0E3F               	movlw	63
  3295  003F86  6F9C               	movwf	(?_exp+3)& (0+255),b
  3296  003F88  0C3F               	retlw	63
  3297  003F8A                     l11591:
  3298                           
  3299                           ; BSR set to: 0
  3300  003F8A  0E18               	movlw	24
  3301  003F8C  6E0E               	movwf	?___flge,c
  3302  003F8E  0E72               	movlw	114
  3303  003F90  6E0F               	movwf	?___flge+1,c
  3304  003F92  0E31               	movlw	49
  3305  003F94  6E10               	movwf	?___flge+2,c
  3306  003F96  0E44               	movlw	68
  3307  003F98  6E11               	movwf	?___flge+3,c
  3308  003F9A  C099  F012         	movff	exp@x,?___flge+4
  3309  003F9E  C09A  F013         	movff	exp@x+1,?___flge+5
  3310  003FA2  C09B  F014         	movff	exp@x+2,?___flge+6
  3311  003FA6  C09C  F015         	movff	exp@x+3,?___flge+7
  3312  003FAA  EC08  F02C         	call	___flge	;wreg free
  3313  003FAE  E207               	bc	l11597
  3314  003FB0  0100               	movlb	0	; () banked
  3315  003FB2  6999               	setf	?_exp& (0+255),b
  3316  003FB4  699A               	setf	(?_exp+1)& (0+255),b
  3317  003FB6  0E7F               	movlw	127
  3318  003FB8  6F9B               	movwf	(?_exp+2)& (0+255),b
  3319  003FBA  6F9C               	movwf	(?_exp+3)& (0+255),b
  3320  003FBC  0C7F               	retlw	127
  3321  003FBE                     l11597:
  3322  003FBE  C099  F00E         	movff	exp@x,?___flge
  3323  003FC2  C09A  F00F         	movff	exp@x+1,?___flge+1
  3324  003FC6  C09B  F010         	movff	exp@x+2,?___flge+2
  3325  003FCA  C09C  F011         	movff	exp@x+3,?___flge+3
  3326  003FCE  0E87               	movlw	135
  3327  003FD0  6E12               	movwf	?___flge+4,c
  3328  003FD2  0E48               	movlw	72
  3329  003FD4  6E13               	movwf	?___flge+5,c
  3330  003FD6  0E3A               	movlw	58
  3331  003FD8  6E14               	movwf	?___flge+6,c
  3332  003FDA  0EC4               	movlw	196
  3333  003FDC  6E15               	movwf	?___flge+7,c
  3334  003FDE  EC08  F02C         	call	___flge	;wreg free
  3335  003FE2  E206               	bc	l11601
  3336  003FE4  0100               	movlb	0	; () banked
  3337  003FE6  6B99               	clrf	?_exp& (0+255),b
  3338  003FE8  6B9A               	clrf	(?_exp+1)& (0+255),b
  3339  003FEA  6B9B               	clrf	(?_exp+2)& (0+255),b
  3340  003FEC  6B9C               	clrf	(?_exp+3)& (0+255),b
  3341  003FEE  0012               	return	
  3342  003FF0                     l11601:
  3343  003FF0  0100               	movlb	0	; () banked
  3344  003FF2  0E01               	movlw	1
  3345  003FF4  AF9C               	btfss	(exp@x+3)& (0+255),7,b
  3346  003FF6  0E00               	movlw	0
  3347  003FF8  6FA3               	movwf	exp@sign& (0+255),b
  3348  003FFA  51A3               	movf	exp@sign& (0+255),w,b
  3349  003FFC  E012               	bz	l1587
  3350                           
  3351                           ; BSR set to: 0
  3352  003FFE  C099  F00E         	movff	exp@x,?___flneg
  3353  004002  C09A  F00F         	movff	exp@x+1,?___flneg+1
  3354  004006  C09B  F010         	movff	exp@x+2,?___flneg+2
  3355  00400A  C09C  F011         	movff	exp@x+3,?___flneg+3
  3356  00400E  ECF9  F02E         	call	___flneg	;wreg free
  3357  004012  C011  F09C         	movff	?___flneg+3,exp@x+3
  3358  004016  C010  F09B         	movff	?___flneg+2,exp@x+2
  3359  00401A  C00F  F09A         	movff	?___flneg+1,exp@x+1
  3360  00401E  C00E  F099         	movff	?___flneg,exp@x
  3361  004022                     l1587:
  3362                           
  3363                           ; BSR set to: 0
  3364  004022  0E3B               	movlw	59
  3365  004024  6F76               	movwf	?___asflmul& (0+255),b
  3366  004026  0EAA               	movlw	170
  3367  004028  6F77               	movwf	(?___asflmul+1)& (0+255),b
  3368  00402A  0EB8               	movlw	184
  3369  00402C  6F78               	movwf	(?___asflmul+2)& (0+255),b
  3370  00402E  0E3F               	movlw	63
  3371  004030  6F79               	movwf	(?___asflmul+3)& (0+255),b
  3372  004032  0E99               	movlw	exp@x& (0+255)
  3373  004034  EC2E  F02C         	call	___asflmul
  3374  004038  C099  F08F         	movff	exp@x,?_floor
  3375  00403C  C09A  F090         	movff	exp@x+1,?_floor+1
  3376  004040  C09B  F091         	movff	exp@x+2,?_floor+2
  3377  004044  C09C  F092         	movff	exp@x+3,?_floor+3
  3378  004048  ECA2  F025         	call	_floor	;wreg free
  3379  00404C  C092  F0A0         	movff	?_floor+3,_exp$2241+3
  3380  004050  C091  F09F         	movff	?_floor+2,_exp$2241+2
  3381  004054  C090  F09E         	movff	?_floor+1,_exp$2241+1
  3382  004058  C08F  F09D         	movff	?_floor,_exp$2241
  3383  00405C  C09D  F076         	movff	_exp$2241,?___fltol
  3384  004060  C09E  F077         	movff	_exp$2241+1,?___fltol+1
  3385  004064  C09F  F078         	movff	_exp$2241+2,?___fltol+2
  3386  004068  C0A0  F079         	movff	_exp$2241+3,?___fltol+3
  3387  00406C  ECAE  F029         	call	___fltol	;wreg free
  3388  004070  C076  F0A1         	movff	?___fltol,exp@exponent
  3389  004074  C077  F0A2         	movff	?___fltol+1,exp@exponent+1
  3390                           
  3391                           ; BSR set to: 0
  3392  004078  0E00               	movlw	high exp@x
  3393  00407A  6F7F               	movwf	(?___asflsub+1)& (0+255),b
  3394  00407C  0E99               	movlw	low exp@x
  3395  00407E  6F7E               	movwf	?___asflsub& (0+255),b
  3396  004080  C0A1  F018         	movff	exp@exponent,?___awtofl
  3397  004084  C0A2  F019         	movff	exp@exponent+1,?___awtofl+1
  3398  004088  ECE5  F02D         	call	___awtofl	;wreg free
  3399  00408C  C01B  F083         	movff	?___awtofl+3,?___asflsub+5
  3400  004090  C01A  F082         	movff	?___awtofl+2,?___asflsub+4
  3401  004094  C019  F081         	movff	?___awtofl+1,?___asflsub+3
  3402  004098  C018  F080         	movff	?___awtofl,?___asflsub+2
  3403  00409C  ECE1  F02B         	call	___asflsub	;wreg free
  3404                           
  3405                           ; BSR set to: 0
  3406  0040A0  C099  F076         	movff	exp@x,?_eval_poly
  3407  0040A4  C09A  F077         	movff	exp@x+1,?_eval_poly+1
  3408  0040A8  C09B  F078         	movff	exp@x+2,?_eval_poly+2
  3409  0040AC  C09C  F079         	movff	exp@x+3,?_eval_poly+3
  3410  0040B0  0E20               	movlw	low exp@coeff
  3411  0040B2  6F7A               	movwf	(?_eval_poly+4)& (0+255),b
  3412  0040B4  6B7C               	clrf	(?_eval_poly+6)& (0+255),b
  3413  0040B6  0E09               	movlw	9
  3414  0040B8  6F7B               	movwf	(?_eval_poly+5)& (0+255),b
  3415  0040BA  ECA2  F027         	call	_eval_poly	;wreg free
  3416  0040BE  C079  F084         	movff	?_eval_poly+3,?_ldexp+3
  3417  0040C2  C078  F083         	movff	?_eval_poly+2,?_ldexp+2
  3418  0040C6  C077  F082         	movff	?_eval_poly+1,?_ldexp+1
  3419  0040CA  C076  F081         	movff	?_eval_poly,?_ldexp
  3420  0040CE  C0A1  F085         	movff	exp@exponent,?_ldexp+4
  3421  0040D2  C0A2  F086         	movff	exp@exponent+1,?_ldexp+5
  3422  0040D6  EC07  F029         	call	_ldexp	;wreg free
  3423  0040DA  C084  F09C         	movff	?_ldexp+3,exp@x+3
  3424  0040DE  C083  F09B         	movff	?_ldexp+2,exp@x+2
  3425  0040E2  C082  F09A         	movff	?_ldexp+1,exp@x+1
  3426  0040E6  C081  F099         	movff	?_ldexp,exp@x
  3427                           
  3428                           ; BSR set to: 0
  3429  0040EA  51A3               	movf	exp@sign& (0+255),w,b
  3430  0040EC  E02C               	bz	l1588
  3431                           
  3432                           ; BSR set to: 0
  3433  0040EE  EE20  F099         	lfsr	2,exp@x
  3434  0040F2  0EFF               	movlw	255
  3435  0040F4  18DE               	xorwf	postinc2,w,c
  3436  0040F6  0EFF               	movlw	255
  3437  0040F8  B4D8               	btfsc	status,2,c
  3438  0040FA  18DE               	xorwf	postinc2,w,c
  3439  0040FC  0E7F               	movlw	127
  3440  0040FE  B4D8               	btfsc	status,2,c
  3441  004100  18DE               	xorwf	postinc2,w,c
  3442  004102  0E7F               	movlw	127
  3443  004104  B4D8               	btfsc	status,2,c
  3444  004106  18DE               	xorwf	postinc2,w,c
  3445  004108  E105               	bnz	l11617
  3446                           
  3447                           ; BSR set to: 0
  3448  00410A  6B99               	clrf	?_exp& (0+255),b
  3449  00410C  6B9A               	clrf	(?_exp+1)& (0+255),b
  3450  00410E  6B9B               	clrf	(?_exp+2)& (0+255),b
  3451  004110  6B9C               	clrf	(?_exp+3)& (0+255),b
  3452  004112  0012               	return	
  3453  004114                     l11617:
  3454                           
  3455                           ; BSR set to: 0
  3456  004114  6A2C               	clrf	?___fldiv,c
  3457  004116  6A2D               	clrf	?___fldiv+1,c
  3458  004118  0E80               	movlw	128
  3459  00411A  6E2E               	movwf	?___fldiv+2,c
  3460  00411C  0E3F               	movlw	63
  3461  00411E  6E2F               	movwf	?___fldiv+3,c
  3462  004120  C099  F030         	movff	exp@x,?___fldiv+4
  3463  004124  C09A  F031         	movff	exp@x+1,?___fldiv+5
  3464  004128  C09B  F032         	movff	exp@x+2,?___fldiv+6
  3465  00412C  C09C  F033         	movff	exp@x+3,?___fldiv+7
  3466  004130  EC57  F028         	call	___fldiv	;wreg free
  3467  004134  C02F  F09C         	movff	?___fldiv+3,?_exp+3
  3468  004138  C02E  F09B         	movff	?___fldiv+2,?_exp+2
  3469  00413C  C02D  F09A         	movff	?___fldiv+1,?_exp+1
  3470  004140  C02C  F099         	movff	?___fldiv,?_exp
  3471  004144  0012               	return	
  3472  004146                     l1588:
  3473                           
  3474                           ; BSR set to: 0
  3475  004146  C099  F099         	movff	exp@x,?_exp
  3476  00414A  C09A  F09A         	movff	exp@x+1,?_exp+1
  3477  00414E  C09B  F09B         	movff	exp@x+2,?_exp+2
  3478  004152  C09C  F09C         	movff	exp@x+3,?_exp+3
  3479  004156  0012               	return	
  3480  004158                     __end_of_exp:
  3481                           	opt stack 0
  3482                           tblptru	equ	0xFF8
  3483                           tblptrh	equ	0xFF7
  3484                           tblptrl	equ	0xFF6
  3485                           tablat	equ	0xFF5
  3486                           prodh	equ	0xFF4
  3487                           prodl	equ	0xFF3
  3488                           intcon	equ	0xFF2
  3489                           postinc0	equ	0xFEE
  3490                           wreg	equ	0xFE8
  3491                           indf1	equ	0xFE7
  3492                           postdec1	equ	0xFE5
  3493                           fsr1h	equ	0xFE2
  3494                           fsr1l	equ	0xFE1
  3495                           indf2	equ	0xFDF
  3496                           postinc2	equ	0xFDE
  3497                           postdec2	equ	0xFDD
  3498                           plusw2	equ	0xFDB
  3499                           fsr2h	equ	0xFDA
  3500                           fsr2l	equ	0xFD9
  3501                           status	equ	0xFD8
  3502                           
  3503 ;; *************** function ___flneg *****************
  3504 ;; Defined at:
  3505 ;;		line 16 in file "/opt/microchip/xc8/v1.21/sources/common/flneg.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;  f1              4   13[COMRAM] unsigned char 
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;		None
  3510 ;; Return value:  Size  Location     Type
  3511 ;;                  4   13[COMRAM] unsigned char 
  3512 ;; Registers used:
  3513 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3514 ;; Tracked objects:
  3515 ;;		On entry : F/0
  3516 ;;		On exit  : F/0
  3517 ;;		Unchanged: F/0
  3518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3519 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3522 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3523 ;;Total ram usage:        4 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; Hardware stack levels required when called:    2
  3526 ;; This function calls:
  3527 ;;		Nothing
  3528 ;; This function is called by:
  3529 ;;		_exp
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           	psect	text9
  3534  005DF2                     __ptext9:
  3535                           	opt stack 0
  3536  005DF2                     ___flneg:
  3537                           	opt stack 26
  3538                           
  3539                           ; BSR set to: 0
  3540                           
  3541                           ;incstack = 0
  3542                           ;incstack = 0
  3543  005DF2  EE20  F00E         	lfsr	2,___flneg@f1
  3544  005DF6  50DE               	movf	postinc2,w,c
  3545  005DF8  10DE               	iorwf	postinc2,w,c
  3546  005DFA  10DE               	iorwf	postinc2,w,c
  3547  005DFC  10DE               	iorwf	postinc2,w,c
  3548  005DFE  E002               	bz	l13281
  3549                           
  3550                           ; BSR set to: 0
  3551  005E00  0E80               	movlw	128
  3552  005E02  1A11               	xorwf	___flneg@f1+3,f,c
  3553  005E04                     l13281:
  3554                           
  3555                           ; BSR set to: 0
  3556  005E04  C00E  F00E         	movff	___flneg@f1,?___flneg
  3557  005E08  C00F  F00F         	movff	___flneg@f1+1,?___flneg+1
  3558  005E0C  C010  F010         	movff	___flneg@f1+2,?___flneg+2
  3559  005E10  C011  F011         	movff	___flneg@f1+3,?___flneg+3
  3560                           
  3561                           ; BSR set to: 0
  3562  005E14  0012               	return	
  3563  005E16                     __end_of___flneg:
  3564                           	opt stack 0
  3565                           tblptru	equ	0xFF8
  3566                           tblptrh	equ	0xFF7
  3567                           tblptrl	equ	0xFF6
  3568                           tablat	equ	0xFF5
  3569                           prodh	equ	0xFF4
  3570                           prodl	equ	0xFF3
  3571                           intcon	equ	0xFF2
  3572                           postinc0	equ	0xFEE
  3573                           wreg	equ	0xFE8
  3574                           indf1	equ	0xFE7
  3575                           postdec1	equ	0xFE5
  3576                           fsr1h	equ	0xFE2
  3577                           fsr1l	equ	0xFE1
  3578                           indf2	equ	0xFDF
  3579                           postinc2	equ	0xFDE
  3580                           postdec2	equ	0xFDD
  3581                           plusw2	equ	0xFDB
  3582                           fsr2h	equ	0xFDA
  3583                           fsr2l	equ	0xFD9
  3584                           status	equ	0xFD8
  3585                           
  3586 ;; *************** function _ldexp *****************
  3587 ;; Defined at:
  3588 ;;		line 278 in file "/opt/microchip/xc8/v1.21/sources/common/frexp.c"
  3589 ;; Parameters:    Size  Location     Type
  3590 ;;  value           4   33[BANK0 ] unsigned char 
  3591 ;;  newexp          2   37[BANK0 ] int 
  3592 ;; Auto vars:     Size  Location     Type
  3593 ;;		None
  3594 ;; Return value:  Size  Location     Type
  3595 ;;                  4   33[BANK0 ] int 
  3596 ;; Registers used:
  3597 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3598 ;; Tracked objects:
  3599 ;;		On entry : F/0
  3600 ;;		On exit  : F/0
  3601 ;;		Unchanged: 0/0
  3602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3603 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3605 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3606 ;;      Totals:         3       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3607 ;;Total ram usage:        9 bytes
  3608 ;; Hardware stack levels used:    1
  3609 ;; Hardware stack levels required when called:    2
  3610 ;; This function calls:
  3611 ;;		Nothing
  3612 ;; This function is called by:
  3613 ;;		_exp
  3614 ;; This function uses a non-reentrant model
  3615 ;;
  3616                           
  3617                           	psect	text10
  3618  00520E                     __ptext10:
  3619                           	opt stack 0
  3620  00520E                     _ldexp:
  3621                           	opt stack 26
  3622                           
  3623                           ; BSR set to: 0
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;incstack = 0
  3627                           ;incstack = 0
  3628  00520E  EE20  F081         	lfsr	2,ldexp@value
  3629  005212  50DE               	movf	postinc2,w,c
  3630  005214  10DE               	iorwf	postinc2,w,c
  3631  005216  10DE               	iorwf	postinc2,w,c
  3632  005218  10DE               	iorwf	postinc2,w,c
  3633  00521A  E105               	bnz	l13235
  3634                           
  3635                           ; BSR set to: 0
  3636  00521C  6B81               	clrf	?_ldexp& (0+255),b
  3637  00521E  6B82               	clrf	(?_ldexp+1)& (0+255),b
  3638  005220  6B83               	clrf	(?_ldexp+2)& (0+255),b
  3639  005222  6B84               	clrf	(?_ldexp+3)& (0+255),b
  3640  005224  0012               	return	
  3641  005226                     l13235:
  3642                           
  3643                           ; BSR set to: 0
  3644  005226  5184               	movf	(ldexp@value+3)& (0+255),w,b
  3645  005228  0B7F               	andlw	127
  3646  00522A  6E43               	movwf	??_ldexp& (0+255),c
  3647  00522C  90D8               	bcf	status,0,c
  3648  00522E  3443               	rlcf	??_ldexp,w,c
  3649  005230  6E44               	movwf	(??_ldexp+1)& (0+255),c
  3650  005232  6A45               	clrf	(??_ldexp+2)& (0+255),c
  3651  005234  3645               	rlcf	(??_ldexp+2)& (0+255),f,c
  3652  005236  5044               	movf	??_ldexp+1,w,c
  3653  005238  2785               	addwf	ldexp@newexp& (0+255),f,b
  3654  00523A  5045               	movf	??_ldexp+2,w,c
  3655  00523C  2386               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  3656  00523E  3583               	rlcf	(ldexp@value+2)& (0+255),w,b
  3657  005240  36E8               	rlcf	wreg,f,c
  3658  005242  0B01               	andlw	1
  3659  005244  2785               	addwf	ldexp@newexp& (0+255),f,b
  3660  005246  0E00               	movlw	0
  3661  005248  2386               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  3662                           
  3663                           ; BSR set to: 0
  3664  00524A  AF86               	btfss	(ldexp@newexp+1)& (0+255),7,b
  3665  00524C  D005               	goto	l13243
  3666                           
  3667                           ; BSR set to: 0
  3668  00524E  6B81               	clrf	?_ldexp& (0+255),b
  3669  005250  6B82               	clrf	(?_ldexp+1)& (0+255),b
  3670  005252  6B83               	clrf	(?_ldexp+2)& (0+255),b
  3671  005254  6B84               	clrf	(?_ldexp+3)& (0+255),b
  3672  005256  0012               	return	
  3673  005258                     l13243:
  3674                           
  3675                           ; BSR set to: 0
  3676  005258  5186               	movf	(ldexp@newexp+1)& (0+255),w,b
  3677  00525A  0A80               	xorlw	128
  3678  00525C  0F7F               	addlw	-129
  3679  00525E  0E00               	movlw	0
  3680  005260  B4D8               	btfsc	status,2,c
  3681  005262  5D85               	subwf	ldexp@newexp& (0+255),w,b
  3682  005264  E30E               	bnc	l13257
  3683                           
  3684                           ; BSR set to: 0
  3685  005266  AF84               	btfss	(ldexp@value+3)& (0+255),7,b
  3686  005268  D006               	goto	l13253
  3687                           
  3688                           ; BSR set to: 0
  3689  00526A  6981               	setf	?_ldexp& (0+255),b
  3690  00526C  6982               	setf	(?_ldexp+1)& (0+255),b
  3691  00526E  0E7F               	movlw	127
  3692  005270  6F83               	movwf	(?_ldexp+2)& (0+255),b
  3693  005272  6984               	setf	(?_ldexp+3)& (0+255),b
  3694  005274  0CFF               	retlw	255
  3695  005276                     l13253:
  3696                           
  3697                           ; BSR set to: 0
  3698  005276  6981               	setf	?_ldexp& (0+255),b
  3699  005278  6982               	setf	(?_ldexp+1)& (0+255),b
  3700  00527A  0E7F               	movlw	127
  3701  00527C  6F83               	movwf	(?_ldexp+2)& (0+255),b
  3702  00527E  6F84               	movwf	(?_ldexp+3)& (0+255),b
  3703  005280  0C7F               	retlw	127
  3704  005282                     l13257:
  3705                           
  3706                           ; BSR set to: 0
  3707  005282  3586               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  3708  005284  3186               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  3709  005286  6E44               	movwf	(??_ldexp+1)& (0+255),c
  3710  005288  3185               	rrcf	ldexp@newexp& (0+255),w,b
  3711  00528A  6E43               	movwf	??_ldexp& (0+255),c
  3712  00528C  1984               	xorwf	(ldexp@value+3)& (0+255),w,b
  3713  00528E  0B80               	andlw	-128
  3714  005290  1843               	xorwf	??_ldexp,w,c
  3715  005292  6F84               	movwf	(ldexp@value+3)& (0+255),b
  3716  005294  C085  F043         	movff	ldexp@newexp,??_ldexp
  3717  005298  0E01               	movlw	1
  3718  00529A  1643               	andwf	??_ldexp,f,c
  3719  00529C  3243               	rrcf	??_ldexp,f,c
  3720  00529E  3243               	rrcf	??_ldexp,f,c
  3721  0052A0  5183               	movf	(ldexp@value+2)& (0+255),w,b
  3722  0052A2  1843               	xorwf	??_ldexp,w,c
  3723  0052A4  0B7F               	andlw	-129
  3724  0052A6  1843               	xorwf	??_ldexp,w,c
  3725  0052A8  6F83               	movwf	(ldexp@value+2)& (0+255),b
  3726                           
  3727                           ; BSR set to: 0
  3728  0052AA  C081  F081         	movff	ldexp@value,?_ldexp
  3729  0052AE  C082  F082         	movff	ldexp@value+1,?_ldexp+1
  3730  0052B2  C083  F083         	movff	ldexp@value+2,?_ldexp+2
  3731  0052B6  C084  F084         	movff	ldexp@value+3,?_ldexp+3
  3732                           
  3733                           ; BSR set to: 0
  3734  0052BA  0012               	return	
  3735  0052BC                     __end_of_ldexp:
  3736                           	opt stack 0
  3737                           tblptru	equ	0xFF8
  3738                           tblptrh	equ	0xFF7
  3739                           tblptrl	equ	0xFF6
  3740                           tablat	equ	0xFF5
  3741                           prodh	equ	0xFF4
  3742                           prodl	equ	0xFF3
  3743                           intcon	equ	0xFF2
  3744                           postinc0	equ	0xFEE
  3745                           wreg	equ	0xFE8
  3746                           indf1	equ	0xFE7
  3747                           postdec1	equ	0xFE5
  3748                           fsr1h	equ	0xFE2
  3749                           fsr1l	equ	0xFE1
  3750                           indf2	equ	0xFDF
  3751                           postinc2	equ	0xFDE
  3752                           postdec2	equ	0xFDD
  3753                           plusw2	equ	0xFDB
  3754                           fsr2h	equ	0xFDA
  3755                           fsr2l	equ	0xFD9
  3756                           status	equ	0xFD8
  3757                           
  3758 ;; *************** function _eval_poly *****************
  3759 ;; Defined at:
  3760 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/common/evalpoly.c"
  3761 ;; Parameters:    Size  Location     Type
  3762 ;;  x               4   22[BANK0 ] int 
  3763 ;;  d               1   26[BANK0 ] PTR const 
  3764 ;;		 -> log@coeff(36), exp@coeff(40), 
  3765 ;;  n               2   27[BANK0 ] int 
  3766 ;; Auto vars:     Size  Location     Type
  3767 ;;  res             4   29[BANK0 ] int 
  3768 ;; Return value:  Size  Location     Type
  3769 ;;                  4   22[BANK0 ] int 
  3770 ;; Registers used:
  3771 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3772 ;; Tracked objects:
  3773 ;;		On entry : F/0
  3774 ;;		On exit  : F/0
  3775 ;;		Unchanged: 0/0
  3776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3777 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3778 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3779 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3780 ;;      Totals:         1      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3781 ;;Total ram usage:       12 bytes
  3782 ;; Hardware stack levels used:    1
  3783 ;; Hardware stack levels required when called:    4
  3784 ;; This function calls:
  3785 ;;		___fladd
  3786 ;;		___flmul
  3787 ;; This function is called by:
  3788 ;;		_exp
  3789 ;;		_log
  3790 ;; This function uses a non-reentrant model
  3791 ;;
  3792                           
  3793                           	psect	text11
  3794  004F44                     __ptext11:
  3795                           	opt stack 0
  3796  004F44                     _eval_poly:
  3797                           	opt stack 24
  3798                           
  3799                           ; BSR set to: 0
  3800                           
  3801                           ; BSR set to: 0
  3802                           ;incstack = 0
  3803                           ;incstack = 0
  3804  004F44  517B               	movf	eval_poly@n& (0+255),w,b
  3805  004F46  D84E               	call	PL28	;call to abstracted procedure
  3806  004F48  CFF5 F07D          	movff	tablat,eval_poly@res
  3807  004F4C  0009               	tblrd		*+
  3808  004F4E  CFF5 F07E          	movff	tablat,eval_poly@res+1
  3809  004F52  0009               	tblrd		*+
  3810  004F54  CFF5 F07F          	movff	tablat,eval_poly@res+2
  3811  004F58  000A               	tblrd		*-
  3812  004F5A  CFF5 F080          	movff	tablat,eval_poly@res+3
  3813  004F5E  D035               	goto	l13229
  3814  004F60                     l13227:
  3815                           
  3816                           ; BSR set to: 0
  3817  004F60  C07D  F064         	movff	eval_poly@res,?___flmul+4
  3818  004F64  C07E  F065         	movff	eval_poly@res+1,?___flmul+5
  3819  004F68  C07F  F066         	movff	eval_poly@res+2,?___flmul+6
  3820  004F6C  C080  F067         	movff	eval_poly@res+3,?___flmul+7
  3821  004F70  C076  F060         	movff	eval_poly@x,?___flmul
  3822  004F74  C077  F061         	movff	eval_poly@x+1,?___flmul+1
  3823  004F78  C078  F062         	movff	eval_poly@x+2,?___flmul+2
  3824  004F7C  C079  F063         	movff	eval_poly@x+3,?___flmul+3
  3825  004F80  EC20  F026         	call	___flmul	;wreg free
  3826  004F84  C063  F020         	movff	?___flmul+3,?___fladd+3
  3827  004F88  C062  F01F         	movff	?___flmul+2,?___fladd+2
  3828  004F8C  C061  F01E         	movff	?___flmul+1,?___fladd+1
  3829  004F90  C060  F01D         	movff	?___flmul,?___fladd
  3830  004F94  0100               	movlb	0	; () banked
  3831  004F96  077B               	decf	eval_poly@n& (0+255),f,b
  3832  004F98  A0D8               	btfss	status,0,c
  3833  004F9A  077C               	decf	(eval_poly@n+1)& (0+255),f,b
  3834  004F9C  517B               	movf	eval_poly@n& (0+255),w,b
  3835  004F9E  D822               	call	PL28	;call to abstracted procedure
  3836  004FA0  CFF5 F021          	movff	tablat,?___fladd+4
  3837  004FA4  0009               	tblrd		*+
  3838  004FA6  CFF5 F022          	movff	tablat,?___fladd+5
  3839  004FAA  0009               	tblrd		*+
  3840  004FAC  CFF5 F023          	movff	tablat,?___fladd+6
  3841  004FB0  000A               	tblrd		*-
  3842  004FB2  CFF5 F024          	movff	tablat,?___fladd+7
  3843  004FB6  EC2C  F022         	call	___fladd	;wreg free
  3844  004FBA  C020  F080         	movff	?___fladd+3,eval_poly@res+3
  3845  004FBE  C01F  F07F         	movff	?___fladd+2,eval_poly@res+2
  3846  004FC2  C01E  F07E         	movff	?___fladd+1,eval_poly@res+1
  3847  004FC6  C01D  F07D         	movff	?___fladd,eval_poly@res
  3848  004FCA                     l13229:
  3849  004FCA  0100               	movlb	0	; () banked
  3850  004FCC  517C               	movf	(eval_poly@n+1)& (0+255),w,b
  3851  004FCE  117B               	iorwf	eval_poly@n& (0+255),w,b
  3852  004FD0  E1C7               	bnz	l13227
  3853                           
  3854                           ; BSR set to: 0
  3855  004FD2  C07D  F076         	movff	eval_poly@res,?_eval_poly
  3856  004FD6  C07E  F077         	movff	eval_poly@res+1,?_eval_poly+1
  3857  004FDA  C07F  F078         	movff	eval_poly@res+2,?_eval_poly+2
  3858  004FDE  C080  F079         	movff	eval_poly@res+3,?_eval_poly+3
  3859                           
  3860                           ; BSR set to: 0
  3861  004FE2  0012               	return	
  3862  004FE4                     __end_of_eval_poly:
  3863                           	opt stack 0
  3864  004FE4                     PL28:
  3865                           	opt stack 24
  3866  004FE4  0D04               	mullw	4
  3867  004FE6  517A               	movf	eval_poly@d& (0+255),w,b
  3868  004FE8  24F3               	addwf	prodl,w,c
  3869  004FEA  6E42               	movwf	??_eval_poly& (0+255),c
  3870  004FEC  C042  FFF6         	movff	??_eval_poly,tblptrl
  3871  004FF0  0E0F               	movlw	high __smallconst
  3872  004FF2  6EF7               	movwf	tblptrh,c
  3873  004FF4  0E00               	movlw	low (__smallconst shr (0+16))
  3874  004FF6  6EF8               	movwf	tblptru,c
  3875  004FF8  0009               	tblrd		*+
  3876  004FFA  0012               	return	
  3877  004FFC                     __end_ofPL28:
  3878                           	opt stack 0
  3879                           tblptru	equ	0xFF8
  3880                           tblptrh	equ	0xFF7
  3881                           tblptrl	equ	0xFF6
  3882                           tablat	equ	0xFF5
  3883                           prodh	equ	0xFF4
  3884                           prodl	equ	0xFF3
  3885                           intcon	equ	0xFF2
  3886                           postinc0	equ	0xFEE
  3887                           wreg	equ	0xFE8
  3888                           indf1	equ	0xFE7
  3889                           postdec1	equ	0xFE5
  3890                           fsr1h	equ	0xFE2
  3891                           fsr1l	equ	0xFE1
  3892                           indf2	equ	0xFDF
  3893                           postinc2	equ	0xFDE
  3894                           postdec2	equ	0xFDD
  3895                           plusw2	equ	0xFDB
  3896                           fsr2h	equ	0xFDA
  3897                           fsr2l	equ	0xFD9
  3898                           status	equ	0xFD8
  3899                           
  3900 ;; *************** function _floor *****************
  3901 ;; Defined at:
  3902 ;;		line 14 in file "/opt/microchip/xc8/v1.21/sources/common/floor.c"
  3903 ;; Parameters:    Size  Location     Type
  3904 ;;  x               4   47[BANK0 ] int 
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;  i               4   51[BANK0 ] int 
  3907 ;;  expon           2   55[BANK0 ] int 
  3908 ;; Return value:  Size  Location     Type
  3909 ;;                  4   47[BANK0 ] int 
  3910 ;; Registers used:
  3911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3912 ;; Tracked objects:
  3913 ;;		On entry : F/0
  3914 ;;		On exit  : 0/0
  3915 ;;		Unchanged: 0/0
  3916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3917 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3918 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3920 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3921 ;;Total ram usage:       10 bytes
  3922 ;; Hardware stack levels used:    1
  3923 ;; Hardware stack levels required when called:    4
  3924 ;; This function calls:
  3925 ;;		___altofl
  3926 ;;		___fladd
  3927 ;;		___flge
  3928 ;;		_frexp
  3929 ;;		___fltol
  3930 ;; This function is called by:
  3931 ;;		_exp
  3932 ;; This function uses a non-reentrant model
  3933 ;;
  3934                           
  3935                           	psect	text12
  3936  004B44                     __ptext12:
  3937                           	opt stack 0
  3938  004B44                     _floor:
  3939                           	opt stack 24
  3940                           
  3941                           ; BSR set to: 0
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;incstack = 0
  3945                           ;incstack = 0
  3946  004B44  C08F  F00E         	movff	floor@x,?_frexp
  3947  004B48  C090  F00F         	movff	floor@x+1,?_frexp+1
  3948  004B4C  C091  F010         	movff	floor@x+2,?_frexp+2
  3949  004B50  C092  F011         	movff	floor@x+3,?_frexp+3
  3950  004B54  0E00               	movlw	high floor@expon
  3951  004B56  6E13               	movwf	?_frexp+5,c
  3952  004B58  0E97               	movlw	low floor@expon
  3953  004B5A  6E12               	movwf	?_frexp+4,c
  3954  004B5C  EC45  F02A         	call	_frexp	;wreg free
  3955                           
  3956                           ; BSR set to: 0
  3957  004B60  AF98               	btfss	(floor@expon+1)& (0+255),7,b
  3958  004B62  D00F               	goto	l13215
  3959                           
  3960                           ; BSR set to: 0
  3961  004B64  AF92               	btfss	(floor@x+3)& (0+255),7,b
  3962  004B66  D008               	goto	l1677
  3963                           
  3964                           ; BSR set to: 0
  3965  004B68  0E00               	movlw	0
  3966  004B6A  6F8F               	movwf	?_floor& (0+255),b
  3967  004B6C  6F90               	movwf	(?_floor+1)& (0+255),b
  3968  004B6E  0E80               	movlw	128
  3969  004B70  6F91               	movwf	(?_floor+2)& (0+255),b
  3970  004B72  0EBF               	movlw	191
  3971  004B74  6F92               	movwf	(?_floor+3)& (0+255),b
  3972  004B76  0CBF               	retlw	191
  3973  004B78                     l1677:
  3974                           
  3975                           ; BSR set to: 0
  3976  004B78  6B8F               	clrf	?_floor& (0+255),b
  3977  004B7A  6B90               	clrf	(?_floor+1)& (0+255),b
  3978  004B7C  6B91               	clrf	(?_floor+2)& (0+255),b
  3979  004B7E  6B92               	clrf	(?_floor+3)& (0+255),b
  3980  004B80  0012               	return	
  3981  004B82                     l13215:
  3982                           
  3983                           ; BSR set to: 0
  3984  004B82  0E1D               	movlw	29
  3985  004B84  5D97               	subwf	floor@expon& (0+255),w,b
  3986  004B86  0E00               	movlw	0
  3987  004B88  5998               	subwfb	(floor@expon+1)& (0+255),w,b
  3988  004B8A  E309               	bnc	l13219
  3989                           
  3990                           ; BSR set to: 0
  3991  004B8C  C08F  F08F         	movff	floor@x,?_floor
  3992  004B90  C090  F090         	movff	floor@x+1,?_floor+1
  3993  004B94  C091  F091         	movff	floor@x+2,?_floor+2
  3994  004B98  C092  F092         	movff	floor@x+3,?_floor+3
  3995  004B9C  0012               	return	
  3996  004B9E                     l13219:
  3997                           
  3998                           ; BSR set to: 0
  3999  004B9E  C08F  F076         	movff	floor@x,?___fltol
  4000  004BA2  C090  F077         	movff	floor@x+1,?___fltol+1
  4001  004BA6  C091  F078         	movff	floor@x+2,?___fltol+2
  4002  004BAA  C092  F079         	movff	floor@x+3,?___fltol+3
  4003  004BAE  ECAE  F029         	call	___fltol	;wreg free
  4004  004BB2  C079  F08D         	movff	?___fltol+3,?___altofl+3
  4005  004BB6  C078  F08C         	movff	?___fltol+2,?___altofl+2
  4006  004BBA  C077  F08B         	movff	?___fltol+1,?___altofl+1
  4007  004BBE  C076  F08A         	movff	?___fltol,?___altofl
  4008  004BC2  ECC3  F02C         	call	___altofl	;wreg free
  4009  004BC6  C08D  F096         	movff	?___altofl+3,floor@i+3
  4010  004BCA  C08C  F095         	movff	?___altofl+2,floor@i+2
  4011  004BCE  C08B  F094         	movff	?___altofl+1,floor@i+1
  4012  004BD2  C08A  F093         	movff	?___altofl,floor@i
  4013  004BD6  C08F  F00E         	movff	floor@x,?___flge
  4014  004BDA  C090  F00F         	movff	floor@x+1,?___flge+1
  4015  004BDE  C091  F010         	movff	floor@x+2,?___flge+2
  4016  004BE2  C092  F011         	movff	floor@x+3,?___flge+3
  4017  004BE6  C093  F012         	movff	floor@i,?___flge+4
  4018  004BEA  C094  F013         	movff	floor@i+1,?___flge+5
  4019  004BEE  C095  F014         	movff	floor@i+2,?___flge+6
  4020  004BF2  C096  F015         	movff	floor@i+3,?___flge+7
  4021  004BF6  EC08  F02C         	call	___flge	;wreg free
  4022  004BFA  E219               	bc	l1680
  4023  004BFC  C093  F01D         	movff	floor@i,?___fladd
  4024  004C00  C094  F01E         	movff	floor@i+1,?___fladd+1
  4025  004C04  C095  F01F         	movff	floor@i+2,?___fladd+2
  4026  004C08  C096  F020         	movff	floor@i+3,?___fladd+3
  4027  004C0C  6A21               	clrf	?___fladd+4,c
  4028  004C0E  6A22               	clrf	?___fladd+5,c
  4029  004C10  0E80               	movlw	128
  4030  004C12  6E23               	movwf	?___fladd+6,c
  4031  004C14  0EBF               	movlw	191
  4032  004C16  6E24               	movwf	?___fladd+7,c
  4033  004C18  EC2C  F022         	call	___fladd	;wreg free
  4034  004C1C  C020  F092         	movff	?___fladd+3,?_floor+3
  4035  004C20  C01F  F091         	movff	?___fladd+2,?_floor+2
  4036  004C24  C01E  F090         	movff	?___fladd+1,?_floor+1
  4037  004C28  C01D  F08F         	movff	?___fladd,?_floor
  4038  004C2C  0012               	return	
  4039  004C2E                     l1680:
  4040  004C2E  C093  F08F         	movff	floor@i,?_floor
  4041  004C32  C094  F090         	movff	floor@i+1,?_floor+1
  4042  004C36  C095  F091         	movff	floor@i+2,?_floor+2
  4043  004C3A  C096  F092         	movff	floor@i+3,?_floor+3
  4044  004C3E  0012               	return	
  4045  004C40                     __end_of_floor:
  4046                           	opt stack 0
  4047                           tblptru	equ	0xFF8
  4048                           tblptrh	equ	0xFF7
  4049                           tblptrl	equ	0xFF6
  4050                           tablat	equ	0xFF5
  4051                           prodh	equ	0xFF4
  4052                           prodl	equ	0xFF3
  4053                           intcon	equ	0xFF2
  4054                           postinc0	equ	0xFEE
  4055                           wreg	equ	0xFE8
  4056                           indf1	equ	0xFE7
  4057                           postdec1	equ	0xFE5
  4058                           fsr1h	equ	0xFE2
  4059                           fsr1l	equ	0xFE1
  4060                           indf2	equ	0xFDF
  4061                           postinc2	equ	0xFDE
  4062                           postdec2	equ	0xFDD
  4063                           plusw2	equ	0xFDB
  4064                           fsr2h	equ	0xFDA
  4065                           fsr2l	equ	0xFD9
  4066                           status	equ	0xFD8
  4067                           
  4068 ;; *************** function ___fltol *****************
  4069 ;; Defined at:
  4070 ;;		line 44 in file "/opt/microchip/xc8/v1.21/sources/common/fltol.c"
  4071 ;; Parameters:    Size  Location     Type
  4072 ;;  f1              4   22[BANK0 ] int 
  4073 ;; Auto vars:     Size  Location     Type
  4074 ;;  exp1            1   27[BANK0 ] unsigned char 
  4075 ;;  sign1           1   26[BANK0 ] unsigned char 
  4076 ;; Return value:  Size  Location     Type
  4077 ;;                  4   22[BANK0 ] long 
  4078 ;; Registers used:
  4079 ;;		wreg, status,2, status,0
  4080 ;; Tracked objects:
  4081 ;;		On entry : 0/0
  4082 ;;		On exit  : F/0
  4083 ;;		Unchanged: 0/0
  4084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4085 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4086 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4087 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4088 ;;      Totals:         4       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4089 ;;Total ram usage:       10 bytes
  4090 ;; Hardware stack levels used:    1
  4091 ;; Hardware stack levels required when called:    2
  4092 ;; This function calls:
  4093 ;;		Nothing
  4094 ;; This function is called by:
  4095 ;;		_doWork
  4096 ;;		_setEventData
  4097 ;;		_exp
  4098 ;;		_floor
  4099 ;; This function uses a non-reentrant model
  4100 ;;
  4101                           
  4102                           	psect	text13
  4103  00535C                     __ptext13:
  4104                           	opt stack 0
  4105  00535C                     ___fltol:
  4106                           	opt stack 27
  4107                           
  4108                           ;incstack = 0
  4109                           ;incstack = 0
  4110  00535C  0100               	movlb	0	; () banked
  4111  00535E  3578               	rlcf	(___fltol@f1+2)& (0+255),w,b
  4112  005360  3579               	rlcf	(___fltol@f1+3)& (0+255),w,b
  4113  005362  6F7B               	movwf	___fltol@exp1& (0+255),b
  4114  005364  677B               	tstfsz	___fltol@exp1& (0+255),b
  4115  005366  D005               	goto	l13309
  4116  005368                     l13307:
  4117                           
  4118                           ; BSR set to: 0
  4119  005368  6B76               	clrf	?___fltol& (0+255),b
  4120  00536A  6B77               	clrf	(?___fltol+1)& (0+255),b
  4121  00536C  6B78               	clrf	(?___fltol+2)& (0+255),b
  4122  00536E  6B79               	clrf	(?___fltol+3)& (0+255),b
  4123  005370  0012               	return	
  4124  005372                     l13309:
  4125                           
  4126                           ; BSR set to: 0
  4127  005372  C076  F042         	movff	___fltol@f1,??___fltol
  4128  005376  C077  F043         	movff	___fltol@f1+1,??___fltol+1
  4129  00537A  C078  F044         	movff	___fltol@f1+2,??___fltol+2
  4130  00537E  C079  F045         	movff	___fltol@f1+3,??___fltol+3
  4131  005382  0E20               	movlw	32
  4132  005384  D005               	goto	u10260
  4133  005386                     u10265:
  4134  005386  90D8               	bcf	status,0,c
  4135  005388  3245               	rrcf	??___fltol+3,f,c
  4136  00538A  3244               	rrcf	??___fltol+2,f,c
  4137  00538C  3243               	rrcf	??___fltol+1,f,c
  4138  00538E  3242               	rrcf	??___fltol,f,c
  4139  005390                     u10260:
  4140  005390  2EE8               	decfsz	wreg,f,c
  4141  005392  D7F9               	goto	u10265
  4142  005394  5042               	movf	??___fltol,w,c
  4143  005396  6F7A               	movwf	___fltol@sign1& (0+255),b
  4144                           
  4145                           ; BSR set to: 0
  4146  005398  8F78               	bsf	(___fltol@f1+2)& (0+255),7,b
  4147                           
  4148                           ; BSR set to: 0
  4149  00539A  6B79               	clrf	(___fltol@f1+3)& (0+255),b
  4150                           
  4151                           ; BSR set to: 0
  4152  00539C  0E96               	movlw	150
  4153  00539E  5F7B               	subwf	___fltol@exp1& (0+255),f,b
  4154                           
  4155                           ; BSR set to: 0
  4156  0053A0  AF7B               	btfss	___fltol@exp1& (0+255),7,b
  4157  0053A2  D00C               	goto	l13327
  4158                           
  4159                           ; BSR set to: 0
  4160  0053A4  517B               	movf	___fltol@exp1& (0+255),w,b
  4161  0053A6  0A80               	xorlw	128
  4162  0053A8  0F97               	addlw	151
  4163  0053AA  E3DE               	bnc	l13307
  4164  0053AC                     l13323:
  4165                           
  4166                           ; BSR set to: 0
  4167  0053AC  90D8               	bcf	status,0,c
  4168  0053AE  3379               	rrcf	(___fltol@f1+3)& (0+255),f,b
  4169  0053B0  3378               	rrcf	(___fltol@f1+2)& (0+255),f,b
  4170  0053B2  3377               	rrcf	(___fltol@f1+1)& (0+255),f,b
  4171  0053B4  3376               	rrcf	___fltol@f1& (0+255),f,b
  4172                           
  4173                           ; BSR set to: 0
  4174  0053B6  3F7B               	incfsz	___fltol@exp1& (0+255),f,b
  4175  0053B8  D7F9               	goto	l13323
  4176  0053BA  D00C               	goto	l13335
  4177  0053BC                     l13327:
  4178                           
  4179                           ; BSR set to: 0
  4180  0053BC  0E1F               	movlw	31
  4181  0053BE  657B               	cpfsgt	___fltol@exp1& (0+255),b
  4182  0053C0  D007               	goto	l13333
  4183  0053C2  D7D2               	goto	l13307
  4184  0053C4                     l13331:
  4185                           
  4186                           ; BSR set to: 0
  4187  0053C4  90D8               	bcf	status,0,c
  4188  0053C6  3776               	rlcf	___fltol@f1& (0+255),f,b
  4189  0053C8  3777               	rlcf	(___fltol@f1+1)& (0+255),f,b
  4190  0053CA  3778               	rlcf	(___fltol@f1+2)& (0+255),f,b
  4191  0053CC  3779               	rlcf	(___fltol@f1+3)& (0+255),f,b
  4192  0053CE  077B               	decf	___fltol@exp1& (0+255),f,b
  4193  0053D0                     l13333:
  4194                           
  4195                           ; BSR set to: 0
  4196  0053D0  677B               	tstfsz	___fltol@exp1& (0+255),b
  4197  0053D2  D7F8               	goto	l13331
  4198  0053D4                     l13335:
  4199                           
  4200                           ; BSR set to: 0
  4201  0053D4  517A               	movf	___fltol@sign1& (0+255),w,b
  4202  0053D6  E008               	bz	l13339
  4203                           
  4204                           ; BSR set to: 0
  4205  0053D8  1F79               	comf	(___fltol@f1+3)& (0+255),f,b
  4206  0053DA  1F78               	comf	(___fltol@f1+2)& (0+255),f,b
  4207  0053DC  1F77               	comf	(___fltol@f1+1)& (0+255),f,b
  4208  0053DE  6D76               	negf	___fltol@f1& (0+255),b
  4209  0053E0  0E00               	movlw	0
  4210  0053E2  2377               	addwfc	(___fltol@f1+1)& (0+255),f,b
  4211  0053E4  2378               	addwfc	(___fltol@f1+2)& (0+255),f,b
  4212  0053E6  2379               	addwfc	(___fltol@f1+3)& (0+255),f,b
  4213  0053E8                     l13339:
  4214                           
  4215                           ; BSR set to: 0
  4216  0053E8  C076  F076         	movff	___fltol@f1,?___fltol
  4217  0053EC  C077  F077         	movff	___fltol@f1+1,?___fltol+1
  4218  0053F0  C078  F078         	movff	___fltol@f1+2,?___fltol+2
  4219  0053F4  C079  F079         	movff	___fltol@f1+3,?___fltol+3
  4220                           
  4221                           ; BSR set to: 0
  4222  0053F8  0012               	return	
  4223  0053FA                     __end_of___fltol:
  4224                           	opt stack 0
  4225                           tblptru	equ	0xFF8
  4226                           tblptrh	equ	0xFF7
  4227                           tblptrl	equ	0xFF6
  4228                           tablat	equ	0xFF5
  4229                           prodh	equ	0xFF4
  4230                           prodl	equ	0xFF3
  4231                           intcon	equ	0xFF2
  4232                           postinc0	equ	0xFEE
  4233                           wreg	equ	0xFE8
  4234                           indf1	equ	0xFE7
  4235                           postdec1	equ	0xFE5
  4236                           fsr1h	equ	0xFE2
  4237                           fsr1l	equ	0xFE1
  4238                           indf2	equ	0xFDF
  4239                           postinc2	equ	0xFDE
  4240                           postdec2	equ	0xFDD
  4241                           plusw2	equ	0xFDB
  4242                           fsr2h	equ	0xFDA
  4243                           fsr2l	equ	0xFD9
  4244                           status	equ	0xFD8
  4245                           
  4246 ;; *************** function _frexp *****************
  4247 ;; Defined at:
  4248 ;;		line 255 in file "/opt/microchip/xc8/v1.21/sources/common/frexp.c"
  4249 ;; Parameters:    Size  Location     Type
  4250 ;;  value           4   13[COMRAM] long 
  4251 ;;  eptr            2   17[COMRAM] PTR int 
  4252 ;;		 -> log@exponent(2), floor@expon(2), 
  4253 ;; Auto vars:     Size  Location     Type
  4254 ;;		None
  4255 ;; Return value:  Size  Location     Type
  4256 ;;                  4   13[COMRAM] PTR int 
  4257 ;; Registers used:
  4258 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4259 ;; Tracked objects:
  4260 ;;		On entry : F/0
  4261 ;;		On exit  : F/0
  4262 ;;		Unchanged: F/0
  4263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4264 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4266 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4267 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4268 ;;Total ram usage:        9 bytes
  4269 ;; Hardware stack levels used:    1
  4270 ;; Hardware stack levels required when called:    2
  4271 ;; This function calls:
  4272 ;;		Nothing
  4273 ;; This function is called by:
  4274 ;;		_floor
  4275 ;;		_log
  4276 ;; This function uses a non-reentrant model
  4277 ;;
  4278                           
  4279                           	psect	text14
  4280  00548A                     __ptext14:
  4281                           	opt stack 0
  4282  00548A                     _frexp:
  4283                           	opt stack 26
  4284                           
  4285                           ; BSR set to: 0
  4286                           
  4287                           ; BSR set to: 0
  4288                           ;incstack = 0
  4289                           ;incstack = 0
  4290  00548A  EE20  F00E         	lfsr	2,frexp@value
  4291  00548E  50DE               	movf	postinc2,w,c
  4292  005490  10DE               	iorwf	postinc2,w,c
  4293  005492  10DE               	iorwf	postinc2,w,c
  4294  005494  10DE               	iorwf	postinc2,w,c
  4295  005496  E10C               	bnz	l13293
  4296                           
  4297                           ; BSR set to: 0
  4298  005498  C012  FFD9         	movff	frexp@eptr,fsr2l
  4299  00549C  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4300  0054A0  0E00               	movlw	0
  4301  0054A2  6ADE               	clrf	postinc2,c
  4302  0054A4  6ADD               	clrf	postdec2,c
  4303                           
  4304                           ; BSR set to: 0
  4305  0054A6  6A0E               	clrf	?_frexp,c
  4306  0054A8  6A0F               	clrf	?_frexp+1,c
  4307  0054AA  6A10               	clrf	?_frexp+2,c
  4308  0054AC  6A11               	clrf	?_frexp+3,c
  4309  0054AE  0012               	return	
  4310  0054B0                     l13293:
  4311                           
  4312                           ; BSR set to: 0
  4313  0054B0  5011               	movf	frexp@value+3,w,c
  4314  0054B2  0B7F               	andlw	127
  4315  0054B4  6E14               	movwf	??_frexp& (0+255),c
  4316  0054B6  90D8               	bcf	status,0,c
  4317  0054B8  3414               	rlcf	??_frexp,w,c
  4318  0054BA  6E15               	movwf	(??_frexp+1)& (0+255),c
  4319  0054BC  6A16               	clrf	(??_frexp+2)& (0+255),c
  4320  0054BE  3616               	rlcf	(??_frexp+2)& (0+255),f,c
  4321  0054C0  C012  FFD9         	movff	frexp@eptr,fsr2l
  4322  0054C4  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4323  0054C8  C015  FFDE         	movff	??_frexp+1,postinc2
  4324  0054CC  C016  FFDD         	movff	??_frexp+2,postdec2
  4325  0054D0  3410               	rlcf	frexp@value+2,w,c
  4326  0054D2  36E8               	rlcf	wreg,f,c
  4327  0054D4  0B01               	andlw	1
  4328  0054D6  C012  FFD9         	movff	frexp@eptr,fsr2l
  4329  0054DA  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4330  0054DE  12DE               	iorwf	postinc2,f,c
  4331  0054E0  0E00               	movlw	0
  4332  0054E2  12DD               	iorwf	postdec2,f,c
  4333                           
  4334                           ; BSR set to: 0
  4335  0054E4  C012  FFD9         	movff	frexp@eptr,fsr2l
  4336  0054E8  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4337  0054EC  0E82               	movlw	130
  4338  0054EE  26DE               	addwf	postinc2,f,c
  4339  0054F0  0EFF               	movlw	255
  4340  0054F2  22DD               	addwfc	postdec2,f,c
  4341                           
  4342                           ; BSR set to: 0
  4343  0054F4  5011               	movf	frexp@value+3,w,c
  4344  0054F6  0B80               	andlw	-128
  4345  0054F8  093F               	iorlw	63
  4346  0054FA  6E11               	movwf	frexp@value+3,c
  4347                           
  4348                           ; BSR set to: 0
  4349  0054FC  9E10               	bcf	frexp@value+2,7,c
  4350                           
  4351                           ; BSR set to: 0
  4352  0054FE  C00E  F00E         	movff	frexp@value,?_frexp
  4353  005502  C00F  F00F         	movff	frexp@value+1,?_frexp+1
  4354  005506  C010  F010         	movff	frexp@value+2,?_frexp+2
  4355  00550A  C011  F011         	movff	frexp@value+3,?_frexp+3
  4356                           
  4357                           ; BSR set to: 0
  4358  00550E  0012               	return	
  4359  005510                     __end_of_frexp:
  4360                           	opt stack 0
  4361                           tblptru	equ	0xFF8
  4362                           tblptrh	equ	0xFF7
  4363                           tblptrl	equ	0xFF6
  4364                           tablat	equ	0xFF5
  4365                           prodh	equ	0xFF4
  4366                           prodl	equ	0xFF3
  4367                           intcon	equ	0xFF2
  4368                           postinc0	equ	0xFEE
  4369                           wreg	equ	0xFE8
  4370                           indf1	equ	0xFE7
  4371                           postdec1	equ	0xFE5
  4372                           fsr1h	equ	0xFE2
  4373                           fsr1l	equ	0xFE1
  4374                           indf2	equ	0xFDF
  4375                           postinc2	equ	0xFDE
  4376                           postdec2	equ	0xFDD
  4377                           plusw2	equ	0xFDB
  4378                           fsr2h	equ	0xFDA
  4379                           fsr2l	equ	0xFD9
  4380                           status	equ	0xFD8
  4381                           
  4382 ;; *************** function ___flge *****************
  4383 ;; Defined at:
  4384 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/common/flge.c"
  4385 ;; Parameters:    Size  Location     Type
  4386 ;;  ff1             4   13[COMRAM] PTR int 
  4387 ;;  ff2             4   17[COMRAM] PTR int 
  4388 ;; Auto vars:     Size  Location     Type
  4389 ;;		None
  4390 ;; Return value:  Size  Location     Type
  4391 ;;		None               void
  4392 ;; Registers used:
  4393 ;;		wreg, status,2, status,0
  4394 ;; Tracked objects:
  4395 ;;		On entry : 0/0
  4396 ;;		On exit  : 0/0
  4397 ;;		Unchanged: 0/0
  4398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4399 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4402 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4403 ;;Total ram usage:        8 bytes
  4404 ;; Hardware stack levels used:    1
  4405 ;; Hardware stack levels required when called:    2
  4406 ;; This function calls:
  4407 ;;		Nothing
  4408 ;; This function is called by:
  4409 ;;		_exp
  4410 ;;		_floor
  4411 ;; This function uses a non-reentrant model
  4412 ;;
  4413                           
  4414                           	psect	text15
  4415  005810                     __ptext15:
  4416                           	opt stack 0
  4417  005810                     ___flge:
  4418                           	opt stack 26
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;incstack = 0
  4422                           ;incstack = 0
  4423  005810  AE11               	btfss	___flge@ff1+3,7,c
  4424  005812  D009               	goto	l13267
  4425  005814  6C0E               	negf	___flge@ff1,c
  4426  005816  1E0F               	comf	___flge@ff1+1,f,c
  4427  005818  B0D8               	btfsc	status,0,c
  4428  00581A  2A0F               	incf	___flge@ff1+1,f,c
  4429  00581C  1E10               	comf	___flge@ff1+2,f,c
  4430  00581E  B0D8               	btfsc	status,0,c
  4431  005820  2A10               	incf	___flge@ff1+2,f,c
  4432  005822  0E80               	movlw	128
  4433  005824  5611               	subfwb	___flge@ff1+3,f,c
  4434  005826                     l13267:
  4435  005826  AE15               	btfss	___flge@ff2+3,7,c
  4436  005828  D009               	goto	l1636
  4437  00582A  6C12               	negf	___flge@ff2,c
  4438  00582C  1E13               	comf	___flge@ff2+1,f,c
  4439  00582E  B0D8               	btfsc	status,0,c
  4440  005830  2A13               	incf	___flge@ff2+1,f,c
  4441  005832  1E14               	comf	___flge@ff2+2,f,c
  4442  005834  B0D8               	btfsc	status,0,c
  4443  005836  2A14               	incf	___flge@ff2+2,f,c
  4444  005838  0E80               	movlw	128
  4445  00583A  5615               	subfwb	___flge@ff2+3,f,c
  4446  00583C                     l1636:
  4447  00583C  0E80               	movlw	128
  4448  00583E  1A11               	xorwf	___flge@ff1+3,f,c
  4449  005840  1A15               	xorwf	___flge@ff2+3,f,c
  4450  005842  5012               	movf	___flge@ff2,w,c
  4451  005844  5C0E               	subwf	___flge@ff1,w,c
  4452  005846  5013               	movf	___flge@ff2+1,w,c
  4453  005848  580F               	subwfb	___flge@ff1+1,w,c
  4454  00584A  5014               	movf	___flge@ff2+2,w,c
  4455  00584C  5810               	subwfb	___flge@ff1+2,w,c
  4456  00584E  5015               	movf	___flge@ff2+3,w,c
  4457  005850  5811               	subwfb	___flge@ff1+3,w,c
  4458  005852  E202               	bc	l13273
  4459  005854  90D8               	bcf	status,0,c
  4460  005856  0012               	return	
  4461  005858                     l13273:
  4462  005858  80D8               	bsf	status,0,c
  4463  00585A  0012               	return	
  4464  00585C                     __end_of___flge:
  4465                           	opt stack 0
  4466                           tblptru	equ	0xFF8
  4467                           tblptrh	equ	0xFF7
  4468                           tblptrl	equ	0xFF6
  4469                           tablat	equ	0xFF5
  4470                           prodh	equ	0xFF4
  4471                           prodl	equ	0xFF3
  4472                           intcon	equ	0xFF2
  4473                           postinc0	equ	0xFEE
  4474                           wreg	equ	0xFE8
  4475                           indf1	equ	0xFE7
  4476                           postdec1	equ	0xFE5
  4477                           fsr1h	equ	0xFE2
  4478                           fsr1l	equ	0xFE1
  4479                           indf2	equ	0xFDF
  4480                           postinc2	equ	0xFDE
  4481                           postdec2	equ	0xFDD
  4482                           plusw2	equ	0xFDB
  4483                           fsr2h	equ	0xFDA
  4484                           fsr2l	equ	0xFD9
  4485                           status	equ	0xFD8
  4486                           
  4487 ;; *************** function ___altofl *****************
  4488 ;; Defined at:
  4489 ;;		line 37 in file "/opt/microchip/xc8/v1.21/sources/common/altofl.c"
  4490 ;; Parameters:    Size  Location     Type
  4491 ;;  c               4   42[BANK0 ] long 
  4492 ;; Auto vars:     Size  Location     Type
  4493 ;;  sign            1   46[BANK0 ] unsigned char 
  4494 ;; Return value:  Size  Location     Type
  4495 ;;                  4   42[BANK0 ] unsigned char 
  4496 ;; Registers used:
  4497 ;;		wreg, status,2, status,0, cstack
  4498 ;; Tracked objects:
  4499 ;;		On entry : F/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4503 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4504 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4506 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4507 ;;Total ram usage:        5 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; Hardware stack levels required when called:    3
  4510 ;; This function calls:
  4511 ;;		___flpack
  4512 ;; This function is called by:
  4513 ;;		_doWork
  4514 ;;		_floor
  4515 ;; This function uses a non-reentrant model
  4516 ;;
  4517                           
  4518                           	psect	text16
  4519  005986                     __ptext16:
  4520                           	opt stack 0
  4521  005986                     ___altofl:
  4522                           	opt stack 26
  4523                           
  4524                           ; BSR set to: 0
  4525                           
  4526                           ;incstack = 0
  4527                           ;incstack = 0
  4528  005986  6B8E               	clrf	___altofl@sign& (0+255),b
  4529  005988  AF8D               	btfss	(___altofl@c+3)& (0+255),7,b
  4530  00598A  D00A               	goto	l13021
  4531                           
  4532                           ; BSR set to: 0
  4533  00598C  1F8D               	comf	(___altofl@c+3)& (0+255),f,b
  4534  00598E  1F8C               	comf	(___altofl@c+2)& (0+255),f,b
  4535  005990  1F8B               	comf	(___altofl@c+1)& (0+255),f,b
  4536  005992  6D8A               	negf	___altofl@c& (0+255),b
  4537  005994  0E00               	movlw	0
  4538  005996  238B               	addwfc	(___altofl@c+1)& (0+255),f,b
  4539  005998  238C               	addwfc	(___altofl@c+2)& (0+255),f,b
  4540  00599A  238D               	addwfc	(___altofl@c+3)& (0+255),f,b
  4541                           
  4542                           ; BSR set to: 0
  4543  00599C  0E01               	movlw	1
  4544  00599E  6F8E               	movwf	___altofl@sign& (0+255),b
  4545  0059A0                     l13021:
  4546                           
  4547                           ; BSR set to: 0
  4548  0059A0  C08A  F00E         	movff	___altofl@c,?___flpack
  4549  0059A4  C08B  F00F         	movff	___altofl@c+1,?___flpack+1
  4550  0059A8  C08C  F010         	movff	___altofl@c+2,?___flpack+2
  4551  0059AC  C08D  F011         	movff	___altofl@c+3,?___flpack+3
  4552  0059B0  0E96               	movlw	150
  4553  0059B2  6E12               	movwf	?___flpack+4,c
  4554  0059B4  C08E  F013         	movff	___altofl@sign,?___flpack+5
  4555  0059B8  EC44  F027         	call	___flpack	;wreg free
  4556  0059BC  C011  F08D         	movff	?___flpack+3,?___altofl+3
  4557  0059C0  C010  F08C         	movff	?___flpack+2,?___altofl+2
  4558  0059C4  C00F  F08B         	movff	?___flpack+1,?___altofl+1
  4559  0059C8  C00E  F08A         	movff	?___flpack,?___altofl
  4560  0059CC  0012               	return	
  4561  0059CE                     __end_of___altofl:
  4562                           	opt stack 0
  4563                           tblptru	equ	0xFF8
  4564                           tblptrh	equ	0xFF7
  4565                           tblptrl	equ	0xFF6
  4566                           tablat	equ	0xFF5
  4567                           prodh	equ	0xFF4
  4568                           prodl	equ	0xFF3
  4569                           intcon	equ	0xFF2
  4570                           postinc0	equ	0xFEE
  4571                           wreg	equ	0xFE8
  4572                           indf1	equ	0xFE7
  4573                           postdec1	equ	0xFE5
  4574                           fsr1h	equ	0xFE2
  4575                           fsr1l	equ	0xFE1
  4576                           indf2	equ	0xFDF
  4577                           postinc2	equ	0xFDE
  4578                           postdec2	equ	0xFDD
  4579                           plusw2	equ	0xFDB
  4580                           fsr2h	equ	0xFDA
  4581                           fsr2l	equ	0xFD9
  4582                           status	equ	0xFD8
  4583                           
  4584 ;; *************** function ___asflsub *****************
  4585 ;; Defined at:
  4586 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/pic18/asflsub.c"
  4587 ;; Parameters:    Size  Location     Type
  4588 ;;  f1p             2   30[BANK0 ] PTR 
  4589 ;;		 -> exp@x(4), doWork@temp(4), 
  4590 ;;  f2              4   32[BANK0 ] PTR 
  4591 ;; Auto vars:     Size  Location     Type
  4592 ;;		None
  4593 ;; Return value:  Size  Location     Type
  4594 ;;                  4   30[BANK0 ] PTR 
  4595 ;; Registers used:
  4596 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4597 ;; Tracked objects:
  4598 ;;		On entry : 0/0
  4599 ;;		On exit  : F/0
  4600 ;;		Unchanged: 0/0
  4601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4602 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4605 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4606 ;;Total ram usage:        6 bytes
  4607 ;; Hardware stack levels used:    1
  4608 ;; Hardware stack levels required when called:    5
  4609 ;; This function calls:
  4610 ;;		___flsub
  4611 ;; This function is called by:
  4612 ;;		_doWork
  4613 ;;		_exp
  4614 ;; This function uses a non-reentrant model
  4615 ;;
  4616                           
  4617                           	psect	text17
  4618  0057C2                     __ptext17:
  4619                           	opt stack 0
  4620  0057C2                     ___asflsub:
  4621                           	opt stack 24
  4622                           
  4623                           ;	Return value of ___asflsub is never used
  4624                           
  4625                           ;incstack = 0
  4626                           ;incstack = 0
  4627  0057C2  C07E  FFD9         	movff	___asflsub@f1p,fsr2l
  4628  0057C6  C07F  FFDA         	movff	___asflsub@f1p+1,fsr2h
  4629  0057CA  0100               	movlb	0	; () banked
  4630  0057CC  CFDE F076          	movff	postinc2,?___flsub
  4631  0057D0  CFDE F077          	movff	postinc2,?___flsub+1
  4632  0057D4  CFDE F078          	movff	postinc2,?___flsub+2
  4633  0057D8  CFDE F079          	movff	postinc2,?___flsub+3
  4634  0057DC  C080  F07A         	movff	___asflsub@f2,?___flsub+4
  4635  0057E0  C081  F07B         	movff	___asflsub@f2+1,?___flsub+5
  4636  0057E4  C082  F07C         	movff	___asflsub@f2+2,?___flsub+6
  4637  0057E8  C083  F07D         	movff	___asflsub@f2+3,?___flsub+7
  4638  0057EC  EC8C  F02D         	call	___flsub	;wreg free
  4639  0057F0  C07E  FFD9         	movff	___asflsub@f1p,fsr2l
  4640  0057F4  C07F  FFDA         	movff	___asflsub@f1p+1,fsr2h
  4641  0057F8  0100               	movlb	0	; () banked
  4642  0057FA  C076  FFDE         	movff	?___flsub,postinc2
  4643  0057FE  C077  FFDE         	movff	?___flsub+1,postinc2
  4644  005802  C078  FFDE         	movff	?___flsub+2,postinc2
  4645  005806  C079  FFDD         	movff	?___flsub+3,postdec2
  4646  00580A  06D9               	decf	fsr2l,f,c
  4647  00580C  06D9               	decf	fsr2l,f,c
  4648                           
  4649                           ; BSR set to: 0
  4650  00580E  0012               	return	
  4651  005810                     __end_of___asflsub:
  4652                           	opt stack 0
  4653                           tblptru	equ	0xFF8
  4654                           tblptrh	equ	0xFF7
  4655                           tblptrl	equ	0xFF6
  4656                           tablat	equ	0xFF5
  4657                           prodh	equ	0xFF4
  4658                           prodl	equ	0xFF3
  4659                           intcon	equ	0xFF2
  4660                           postinc0	equ	0xFEE
  4661                           wreg	equ	0xFE8
  4662                           indf1	equ	0xFE7
  4663                           postdec1	equ	0xFE5
  4664                           fsr1h	equ	0xFE2
  4665                           fsr1l	equ	0xFE1
  4666                           indf2	equ	0xFDF
  4667                           postinc2	equ	0xFDE
  4668                           postdec2	equ	0xFDD
  4669                           plusw2	equ	0xFDB
  4670                           fsr2h	equ	0xFDA
  4671                           fsr2l	equ	0xFD9
  4672                           status	equ	0xFD8
  4673                           
  4674 ;; *************** function ___flsub *****************
  4675 ;; Defined at:
  4676 ;;		line 22 in file "/opt/microchip/xc8/v1.21/sources/common/flsub.c"
  4677 ;; Parameters:    Size  Location     Type
  4678 ;;  f1              4   22[BANK0 ] PTR 
  4679 ;;  f2              4   26[BANK0 ] PTR 
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;		None
  4682 ;; Return value:  Size  Location     Type
  4683 ;;                  4   22[BANK0 ] PTR 
  4684 ;; Registers used:
  4685 ;;		wreg, status,2, status,0, cstack
  4686 ;; Tracked objects:
  4687 ;;		On entry : 0/0
  4688 ;;		On exit  : 0/0
  4689 ;;		Unchanged: 0/0
  4690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4691 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4694 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4695 ;;Total ram usage:        8 bytes
  4696 ;; Hardware stack levels used:    1
  4697 ;; Hardware stack levels required when called:    4
  4698 ;; This function calls:
  4699 ;;		___fladd
  4700 ;; This function is called by:
  4701 ;;		_doWork
  4702 ;;		___asflsub
  4703 ;; This function uses a non-reentrant model
  4704 ;;
  4705                           
  4706                           	psect	text18
  4707  005B18                     __ptext18:
  4708                           	opt stack 0
  4709  005B18                     ___flsub:
  4710                           	opt stack 25
  4711                           
  4712                           ; BSR set to: 0
  4713                           ;incstack = 0
  4714                           ;incstack = 0
  4715  005B18  0100               	movlb	0	; () banked
  4716  005B1A  0E80               	movlw	128
  4717  005B1C  1B7D               	xorwf	(___flsub@f2+3)& (0+255),f,b
  4718                           
  4719                           ; BSR set to: 0
  4720  005B1E  C076  F01D         	movff	___flsub@f1,?___fladd
  4721  005B22  C077  F01E         	movff	___flsub@f1+1,?___fladd+1
  4722  005B26  C078  F01F         	movff	___flsub@f1+2,?___fladd+2
  4723  005B2A  C079  F020         	movff	___flsub@f1+3,?___fladd+3
  4724  005B2E  C07A  F021         	movff	___flsub@f2,?___fladd+4
  4725  005B32  C07B  F022         	movff	___flsub@f2+1,?___fladd+5
  4726  005B36  C07C  F023         	movff	___flsub@f2+2,?___fladd+6
  4727  005B3A  C07D  F024         	movff	___flsub@f2+3,?___fladd+7
  4728  005B3E  EC2C  F022         	call	___fladd	;wreg free
  4729  005B42  C020  F079         	movff	?___fladd+3,?___flsub+3
  4730  005B46  C01F  F078         	movff	?___fladd+2,?___flsub+2
  4731  005B4A  C01E  F077         	movff	?___fladd+1,?___flsub+1
  4732  005B4E  C01D  F076         	movff	?___fladd,?___flsub
  4733  005B52  0012               	return	
  4734  005B54                     __end_of___flsub:
  4735                           	opt stack 0
  4736                           tblptru	equ	0xFF8
  4737                           tblptrh	equ	0xFF7
  4738                           tblptrl	equ	0xFF6
  4739                           tablat	equ	0xFF5
  4740                           prodh	equ	0xFF4
  4741                           prodl	equ	0xFF3
  4742                           intcon	equ	0xFF2
  4743                           postinc0	equ	0xFEE
  4744                           wreg	equ	0xFE8
  4745                           indf1	equ	0xFE7
  4746                           postdec1	equ	0xFE5
  4747                           fsr1h	equ	0xFE2
  4748                           fsr1l	equ	0xFE1
  4749                           indf2	equ	0xFDF
  4750                           postinc2	equ	0xFDE
  4751                           postdec2	equ	0xFDD
  4752                           plusw2	equ	0xFDB
  4753                           fsr2h	equ	0xFDA
  4754                           fsr2l	equ	0xFD9
  4755                           status	equ	0xFD8
  4756                           
  4757 ;; *************** function ___asflmul *****************
  4758 ;; Defined at:
  4759 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/pic18/asflmul.c"
  4760 ;; Parameters:    Size  Location     Type
  4761 ;;  mp              1    wreg     PTR 
  4762 ;;		 -> exp@x(4), 
  4763 ;;  multiplicand    4   22[BANK0 ] PTR 
  4764 ;; Auto vars:     Size  Location     Type
  4765 ;;  mp              1   65[COMRAM] PTR 
  4766 ;;		 -> exp@x(4), 
  4767 ;; Return value:  Size  Location     Type
  4768 ;;                  4   22[BANK0 ] PTR 
  4769 ;; Registers used:
  4770 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4771 ;; Tracked objects:
  4772 ;;		On entry : F/0
  4773 ;;		On exit  : F/0
  4774 ;;		Unchanged: 0/0
  4775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4776 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4777 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4779 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4780 ;;Total ram usage:        5 bytes
  4781 ;; Hardware stack levels used:    1
  4782 ;; Hardware stack levels required when called:    4
  4783 ;; This function calls:
  4784 ;;		___flmul
  4785 ;; This function is called by:
  4786 ;;		_exp
  4787 ;; This function uses a non-reentrant model
  4788 ;;
  4789                           
  4790                           	psect	text19
  4791  00585C                     __ptext19:
  4792                           	opt stack 0
  4793  00585C                     ___asflmul:
  4794                           	opt stack 24
  4795                           
  4796                           ;incstack = 0
  4797                           ;incstack = 0
  4798                           ;___asflmul@mp stored from wreg
  4799  00585C  CFE8 F042          	movff	wreg,___asflmul@mp
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;	Return value of ___asflmul is never used
  4803  005860  5042               	movf	___asflmul@mp,w,c
  4804  005862  6ED9               	movwf	fsr2l,c
  4805  005864  6ADA               	clrf	fsr2h,c
  4806  005866  CFDE F060          	movff	postinc2,?___flmul
  4807  00586A  CFDE F061          	movff	postinc2,?___flmul+1
  4808  00586E  CFDE F062          	movff	postinc2,?___flmul+2
  4809  005872  CFDE F063          	movff	postinc2,?___flmul+3
  4810  005876  C076  F064         	movff	___asflmul@multiplicand,?___flmul+4
  4811  00587A  C077  F065         	movff	___asflmul@multiplicand+1,?___flmul+5
  4812  00587E  C078  F066         	movff	___asflmul@multiplicand+2,?___flmul+6
  4813  005882  C079  F067         	movff	___asflmul@multiplicand+3,?___flmul+7
  4814  005886  EC20  F026         	call	___flmul	;wreg free
  4815  00588A  5042               	movf	___asflmul@mp,w,c
  4816  00588C  6ED9               	movwf	fsr2l,c
  4817  00588E  6ADA               	clrf	fsr2h,c
  4818  005890  0100               	movlb	0	; () banked
  4819  005892  C060  FFDE         	movff	?___flmul,postinc2
  4820  005896  C061  FFDE         	movff	?___flmul+1,postinc2
  4821  00589A  C062  FFDE         	movff	?___flmul+2,postinc2
  4822  00589E  C063  FFDD         	movff	?___flmul+3,postdec2
  4823  0058A2  06D9               	decf	fsr2l,f,c
  4824  0058A4  06D9               	decf	fsr2l,f,c
  4825                           
  4826                           ; BSR set to: 0
  4827  0058A6  0012               	return	
  4828  0058A8                     __end_of___asflmul:
  4829                           	opt stack 0
  4830                           tblptru	equ	0xFF8
  4831                           tblptrh	equ	0xFF7
  4832                           tblptrl	equ	0xFF6
  4833                           tablat	equ	0xFF5
  4834                           prodh	equ	0xFF4
  4835                           prodl	equ	0xFF3
  4836                           intcon	equ	0xFF2
  4837                           postinc0	equ	0xFEE
  4838                           wreg	equ	0xFE8
  4839                           indf1	equ	0xFE7
  4840                           postdec1	equ	0xFE5
  4841                           fsr1h	equ	0xFE2
  4842                           fsr1l	equ	0xFE1
  4843                           indf2	equ	0xFDF
  4844                           postinc2	equ	0xFDE
  4845                           postdec2	equ	0xFDD
  4846                           plusw2	equ	0xFDB
  4847                           fsr2h	equ	0xFDA
  4848                           fsr2l	equ	0xFD9
  4849                           status	equ	0xFD8
  4850                           
  4851 ;; *************** function ___fldiv *****************
  4852 ;; Defined at:
  4853 ;;		line 50 in file "/opt/microchip/xc8/v1.21/sources/common/fldiv.c"
  4854 ;; Parameters:    Size  Location     Type
  4855 ;;  f1              4   43[COMRAM] PTR 
  4856 ;;  f2              4   47[COMRAM] PTR 
  4857 ;; Auto vars:     Size  Location     Type
  4858 ;;  f3              4   58[COMRAM] PTR 
  4859 ;;  sign            1   64[COMRAM] unsigned char 
  4860 ;;  exp             1   63[COMRAM] unsigned char 
  4861 ;;  cntr            1   62[COMRAM] unsigned char 
  4862 ;; Return value:  Size  Location     Type
  4863 ;;                  4   43[COMRAM] unsigned char 
  4864 ;; Registers used:
  4865 ;;		wreg, status,2, status,0, cstack
  4866 ;; Tracked objects:
  4867 ;;		On entry : 0/1
  4868 ;;		On exit  : 0/0
  4869 ;;		Unchanged: 0/0
  4870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4871 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4872 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4874 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4875 ;;Total ram usage:       22 bytes
  4876 ;; Hardware stack levels used:    1
  4877 ;; Hardware stack levels required when called:    3
  4878 ;; This function calls:
  4879 ;;		___flpack
  4880 ;; This function is called by:
  4881 ;;		_doWork
  4882 ;;		_Celsius2Fahrenheit
  4883 ;;		___asfldiv
  4884 ;;		_exp
  4885 ;; This function uses a non-reentrant model
  4886 ;;
  4887                           
  4888                           	psect	text20
  4889  0050AE                     __ptext20:
  4890                           	opt stack 0
  4891  0050AE                     ___fldiv:
  4892                           	opt stack 26
  4893                           
  4894                           ; BSR set to: 0
  4895                           ;incstack = 0
  4896                           ;incstack = 0
  4897  0050AE  342E               	rlcf	(___fldiv@f1+2)& (0+255),w,c
  4898  0050B0  342F               	rlcf	(___fldiv@f1+3)& (0+255),w,c
  4899  0050B2  6E40               	movwf	___fldiv@exp,c
  4900  0050B4  6640               	tstfsz	___fldiv@exp& (0+255),c
  4901  0050B6  D005               	goto	l13105
  4902  0050B8  6A2C               	clrf	?___fldiv,c
  4903  0050BA  6A2D               	clrf	?___fldiv+1,c
  4904  0050BC  6A2E               	clrf	?___fldiv+2,c
  4905  0050BE  6A2F               	clrf	?___fldiv+3,c
  4906  0050C0  0012               	return	
  4907  0050C2                     l13105:
  4908  0050C2  3432               	rlcf	(___fldiv@f2+2)& (0+255),w,c
  4909  0050C4  3433               	rlcf	(___fldiv@f2+3)& (0+255),w,c
  4910  0050C6  6E41               	movwf	___fldiv@sign,c
  4911  0050C8  6641               	tstfsz	___fldiv@sign& (0+255),c
  4912  0050CA  D005               	goto	l13109
  4913  0050CC  6A2C               	clrf	?___fldiv,c
  4914  0050CE  6A2D               	clrf	?___fldiv+1,c
  4915  0050D0  6A2E               	clrf	?___fldiv+2,c
  4916  0050D2  6A2F               	clrf	?___fldiv+3,c
  4917  0050D4  0012               	return	
  4918  0050D6                     l13109:
  4919  0050D6  5041               	movf	___fldiv@sign,w,c
  4920  0050D8  0F89               	addlw	137
  4921  0050DA  5E40               	subwf	___fldiv@exp,f,c
  4922  0050DC  C02F  F041         	movff	___fldiv@f1+3,___fldiv@sign
  4923  0050E0  5033               	movf	(___fldiv@f2+3)& (0+255),w,c
  4924  0050E2  1A41               	xorwf	___fldiv@sign,f,c
  4925  0050E4  0E80               	movlw	128
  4926  0050E6  1641               	andwf	___fldiv@sign,f,c
  4927  0050E8  8E2E               	bsf	___fldiv@f1+2,7,c
  4928  0050EA  6A2F               	clrf	___fldiv@f1+3,c
  4929  0050EC  8E32               	bsf	___fldiv@f2+2,7,c
  4930  0050EE  6A33               	clrf	___fldiv@f2+3,c
  4931  0050F0  0E20               	movlw	32
  4932  0050F2  6E3F               	movwf	___fldiv@cntr,c
  4933  0050F4                     l13121:
  4934  0050F4  90D8               	bcf	status,0,c
  4935  0050F6  363B               	rlcf	___fldiv@f3,f,c
  4936  0050F8  363C               	rlcf	___fldiv@f3+1,f,c
  4937  0050FA  363D               	rlcf	___fldiv@f3+2,f,c
  4938  0050FC  363E               	rlcf	___fldiv@f3+3,f,c
  4939  0050FE  5030               	movf	___fldiv@f2,w,c
  4940  005100  5C2C               	subwf	___fldiv@f1,w,c
  4941  005102  5031               	movf	___fldiv@f2+1,w,c
  4942  005104  582D               	subwfb	___fldiv@f1+1,w,c
  4943  005106  5032               	movf	___fldiv@f2+2,w,c
  4944  005108  582E               	subwfb	___fldiv@f1+2,w,c
  4945  00510A  5033               	movf	___fldiv@f2+3,w,c
  4946  00510C  582F               	subwfb	___fldiv@f1+3,w,c
  4947  00510E  E309               	bnc	l13129
  4948  005110  5030               	movf	___fldiv@f2,w,c
  4949  005112  5E2C               	subwf	___fldiv@f1,f,c
  4950  005114  5031               	movf	___fldiv@f2+1,w,c
  4951  005116  5A2D               	subwfb	___fldiv@f1+1,f,c
  4952  005118  5032               	movf	___fldiv@f2+2,w,c
  4953  00511A  5A2E               	subwfb	___fldiv@f1+2,f,c
  4954  00511C  5033               	movf	___fldiv@f2+3,w,c
  4955  00511E  5A2F               	subwfb	___fldiv@f1+3,f,c
  4956  005120  803B               	bsf	___fldiv@f3,0,c
  4957  005122                     l13129:
  4958  005122  90D8               	bcf	status,0,c
  4959  005124  362C               	rlcf	___fldiv@f1,f,c
  4960  005126  362D               	rlcf	___fldiv@f1+1,f,c
  4961  005128  362E               	rlcf	___fldiv@f1+2,f,c
  4962  00512A  362F               	rlcf	___fldiv@f1+3,f,c
  4963  00512C  2E3F               	decfsz	___fldiv@cntr,f,c
  4964  00512E  D7E2               	goto	l13121
  4965  005130  C03B  F00E         	movff	___fldiv@f3,?___flpack
  4966  005134  C03C  F00F         	movff	___fldiv@f3+1,?___flpack+1
  4967  005138  C03D  F010         	movff	___fldiv@f3+2,?___flpack+2
  4968  00513C  C03E  F011         	movff	___fldiv@f3+3,?___flpack+3
  4969  005140  C040  F012         	movff	___fldiv@exp,?___flpack+4
  4970  005144  C041  F013         	movff	___fldiv@sign,?___flpack+5
  4971  005148  EC44  F027         	call	___flpack	;wreg free
  4972  00514C  C011  F02F         	movff	?___flpack+3,?___fldiv+3
  4973  005150  C010  F02E         	movff	?___flpack+2,?___fldiv+2
  4974  005154  C00F  F02D         	movff	?___flpack+1,?___fldiv+1
  4975  005158  C00E  F02C         	movff	?___flpack,?___fldiv
  4976  00515C  0012               	return	
  4977  00515E                     __end_of___fldiv:
  4978                           	opt stack 0
  4979                           tblptru	equ	0xFF8
  4980                           tblptrh	equ	0xFF7
  4981                           tblptrl	equ	0xFF6
  4982                           tablat	equ	0xFF5
  4983                           prodh	equ	0xFF4
  4984                           prodl	equ	0xFF3
  4985                           intcon	equ	0xFF2
  4986                           postinc0	equ	0xFEE
  4987                           wreg	equ	0xFE8
  4988                           indf1	equ	0xFE7
  4989                           postdec1	equ	0xFE5
  4990                           fsr1h	equ	0xFE2
  4991                           fsr1l	equ	0xFE1
  4992                           indf2	equ	0xFDF
  4993                           postinc2	equ	0xFDE
  4994                           postdec2	equ	0xFDD
  4995                           plusw2	equ	0xFDB
  4996                           fsr2h	equ	0xFDA
  4997                           fsr2l	equ	0xFD9
  4998                           status	equ	0xFD8
  4999                           
  5000 ;; *************** function _vscp_doOneSecondWork *****************
  5001 ;; Defined at:
  5002 ;;		line 513 in file "../../vscp_firmware/common/vscp_firmware.c"
  5003 ;; Parameters:    Size  Location     Type
  5004 ;;		None
  5005 ;; Auto vars:     Size  Location     Type
  5006 ;;		None
  5007 ;; Return value:  Size  Location     Type
  5008 ;;		None               void
  5009 ;; Registers used:
  5010 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5011 ;; Tracked objects:
  5012 ;;		On entry : F/0
  5013 ;;		On exit  : F/0
  5014 ;;		Unchanged: 0/0
  5015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5018 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5019 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5020 ;;Total ram usage:        1 bytes
  5021 ;; Hardware stack levels used:    1
  5022 ;; Hardware stack levels required when called:    8
  5023 ;; This function calls:
  5024 ;;		_vscp_getZone
  5025 ;;		_vscp_getSubzone
  5026 ;;		_vscp_sendHeartBeat
  5027 ;; This function is called by:
  5028 ;;		_main
  5029 ;; This function uses a non-reentrant model
  5030 ;;
  5031                           
  5032                           	psect	text21
  5033  00576C                     __ptext21:
  5034                           	opt stack 0
  5035  00576C                     _vscp_doOneSecondWork:
  5036                           	opt stack 22
  5037                           
  5038                           ; BSR set to: 0
  5039                           ;vscp_firmware.c: 515: ++vscp_second;
  5040                           
  5041                           ;incstack = 0
  5042                           ;incstack = 0
  5043  00576C  2A51               	incf	_vscp_second,f,c
  5044                           
  5045                           ; BSR set to: 0
  5046                           ;vscp_firmware.c: 517: if (vscp_second > 59) {
  5047  00576E  0E3B               	movlw	59
  5048  005770  6451               	cpfsgt	_vscp_second,c
  5049  005772  D00E               	goto	l11487
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;vscp_firmware.c: 518: vscp_second = 0;
  5053  005774  6A51               	clrf	_vscp_second,c
  5054                           
  5055                           ; BSR set to: 0
  5056                           ;vscp_firmware.c: 519: vscp_minute++;
  5057  005776  0101               	movlb	1	; () banked
  5058  005778  2B21               	incf	_vscp_minute& (0+255),f,b
  5059                           
  5060                           ; BSR set to: 1
  5061                           ;vscp_firmware.c: 522: if (0x03 == vscp_node_state) {
  5062  00577A  0100               	movlb	0	; () banked
  5063  00577C  51BC               	movf	_vscp_node_state& (0+255),w,b
  5064  00577E  0A03               	xorlw	3
  5065  005780  E107               	bnz	l11487
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;vscp_firmware.c: 523: vscp_sendHeartBeat(vscp_getZone(),
  5069                           ;vscp_firmware.c: 524: vscp_getSubzone());
  5070  005782  EC20  F030         	call	_vscp_getSubzone	;wreg free
  5071  005786  6E44               	movwf	?_vscp_sendHeartBeat,c
  5072  005788  EC25  F030         	call	_vscp_getZone	;wreg free
  5073  00578C  ECD3  F02E         	call	_vscp_sendHeartBeat
  5074  005790                     l11487:
  5075                           
  5076                           ;vscp_firmware.c: 525: }
  5077                           ;vscp_firmware.c: 526: }
  5078                           ;vscp_firmware.c: 528: if (vscp_minute > 59) {
  5079  005790  0E3B               	movlw	59
  5080  005792  0101               	movlb	1	; () banked
  5081  005794  6521               	cpfsgt	_vscp_minute& (0+255),b
  5082  005796  D002               	goto	l11493
  5083                           
  5084                           ; BSR set to: 1
  5085                           ;vscp_firmware.c: 529: vscp_minute = 0;
  5086  005798  6B21               	clrf	_vscp_minute& (0+255),b
  5087                           
  5088                           ; BSR set to: 1
  5089                           ;vscp_firmware.c: 530: vscp_hour++;
  5090  00579A  2B20               	incf	_vscp_hour& (0+255),f,b
  5091  00579C                     l11493:
  5092                           
  5093                           ; BSR set to: 1
  5094                           ;vscp_firmware.c: 531: }
  5095                           ;vscp_firmware.c: 533: if (vscp_hour > 23) vscp_hour = 0;
  5096  00579C  0E17               	movlw	23
  5097  00579E  6520               	cpfsgt	_vscp_hour& (0+255),b
  5098  0057A0  D001               	goto	l11497
  5099                           
  5100                           ; BSR set to: 1
  5101  0057A2  6B20               	clrf	_vscp_hour& (0+255),b
  5102  0057A4                     l11497:
  5103                           
  5104                           ; BSR set to: 1
  5105                           ;vscp_firmware.c: 537: if (0x03 == vscp_node_state) {
  5106  0057A4  0100               	movlb	0	; () banked
  5107  0057A6  51BC               	movf	_vscp_node_state& (0+255),w,b
  5108  0057A8  0A03               	xorlw	3
  5109  0057AA  A4D8               	btfss	status,2,c
  5110  0057AC  0012               	return	
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;vscp_firmware.c: 538: vscp_guid_reset++;
  5114  0057AE  2A4C               	incf	_vscp_guid_reset,f,c
  5115                           
  5116                           ; BSR set to: 0
  5117                           ;vscp_firmware.c: 539: if ((vscp_guid_reset & 0x0f) >= 2) {
  5118  0057B0  C04C  F07F         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  5119  0057B4  0E0F               	movlw	15
  5120  0057B6  177F               	andwf	??_vscp_doOneSecondWork& (0+255),f,b
  5121  0057B8  0E02               	movlw	2
  5122  0057BA  5D7F               	subwf	??_vscp_doOneSecondWork& (0+255),w,b
  5123  0057BC  B0D8               	btfsc	status,0,c
  5124                           
  5125                           ; BSR set to: 0
  5126                           ;vscp_firmware.c: 540: vscp_guid_reset = 0;
  5127  0057BE  6A4C               	clrf	_vscp_guid_reset,c
  5128                           
  5129                           ; BSR set to: 0
  5130  0057C0  0012               	return	
  5131  0057C2                     __end_of_vscp_doOneSecondWork:
  5132                           	opt stack 0
  5133                           tblptru	equ	0xFF8
  5134                           tblptrh	equ	0xFF7
  5135                           tblptrl	equ	0xFF6
  5136                           tablat	equ	0xFF5
  5137                           prodh	equ	0xFF4
  5138                           prodl	equ	0xFF3
  5139                           intcon	equ	0xFF2
  5140                           postinc0	equ	0xFEE
  5141                           wreg	equ	0xFE8
  5142                           indf1	equ	0xFE7
  5143                           postdec1	equ	0xFE5
  5144                           fsr1h	equ	0xFE2
  5145                           fsr1l	equ	0xFE1
  5146                           indf2	equ	0xFDF
  5147                           postinc2	equ	0xFDE
  5148                           postdec2	equ	0xFDD
  5149                           plusw2	equ	0xFDB
  5150                           fsr2h	equ	0xFDA
  5151                           fsr2l	equ	0xFD9
  5152                           status	equ	0xFD8
  5153                           
  5154 ;; *************** function _vscp_sendHeartBeat *****************
  5155 ;; Defined at:
  5156 ;;		line 382 in file "../../vscp_firmware/common/vscp_firmware.c"
  5157 ;; Parameters:    Size  Location     Type
  5158 ;;  zone            1    wreg     unsigned char 
  5159 ;;  subzone         1   67[COMRAM] unsigned char 
  5160 ;; Auto vars:     Size  Location     Type
  5161 ;;  zone            1   68[COMRAM] unsigned char 
  5162 ;; Return value:  Size  Location     Type
  5163 ;;		None               void
  5164 ;; Registers used:
  5165 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5166 ;; Tracked objects:
  5167 ;;		On entry : 0/0
  5168 ;;		On exit  : 0/0
  5169 ;;		Unchanged: 0/0
  5170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5171 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5172 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5174 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5175 ;;Total ram usage:        2 bytes
  5176 ;; Hardware stack levels used:    1
  5177 ;; Hardware stack levels required when called:    7
  5178 ;; This function calls:
  5179 ;;		_vscp_sendEvent
  5180 ;; This function is called by:
  5181 ;;		_vscp_doOneSecondWork
  5182 ;; This function uses a non-reentrant model
  5183 ;;
  5184                           
  5185                           	psect	text22
  5186  005DA6                     __ptext22:
  5187                           	opt stack 0
  5188  005DA6                     _vscp_sendHeartBeat:
  5189                           	opt stack 22
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;incstack = 0
  5193                           ;incstack = 0
  5194                           ;vscp_sendHeartBeat@zone stored from wreg
  5195  005DA6  CFE8 F045          	movff	wreg,vscp_sendHeartBeat@zone
  5196                           
  5197                           ;vscp_firmware.c: 383: vscp_omsg.flags = 0x80 + 3;
  5198  005DAA  0E83               	movlw	131
  5199  005DAC  0100               	movlb	0	; () banked
  5200  005DAE  6FCB               	movwf	_vscp_omsg& (0+255),b
  5201                           
  5202                           ;vscp_firmware.c: 384: vscp_omsg.priority = 0x07;
  5203  005DB0  0E07               	movlw	7
  5204  005DB2  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  5205                           
  5206                           ;vscp_firmware.c: 385: vscp_omsg.vscp_class = 20;
  5207  005DB4  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5208  005DB6  0E14               	movlw	20
  5209  005DB8  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  5210                           
  5211                           ;vscp_firmware.c: 386: vscp_omsg.vscp_type = 9;
  5212  005DBA  0E09               	movlw	9
  5213  005DBC  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  5214                           
  5215                           ; BSR set to: 0
  5216                           ;vscp_firmware.c: 387: vscp_omsg.data[ 0 ] = 0;
  5217  005DBE  6BD1               	clrf	(_vscp_omsg+6)& (0+255),b
  5218                           
  5219                           ; BSR set to: 0
  5220                           ;vscp_firmware.c: 388: vscp_omsg.data[ 1 ] = zone;
  5221  005DC0  C045  F0D2         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+7
  5222                           
  5223                           ; BSR set to: 0
  5224                           ;vscp_firmware.c: 389: vscp_omsg.data[ 2 ] = subzone;
  5225  005DC4  C044  F0D3         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+8
  5226                           
  5227                           ; BSR set to: 0
  5228                           ;vscp_firmware.c: 392: vscp_sendEvent();
  5229  005DC8  EF68  F02E         	goto	_vscp_sendEvent	;wreg free
  5230  005DCC                     __end_of_vscp_sendHeartBeat:
  5231                           	opt stack 0
  5232                           tblptru	equ	0xFF8
  5233                           tblptrh	equ	0xFF7
  5234                           tblptrl	equ	0xFF6
  5235                           tablat	equ	0xFF5
  5236                           prodh	equ	0xFF4
  5237                           prodl	equ	0xFF3
  5238                           intcon	equ	0xFF2
  5239                           postinc0	equ	0xFEE
  5240                           wreg	equ	0xFE8
  5241                           indf1	equ	0xFE7
  5242                           postdec1	equ	0xFE5
  5243                           fsr1h	equ	0xFE2
  5244                           fsr1l	equ	0xFE1
  5245                           indf2	equ	0xFDF
  5246                           postinc2	equ	0xFDE
  5247                           postdec2	equ	0xFDD
  5248                           plusw2	equ	0xFDB
  5249                           fsr2h	equ	0xFDA
  5250                           fsr2l	equ	0xFD9
  5251                           status	equ	0xFD8
  5252                           
  5253 ;; *************** function _vscp_getSubzone *****************
  5254 ;; Defined at:
  5255 ;;		line 2788 in file "../main.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;		None
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;		None
  5260 ;; Return value:  Size  Location     Type
  5261 ;;                  1    wreg      unsigned char 
  5262 ;; Registers used:
  5263 ;;		wreg, status,2, status,0, cstack
  5264 ;; Tracked objects:
  5265 ;;		On entry : F/0
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5273 ;;Total ram usage:        0 bytes
  5274 ;; Hardware stack levels used:    1
  5275 ;; Hardware stack levels required when called:    3
  5276 ;; This function calls:
  5277 ;;		_Read_b_eep
  5278 ;; This function is called by:
  5279 ;;		_vscp_doOneSecondWork
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           	psect	text23
  5284  006040                     __ptext23:
  5285                           	opt stack 0
  5286  006040                     _vscp_getSubzone:
  5287                           	opt stack 26
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;main.c: 2789: return Read_b_eep(0x42);
  5291                           
  5292                           ;incstack = 0
  5293                           ;incstack = 0
  5294  006040  6A17               	clrf	?_Read_b_eep+1,c
  5295  006042  0E42               	movlw	66
  5296  006044  6E16               	movwf	?_Read_b_eep,c
  5297  006046  EFC2  F02F         	goto	_Read_b_eep	;wreg free
  5298  00604A                     __end_of_vscp_getSubzone:
  5299                           	opt stack 0
  5300                           tblptru	equ	0xFF8
  5301                           tblptrh	equ	0xFF7
  5302                           tblptrl	equ	0xFF6
  5303                           tablat	equ	0xFF5
  5304                           prodh	equ	0xFF4
  5305                           prodl	equ	0xFF3
  5306                           intcon	equ	0xFF2
  5307                           postinc0	equ	0xFEE
  5308                           wreg	equ	0xFE8
  5309                           indf1	equ	0xFE7
  5310                           postdec1	equ	0xFE5
  5311                           fsr1h	equ	0xFE2
  5312                           fsr1l	equ	0xFE1
  5313                           indf2	equ	0xFDF
  5314                           postinc2	equ	0xFDE
  5315                           postdec2	equ	0xFDD
  5316                           plusw2	equ	0xFDB
  5317                           fsr2h	equ	0xFDA
  5318                           fsr2l	equ	0xFD9
  5319                           status	equ	0xFD8
  5320                           
  5321 ;; *************** function _vscp_getZone *****************
  5322 ;; Defined at:
  5323 ;;		line 2779 in file "../main.c"
  5324 ;; Parameters:    Size  Location     Type
  5325 ;;		None
  5326 ;; Auto vars:     Size  Location     Type
  5327 ;;		None
  5328 ;; Return value:  Size  Location     Type
  5329 ;;                  1    wreg      unsigned char 
  5330 ;; Registers used:
  5331 ;;		wreg, status,2, status,0, cstack
  5332 ;; Tracked objects:
  5333 ;;		On entry : 0/0
  5334 ;;		On exit  : 0/0
  5335 ;;		Unchanged: 0/0
  5336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5341 ;;Total ram usage:        0 bytes
  5342 ;; Hardware stack levels used:    1
  5343 ;; Hardware stack levels required when called:    3
  5344 ;; This function calls:
  5345 ;;		_Read_b_eep
  5346 ;; This function is called by:
  5347 ;;		_vscp_doOneSecondWork
  5348 ;; This function uses a non-reentrant model
  5349 ;;
  5350                           
  5351                           	psect	text24
  5352  00604A                     __ptext24:
  5353                           	opt stack 0
  5354  00604A                     _vscp_getZone:
  5355                           	opt stack 26
  5356                           
  5357                           ;main.c: 2780: return Read_b_eep(0x41);
  5358                           
  5359                           ;incstack = 0
  5360                           ;incstack = 0
  5361  00604A  6A17               	clrf	?_Read_b_eep+1,c
  5362  00604C  0E41               	movlw	65
  5363  00604E  6E16               	movwf	?_Read_b_eep,c
  5364  006050  EFC2  F02F         	goto	_Read_b_eep	;wreg free
  5365  006054                     __end_of_vscp_getZone:
  5366                           	opt stack 0
  5367                           tblptru	equ	0xFF8
  5368                           tblptrh	equ	0xFF7
  5369                           tblptrl	equ	0xFF6
  5370                           tablat	equ	0xFF5
  5371                           prodh	equ	0xFF4
  5372                           prodl	equ	0xFF3
  5373                           intcon	equ	0xFF2
  5374                           postinc0	equ	0xFEE
  5375                           wreg	equ	0xFE8
  5376                           indf1	equ	0xFE7
  5377                           postdec1	equ	0xFE5
  5378                           fsr1h	equ	0xFE2
  5379                           fsr1l	equ	0xFE1
  5380                           indf2	equ	0xFDF
  5381                           postinc2	equ	0xFDE
  5382                           postdec2	equ	0xFDD
  5383                           plusw2	equ	0xFDB
  5384                           fsr2h	equ	0xFDA
  5385                           fsr2l	equ	0xFD9
  5386                           status	equ	0xFD8
  5387                           
  5388 ;; *************** function _doOneSecondWork *****************
  5389 ;; Defined at:
  5390 ;;		line 562 in file "../main.c"
  5391 ;; Parameters:    Size  Location     Type
  5392 ;;		None
  5393 ;; Auto vars:     Size  Location     Type
  5394 ;;  setpoint        2   47[BANK0 ] short 
  5395 ;;  i               1   49[BANK0 ] unsigned char 
  5396 ;;  tmp             1   46[BANK0 ] unsigned char 
  5397 ;; Return value:  Size  Location     Type
  5398 ;;		None               void
  5399 ;; Registers used:
  5400 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5401 ;; Tracked objects:
  5402 ;;		On entry : F/1
  5403 ;;		On exit  : F/0
  5404 ;;		Unchanged: 0/0
  5405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5407 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5408 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5409 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5410 ;;Total ram usage:       11 bytes
  5411 ;; Hardware stack levels used:    1
  5412 ;; Hardware stack levels required when called:    8
  5413 ;; This function calls:
  5414 ;;		_Busy_eep
  5415 ;;		_Write_b_eep
  5416 ;;		_Read_b_eep
  5417 ;;		_sendTempEvent
  5418 ;;		_vscp_sendEvent
  5419 ;;		___wmul
  5420 ;; This function is called by:
  5421 ;;		_main
  5422 ;; This function uses a non-reentrant model
  5423 ;;
  5424                           
  5425                           	psect	text25
  5426  003350                     __ptext25:
  5427                           	opt stack 0
  5428  003350                     _doOneSecondWork:
  5429                           	opt stack 22
  5430                           
  5431                           ; BSR set to: 1
  5432                           ;main.c: 563: uint8_t tmp;
  5433                           ;main.c: 564: uint8_t i;
  5434                           ;main.c: 565: int16_t setpoint;
  5435                           ;main.c: 567: for (i = 0; i < 6; i++) {
  5436                           
  5437                           ;incstack = 0
  5438                           ;incstack = 0
  5439  003350  0100               	movlb	0	; () banked
  5440  003352  6B91               	clrf	doOneSecondWork@i& (0+255),b
  5441  003354                     l11313:
  5442                           
  5443                           ; BSR set to: 0
  5444                           ;main.c: 573: if (current_temp[ i ] < ((int16_t)( (((uint16_t)Read_b_eep(0x7F + 2*i))<<8
      +                          ) + (uint16_t)Read_b_eep(0x80 + 2*i)) ) ) {
  5445  003354  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5446  003356  0D02               	mullw	2
  5447  003358  0E7F               	movlw	127
  5448  00335A  24F3               	addwf	prodl,w,c
  5449  00335C  6E16               	movwf	?_Read_b_eep,c
  5450  00335E  0E00               	movlw	0
  5451  003360  20F4               	addwfc	prodh,w,c
  5452  003362  6E17               	movwf	?_Read_b_eep+1,c
  5453  003364  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5454  003368  0100               	movlb	0	; () banked
  5455  00336A  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5456  00336C  6B87               	clrf	??_doOneSecondWork& (0+255),b
  5457  00336E  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5458  003370  0D02               	mullw	2
  5459  003372  0E80               	movlw	128
  5460  003374  24F3               	addwf	prodl,w,c
  5461  003376  6E16               	movwf	?_Read_b_eep,c
  5462  003378  0E00               	movlw	0
  5463  00337A  20F4               	addwfc	prodh,w,c
  5464  00337C  6E17               	movwf	?_Read_b_eep+1,c
  5465  00337E  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5466  003382  0100               	movlb	0	; () banked
  5467  003384  2787               	addwf	??_doOneSecondWork& (0+255),f,b
  5468  003386  0E00               	movlw	0
  5469  003388  2388               	addwfc	(??_doOneSecondWork+1)& (0+255),f,b
  5470  00338A  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5471  00338C  0D02               	mullw	2
  5472  00338E  DA2C               	call	PL2	;call to abstracted procedure
  5473  003390  CFDE F089          	movff	postinc2,??_doOneSecondWork+2
  5474  003394  CFDD F08A          	movff	postdec2,??_doOneSecondWork+3
  5475  003398  DAB0               	call	PL54	;call to abstracted procedure
  5476  00339A  E214               	bc	l211
  5477                           
  5478                           ; BSR set to: 0
  5479                           ;main.c: 576: (Busy_eep(), Write_b_eep(0x7F + 2*i,((uint16_t)current_temp[ i ]) >> 8));
  5480  00339C  EC3D  F030         	call	_Busy_eep	;wreg free
  5481  0033A0  DA6E               	call	PL20	;call to abstracted procedure
  5482  0033A2  0E7F               	movlw	127
  5483  0033A4  DA64               	call	PL14	;call to abstracted procedure
  5484  0033A6  DA20               	call	PL2	;call to abstracted procedure
  5485  0033A8  DA94               	call	PL42	;call to abstracted procedure
  5486  0033AA  ECC8  F02D         	call	_Write_b_eep	;wreg free
  5487                           
  5488                           ;main.c: 577: (Busy_eep(), Write_b_eep(0x80 + 2*i,((uint16_t)current_temp[ i ]) & 0xff));
  5489  0033AE  EC3D  F030         	call	_Busy_eep	;wreg free
  5490  0033B2  DA65               	call	PL20	;call to abstracted procedure
  5491  0033B4  0E80               	movlw	128
  5492  0033B6  DA5B               	call	PL14	;call to abstracted procedure
  5493  0033B8  0101               	movlb	1	; () banked
  5494  0033BA  DA16               	call	PL2	;call to abstracted procedure
  5495  0033BC  50DF               	movf	indf2,w,c
  5496  0033BE  6E10               	movwf	?_Write_b_eep+2,c
  5497  0033C0  ECC8  F02D         	call	_Write_b_eep	;wreg free
  5498  0033C4                     l211:
  5499                           
  5500                           ;main.c: 578: }
  5501                           ;main.c: 584: if (current_temp[ i ] > ((int16_t)( (((uint16_t)Read_b_eep(0x8B + 2*i))<<8
      +                          ) + (uint16_t)Read_b_eep(0x8C + 2*i)) ) ) {
  5502  0033C4  0100               	movlb	0	; () banked
  5503  0033C6  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5504  0033C8  0D02               	mullw	2
  5505  0033CA  DA0E               	call	PL2	;call to abstracted procedure
  5506  0033CC  CFDE F087          	movff	postinc2,??_doOneSecondWork
  5507  0033D0  CFDD F088          	movff	postdec2,??_doOneSecondWork+1
  5508  0033D4  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5509  0033D6  0D02               	mullw	2
  5510  0033D8  0E8B               	movlw	139
  5511  0033DA  24F3               	addwf	prodl,w,c
  5512  0033DC  6E16               	movwf	?_Read_b_eep,c
  5513  0033DE  0E00               	movlw	0
  5514  0033E0  20F4               	addwfc	prodh,w,c
  5515  0033E2  6E17               	movwf	?_Read_b_eep+1,c
  5516  0033E4  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5517  0033E8  0100               	movlb	0	; () banked
  5518  0033EA  6F8A               	movwf	(??_doOneSecondWork+3)& (0+255),b
  5519  0033EC  6B89               	clrf	(??_doOneSecondWork+2)& (0+255),b
  5520  0033EE  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5521  0033F0  0D02               	mullw	2
  5522  0033F2  0E8C               	movlw	140
  5523  0033F4  24F3               	addwf	prodl,w,c
  5524  0033F6  6E16               	movwf	?_Read_b_eep,c
  5525  0033F8  0E00               	movlw	0
  5526  0033FA  20F4               	addwfc	prodh,w,c
  5527  0033FC  6E17               	movwf	?_Read_b_eep+1,c
  5528  0033FE  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5529  003402  0100               	movlb	0	; () banked
  5530  003404  2789               	addwf	(??_doOneSecondWork+2)& (0+255),f,b
  5531  003406  0E00               	movlw	0
  5532  003408  238A               	addwfc	(??_doOneSecondWork+3)& (0+255),f,b
  5533  00340A  DA77               	call	PL54	;call to abstracted procedure
  5534  00340C  E214               	bc	l11327
  5535                           
  5536                           ; BSR set to: 0
  5537                           ;main.c: 587: (Busy_eep(), Write_b_eep(0x8B + 2*i,((uint16_t)current_temp[ i ]) >> 8));
  5538  00340E  EC3D  F030         	call	_Busy_eep	;wreg free
  5539  003412  DA35               	call	PL20	;call to abstracted procedure
  5540  003414  0E8B               	movlw	139
  5541  003416  DA2B               	call	PL14	;call to abstracted procedure
  5542  003418  D9E7               	call	PL2	;call to abstracted procedure
  5543  00341A  DA5B               	call	PL42	;call to abstracted procedure
  5544  00341C  ECC8  F02D         	call	_Write_b_eep	;wreg free
  5545                           
  5546                           ;main.c: 588: (Busy_eep(), Write_b_eep(0x8C + 2*i,((uint16_t)current_temp[ i ]) & 0xff));
  5547  003420  EC3D  F030         	call	_Busy_eep	;wreg free
  5548  003424  DA2C               	call	PL20	;call to abstracted procedure
  5549  003426  0E8C               	movlw	140
  5550  003428  DA22               	call	PL14	;call to abstracted procedure
  5551  00342A  0101               	movlb	1	; () banked
  5552  00342C  D9DD               	call	PL2	;call to abstracted procedure
  5553  00342E  50DF               	movf	indf2,w,c
  5554  003430  6E10               	movwf	?_Write_b_eep+2,c
  5555  003432  ECC8  F02D         	call	_Write_b_eep	;wreg free
  5556  003436                     l11327:
  5557                           
  5558                           ;main.c: 589: }
  5559                           ;main.c: 594: tmp = Read_b_eep(0x49 + i);
  5560  003436  0E49               	movlw	73
  5561  003438  DA69               	call	PL72	;call to abstracted procedure
  5562  00343A  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5563  00343E  0100               	movlb	0	; () banked
  5564  003440  6F8E               	movwf	doOneSecondWork@tmp& (0+255),b
  5565                           
  5566                           ; BSR set to: 0
  5567                           ;main.c: 595: if (tmp && (seconds_temp[i] > tmp)) {
  5568  003442  518E               	movf	doOneSecondWork@tmp& (0+255),w,b
  5569  003444  E016               	bz	l11337
  5570                           
  5571                           ; BSR set to: 0
  5572  003446  0E0C               	movlw	low _seconds_temp
  5573  003448  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5574  00344A  6ED9               	movwf	fsr2l,c
  5575  00344C  6ADA               	clrf	fsr2h,c
  5576  00344E  0E01               	movlw	high _seconds_temp
  5577  003450  22DA               	addwfc	fsr2h,f,c
  5578  003452  50DF               	movf	indf2,w,c
  5579  003454  618E               	cpfslt	doOneSecondWork@tmp& (0+255),b
  5580  003456  D00D               	goto	l11337
  5581                           
  5582                           ; BSR set to: 0
  5583                           ;main.c: 598: if (sendTempEvent(i)) {
  5584  003458  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5585  00345A  EC08  F02B         	call	_sendTempEvent
  5586  00345E  0900               	iorlw	0
  5587  003460  E008               	bz	l11337
  5588                           
  5589                           ;main.c: 599: seconds_temp[i] = 0;
  5590  003462  0E0C               	movlw	low _seconds_temp
  5591  003464  0100               	movlb	0	; () banked
  5592  003466  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5593  003468  6ED9               	movwf	fsr2l,c
  5594  00346A  6ADA               	clrf	fsr2h,c
  5595  00346C  0E01               	movlw	high _seconds_temp
  5596  00346E  22DA               	addwfc	fsr2h,f,c
  5597  003470  6ADF               	clrf	indf2,c
  5598  003472                     l11337:
  5599                           
  5600                           ;main.c: 600: }
  5601                           ;main.c: 602: }
  5602                           ;main.c: 607: if (0x80 & Read_b_eep(0x43 + i)) {
  5603  003472  0E43               	movlw	67
  5604  003474  DA4B               	call	PL72	;call to abstracted procedure
  5605  003476  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5606  00347A  0100               	movlb	0	; () banked
  5607  00347C  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5608  00347E  AF87               	btfss	??_doOneSecondWork& (0+255),7,b
  5609  003480  D072               	goto	l11391
  5610                           
  5611                           ; BSR set to: 0
  5612                           ;main.c: 610: if (low_alarm & (1 << i)) {
  5613  003482  C091  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  5614  003486  0E01               	movlw	1
  5615  003488  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5616  00348A  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  5617  00348C  D002               	goto	u8324
  5618  00348E                     u8325:
  5619  00348E  90D8               	bcf	status,0,c
  5620  003490  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5621  003492                     u8324:
  5622  003492  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  5623  003494  D7FC               	goto	u8325
  5624  003496  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5625  003498  15B8               	andwf	_low_alarm& (0+255),w,b
  5626  00349A  E030               	bz	l11365
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;main.c: 613: if (Read_b_eep(0x43 + i) & (1<<3)) {
  5630  00349C  D9C9               	call	PL8	;call to abstracted procedure
  5631  00349E  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5632  0034A2  0100               	movlb	0	; () banked
  5633  0034A4  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5634  0034A6  A787               	btfss	??_doOneSecondWork& (0+255),3,b
  5635  0034A8  D029               	goto	l11365
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;main.c: 615: vscp_omsg.priority = 0x00;
  5639  0034AA  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;main.c: 616: vscp_omsg.flags = 0x80 + 3;
  5643  0034AC  0E83               	movlw	131
  5644  0034AE  6FCB               	movwf	_vscp_omsg& (0+255),b
  5645                           
  5646                           ; BSR set to: 0
  5647                           ;main.c: 619: if (Read_b_eep(0x43 + i) & (1<<5)) {
  5648  0034B0  D9BF               	call	PL8	;call to abstracted procedure
  5649  0034B2  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5650  0034B6  0100               	movlb	0	; () banked
  5651  0034B8  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5652  0034BA  AB87               	btfss	??_doOneSecondWork& (0+255),5,b
  5653  0034BC  D011               	goto	l11355
  5654                           
  5655                           ; BSR set to: 0
  5656                           ;main.c: 621: if (Read_b_eep(0x43 + i) & (1<<6)) {
  5657  0034BE  0E43               	movlw	67
  5658  0034C0  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5659  0034C2  6E16               	movwf	?_Read_b_eep,c
  5660  0034C4  6A17               	clrf	?_Read_b_eep+1,c
  5661  0034C6  0E00               	movlw	0
  5662  0034C8  2217               	addwfc	?_Read_b_eep+1,f,c
  5663  0034CA  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5664  0034CE  0100               	movlb	0	; () banked
  5665  0034D0  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5666  0034D2  AD87               	btfss	??_doOneSecondWork& (0+255),6,b
  5667  0034D4  D003               	goto	l11353
  5668                           
  5669                           ; BSR set to: 0
  5670                           ;main.c: 622: vscp_omsg.vscp_class = 30;
  5671  0034D6  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5672                           
  5673                           ;main.c: 623: vscp_omsg.vscp_type = 5;
  5674  0034D8  DA2B               	call	PL88	;call to abstracted procedure
  5675  0034DA  D006               	goto	L2
  5676  0034DC                     l11353:
  5677                           
  5678                           ; BSR set to: 0
  5679                           ;main.c: 625: else {
  5680                           ;main.c: 626: vscp_omsg.vscp_class = 30;
  5681                           
  5682                           ;main.c: 627: vscp_omsg.vscp_type = 6;
  5683  0034DC  DA2C               	call	PL90	;call to abstracted procedure
  5684  0034DE  D004               	goto	L2
  5685  0034E0                     l11355:
  5686                           
  5687                           ; BSR set to: 0
  5688                           ;main.c: 631: else {
  5689                           ;main.c: 633: vscp_omsg.vscp_class = 1;
  5690  0034E0  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5691  0034E2  0E01               	movlw	1
  5692  0034E4  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  5693                           
  5694                           ;main.c: 634: vscp_omsg.vscp_type = 2;
  5695  0034E6  0E02               	movlw	2
  5696  0034E8                     L2:
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;main.c: 635: }
  5700                           ;main.c: 637: vscp_omsg.data[ 0 ] = i;
  5701                           
  5702                           ; BSR set to: 0
  5703                           ;main.c: 638: vscp_omsg.data[ 1 ] =
  5704                           ;main.c: 639: Read_b_eep(0x73 + 2*i);
  5705  0034E8  D986               	call	PL4	;call to abstracted procedure
  5706  0034EA  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5707                           
  5708                           ; BSR set to: 0
  5709                           ;main.c: 640: vscp_omsg.data[ 2 ] =
  5710                           ;main.c: 641: Read_b_eep(0x74 + 2*i);
  5711  0034EE  D992               	call	PL6	;call to abstracted procedure
  5712  0034F0  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5713  0034F4  0100               	movlb	0	; () banked
  5714  0034F6  6FD3               	movwf	(_vscp_omsg+8)& (0+255),b
  5715                           
  5716                           ; BSR set to: 0
  5717                           ;main.c: 646: vscp_sendEvent();
  5718  0034F8  EC68  F02E         	call	_vscp_sendEvent	;wreg free
  5719  0034FC                     l11365:
  5720                           
  5721                           ;main.c: 648: }
  5722                           ;main.c: 649: }
  5723                           ;main.c: 652: if (high_alarm & (1 << i)) {
  5724  0034FC  D9A0               	call	PL10	;call to abstracted procedure
  5725  0034FE  15B7               	andwf	_high_alarm& (0+255),w,b
  5726  003500  E032               	bz	l11391
  5727                           
  5728                           ; BSR set to: 0
  5729                           ;main.c: 655: if ((Read_b_eep(0x43 + i) & (1<<4))) {
  5730  003502  D996               	call	PL8	;call to abstracted procedure
  5731  003504  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5732  003508  0100               	movlb	0	; () banked
  5733  00350A  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5734  00350C  A987               	btfss	??_doOneSecondWork& (0+255),4,b
  5735  00350E  D02B               	goto	l11391
  5736                           
  5737                           ; BSR set to: 0
  5738                           ;main.c: 657: vscp_omsg.priority = 0x00;
  5739  003510  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
  5740                           
  5741                           ; BSR set to: 0
  5742                           ;main.c: 658: vscp_omsg.flags = 0x80 + 3;
  5743  003512  0E83               	movlw	131
  5744  003514  6FCB               	movwf	_vscp_omsg& (0+255),b
  5745                           
  5746                           ; BSR set to: 0
  5747                           ;main.c: 660: if (Read_b_eep(0x43 + i) & (1<<5)) {
  5748  003516  D98C               	call	PL8	;call to abstracted procedure
  5749  003518  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5750  00351C  0100               	movlb	0	; () banked
  5751  00351E  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5752  003520  AB87               	btfss	??_doOneSecondWork& (0+255),5,b
  5753  003522  D013               	goto	l11381
  5754                           
  5755                           ; BSR set to: 0
  5756                           ;main.c: 662: if (Read_b_eep(0x43 + i) & (1<<6)) {
  5757  003524  0E43               	movlw	67
  5758  003526  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5759  003528  6E16               	movwf	?_Read_b_eep,c
  5760  00352A  6A17               	clrf	?_Read_b_eep+1,c
  5761  00352C  0E00               	movlw	0
  5762  00352E  2217               	addwfc	?_Read_b_eep+1,f,c
  5763  003530  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5764  003534  0100               	movlb	0	; () banked
  5765  003536  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5766  003538  AD87               	btfss	??_doOneSecondWork& (0+255),6,b
  5767  00353A  D005               	goto	l11379
  5768                           
  5769                           ; BSR set to: 0
  5770                           ;main.c: 663: vscp_omsg.vscp_class = 30;
  5771  00353C  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5772  00353E  0E1E               	movlw	30
  5773  003540  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  5774                           
  5775                           ;main.c: 664: vscp_omsg.vscp_type = 6;
  5776  003542  0E06               	movlw	6
  5777  003544  D006               	goto	L3
  5778  003546                     l11379:
  5779                           
  5780                           ; BSR set to: 0
  5781                           ;main.c: 666: else {
  5782                           ;main.c: 667: vscp_omsg.vscp_class = 30;
  5783                           
  5784                           ;main.c: 668: vscp_omsg.vscp_type = 5;
  5785  003546  D9F0               	call	PL86	;call to abstracted procedure
  5786  003548  D004               	goto	L3
  5787  00354A                     l11381:
  5788                           
  5789                           ; BSR set to: 0
  5790                           ;main.c: 671: else {
  5791                           ;main.c: 673: vscp_omsg.vscp_class = 1;
  5792  00354A  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5793  00354C  0E01               	movlw	1
  5794  00354E  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  5795                           
  5796                           ;main.c: 674: vscp_omsg.vscp_type = 2;
  5797  003550  0E02               	movlw	2
  5798  003552                     L3:
  5799                           
  5800                           ; BSR set to: 0
  5801                           ;main.c: 675: }
  5802                           ;main.c: 677: vscp_omsg.data[ 0 ] = i;
  5803                           
  5804                           ; BSR set to: 0
  5805                           ;main.c: 678: vscp_omsg.data[ 1 ] =
  5806                           ;main.c: 679: Read_b_eep(0x73 + 2*i);
  5807  003552  D951               	call	PL4	;call to abstracted procedure
  5808  003554  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5809                           
  5810                           ; BSR set to: 0
  5811                           ;main.c: 680: vscp_omsg.data[ 2 ] =
  5812                           ;main.c: 681: Read_b_eep(0x74 + 2*i);
  5813  003558  D95D               	call	PL6	;call to abstracted procedure
  5814  00355A  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5815  00355E  0100               	movlb	0	; () banked
  5816  003560  6FD3               	movwf	(_vscp_omsg+8)& (0+255),b
  5817                           
  5818                           ; BSR set to: 0
  5819                           ;main.c: 686: vscp_sendEvent();
  5820  003562  EC68  F02E         	call	_vscp_sendEvent	;wreg free
  5821  003566                     l11391:
  5822                           
  5823                           ;main.c: 687: }
  5824                           ;main.c: 688: }
  5825                           ;main.c: 689: }
  5826                           ;main.c: 695: if (low_alarm & (1 << i)) {
  5827  003566  D96B               	call	PL10	;call to abstracted procedure
  5828  003568  15B8               	andwf	_low_alarm& (0+255),w,b
  5829  00356A  E03C               	bz	l11399
  5830                           
  5831                           ; BSR set to: 0
  5832                           ;main.c: 698: setpoint = ((int16_t)( (((uint16_t)Read_b_eep(0x5B + 2*i))<<8) + (uint16_t
      +                          )Read_b_eep(0x5C + 2*i)) ) +
  5833                           ;main.c: 700: (int8_t) Read_b_eep(0x97 + i);
  5834  00356C  D9D6               	call	PL76	;call to abstracted procedure
  5835  00356E  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5836  003572  0100               	movlb	0	; () banked
  5837  003574  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5838  003576  90D8               	bcf	status,0,c
  5839  003578  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  5840  00357A  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5841  00357C  6B89               	clrf	(??_doOneSecondWork+2)& (0+255),b
  5842  00357E  3789               	rlcf	(??_doOneSecondWork+2)& (0+255),f,b
  5843  003580  0E5B               	movlw	91
  5844  003582  2588               	addwf	(??_doOneSecondWork+1)& (0+255),w,b
  5845  003584  6E16               	movwf	?_Read_b_eep,c
  5846  003586  0E00               	movlw	0
  5847  003588  2189               	addwfc	(??_doOneSecondWork+2)& (0+255),w,b
  5848  00358A  6E17               	movwf	?_Read_b_eep+1,c
  5849  00358C  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5850  003590  0100               	movlb	0	; () banked
  5851  003592  6F8B               	movwf	(??_doOneSecondWork+4)& (0+255),b
  5852  003594  6B8A               	clrf	(??_doOneSecondWork+3)& (0+255),b
  5853  003596  90D8               	bcf	status,0,c
  5854  003598  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  5855  00359A  6F8C               	movwf	(??_doOneSecondWork+5)& (0+255),b
  5856  00359C  6B8D               	clrf	(??_doOneSecondWork+6)& (0+255),b
  5857  00359E  378D               	rlcf	(??_doOneSecondWork+6)& (0+255),f,b
  5858  0035A0  0E5C               	movlw	92
  5859  0035A2  258C               	addwf	(??_doOneSecondWork+5)& (0+255),w,b
  5860  0035A4  6E16               	movwf	?_Read_b_eep,c
  5861  0035A6  0E00               	movlw	0
  5862  0035A8  218D               	addwfc	(??_doOneSecondWork+6)& (0+255),w,b
  5863  0035AA  6E17               	movwf	?_Read_b_eep+1,c
  5864  0035AC  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5865  0035B0  0100               	movlb	0	; () banked
  5866  0035B2  278A               	addwf	(??_doOneSecondWork+3)& (0+255),f,b
  5867  0035B4  0E00               	movlw	0
  5868  0035B6  238B               	addwfc	(??_doOneSecondWork+4)& (0+255),f,b
  5869  0035B8  5187               	movf	??_doOneSecondWork& (0+255),w,b
  5870  0035BA  258A               	addwf	(??_doOneSecondWork+3)& (0+255),w,b
  5871  0035BC  6F8F               	movwf	doOneSecondWork@setpoint& (0+255),b
  5872  0035BE  0E00               	movlw	0
  5873  0035C0  218B               	addwfc	(??_doOneSecondWork+4)& (0+255),w,b
  5874  0035C2  6F90               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  5875                           
  5876                           ; BSR set to: 0
  5877                           ;main.c: 705: if (current_temp[ i ] > (setpoint * 100)) {
  5878  0035C4  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5879  0035C6  0D02               	mullw	2
  5880  0035C8  0101               	movlb	1	; () banked
  5881  0035CA  D90E               	call	PL2	;call to abstracted procedure
  5882  0035CC  CFDE F087          	movff	postinc2,??_doOneSecondWork
  5883  0035D0  D98A               	call	PL50	;call to abstracted procedure
  5884  0035D2  EC37  F02E         	call	___wmul	;wreg free
  5885  0035D6  D973               	call	PL38	;call to abstracted procedure
  5886  0035D8  E263               	bc	l230
  5887  0035DA                     l11397:
  5888                           
  5889                           ;main.c: 708: low_alarm &= ~(1 << i);
  5890  0035DA  C091  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  5891  0035DE  D93C               	call	PL12	;call to abstracted procedure
  5892  0035E0  17B8               	andwf	_low_alarm& (0+255),f,b
  5893  0035E2  D05E               	goto	l230
  5894  0035E4                     l11399:
  5895                           
  5896                           ; BSR set to: 0
  5897                           ;main.c: 713: else {
  5898                           ;main.c: 717: setpoint = ((int16_t)( (((uint16_t)Read_b_eep(0x5B + 2*i))<<8) + (uint16_t
      +                          )Read_b_eep(0x5C + 2*i)) );
  5899  0035E4  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5900  0035E6  0D02               	mullw	2
  5901  0035E8  0E5C               	movlw	92
  5902  0035EA  24F3               	addwf	prodl,w,c
  5903  0035EC  6E16               	movwf	?_Read_b_eep,c
  5904  0035EE  0E00               	movlw	0
  5905  0035F0  20F4               	addwfc	prodh,w,c
  5906  0035F2  6E17               	movwf	?_Read_b_eep+1,c
  5907  0035F4  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5908  0035F8  0100               	movlb	0	; () banked
  5909  0035FA  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5910  0035FC  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5911  0035FE  0D02               	mullw	2
  5912  003600  0E5B               	movlw	91
  5913  003602  24F3               	addwf	prodl,w,c
  5914  003604  6E16               	movwf	?_Read_b_eep,c
  5915  003606  0E00               	movlw	0
  5916  003608  20F4               	addwfc	prodh,w,c
  5917  00360A  6E17               	movwf	?_Read_b_eep+1,c
  5918  00360C  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5919  003610  0100               	movlb	0	; () banked
  5920  003612  6F90               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  5921  003614  5187               	movf	??_doOneSecondWork& (0+255),w,b
  5922  003616  6F8F               	movwf	doOneSecondWork@setpoint& (0+255),b
  5923                           
  5924                           ; BSR set to: 0
  5925                           ;main.c: 720: if (current_temp[ i ] < (setpoint * 100)) {
  5926  003618  C08F  F00E         	movff	doOneSecondWork@setpoint,?___wmul
  5927  00361C  C090  F00F         	movff	doOneSecondWork@setpoint+1,?___wmul+1
  5928  003620  6A11               	clrf	?___wmul+3,c
  5929  003622  0E64               	movlw	100
  5930  003624  6E10               	movwf	?___wmul+2,c
  5931  003626  EC37  F02E         	call	___wmul	;wreg free
  5932  00362A  0100               	movlb	0	; () banked
  5933  00362C  5191               	movf	doOneSecondWork@i& (0+255),w,b
  5934  00362E  0D02               	mullw	2
  5935  003630  D8DB               	call	PL2	;call to abstracted procedure
  5936  003632  D92C               	call	PL22	;call to abstracted procedure
  5937  003634  E235               	bc	l230
  5938                           
  5939                           ; BSR set to: 0
  5940                           ;main.c: 723: low_alarm |= (1 << i);
  5941  003636  D937               	call	PL30	;call to abstracted procedure
  5942  003638  13B8               	iorwf	_low_alarm& (0+255),f,b
  5943                           
  5944                           ; BSR set to: 0
  5945                           ;main.c: 728: vscp_alarmstatus |= 1;
  5946  00363A  804A               	bsf	_vscp_alarmstatus,0,c
  5947                           
  5948                           ; BSR set to: 0
  5949                           ;main.c: 731: if ( Read_b_eep(i + 0x43) & (1<<3) ) {
  5950  00363C  D8F9               	call	PL8	;call to abstracted procedure
  5951  00363E  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5952  003642  0100               	movlb	0	; () banked
  5953  003644  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5954  003646  A787               	btfss	??_doOneSecondWork& (0+255),3,b
  5955  003648  D02B               	goto	l230
  5956                           
  5957                           ; BSR set to: 0
  5958                           ;main.c: 733: vscp_omsg.priority = 0x00;
  5959  00364A  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
  5960                           
  5961                           ; BSR set to: 0
  5962                           ;main.c: 734: vscp_omsg.flags = 0x80 + 3;
  5963  00364C  0E83               	movlw	131
  5964  00364E  6FCB               	movwf	_vscp_omsg& (0+255),b
  5965                           
  5966                           ; BSR set to: 0
  5967                           ;main.c: 737: if (Read_b_eep(0x43 + i) & (1<<5)) {
  5968  003650  D8EF               	call	PL8	;call to abstracted procedure
  5969  003652  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5970  003656  0100               	movlb	0	; () banked
  5971  003658  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5972  00365A  AB87               	btfss	??_doOneSecondWork& (0+255),5,b
  5973  00365C  D011               	goto	l11421
  5974                           
  5975                           ; BSR set to: 0
  5976                           ;main.c: 739: if (Read_b_eep(0x43 + i) & (1<<6)) {
  5977  00365E  0E43               	movlw	67
  5978  003660  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  5979  003662  6E16               	movwf	?_Read_b_eep,c
  5980  003664  6A17               	clrf	?_Read_b_eep+1,c
  5981  003666  0E00               	movlw	0
  5982  003668  2217               	addwfc	?_Read_b_eep+1,f,c
  5983  00366A  ECC2  F02F         	call	_Read_b_eep	;wreg free
  5984  00366E  0100               	movlb	0	; () banked
  5985  003670  6F87               	movwf	??_doOneSecondWork& (0+255),b
  5986  003672  AD87               	btfss	??_doOneSecondWork& (0+255),6,b
  5987  003674  D003               	goto	l11419
  5988                           
  5989                           ; BSR set to: 0
  5990                           ;main.c: 740: vscp_omsg.vscp_class = 30;
  5991  003676  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5992                           
  5993                           ;main.c: 741: vscp_omsg.vscp_type = 5;
  5994  003678  D95B               	call	PL88	;call to abstracted procedure
  5995  00367A  D006               	goto	L4
  5996  00367C                     l11419:
  5997                           
  5998                           ; BSR set to: 0
  5999                           ;main.c: 743: else {
  6000                           ;main.c: 744: vscp_omsg.vscp_class = 30;
  6001                           
  6002                           ;main.c: 745: vscp_omsg.vscp_type = 6;
  6003  00367C  D95C               	call	PL90	;call to abstracted procedure
  6004  00367E  D004               	goto	L4
  6005  003680                     l11421:
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;main.c: 749: else {
  6009                           ;main.c: 750: vscp_omsg.vscp_class = 1;
  6010  003680  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6011  003682  0E01               	movlw	1
  6012  003684  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6013                           
  6014                           ;main.c: 751: vscp_omsg.vscp_type = 2;
  6015  003686  0E02               	movlw	2
  6016  003688                     L4:
  6017                           
  6018                           ; BSR set to: 0
  6019                           ;main.c: 752: }
  6020                           ;main.c: 754: vscp_omsg.data[ 0 ] = i;
  6021                           
  6022                           ; BSR set to: 0
  6023                           ;main.c: 755: vscp_omsg.data[ 1 ] = Read_b_eep(0x73 + 2 * i);
  6024  003688  D8B6               	call	PL4	;call to abstracted procedure
  6025  00368A  ECC2  F02F         	call	_Read_b_eep	;wreg free
  6026                           
  6027                           ; BSR set to: 0
  6028                           ;main.c: 756: vscp_omsg.data[ 2 ] = Read_b_eep(0x74 + 2 * i);
  6029  00368E  D8C2               	call	PL6	;call to abstracted procedure
  6030  003690  ECC2  F02F         	call	_Read_b_eep	;wreg free
  6031  003694  0100               	movlb	0	; () banked
  6032  003696  6FD3               	movwf	(_vscp_omsg+8)& (0+255),b
  6033                           
  6034                           ; BSR set to: 0
  6035                           ;main.c: 759: if (!vscp_sendEvent()) {
  6036  003698  EC68  F02E         	call	_vscp_sendEvent	;wreg free
  6037  00369C  0900               	iorlw	0
  6038  00369E  E09D               	bz	l11397
  6039  0036A0                     l230:
  6040                           
  6041                           ;main.c: 763: }
  6042                           ;main.c: 765: }
  6043                           ;main.c: 766: }
  6044                           ;main.c: 767: }
  6045                           ;main.c: 772: if (high_alarm & (1 << i)) {
  6046  0036A0  D8CE               	call	PL10	;call to abstracted procedure
  6047  0036A2  15B7               	andwf	_high_alarm& (0+255),w,b
  6048  0036A4  E03F               	bz	l11439
  6049                           
  6050                           ; BSR set to: 0
  6051                           ;main.c: 776: setpoint = ((int16_t)( (((uint16_t)Read_b_eep(0x67 + 2 * i))<<8) + (uint16
      +                          _t)Read_b_eep(0x68 + 2 * i)) ) -
  6052                           ;main.c: 778: (int8_t)Read_b_eep(0x97 + i);
  6053  0036A6  90D8               	bcf	status,0,c
  6054  0036A8  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  6055  0036AA  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6056  0036AC  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6057  0036AE  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6058  0036B0  0E67               	movlw	103
  6059  0036B2  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6060  0036B4  6E16               	movwf	?_Read_b_eep,c
  6061  0036B6  0E00               	movlw	0
  6062  0036B8  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6063  0036BA  6E17               	movwf	?_Read_b_eep+1,c
  6064  0036BC  ECC2  F02F         	call	_Read_b_eep	;wreg free
  6065  0036C0  0100               	movlb	0	; () banked
  6066  0036C2  6F8A               	movwf	(??_doOneSecondWork+3)& (0+255),b
  6067  0036C4  6B89               	clrf	(??_doOneSecondWork+2)& (0+255),b
  6068  0036C6  90D8               	bcf	status,0,c
  6069  0036C8  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  6070  0036CA  6F8B               	movwf	(??_doOneSecondWork+4)& (0+255),b
  6071  0036CC  6B8C               	clrf	(??_doOneSecondWork+5)& (0+255),b
  6072  0036CE  378C               	rlcf	(??_doOneSecondWork+5)& (0+255),f,b
  6073  0036D0  0E68               	movlw	104
  6074  0036D2  258B               	addwf	(??_doOneSecondWork+4)& (0+255),w,b
  6075  0036D4  6E16               	movwf	?_Read_b_eep,c
  6076  0036D6  0E00               	movlw	0
  6077  0036D8  218C               	addwfc	(??_doOneSecondWork+5)& (0+255),w,b
  6078  0036DA  6E17               	movwf	?_Read_b_eep+1,c
  6079  0036DC  ECC2  F02F         	call	_Read_b_eep	;wreg free
  6080  0036E0  0100               	movlb	0	; () banked
  6081  0036E2  2789               	addwf	(??_doOneSecondWork+2)& (0+255),f,b
  6082  0036E4  0E00               	movlw	0
  6083  0036E6  238A               	addwfc	(??_doOneSecondWork+3)& (0+255),f,b
  6084  0036E8  D918               	call	PL76	;call to abstracted procedure
  6085  0036EA  ECC2  F02F         	call	_Read_b_eep	;wreg free
  6086  0036EE  0100               	movlb	0	; () banked
  6087  0036F0  5D89               	subwf	(??_doOneSecondWork+2)& (0+255),w,b
  6088  0036F2  6F8F               	movwf	doOneSecondWork@setpoint& (0+255),b
  6089  0036F4  518A               	movf	(??_doOneSecondWork+3)& (0+255),w,b
  6090  0036F6  A0D8               	btfss	status,0,c
  6091  0036F8  058A               	decf	(??_doOneSecondWork+3)& (0+255),w,b
  6092  0036FA  6F90               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;main.c: 781: if (current_temp[ i ] < (setpoint * 100) ) {
  6096  0036FC  C08F  F00E         	movff	doOneSecondWork@setpoint,?___wmul
  6097  003700  C090  F00F         	movff	doOneSecondWork@setpoint+1,?___wmul+1
  6098  003704  6A11               	clrf	?___wmul+3,c
  6099  003706  0E64               	movlw	100
  6100  003708  6E10               	movwf	?___wmul+2,c
  6101  00370A  EC37  F02E         	call	___wmul	;wreg free
  6102  00370E  0100               	movlb	0	; () banked
  6103  003710  5191               	movf	doOneSecondWork@i& (0+255),w,b
  6104  003712  0D02               	mullw	2
  6105  003714  D869               	call	PL2	;call to abstracted procedure
  6106  003716  D8BA               	call	PL22	;call to abstracted procedure
  6107  003718  E261               	bc	l11473
  6108  00371A                     l11437:
  6109                           
  6110                           ;main.c: 784: high_alarm &= ~(1 << i);
  6111  00371A  C091  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  6112  00371E  D89C               	call	PL12	;call to abstracted procedure
  6113  003720  17B7               	andwf	_high_alarm& (0+255),f,b
  6114  003722  D05C               	goto	l11473
  6115  003724                     l11439:
  6116                           
  6117                           ; BSR set to: 0
  6118                           ;main.c: 789: else {
  6119                           ;main.c: 794: setpoint = ((int16_t)( (((uint16_t)Read_b_eep(0x67 + 2 * i))<<8) + (uint16
      +                          _t)Read_b_eep(0x68 + 2 * i)) );
  6120  003724  5191               	movf	doOneSecondWork@i& (0+255),w,b
  6121  003726  0D02               	mullw	2
  6122  003728  0E68               	movlw	104
  6123  00372A  24F3               	addwf	prodl,w,c
  6124  00372C  6E16               	movwf	?_Read_b_eep,c
  6125  00372E  0E00               	movlw	0
  6126  003730  20F4               	addwfc	prodh,w,c
  6127  003732  6E17               	movwf	?_Read_b_eep+1,c
  6128  003734  ECC2  F02F         	call	_Read_b_eep	;wreg free
  6129  003738  0100               	movlb	0	; () banked
  6130  00373A  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6131  00373C  5191               	movf	doOneSecondWork@i& (0+255),w,b
  6132  00373E  0D02               	mullw	2
  6133  003740  0E67               	movlw	103
  6134  003742  24F3               	addwf	prodl,w,c
  6135  003744  6E16               	movwf	?_Read_b_eep,c
  6136  003746  0E00               	movlw	0
  6137  003748  20F4               	addwfc	prodh,w,c
  6138  00374A  6E17               	movwf	?_Read_b_eep+1,c
  6139  00374C  ECC2  F02F         	call	_Read_b_eep	;wreg free
  6140  003750  0100               	movlb	0	; () banked
  6141  003752  6F90               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  6142  003754  5187               	movf	??_doOneSecondWork& (0+255),w,b
  6143  003756  6F8F               	movwf	doOneSecondWork@setpoint& (0+255),b
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;main.c: 797: if (current_temp[ i ] > (setpoint * 100)) {
  6147  003758  5191               	movf	doOneSecondWork@i& (0+255),w,b
  6148  00375A  0D02               	mullw	2
  6149  00375C  0101               	movlb	1	; () banked
  6150  00375E  D844               	call	PL2	;call to abstracted procedure
  6151  003760  CFDE F087          	movff	postinc2,??_doOneSecondWork
  6152  003764  D8C0               	call	PL50	;call to abstracted procedure
  6153  003766  EC37  F02E         	call	___wmul	;wreg free
  6154  00376A  D8A9               	call	PL38	;call to abstracted procedure
  6155  00376C  E237               	bc	l11473
  6156                           
  6157                           ; BSR set to: 0
  6158                           ;main.c: 800: high_alarm |= (1 << i);
  6159  00376E  D89B               	call	PL30	;call to abstracted procedure
  6160  003770  13B7               	iorwf	_high_alarm& (0+255),f,b
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;main.c: 806: vscp_alarmstatus |= 2;
  6164  003772  824A               	bsf	_vscp_alarmstatus,1,c
  6165                           
  6166                           ; BSR set to: 0
  6167                           ;main.c: 809: if (Read_b_eep(0x43 + i) & (1<<4)) {
  6168  003774  D85D               	call	PL8	;call to abstracted procedure
  6169  003776  ECC2  F02F         	call	_Read_b_eep	;wreg free
  6170  00377A  0100               	movlb	0	; () banked
  6171  00377C  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6172  00377E  A987               	btfss	??_doOneSecondWork& (0+255),4,b
  6173  003780  D02D               	goto	l11473
  6174                           
  6175                           ; BSR set to: 0
  6176                           ;main.c: 811: vscp_omsg.priority = 0x00;
  6177  003782  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
  6178                           
  6179                           ; BSR set to: 0
  6180                           ;main.c: 812: vscp_omsg.flags = 0x80 + 3;
  6181  003784  0E83               	movlw	131
  6182  003786  6FCB               	movwf	_vscp_omsg& (0+255),b
  6183                           
  6184                           ; BSR set to: 0
  6185                           ;main.c: 814: if (Read_b_eep(0x43 + i) & (1<<5)) {
  6186  003788  D853               	call	PL8	;call to abstracted procedure
  6187  00378A  ECC2  F02F         	call	_Read_b_eep	;wreg free
  6188  00378E  0100               	movlb	0	; () banked
  6189  003790  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6190  003792  AB87               	btfss	??_doOneSecondWork& (0+255),5,b
  6191  003794  D013               	goto	l11461
  6192                           
  6193                           ; BSR set to: 0
  6194                           ;main.c: 816: if (Read_b_eep(0x43 + i) & (1<<6)) {
  6195  003796  0E43               	movlw	67
  6196  003798  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  6197  00379A  6E16               	movwf	?_Read_b_eep,c
  6198  00379C  6A17               	clrf	?_Read_b_eep+1,c
  6199  00379E  0E00               	movlw	0
  6200  0037A0  2217               	addwfc	?_Read_b_eep+1,f,c
  6201  0037A2  ECC2  F02F         	call	_Read_b_eep	;wreg free
  6202  0037A6  0100               	movlb	0	; () banked
  6203  0037A8  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6204  0037AA  AD87               	btfss	??_doOneSecondWork& (0+255),6,b
  6205  0037AC  D005               	goto	l11459
  6206                           
  6207                           ; BSR set to: 0
  6208                           ;main.c: 817: vscp_omsg.vscp_class = 30;
  6209  0037AE  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6210  0037B0  0E1E               	movlw	30
  6211  0037B2  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6212                           
  6213                           ;main.c: 818: vscp_omsg.vscp_type = 6;
  6214  0037B4  0E06               	movlw	6
  6215  0037B6  D006               	goto	L5
  6216  0037B8                     l11459:
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;main.c: 820: else {
  6220                           ;main.c: 821: vscp_omsg.vscp_class = 30;
  6221                           
  6222                           ;main.c: 822: vscp_omsg.vscp_type = 5;
  6223  0037B8  D8B7               	call	PL86	;call to abstracted procedure
  6224  0037BA  D004               	goto	L5
  6225  0037BC                     l11461:
  6226                           
  6227                           ; BSR set to: 0
  6228                           ;main.c: 825: else {
  6229                           ;main.c: 826: vscp_omsg.vscp_class = 1;
  6230  0037BC  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6231  0037BE  0E01               	movlw	1
  6232  0037C0  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6233                           
  6234                           ;main.c: 827: vscp_omsg.vscp_type = 2;
  6235  0037C2  0E02               	movlw	2
  6236  0037C4                     L5:
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;main.c: 828: }
  6240                           ;main.c: 830: vscp_omsg.data[ 0 ] = i;
  6241                           
  6242                           ; BSR set to: 0
  6243                           ;main.c: 831: vscp_omsg.data[ 1 ] = Read_b_eep(0x73 + 2 * i);
  6244  0037C4  D818               	call	PL4	;call to abstracted procedure
  6245  0037C6  ECC2  F02F         	call	_Read_b_eep	;wreg free
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;main.c: 832: vscp_omsg.data[ 2 ] = Read_b_eep(0x74 + 2 * i);
  6249  0037CA  D824               	call	PL6	;call to abstracted procedure
  6250  0037CC  ECC2  F02F         	call	_Read_b_eep	;wreg free
  6251  0037D0  0100               	movlb	0	; () banked
  6252  0037D2  6FD3               	movwf	(_vscp_omsg+8)& (0+255),b
  6253                           
  6254                           ; BSR set to: 0
  6255                           ;main.c: 835: if (!vscp_sendEvent()) {
  6256  0037D4  EC68  F02E         	call	_vscp_sendEvent	;wreg free
  6257  0037D8  0900               	iorlw	0
  6258  0037DA  E09F               	bz	l11437
  6259  0037DC                     l11473:
  6260  0037DC  0100               	movlb	0	; () banked
  6261  0037DE  2B91               	incf	doOneSecondWork@i& (0+255),f,b
  6262  0037E0  0E05               	movlw	5
  6263  0037E2  6591               	cpfsgt	doOneSecondWork@i& (0+255),b
  6264  0037E4  D5B7               	goto	l11313
  6265  0037E6  0C05               	retlw	5
  6266  0037E8                     __end_of_doOneSecondWork:
  6267                           	opt stack 0
  6268  0037E8                     PL2:
  6269                           	opt stack 23
  6270  0037E8  0E00               	movlw	low _current_temp
  6271  0037EA  24F3               	addwf	prodl,w,c
  6272  0037EC  6ED9               	movwf	fsr2l,c
  6273  0037EE  0E01               	movlw	high _current_temp
  6274  0037F0  20F4               	addwfc	prodh,w,c
  6275  0037F2  6EDA               	movwf	fsr2h,c
  6276  0037F4  0012               	return	
  6277  0037F6                     __end_ofPL2:
  6278                           	opt stack 0
  6279  0037F6                     PL4:
  6280                           	opt stack 22
  6281  0037F6  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  6282  0037F8  C091  F0D1         	movff	doOneSecondWork@i,_vscp_omsg+6
  6283  0037FC  90D8               	bcf	status,0,c
  6284  0037FE  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  6285  003800  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6286  003802  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6287  003804  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6288  003806  0E73               	movlw	115
  6289  003808  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6290  00380A  6E16               	movwf	?_Read_b_eep,c
  6291  00380C  0E00               	movlw	0
  6292  00380E  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6293  003810  6E17               	movwf	?_Read_b_eep+1,c
  6294  003812  0012               	return	
  6295  003814                     __end_ofPL4:
  6296                           	opt stack 0
  6297  003814                     PL6:
  6298                           	opt stack 22
  6299  003814  0100               	movlb	0	; () banked
  6300  003816  6FD2               	movwf	(_vscp_omsg+7)& (0+255),b
  6301  003818  90D8               	bcf	status,0,c
  6302  00381A  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  6303  00381C  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6304  00381E  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6305  003820  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6306  003822  0E74               	movlw	116
  6307  003824  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6308  003826  6E16               	movwf	?_Read_b_eep,c
  6309  003828  0E00               	movlw	0
  6310  00382A  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6311  00382C  6E17               	movwf	?_Read_b_eep+1,c
  6312  00382E  0012               	return	
  6313  003830                     __end_ofPL6:
  6314                           	opt stack 0
  6315  003830                     PL8:
  6316                           	opt stack 22
  6317  003830  0E43               	movlw	67
  6318  003832  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  6319  003834  6E16               	movwf	?_Read_b_eep,c
  6320  003836  6A17               	clrf	?_Read_b_eep+1,c
  6321  003838  0E00               	movlw	0
  6322  00383A  2217               	addwfc	?_Read_b_eep+1,f,c
  6323  00383C  0C00               	retlw	0
  6324  00383E                     __end_ofPL8:
  6325                           	opt stack 0
  6326  00383E                     PL10:
  6327                           	opt stack 22
  6328  00383E  C091  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  6329  003842  0E01               	movlw	1
  6330  003844  0100               	movlb	0	; () banked
  6331  003846  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6332  003848  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  6333  00384A  D002               	goto	u8374
  6334  00384C                     u8375:
  6335  00384C  90D8               	bcf	status,0,c
  6336  00384E  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6337  003850                     u8374:
  6338  003850  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  6339  003852  D7FC               	goto	u8375
  6340  003854  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6341  003856  0012               	return	
  6342  003858                     __end_ofPL10:
  6343                           	opt stack 0
  6344  003858                     PL12:
  6345                           	opt stack 22
  6346  003858  0E01               	movlw	1
  6347  00385A  0100               	movlb	0	; () banked
  6348  00385C  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6349  00385E  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  6350  003860  D002               	goto	u8454
  6351  003862                     u8455:
  6352  003862  90D8               	bcf	status,0,c
  6353  003864  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6354  003866                     u8454:
  6355  003866  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  6356  003868  D7FC               	goto	u8455
  6357  00386A  1D88               	comf	(??_doOneSecondWork+1)& (0+255),w,b
  6358  00386C  0012               	return	
  6359  00386E                     __end_ofPL12:
  6360                           	opt stack 0
  6361  00386E                     PL14:
  6362                           	opt stack 22
  6363  00386E  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6364  003870  6E0E               	movwf	?_Write_b_eep,c
  6365  003872  0E00               	movlw	0
  6366  003874  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6367  003876  6E0F               	movwf	?_Write_b_eep+1,c
  6368  003878  5191               	movf	doOneSecondWork@i& (0+255),w,b
  6369  00387A  0D02               	mullw	2
  6370  00387C  0012               	return	
  6371  00387E                     __end_ofPL14:
  6372                           	opt stack 0
  6373  00387E                     PL20:
  6374                           	opt stack 22
  6375  00387E  90D8               	bcf	status,0,c
  6376  003880  0100               	movlb	0	; () banked
  6377  003882  3591               	rlcf	doOneSecondWork@i& (0+255),w,b
  6378  003884  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6379  003886  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6380  003888  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6381  00388A  0012               	return	
  6382  00388C                     __end_ofPL20:
  6383                           	opt stack 0
  6384  00388C                     PL22:
  6385                           	opt stack 22
  6386  00388C  CFDE F087          	movff	postinc2,??_doOneSecondWork
  6387  003890  CFDD F088          	movff	postdec2,??_doOneSecondWork+1
  6388  003894  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6389  003896  0A80               	xorlw	128
  6390  003898  6F89               	movwf	(??_doOneSecondWork+2)& (0+255),b
  6391  00389A  500E               	movf	?___wmul,w,c
  6392  00389C  5D87               	subwf	??_doOneSecondWork& (0+255),w,b
  6393  00389E  500F               	movf	?___wmul+1,w,c
  6394  0038A0  0A80               	xorlw	128
  6395  0038A2  5989               	subwfb	(??_doOneSecondWork+2)& (0+255),w,b
  6396  0038A4  0012               	return	
  6397  0038A6                     __end_ofPL22:
  6398                           	opt stack 0
  6399  0038A6                     PL30:
  6400                           	opt stack 22
  6401  0038A6  C091  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  6402  0038AA  0E01               	movlw	1
  6403  0038AC  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6404  0038AE  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  6405  0038B0  D002               	goto	u8474
  6406  0038B2                     u8475:
  6407  0038B2  90D8               	bcf	status,0,c
  6408  0038B4  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6409  0038B6                     u8474:
  6410  0038B6  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  6411  0038B8  D7FC               	goto	u8475
  6412  0038BA  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6413  0038BC  0012               	return	
  6414  0038BE                     __end_ofPL30:
  6415                           	opt stack 0
  6416  0038BE                     PL38:
  6417                           	opt stack 22
  6418  0038BE  500F               	movf	?___wmul+1,w,c
  6419  0038C0  0A80               	xorlw	128
  6420  0038C2  0100               	movlb	0	; () banked
  6421  0038C4  6F89               	movwf	(??_doOneSecondWork+2)& (0+255),b
  6422  0038C6  5187               	movf	??_doOneSecondWork& (0+255),w,b
  6423  0038C8  5C0E               	subwf	?___wmul,w,c
  6424  0038CA  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6425  0038CC  0A80               	xorlw	128
  6426  0038CE  5989               	subwfb	(??_doOneSecondWork+2)& (0+255),w,b
  6427  0038D0  0012               	return	
  6428  0038D2                     __end_ofPL38:
  6429                           	opt stack 0
  6430  0038D2                     PL42:
  6431                           	opt stack 22
  6432  0038D2  CFDE F089          	movff	postinc2,??_doOneSecondWork+2
  6433  0038D6  CFDD F08A          	movff	postdec2,??_doOneSecondWork+3
  6434  0038DA  C08A  F089         	movff	??_doOneSecondWork+3,??_doOneSecondWork+2
  6435  0038DE  6B8A               	clrf	(??_doOneSecondWork+3)& (0+255),b
  6436  0038E0  5189               	movf	(??_doOneSecondWork+2)& (0+255),w,b
  6437  0038E2  6E10               	movwf	?_Write_b_eep+2,c
  6438  0038E4  0012               	return	
  6439  0038E6                     __end_ofPL42:
  6440                           	opt stack 0
  6441  0038E6                     PL50:
  6442                           	opt stack 22
  6443  0038E6  CFDD F088          	movff	postdec2,??_doOneSecondWork+1
  6444  0038EA  C08F  F00E         	movff	doOneSecondWork@setpoint,?___wmul
  6445  0038EE  C090  F00F         	movff	doOneSecondWork@setpoint+1,?___wmul+1
  6446  0038F2  6A11               	clrf	?___wmul+3,c
  6447  0038F4  0E64               	movlw	100
  6448  0038F6  6E10               	movwf	?___wmul+2,c
  6449  0038F8  0C64               	retlw	100
  6450  0038FA                     __end_ofPL50:
  6451                           	opt stack 0
  6452  0038FA                     PL54:
  6453                           	opt stack 22
  6454  0038FA  518A               	movf	(??_doOneSecondWork+3)& (0+255),w,b
  6455  0038FC  0A80               	xorlw	128
  6456  0038FE  6F8B               	movwf	(??_doOneSecondWork+4)& (0+255),b
  6457  003900  5187               	movf	??_doOneSecondWork& (0+255),w,b
  6458  003902  5D89               	subwf	(??_doOneSecondWork+2)& (0+255),w,b
  6459  003904  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6460  003906  0A80               	xorlw	128
  6461  003908  598B               	subwfb	(??_doOneSecondWork+4)& (0+255),w,b
  6462  00390A  0012               	return	
  6463  00390C                     __end_ofPL54:
  6464                           	opt stack 0
  6465  00390C                     PL72:
  6466                           	opt stack 22
  6467  00390C  0100               	movlb	0	; () banked
  6468  00390E  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  6469  003910  6E16               	movwf	?_Read_b_eep,c
  6470  003912  6A17               	clrf	?_Read_b_eep+1,c
  6471  003914  0E00               	movlw	0
  6472  003916  2217               	addwfc	?_Read_b_eep+1,f,c
  6473  003918  0C00               	retlw	0
  6474  00391A                     __end_ofPL72:
  6475                           	opt stack 0
  6476  00391A                     PL76:
  6477                           	opt stack 22
  6478  00391A  0E97               	movlw	151
  6479  00391C  2591               	addwf	doOneSecondWork@i& (0+255),w,b
  6480  00391E  6E16               	movwf	?_Read_b_eep,c
  6481  003920  6A17               	clrf	?_Read_b_eep+1,c
  6482  003922  0E00               	movlw	0
  6483  003924  2217               	addwfc	?_Read_b_eep+1,f,c
  6484  003926  0C00               	retlw	0
  6485  003928                     __end_ofPL76:
  6486                           	opt stack 0
  6487  003928                     PL86:
  6488                           	opt stack 22
  6489  003928  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6490  00392A  0E1E               	movlw	30
  6491  00392C  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6492  00392E  0C05               	retlw	5
  6493  003930                     __end_ofPL86:
  6494                           	opt stack 0
  6495  003930                     PL88:
  6496                           	opt stack 22
  6497  003930  0E1E               	movlw	30
  6498  003932  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6499  003934  0C05               	retlw	5
  6500  003936                     __end_ofPL88:
  6501                           	opt stack 0
  6502  003936                     PL90:
  6503                           	opt stack 22
  6504  003936  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6505  003938  0E1E               	movlw	30
  6506  00393A  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6507  00393C  0C06               	retlw	6
  6508  00393E                     __end_ofPL90:
  6509                           	opt stack 0
  6510                           tblptru	equ	0xFF8
  6511                           tblptrh	equ	0xFF7
  6512                           tblptrl	equ	0xFF6
  6513                           tablat	equ	0xFF5
  6514                           prodh	equ	0xFF4
  6515                           prodl	equ	0xFF3
  6516                           intcon	equ	0xFF2
  6517                           postinc0	equ	0xFEE
  6518                           wreg	equ	0xFE8
  6519                           indf1	equ	0xFE7
  6520                           postdec1	equ	0xFE5
  6521                           fsr1h	equ	0xFE2
  6522                           fsr1l	equ	0xFE1
  6523                           indf2	equ	0xFDF
  6524                           postinc2	equ	0xFDE
  6525                           postdec2	equ	0xFDD
  6526                           plusw2	equ	0xFDB
  6527                           fsr2h	equ	0xFDA
  6528                           fsr2l	equ	0xFD9
  6529                           status	equ	0xFD8
  6530                           
  6531 ;; *************** function _vscp_error *****************
  6532 ;; Defined at:
  6533 ;;		line 197 in file "../../vscp_firmware/common/vscp_firmware.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;		None
  6536 ;; Auto vars:     Size  Location     Type
  6537 ;;		None
  6538 ;; Return value:  Size  Location     Type
  6539 ;;		None               void
  6540 ;; Registers used:
  6541 ;;		None
  6542 ;; Tracked objects:
  6543 ;;		On entry : 0/0
  6544 ;;		On exit  : 0/0
  6545 ;;		Unchanged: 0/0
  6546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6551 ;;Total ram usage:        0 bytes
  6552 ;; Hardware stack levels used:    1
  6553 ;; Hardware stack levels required when called:    2
  6554 ;; This function calls:
  6555 ;;		Nothing
  6556 ;; This function is called by:
  6557 ;;		_main
  6558 ;; This function uses a non-reentrant model
  6559 ;;
  6560                           
  6561                           	psect	text26
  6562  006080                     __ptext26:
  6563                           	opt stack 0
  6564  006080                     _vscp_error:
  6565                           	opt stack 28
  6566                           
  6567                           ;vscp_firmware.c: 198: vscp_initledfunc = 0x00;
  6568                           
  6569                           ; BSR set to: 0
  6570                           ;incstack = 0
  6571                           ;incstack = 0
  6572  006080  6A4D               	clrf	_vscp_initledfunc,c
  6573  006082  0012               	return	
  6574  006084                     __end_of_vscp_error:
  6575                           	opt stack 0
  6576                           tblptru	equ	0xFF8
  6577                           tblptrh	equ	0xFF7
  6578                           tblptrl	equ	0xFF6
  6579                           tablat	equ	0xFF5
  6580                           prodh	equ	0xFF4
  6581                           prodl	equ	0xFF3
  6582                           intcon	equ	0xFF2
  6583                           postinc0	equ	0xFEE
  6584                           wreg	equ	0xFE8
  6585                           indf1	equ	0xFE7
  6586                           postdec1	equ	0xFE5
  6587                           fsr1h	equ	0xFE2
  6588                           fsr1l	equ	0xFE1
  6589                           indf2	equ	0xFDF
  6590                           postinc2	equ	0xFDE
  6591                           postdec2	equ	0xFDD
  6592                           plusw2	equ	0xFDB
  6593                           fsr2h	equ	0xFDA
  6594                           fsr2l	equ	0xFD9
  6595                           status	equ	0xFD8
  6596                           
  6597 ;; *************** function _handle_sync *****************
  6598 ;; Defined at:
  6599 ;;		line 1303 in file "../main.c"
  6600 ;; Parameters:    Size  Location     Type
  6601 ;;		None
  6602 ;; Auto vars:     Size  Location     Type
  6603 ;;  i               1   41[BANK0 ] unsigned char 
  6604 ;; Return value:  Size  Location     Type
  6605 ;;		None               void
  6606 ;; Registers used:
  6607 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6608 ;; Tracked objects:
  6609 ;;		On entry : F/0
  6610 ;;		On exit  : F/0
  6611 ;;		Unchanged: 0/0
  6612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6614 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6615 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6616 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6617 ;;Total ram usage:        3 bytes
  6618 ;; Hardware stack levels used:    1
  6619 ;; Hardware stack levels required when called:    8
  6620 ;; This function calls:
  6621 ;;		_Read_b_eep
  6622 ;;		_sendTempEvent
  6623 ;; This function is called by:
  6624 ;;		_main
  6625 ;; This function uses a non-reentrant model
  6626 ;;
  6627                           
  6628                           	psect	text27
  6629  005510                     __ptext27:
  6630                           	opt stack 0
  6631  005510                     _handle_sync:
  6632                           	opt stack 22
  6633                           
  6634                           ; BSR set to: 0
  6635                           ;main.c: 1304: uint8_t i;
  6636                           ;main.c: 1306: for (i = 0; i < 6; i++) {
  6637                           
  6638                           ;incstack = 0
  6639                           ;incstack = 0
  6640  005510  6B89               	clrf	handle_sync@i& (0+255),b
  6641  005512                     l11289:
  6642                           
  6643                           ; BSR set to: 0
  6644                           ;main.c: 1308: if ( ( ( 0xff == vscp_imsg.data[ 1 ] ) ||
  6645                           ;main.c: 1309: ( Read_b_eep(0x73 + 2*i) == vscp_imsg.data[ 1 ] ) ) &&
  6646                           ;main.c: 1310: ( ( 0xff == vscp_imsg.data[ 2 ] ) ||
  6647                           ;main.c: 1311: ( Read_b_eep(0x74 + 2*i) == vscp_imsg.data[ 2 ] ) ) ) {
  6648  005512  29C4               	incf	(_vscp_imsg+7)& (0+255),w,b
  6649  005514  E010               	bz	l11293
  6650                           
  6651                           ; BSR set to: 0
  6652  005516  90D8               	bcf	status,0,c
  6653  005518  3589               	rlcf	handle_sync@i& (0+255),w,b
  6654  00551A  6F87               	movwf	??_handle_sync& (0+255),b
  6655  00551C  6B88               	clrf	(??_handle_sync+1)& (0+255),b
  6656  00551E  3788               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6657  005520  0E73               	movlw	115
  6658  005522  2587               	addwf	??_handle_sync& (0+255),w,b
  6659  005524  6E16               	movwf	?_Read_b_eep,c
  6660  005526  0E00               	movlw	0
  6661  005528  2188               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6662  00552A  6E17               	movwf	?_Read_b_eep+1,c
  6663  00552C  ECC2  F02F         	call	_Read_b_eep	;wreg free
  6664  005530  0100               	movlb	0	; () banked
  6665  005532  19C4               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  6666  005534  E128               	bnz	l11303
  6667  005536                     l11293:
  6668                           
  6669                           ; BSR set to: 0
  6670  005536  29C5               	incf	(_vscp_imsg+8)& (0+255),w,b
  6671  005538  E010               	bz	l296
  6672                           
  6673                           ; BSR set to: 0
  6674  00553A  90D8               	bcf	status,0,c
  6675  00553C  3589               	rlcf	handle_sync@i& (0+255),w,b
  6676  00553E  6F87               	movwf	??_handle_sync& (0+255),b
  6677  005540  6B88               	clrf	(??_handle_sync+1)& (0+255),b
  6678  005542  3788               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6679  005544  0E74               	movlw	116
  6680  005546  2587               	addwf	??_handle_sync& (0+255),w,b
  6681  005548  6E16               	movwf	?_Read_b_eep,c
  6682  00554A  0E00               	movlw	0
  6683  00554C  2188               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6684  00554E  6E17               	movwf	?_Read_b_eep+1,c
  6685  005550  ECC2  F02F         	call	_Read_b_eep	;wreg free
  6686  005554  0100               	movlb	0	; () banked
  6687  005556  19C5               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  6688  005558  E116               	bnz	l11303
  6689  00555A                     l296:
  6690                           
  6691                           ; BSR set to: 0
  6692                           ;main.c: 1314: timeout_clock = 0;
  6693  00555A  0101               	movlb	1	; () banked
  6694  00555C  6B16               	clrf	_timeout_clock& (0+255),b	;volatile
  6695  00555E  6B17               	clrf	(_timeout_clock+1)& (0+255),b	;volatile
  6696  005560  6B18               	clrf	(_timeout_clock+2)& (0+255),b	;volatile
  6697  005562  6B19               	clrf	(_timeout_clock+3)& (0+255),b	;volatile
  6698                           
  6699                           ;main.c: 1315: while (!sendTempEvent(i)) {
  6700  005564  D00A               	goto	l11301
  6701  005566                     l11297:
  6702                           
  6703                           ;main.c: 1316: if (timeout_clock > 1000) break;
  6704  005566  0EE9               	movlw	233
  6705  005568  0101               	movlb	1	; () banked
  6706  00556A  5D16               	subwf	_timeout_clock& (0+255),w,b	;volatile
  6707  00556C  0E03               	movlw	3
  6708  00556E  5917               	subwfb	(_timeout_clock+1)& (0+255),w,b	;volatile
  6709  005570  0E00               	movlw	0
  6710  005572  5918               	subwfb	(_timeout_clock+2)& (0+255),w,b	;volatile
  6711  005574  0E00               	movlw	0
  6712  005576  5919               	subwfb	(_timeout_clock+3)& (0+255),w,b	;volatile
  6713  005578  E206               	bc	l11303
  6714  00557A                     l11301:
  6715                           
  6716                           ; BSR set to: 1
  6717  00557A  0100               	movlb	0	; () banked
  6718  00557C  5189               	movf	handle_sync@i& (0+255),w,b
  6719  00557E  EC08  F02B         	call	_sendTempEvent
  6720  005582  0900               	iorlw	0
  6721  005584  E0F0               	bz	l11297
  6722  005586                     l11303:
  6723  005586  0100               	movlb	0	; () banked
  6724  005588  2B89               	incf	handle_sync@i& (0+255),f,b
  6725                           
  6726                           ; BSR set to: 0
  6727  00558A  0E05               	movlw	5
  6728  00558C  6589               	cpfsgt	handle_sync@i& (0+255),b
  6729  00558E  D7C1               	goto	l11289
  6730  005590  0C05               	retlw	5
  6731  005592                     __end_of_handle_sync:
  6732                           	opt stack 0
  6733                           tblptru	equ	0xFF8
  6734                           tblptrh	equ	0xFF7
  6735                           tblptrl	equ	0xFF6
  6736                           tablat	equ	0xFF5
  6737                           prodh	equ	0xFF4
  6738                           prodl	equ	0xFF3
  6739                           intcon	equ	0xFF2
  6740                           postinc0	equ	0xFEE
  6741                           wreg	equ	0xFE8
  6742                           indf1	equ	0xFE7
  6743                           postdec1	equ	0xFE5
  6744                           fsr1h	equ	0xFE2
  6745                           fsr1l	equ	0xFE1
  6746                           indf2	equ	0xFDF
  6747                           postinc2	equ	0xFDE
  6748                           postdec2	equ	0xFDD
  6749                           plusw2	equ	0xFDB
  6750                           fsr2h	equ	0xFDA
  6751                           fsr2l	equ	0xFD9
  6752                           status	equ	0xFD8
  6753                           
  6754 ;; *************** function _sendTempEvent *****************
  6755 ;; Defined at:
  6756 ;;		line 853 in file "../main.c"
  6757 ;; Parameters:    Size  Location     Type
  6758 ;;  i               1    wreg     unsigned char 
  6759 ;; Auto vars:     Size  Location     Type
  6760 ;;  i               1   38[BANK0 ] unsigned char 
  6761 ;; Return value:  Size  Location     Type
  6762 ;;                  1    wreg      unsigned char 
  6763 ;; Registers used:
  6764 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6765 ;; Tracked objects:
  6766 ;;		On entry : F/0
  6767 ;;		On exit  : 0/0
  6768 ;;		Unchanged: 0/0
  6769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6771 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6772 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6773 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6774 ;;Total ram usage:        2 bytes
  6775 ;; Hardware stack levels used:    1
  6776 ;; Hardware stack levels required when called:    7
  6777 ;; This function calls:
  6778 ;;		_Read_b_eep
  6779 ;;		_vscp_sendEvent
  6780 ;;		_setEventData
  6781 ;; This function is called by:
  6782 ;;		_doOneSecondWork
  6783 ;;		_handle_sync
  6784 ;; This function uses a non-reentrant model
  6785 ;;
  6786                           
  6787                           	psect	text28
  6788  005610                     __ptext28:
  6789                           	opt stack 0
  6790  005610                     _sendTempEvent:
  6791                           	opt stack 22
  6792                           
  6793                           ; BSR set to: 0
  6794                           ;incstack = 0
  6795                           ;incstack = 0
  6796                           ;sendTempEvent@i stored from wreg
  6797  005610  CFE8 F086          	movff	wreg,sendTempEvent@i
  6798                           
  6799                           ; BSR set to: 0
  6800                           ;main.c: 854: vscp_omsg.priority = 0x03;
  6801  005614  0E03               	movlw	3
  6802  005616  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  6803                           
  6804                           ;main.c: 855: vscp_omsg.flags = 0x80 + 4;
  6805  005618  0E84               	movlw	132
  6806  00561A  6FCB               	movwf	_vscp_omsg& (0+255),b
  6807                           
  6808                           ;main.c: 856: vscp_omsg.vscp_class = 10;
  6809  00561C  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6810  00561E  0E0A               	movlw	10
  6811  005620  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6812                           
  6813                           ;main.c: 857: vscp_omsg.vscp_type = 6;
  6814  005622  0E06               	movlw	6
  6815  005624  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  6816                           
  6817                           ; BSR set to: 0
  6818                           ;main.c: 860: vscp_omsg.data[ 0 ] = 0x80 |
  6819                           ;main.c: 861: ((0x03 & Read_b_eep(i + 0x43)) << 3) |
  6820                           ;main.c: 862: i;
  6821  005626  D827               	call	PL68	;call to abstracted procedure
  6822  005628  ECC2  F02F         	call	_Read_b_eep	;wreg free
  6823  00562C  0100               	movlb	0	; () banked
  6824  00562E  6F85               	movwf	??_sendTempEvent& (0+255),b
  6825  005630  0E03               	movlw	3
  6826  005632  1785               	andwf	??_sendTempEvent& (0+255),f,b
  6827  005634  90D8               	bcf	status,0,c
  6828  005636  3785               	rlcf	??_sendTempEvent& (0+255),f,b
  6829  005638  90D8               	bcf	status,0,c
  6830  00563A  3785               	rlcf	??_sendTempEvent& (0+255),f,b
  6831  00563C  90D8               	bcf	status,0,c
  6832  00563E  3585               	rlcf	??_sendTempEvent& (0+255),w,b
  6833  005640  1186               	iorwf	sendTempEvent@i& (0+255),w,b
  6834  005642  0980               	iorlw	128
  6835  005644  6FD1               	movwf	(_vscp_omsg+6)& (0+255),b
  6836                           
  6837                           ; BSR set to: 0
  6838                           ;main.c: 864: vscp_omsg.data[ 1 ] = 0x82;
  6839  005646  0E82               	movlw	130
  6840  005648  6FD2               	movwf	(_vscp_omsg+7)& (0+255),b
  6841                           
  6842                           ; BSR set to: 0
  6843                           ;main.c: 866: setEventData( current_temp[i],
  6844                           ;main.c: 867: ( 0x03 & Read_b_eep(i + 0x43) ) );
  6845  00564A  5186               	movf	sendTempEvent@i& (0+255),w,b
  6846  00564C  0D02               	mullw	2
  6847  00564E  ECF4  F01B         	call	PL2	;call to abstracted procedure
  6848  005652  CFDE F07C          	movff	postinc2,?_setEventData
  6849  005656  CFDD F07D          	movff	postdec2,?_setEventData+1
  6850  00565A  D80D               	call	PL68	;call to abstracted procedure
  6851  00565C  ECC2  F02F         	call	_Read_b_eep	;wreg free
  6852  005660  0B03               	andlw	3
  6853  005662  0100               	movlb	0	; () banked
  6854  005664  6F7E               	movwf	(?_setEventData+2)& (0+255),b
  6855  005666  ECAF  F028         	call	_setEventData	;wreg free
  6856                           
  6857                           ; BSR set to: 0
  6858                           ;main.c: 870: if (!vscp_sendEvent()) {
  6859  00566A  EC68  F02E         	call	_vscp_sendEvent	;wreg free
  6860  00566E  0900               	iorlw	0
  6861  005670  E101               	bnz	l11659
  6862                           
  6863                           ;main.c: 871: return 0;
  6864  005672  0C00               	retlw	0
  6865  005674                     l11659:
  6866                           
  6867                           ;main.c: 872: }
  6868                           ;main.c: 874: return 1;
  6869  005674  0C01               	retlw	1
  6870  005676                     __end_of_sendTempEvent:
  6871                           	opt stack 0
  6872  005676                     PL68:
  6873                           	opt stack 22
  6874  005676  0E43               	movlw	67
  6875  005678  2586               	addwf	sendTempEvent@i& (0+255),w,b
  6876  00567A  6E16               	movwf	?_Read_b_eep,c
  6877  00567C  6A17               	clrf	?_Read_b_eep+1,c
  6878  00567E  0E00               	movlw	0
  6879  005680  2217               	addwfc	?_Read_b_eep+1,f,c
  6880  005682  0C00               	retlw	0
  6881  005684                     __end_ofPL68:
  6882                           	opt stack 0
  6883                           tblptru	equ	0xFF8
  6884                           tblptrh	equ	0xFF7
  6885                           tblptrl	equ	0xFF6
  6886                           tablat	equ	0xFF5
  6887                           prodh	equ	0xFF4
  6888                           prodl	equ	0xFF3
  6889                           intcon	equ	0xFF2
  6890                           postinc0	equ	0xFEE
  6891                           wreg	equ	0xFE8
  6892                           indf1	equ	0xFE7
  6893                           postdec1	equ	0xFE5
  6894                           fsr1h	equ	0xFE2
  6895                           fsr1l	equ	0xFE1
  6896                           indf2	equ	0xFDF
  6897                           postinc2	equ	0xFDE
  6898                           postdec2	equ	0xFDD
  6899                           plusw2	equ	0xFDB
  6900                           fsr2h	equ	0xFDA
  6901                           fsr2l	equ	0xFD9
  6902                           status	equ	0xFD8
  6903                           
  6904 ;; *************** function _setEventData *****************
  6905 ;; Defined at:
  6906 ;;		line 882 in file "../main.c"
  6907 ;; Parameters:    Size  Location     Type
  6908 ;;  v               2   28[BANK0 ] int 
  6909 ;;  unit            1   30[BANK0 ] unsigned char 
  6910 ;; Auto vars:     Size  Location     Type
  6911 ;;  newval          4   31[BANK0 ] unsigned char 
  6912 ;;  ival            2   35[BANK0 ] int 
  6913 ;; Return value:  Size  Location     Type
  6914 ;;		None               void
  6915 ;; Registers used:
  6916 ;;		wreg, status,2, status,0, cstack
  6917 ;; Tracked objects:
  6918 ;;		On entry : F/0
  6919 ;;		On exit  : F/0
  6920 ;;		Unchanged: 0/0
  6921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6922 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6923 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6925 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6926 ;;Total ram usage:        9 bytes
  6927 ;; Hardware stack levels used:    1
  6928 ;; Hardware stack levels required when called:    5
  6929 ;; This function calls:
  6930 ;;		_Celsius2Kelvin
  6931 ;;		_Celsius2Fahrenheit
  6932 ;;		___awtofl
  6933 ;;		___fltol
  6934 ;; This function is called by:
  6935 ;;		_sendTempEvent
  6936 ;; This function uses a non-reentrant model
  6937 ;;
  6938                           
  6939                           	psect	text29
  6940  00515E                     __ptext29:
  6941                           	opt stack 0
  6942  00515E                     _setEventData:
  6943                           	opt stack 23
  6944                           
  6945                           ; BSR set to: 0
  6946                           ;main.c: 883: double newval;
  6947                           ;main.c: 884: int ival;
  6948                           ;main.c: 886: if (0 == unit) {
  6949                           
  6950                           ;incstack = 0
  6951                           ;incstack = 0
  6952  00515E  677E               	tstfsz	setEventData@unit& (0+255),b
  6953  005160  D019               	goto	l11675
  6954                           
  6955                           ; BSR set to: 0
  6956                           ;main.c: 888: newval = Celsius2Kelvin(v);
  6957  005162  C07C  F018         	movff	setEventData@v,?___awtofl
  6958  005166  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  6959  00516A  ECE5  F02D         	call	___awtofl	;wreg free
  6960  00516E  C01B  F02F         	movff	?___awtofl+3,?_Celsius2Kelvin+3
  6961  005172  C01A  F02E         	movff	?___awtofl+2,?_Celsius2Kelvin+2
  6962  005176  C019  F02D         	movff	?___awtofl+1,?_Celsius2Kelvin+1
  6963  00517A  C018  F02C         	movff	?___awtofl,?_Celsius2Kelvin
  6964  00517E  EC1D  F02E         	call	_Celsius2Kelvin	;wreg free
  6965  005182  C02F  F082         	movff	?_Celsius2Kelvin+3,setEventData@newval+3
  6966  005186  C02E  F081         	movff	?_Celsius2Kelvin+2,setEventData@newval+2
  6967  00518A  C02D  F080         	movff	?_Celsius2Kelvin+1,setEventData@newval+1
  6968  00518E  C02C  F07F         	movff	?_Celsius2Kelvin,setEventData@newval
  6969                           
  6970                           ;main.c: 889: } else if (2 == unit) {
  6971  005192  D02A               	goto	l256
  6972  005194                     l11675:
  6973                           
  6974                           ; BSR set to: 0
  6975  005194  517E               	movf	setEventData@unit& (0+255),w,b
  6976  005196  0A02               	xorlw	2
  6977  005198  E119               	bnz	l11679
  6978                           
  6979                           ; BSR set to: 0
  6980                           ;main.c: 891: newval = Celsius2Fahrenheit(v);
  6981  00519A  C07C  F018         	movff	setEventData@v,?___awtofl
  6982  00519E  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  6983  0051A2  ECE5  F02D         	call	___awtofl	;wreg free
  6984  0051A6  C01B  F079         	movff	?___awtofl+3,?_Celsius2Fahrenheit+3
  6985  0051AA  C01A  F078         	movff	?___awtofl+2,?_Celsius2Fahrenheit+2
  6986  0051AE  C019  F077         	movff	?___awtofl+1,?_Celsius2Fahrenheit+1
  6987  0051B2  C018  F076         	movff	?___awtofl,?_Celsius2Fahrenheit
  6988  0051B6  EC42  F02B         	call	_Celsius2Fahrenheit	;wreg free
  6989  0051BA  C079  F082         	movff	?_Celsius2Fahrenheit+3,setEventData@newval+3
  6990  0051BE  C078  F081         	movff	?_Celsius2Fahrenheit+2,setEventData@newval+2
  6991  0051C2  C077  F080         	movff	?_Celsius2Fahrenheit+1,setEventData@newval+1
  6992  0051C6  C076  F07F         	movff	?_Celsius2Fahrenheit,setEventData@newval
  6993                           
  6994                           ;main.c: 892: } else {
  6995  0051CA  D00E               	goto	l256
  6996  0051CC                     l11679:
  6997                           
  6998                           ; BSR set to: 0
  6999                           ;main.c: 894: newval = v;
  7000  0051CC  C07C  F018         	movff	setEventData@v,?___awtofl
  7001  0051D0  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  7002  0051D4  ECE5  F02D         	call	___awtofl	;wreg free
  7003  0051D8  C01B  F082         	movff	?___awtofl+3,setEventData@newval+3
  7004  0051DC  C01A  F081         	movff	?___awtofl+2,setEventData@newval+2
  7005  0051E0  C019  F080         	movff	?___awtofl+1,setEventData@newval+1
  7006  0051E4  C018  F07F         	movff	?___awtofl,setEventData@newval
  7007  0051E8                     l256:
  7008                           
  7009                           ;main.c: 895: }
  7010                           ;main.c: 897: ival = (int) newval;
  7011  0051E8  C07F  F076         	movff	setEventData@newval,?___fltol
  7012  0051EC  C080  F077         	movff	setEventData@newval+1,?___fltol+1
  7013  0051F0  C081  F078         	movff	setEventData@newval+2,?___fltol+2
  7014  0051F4  C082  F079         	movff	setEventData@newval+3,?___fltol+3
  7015  0051F8  ECAE  F029         	call	___fltol	;wreg free
  7016  0051FC  C076  F083         	movff	?___fltol,setEventData@ival
  7017  005200  C077  F084         	movff	?___fltol+1,setEventData@ival+1
  7018                           
  7019                           ; BSR set to: 0
  7020                           ;main.c: 899: vscp_omsg.data[ 2 ] = ((ival & 0xff00) >> 8);
  7021  005204  5184               	movf	(setEventData@ival+1)& (0+255),w,b
  7022  005206  6FD3               	movwf	(_vscp_omsg+8)& (0+255),b
  7023                           
  7024                           ; BSR set to: 0
  7025                           ;main.c: 900: vscp_omsg.data[ 3 ] = (ival & 0xff);
  7026  005208  C083  F0D4         	movff	setEventData@ival,_vscp_omsg+9
  7027                           
  7028                           ; BSR set to: 0
  7029  00520C  0012               	return	
  7030  00520E                     __end_of_setEventData:
  7031                           	opt stack 0
  7032                           tblptru	equ	0xFF8
  7033                           tblptrh	equ	0xFF7
  7034                           tblptrl	equ	0xFF6
  7035                           tablat	equ	0xFF5
  7036                           prodh	equ	0xFF4
  7037                           prodl	equ	0xFF3
  7038                           intcon	equ	0xFF2
  7039                           postinc0	equ	0xFEE
  7040                           wreg	equ	0xFE8
  7041                           indf1	equ	0xFE7
  7042                           postdec1	equ	0xFE5
  7043                           fsr1h	equ	0xFE2
  7044                           fsr1l	equ	0xFE1
  7045                           indf2	equ	0xFDF
  7046                           postinc2	equ	0xFDE
  7047                           postdec2	equ	0xFDD
  7048                           plusw2	equ	0xFDB
  7049                           fsr2h	equ	0xFDA
  7050                           fsr2l	equ	0xFD9
  7051                           status	equ	0xFD8
  7052                           
  7053 ;; *************** function _Celsius2Fahrenheit *****************
  7054 ;; Defined at:
  7055 ;;		line 42 in file "../ntc.c"
  7056 ;; Parameters:    Size  Location     Type
  7057 ;;  tc              4   22[BANK0 ] int 
  7058 ;; Auto vars:     Size  Location     Type
  7059 ;;		None
  7060 ;; Return value:  Size  Location     Type
  7061 ;;                  4   22[BANK0 ] int 
  7062 ;; Registers used:
  7063 ;;		wreg, status,2, status,0, cstack
  7064 ;; Tracked objects:
  7065 ;;		On entry : 0/0
  7066 ;;		On exit  : 0/0
  7067 ;;		Unchanged: 0/0
  7068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7069 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7072 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7073 ;;Total ram usage:        4 bytes
  7074 ;; Hardware stack levels used:    1
  7075 ;; Hardware stack levels required when called:    4
  7076 ;; This function calls:
  7077 ;;		___fladd
  7078 ;;		___fldiv
  7079 ;;		___flmul
  7080 ;; This function is called by:
  7081 ;;		_setEventData
  7082 ;; This function uses a non-reentrant model
  7083 ;;
  7084                           
  7085                           	psect	text30
  7086  005684                     __ptext30:
  7087                           	opt stack 0
  7088  005684                     _Celsius2Fahrenheit:
  7089                           	opt stack 23
  7090                           
  7091                           ;ntc.c: 43: return ( (9 * tc + 16000) / 5);
  7092                           
  7093                           ; BSR set to: 0
  7094                           ;incstack = 0
  7095                           ;incstack = 0
  7096  005684  6A21               	clrf	?___fladd+4,c
  7097  005686  6A22               	clrf	?___fladd+5,c
  7098  005688  0E7A               	movlw	122
  7099  00568A  6E23               	movwf	?___fladd+6,c
  7100  00568C  0E46               	movlw	70
  7101  00568E  6E24               	movwf	?___fladd+7,c
  7102  005690  0100               	movlb	0	; () banked
  7103  005692  6B64               	clrf	(?___flmul+4)& (0+255),b
  7104  005694  6B65               	clrf	(?___flmul+5)& (0+255),b
  7105  005696  0E10               	movlw	16
  7106  005698  6F66               	movwf	(?___flmul+6)& (0+255),b
  7107  00569A  0E41               	movlw	65
  7108  00569C  6F67               	movwf	(?___flmul+7)& (0+255),b
  7109  00569E  C076  F060         	movff	Celsius2Fahrenheit@tc,?___flmul
  7110  0056A2  C077  F061         	movff	Celsius2Fahrenheit@tc+1,?___flmul+1
  7111  0056A6  C078  F062         	movff	Celsius2Fahrenheit@tc+2,?___flmul+2
  7112  0056AA  C079  F063         	movff	Celsius2Fahrenheit@tc+3,?___flmul+3
  7113  0056AE  EC20  F026         	call	___flmul	;wreg free
  7114  0056B2  C063  F020         	movff	?___flmul+3,?___fladd+3
  7115  0056B6  C062  F01F         	movff	?___flmul+2,?___fladd+2
  7116  0056BA  C061  F01E         	movff	?___flmul+1,?___fladd+1
  7117  0056BE  C060  F01D         	movff	?___flmul,?___fladd
  7118  0056C2  EC2C  F022         	call	___fladd	;wreg free
  7119  0056C6  C020  F02F         	movff	?___fladd+3,?___fldiv+3
  7120  0056CA  C01F  F02E         	movff	?___fladd+2,?___fldiv+2
  7121  0056CE  C01E  F02D         	movff	?___fladd+1,?___fldiv+1
  7122  0056D2  C01D  F02C         	movff	?___fladd,?___fldiv
  7123  0056D6  6A30               	clrf	?___fldiv+4,c
  7124  0056D8  6A31               	clrf	?___fldiv+5,c
  7125  0056DA  0EA0               	movlw	160
  7126  0056DC  6E32               	movwf	?___fldiv+6,c
  7127  0056DE  0E40               	movlw	64
  7128  0056E0  6E33               	movwf	?___fldiv+7,c
  7129  0056E2  EC57  F028         	call	___fldiv	;wreg free
  7130  0056E6  C02F  F079         	movff	?___fldiv+3,?_Celsius2Fahrenheit+3
  7131  0056EA  C02E  F078         	movff	?___fldiv+2,?_Celsius2Fahrenheit+2
  7132  0056EE  C02D  F077         	movff	?___fldiv+1,?_Celsius2Fahrenheit+1
  7133  0056F2  C02C  F076         	movff	?___fldiv,?_Celsius2Fahrenheit
  7134  0056F6  0012               	return	
  7135  0056F8                     __end_of_Celsius2Fahrenheit:
  7136                           	opt stack 0
  7137                           tblptru	equ	0xFF8
  7138                           tblptrh	equ	0xFF7
  7139                           tblptrl	equ	0xFF6
  7140                           tablat	equ	0xFF5
  7141                           prodh	equ	0xFF4
  7142                           prodl	equ	0xFF3
  7143                           intcon	equ	0xFF2
  7144                           postinc0	equ	0xFEE
  7145                           wreg	equ	0xFE8
  7146                           indf1	equ	0xFE7
  7147                           postdec1	equ	0xFE5
  7148                           fsr1h	equ	0xFE2
  7149                           fsr1l	equ	0xFE1
  7150                           indf2	equ	0xFDF
  7151                           postinc2	equ	0xFDE
  7152                           postdec2	equ	0xFDD
  7153                           plusw2	equ	0xFDB
  7154                           fsr2h	equ	0xFDA
  7155                           fsr2l	equ	0xFD9
  7156                           status	equ	0xFD8
  7157                           
  7158 ;; *************** function ___fladd *****************
  7159 ;; Defined at:
  7160 ;;		line 89 in file "/opt/microchip/xc8/v1.21/sources/common/fladd.c"
  7161 ;; Parameters:    Size  Location     Type
  7162 ;;  f1              4   28[COMRAM] int 
  7163 ;;  f2              4   32[COMRAM] int 
  7164 ;; Auto vars:     Size  Location     Type
  7165 ;;  exp1            1   42[COMRAM] unsigned char 
  7166 ;;  exp2            1   41[COMRAM] unsigned char 
  7167 ;;  sign            1   40[COMRAM] unsigned char 
  7168 ;; Return value:  Size  Location     Type
  7169 ;;                  4   28[COMRAM] unsigned char 
  7170 ;; Registers used:
  7171 ;;		wreg, status,2, status,0, cstack
  7172 ;; Tracked objects:
  7173 ;;		On entry : 0/0
  7174 ;;		On exit  : 0/0
  7175 ;;		Unchanged: 0/0
  7176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7177 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7178 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7179 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7180 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7181 ;;Total ram usage:       15 bytes
  7182 ;; Hardware stack levels used:    1
  7183 ;; Hardware stack levels required when called:    3
  7184 ;; This function calls:
  7185 ;;		___flpack
  7186 ;; This function is called by:
  7187 ;;		_doWork
  7188 ;;		_Celsius2Fahrenheit
  7189 ;;		_Celsius2Kelvin
  7190 ;;		___asfladd
  7191 ;;		_floor
  7192 ;;		___flsub
  7193 ;;		_log
  7194 ;;		_eval_poly
  7195 ;; This function uses a non-reentrant model
  7196 ;;
  7197                           
  7198                           	psect	text31
  7199  004458                     __ptext31:
  7200                           	opt stack 0
  7201  004458                     ___fladd:
  7202                           	opt stack 25
  7203                           
  7204                           ;incstack = 0
  7205                           ;incstack = 0
  7206  004458  341F               	rlcf	(___fladd@f1+2)& (0+255),w,c
  7207  00445A  3420               	rlcf	(___fladd@f1+3)& (0+255),w,c
  7208  00445C  6E2B               	movwf	___fladd@exp1,c
  7209  00445E  3423               	rlcf	(___fladd@f2+2)& (0+255),w,c
  7210  004460  3424               	rlcf	(___fladd@f2+3)& (0+255),w,c
  7211  004462  6E2A               	movwf	___fladd@exp2,c
  7212  004464  502B               	movf	___fladd@exp1,w,c
  7213  004466  E009               	bz	l1596
  7214  004468  502A               	movf	___fladd@exp2,w,c
  7215  00446A  602B               	cpfslt	___fladd@exp1,c
  7216  00446C  D00F               	goto	l13035
  7217  00446E  502B               	movf	___fladd@exp1,w,c
  7218  004470  5C2A               	subwf	___fladd@exp2,w,c
  7219  004472  6E25               	movwf	??___fladd& (0+255),c
  7220  004474  0E21               	movlw	33
  7221  004476  5C25               	subwf	??___fladd,w,c
  7222  004478  E309               	bnc	l13035
  7223  00447A                     l1596:
  7224  00447A  C021  F01D         	movff	___fladd@f2,?___fladd
  7225  00447E  C022  F01E         	movff	___fladd@f2+1,?___fladd+1
  7226  004482  C023  F01F         	movff	___fladd@f2+2,?___fladd+2
  7227  004486  C024  F020         	movff	___fladd@f2+3,?___fladd+3
  7228  00448A  0012               	return	
  7229  00448C                     l13035:
  7230  00448C  502A               	movf	___fladd@exp2,w,c
  7231  00448E  E009               	bz	l1600
  7232  004490  502B               	movf	___fladd@exp1,w,c
  7233  004492  602A               	cpfslt	___fladd@exp2,c
  7234  004494  D00F               	goto	l13041
  7235  004496  502A               	movf	___fladd@exp2,w,c
  7236  004498  5C2B               	subwf	___fladd@exp1,w,c
  7237  00449A  6E25               	movwf	??___fladd& (0+255),c
  7238  00449C  0E21               	movlw	33
  7239  00449E  5C25               	subwf	??___fladd,w,c
  7240  0044A0  E309               	bnc	l13041
  7241  0044A2                     l1600:
  7242  0044A2  C01D  F01D         	movff	___fladd@f1,?___fladd
  7243  0044A6  C01E  F01E         	movff	___fladd@f1+1,?___fladd+1
  7244  0044AA  C01F  F01F         	movff	___fladd@f1+2,?___fladd+2
  7245  0044AE  C020  F020         	movff	___fladd@f1+3,?___fladd+3
  7246  0044B2  0012               	return	
  7247  0044B4                     l13041:
  7248  0044B4  0E06               	movlw	6
  7249  0044B6  6E29               	movwf	___fladd@sign,c
  7250  0044B8  BE20               	btfsc	___fladd@f1+3,7,c
  7251  0044BA  8E29               	bsf	___fladd@sign,7,c
  7252  0044BC  BE24               	btfsc	___fladd@f2+3,7,c
  7253  0044BE  8C29               	bsf	___fladd@sign,6,c
  7254  0044C0  8E1F               	bsf	___fladd@f1+2,7,c
  7255  0044C2  6A20               	clrf	___fladd@f1+3,c
  7256  0044C4  8E23               	bsf	___fladd@f2+2,7,c
  7257  0044C6  6A24               	clrf	___fladd@f2+3,c
  7258  0044C8  502A               	movf	___fladd@exp2,w,c
  7259  0044CA  602B               	cpfslt	___fladd@exp1,c
  7260  0044CC  D018               	goto	l13067
  7261  0044CE                     l13057:
  7262  0044CE  90D8               	bcf	status,0,c
  7263  0044D0  3621               	rlcf	___fladd@f2,f,c
  7264  0044D2  3622               	rlcf	___fladd@f2+1,f,c
  7265  0044D4  3623               	rlcf	___fladd@f2+2,f,c
  7266  0044D6  3624               	rlcf	___fladd@f2+3,f,c
  7267  0044D8  062A               	decf	___fladd@exp2,f,c
  7268  0044DA  502A               	movf	___fladd@exp2,w,c
  7269  0044DC  182B               	xorwf	___fladd@exp1,w,c
  7270  0044DE  E00B               	bz	l13065
  7271  0044E0  0629               	decf	___fladd@sign,f,c
  7272  0044E2  5029               	movf	___fladd@sign& (0+255),w,c
  7273  0044E4  0B07               	andlw	7
  7274  0044E6  E007               	bz	l13065
  7275  0044E8  D7F2               	goto	l13057
  7276  0044EA                     l13063:
  7277  0044EA  90D8               	bcf	status,0,c
  7278  0044EC  3220               	rrcf	___fladd@f1+3,f,c
  7279  0044EE  321F               	rrcf	___fladd@f1+2,f,c
  7280  0044F0  321E               	rrcf	___fladd@f1+1,f,c
  7281  0044F2  321D               	rrcf	___fladd@f1,f,c
  7282  0044F4  2A2B               	incf	___fladd@exp1,f,c
  7283  0044F6                     l13065:
  7284  0044F6  502A               	movf	___fladd@exp2,w,c
  7285  0044F8  622B               	cpfseq	___fladd@exp1,c
  7286  0044FA  D7F7               	goto	l13063
  7287  0044FC  D01A               	goto	l1611
  7288  0044FE                     l13067:
  7289  0044FE  502B               	movf	___fladd@exp1,w,c
  7290  004500  602A               	cpfslt	___fladd@exp2,c
  7291  004502  D017               	goto	l1611
  7292  004504                     l13069:
  7293  004504  90D8               	bcf	status,0,c
  7294  004506  361D               	rlcf	___fladd@f1,f,c
  7295  004508  361E               	rlcf	___fladd@f1+1,f,c
  7296  00450A  361F               	rlcf	___fladd@f1+2,f,c
  7297  00450C  3620               	rlcf	___fladd@f1+3,f,c
  7298  00450E  062B               	decf	___fladd@exp1,f,c
  7299  004510  502A               	movf	___fladd@exp2,w,c
  7300  004512  182B               	xorwf	___fladd@exp1,w,c
  7301  004514  E00B               	bz	l13077
  7302  004516  0629               	decf	___fladd@sign,f,c
  7303  004518  5029               	movf	___fladd@sign& (0+255),w,c
  7304  00451A  0B07               	andlw	7
  7305  00451C  E007               	bz	l13077
  7306  00451E  D7F2               	goto	l13069
  7307  004520                     l13075:
  7308  004520  90D8               	bcf	status,0,c
  7309  004522  3224               	rrcf	___fladd@f2+3,f,c
  7310  004524  3223               	rrcf	___fladd@f2+2,f,c
  7311  004526  3222               	rrcf	___fladd@f2+1,f,c
  7312  004528  3221               	rrcf	___fladd@f2,f,c
  7313  00452A  2A2A               	incf	___fladd@exp2,f,c
  7314  00452C                     l13077:
  7315  00452C  502A               	movf	___fladd@exp2,w,c
  7316  00452E  622B               	cpfseq	___fladd@exp1,c
  7317  004530  D7F7               	goto	l13075
  7318  004532                     l1611:
  7319  004532  AE29               	btfss	___fladd@sign,7,c
  7320  004534  D009               	goto	l13081
  7321  004536  1E1D               	comf	___fladd@f1,f,c
  7322  004538  1E1E               	comf	___fladd@f1+1,f,c
  7323  00453A  1E1F               	comf	___fladd@f1+2,f,c
  7324  00453C  1E20               	comf	___fladd@f1+3,f,c
  7325  00453E  2A1D               	incf	___fladd@f1,f,c
  7326  004540  0E00               	movlw	0
  7327  004542  221E               	addwfc	___fladd@f1+1,f,c
  7328  004544  221F               	addwfc	___fladd@f1+2,f,c
  7329  004546  2220               	addwfc	___fladd@f1+3,f,c
  7330  004548                     l13081:
  7331  004548  AC29               	btfss	___fladd@sign,6,c
  7332  00454A  D002               	goto	l13085
  7333  00454C  1E21               	comf	___fladd@f2,f,c
  7334  00454E  D826               	call	PL58	;call to abstracted procedure
  7335  004550                     l13085:
  7336  004550  6A29               	clrf	___fladd@sign,c
  7337  004552  501D               	movf	___fladd@f1,w,c
  7338  004554  2621               	addwf	___fladd@f2,f,c
  7339  004556  501E               	movf	___fladd@f1+1,w,c
  7340  004558  2222               	addwfc	___fladd@f2+1,f,c
  7341  00455A  501F               	movf	___fladd@f1+2,w,c
  7342  00455C  2223               	addwfc	___fladd@f2+2,f,c
  7343  00455E  5020               	movf	___fladd@f1+3,w,c
  7344  004560  2224               	addwfc	___fladd@f2+3,f,c
  7345  004562  AE24               	btfss	___fladd@f2+3,7,c
  7346  004564  D004               	goto	l13093
  7347  004566  1E21               	comf	___fladd@f2,f,c
  7348  004568  D819               	call	PL58	;call to abstracted procedure
  7349  00456A  0E01               	movlw	1
  7350  00456C  6E29               	movwf	___fladd@sign,c
  7351  00456E                     l13093:
  7352  00456E  C021  F00E         	movff	___fladd@f2,?___flpack
  7353  004572  C022  F00F         	movff	___fladd@f2+1,?___flpack+1
  7354  004576  C023  F010         	movff	___fladd@f2+2,?___flpack+2
  7355  00457A  C024  F011         	movff	___fladd@f2+3,?___flpack+3
  7356  00457E  C02B  F012         	movff	___fladd@exp1,?___flpack+4
  7357  004582  C029  F013         	movff	___fladd@sign,?___flpack+5
  7358  004586  EC44  F027         	call	___flpack	;wreg free
  7359  00458A  C011  F020         	movff	?___flpack+3,?___fladd+3
  7360  00458E  C010  F01F         	movff	?___flpack+2,?___fladd+2
  7361  004592  C00F  F01E         	movff	?___flpack+1,?___fladd+1
  7362  004596  C00E  F01D         	movff	?___flpack,?___fladd
  7363  00459A  0012               	return	
  7364  00459C                     __end_of___fladd:
  7365                           	opt stack 0
  7366  00459C                     PL58:
  7367                           	opt stack 25
  7368  00459C  1E22               	comf	___fladd@f2+1,f,c
  7369  00459E  1E23               	comf	___fladd@f2+2,f,c
  7370  0045A0  1E24               	comf	___fladd@f2+3,f,c
  7371  0045A2  2A21               	incf	___fladd@f2,f,c
  7372  0045A4  0E00               	movlw	0
  7373  0045A6  2222               	addwfc	___fladd@f2+1,f,c
  7374  0045A8  2223               	addwfc	___fladd@f2+2,f,c
  7375  0045AA  2224               	addwfc	___fladd@f2+3,f,c
  7376  0045AC  0C00               	retlw	0
  7377  0045AE                     __end_ofPL58:
  7378                           	opt stack 0
  7379                           tblptru	equ	0xFF8
  7380                           tblptrh	equ	0xFF7
  7381                           tblptrl	equ	0xFF6
  7382                           tablat	equ	0xFF5
  7383                           prodh	equ	0xFF4
  7384                           prodl	equ	0xFF3
  7385                           intcon	equ	0xFF2
  7386                           postinc0	equ	0xFEE
  7387                           wreg	equ	0xFE8
  7388                           indf1	equ	0xFE7
  7389                           postdec1	equ	0xFE5
  7390                           fsr1h	equ	0xFE2
  7391                           fsr1l	equ	0xFE1
  7392                           indf2	equ	0xFDF
  7393                           postinc2	equ	0xFDE
  7394                           postdec2	equ	0xFDD
  7395                           plusw2	equ	0xFDB
  7396                           fsr2h	equ	0xFDA
  7397                           fsr2l	equ	0xFD9
  7398                           status	equ	0xFD8
  7399                           
  7400 ;; *************** function _Celsius2Kelvin *****************
  7401 ;; Defined at:
  7402 ;;		line 61 in file "../ntc.c"
  7403 ;; Parameters:    Size  Location     Type
  7404 ;;  tc              4   43[COMRAM] unsigned char 
  7405 ;; Auto vars:     Size  Location     Type
  7406 ;;		None
  7407 ;; Return value:  Size  Location     Type
  7408 ;;                  4   43[COMRAM] unsigned char 
  7409 ;; Registers used:
  7410 ;;		wreg, status,2, status,0, cstack
  7411 ;; Tracked objects:
  7412 ;;		On entry : 0/0
  7413 ;;		On exit  : 0/0
  7414 ;;		Unchanged: 0/0
  7415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7416 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7419 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7420 ;;Total ram usage:        4 bytes
  7421 ;; Hardware stack levels used:    1
  7422 ;; Hardware stack levels required when called:    4
  7423 ;; This function calls:
  7424 ;;		___fladd
  7425 ;; This function is called by:
  7426 ;;		_setEventData
  7427 ;; This function uses a non-reentrant model
  7428 ;;
  7429                           
  7430                           	psect	text32
  7431  005C3A                     __ptext32:
  7432                           	opt stack 0
  7433  005C3A                     _Celsius2Kelvin:
  7434                           	opt stack 23
  7435                           
  7436                           ;ntc.c: 62: return (27316.0 + tc);
  7437                           
  7438                           ;incstack = 0
  7439                           ;incstack = 0
  7440  005C3A  C02C  F01D         	movff	Celsius2Kelvin@tc,?___fladd
  7441  005C3E  C02D  F01E         	movff	Celsius2Kelvin@tc+1,?___fladd+1
  7442  005C42  C02E  F01F         	movff	Celsius2Kelvin@tc+2,?___fladd+2
  7443  005C46  C02F  F020         	movff	Celsius2Kelvin@tc+3,?___fladd+3
  7444  005C4A  6A21               	clrf	?___fladd+4,c
  7445  005C4C  0E68               	movlw	104
  7446  005C4E  6E22               	movwf	?___fladd+5,c
  7447  005C50  0ED5               	movlw	213
  7448  005C52  6E23               	movwf	?___fladd+6,c
  7449  005C54  0E46               	movlw	70
  7450  005C56  6E24               	movwf	?___fladd+7,c
  7451  005C58  EC2C  F022         	call	___fladd	;wreg free
  7452  005C5C  C020  F02F         	movff	?___fladd+3,?_Celsius2Kelvin+3
  7453  005C60  C01F  F02E         	movff	?___fladd+2,?_Celsius2Kelvin+2
  7454  005C64  C01E  F02D         	movff	?___fladd+1,?_Celsius2Kelvin+1
  7455  005C68  C01D  F02C         	movff	?___fladd,?_Celsius2Kelvin
  7456  005C6C  0012               	return	
  7457  005C6E                     __end_of_Celsius2Kelvin:
  7458                           	opt stack 0
  7459                           tblptru	equ	0xFF8
  7460                           tblptrh	equ	0xFF7
  7461                           tblptrl	equ	0xFF6
  7462                           tablat	equ	0xFF5
  7463                           prodh	equ	0xFF4
  7464                           prodl	equ	0xFF3
  7465                           intcon	equ	0xFF2
  7466                           postinc0	equ	0xFEE
  7467                           wreg	equ	0xFE8
  7468                           indf1	equ	0xFE7
  7469                           postdec1	equ	0xFE5
  7470                           fsr1h	equ	0xFE2
  7471                           fsr1l	equ	0xFE1
  7472                           indf2	equ	0xFDF
  7473                           postinc2	equ	0xFDE
  7474                           postdec2	equ	0xFDD
  7475                           plusw2	equ	0xFDB
  7476                           fsr2h	equ	0xFDA
  7477                           fsr2l	equ	0xFD9
  7478                           status	equ	0xFD8
  7479                           
  7480 ;; *************** function _vscp_handleProtocolEvent *****************
  7481 ;; Defined at:
  7482 ;;		line 789 in file "../../vscp_firmware/common/vscp_firmware.c"
  7483 ;; Parameters:    Size  Location     Type
  7484 ;;		None
  7485 ;; Auto vars:     Size  Location     Type
  7486 ;;  bytes           1   44[BANK0 ] unsigned char 
  7487 ;;  page_save       2   40[BANK0 ] unsigned short 
  7488 ;;  i               1   50[BANK0 ] unsigned char 
  7489 ;;  bytes           2   54[BANK0 ] unsigned short 
  7490 ;;  page_save       2   38[BANK0 ] unsigned short 
  7491 ;;  byte            1   53[BANK0 ] unsigned char 
  7492 ;;  cb              1   49[BANK0 ] unsigned char 
  7493 ;;  bytes_this_t    1   48[BANK0 ] unsigned char 
  7494 ;;  j               1   58[BANK0 ] unsigned char 
  7495 ;;  i               1   56[BANK0 ] unsigned char 
  7496 ;;  k               1   51[BANK0 ] unsigned char 
  7497 ;;  i               1   52[BANK0 ] unsigned char 
  7498 ;;  len             1   47[BANK0 ] unsigned char 
  7499 ;;  pos             1   46[BANK0 ] unsigned char 
  7500 ;;  i               1   57[BANK0 ] unsigned char 
  7501 ;;  len             1   45[BANK0 ] unsigned char 
  7502 ;;  pos             1   43[BANK0 ] unsigned char 
  7503 ;;  offset          1   42[BANK0 ] unsigned char 
  7504 ;; Return value:  Size  Location     Type
  7505 ;;		None               void
  7506 ;; Registers used:
  7507 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7508 ;; Tracked objects:
  7509 ;;		On entry : F/0
  7510 ;;		On exit  : 0/0
  7511 ;;		Unchanged: 0/0
  7512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7514 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7515 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7516 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7517 ;;Total ram usage:       28 bytes
  7518 ;; Hardware stack levels used:    1
  7519 ;; Hardware stack levels required when called:    8
  7520 ;; This function calls:
  7521 ;;		_vscp_init
  7522 ;;		_vscp_sendEvent
  7523 ;;		_vscp_readAppReg
  7524 ;;		_vscp_writeAppReg
  7525 ;;		_vscp_getGUID
  7526 ;;		_vscp_getMDF_URL
  7527 ;;		_vscp_getMatrixInfo
  7528 ;;		_vscp_goBootloaderMode
  7529 ;;		_vscp_handleHeartbeat
  7530 ;;		_vscp_handleSetNickname
  7531 ;;		_vscp_handleDropNickname
  7532 ;;		_vscp_newNodeOnline
  7533 ;;		_vscp_readRegister
  7534 ;;		_vscp_readStdReg
  7535 ;;		_vscp_writeRegister
  7536 ;;		_vscp_writeStdReg
  7537 ;;		___lbmod
  7538 ;; This function is called by:
  7539 ;;		_main
  7540 ;; This function uses a non-reentrant model
  7541 ;;
  7542                           
  7543                           	psect	text33
  7544  002D2A                     __ptext33:
  7545                           	opt stack 0
  7546  002D2A                     _vscp_handleProtocolEvent:
  7547                           	opt stack 22
  7548                           
  7549                           ; BSR set to: 0
  7550                           ;vscp_firmware.c: 791: if (0 == vscp_imsg.vscp_class) {
  7551                           
  7552                           ;incstack = 0
  7553                           ;incstack = 0
  7554  002D2A  51C0               	movf	(_vscp_imsg+3)& (0+255),w,b
  7555  002D2C  11BF               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  7556  002D2E  A4D8               	btfss	status,2,c
  7557  002D30  0012               	return	
  7558  002D32  D2BA               	goto	l11275
  7559  002D34                     l10857:
  7560                           
  7561                           ; BSR set to: 0
  7562                           ;vscp_firmware.c: 798: vscp_handleHeartbeat();
  7563  002D34  0012               	return		;wreg free
  7564  002D36                     l10859:
  7565                           
  7566                           ; BSR set to: 0
  7567                           ;vscp_firmware.c: 803: vscp_newNodeOnline();
  7568  002D36  EFAA  F02E         	goto	_vscp_newNodeOnline	;wreg free
  7569  002D3A                     l10861:
  7570                           
  7571                           ; BSR set to: 0
  7572                           ;vscp_firmware.c: 808: vscp_handleSetNickname();
  7573  002D3A  EF50  F02F         	goto	_vscp_handleSetNickname	;wreg free
  7574  002D3E                     l10863:
  7575                           
  7576                           ; BSR set to: 0
  7577                           ;vscp_firmware.c: 813: vscp_handleDropNickname();
  7578  002D3E  EF50  F02E         	goto	_vscp_handleDropNickname	;wreg free
  7579  002D42                     l10865:
  7580                           
  7581                           ; BSR set to: 0
  7582                           ;vscp_firmware.c: 818: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  7583                           ;vscp_firmware.c: 819: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7584  002D42  51BD               	movf	_vscp_imsg& (0+255),w,b
  7585  002D44  0B0F               	andlw	15
  7586  002D46  0A02               	xorlw	2
  7587  002D48  A4D8               	btfss	status,2,c
  7588  002D4A  0012               	return	
  7589                           
  7590                           ; BSR set to: 0
  7591  002D4C  51BB               	movf	_vscp_nickname& (0+255),w,b
  7592  002D4E  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  7593  002D52  62DF               	cpfseq	indf2,c
  7594  002D54  0012               	return	
  7595                           
  7596                           ; BSR set to: 0
  7597                           ;vscp_firmware.c: 821: if (vscp_imsg.data[ 1 ] < 0x80) {
  7598  002D56  0E80               	movlw	128
  7599  002D58  61C4               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7600  002D5A  D011               	goto	l10885
  7601                           
  7602                           ; BSR set to: 0
  7603                           ;vscp_firmware.c: 824: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  7604  002D5C  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  7605  002D5E  EC07  F00F         	call	_vscp_readAppReg
  7606  002D62                     L6:
  7607  002D62  0100               	movlb	0	; () banked
  7608  002D64  6FD2               	movwf	(_vscp_omsg+7)& (0+255),b
  7609                           
  7610                           ; BSR set to: 0
  7611                           ;vscp_firmware.c: 827: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  7612  002D66  C0C4  F0D1         	movff	_vscp_imsg+7,_vscp_omsg+6
  7613                           
  7614                           ; BSR set to: 0
  7615                           ;vscp_firmware.c: 829: vscp_omsg.priority = 0x03;
  7616  002D6A  0E03               	movlw	3
  7617  002D6C  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  7618                           
  7619                           ; BSR set to: 0
  7620                           ;vscp_firmware.c: 830: vscp_omsg.flags = 0x80 + 2;
  7621  002D6E  0E82               	movlw	130
  7622  002D70  6FCB               	movwf	_vscp_omsg& (0+255),b
  7623                           
  7624                           ; BSR set to: 0
  7625                           ;vscp_firmware.c: 831: vscp_omsg.vscp_class = 0;
  7626  002D72  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  7627  002D74  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  7628                           
  7629                           ; BSR set to: 0
  7630                           ;vscp_firmware.c: 832: vscp_omsg.vscp_type = 10;
  7631  002D76  0E0A               	movlw	10
  7632  002D78  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  7633                           
  7634                           ; BSR set to: 0
  7635                           ;vscp_firmware.c: 835: vscp_sendEvent();
  7636  002D7A  EF68  F02E         	goto	_vscp_sendEvent	;wreg free
  7637  002D7E                     l10885:
  7638                           
  7639                           ; BSR set to: 0
  7640                           ;vscp_firmware.c: 837: else {
  7641                           ;vscp_firmware.c: 840: vscp_omsg.data[ 1 ] =
  7642                           ;vscp_firmware.c: 841: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  7643  002D7E  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  7644  002D80  ECAC  F020         	call	_vscp_readStdReg
  7645  002D84  D7EE               	goto	L6
  7646  002D86                     l10899:
  7647                           
  7648                           ; BSR set to: 0
  7649                           ;vscp_firmware.c: 859: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  7650                           ;vscp_firmware.c: 860: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7651  002D86  51BD               	movf	_vscp_imsg& (0+255),w,b
  7652  002D88  0B0F               	andlw	15
  7653  002D8A  0A03               	xorlw	3
  7654  002D8C  A4D8               	btfss	status,2,c
  7655  002D8E  0012               	return	
  7656                           
  7657                           ; BSR set to: 0
  7658  002D90  51BB               	movf	_vscp_nickname& (0+255),w,b
  7659  002D92  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  7660  002D96  62DF               	cpfseq	indf2,c
  7661  002D98  0012               	return	
  7662                           
  7663                           ; BSR set to: 0
  7664                           ;vscp_firmware.c: 862: if (vscp_imsg.data[ 1 ] < 0x80) {
  7665  002D9A  0E80               	movlw	128
  7666  002D9C  61C4               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7667  002D9E  D006               	goto	l10919
  7668                           
  7669                           ; BSR set to: 0
  7670                           ;vscp_firmware.c: 865: vscp_omsg.data[ 1 ] =
  7671                           ;vscp_firmware.c: 866: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7672  002DA0  C0C5  F021         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  7673  002DA4  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  7674  002DA6  ECB7  F007         	call	_vscp_writeAppReg
  7675  002DAA  D7DB               	goto	L6
  7676  002DAC                     l10919:
  7677                           
  7678                           ; BSR set to: 0
  7679                           ;vscp_firmware.c: 880: else {
  7680                           ;vscp_firmware.c: 883: vscp_omsg.data[ 1 ] =
  7681                           ;vscp_firmware.c: 884: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7682  002DAC  C0C5  F019         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  7683  002DB0  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  7684  002DB2  EC8E  F024         	call	_vscp_writeStdReg
  7685  002DB6  D7D5               	goto	L6
  7686  002DB8                     l10933:
  7687                           
  7688                           ; BSR set to: 0
  7689                           ;vscp_firmware.c: 902: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  7690                           ;vscp_firmware.c: 904: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  7691                           ;vscp_firmware.c: 905: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  7692                           ;vscp_firmware.c: 906: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  7693                           ;vscp_firmware.c: 907: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  7694                           ;vscp_firmware.c: 908: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  7695                           ;vscp_firmware.c: 909: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  7696  002DB8  51BB               	movf	_vscp_nickname& (0+255),w,b
  7697  002DBA  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  7698  002DBE  62DF               	cpfseq	indf2,c
  7699  002DC0  0012               	return	
  7700                           
  7701                           ; BSR set to: 0
  7702  002DC2  0E00               	movlw	0
  7703  002DC4  EC04  F030         	call	_vscp_getGUID
  7704  002DC8  0100               	movlb	0	; () banked
  7705  002DCA  19C5               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7706  002DCC  A4D8               	btfss	status,2,c
  7707  002DCE  0012               	return	
  7708                           
  7709                           ; BSR set to: 0
  7710  002DD0  0E03               	movlw	3
  7711  002DD2  EC04  F030         	call	_vscp_getGUID
  7712  002DD6  0100               	movlb	0	; () banked
  7713  002DD8  19C6               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7714  002DDA  A4D8               	btfss	status,2,c
  7715  002DDC  0012               	return	
  7716                           
  7717                           ; BSR set to: 0
  7718  002DDE  0E05               	movlw	5
  7719  002DE0  EC04  F030         	call	_vscp_getGUID
  7720  002DE4  0100               	movlb	0	; () banked
  7721  002DE6  19C7               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7722  002DE8  A4D8               	btfss	status,2,c
  7723  002DEA  0012               	return	
  7724                           
  7725                           ; BSR set to: 0
  7726  002DEC  0E07               	movlw	7
  7727  002DEE  EC04  F030         	call	_vscp_getGUID
  7728  002DF2  0100               	movlb	0	; () banked
  7729  002DF4  19C8               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  7730  002DF6  A4D8               	btfss	status,2,c
  7731  002DF8  0012               	return	
  7732                           
  7733                           ; BSR set to: 0
  7734  002DFA  5047               	movf	_vscp_page_select+1,w,c
  7735  002DFC  19C9               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  7736  002DFE  A4D8               	btfss	status,2,c
  7737  002E00  0012               	return	
  7738                           
  7739                           ; BSR set to: 0
  7740  002E02  5046               	movf	_vscp_page_select,w,c
  7741  002E04  EE20  F0CA         	lfsr	2,_vscp_imsg+13
  7742  002E08  62DF               	cpfseq	indf2,c
  7743  002E0A  0012               	return	
  7744                           
  7745                           ; BSR set to: 0
  7746                           ;vscp_firmware.c: 911: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  7747  002E0C  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  7748  002E0E  EF1D  F02F         	goto	_vscp_goBootloaderMode
  7749  002E12                     l10949:
  7750                           
  7751                           ; BSR set to: 0
  7752                           ;vscp_firmware.c: 920: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  7753                           ;vscp_firmware.c: 921: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  7754                           ;vscp_firmware.c: 922: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  7755                           ;vscp_firmware.c: 923: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  7756  002E12  0E00               	movlw	0
  7757  002E14  EC04  F030         	call	_vscp_getGUID
  7758  002E18  0100               	movlb	0	; () banked
  7759  002E1A  19C4               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7760  002E1C  E173               	bnz	l10993
  7761                           
  7762                           ; BSR set to: 0
  7763  002E1E  0E01               	movlw	1
  7764  002E20  EC04  F030         	call	_vscp_getGUID
  7765  002E24  0100               	movlb	0	; () banked
  7766  002E26  19C5               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7767  002E28  E16D               	bnz	l10993
  7768                           
  7769                           ; BSR set to: 0
  7770  002E2A  0E02               	movlw	2
  7771  002E2C  EC04  F030         	call	_vscp_getGUID
  7772  002E30  0100               	movlb	0	; () banked
  7773  002E32  19C6               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7774  002E34  E167               	bnz	l10993
  7775                           
  7776                           ; BSR set to: 0
  7777  002E36  0E03               	movlw	3
  7778  002E38  EC04  F030         	call	_vscp_getGUID
  7779  002E3C  0100               	movlb	0	; () banked
  7780  002E3E  19C7               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7781  002E40  E161               	bnz	l10993
  7782                           
  7783                           ; BSR set to: 0
  7784                           ;vscp_firmware.c: 924: vscp_guid_reset |= 0x10;
  7785  002E42  884C               	bsf	_vscp_guid_reset,4,c
  7786  002E44  D05F               	goto	l10993
  7787  002E46                     l10959:
  7788                           
  7789                           ; BSR set to: 0
  7790                           ;vscp_firmware.c: 929: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  7791                           ;vscp_firmware.c: 930: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  7792                           ;vscp_firmware.c: 931: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  7793                           ;vscp_firmware.c: 932: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  7794  002E46  0E04               	movlw	4
  7795  002E48  EC04  F030         	call	_vscp_getGUID
  7796  002E4C  0100               	movlb	0	; () banked
  7797  002E4E  19C4               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7798  002E50  E159               	bnz	l10993
  7799                           
  7800                           ; BSR set to: 0
  7801  002E52  0E05               	movlw	5
  7802  002E54  EC04  F030         	call	_vscp_getGUID
  7803  002E58  0100               	movlb	0	; () banked
  7804  002E5A  19C5               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7805  002E5C  E153               	bnz	l10993
  7806                           
  7807                           ; BSR set to: 0
  7808  002E5E  0E06               	movlw	6
  7809  002E60  EC04  F030         	call	_vscp_getGUID
  7810  002E64  0100               	movlb	0	; () banked
  7811  002E66  19C6               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7812  002E68  E14D               	bnz	l10993
  7813                           
  7814                           ; BSR set to: 0
  7815  002E6A  0E07               	movlw	7
  7816  002E6C  EC04  F030         	call	_vscp_getGUID
  7817  002E70  0100               	movlb	0	; () banked
  7818  002E72  19C7               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7819  002E74  E147               	bnz	l10993
  7820                           
  7821                           ; BSR set to: 0
  7822                           ;vscp_firmware.c: 933: vscp_guid_reset |= 0x20;
  7823  002E76  8A4C               	bsf	_vscp_guid_reset,5,c
  7824  002E78  D045               	goto	l10993
  7825  002E7A                     l10969:
  7826                           
  7827                           ; BSR set to: 0
  7828                           ;vscp_firmware.c: 938: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  7829                           ;vscp_firmware.c: 939: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  7830                           ;vscp_firmware.c: 940: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  7831                           ;vscp_firmware.c: 941: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  7832  002E7A  0E08               	movlw	8
  7833  002E7C  EC04  F030         	call	_vscp_getGUID
  7834  002E80  0100               	movlb	0	; () banked
  7835  002E82  19C4               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7836  002E84  E13F               	bnz	l10993
  7837                           
  7838                           ; BSR set to: 0
  7839  002E86  0E09               	movlw	9
  7840  002E88  EC04  F030         	call	_vscp_getGUID
  7841  002E8C  0100               	movlb	0	; () banked
  7842  002E8E  19C5               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7843  002E90  E139               	bnz	l10993
  7844                           
  7845                           ; BSR set to: 0
  7846  002E92  0E0A               	movlw	10
  7847  002E94  EC04  F030         	call	_vscp_getGUID
  7848  002E98  0100               	movlb	0	; () banked
  7849  002E9A  19C6               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7850  002E9C  E133               	bnz	l10993
  7851                           
  7852                           ; BSR set to: 0
  7853  002E9E  0E0B               	movlw	11
  7854  002EA0  EC04  F030         	call	_vscp_getGUID
  7855  002EA4  0100               	movlb	0	; () banked
  7856  002EA6  19C7               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7857  002EA8  E12D               	bnz	l10993
  7858                           
  7859                           ; BSR set to: 0
  7860                           ;vscp_firmware.c: 942: vscp_guid_reset |= 0x40;
  7861  002EAA  8C4C               	bsf	_vscp_guid_reset,6,c
  7862  002EAC  D02B               	goto	l10993
  7863  002EAE                     l10979:
  7864                           
  7865                           ; BSR set to: 0
  7866                           ;vscp_firmware.c: 947: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  7867                           ;vscp_firmware.c: 948: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  7868                           ;vscp_firmware.c: 949: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  7869                           ;vscp_firmware.c: 950: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  7870  002EAE  0E0C               	movlw	12
  7871  002EB0  EC04  F030         	call	_vscp_getGUID
  7872  002EB4  0100               	movlb	0	; () banked
  7873  002EB6  19C4               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7874  002EB8  E125               	bnz	l10993
  7875                           
  7876                           ; BSR set to: 0
  7877  002EBA  0E0D               	movlw	13
  7878  002EBC  EC04  F030         	call	_vscp_getGUID
  7879  002EC0  0100               	movlb	0	; () banked
  7880  002EC2  19C5               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7881  002EC4  E11F               	bnz	l10993
  7882                           
  7883                           ; BSR set to: 0
  7884  002EC6  0E0E               	movlw	14
  7885  002EC8  EC04  F030         	call	_vscp_getGUID
  7886  002ECC  0100               	movlb	0	; () banked
  7887  002ECE  19C6               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7888  002ED0  E119               	bnz	l10993
  7889                           
  7890                           ; BSR set to: 0
  7891  002ED2  0E0F               	movlw	15
  7892  002ED4  EC04  F030         	call	_vscp_getGUID
  7893  002ED8  0100               	movlb	0	; () banked
  7894  002EDA  19C7               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7895  002EDC  E113               	bnz	l10993
  7896                           
  7897                           ; BSR set to: 0
  7898                           ;vscp_firmware.c: 951: vscp_guid_reset |= 0x80;
  7899  002EDE  8E4C               	bsf	_vscp_guid_reset,7,c
  7900  002EE0  D011               	goto	l10993
  7901  002EE2                     l1196:
  7902                           
  7903                           ; BSR set to: 0
  7904                           ;vscp_firmware.c: 956: vscp_guid_reset = 0;
  7905  002EE2  6A4C               	clrf	_vscp_guid_reset,c
  7906                           
  7907                           ;vscp_firmware.c: 957: break;
  7908  002EE4  D00F               	goto	l10993
  7909  002EE6                     l10991:
  7910                           
  7911                           ; BSR set to: 0
  7912  002EE6  39C3               	swapf	(_vscp_imsg+6)& (0+255),w,b
  7913  002EE8  0B0F               	andlw	15
  7914  002EEA  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7915  002EEC  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7916                           
  7917                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7918                           ; Switch size 1, requested type "space"
  7919                           ; Number of cases is 1, Range of values is 0 to 0
  7920                           ; switch strategies available:
  7921                           ; Name         Instructions Cycles
  7922                           ; simple_byte            4     3 (average)
  7923                           ;	Chosen strategy is simple_byte
  7924  002EEE  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7925  002EF0  E1F8               	bnz	l1196
  7926                           
  7927                           ; BSR set to: 0
  7928                           ; Switch size 1, requested type "space"
  7929                           ; Number of cases is 4, Range of values is 0 to 3
  7930                           ; switch strategies available:
  7931                           ; Name         Instructions Cycles
  7932                           ; simple_byte           13     7 (average)
  7933                           ;	Chosen strategy is simple_byte
  7934  002EF2  517F               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  7935  002EF4  E08E               	bz	l10949
  7936  002EF6  0A01               	xorlw	1	; case 1
  7937  002EF8  E0A6               	bz	l10959
  7938  002EFA  0A03               	xorlw	3	; case 2
  7939  002EFC  E0BE               	bz	l10969
  7940  002EFE  0A01               	xorlw	1	; case 3
  7941  002F00  E0D6               	bz	l10979
  7942  002F02  D7EF               	goto	l1196
  7943  002F04                     l10993:
  7944                           
  7945                           ; BSR set to: 0
  7946                           ;vscp_firmware.c: 960: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  7947  002F04  504C               	movf	_vscp_guid_reset,w,c
  7948  002F06  0BF0               	andlw	240
  7949  002F08  0AF0               	xorlw	240
  7950  002F0A  B4D8               	btfsc	status,2,c
  7951                           
  7952                           ; BSR set to: 0
  7953                           ;vscp_firmware.c: 962: vscp_init();
  7954  002F0C  ECE7  F02C         	call	_vscp_init	;wreg free
  7955  002F10  0012               	return	
  7956  002F12                     l10997:
  7957                           
  7958                           ; BSR set to: 0
  7959                           ;vscp_firmware.c: 968: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7960  002F12  51BB               	movf	_vscp_nickname& (0+255),w,b
  7961  002F14  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  7962  002F18  62DF               	cpfseq	indf2,c
  7963  002F1A  0012               	return	
  7964                           
  7965                           ; BSR set to: 0
  7966                           ;vscp_firmware.c: 970: uint8_t i;
  7967                           ;vscp_firmware.c: 971: uint8_t pos = 0;
  7968  002F1C  6B8B               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  7969                           
  7970                           ;vscp_firmware.c: 972: uint8_t offset = vscp_imsg.data[ 1 ];
  7971  002F1E  C0C4  F08A         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  7972                           
  7973                           ;vscp_firmware.c: 973: uint8_t len = vscp_imsg.data[ 2 ];
  7974  002F22  C0C5  F08D         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  7975                           
  7976                           ;vscp_firmware.c: 975: for (i = 0; i < len; i++) {
  7977  002F26  6B99               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  7978  002F28  D045               	goto	l11029
  7979  002F2A                     l11001:
  7980                           
  7981                           ; BSR set to: 0
  7982                           ;vscp_firmware.c: 976: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  7983  002F2A  518A               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  7984  002F2C  2599               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  7985  002F2E  ECDA  F02F         	call	_vscp_readRegister
  7986  002F32  0100               	movlb	0	; () banked
  7987  002F34  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7988  002F36  0E07               	movlw	7
  7989  002F38  6E0E               	movwf	?___lbmod,c
  7990  002F3A  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7991  002F3C  ECBF  F02E         	call	___lbmod
  7992  002F40  0100               	movlb	0	; () banked
  7993  002F42  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7994  002F44  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7995  002F46  0FD2               	addlw	low (_vscp_omsg+7)
  7996  002F48  6ED9               	movwf	fsr2l,c
  7997  002F4A  6ADA               	clrf	fsr2h,c
  7998  002F4C  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  7999                           
  8000                           ; BSR set to: 0
  8001                           ;vscp_firmware.c: 978: if ( (i % 7) == 6 || i == (len - 1) ) {
  8002  002F50  0E07               	movlw	7
  8003  002F52  6E0E               	movwf	?___lbmod,c
  8004  002F54  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8005  002F56  ECBF  F02E         	call	___lbmod
  8006  002F5A  0A06               	xorlw	6
  8007  002F5C  E00B               	bz	l11007
  8008  002F5E  0EFF               	movlw	255
  8009  002F60  0100               	movlb	0	; () banked
  8010  002F62  258D               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  8011  002F64  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8012  002F66  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8013  002F68  0EFF               	movlw	255
  8014  002F6A  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8015  002F6C  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8016  002F6E  197F               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8017  002F70  1180               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8018  002F72  E11F               	bnz	l11027
  8019  002F74                     l11007:
  8020                           
  8021                           ;vscp_firmware.c: 980: uint8_t bytes;
  8022                           ;vscp_firmware.c: 982: if ( ( i % 7 ) == 6 ) {
  8023  002F74  0E07               	movlw	7
  8024  002F76  6E0E               	movwf	?___lbmod,c
  8025  002F78  0100               	movlb	0	; () banked
  8026  002F7A  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8027  002F7C  ECBF  F02E         	call	___lbmod
  8028  002F80  0A06               	xorlw	6
  8029  002F82  E103               	bnz	l11011
  8030                           
  8031                           ;vscp_firmware.c: 983: bytes = 7;
  8032  002F84  0E07               	movlw	7
  8033  002F86  0100               	movlb	0	; () banked
  8034  002F88  D009               	goto	L7
  8035  002F8A                     l11011:
  8036                           
  8037                           ;vscp_firmware.c: 985: else {
  8038                           ;vscp_firmware.c: 986: bytes = ( i % 7 ) + 1;
  8039  002F8A  0E07               	movlw	7
  8040  002F8C  6E0E               	movwf	?___lbmod,c
  8041  002F8E  0100               	movlb	0	; () banked
  8042  002F90  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8043  002F92  ECBF  F02E         	call	___lbmod
  8044  002F96  0100               	movlb	0	; () banked
  8045  002F98  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8046  002F9A  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8047  002F9C                     L7:
  8048  002F9C  6F8C               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  8049                           
  8050                           ; BSR set to: 0
  8051                           ;vscp_firmware.c: 987: }
  8052                           ;vscp_firmware.c: 989: vscp_omsg.flags = 0x80 + bytes + 1;
  8053  002F9E  518C               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  8054  002FA0  0F81               	addlw	129
  8055  002FA2  6FCB               	movwf	_vscp_omsg& (0+255),b
  8056                           
  8057                           ; BSR set to: 0
  8058                           ;vscp_firmware.c: 990: vscp_omsg.priority = 0x07;
  8059                           
  8060                           ; BSR set to: 0
  8061                           ;vscp_firmware.c: 991: vscp_omsg.vscp_class = 0;
  8062                           
  8063                           ; BSR set to: 0
  8064                           ;vscp_firmware.c: 992: vscp_omsg.vscp_type = 26;
  8065  002FA4  D9C9               	call	PL70	;call to abstracted procedure
  8066                           
  8067                           ; BSR set to: 0
  8068                           ;vscp_firmware.c: 993: vscp_omsg.data[ 0 ] = pos;
  8069  002FA6  C08B  F0D1         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+6
  8070                           
  8071                           ; BSR set to: 0
  8072                           ;vscp_firmware.c: 996: vscp_sendEvent();
  8073  002FAA  EC68  F02E         	call	_vscp_sendEvent	;wreg free
  8074                           
  8075                           ;vscp_firmware.c: 997: pos++;
  8076  002FAE  0100               	movlb	0	; () banked
  8077  002FB0  2B8B               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  8078  002FB2                     l11027:
  8079                           
  8080                           ; BSR set to: 0
  8081  002FB2  2B99               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  8082  002FB4                     l11029:
  8083                           
  8084                           ; BSR set to: 0
  8085  002FB4  518D               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  8086  002FB6  5D99               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8087  002FB8  B0D8               	btfsc	status,0,c
  8088  002FBA  0012               	return	
  8089  002FBC  D7B6               	goto	l11001
  8090  002FBE                     l11031:
  8091                           
  8092                           ; BSR set to: 0
  8093                           ;vscp_firmware.c: 1005: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8094  002FBE  51BB               	movf	_vscp_nickname& (0+255),w,b
  8095  002FC0  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  8096  002FC4  62DF               	cpfseq	indf2,c
  8097  002FC6  0012               	return	
  8098                           
  8099                           ; BSR set to: 0
  8100                           ;vscp_firmware.c: 1006: uint8_t i;
  8101                           ;vscp_firmware.c: 1007: uint8_t pos = vscp_imsg.data[ 1 ];
  8102  002FC8  C0C4  F08E         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1019
  8103                           
  8104                           ; BSR set to: 0
  8105                           ;vscp_firmware.c: 1008: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  8106  002FCC  51BD               	movf	_vscp_imsg& (0+255),w,b
  8107  002FCE  0FFE               	addlw	254
  8108  002FD0  0B07               	andlw	7
  8109  002FD2  6F8F               	movwf	vscp_handleProtocolEvent@len_1020& (0+255),b
  8110                           
  8111                           ; BSR set to: 0
  8112                           ;vscp_firmware.c: 1010: for (i = 0; i < len; i++) {
  8113  002FD4  6B94               	clrf	vscp_handleProtocolEvent@i_1018& (0+255),b
  8114  002FD6  D018               	goto	l11045
  8115  002FD8                     l11039:
  8116                           
  8117                           ; BSR set to: 0
  8118                           ;vscp_firmware.c: 1012: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  8119  002FD8  5194               	movf	vscp_handleProtocolEvent@i_1018& (0+255),w,b
  8120  002FDA  0FC5               	addlw	low (_vscp_imsg+8)
  8121  002FDC  6ED9               	movwf	fsr2l,c
  8122  002FDE  6ADA               	clrf	fsr2h,c
  8123  002FE0  50DF               	movf	indf2,w,c
  8124  002FE2  6E25               	movwf	?_vscp_writeRegister,c
  8125  002FE4  518E               	movf	vscp_handleProtocolEvent@pos_1019& (0+255),w,b
  8126  002FE6  2594               	addwf	vscp_handleProtocolEvent@i_1018& (0+255),w,b
  8127  002FE8  EC41  F02F         	call	_vscp_writeRegister
  8128                           
  8129                           ;vscp_firmware.c: 1013: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  8130  002FEC  0100               	movlb	0	; () banked
  8131  002FEE  518E               	movf	vscp_handleProtocolEvent@pos_1019& (0+255),w,b
  8132  002FF0  2594               	addwf	vscp_handleProtocolEvent@i_1018& (0+255),w,b
  8133  002FF2  ECDA  F02F         	call	_vscp_readRegister
  8134  002FF6  0100               	movlb	0	; () banked
  8135  002FF8  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8136  002FFA  5194               	movf	vscp_handleProtocolEvent@i_1018& (0+255),w,b
  8137  002FFC  0FD2               	addlw	low (_vscp_omsg+7)
  8138  002FFE  6ED9               	movwf	fsr2l,c
  8139  003000  6ADA               	clrf	fsr2h,c
  8140  003002  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8141                           
  8142                           ; BSR set to: 0
  8143  003006  2B94               	incf	vscp_handleProtocolEvent@i_1018& (0+255),f,b
  8144  003008                     l11045:
  8145                           
  8146                           ; BSR set to: 0
  8147  003008  518F               	movf	vscp_handleProtocolEvent@len_1020& (0+255),w,b
  8148  00300A  5D94               	subwf	vscp_handleProtocolEvent@i_1018& (0+255),w,b
  8149  00300C  E3E5               	bnc	l11039
  8150                           
  8151                           ; BSR set to: 0
  8152                           ;vscp_firmware.c: 1014: }
  8153                           ;vscp_firmware.c: 1016: vscp_omsg.priority = 0x07;
  8154                           
  8155                           ; BSR set to: 0
  8156                           ;vscp_firmware.c: 1017: vscp_omsg.vscp_class = 0;
  8157                           
  8158                           ;vscp_firmware.c: 1018: vscp_omsg.vscp_type = 26;
  8159  00300E  D994               	call	PL70	;call to abstracted procedure
  8160                           
  8161                           ; BSR set to: 0
  8162                           ;vscp_firmware.c: 1019: vscp_omsg.data[ 0 ] = 0;
  8163  003010  6BD1               	clrf	(_vscp_omsg+6)& (0+255),b
  8164                           
  8165                           ; BSR set to: 0
  8166                           ;vscp_firmware.c: 1020: vscp_omsg.flags = 0x80 + len + 1;
  8167  003012  518F               	movf	vscp_handleProtocolEvent@len_1020& (0+255),w,b
  8168  003014  0F81               	addlw	129
  8169  003016  6FCB               	movwf	_vscp_omsg& (0+255),b
  8170  003018  EF68  F02E         	goto	_vscp_sendEvent
  8171  00301C                     l11057:
  8172                           
  8173                           ; BSR set to: 0
  8174                           ;vscp_firmware.c: 1030: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8175  00301C  51BB               	movf	_vscp_nickname& (0+255),w,b
  8176  00301E  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  8177  003022  62DF               	cpfseq	indf2,c
  8178  003024  0012               	return	
  8179                           
  8180                           ; BSR set to: 0
  8181                           ;vscp_firmware.c: 1032: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8182                           ;vscp_firmware.c: 1033: vscp_imsg.data[ 1 ],
  8183                           ;vscp_firmware.c: 1034: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  8184  003026  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  8185  003028  EC07  F00F         	call	_vscp_readAppReg
  8186  00302C  0100               	movlb	0	; () banked
  8187  00302E  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8188  003030  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8189  003032  6E21               	movwf	?_vscp_writeAppReg,c
  8190  003034  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  8191  003036  ECB7  F007         	call	_vscp_writeAppReg
  8192  00303A  D693               	goto	L6
  8193  00303C                     l11073:
  8194                           
  8195                           ; BSR set to: 0
  8196                           ;vscp_firmware.c: 1050: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8197  00303C  51BB               	movf	_vscp_nickname& (0+255),w,b
  8198  00303E  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  8199  003042  62DF               	cpfseq	indf2,c
  8200  003044  0012               	return	
  8201                           
  8202                           ; BSR set to: 0
  8203                           ;vscp_firmware.c: 1052: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8204                           ;vscp_firmware.c: 1053: vscp_imsg.data[ 1 ],
  8205                           ;vscp_firmware.c: 1054: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  8206  003046  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  8207  003048  EC07  F00F         	call	_vscp_readAppReg
  8208  00304C  0100               	movlb	0	; () banked
  8209  00304E  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8210  003050  057F               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  8211  003052  6E21               	movwf	?_vscp_writeAppReg,c
  8212  003054  51C4               	movf	(_vscp_imsg+7)& (0+255),w,b
  8213  003056  ECB7  F007         	call	_vscp_writeAppReg
  8214  00305A  D683               	goto	L6
  8215  00305C                     l11089:
  8216                           
  8217                           ; BSR set to: 0
  8218                           ;vscp_firmware.c: 1070: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  8219                           ;vscp_firmware.c: 1071: (0xff == vscp_imsg.data[ 0 ])) {
  8220  00305C  51C3               	movf	(_vscp_imsg+6)& (0+255),w,b
  8221  00305E  19BB               	xorwf	_vscp_nickname& (0+255),w,b
  8222  003060  E003               	bz	l1220
  8223                           
  8224                           ; BSR set to: 0
  8225  003062  29C3               	incf	(_vscp_imsg+6)& (0+255),w,b
  8226  003064  A4D8               	btfss	status,2,c
  8227  003066  0012               	return	
  8228  003068                     l1220:
  8229                           
  8230                           ; BSR set to: 0
  8231                           ;vscp_firmware.c: 1073: uint8_t i, j, k = 0;
  8232  003068  6B93               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  8233                           
  8234                           ; BSR set to: 0
  8235                           ;vscp_firmware.c: 1077: vscp_omsg.priority = 0x03;
  8236  00306A  0E03               	movlw	3
  8237  00306C  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  8238                           
  8239                           ;vscp_firmware.c: 1078: vscp_omsg.flags = 0x80 + 8;
  8240  00306E  0E88               	movlw	136
  8241  003070  6FCB               	movwf	_vscp_omsg& (0+255),b
  8242                           
  8243                           ; BSR set to: 0
  8244                           ;vscp_firmware.c: 1079: vscp_omsg.vscp_class = 0;
  8245  003072  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  8246  003074  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  8247                           
  8248                           ;vscp_firmware.c: 1080: vscp_omsg.vscp_type = 32;
  8249  003076  0E20               	movlw	32
  8250  003078  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  8251                           
  8252                           ; BSR set to: 0
  8253                           ;vscp_firmware.c: 1082: for (i = 0; i < 3; i++)
  8254  00307A  6B98               	clrf	vscp_handleProtocolEvent@i_1021& (0+255),b
  8255  00307C                     l1221:
  8256                           
  8257                           ; BSR set to: 0
  8258                           ;vscp_firmware.c: 1083: {
  8259                           ;vscp_firmware.c: 1084: vscp_omsg.data[0] = i;
  8260                           
  8261                           ; BSR set to: 0
  8262                           ;vscp_firmware.c: 1086: for (j = 1; j < 8; j++) {
  8263  00307C  D964               	call	PL84	;call to abstracted procedure
  8264  00307E                     l11109:
  8265                           
  8266                           ; BSR set to: 0
  8267                           ;vscp_firmware.c: 1087: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  8268  00307E  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8269  003080  0FD1               	addlw	low (_vscp_omsg+6)
  8270  003082  6ED9               	movwf	fsr2l,c
  8271  003084  6ADA               	clrf	fsr2h,c
  8272  003086  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8273  003088  080F               	sublw	15
  8274  00308A  EC04  F030         	call	_vscp_getGUID
  8275  00308E  6EDF               	movwf	indf2,c
  8276  003090  0100               	movlb	0	; () banked
  8277  003092  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8278                           
  8279                           ; BSR set to: 0
  8280                           ;vscp_firmware.c: 1088: if (k > 16)
  8281  003094  0E10               	movlw	16
  8282  003096  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8283  003098  D001               	goto	l11117
  8284  00309A  D004               	goto	l11121
  8285  00309C                     l11117:
  8286                           
  8287                           ; BSR set to: 0
  8288  00309C  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8289                           
  8290                           ; BSR set to: 0
  8291  00309E  0E07               	movlw	7
  8292  0030A0  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8293  0030A2  D7ED               	goto	l11109
  8294  0030A4                     l11121:
  8295                           
  8296                           ; BSR set to: 0
  8297                           ;vscp_firmware.c: 1090: }
  8298                           ;vscp_firmware.c: 1092: if (k > 16)
  8299  0030A4  0E10               	movlw	16
  8300  0030A6  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8301  0030A8  D001               	goto	l11125
  8302  0030AA  D007               	goto	l1222
  8303  0030AC                     l11125:
  8304                           
  8305                           ; BSR set to: 0
  8306                           ;vscp_firmware.c: 1095: vscp_sendEvent();
  8307  0030AC  EC68  F02E         	call	_vscp_sendEvent	;wreg free
  8308  0030B0  0100               	movlb	0	; () banked
  8309  0030B2  2B98               	incf	vscp_handleProtocolEvent@i_1021& (0+255),f,b
  8310                           
  8311                           ; BSR set to: 0
  8312  0030B4  0E02               	movlw	2
  8313  0030B6  6598               	cpfsgt	vscp_handleProtocolEvent@i_1021& (0+255),b
  8314  0030B8  D7E1               	goto	l1221
  8315  0030BA                     l1222:
  8316                           
  8317                           ; BSR set to: 0
  8318                           ;vscp_firmware.c: 1096: }
  8319                           ;vscp_firmware.c: 1098: for (j = 0; j < 5; j++)
  8320  0030BA  6B9A               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  8321  0030BC                     l11135:
  8322                           
  8323                           ; BSR set to: 0
  8324                           ;vscp_firmware.c: 1099: {
  8325                           ;vscp_firmware.c: 1100: if (vscp_getMDF_URL(j) > 0)
  8326  0030BC  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8327  0030BE  EC99  F02F         	call	_vscp_getMDF_URL
  8328  0030C2  0900               	iorlw	0
  8329  0030C4  E008               	bz	l11139
  8330                           
  8331                           ; BSR set to: 0
  8332                           ;vscp_firmware.c: 1101: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  8333  0030C6  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8334  0030C8  0FD4               	addlw	low (_vscp_omsg+9)
  8335  0030CA  6ED9               	movwf	fsr2l,c
  8336  0030CC  6ADA               	clrf	fsr2h,c
  8337  0030CE  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8338  0030D0  EC99  F02F         	call	_vscp_getMDF_URL
  8339  0030D4  D005               	goto	L8
  8340  0030D6                     l11139:
  8341                           
  8342                           ; BSR set to: 0
  8343                           ;vscp_firmware.c: 1102: else
  8344                           ;vscp_firmware.c: 1103: vscp_omsg.data[3 + j] = 0;
  8345  0030D6  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8346  0030D8  0FD4               	addlw	low (_vscp_omsg+9)
  8347  0030DA  6ED9               	movwf	fsr2l,c
  8348  0030DC  6ADA               	clrf	fsr2h,c
  8349  0030DE  0E00               	movlw	0
  8350  0030E0                     L8:
  8351  0030E0  6EDF               	movwf	indf2,c
  8352                           
  8353                           ; BSR set to: 0
  8354  0030E2  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8355                           
  8356                           ; BSR set to: 0
  8357  0030E4  0E04               	movlw	4
  8358  0030E6  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8359  0030E8  D7E9               	goto	l11135
  8360                           
  8361                           ; BSR set to: 0
  8362                           ;vscp_firmware.c: 1104: }
  8363                           ;vscp_firmware.c: 1106: vscp_sendEvent();
  8364  0030EA  EC68  F02E         	call	_vscp_sendEvent	;wreg free
  8365                           
  8366                           ;vscp_firmware.c: 1108: k = 5;
  8367  0030EE  0E05               	movlw	5
  8368  0030F0  0100               	movlb	0	; () banked
  8369  0030F2  6F93               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  8370                           
  8371                           ; BSR set to: 0
  8372                           ;vscp_firmware.c: 1109: for (i = 3; i < 7; i++)
  8373  0030F4  0E03               	movlw	3
  8374  0030F6  6F98               	movwf	vscp_handleProtocolEvent@i_1021& (0+255),b
  8375  0030F8                     l1231:
  8376                           
  8377                           ; BSR set to: 0
  8378                           ;vscp_firmware.c: 1110: {
  8379                           ;vscp_firmware.c: 1111: vscp_omsg.data[0] = i;
  8380                           
  8381                           ; BSR set to: 0
  8382                           ;vscp_firmware.c: 1113: for (j = 1; j < 8; j++) {
  8383  0030F8  D926               	call	PL84	;call to abstracted procedure
  8384  0030FA                     l11161:
  8385                           
  8386                           ; BSR set to: 0
  8387                           ;vscp_firmware.c: 1114: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  8388  0030FA  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8389  0030FC  0FD1               	addlw	low (_vscp_omsg+6)
  8390  0030FE  6ED9               	movwf	fsr2l,c
  8391  003100  6ADA               	clrf	fsr2h,c
  8392  003102  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8393  003104  EC99  F02F         	call	_vscp_getMDF_URL
  8394  003108  6EDF               	movwf	indf2,c
  8395                           
  8396                           ; BSR set to: 0
  8397  00310A  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8398                           
  8399                           ; BSR set to: 0
  8400  00310C  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8401                           
  8402                           ; BSR set to: 0
  8403  00310E  0E07               	movlw	7
  8404  003110  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8405  003112  D7F3               	goto	l11161
  8406                           
  8407                           ; BSR set to: 0
  8408                           ;vscp_firmware.c: 1115: }
  8409                           ;vscp_firmware.c: 1116: vscp_sendEvent();
  8410  003114  EC68  F02E         	call	_vscp_sendEvent	;wreg free
  8411  003118  0100               	movlb	0	; () banked
  8412  00311A  2B98               	incf	vscp_handleProtocolEvent@i_1021& (0+255),f,b
  8413                           
  8414                           ; BSR set to: 0
  8415  00311C  0E06               	movlw	6
  8416  00311E  6598               	cpfsgt	vscp_handleProtocolEvent@i_1021& (0+255),b
  8417  003120  D7EB               	goto	l1231
  8418  003122  0C06               	retlw	6
  8419  003124                     l11175:
  8420                           
  8421                           ; BSR set to: 0
  8422                           ;vscp_firmware.c: 1125: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8423  003124  51BB               	movf	_vscp_nickname& (0+255),w,b
  8424  003126  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  8425  00312A  62DF               	cpfseq	indf2,c
  8426  00312C  0012               	return	
  8427                           
  8428                           ; BSR set to: 0
  8429                           ;vscp_firmware.c: 1127: vscp_omsg.priority = 0x03;
  8430  00312E  0E03               	movlw	3
  8431  003130  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  8432                           
  8433                           ;vscp_firmware.c: 1128: vscp_omsg.flags = 0x80 + 7;
  8434  003132  0E87               	movlw	135
  8435  003134  6FCB               	movwf	_vscp_omsg& (0+255),b
  8436                           
  8437                           ; BSR set to: 0
  8438                           ;vscp_firmware.c: 1129: vscp_omsg.vscp_class = 0;
  8439  003136  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  8440  003138  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  8441                           
  8442                           ;vscp_firmware.c: 1130: vscp_omsg.vscp_type = 34;
  8443  00313A  0E22               	movlw	34
  8444  00313C  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  8445                           
  8446                           ; BSR set to: 0
  8447                           ;vscp_firmware.c: 1132: vscp_getMatrixInfo((char *) vscp_omsg.data);
  8448  00313E  0ED1               	movlw	(_vscp_omsg+6)& (0+255)
  8449  003140  ECB5  F02F         	call	_vscp_getMatrixInfo
  8450  003144  EF68  F02E         	goto	_vscp_sendEvent
  8451  003148                     l11185:
  8452                           
  8453                           ; BSR set to: 0
  8454                           ;vscp_firmware.c: 1148: if ( vscp_nickname == vscp_imsg.data[0] ) {
  8455  003148  51BB               	movf	_vscp_nickname& (0+255),w,b
  8456  00314A  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  8457  00314E  62DF               	cpfseq	indf2,c
  8458  003150  0012               	return	
  8459                           
  8460                           ; BSR set to: 0
  8461                           ;vscp_firmware.c: 1151: uint8_t byte = 0;
  8462  003152  6B95               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  8463                           
  8464                           ; BSR set to: 0
  8465                           ;vscp_firmware.c: 1152: uint8_t bytes_this_time, cb;
  8466                           ;vscp_firmware.c: 1156: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  8467  003154  C0BD  F07F         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  8468  003158  0E0F               	movlw	15
  8469  00315A  177F               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8470  00315C  0E04               	movlw	4
  8471  00315E  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8472  003160  E312               	bnc	l11201
  8473                           
  8474                           ; BSR set to: 0
  8475                           ;vscp_firmware.c: 1159: bytes = (uint16_t)vscp_imsg.data[4];
  8476  003162  C0C7  F096         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1025
  8477  003166  6B97               	clrf	(vscp_handleProtocolEvent@bytes_1025+1)& (0+255),b
  8478                           
  8479                           ; BSR set to: 0
  8480                           ;vscp_firmware.c: 1161: if (bytes == 0) bytes = 256;
  8481  003168  5197               	movf	(vscp_handleProtocolEvent@bytes_1025+1)& (0+255),w,b
  8482  00316A  1196               	iorwf	vscp_handleProtocolEvent@bytes_1025& (0+255),w,b
  8483  00316C  E103               	bnz	l11197
  8484                           
  8485                           ; BSR set to: 0
  8486  00316E  0E01               	movlw	1
  8487  003170  6F97               	movwf	(vscp_handleProtocolEvent@bytes_1025+1)& (0+255),b
  8488  003172  6B96               	clrf	vscp_handleProtocolEvent@bytes_1025& (0+255),b
  8489  003174                     l11197:
  8490                           
  8491                           ; BSR set to: 0
  8492                           ;vscp_firmware.c: 1163: if (bytes > 256) bytes = 256;
  8493  003174  0E01               	movlw	1
  8494  003176  5D96               	subwf	vscp_handleProtocolEvent@bytes_1025& (0+255),w,b
  8495  003178  0E01               	movlw	1
  8496  00317A  5997               	subwfb	(vscp_handleProtocolEvent@bytes_1025+1)& (0+255),w,b
  8497  00317C  E307               	bnc	l11203
  8498                           
  8499                           ; BSR set to: 0
  8500  00317E  0E01               	movlw	1
  8501  003180  6F97               	movwf	(vscp_handleProtocolEvent@bytes_1025+1)& (0+255),b
  8502  003182  0E00               	movlw	0
  8503  003184  D002               	goto	L9
  8504  003186                     l11201:
  8505                           
  8506                           ; BSR set to: 0
  8507                           ;vscp_firmware.c: 1165: else {
  8508                           ;vscp_firmware.c: 1166: bytes = 1;
  8509  003186  6B97               	clrf	(vscp_handleProtocolEvent@bytes_1025+1)& (0+255),b
  8510  003188  0E01               	movlw	1
  8511  00318A                     L9:
  8512  00318A  6F96               	movwf	vscp_handleProtocolEvent@bytes_1025& (0+255),b
  8513  00318C                     l11203:
  8514                           
  8515                           ; BSR set to: 0
  8516                           ;vscp_firmware.c: 1167: }
  8517                           ;vscp_firmware.c: 1170: page_save = vscp_page_select;
  8518  00318C  C046  F086         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  8519  003190  C047  F087         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  8520                           
  8521                           ; BSR set to: 0
  8522                           ;vscp_firmware.c: 1175: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  8523  003194  D8BB               	call	PL32	;call to abstracted procedure
  8524                           
  8525                           ; BSR set to: 0
  8526                           ;vscp_firmware.c: 1178: vscp_omsg.priority = 0x07;
  8527  003196  0E07               	movlw	7
  8528  003198  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  8529                           
  8530                           ; BSR set to: 0
  8531                           ;vscp_firmware.c: 1179: vscp_omsg.vscp_class = 0;
  8532                           
  8533                           ; BSR set to: 0
  8534                           ;vscp_firmware.c: 1180: vscp_omsg.vscp_type = 39;
  8535                           
  8536                           ; BSR set to: 0
  8537                           ;vscp_firmware.c: 1181: vscp_omsg.data[0] = 0;
  8538                           
  8539                           ; BSR set to: 0
  8540                           ;vscp_firmware.c: 1182: vscp_omsg.data[1] = vscp_imsg.data[1];
  8541                           
  8542                           ; BSR set to: 0
  8543                           ;vscp_firmware.c: 1183: vscp_omsg.data[2] = vscp_imsg.data[2];
  8544  00319A  D8C4               	call	PL48	;call to abstracted procedure
  8545  00319C                     l11219:
  8546                           
  8547                           ; BSR set to: 0
  8548                           ;vscp_firmware.c: 1187: if ( ( bytes - byte ) >= 4 ) {
  8549  00319C  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8550  00319E  5D96               	subwf	vscp_handleProtocolEvent@bytes_1025& (0+255),w,b
  8551  0031A0  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8552  0031A2  0E00               	movlw	0
  8553  0031A4  5997               	subwfb	(vscp_handleProtocolEvent@bytes_1025+1)& (0+255),w,b
  8554  0031A6  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8555  0031A8  0E04               	movlw	4
  8556  0031AA  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8557  0031AC  0E00               	movlw	0
  8558  0031AE  5980               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8559  0031B0  E302               	bnc	l11223
  8560                           
  8561                           ; BSR set to: 0
  8562                           ;vscp_firmware.c: 1188: bytes_this_time = 4;
  8563  0031B2  0E04               	movlw	4
  8564  0031B4  D002               	goto	L10
  8565  0031B6                     l11223:
  8566                           
  8567                           ; BSR set to: 0
  8568                           ;vscp_firmware.c: 1190: else {
  8569                           ;vscp_firmware.c: 1191: bytes_this_time = (bytes - byte);
  8570  0031B6  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8571  0031B8  5D96               	subwf	vscp_handleProtocolEvent@bytes_1025& (0+255),w,b
  8572  0031BA                     L10:
  8573  0031BA  6F90               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  8574                           
  8575                           ; BSR set to: 0
  8576                           ;vscp_firmware.c: 1192: }
  8577                           ;vscp_firmware.c: 1195: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  8578  0031BC  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8579  0031BE  0F84               	addlw	132
  8580  0031C0  6FCB               	movwf	_vscp_omsg& (0+255),b
  8581                           
  8582                           ;vscp_firmware.c: 1196: vscp_omsg.data[3] =
  8583                           ;vscp_firmware.c: 1197: vscp_imsg.data[3] + byte;
  8584  0031C2  51C6               	movf	(_vscp_imsg+9)& (0+255),w,b
  8585  0031C4  2595               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8586  0031C6  6FD4               	movwf	(_vscp_omsg+9)& (0+255),b
  8587                           
  8588                           ; BSR set to: 0
  8589                           ;vscp_firmware.c: 1200: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  8590  0031C8  6B91               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  8591  0031CA  D00E               	goto	l11231
  8592  0031CC                     l11227:
  8593                           
  8594                           ; BSR set to: 0
  8595                           ;vscp_firmware.c: 1201: vscp_omsg.data[ (4 + cb) ] =
  8596                           ;vscp_firmware.c: 1202: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  8597  0031CC  51C6               	movf	(_vscp_imsg+9)& (0+255),w,b
  8598  0031CE  2595               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8599  0031D0  2591               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8600  0031D2  ECDA  F02F         	call	_vscp_readRegister
  8601  0031D6  0100               	movlb	0	; () banked
  8602  0031D8  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8603  0031DA  5191               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8604  0031DC  0FD5               	addlw	low (_vscp_omsg+10)
  8605  0031DE  6ED9               	movwf	fsr2l,c
  8606  0031E0  6ADA               	clrf	fsr2h,c
  8607  0031E2  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8608                           
  8609                           ; BSR set to: 0
  8610  0031E6  2B91               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  8611  0031E8                     l11231:
  8612                           
  8613                           ; BSR set to: 0
  8614  0031E8  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8615  0031EA  5D91               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8616  0031EC  E3EF               	bnc	l11227
  8617                           
  8618                           ; BSR set to: 0
  8619                           ;vscp_firmware.c: 1203: }
  8620                           ;vscp_firmware.c: 1206: vscp_sendEvent();
  8621  0031EE  EC68  F02E         	call	_vscp_sendEvent	;wreg free
  8622                           
  8623                           ;vscp_firmware.c: 1209: byte += bytes_this_time;
  8624  0031F2  0100               	movlb	0	; () banked
  8625  0031F4  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8626  0031F6  2795               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  8627                           
  8628                           ; BSR set to: 0
  8629                           ;vscp_firmware.c: 1212: vscp_omsg.data[0] += 1;
  8630  0031F8  2BD1               	incf	(_vscp_omsg+6)& (0+255),f,b
  8631                           
  8632                           ; BSR set to: 0
  8633                           ;vscp_firmware.c: 1214: } while (byte < bytes);
  8634  0031FA  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8635  0031FC  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8636  0031FE  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8637  003200  5196               	movf	vscp_handleProtocolEvent@bytes_1025& (0+255),w,b
  8638  003202  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8639  003204  5197               	movf	(vscp_handleProtocolEvent@bytes_1025+1)& (0+255),w,b
  8640  003206  5980               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8641  003208  E3C9               	bnc	l11219
  8642                           
  8643                           ; BSR set to: 0
  8644                           ;vscp_firmware.c: 1217: vscp_page_select = page_save;
  8645  00320A  C086  F046         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  8646  00320E  C087  F047         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  8647  003212  0012               	return	
  8648  003214                     l11241:
  8649                           
  8650                           ; BSR set to: 0
  8651                           ;vscp_firmware.c: 1224: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  8652  003214  51BB               	movf	_vscp_nickname& (0+255),w,b
  8653  003216  EE20  F0C3         	lfsr	2,_vscp_imsg+6
  8654  00321A  62DF               	cpfseq	indf2,c
  8655  00321C  0012               	return	
  8656                           
  8657                           ; BSR set to: 0
  8658                           ;vscp_firmware.c: 1226: uint8_t i;
  8659                           ;vscp_firmware.c: 1227: uint16_t page_save;
  8660                           ;vscp_firmware.c: 1230: page_save = vscp_page_select;
  8661  00321E  C046  F088         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1030
  8662  003222  C047  F089         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1030+1
  8663                           
  8664                           ; BSR set to: 0
  8665                           ;vscp_firmware.c: 1234: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  8666  003226  D872               	call	PL32	;call to abstracted procedure
  8667                           
  8668                           ; BSR set to: 0
  8669                           ;vscp_firmware.c: 1236: for (i = vscp_imsg.data[ 3 ];
  8670  003228  C0C6  F092         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1029
  8671                           
  8672                           ;vscp_firmware.c: 1239: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  8673                           ;vscp_firmware.c: 1240: i++) {
  8674  00322C  D014               	goto	l11253
  8675  00322E                     l11249:
  8676                           
  8677                           ; BSR set to: 0
  8678                           ;vscp_firmware.c: 1241: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  8679                           ;vscp_firmware.c: 1242: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  8680  00322E  51C6               	movf	(_vscp_imsg+9)& (0+255),w,b
  8681  003230  08C7               	sublw	low (_vscp_imsg+10)
  8682  003232  2592               	addwf	vscp_handleProtocolEvent@i_1029& (0+255),w,b
  8683  003234  6ED9               	movwf	fsr2l,c
  8684  003236  6ADA               	clrf	fsr2h,c
  8685  003238  50DF               	movf	indf2,w,c
  8686  00323A  6E25               	movwf	?_vscp_writeRegister,c
  8687  00323C  5192               	movf	vscp_handleProtocolEvent@i_1029& (0+255),w,b
  8688  00323E  EC41  F02F         	call	_vscp_writeRegister
  8689  003242  0100               	movlb	0	; () banked
  8690  003244  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8691  003246  51C6               	movf	(_vscp_imsg+9)& (0+255),w,b
  8692  003248  08D5               	sublw	low (_vscp_omsg+10)
  8693  00324A  2592               	addwf	vscp_handleProtocolEvent@i_1029& (0+255),w,b
  8694  00324C  6ED9               	movwf	fsr2l,c
  8695  00324E  6ADA               	clrf	fsr2h,c
  8696  003250  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8697                           
  8698                           ; BSR set to: 0
  8699  003254  2B92               	incf	vscp_handleProtocolEvent@i_1029& (0+255),f,b
  8700  003256                     l11253:
  8701                           
  8702                           ; BSR set to: 0
  8703  003256  51BD               	movf	_vscp_imsg& (0+255),w,b
  8704  003258  0B0F               	andlw	15
  8705  00325A  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8706  00325C  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8707  00325E  51C6               	movf	(_vscp_imsg+9)& (0+255),w,b
  8708  003260  277F               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8709  003262  0E00               	movlw	0
  8710  003264  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8711  003266  0EFC               	movlw	252
  8712  003268  257F               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8713  00326A  6F81               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  8714  00326C  0EFF               	movlw	255
  8715  00326E  2180               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8716  003270  6F82               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  8717  003272  5192               	movf	vscp_handleProtocolEvent@i_1029& (0+255),w,b
  8718  003274  6F83               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  8719  003276  6B84               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  8720  003278  5184               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  8721  00327A  0A80               	xorlw	128
  8722  00327C  6F85               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  8723  00327E  5181               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  8724  003280  5D83               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  8725  003282  5182               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  8726  003284  0A80               	xorlw	128
  8727  003286  5985               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  8728  003288  E3D2               	bnc	l11249
  8729                           
  8730                           ; BSR set to: 0
  8731                           ;vscp_firmware.c: 1243: }
  8732                           ;vscp_firmware.c: 1246: vscp_page_select = page_save;
  8733  00328A  C088  F046         	movff	vscp_handleProtocolEvent@page_save_1030,_vscp_page_select
  8734  00328E  C089  F047         	movff	vscp_handleProtocolEvent@page_save_1030+1,_vscp_page_select+1
  8735                           
  8736                           ; BSR set to: 0
  8737                           ;vscp_firmware.c: 1248: vscp_omsg.priority = 0x07;
  8738  003292  0E07               	movlw	7
  8739  003294  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  8740                           
  8741                           ; BSR set to: 0
  8742                           ;vscp_firmware.c: 1249: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  8743  003296  51BD               	movf	_vscp_imsg& (0+255),w,b
  8744  003298  0B0F               	andlw	15
  8745  00329A  0F80               	addlw	128
  8746  00329C  6FCB               	movwf	_vscp_omsg& (0+255),b
  8747                           
  8748                           ; BSR set to: 0
  8749                           ;vscp_firmware.c: 1250: vscp_omsg.vscp_class = 0;
  8750                           
  8751                           ; BSR set to: 0
  8752                           ;vscp_firmware.c: 1251: vscp_omsg.vscp_type = 39;
  8753                           
  8754                           ; BSR set to: 0
  8755                           ;vscp_firmware.c: 1252: vscp_omsg.data[0] = 0;
  8756                           
  8757                           ; BSR set to: 0
  8758                           ;vscp_firmware.c: 1253: vscp_omsg.data[1] = vscp_imsg.data[1];
  8759                           
  8760                           ; BSR set to: 0
  8761                           ;vscp_firmware.c: 1254: vscp_omsg.data[2] = vscp_imsg.data[2];
  8762  00329E  D842               	call	PL48	;call to abstracted procedure
  8763                           
  8764                           ; BSR set to: 0
  8765                           ;vscp_firmware.c: 1255: vscp_omsg.data[3] = vscp_imsg.data[3];
  8766  0032A0  C0C6  F0D4         	movff	_vscp_imsg+9,_vscp_omsg+9
  8767  0032A4  EF68  F02E         	goto	_vscp_sendEvent
  8768  0032A8                     l11275:
  8769                           
  8770                           ; BSR set to: 0
  8771  0032A8  51C1               	movf	(_vscp_imsg+4)& (0+255),w,b
  8772                           
  8773                           ; Switch size 1, requested type "space"
  8774                           ; Number of cases is 16, Range of values is 1 to 38
  8775                           ; switch strategies available:
  8776                           ; Name         Instructions Cycles
  8777                           ; simple_byte           49    25 (average)
  8778                           ;	Chosen strategy is simple_byte
  8779  0032AA  0A01               	xorlw	1	; case 1
  8780  0032AC  E101 D542          	bz	l10857
  8781  0032B0  0A03               	xorlw	3	; case 2
  8782  0032B2  E101 D540          	bz	l10859
  8783  0032B6  0A04               	xorlw	4	; case 6
  8784  0032B8  E101 D53F          	bz	l10861
  8785  0032BC  0A0E               	xorlw	14	; case 8
  8786  0032BE  E101 D53E          	bz	l10863
  8787  0032C2  0A01               	xorlw	1	; case 9
  8788  0032C4  E101 D53D          	bz	l10865
  8789  0032C8  0A02               	xorlw	2	; case 11
  8790  0032CA  E101 D55C          	bz	l10899
  8791  0032CE  0A07               	xorlw	7	; case 12
  8792  0032D0  E101 D572          	bz	l10933
  8793  0032D4  0A1B               	xorlw	27	; case 23
  8794  0032D6  E101 D606          	bz	l10991
  8795  0032DA  0A0F               	xorlw	15	; case 24
  8796  0032DC  E101 D619          	bz	l10997
  8797  0032E0  0A01               	xorlw	1	; case 25
  8798  0032E2  E101 D66C          	bz	l11031
  8799  0032E6  0A04               	xorlw	4	; case 29
  8800  0032E8  E101 D698          	bz	l11057
  8801  0032EC  0A03               	xorlw	3	; case 30
  8802  0032EE  E101 D6A5          	bz	l11073
  8803  0032F2  0A01               	xorlw	1	; case 31
  8804  0032F4  E101 D6B2          	bz	l11089
  8805  0032F8  0A3E               	xorlw	62	; case 33
  8806  0032FA  E101 D713          	bz	l11175
  8807  0032FE  0A04               	xorlw	4	; case 37
  8808  003300  E101 D722          	bz	l11185
  8809  003304  0A03               	xorlw	3	; case 38
  8810  003306  A4D8               	btfss	status,2,c
  8811  003308  0012               	return	
  8812  00330A  D784               	goto	l11241
  8813  00330C                     __end_of_vscp_handleProtocolEvent:
  8814                           	opt stack 0
  8815  00330C                     PL32:
  8816                           	opt stack 22
  8817  00330C  51C5               	movf	(_vscp_imsg+8)& (0+255),w,b
  8818  00330E  C0C4  F07F         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8819  003312  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8820  003314  C07F  F080         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8821  003318  6B7F               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8822  00331A  117F               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8823  00331C  6E46               	movwf	_vscp_page_select,c
  8824  00331E  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8825  003320  6E47               	movwf	_vscp_page_select+1,c
  8826  003322  0012               	return	
  8827  003324                     __end_ofPL32:
  8828                           	opt stack 0
  8829  003324                     PL48:
  8830                           	opt stack 22
  8831  003324  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  8832  003326  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  8833  003328  0E27               	movlw	39
  8834  00332A  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  8835  00332C  6BD1               	clrf	(_vscp_omsg+6)& (0+255),b
  8836  00332E  C0C4  F0D2         	movff	_vscp_imsg+7,_vscp_omsg+7
  8837  003332  C0C5  F0D3         	movff	_vscp_imsg+8,_vscp_omsg+8
  8838  003336  0012               	return	
  8839  003338                     __end_ofPL48:
  8840                           	opt stack 0
  8841  003338                     PL70:
  8842                           	opt stack 22
  8843  003338  0E07               	movlw	7
  8844  00333A  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  8845  00333C  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  8846  00333E  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  8847  003340  0E1A               	movlw	26
  8848  003342  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  8849  003344  0C1A               	retlw	26
  8850  003346                     __end_ofPL70:
  8851                           	opt stack 0
  8852  003346                     PL84:
  8853                           	opt stack 22
  8854  003346  C098  F0D1         	movff	vscp_handleProtocolEvent@i_1021,_vscp_omsg+6
  8855  00334A  0E01               	movlw	1
  8856  00334C  6F9A               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8857  00334E  0C01               	retlw	1
  8858  003350                     __end_ofPL84:
  8859                           	opt stack 0
  8860                           tblptru	equ	0xFF8
  8861                           tblptrh	equ	0xFF7
  8862                           tblptrl	equ	0xFF6
  8863                           tablat	equ	0xFF5
  8864                           prodh	equ	0xFF4
  8865                           prodl	equ	0xFF3
  8866                           intcon	equ	0xFF2
  8867                           postinc0	equ	0xFEE
  8868                           wreg	equ	0xFE8
  8869                           indf1	equ	0xFE7
  8870                           postdec1	equ	0xFE5
  8871                           fsr1h	equ	0xFE2
  8872                           fsr1l	equ	0xFE1
  8873                           indf2	equ	0xFDF
  8874                           postinc2	equ	0xFDE
  8875                           postdec2	equ	0xFDD
  8876                           plusw2	equ	0xFDB
  8877                           fsr2h	equ	0xFDA
  8878                           fsr2l	equ	0xFD9
  8879                           status	equ	0xFD8
  8880                           
  8881 ;; *************** function ___lbmod *****************
  8882 ;; Defined at:
  8883 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/common/lbmod.c"
  8884 ;; Parameters:    Size  Location     Type
  8885 ;;  dividend        1    wreg     unsigned char 
  8886 ;;  divisor         1   13[COMRAM] unsigned char 
  8887 ;; Auto vars:     Size  Location     Type
  8888 ;;  dividend        1   14[COMRAM] unsigned char 
  8889 ;;  rem             1   16[COMRAM] unsigned char 
  8890 ;;  counter         1   15[COMRAM] unsigned char 
  8891 ;; Return value:  Size  Location     Type
  8892 ;;                  1    wreg      unsigned char 
  8893 ;; Registers used:
  8894 ;;		wreg, status,2, status,0
  8895 ;; Tracked objects:
  8896 ;;		On entry : F/0
  8897 ;;		On exit  : 0/0
  8898 ;;		Unchanged: 0/0
  8899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8900 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8901 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8903 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8904 ;;Total ram usage:        4 bytes
  8905 ;; Hardware stack levels used:    1
  8906 ;; Hardware stack levels required when called:    2
  8907 ;; This function calls:
  8908 ;;		Nothing
  8909 ;; This function is called by:
  8910 ;;		_vscp_handleProtocolEvent
  8911 ;; This function uses a non-reentrant model
  8912 ;;
  8913                           
  8914                           	psect	text34
  8915  005D7E                     __ptext34:
  8916                           	opt stack 0
  8917  005D7E                     ___lbmod:
  8918                           	opt stack 27
  8919                           
  8920                           ;incstack = 0
  8921                           ;incstack = 0
  8922                           ;___lbmod@dividend stored from wreg
  8923  005D7E  CFE8 F00F          	movff	wreg,___lbmod@dividend
  8924                           
  8925                           ; BSR set to: 0
  8926  005D82  0E08               	movlw	8
  8927  005D84  6E10               	movwf	___lbmod@counter,c
  8928                           
  8929                           ; BSR set to: 0
  8930  005D86  6A11               	clrf	___lbmod@rem,c
  8931  005D88                     l10331:
  8932  005D88  90D8               	bcf	status,0,c
  8933  005D8A  340F               	rlcf	___lbmod@dividend& (0+255),w,c
  8934  005D8C  3411               	rlcf	___lbmod@rem& (0+255),w,c
  8935  005D8E  6E11               	movwf	___lbmod@rem,c
  8936  005D90  90D8               	bcf	status,0,c
  8937  005D92  360F               	rlcf	___lbmod@dividend,f,c
  8938  005D94  500E               	movf	___lbmod@divisor,w,c
  8939  005D96  5C11               	subwf	___lbmod@rem,w,c
  8940  005D98  E302               	bnc	l10339
  8941  005D9A  500E               	movf	___lbmod@divisor,w,c
  8942  005D9C  5E11               	subwf	___lbmod@rem,f,c
  8943  005D9E                     l10339:
  8944  005D9E  2E10               	decfsz	___lbmod@counter,f,c
  8945  005DA0  D7F3               	goto	l10331
  8946  005DA2  5011               	movf	___lbmod@rem,w,c
  8947  005DA4  0012               	return	
  8948  005DA6                     __end_of___lbmod:
  8949                           	opt stack 0
  8950                           tblptru	equ	0xFF8
  8951                           tblptrh	equ	0xFF7
  8952                           tblptrl	equ	0xFF6
  8953                           tablat	equ	0xFF5
  8954                           prodh	equ	0xFF4
  8955                           prodl	equ	0xFF3
  8956                           intcon	equ	0xFF2
  8957                           postinc0	equ	0xFEE
  8958                           wreg	equ	0xFE8
  8959                           indf1	equ	0xFE7
  8960                           postdec1	equ	0xFE5
  8961                           fsr1h	equ	0xFE2
  8962                           fsr1l	equ	0xFE1
  8963                           indf2	equ	0xFDF
  8964                           postinc2	equ	0xFDE
  8965                           postdec2	equ	0xFDD
  8966                           plusw2	equ	0xFDB
  8967                           fsr2h	equ	0xFDA
  8968                           fsr2l	equ	0xFD9
  8969                           status	equ	0xFD8
  8970                           
  8971 ;; *************** function _vscp_writeRegister *****************
  8972 ;; Defined at:
  8973 ;;		line 690 in file "../../vscp_firmware/common/vscp_firmware.c"
  8974 ;; Parameters:    Size  Location     Type
  8975 ;;  reg             1    wreg     unsigned char 
  8976 ;;  value           1   36[COMRAM] unsigned char 
  8977 ;; Auto vars:     Size  Location     Type
  8978 ;;  reg             1   37[COMRAM] unsigned char 
  8979 ;; Return value:  Size  Location     Type
  8980 ;;                  1    wreg      unsigned char 
  8981 ;; Registers used:
  8982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8983 ;; Tracked objects:
  8984 ;;		On entry : F/0
  8985 ;;		On exit  : 0/0
  8986 ;;		Unchanged: 0/0
  8987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8988 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8989 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8991 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8992 ;;Total ram usage:        2 bytes
  8993 ;; Hardware stack levels used:    1
  8994 ;; Hardware stack levels required when called:    6
  8995 ;; This function calls:
  8996 ;;		_vscp_writeAppReg
  8997 ;;		_vscp_writeStdReg
  8998 ;; This function is called by:
  8999 ;;		_vscp_handleProtocolEvent
  9000 ;; This function uses a non-reentrant model
  9001 ;;
  9002                           
  9003                           	psect	text35
  9004  005E82                     __ptext35:
  9005                           	opt stack 0
  9006  005E82                     _vscp_writeRegister:
  9007                           	opt stack 23
  9008                           
  9009                           ;incstack = 0
  9010                           ;incstack = 0
  9011                           ;vscp_writeRegister@reg stored from wreg
  9012  005E82  CFE8 F026          	movff	wreg,vscp_writeRegister@reg
  9013                           
  9014                           ; BSR set to: 0
  9015                           ;vscp_firmware.c: 691: if (reg >= 0x80) {
  9016  005E86  0E7F               	movlw	127
  9017  005E88  6426               	cpfsgt	vscp_writeRegister@reg,c
  9018  005E8A  D005               	goto	l12873
  9019                           
  9020                           ; BSR set to: 0
  9021                           ;vscp_firmware.c: 692: return vscp_writeStdReg(reg, value);
  9022  005E8C  C025  F019         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  9023  005E90  5026               	movf	vscp_writeRegister@reg,w,c
  9024  005E92  EF8E  F024         	goto	_vscp_writeStdReg
  9025  005E96                     l12873:
  9026                           
  9027                           ; BSR set to: 0
  9028                           ;vscp_firmware.c: 694: else {
  9029                           ;vscp_firmware.c: 695: return vscp_writeAppReg(reg, value);
  9030  005E96  C025  F021         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  9031  005E9A  5026               	movf	vscp_writeRegister@reg,w,c
  9032  005E9C  EFB7  F007         	goto	_vscp_writeAppReg
  9033  005EA0                     __end_of_vscp_writeRegister:
  9034                           	opt stack 0
  9035                           tblptru	equ	0xFF8
  9036                           tblptrh	equ	0xFF7
  9037                           tblptrl	equ	0xFF6
  9038                           tablat	equ	0xFF5
  9039                           prodh	equ	0xFF4
  9040                           prodl	equ	0xFF3
  9041                           intcon	equ	0xFF2
  9042                           postinc0	equ	0xFEE
  9043                           wreg	equ	0xFE8
  9044                           indf1	equ	0xFE7
  9045                           postdec1	equ	0xFE5
  9046                           fsr1h	equ	0xFE2
  9047                           fsr1l	equ	0xFE1
  9048                           indf2	equ	0xFDF
  9049                           postinc2	equ	0xFDE
  9050                           postdec2	equ	0xFDD
  9051                           plusw2	equ	0xFDB
  9052                           fsr2h	equ	0xFDA
  9053                           fsr2l	equ	0xFD9
  9054                           status	equ	0xFD8
  9055                           
  9056 ;; *************** function _vscp_writeStdReg *****************
  9057 ;; Defined at:
  9058 ;;		line 704 in file "../../vscp_firmware/common/vscp_firmware.c"
  9059 ;; Parameters:    Size  Location     Type
  9060 ;;  reg             1    wreg     unsigned char 
  9061 ;;  value           1   24[COMRAM] unsigned char 
  9062 ;; Auto vars:     Size  Location     Type
  9063 ;;  reg             1   30[COMRAM] unsigned char 
  9064 ;;  rv              1   29[COMRAM] unsigned char 
  9065 ;; Return value:  Size  Location     Type
  9066 ;;                  1    wreg      unsigned char 
  9067 ;; Registers used:
  9068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9069 ;; Tracked objects:
  9070 ;;		On entry : F/0
  9071 ;;		On exit  : 0/0
  9072 ;;		Unchanged: 0/0
  9073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9074 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9075 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9076 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9077 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9078 ;;Total ram usage:        7 bytes
  9079 ;; Hardware stack levels used:    1
  9080 ;; Hardware stack levels required when called:    5
  9081 ;; This function calls:
  9082 ;;		_vscp_getGUID
  9083 ;;		_vscp_setGUID
  9084 ;;		_vscp_getUserID
  9085 ;;		_vscp_setUserID
  9086 ;;		_vscp_getManufacturerId
  9087 ;;		_vscp_setManufacturerId
  9088 ;;		_vscp_restoreDefaults
  9089 ;; This function is called by:
  9090 ;;		_vscp_writeRegister
  9091 ;;		_vscp_handleProtocolEvent
  9092 ;; This function uses a non-reentrant model
  9093 ;;
  9094                           
  9095                           	psect	text36
  9096  00491C                     __ptext36:
  9097                           	opt stack 0
  9098  00491C                     _vscp_writeStdReg:
  9099                           	opt stack 24
  9100                           
  9101                           ;incstack = 0
  9102                           ;incstack = 0
  9103                           ;vscp_writeStdReg@reg stored from wreg
  9104  00491C  CFE8 F01F          	movff	wreg,vscp_writeStdReg@reg
  9105                           
  9106                           ; BSR set to: 0
  9107                           ;vscp_firmware.c: 705: uint8_t rv = ~value;
  9108  004920  1C19               	comf	vscp_writeStdReg@value,w,c
  9109  004922  6E1E               	movwf	vscp_writeStdReg@rv,c
  9110                           
  9111                           ;vscp_firmware.c: 707: if ( reg == 0x83 ) {
  9112  004924  501F               	movf	vscp_writeStdReg@reg,w,c
  9113  004926  0A83               	xorlw	131
  9114  004928  E102               	bnz	l12881
  9115                           
  9116                           ; BSR set to: 0
  9117                           ;vscp_firmware.c: 708: rv = vscp_errorcnt = 0;
  9118  00492A  6A4B               	clrf	_vscp_errorcnt,c
  9119  00492C  D07E               	goto	l1162
  9120  00492E                     l12881:
  9121                           
  9122                           ; BSR set to: 0
  9123                           ;vscp_firmware.c: 710: else if ((reg >= (0x84)) &&
  9124                           ;vscp_firmware.c: 711: (reg < 0x89)) {
  9125  00492E  0E83               	movlw	131
  9126  004930  641F               	cpfsgt	vscp_writeStdReg@reg,c
  9127  004932  D00E               	goto	l12887
  9128                           
  9129                           ; BSR set to: 0
  9130  004934  0E89               	movlw	137
  9131  004936  601F               	cpfslt	vscp_writeStdReg@reg,c
  9132  004938  D00B               	goto	l12887
  9133                           
  9134                           ; BSR set to: 0
  9135                           ;vscp_firmware.c: 714: vscp_setUserID((reg - 0x84), value);
  9136  00493A  C019  F012         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  9137  00493E  501F               	movf	vscp_writeStdReg@reg,w,c
  9138  004940  0F7C               	addlw	124
  9139  004942  EC8B  F02F         	call	_vscp_setUserID
  9140                           
  9141                           ;vscp_firmware.c: 715: rv = vscp_getUserID((reg - 0x84));
  9142  004946  501F               	movf	vscp_writeStdReg@reg,w,c
  9143  004948  0F7C               	addlw	124
  9144  00494A  ECFA  F02F         	call	_vscp_getUserID
  9145  00494E  D06B               	goto	L16
  9146  004950                     l12887:
  9147                           
  9148                           ; BSR set to: 0
  9149                           ;vscp_firmware.c: 718: else if (0x92 == reg) {
  9150  004950  501F               	movf	vscp_writeStdReg@reg,w,c
  9151  004952  0A92               	xorlw	146
  9152  004954  E10D               	bnz	l12893
  9153                           
  9154                           ; BSR set to: 0
  9155                           ;vscp_firmware.c: 721: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  9156  004956  5019               	movf	vscp_writeStdReg@value,w,c
  9157  004958  6E1B               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9158  00495A  6A1A               	clrf	??_vscp_writeStdReg& (0+255),c
  9159  00495C  5046               	movf	_vscp_page_select,w,c
  9160  00495E  6E1C               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  9161  004960  6A1D               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  9162  004962  101A               	iorwf	??_vscp_writeStdReg,w,c
  9163  004964  6E46               	movwf	_vscp_page_select,c
  9164  004966  501B               	movf	??_vscp_writeStdReg+1,w,c
  9165  004968  101D               	iorwf	??_vscp_writeStdReg+3,w,c
  9166  00496A  6E47               	movwf	_vscp_page_select+1,c
  9167                           
  9168                           ; BSR set to: 0
  9169                           ;vscp_firmware.c: 722: rv = (vscp_page_select >> 8) & 0xff;
  9170  00496C  5047               	movf	_vscp_page_select+1,w,c
  9171  00496E  D05B               	goto	L16
  9172  004970                     l12893:
  9173                           
  9174                           ; BSR set to: 0
  9175                           ;vscp_firmware.c: 724: else if (0x93 == reg) {
  9176  004970  501F               	movf	vscp_writeStdReg@reg,w,c
  9177  004972  0A93               	xorlw	147
  9178  004974  E10B               	bnz	l12899
  9179                           
  9180                           ; BSR set to: 0
  9181                           ;vscp_firmware.c: 727: vscp_page_select = (vscp_page_select & 0xff00) | value;
  9182  004976  6A1A               	clrf	??_vscp_writeStdReg& (0+255),c
  9183  004978  5047               	movf	_vscp_page_select+1,w,c
  9184  00497A  6E1B               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9185  00497C  5019               	movf	vscp_writeStdReg@value,w,c
  9186  00497E  101A               	iorwf	??_vscp_writeStdReg,w,c
  9187  004980  6E46               	movwf	_vscp_page_select,c
  9188  004982  501B               	movf	??_vscp_writeStdReg+1,w,c
  9189  004984  6E47               	movwf	_vscp_page_select+1,c
  9190                           
  9191                           ; BSR set to: 0
  9192                           ;vscp_firmware.c: 728: rv = (vscp_page_select & 0xff);
  9193  004986  C046  F01E         	movff	_vscp_page_select,vscp_writeStdReg@rv
  9194                           
  9195                           ;vscp_firmware.c: 729: }
  9196  00498A  D050               	goto	l12941
  9197  00498C                     l12899:
  9198                           
  9199                           ; BSR set to: 0
  9200                           ;vscp_firmware.c: 734: else if ((reg > 0x88) && (reg < 0x91)) {
  9201  00498C  0E88               	movlw	136
  9202  00498E  641F               	cpfsgt	vscp_writeStdReg@reg,c
  9203  004990  D019               	goto	l12911
  9204                           
  9205                           ; BSR set to: 0
  9206  004992  0E91               	movlw	145
  9207  004994  601F               	cpfslt	vscp_writeStdReg@reg,c
  9208  004996  D016               	goto	l12911
  9209                           
  9210                           ; BSR set to: 0
  9211                           ;vscp_firmware.c: 736: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9212                           ;vscp_firmware.c: 737: (0xff != (vscp_page_select & 0xff))) {
  9213  004998  C047  F01A         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9214  00499C  C01A  F01B         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9215  0049A0  6A1C               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9216  0049A2  281B               	incf	??_vscp_writeStdReg+1,w,c
  9217  0049A4  E102               	bnz	l12907
  9218                           
  9219                           ; BSR set to: 0
  9220  0049A6  2846               	incf	_vscp_page_select,w,c
  9221  0049A8  E002               	bz	l12909
  9222  0049AA                     l12907:
  9223                           
  9224                           ; BSR set to: 0
  9225                           ;vscp_firmware.c: 739: rv = ~value;
  9226  0049AA  1C19               	comf	vscp_writeStdReg@value,w,c
  9227  0049AC  D03C               	goto	L16
  9228  0049AE                     l12909:
  9229                           
  9230                           ; BSR set to: 0
  9231                           ;vscp_firmware.c: 741: else {
  9232                           ;vscp_firmware.c: 743: vscp_setManufacturerId(reg - 0x89, value);
  9233  0049AE  C019  F012         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  9234  0049B2  501F               	movf	vscp_writeStdReg@reg,w,c
  9235  0049B4  0F77               	addlw	119
  9236  0049B6  EC7D  F02F         	call	_vscp_setManufacturerId
  9237                           
  9238                           ;vscp_firmware.c: 744: rv = vscp_getManufacturerId(reg - 0x89);
  9239  0049BA  501F               	movf	vscp_writeStdReg@reg,w,c
  9240  0049BC  0F77               	addlw	119
  9241  0049BE  ECF0  F02F         	call	_vscp_getManufacturerId
  9242  0049C2  D031               	goto	L16
  9243  0049C4                     l12911:
  9244                           
  9245                           ; BSR set to: 0
  9246                           ;vscp_firmware.c: 747: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  9247  0049C4  0ECF               	movlw	207
  9248  0049C6  641F               	cpfsgt	vscp_writeStdReg@reg,c
  9249  0049C8  D017               	goto	l12923
  9250                           
  9251                           ; BSR set to: 0
  9252  0049CA  0EE0               	movlw	224
  9253  0049CC  601F               	cpfslt	vscp_writeStdReg@reg,c
  9254  0049CE  D014               	goto	l12923
  9255                           
  9256                           ; BSR set to: 0
  9257                           ;vscp_firmware.c: 749: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9258                           ;vscp_firmware.c: 750: (0xff != (vscp_page_select & 0xff))) {
  9259  0049D0  C047  F01A         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9260  0049D4  C01A  F01B         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9261  0049D8  6A1C               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9262  0049DA  281B               	incf	??_vscp_writeStdReg+1,w,c
  9263  0049DC  E1E6               	bnz	l12907
  9264                           
  9265                           ; BSR set to: 0
  9266  0049DE  2846               	incf	_vscp_page_select,w,c
  9267  0049E0  E1E4               	bnz	l12907
  9268                           
  9269                           ; BSR set to: 0
  9270                           ;vscp_firmware.c: 754: else {
  9271                           ;vscp_firmware.c: 755: vscp_setGUID(reg - 0xD0, value);
  9272  0049E2  C019  F012         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  9273  0049E6  501F               	movf	vscp_writeStdReg@reg,w,c
  9274  0049E8  0F30               	addlw	48
  9275  0049EA  EC0B  F02F         	call	_vscp_setGUID
  9276                           
  9277                           ;vscp_firmware.c: 756: rv = vscp_getGUID(reg - 0xD0);
  9278  0049EE  501F               	movf	vscp_writeStdReg@reg,w,c
  9279  0049F0  0F30               	addlw	48
  9280  0049F2  EC04  F030         	call	_vscp_getGUID
  9281  0049F6  D017               	goto	L16
  9282  0049F8                     l12923:
  9283                           
  9284                           ; BSR set to: 0
  9285                           ;vscp_firmware.c: 760: else if ( 0xA2 == reg ) {
  9286  0049F8  501F               	movf	vscp_writeStdReg@reg,w,c
  9287  0049FA  0AA2               	xorlw	162
  9288  0049FC  E1D6               	bnz	l12907
  9289                           
  9290                           ; BSR set to: 0
  9291                           ;vscp_firmware.c: 761: if ( 0x55 == value ) {
  9292  0049FE  5019               	movf	vscp_writeStdReg@value,w,c
  9293  004A00  0A55               	xorlw	85
  9294  004A02  E105               	bnz	l12931
  9295                           
  9296                           ; BSR set to: 0
  9297                           ;vscp_firmware.c: 762: vscp_configtimer = 0;
  9298  004A04  0101               	movlb	1	; () banked
  9299  004A06  6B1C               	clrf	_vscp_configtimer& (0+255),b	;volatile
  9300  004A08  6B1D               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  9301                           
  9302                           ; BSR set to: 1
  9303                           ;vscp_firmware.c: 763: rv = 0x55;
  9304  004A0A  0E55               	movlw	85
  9305  004A0C  D00C               	goto	L16
  9306  004A0E                     l12931:
  9307                           
  9308                           ; BSR set to: 0
  9309                           ;vscp_firmware.c: 765: else if ( 0xaa == value ) {
  9310  004A0E  5019               	movf	vscp_writeStdReg@value,w,c
  9311  004A10  0AAA               	xorlw	170
  9312  004A12  E10C               	bnz	l12941
  9313                           
  9314                           ; BSR set to: 0
  9315                           ;vscp_firmware.c: 766: if ( vscp_configtimer < 1000 ) {
  9316  004A14  0EE8               	movlw	232
  9317  004A16  0101               	movlb	1	; () banked
  9318  004A18  5D1C               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  9319  004A1A  0E03               	movlw	3
  9320  004A1C  591D               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  9321  004A1E  E205               	bc	l1162
  9322                           
  9323                           ; BSR set to: 1
  9324                           ;vscp_firmware.c: 767: vscp_restoreDefaults();
  9325  004A20  EC39  F030         	call	_vscp_restoreDefaults	;wreg free
  9326                           
  9327                           ; BSR set to: 0
  9328                           ;vscp_firmware.c: 768: rv = 0xaa;
  9329  004A24  0EAA               	movlw	170
  9330  004A26                     L16:
  9331  004A26  6E1E               	movwf	vscp_writeStdReg@rv,c
  9332                           
  9333                           ;vscp_firmware.c: 769: }
  9334  004A28  D001               	goto	l12941
  9335  004A2A                     l1162:
  9336                           
  9337                           ; BSR set to: 1
  9338                           ;vscp_firmware.c: 770: else {
  9339                           ;vscp_firmware.c: 771: rv = 0;
  9340  004A2A  6A1E               	clrf	vscp_writeStdReg@rv,c
  9341  004A2C                     l12941:
  9342                           
  9343                           ;vscp_firmware.c: 779: }
  9344                           ;vscp_firmware.c: 781: return rv;
  9345  004A2C  501E               	movf	vscp_writeStdReg@rv,w,c
  9346  004A2E  0012               	return	
  9347  004A30                     __end_of_vscp_writeStdReg:
  9348                           	opt stack 0
  9349                           tblptru	equ	0xFF8
  9350                           tblptrh	equ	0xFF7
  9351                           tblptrl	equ	0xFF6
  9352                           tablat	equ	0xFF5
  9353                           prodh	equ	0xFF4
  9354                           prodl	equ	0xFF3
  9355                           intcon	equ	0xFF2
  9356                           postinc0	equ	0xFEE
  9357                           wreg	equ	0xFE8
  9358                           indf1	equ	0xFE7
  9359                           postdec1	equ	0xFE5
  9360                           fsr1h	equ	0xFE2
  9361                           fsr1l	equ	0xFE1
  9362                           indf2	equ	0xFDF
  9363                           postinc2	equ	0xFDE
  9364                           postdec2	equ	0xFDD
  9365                           plusw2	equ	0xFDB
  9366                           fsr2h	equ	0xFDA
  9367                           fsr2l	equ	0xFD9
  9368                           status	equ	0xFD8
  9369                           
  9370 ;; *************** function _vscp_restoreDefaults *****************
  9371 ;; Defined at:
  9372 ;;		line 2901 in file "../main.c"
  9373 ;; Parameters:    Size  Location     Type
  9374 ;;		None
  9375 ;; Auto vars:     Size  Location     Type
  9376 ;;		None
  9377 ;; Return value:  Size  Location     Type
  9378 ;;		None               void
  9379 ;; Registers used:
  9380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9381 ;; Tracked objects:
  9382 ;;		On entry : F/1
  9383 ;;		On exit  : F/0
  9384 ;;		Unchanged: 0/0
  9385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9390 ;;Total ram usage:        0 bytes
  9391 ;; Hardware stack levels used:    1
  9392 ;; Hardware stack levels required when called:    4
  9393 ;; This function calls:
  9394 ;;		_init_app_eeprom
  9395 ;;		_init_app_ram
  9396 ;; This function is called by:
  9397 ;;		_vscp_writeStdReg
  9398 ;; This function uses a non-reentrant model
  9399 ;;
  9400                           
  9401                           	psect	text37
  9402  006072                     __ptext37:
  9403                           	opt stack 0
  9404  006072                     _vscp_restoreDefaults:
  9405                           	opt stack 24
  9406                           
  9407                           ; BSR set to: 1
  9408                           ;main.c: 2902: init_app_eeprom();
  9409                           
  9410                           ;incstack = 0
  9411                           ;incstack = 0
  9412  006072  ECDD  F012         	call	_init_app_eeprom	;wreg free
  9413                           
  9414                           ;main.c: 2903: init_app_ram();
  9415  006076  EF6D  F02D         	goto	_init_app_ram	;wreg free
  9416  00607A                     __end_of_vscp_restoreDefaults:
  9417                           	opt stack 0
  9418                           tblptru	equ	0xFF8
  9419                           tblptrh	equ	0xFF7
  9420                           tblptrl	equ	0xFF6
  9421                           tablat	equ	0xFF5
  9422                           prodh	equ	0xFF4
  9423                           prodl	equ	0xFF3
  9424                           intcon	equ	0xFF2
  9425                           postinc0	equ	0xFEE
  9426                           wreg	equ	0xFE8
  9427                           indf1	equ	0xFE7
  9428                           postdec1	equ	0xFE5
  9429                           fsr1h	equ	0xFE2
  9430                           fsr1l	equ	0xFE1
  9431                           indf2	equ	0xFDF
  9432                           postinc2	equ	0xFDE
  9433                           postdec2	equ	0xFDD
  9434                           plusw2	equ	0xFDB
  9435                           fsr2h	equ	0xFDA
  9436                           fsr2l	equ	0xFD9
  9437                           status	equ	0xFD8
  9438                           
  9439 ;; *************** function _vscp_setManufacturerId *****************
  9440 ;; Defined at:
  9441 ;;		line 2705 in file "../main.c"
  9442 ;; Parameters:    Size  Location     Type
  9443 ;;  idx             1    wreg     unsigned char 
  9444 ;;  data            1   17[COMRAM] unsigned char 
  9445 ;; Auto vars:     Size  Location     Type
  9446 ;;  idx             1   18[COMRAM] unsigned char 
  9447 ;; Return value:  Size  Location     Type
  9448 ;;		None               void
  9449 ;; Registers used:
  9450 ;;		wreg, status,2, status,0, cstack
  9451 ;; Tracked objects:
  9452 ;;		On entry : F/0
  9453 ;;		On exit  : 0/0
  9454 ;;		Unchanged: 0/0
  9455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9456 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9457 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9459 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9460 ;;Total ram usage:        2 bytes
  9461 ;; Hardware stack levels used:    1
  9462 ;; Hardware stack levels required when called:    3
  9463 ;; This function calls:
  9464 ;;		_Busy_eep
  9465 ;;		_Write_b_eep
  9466 ;; This function is called by:
  9467 ;;		_vscp_writeStdReg
  9468 ;; This function uses a non-reentrant model
  9469 ;;
  9470                           
  9471                           	psect	text38
  9472  005EFA                     __ptext38:
  9473                           	opt stack 0
  9474  005EFA                     _vscp_setManufacturerId:
  9475                           	opt stack 25
  9476                           
  9477                           ; BSR set to: 0
  9478                           ;incstack = 0
  9479                           ;incstack = 0
  9480                           ;vscp_setManufacturerId@idx stored from wreg
  9481  005EFA  CFE8 F013          	movff	wreg,vscp_setManufacturerId@idx
  9482                           
  9483                           ; BSR set to: 0
  9484                           ;main.c: 2706: (Busy_eep(), Write_b_eep(0x0A + idx,data));
  9485  005EFE  EC3D  F030         	call	_Busy_eep	;wreg free
  9486  005F02  0E0A               	movlw	10
  9487  005F04  2413               	addwf	vscp_setManufacturerId@idx,w,c
  9488  005F06  6E0E               	movwf	?_Write_b_eep,c
  9489  005F08  6A0F               	clrf	?_Write_b_eep+1,c
  9490  005F0A  0E00               	movlw	0
  9491  005F0C  220F               	addwfc	?_Write_b_eep+1,f,c
  9492  005F0E  C012  F010         	movff	vscp_setManufacturerId@data,?_Write_b_eep+2
  9493  005F12  EFC8  F02D         	goto	_Write_b_eep	;wreg free
  9494  005F16                     __end_of_vscp_setManufacturerId:
  9495                           	opt stack 0
  9496                           tblptru	equ	0xFF8
  9497                           tblptrh	equ	0xFF7
  9498                           tblptrl	equ	0xFF6
  9499                           tablat	equ	0xFF5
  9500                           prodh	equ	0xFF4
  9501                           prodl	equ	0xFF3
  9502                           intcon	equ	0xFF2
  9503                           postinc0	equ	0xFEE
  9504                           wreg	equ	0xFE8
  9505                           indf1	equ	0xFE7
  9506                           postdec1	equ	0xFE5
  9507                           fsr1h	equ	0xFE2
  9508                           fsr1l	equ	0xFE1
  9509                           indf2	equ	0xFDF
  9510                           postinc2	equ	0xFDE
  9511                           postdec2	equ	0xFDD
  9512                           plusw2	equ	0xFDB
  9513                           fsr2h	equ	0xFDA
  9514                           fsr2l	equ	0xFD9
  9515                           status	equ	0xFD8
  9516                           
  9517 ;; *************** function _vscp_setUserID *****************
  9518 ;; Defined at:
  9519 ;;		line 2683 in file "../main.c"
  9520 ;; Parameters:    Size  Location     Type
  9521 ;;  idx             1    wreg     unsigned char 
  9522 ;;  data            1   17[COMRAM] unsigned char 
  9523 ;; Auto vars:     Size  Location     Type
  9524 ;;  idx             1   18[COMRAM] unsigned char 
  9525 ;; Return value:  Size  Location     Type
  9526 ;;		None               void
  9527 ;; Registers used:
  9528 ;;		wreg, status,2, status,0, cstack
  9529 ;; Tracked objects:
  9530 ;;		On entry : F/0
  9531 ;;		On exit  : 0/0
  9532 ;;		Unchanged: 0/0
  9533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9534 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9535 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9537 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9538 ;;Total ram usage:        2 bytes
  9539 ;; Hardware stack levels used:    1
  9540 ;; Hardware stack levels required when called:    3
  9541 ;; This function calls:
  9542 ;;		_Busy_eep
  9543 ;;		_Write_b_eep
  9544 ;; This function is called by:
  9545 ;;		_vscp_writeStdReg
  9546 ;; This function uses a non-reentrant model
  9547 ;;
  9548                           
  9549                           	psect	text39
  9550  005F16                     __ptext39:
  9551                           	opt stack 0
  9552  005F16                     _vscp_setUserID:
  9553                           	opt stack 25
  9554                           
  9555                           ;incstack = 0
  9556                           ;incstack = 0
  9557                           ;vscp_setUserID@idx stored from wreg
  9558  005F16  CFE8 F013          	movff	wreg,vscp_setUserID@idx
  9559                           
  9560                           ; BSR set to: 0
  9561                           ;main.c: 2684: (Busy_eep(), Write_b_eep(idx + 0x05,data));
  9562  005F1A  EC3D  F030         	call	_Busy_eep	;wreg free
  9563  005F1E  0E05               	movlw	5
  9564  005F20  2413               	addwf	vscp_setUserID@idx,w,c
  9565  005F22  6E0E               	movwf	?_Write_b_eep,c
  9566  005F24  6A0F               	clrf	?_Write_b_eep+1,c
  9567  005F26  0E00               	movlw	0
  9568  005F28  220F               	addwfc	?_Write_b_eep+1,f,c
  9569  005F2A  C012  F010         	movff	vscp_setUserID@data,?_Write_b_eep+2
  9570  005F2E  EFC8  F02D         	goto	_Write_b_eep	;wreg free
  9571  005F32                     __end_of_vscp_setUserID:
  9572                           	opt stack 0
  9573                           tblptru	equ	0xFF8
  9574                           tblptrh	equ	0xFF7
  9575                           tblptrl	equ	0xFF6
  9576                           tablat	equ	0xFF5
  9577                           prodh	equ	0xFF4
  9578                           prodl	equ	0xFF3
  9579                           intcon	equ	0xFF2
  9580                           postinc0	equ	0xFEE
  9581                           wreg	equ	0xFE8
  9582                           indf1	equ	0xFE7
  9583                           postdec1	equ	0xFE5
  9584                           fsr1h	equ	0xFE2
  9585                           fsr1l	equ	0xFE1
  9586                           indf2	equ	0xFDF
  9587                           postinc2	equ	0xFDE
  9588                           postdec2	equ	0xFDD
  9589                           plusw2	equ	0xFDB
  9590                           fsr2h	equ	0xFDA
  9591                           fsr2l	equ	0xFD9
  9592                           status	equ	0xFD8
  9593                           
  9594 ;; *************** function _vscp_setGUID *****************
  9595 ;; Defined at:
  9596 ;;		line 2652 in file "../main.c"
  9597 ;; Parameters:    Size  Location     Type
  9598 ;;  idx             1    wreg     unsigned char 
  9599 ;;  data            1   17[COMRAM] unsigned char 
  9600 ;; Auto vars:     Size  Location     Type
  9601 ;;  idx             1   18[COMRAM] unsigned char 
  9602 ;; Return value:  Size  Location     Type
  9603 ;;		None               void
  9604 ;; Registers used:
  9605 ;;		wreg, status,2, status,0, cstack
  9606 ;; Tracked objects:
  9607 ;;		On entry : F/0
  9608 ;;		On exit  : 0/0
  9609 ;;		Unchanged: 0/0
  9610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9611 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9612 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9614 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9615 ;;Total ram usage:        2 bytes
  9616 ;; Hardware stack levels used:    1
  9617 ;; Hardware stack levels required when called:    3
  9618 ;; This function calls:
  9619 ;;		_Busy_eep
  9620 ;;		_Write_b_eep
  9621 ;; This function is called by:
  9622 ;;		_vscp_writeStdReg
  9623 ;; This function uses a non-reentrant model
  9624 ;;
  9625                           
  9626                           	psect	text40
  9627  005E16                     __ptext40:
  9628                           	opt stack 0
  9629  005E16                     _vscp_setGUID:
  9630                           	opt stack 25
  9631                           
  9632                           ;incstack = 0
  9633                           ;incstack = 0
  9634                           ;vscp_setGUID@idx stored from wreg
  9635  005E16  CFE8 F013          	movff	wreg,vscp_setGUID@idx
  9636                           
  9637                           ; BSR set to: 0
  9638                           ;main.c: 2653: if ( idx>15 ) return;
  9639  005E1A  0E0F               	movlw	15
  9640  005E1C  6413               	cpfsgt	vscp_setGUID@idx,c
  9641  005E1E  D001               	goto	l9231
  9642  005E20  0C0F               	retlw	15
  9643  005E22                     l9231:
  9644                           
  9645                           ; BSR set to: 0
  9646                           ;main.c: 2654: (Busy_eep(), Write_b_eep(0x12 + idx,data));
  9647  005E22  EC3D  F030         	call	_Busy_eep	;wreg free
  9648  005E26  0E12               	movlw	18
  9649  005E28  2413               	addwf	vscp_setGUID@idx,w,c
  9650  005E2A  6E0E               	movwf	?_Write_b_eep,c
  9651  005E2C  6A0F               	clrf	?_Write_b_eep+1,c
  9652  005E2E  0E00               	movlw	0
  9653  005E30  220F               	addwfc	?_Write_b_eep+1,f,c
  9654  005E32  C012  F010         	movff	vscp_setGUID@data,?_Write_b_eep+2
  9655  005E36  EFC8  F02D         	goto	_Write_b_eep	;wreg free
  9656  005E3A                     __end_of_vscp_setGUID:
  9657                           	opt stack 0
  9658                           tblptru	equ	0xFF8
  9659                           tblptrh	equ	0xFF7
  9660                           tblptrl	equ	0xFF6
  9661                           tablat	equ	0xFF5
  9662                           prodh	equ	0xFF4
  9663                           prodl	equ	0xFF3
  9664                           intcon	equ	0xFF2
  9665                           postinc0	equ	0xFEE
  9666                           wreg	equ	0xFE8
  9667                           indf1	equ	0xFE7
  9668                           postdec1	equ	0xFE5
  9669                           fsr1h	equ	0xFE2
  9670                           fsr1l	equ	0xFE1
  9671                           indf2	equ	0xFDF
  9672                           postinc2	equ	0xFDE
  9673                           postdec2	equ	0xFDD
  9674                           plusw2	equ	0xFDB
  9675                           fsr2h	equ	0xFDA
  9676                           fsr2l	equ	0xFD9
  9677                           status	equ	0xFD8
  9678                           
  9679 ;; *************** function _vscp_writeAppReg *****************
  9680 ;; Defined at:
  9681 ;;		line 1943 in file "../main.c"
  9682 ;; Parameters:    Size  Location     Type
  9683 ;;  reg             1    wreg     unsigned char 
  9684 ;;  val             1   32[COMRAM] unsigned char 
  9685 ;; Auto vars:     Size  Location     Type
  9686 ;;  reg             1   34[COMRAM] unsigned char 
  9687 ;;  pos             1   33[COMRAM] unsigned char 
  9688 ;;  rv              1   35[COMRAM] unsigned char 
  9689 ;; Return value:  Size  Location     Type
  9690 ;;                  1    wreg      unsigned char 
  9691 ;; Registers used:
  9692 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9693 ;; Tracked objects:
  9694 ;;		On entry : F/0
  9695 ;;		On exit  : 0/0
  9696 ;;		Unchanged: 0/0
  9697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9698 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9699 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9701 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9702 ;;Total ram usage:        4 bytes
  9703 ;; Hardware stack levels used:    1
  9704 ;; Hardware stack levels required when called:    4
  9705 ;; This function calls:
  9706 ;;		_Busy_eep
  9707 ;;		_Write_b_eep
  9708 ;;		_Read_b_eep
  9709 ;;		_writeCoeffs2Ram
  9710 ;; This function is called by:
  9711 ;;		_vscp_writeRegister
  9712 ;;		_vscp_handleProtocolEvent
  9713 ;; This function uses a non-reentrant model
  9714 ;;
  9715                           
  9716                           	psect	text41
  9717  000F6E                     __ptext41:
  9718                           	opt stack 0
  9719  000F6E                     _vscp_writeAppReg:
  9720                           	opt stack 24
  9721                           
  9722                           ;incstack = 0
  9723                           ;incstack = 0
  9724                           ;vscp_writeAppReg@reg stored from wreg
  9725  000F6E  CFE8 F023          	movff	wreg,vscp_writeAppReg@reg
  9726                           
  9727                           ; BSR set to: 0
  9728                           ;main.c: 1944: uint8_t rv;
  9729                           ;main.c: 1951: rv = ~val;
  9730  000F72  1C21               	comf	vscp_writeAppReg@val,w,c
  9731  000F74  6E24               	movwf	vscp_writeAppReg@rv,c
  9732                           
  9733                           ;main.c: 1953: if (0 == vscp_page_select) {
  9734  000F76  5047               	movf	_vscp_page_select+1,w,c
  9735  000F78  1046               	iorwf	_vscp_page_select,w,c
  9736  000F7A  E102 EF7A  F00D    	bz	l12521
  9737  000F80  EFC0  F00E         	goto	l12523
  9738  000F84                     l11955:
  9739                           
  9740                           ; BSR set to: 0
  9741                           ;main.c: 1959: (Busy_eep(), Write_b_eep(0x41,val));
  9742  000F84  EC3D  F030         	call	_Busy_eep	;wreg free
  9743  000F88  6A0F               	clrf	?_Write_b_eep+1,c
  9744  000F8A  0E41               	movlw	65
  9745  000F8C  6E0E               	movwf	?_Write_b_eep,c
  9746  000F8E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9747  000F92  ECC8  F02D         	call	_Write_b_eep	;wreg free
  9748                           
  9749                           ;main.c: 1960: rv = Read_b_eep(0x41);
  9750  000F96  6A17               	clrf	?_Read_b_eep+1,c
  9751  000F98  0E41               	movlw	65
  9752  000F9A  6E16               	movwf	?_Read_b_eep,c
  9753  000F9C  ECC2  F02F         	call	_Read_b_eep	;wreg free
  9754  000FA0  EFFC  F00E         	goto	L17
  9755  000FA4                     l11961:
  9756                           
  9757                           ; BSR set to: 0
  9758                           ;main.c: 1965: (Busy_eep(), Write_b_eep(0x42,val));
  9759  000FA4  EC3D  F030         	call	_Busy_eep	;wreg free
  9760  000FA8  6A0F               	clrf	?_Write_b_eep+1,c
  9761  000FAA  0E42               	movlw	66
  9762  000FAC  6E0E               	movwf	?_Write_b_eep,c
  9763  000FAE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9764  000FB2  ECC8  F02D         	call	_Write_b_eep	;wreg free
  9765                           
  9766                           ;main.c: 1966: rv = Read_b_eep(0x42);
  9767  000FB6  6A17               	clrf	?_Read_b_eep+1,c
  9768  000FB8  0E42               	movlw	66
  9769  000FBA  6E16               	movwf	?_Read_b_eep,c
  9770  000FBC  ECC2  F02F         	call	_Read_b_eep	;wreg free
  9771  000FC0  EFFC  F00E         	goto	L17
  9772  000FC4                     l11967:
  9773                           
  9774                           ; BSR set to: 0
  9775                           ;main.c: 1975: (Busy_eep(), Write_b_eep(0x43,val));
  9776  000FC4  EC3D  F030         	call	_Busy_eep	;wreg free
  9777  000FC8  6A0F               	clrf	?_Write_b_eep+1,c
  9778  000FCA  0E43               	movlw	67
  9779  000FCC  6E0E               	movwf	?_Write_b_eep,c
  9780  000FCE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9781  000FD2  ECC8  F02D         	call	_Write_b_eep	;wreg free
  9782                           
  9783                           ;main.c: 1976: rv = Read_b_eep(0x43);
  9784  000FD6  6A17               	clrf	?_Read_b_eep+1,c
  9785  000FD8  0E43               	movlw	67
  9786  000FDA  6E16               	movwf	?_Read_b_eep,c
  9787  000FDC  ECC2  F02F         	call	_Read_b_eep	;wreg free
  9788  000FE0  EFFC  F00E         	goto	L17
  9789  000FE4                     l11973:
  9790                           
  9791                           ; BSR set to: 0
  9792                           ;main.c: 1981: (Busy_eep(), Write_b_eep(0x44,val));
  9793  000FE4  EC3D  F030         	call	_Busy_eep	;wreg free
  9794  000FE8  6A0F               	clrf	?_Write_b_eep+1,c
  9795  000FEA  0E44               	movlw	68
  9796  000FEC  6E0E               	movwf	?_Write_b_eep,c
  9797  000FEE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9798  000FF2  ECC8  F02D         	call	_Write_b_eep	;wreg free
  9799                           
  9800                           ;main.c: 1982: rv = Read_b_eep(0x44);
  9801  000FF6  6A17               	clrf	?_Read_b_eep+1,c
  9802  000FF8  0E44               	movlw	68
  9803  000FFA  6E16               	movwf	?_Read_b_eep,c
  9804  000FFC  ECC2  F02F         	call	_Read_b_eep	;wreg free
  9805  001000  EFFC  F00E         	goto	L17
  9806  001004                     l11979:
  9807                           
  9808                           ; BSR set to: 0
  9809                           ;main.c: 1987: (Busy_eep(), Write_b_eep(0x45,val));
  9810  001004  EC3D  F030         	call	_Busy_eep	;wreg free
  9811  001008  6A0F               	clrf	?_Write_b_eep+1,c
  9812  00100A  0E45               	movlw	69
  9813  00100C  6E0E               	movwf	?_Write_b_eep,c
  9814  00100E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9815  001012  ECC8  F02D         	call	_Write_b_eep	;wreg free
  9816                           
  9817                           ;main.c: 1988: rv = Read_b_eep(0x45);
  9818  001016  6A17               	clrf	?_Read_b_eep+1,c
  9819  001018  0E45               	movlw	69
  9820  00101A  6E16               	movwf	?_Read_b_eep,c
  9821  00101C  ECC2  F02F         	call	_Read_b_eep	;wreg free
  9822  001020  EFFC  F00E         	goto	L17
  9823  001024                     l11985:
  9824                           
  9825                           ; BSR set to: 0
  9826                           ;main.c: 1993: (Busy_eep(), Write_b_eep(0x46,val));
  9827  001024  EC3D  F030         	call	_Busy_eep	;wreg free
  9828  001028  6A0F               	clrf	?_Write_b_eep+1,c
  9829  00102A  0E46               	movlw	70
  9830  00102C  6E0E               	movwf	?_Write_b_eep,c
  9831  00102E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9832  001032  ECC8  F02D         	call	_Write_b_eep	;wreg free
  9833                           
  9834                           ;main.c: 1994: rv = Read_b_eep(0x46);
  9835  001036  6A17               	clrf	?_Read_b_eep+1,c
  9836  001038  0E46               	movlw	70
  9837  00103A  6E16               	movwf	?_Read_b_eep,c
  9838  00103C  ECC2  F02F         	call	_Read_b_eep	;wreg free
  9839  001040  EFFC  F00E         	goto	L17
  9840  001044                     l11991:
  9841                           
  9842                           ; BSR set to: 0
  9843                           ;main.c: 1999: (Busy_eep(), Write_b_eep(0x47,val));
  9844  001044  EC3D  F030         	call	_Busy_eep	;wreg free
  9845  001048  6A0F               	clrf	?_Write_b_eep+1,c
  9846  00104A  0E47               	movlw	71
  9847  00104C  6E0E               	movwf	?_Write_b_eep,c
  9848  00104E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9849  001052  ECC8  F02D         	call	_Write_b_eep	;wreg free
  9850                           
  9851                           ;main.c: 2000: rv = Read_b_eep(0x47);
  9852  001056  6A17               	clrf	?_Read_b_eep+1,c
  9853  001058  0E47               	movlw	71
  9854  00105A  6E16               	movwf	?_Read_b_eep,c
  9855  00105C  ECC2  F02F         	call	_Read_b_eep	;wreg free
  9856  001060  EFFC  F00E         	goto	L17
  9857  001064                     l11997:
  9858                           
  9859                           ; BSR set to: 0
  9860                           ;main.c: 2005: (Busy_eep(), Write_b_eep(0x48,val));
  9861  001064  EC3D  F030         	call	_Busy_eep	;wreg free
  9862  001068  6A0F               	clrf	?_Write_b_eep+1,c
  9863  00106A  0E48               	movlw	72
  9864  00106C  6E0E               	movwf	?_Write_b_eep,c
  9865  00106E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9866  001072  ECC8  F02D         	call	_Write_b_eep	;wreg free
  9867                           
  9868                           ;main.c: 2006: rv = Read_b_eep(0x48);
  9869  001076  6A17               	clrf	?_Read_b_eep+1,c
  9870  001078  0E48               	movlw	72
  9871  00107A  6E16               	movwf	?_Read_b_eep,c
  9872  00107C  ECC2  F02F         	call	_Read_b_eep	;wreg free
  9873  001080  EFFC  F00E         	goto	L17
  9874  001084                     l12003:
  9875                           
  9876                           ; BSR set to: 0
  9877                           ;main.c: 2015: (Busy_eep(), Write_b_eep(0x49,val));
  9878  001084  EC3D  F030         	call	_Busy_eep	;wreg free
  9879  001088  6A0F               	clrf	?_Write_b_eep+1,c
  9880  00108A  0E49               	movlw	73
  9881  00108C  6E0E               	movwf	?_Write_b_eep,c
  9882  00108E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9883  001092  ECC8  F02D         	call	_Write_b_eep	;wreg free
  9884                           
  9885                           ;main.c: 2016: rv = Read_b_eep(0x49);
  9886  001096  6A17               	clrf	?_Read_b_eep+1,c
  9887  001098  0E49               	movlw	73
  9888  00109A  6E16               	movwf	?_Read_b_eep,c
  9889  00109C  ECC2  F02F         	call	_Read_b_eep	;wreg free
  9890  0010A0  EFFC  F00E         	goto	L17
  9891  0010A4                     l12009:
  9892                           
  9893                           ; BSR set to: 0
  9894                           ;main.c: 2021: (Busy_eep(), Write_b_eep(0x4A,val));
  9895  0010A4  EC3D  F030         	call	_Busy_eep	;wreg free
  9896  0010A8  6A0F               	clrf	?_Write_b_eep+1,c
  9897  0010AA  0E4A               	movlw	74
  9898  0010AC  6E0E               	movwf	?_Write_b_eep,c
  9899  0010AE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9900  0010B2  ECC8  F02D         	call	_Write_b_eep	;wreg free
  9901                           
  9902                           ;main.c: 2022: rv = Read_b_eep(0x4A);
  9903  0010B6  6A17               	clrf	?_Read_b_eep+1,c
  9904  0010B8  0E4A               	movlw	74
  9905  0010BA  6E16               	movwf	?_Read_b_eep,c
  9906  0010BC  ECC2  F02F         	call	_Read_b_eep	;wreg free
  9907  0010C0  EFFC  F00E         	goto	L17
  9908  0010C4                     l12015:
  9909                           
  9910                           ; BSR set to: 0
  9911                           ;main.c: 2027: (Busy_eep(), Write_b_eep(0x4B,val));
  9912  0010C4  EC3D  F030         	call	_Busy_eep	;wreg free
  9913  0010C8  6A0F               	clrf	?_Write_b_eep+1,c
  9914  0010CA  0E4B               	movlw	75
  9915  0010CC  6E0E               	movwf	?_Write_b_eep,c
  9916  0010CE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9917  0010D2  ECC8  F02D         	call	_Write_b_eep	;wreg free
  9918                           
  9919                           ;main.c: 2028: rv = Read_b_eep(0x4B);
  9920  0010D6  6A17               	clrf	?_Read_b_eep+1,c
  9921  0010D8  0E4B               	movlw	75
  9922  0010DA  6E16               	movwf	?_Read_b_eep,c
  9923  0010DC  ECC2  F02F         	call	_Read_b_eep	;wreg free
  9924  0010E0  EFFC  F00E         	goto	L17
  9925  0010E4                     l12021:
  9926                           
  9927                           ; BSR set to: 0
  9928                           ;main.c: 2033: (Busy_eep(), Write_b_eep(0x4C,val));
  9929  0010E4  EC3D  F030         	call	_Busy_eep	;wreg free
  9930  0010E8  6A0F               	clrf	?_Write_b_eep+1,c
  9931  0010EA  0E4C               	movlw	76
  9932  0010EC  6E0E               	movwf	?_Write_b_eep,c
  9933  0010EE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9934  0010F2  ECC8  F02D         	call	_Write_b_eep	;wreg free
  9935                           
  9936                           ;main.c: 2034: rv = Read_b_eep(0x4C);
  9937  0010F6  6A17               	clrf	?_Read_b_eep+1,c
  9938  0010F8  0E4C               	movlw	76
  9939  0010FA  6E16               	movwf	?_Read_b_eep,c
  9940  0010FC  ECC2  F02F         	call	_Read_b_eep	;wreg free
  9941  001100  EFFC  F00E         	goto	L17
  9942  001104                     l12027:
  9943                           
  9944                           ; BSR set to: 0
  9945                           ;main.c: 2039: (Busy_eep(), Write_b_eep(0x4D,val));
  9946  001104  EC3D  F030         	call	_Busy_eep	;wreg free
  9947  001108  6A0F               	clrf	?_Write_b_eep+1,c
  9948  00110A  0E4D               	movlw	77
  9949  00110C  6E0E               	movwf	?_Write_b_eep,c
  9950  00110E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9951  001112  ECC8  F02D         	call	_Write_b_eep	;wreg free
  9952                           
  9953                           ;main.c: 2040: rv = Read_b_eep(0x4D);
  9954  001116  6A17               	clrf	?_Read_b_eep+1,c
  9955  001118  0E4D               	movlw	77
  9956  00111A  6E16               	movwf	?_Read_b_eep,c
  9957  00111C  ECC2  F02F         	call	_Read_b_eep	;wreg free
  9958  001120  EFFC  F00E         	goto	L17
  9959  001124                     l12033:
  9960                           
  9961                           ; BSR set to: 0
  9962                           ;main.c: 2045: (Busy_eep(), Write_b_eep(0x4E,val));
  9963  001124  EC3D  F030         	call	_Busy_eep	;wreg free
  9964  001128  6A0F               	clrf	?_Write_b_eep+1,c
  9965  00112A  0E4E               	movlw	78
  9966  00112C  6E0E               	movwf	?_Write_b_eep,c
  9967  00112E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9968  001132  ECC8  F02D         	call	_Write_b_eep	;wreg free
  9969                           
  9970                           ;main.c: 2046: rv = Read_b_eep(0x4E);
  9971  001136  6A17               	clrf	?_Read_b_eep+1,c
  9972  001138  0E4E               	movlw	78
  9973  00113A  6E16               	movwf	?_Read_b_eep,c
  9974  00113C  ECC2  F02F         	call	_Read_b_eep	;wreg free
  9975  001140  EFFC  F00E         	goto	L17
  9976  001144                     l12039:
  9977                           
  9978                           ; BSR set to: 0
  9979                           ;main.c: 2055: (Busy_eep(), Write_b_eep(0x4F,val));
  9980  001144  EC3D  F030         	call	_Busy_eep	;wreg free
  9981  001148  6A0F               	clrf	?_Write_b_eep+1,c
  9982  00114A  0E4F               	movlw	79
  9983  00114C  6E0E               	movwf	?_Write_b_eep,c
  9984  00114E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  9985  001152  ECC8  F02D         	call	_Write_b_eep	;wreg free
  9986                           
  9987                           ;main.c: 2056: rv = Read_b_eep(0x4F);
  9988  001156  6A17               	clrf	?_Read_b_eep+1,c
  9989  001158  0E4F               	movlw	79
  9990  00115A  6E16               	movwf	?_Read_b_eep,c
  9991  00115C  ECC2  F02F         	call	_Read_b_eep	;wreg free
  9992  001160  EFFC  F00E         	goto	L17
  9993  001164                     l12045:
  9994                           
  9995                           ; BSR set to: 0
  9996                           ;main.c: 2061: (Busy_eep(), Write_b_eep(0x50,val));
  9997  001164  EC3D  F030         	call	_Busy_eep	;wreg free
  9998  001168  6A0F               	clrf	?_Write_b_eep+1,c
  9999  00116A  0E50               	movlw	80
 10000  00116C  6E0E               	movwf	?_Write_b_eep,c
 10001  00116E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10002  001172  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10003                           
 10004                           ;main.c: 2062: rv = Read_b_eep(0x50);
 10005  001176  6A17               	clrf	?_Read_b_eep+1,c
 10006  001178  0E50               	movlw	80
 10007  00117A  6E16               	movwf	?_Read_b_eep,c
 10008  00117C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10009  001180  EFFC  F00E         	goto	L17
 10010  001184                     l12051:
 10011                           
 10012                           ; BSR set to: 0
 10013                           ;main.c: 2067: (Busy_eep(), Write_b_eep(0x51,val));
 10014  001184  EC3D  F030         	call	_Busy_eep	;wreg free
 10015  001188  6A0F               	clrf	?_Write_b_eep+1,c
 10016  00118A  0E51               	movlw	81
 10017  00118C  6E0E               	movwf	?_Write_b_eep,c
 10018  00118E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10019  001192  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10020                           
 10021                           ;main.c: 2068: rv = Read_b_eep(0x51);
 10022  001196  6A17               	clrf	?_Read_b_eep+1,c
 10023  001198  0E51               	movlw	81
 10024  00119A  6E16               	movwf	?_Read_b_eep,c
 10025  00119C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10026  0011A0  EFFC  F00E         	goto	L17
 10027  0011A4                     l12057:
 10028                           
 10029                           ; BSR set to: 0
 10030                           ;main.c: 2073: (Busy_eep(), Write_b_eep(0x52,val));
 10031  0011A4  EC3D  F030         	call	_Busy_eep	;wreg free
 10032  0011A8  6A0F               	clrf	?_Write_b_eep+1,c
 10033  0011AA  0E52               	movlw	82
 10034  0011AC  6E0E               	movwf	?_Write_b_eep,c
 10035  0011AE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10036  0011B2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10037                           
 10038                           ;main.c: 2074: rv = Read_b_eep(0x52);
 10039  0011B6  6A17               	clrf	?_Read_b_eep+1,c
 10040  0011B8  0E52               	movlw	82
 10041  0011BA  6E16               	movwf	?_Read_b_eep,c
 10042  0011BC  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10043  0011C0  EFFC  F00E         	goto	L17
 10044  0011C4                     l12063:
 10045                           
 10046                           ; BSR set to: 0
 10047                           ;main.c: 2079: (Busy_eep(), Write_b_eep(0x53,val));
 10048  0011C4  EC3D  F030         	call	_Busy_eep	;wreg free
 10049  0011C8  6A0F               	clrf	?_Write_b_eep+1,c
 10050  0011CA  0E53               	movlw	83
 10051  0011CC  6E0E               	movwf	?_Write_b_eep,c
 10052  0011CE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10053  0011D2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10054                           
 10055                           ;main.c: 2080: rv = Read_b_eep(0x53);
 10056  0011D6  6A17               	clrf	?_Read_b_eep+1,c
 10057  0011D8  0E53               	movlw	83
 10058  0011DA  6E16               	movwf	?_Read_b_eep,c
 10059  0011DC  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10060  0011E0  EFFC  F00E         	goto	L17
 10061  0011E4                     l12069:
 10062                           
 10063                           ; BSR set to: 0
 10064                           ;main.c: 2085: (Busy_eep(), Write_b_eep(0x54,val));
 10065  0011E4  EC3D  F030         	call	_Busy_eep	;wreg free
 10066  0011E8  6A0F               	clrf	?_Write_b_eep+1,c
 10067  0011EA  0E54               	movlw	84
 10068  0011EC  6E0E               	movwf	?_Write_b_eep,c
 10069  0011EE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10070  0011F2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10071                           
 10072                           ;main.c: 2086: rv = Read_b_eep(0x54);
 10073  0011F6  6A17               	clrf	?_Read_b_eep+1,c
 10074  0011F8  0E54               	movlw	84
 10075  0011FA  6E16               	movwf	?_Read_b_eep,c
 10076  0011FC  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10077  001200  EFFC  F00E         	goto	L17
 10078  001204                     l12075:
 10079                           
 10080                           ; BSR set to: 0
 10081                           ;main.c: 2091: (Busy_eep(), Write_b_eep(0x55,val));
 10082  001204  EC3D  F030         	call	_Busy_eep	;wreg free
 10083  001208  6A0F               	clrf	?_Write_b_eep+1,c
 10084  00120A  0E55               	movlw	85
 10085  00120C  6E0E               	movwf	?_Write_b_eep,c
 10086  00120E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10087  001212  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10088                           
 10089                           ;main.c: 2092: rv = Read_b_eep(0x55);
 10090  001216  6A17               	clrf	?_Read_b_eep+1,c
 10091  001218  0E55               	movlw	85
 10092  00121A  6E16               	movwf	?_Read_b_eep,c
 10093  00121C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10094  001220  EFFC  F00E         	goto	L17
 10095  001224                     l12081:
 10096                           
 10097                           ; BSR set to: 0
 10098                           ;main.c: 2097: (Busy_eep(), Write_b_eep(0x56,val));
 10099  001224  EC3D  F030         	call	_Busy_eep	;wreg free
 10100  001228  6A0F               	clrf	?_Write_b_eep+1,c
 10101  00122A  0E56               	movlw	86
 10102  00122C  6E0E               	movwf	?_Write_b_eep,c
 10103  00122E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10104  001232  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10105                           
 10106                           ;main.c: 2098: rv = Read_b_eep(0x56);
 10107  001236  6A17               	clrf	?_Read_b_eep+1,c
 10108  001238  0E56               	movlw	86
 10109  00123A  6E16               	movwf	?_Read_b_eep,c
 10110  00123C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10111  001240  EFFC  F00E         	goto	L17
 10112  001244                     l12087:
 10113                           
 10114                           ; BSR set to: 0
 10115                           ;main.c: 2103: (Busy_eep(), Write_b_eep(0x57,val));
 10116  001244  EC3D  F030         	call	_Busy_eep	;wreg free
 10117  001248  6A0F               	clrf	?_Write_b_eep+1,c
 10118  00124A  0E57               	movlw	87
 10119  00124C  6E0E               	movwf	?_Write_b_eep,c
 10120  00124E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10121  001252  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10122                           
 10123                           ;main.c: 2104: rv = Read_b_eep(0x57);
 10124  001256  6A17               	clrf	?_Read_b_eep+1,c
 10125  001258  0E57               	movlw	87
 10126  00125A  6E16               	movwf	?_Read_b_eep,c
 10127  00125C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10128  001260  EFFC  F00E         	goto	L17
 10129  001264                     l12093:
 10130                           
 10131                           ; BSR set to: 0
 10132                           ;main.c: 2109: (Busy_eep(), Write_b_eep(0x58,val));
 10133  001264  EC3D  F030         	call	_Busy_eep	;wreg free
 10134  001268  6A0F               	clrf	?_Write_b_eep+1,c
 10135  00126A  0E58               	movlw	88
 10136  00126C  6E0E               	movwf	?_Write_b_eep,c
 10137  00126E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10138  001272  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10139                           
 10140                           ;main.c: 2110: rv = Read_b_eep(0x58);
 10141  001276  6A17               	clrf	?_Read_b_eep+1,c
 10142  001278  0E58               	movlw	88
 10143  00127A  6E16               	movwf	?_Read_b_eep,c
 10144  00127C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10145  001280  EFFC  F00E         	goto	L17
 10146  001284                     l12099:
 10147                           
 10148                           ; BSR set to: 0
 10149                           ;main.c: 2115: (Busy_eep(), Write_b_eep(0x59,val));
 10150  001284  EC3D  F030         	call	_Busy_eep	;wreg free
 10151  001288  6A0F               	clrf	?_Write_b_eep+1,c
 10152  00128A  0E59               	movlw	89
 10153  00128C  6E0E               	movwf	?_Write_b_eep,c
 10154  00128E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10155  001292  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10156                           
 10157                           ;main.c: 2116: rv = Read_b_eep(0x59);
 10158  001296  6A17               	clrf	?_Read_b_eep+1,c
 10159  001298  0E59               	movlw	89
 10160  00129A  6E16               	movwf	?_Read_b_eep,c
 10161  00129C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10162  0012A0  EFFC  F00E         	goto	L17
 10163  0012A4                     l12105:
 10164                           
 10165                           ; BSR set to: 0
 10166                           ;main.c: 2121: (Busy_eep(), Write_b_eep(0x5A,val));
 10167  0012A4  EC3D  F030         	call	_Busy_eep	;wreg free
 10168  0012A8  6A0F               	clrf	?_Write_b_eep+1,c
 10169  0012AA  0E5A               	movlw	90
 10170  0012AC  6E0E               	movwf	?_Write_b_eep,c
 10171  0012AE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10172  0012B2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10173                           
 10174                           ;main.c: 2122: rv = Read_b_eep(0x5A);
 10175  0012B6  6A17               	clrf	?_Read_b_eep+1,c
 10176  0012B8  0E5A               	movlw	90
 10177  0012BA  6E16               	movwf	?_Read_b_eep,c
 10178  0012BC  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10179  0012C0  EFFC  F00E         	goto	L17
 10180  0012C4                     l12111:
 10181                           
 10182                           ; BSR set to: 0
 10183                           ;main.c: 2131: (Busy_eep(), Write_b_eep(0x5B,val));
 10184  0012C4  EC3D  F030         	call	_Busy_eep	;wreg free
 10185  0012C8  6A0F               	clrf	?_Write_b_eep+1,c
 10186  0012CA  0E5B               	movlw	91
 10187  0012CC  6E0E               	movwf	?_Write_b_eep,c
 10188  0012CE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10189  0012D2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10190                           
 10191                           ;main.c: 2132: rv = Read_b_eep(0x5B);
 10192  0012D6  6A17               	clrf	?_Read_b_eep+1,c
 10193  0012D8  0E5B               	movlw	91
 10194  0012DA  6E16               	movwf	?_Read_b_eep,c
 10195  0012DC  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10196  0012E0  EFFC  F00E         	goto	L17
 10197  0012E4                     l12117:
 10198                           
 10199                           ; BSR set to: 0
 10200                           ;main.c: 2137: (Busy_eep(), Write_b_eep(0x5C,val));
 10201  0012E4  EC3D  F030         	call	_Busy_eep	;wreg free
 10202  0012E8  6A0F               	clrf	?_Write_b_eep+1,c
 10203  0012EA  0E5C               	movlw	92
 10204  0012EC  6E0E               	movwf	?_Write_b_eep,c
 10205  0012EE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10206  0012F2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10207                           
 10208                           ;main.c: 2138: rv = Read_b_eep(0x5C);
 10209  0012F6  6A17               	clrf	?_Read_b_eep+1,c
 10210  0012F8  0E5C               	movlw	92
 10211  0012FA  6E16               	movwf	?_Read_b_eep,c
 10212  0012FC  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10213  001300  EFFC  F00E         	goto	L17
 10214  001304                     l12123:
 10215                           
 10216                           ; BSR set to: 0
 10217                           ;main.c: 2143: (Busy_eep(), Write_b_eep(0x5D,val));
 10218  001304  EC3D  F030         	call	_Busy_eep	;wreg free
 10219  001308  6A0F               	clrf	?_Write_b_eep+1,c
 10220  00130A  0E5D               	movlw	93
 10221  00130C  6E0E               	movwf	?_Write_b_eep,c
 10222  00130E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10223  001312  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10224                           
 10225                           ;main.c: 2144: rv = Read_b_eep(0x5D);
 10226  001316  6A17               	clrf	?_Read_b_eep+1,c
 10227  001318  0E5D               	movlw	93
 10228  00131A  6E16               	movwf	?_Read_b_eep,c
 10229  00131C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10230  001320  EFFC  F00E         	goto	L17
 10231  001324                     l12129:
 10232                           
 10233                           ; BSR set to: 0
 10234                           ;main.c: 2149: (Busy_eep(), Write_b_eep(0x5E,val));
 10235  001324  EC3D  F030         	call	_Busy_eep	;wreg free
 10236  001328  6A0F               	clrf	?_Write_b_eep+1,c
 10237  00132A  0E5E               	movlw	94
 10238  00132C  6E0E               	movwf	?_Write_b_eep,c
 10239  00132E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10240  001332  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10241                           
 10242                           ;main.c: 2150: rv = Read_b_eep(0x5E);
 10243  001336  6A17               	clrf	?_Read_b_eep+1,c
 10244  001338  0E5E               	movlw	94
 10245  00133A  6E16               	movwf	?_Read_b_eep,c
 10246  00133C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10247  001340  EFFC  F00E         	goto	L17
 10248  001344                     l12135:
 10249                           
 10250                           ; BSR set to: 0
 10251                           ;main.c: 2155: (Busy_eep(), Write_b_eep(0x5F,val));
 10252  001344  EC3D  F030         	call	_Busy_eep	;wreg free
 10253  001348  6A0F               	clrf	?_Write_b_eep+1,c
 10254  00134A  0E5F               	movlw	95
 10255  00134C  6E0E               	movwf	?_Write_b_eep,c
 10256  00134E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10257  001352  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10258                           
 10259                           ;main.c: 2156: rv = Read_b_eep(0x5F);
 10260  001356  6A17               	clrf	?_Read_b_eep+1,c
 10261  001358  0E5F               	movlw	95
 10262  00135A  6E16               	movwf	?_Read_b_eep,c
 10263  00135C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10264  001360  EFFC  F00E         	goto	L17
 10265  001364                     l12141:
 10266                           
 10267                           ; BSR set to: 0
 10268                           ;main.c: 2161: (Busy_eep(), Write_b_eep(0x60,val));
 10269  001364  EC3D  F030         	call	_Busy_eep	;wreg free
 10270  001368  6A0F               	clrf	?_Write_b_eep+1,c
 10271  00136A  0E60               	movlw	96
 10272  00136C  6E0E               	movwf	?_Write_b_eep,c
 10273  00136E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10274  001372  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10275                           
 10276                           ;main.c: 2162: rv = Read_b_eep(0x60);
 10277  001376  6A17               	clrf	?_Read_b_eep+1,c
 10278  001378  0E60               	movlw	96
 10279  00137A  6E16               	movwf	?_Read_b_eep,c
 10280  00137C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10281  001380  EFFC  F00E         	goto	L17
 10282  001384                     l12147:
 10283                           
 10284                           ; BSR set to: 0
 10285                           ;main.c: 2167: (Busy_eep(), Write_b_eep(0x61,val));
 10286  001384  EC3D  F030         	call	_Busy_eep	;wreg free
 10287  001388  6A0F               	clrf	?_Write_b_eep+1,c
 10288  00138A  0E61               	movlw	97
 10289  00138C  6E0E               	movwf	?_Write_b_eep,c
 10290  00138E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10291  001392  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10292                           
 10293                           ;main.c: 2168: rv = Read_b_eep(0x61);
 10294  001396  6A17               	clrf	?_Read_b_eep+1,c
 10295  001398  0E61               	movlw	97
 10296  00139A  6E16               	movwf	?_Read_b_eep,c
 10297  00139C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10298  0013A0  EFFC  F00E         	goto	L17
 10299  0013A4                     l12153:
 10300                           
 10301                           ; BSR set to: 0
 10302                           ;main.c: 2173: (Busy_eep(), Write_b_eep(0x62,val));
 10303  0013A4  EC3D  F030         	call	_Busy_eep	;wreg free
 10304  0013A8  6A0F               	clrf	?_Write_b_eep+1,c
 10305  0013AA  0E62               	movlw	98
 10306  0013AC  6E0E               	movwf	?_Write_b_eep,c
 10307  0013AE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10308  0013B2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10309                           
 10310                           ;main.c: 2174: rv = Read_b_eep(0x62);
 10311  0013B6  6A17               	clrf	?_Read_b_eep+1,c
 10312  0013B8  0E62               	movlw	98
 10313  0013BA  6E16               	movwf	?_Read_b_eep,c
 10314  0013BC  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10315  0013C0  EFFC  F00E         	goto	L17
 10316  0013C4                     l12159:
 10317                           
 10318                           ; BSR set to: 0
 10319                           ;main.c: 2179: (Busy_eep(), Write_b_eep(0x63,val));
 10320  0013C4  EC3D  F030         	call	_Busy_eep	;wreg free
 10321  0013C8  6A0F               	clrf	?_Write_b_eep+1,c
 10322  0013CA  0E63               	movlw	99
 10323  0013CC  6E0E               	movwf	?_Write_b_eep,c
 10324  0013CE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10325  0013D2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10326                           
 10327                           ;main.c: 2180: rv = Read_b_eep(0x63);
 10328  0013D6  6A17               	clrf	?_Read_b_eep+1,c
 10329  0013D8  0E63               	movlw	99
 10330  0013DA  6E16               	movwf	?_Read_b_eep,c
 10331  0013DC  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10332  0013E0  EFFC  F00E         	goto	L17
 10333  0013E4                     l12165:
 10334                           
 10335                           ; BSR set to: 0
 10336                           ;main.c: 2185: (Busy_eep(), Write_b_eep(0x64,val));
 10337  0013E4  EC3D  F030         	call	_Busy_eep	;wreg free
 10338  0013E8  6A0F               	clrf	?_Write_b_eep+1,c
 10339  0013EA  0E64               	movlw	100
 10340  0013EC  6E0E               	movwf	?_Write_b_eep,c
 10341  0013EE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10342  0013F2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10343                           
 10344                           ;main.c: 2186: rv = Read_b_eep(0x64);
 10345  0013F6  6A17               	clrf	?_Read_b_eep+1,c
 10346  0013F8  0E64               	movlw	100
 10347  0013FA  6E16               	movwf	?_Read_b_eep,c
 10348  0013FC  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10349  001400  EFFC  F00E         	goto	L17
 10350  001404                     l12171:
 10351                           
 10352                           ; BSR set to: 0
 10353                           ;main.c: 2191: (Busy_eep(), Write_b_eep(0x65,val));
 10354  001404  EC3D  F030         	call	_Busy_eep	;wreg free
 10355  001408  6A0F               	clrf	?_Write_b_eep+1,c
 10356  00140A  0E65               	movlw	101
 10357  00140C  6E0E               	movwf	?_Write_b_eep,c
 10358  00140E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10359  001412  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10360                           
 10361                           ;main.c: 2192: rv = Read_b_eep(0x65);
 10362  001416  6A17               	clrf	?_Read_b_eep+1,c
 10363  001418  0E65               	movlw	101
 10364  00141A  6E16               	movwf	?_Read_b_eep,c
 10365  00141C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10366  001420  EFFC  F00E         	goto	L17
 10367  001424                     l12177:
 10368                           
 10369                           ; BSR set to: 0
 10370                           ;main.c: 2197: (Busy_eep(), Write_b_eep(0x66,val));
 10371  001424  EC3D  F030         	call	_Busy_eep	;wreg free
 10372  001428  6A0F               	clrf	?_Write_b_eep+1,c
 10373  00142A  0E66               	movlw	102
 10374  00142C  6E0E               	movwf	?_Write_b_eep,c
 10375  00142E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10376  001432  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10377                           
 10378                           ;main.c: 2198: rv = Read_b_eep(0x66);
 10379  001436  6A17               	clrf	?_Read_b_eep+1,c
 10380  001438  0E66               	movlw	102
 10381  00143A  6E16               	movwf	?_Read_b_eep,c
 10382  00143C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10383  001440  EFFC  F00E         	goto	L17
 10384  001444                     l12183:
 10385                           
 10386                           ; BSR set to: 0
 10387                           ;main.c: 2207: (Busy_eep(), Write_b_eep(0x67,val));
 10388  001444  EC3D  F030         	call	_Busy_eep	;wreg free
 10389  001448  6A0F               	clrf	?_Write_b_eep+1,c
 10390  00144A  0E67               	movlw	103
 10391  00144C  6E0E               	movwf	?_Write_b_eep,c
 10392  00144E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10393  001452  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10394                           
 10395                           ;main.c: 2208: rv = Read_b_eep(0x67);
 10396  001456  6A17               	clrf	?_Read_b_eep+1,c
 10397  001458  0E67               	movlw	103
 10398  00145A  6E16               	movwf	?_Read_b_eep,c
 10399  00145C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10400  001460  EFFC  F00E         	goto	L17
 10401  001464                     l12189:
 10402                           
 10403                           ; BSR set to: 0
 10404                           ;main.c: 2213: (Busy_eep(), Write_b_eep(0x68,val));
 10405  001464  EC3D  F030         	call	_Busy_eep	;wreg free
 10406  001468  6A0F               	clrf	?_Write_b_eep+1,c
 10407  00146A  0E68               	movlw	104
 10408  00146C  6E0E               	movwf	?_Write_b_eep,c
 10409  00146E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10410  001472  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10411                           
 10412                           ;main.c: 2214: rv = Read_b_eep(0x68);
 10413  001476  6A17               	clrf	?_Read_b_eep+1,c
 10414  001478  0E68               	movlw	104
 10415  00147A  6E16               	movwf	?_Read_b_eep,c
 10416  00147C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10417  001480  EFFC  F00E         	goto	L17
 10418  001484                     l12195:
 10419                           
 10420                           ; BSR set to: 0
 10421                           ;main.c: 2219: (Busy_eep(), Write_b_eep(0x69,val));
 10422  001484  EC3D  F030         	call	_Busy_eep	;wreg free
 10423  001488  6A0F               	clrf	?_Write_b_eep+1,c
 10424  00148A  0E69               	movlw	105
 10425  00148C  6E0E               	movwf	?_Write_b_eep,c
 10426  00148E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10427  001492  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10428                           
 10429                           ;main.c: 2220: rv = Read_b_eep(0x69);
 10430  001496  6A17               	clrf	?_Read_b_eep+1,c
 10431  001498  0E69               	movlw	105
 10432  00149A  6E16               	movwf	?_Read_b_eep,c
 10433  00149C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10434  0014A0  EFFC  F00E         	goto	L17
 10435  0014A4                     l12201:
 10436                           
 10437                           ; BSR set to: 0
 10438                           ;main.c: 2225: (Busy_eep(), Write_b_eep(0x6A,val));
 10439  0014A4  EC3D  F030         	call	_Busy_eep	;wreg free
 10440  0014A8  6A0F               	clrf	?_Write_b_eep+1,c
 10441  0014AA  0E6A               	movlw	106
 10442  0014AC  6E0E               	movwf	?_Write_b_eep,c
 10443  0014AE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10444  0014B2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10445                           
 10446                           ;main.c: 2226: rv = Read_b_eep(0x6A);
 10447  0014B6  6A17               	clrf	?_Read_b_eep+1,c
 10448  0014B8  0E6A               	movlw	106
 10449  0014BA  6E16               	movwf	?_Read_b_eep,c
 10450  0014BC  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10451  0014C0  EFFC  F00E         	goto	L17
 10452  0014C4                     l12207:
 10453                           
 10454                           ; BSR set to: 0
 10455                           ;main.c: 2231: (Busy_eep(), Write_b_eep(0x6B,val));
 10456  0014C4  EC3D  F030         	call	_Busy_eep	;wreg free
 10457  0014C8  6A0F               	clrf	?_Write_b_eep+1,c
 10458  0014CA  0E6B               	movlw	107
 10459  0014CC  6E0E               	movwf	?_Write_b_eep,c
 10460  0014CE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10461  0014D2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10462                           
 10463                           ;main.c: 2232: rv = Read_b_eep(0x6B);
 10464  0014D6  6A17               	clrf	?_Read_b_eep+1,c
 10465  0014D8  0E6B               	movlw	107
 10466  0014DA  6E16               	movwf	?_Read_b_eep,c
 10467  0014DC  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10468  0014E0  EFFC  F00E         	goto	L17
 10469  0014E4                     l12213:
 10470                           
 10471                           ; BSR set to: 0
 10472                           ;main.c: 2237: (Busy_eep(), Write_b_eep(0x6C,val));
 10473  0014E4  EC3D  F030         	call	_Busy_eep	;wreg free
 10474  0014E8  6A0F               	clrf	?_Write_b_eep+1,c
 10475  0014EA  0E6C               	movlw	108
 10476  0014EC  6E0E               	movwf	?_Write_b_eep,c
 10477  0014EE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10478  0014F2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10479                           
 10480                           ;main.c: 2238: rv = Read_b_eep(0x6C);
 10481  0014F6  6A17               	clrf	?_Read_b_eep+1,c
 10482  0014F8  0E6C               	movlw	108
 10483  0014FA  6E16               	movwf	?_Read_b_eep,c
 10484  0014FC  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10485  001500  EFFC  F00E         	goto	L17
 10486  001504                     l12219:
 10487                           
 10488                           ; BSR set to: 0
 10489                           ;main.c: 2243: (Busy_eep(), Write_b_eep(0x6D,val));
 10490  001504  EC3D  F030         	call	_Busy_eep	;wreg free
 10491  001508  6A0F               	clrf	?_Write_b_eep+1,c
 10492  00150A  0E6D               	movlw	109
 10493  00150C  6E0E               	movwf	?_Write_b_eep,c
 10494  00150E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10495  001512  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10496                           
 10497                           ;main.c: 2244: rv = Read_b_eep(0x6D);
 10498  001516  6A17               	clrf	?_Read_b_eep+1,c
 10499  001518  0E6D               	movlw	109
 10500  00151A  6E16               	movwf	?_Read_b_eep,c
 10501  00151C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10502  001520  EFFC  F00E         	goto	L17
 10503  001524                     l12225:
 10504                           
 10505                           ; BSR set to: 0
 10506                           ;main.c: 2249: (Busy_eep(), Write_b_eep(0x6E,val));
 10507  001524  EC3D  F030         	call	_Busy_eep	;wreg free
 10508  001528  6A0F               	clrf	?_Write_b_eep+1,c
 10509  00152A  0E6E               	movlw	110
 10510  00152C  6E0E               	movwf	?_Write_b_eep,c
 10511  00152E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10512  001532  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10513                           
 10514                           ;main.c: 2250: rv = Read_b_eep(0x6E);
 10515  001536  6A17               	clrf	?_Read_b_eep+1,c
 10516  001538  0E6E               	movlw	110
 10517  00153A  6E16               	movwf	?_Read_b_eep,c
 10518  00153C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10519  001540  EFFC  F00E         	goto	L17
 10520  001544                     l12231:
 10521                           
 10522                           ; BSR set to: 0
 10523                           ;main.c: 2255: (Busy_eep(), Write_b_eep(0x6F,val));
 10524  001544  EC3D  F030         	call	_Busy_eep	;wreg free
 10525  001548  6A0F               	clrf	?_Write_b_eep+1,c
 10526  00154A  0E6F               	movlw	111
 10527  00154C  6E0E               	movwf	?_Write_b_eep,c
 10528  00154E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10529  001552  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10530                           
 10531                           ;main.c: 2256: rv = Read_b_eep(0x6F);
 10532  001556  6A17               	clrf	?_Read_b_eep+1,c
 10533  001558  0E6F               	movlw	111
 10534  00155A  6E16               	movwf	?_Read_b_eep,c
 10535  00155C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10536  001560  EFFC  F00E         	goto	L17
 10537  001564                     l12237:
 10538                           
 10539                           ; BSR set to: 0
 10540                           ;main.c: 2261: (Busy_eep(), Write_b_eep(0x70,val));
 10541  001564  EC3D  F030         	call	_Busy_eep	;wreg free
 10542  001568  6A0F               	clrf	?_Write_b_eep+1,c
 10543  00156A  0E70               	movlw	112
 10544  00156C  6E0E               	movwf	?_Write_b_eep,c
 10545  00156E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10546  001572  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10547                           
 10548                           ;main.c: 2262: rv = Read_b_eep(0x70);
 10549  001576  6A17               	clrf	?_Read_b_eep+1,c
 10550  001578  0E70               	movlw	112
 10551  00157A  6E16               	movwf	?_Read_b_eep,c
 10552  00157C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10553  001580  EFFC  F00E         	goto	L17
 10554  001584                     l12243:
 10555                           
 10556                           ; BSR set to: 0
 10557                           ;main.c: 2267: (Busy_eep(), Write_b_eep(0x71,val));
 10558  001584  EC3D  F030         	call	_Busy_eep	;wreg free
 10559  001588  6A0F               	clrf	?_Write_b_eep+1,c
 10560  00158A  0E71               	movlw	113
 10561  00158C  6E0E               	movwf	?_Write_b_eep,c
 10562  00158E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10563  001592  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10564                           
 10565                           ;main.c: 2268: rv = Read_b_eep(0x71);
 10566  001596  6A17               	clrf	?_Read_b_eep+1,c
 10567  001598  0E71               	movlw	113
 10568  00159A  6E16               	movwf	?_Read_b_eep,c
 10569  00159C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10570  0015A0  EFFC  F00E         	goto	L17
 10571  0015A4                     l12249:
 10572                           
 10573                           ; BSR set to: 0
 10574                           ;main.c: 2273: (Busy_eep(), Write_b_eep(0x72,val));
 10575  0015A4  EC3D  F030         	call	_Busy_eep	;wreg free
 10576  0015A8  6A0F               	clrf	?_Write_b_eep+1,c
 10577  0015AA  0E72               	movlw	114
 10578  0015AC  6E0E               	movwf	?_Write_b_eep,c
 10579  0015AE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10580  0015B2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10581                           
 10582                           ;main.c: 2274: rv = Read_b_eep(0x72);
 10583  0015B6  6A17               	clrf	?_Read_b_eep+1,c
 10584  0015B8  0E72               	movlw	114
 10585  0015BA  6E16               	movwf	?_Read_b_eep,c
 10586  0015BC  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10587  0015C0  EFFC  F00E         	goto	L17
 10588  0015C4                     l12255:
 10589                           
 10590                           ; BSR set to: 0
 10591                           ;main.c: 2283: (Busy_eep(), Write_b_eep(0x73,val));
 10592  0015C4  EC3D  F030         	call	_Busy_eep	;wreg free
 10593  0015C8  6A0F               	clrf	?_Write_b_eep+1,c
 10594  0015CA  0E73               	movlw	115
 10595  0015CC  6E0E               	movwf	?_Write_b_eep,c
 10596  0015CE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10597  0015D2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10598                           
 10599                           ;main.c: 2284: rv = Read_b_eep(0x73);
 10600  0015D6  6A17               	clrf	?_Read_b_eep+1,c
 10601  0015D8  0E73               	movlw	115
 10602  0015DA  6E16               	movwf	?_Read_b_eep,c
 10603  0015DC  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10604  0015E0  EFFC  F00E         	goto	L17
 10605  0015E4                     l12261:
 10606                           
 10607                           ; BSR set to: 0
 10608                           ;main.c: 2289: (Busy_eep(), Write_b_eep(0x74,val));
 10609  0015E4  EC3D  F030         	call	_Busy_eep	;wreg free
 10610  0015E8  6A0F               	clrf	?_Write_b_eep+1,c
 10611  0015EA  0E74               	movlw	116
 10612  0015EC  6E0E               	movwf	?_Write_b_eep,c
 10613  0015EE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10614  0015F2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10615                           
 10616                           ;main.c: 2290: rv = Read_b_eep(0x74);
 10617  0015F6  6A17               	clrf	?_Read_b_eep+1,c
 10618  0015F8  0E74               	movlw	116
 10619  0015FA  6E16               	movwf	?_Read_b_eep,c
 10620  0015FC  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10621  001600  D3FB               	goto	L17
 10622  001602                     l12267:
 10623                           
 10624                           ; BSR set to: 0
 10625                           ;main.c: 2295: (Busy_eep(), Write_b_eep(0x75,val));
 10626  001602  EC3D  F030         	call	_Busy_eep	;wreg free
 10627  001606  6A0F               	clrf	?_Write_b_eep+1,c
 10628  001608  0E75               	movlw	117
 10629  00160A  6E0E               	movwf	?_Write_b_eep,c
 10630  00160C  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10631  001610  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10632                           
 10633                           ;main.c: 2296: rv = Read_b_eep(0x75);
 10634  001614  6A17               	clrf	?_Read_b_eep+1,c
 10635  001616  0E75               	movlw	117
 10636  001618  6E16               	movwf	?_Read_b_eep,c
 10637  00161A  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10638  00161E  D3EC               	goto	L17
 10639  001620                     l12273:
 10640                           
 10641                           ; BSR set to: 0
 10642                           ;main.c: 2301: (Busy_eep(), Write_b_eep(0x76,val));
 10643  001620  EC3D  F030         	call	_Busy_eep	;wreg free
 10644  001624  6A0F               	clrf	?_Write_b_eep+1,c
 10645  001626  0E76               	movlw	118
 10646  001628  6E0E               	movwf	?_Write_b_eep,c
 10647  00162A  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10648  00162E  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10649                           
 10650                           ;main.c: 2302: rv = Read_b_eep(0x76);
 10651  001632  6A17               	clrf	?_Read_b_eep+1,c
 10652  001634  0E76               	movlw	118
 10653  001636  6E16               	movwf	?_Read_b_eep,c
 10654  001638  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10655  00163C  D3DD               	goto	L17
 10656  00163E                     l12279:
 10657                           
 10658                           ; BSR set to: 0
 10659                           ;main.c: 2307: (Busy_eep(), Write_b_eep(0x77,val));
 10660  00163E  EC3D  F030         	call	_Busy_eep	;wreg free
 10661  001642  6A0F               	clrf	?_Write_b_eep+1,c
 10662  001644  0E77               	movlw	119
 10663  001646  6E0E               	movwf	?_Write_b_eep,c
 10664  001648  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10665  00164C  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10666                           
 10667                           ;main.c: 2308: rv = Read_b_eep(0x77);
 10668  001650  6A17               	clrf	?_Read_b_eep+1,c
 10669  001652  0E77               	movlw	119
 10670  001654  6E16               	movwf	?_Read_b_eep,c
 10671  001656  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10672  00165A  D3CE               	goto	L17
 10673  00165C                     l12285:
 10674                           
 10675                           ; BSR set to: 0
 10676                           ;main.c: 2313: (Busy_eep(), Write_b_eep(0x78,val));
 10677  00165C  EC3D  F030         	call	_Busy_eep	;wreg free
 10678  001660  6A0F               	clrf	?_Write_b_eep+1,c
 10679  001662  0E78               	movlw	120
 10680  001664  6E0E               	movwf	?_Write_b_eep,c
 10681  001666  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10682  00166A  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10683                           
 10684                           ;main.c: 2314: rv = Read_b_eep(0x78);
 10685  00166E  6A17               	clrf	?_Read_b_eep+1,c
 10686  001670  0E78               	movlw	120
 10687  001672  6E16               	movwf	?_Read_b_eep,c
 10688  001674  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10689  001678  D3BF               	goto	L17
 10690  00167A                     l12291:
 10691                           
 10692                           ; BSR set to: 0
 10693                           ;main.c: 2319: (Busy_eep(), Write_b_eep(0x79,val));
 10694  00167A  EC3D  F030         	call	_Busy_eep	;wreg free
 10695  00167E  6A0F               	clrf	?_Write_b_eep+1,c
 10696  001680  0E79               	movlw	121
 10697  001682  6E0E               	movwf	?_Write_b_eep,c
 10698  001684  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10699  001688  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10700                           
 10701                           ;main.c: 2320: rv = Read_b_eep(0x79);
 10702  00168C  6A17               	clrf	?_Read_b_eep+1,c
 10703  00168E  0E79               	movlw	121
 10704  001690  6E16               	movwf	?_Read_b_eep,c
 10705  001692  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10706  001696  D3B0               	goto	L17
 10707  001698                     l12297:
 10708                           
 10709                           ; BSR set to: 0
 10710                           ;main.c: 2325: (Busy_eep(), Write_b_eep(0x7A,val));
 10711  001698  EC3D  F030         	call	_Busy_eep	;wreg free
 10712  00169C  6A0F               	clrf	?_Write_b_eep+1,c
 10713  00169E  0E7A               	movlw	122
 10714  0016A0  6E0E               	movwf	?_Write_b_eep,c
 10715  0016A2  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10716  0016A6  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10717                           
 10718                           ;main.c: 2326: rv = Read_b_eep(0x7A);
 10719  0016AA  6A17               	clrf	?_Read_b_eep+1,c
 10720  0016AC  0E7A               	movlw	122
 10721  0016AE  6E16               	movwf	?_Read_b_eep,c
 10722  0016B0  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10723  0016B4  D3A1               	goto	L17
 10724  0016B6                     l12303:
 10725                           
 10726                           ; BSR set to: 0
 10727                           ;main.c: 2331: (Busy_eep(), Write_b_eep(0x7B,val));
 10728  0016B6  EC3D  F030         	call	_Busy_eep	;wreg free
 10729  0016BA  6A0F               	clrf	?_Write_b_eep+1,c
 10730  0016BC  0E7B               	movlw	123
 10731  0016BE  6E0E               	movwf	?_Write_b_eep,c
 10732  0016C0  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10733  0016C4  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10734                           
 10735                           ;main.c: 2332: rv = Read_b_eep(0x7B);
 10736  0016C8  6A17               	clrf	?_Read_b_eep+1,c
 10737  0016CA  0E7B               	movlw	123
 10738  0016CC  6E16               	movwf	?_Read_b_eep,c
 10739  0016CE  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10740  0016D2  D392               	goto	L17
 10741  0016D4                     l12309:
 10742                           
 10743                           ; BSR set to: 0
 10744                           ;main.c: 2337: (Busy_eep(), Write_b_eep(0x7C,val));
 10745  0016D4  EC3D  F030         	call	_Busy_eep	;wreg free
 10746  0016D8  6A0F               	clrf	?_Write_b_eep+1,c
 10747  0016DA  0E7C               	movlw	124
 10748  0016DC  6E0E               	movwf	?_Write_b_eep,c
 10749  0016DE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10750  0016E2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10751                           
 10752                           ;main.c: 2338: rv = Read_b_eep(0x7C);
 10753  0016E6  6A17               	clrf	?_Read_b_eep+1,c
 10754  0016E8  0E7C               	movlw	124
 10755  0016EA  6E16               	movwf	?_Read_b_eep,c
 10756  0016EC  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10757  0016F0  D383               	goto	L17
 10758  0016F2                     l12315:
 10759                           
 10760                           ; BSR set to: 0
 10761                           ;main.c: 2343: (Busy_eep(), Write_b_eep(0x7D,val));
 10762  0016F2  EC3D  F030         	call	_Busy_eep	;wreg free
 10763  0016F6  6A0F               	clrf	?_Write_b_eep+1,c
 10764  0016F8  0E7D               	movlw	125
 10765  0016FA  6E0E               	movwf	?_Write_b_eep,c
 10766  0016FC  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10767  001700  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10768                           
 10769                           ;main.c: 2344: rv = Read_b_eep(0x7D);
 10770  001704  6A17               	clrf	?_Read_b_eep+1,c
 10771  001706  0E7D               	movlw	125
 10772  001708  6E16               	movwf	?_Read_b_eep,c
 10773  00170A  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10774  00170E  D374               	goto	L17
 10775  001710                     l12321:
 10776                           
 10777                           ; BSR set to: 0
 10778                           ;main.c: 2349: (Busy_eep(), Write_b_eep(0x7E,val));
 10779  001710  EC3D  F030         	call	_Busy_eep	;wreg free
 10780  001714  6A0F               	clrf	?_Write_b_eep+1,c
 10781  001716  0E7E               	movlw	126
 10782  001718  6E0E               	movwf	?_Write_b_eep,c
 10783  00171A  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10784  00171E  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10785                           
 10786                           ;main.c: 2350: rv = Read_b_eep(0x7E);
 10787  001722  6A17               	clrf	?_Read_b_eep+1,c
 10788  001724  0E7E               	movlw	126
 10789  001726  6E16               	movwf	?_Read_b_eep,c
 10790  001728  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10791  00172C  D365               	goto	L17
 10792  00172E                     l12327:
 10793                           
 10794                           ; BSR set to: 0
 10795                           ;main.c: 2359: (Busy_eep(), Write_b_eep(0x7F,val));
 10796  00172E  EC3D  F030         	call	_Busy_eep	;wreg free
 10797  001732  6A0F               	clrf	?_Write_b_eep+1,c
 10798  001734  0E7F               	movlw	127
 10799  001736  6E0E               	movwf	?_Write_b_eep,c
 10800  001738  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10801  00173C  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10802                           
 10803                           ;main.c: 2360: rv = Read_b_eep(0x7F);
 10804  001740  6A17               	clrf	?_Read_b_eep+1,c
 10805  001742  0E7F               	movlw	127
 10806  001744  6E16               	movwf	?_Read_b_eep,c
 10807  001746  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10808  00174A  D356               	goto	L17
 10809  00174C                     l12333:
 10810                           
 10811                           ; BSR set to: 0
 10812                           ;main.c: 2365: (Busy_eep(), Write_b_eep(0x80,val));
 10813  00174C  EC3D  F030         	call	_Busy_eep	;wreg free
 10814  001750  6A0F               	clrf	?_Write_b_eep+1,c
 10815  001752  0E80               	movlw	128
 10816  001754  6E0E               	movwf	?_Write_b_eep,c
 10817  001756  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10818  00175A  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10819                           
 10820                           ;main.c: 2366: rv = Read_b_eep(0x80);
 10821  00175E  6A17               	clrf	?_Read_b_eep+1,c
 10822  001760  0E80               	movlw	128
 10823  001762  6E16               	movwf	?_Read_b_eep,c
 10824  001764  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10825  001768  D347               	goto	L17
 10826  00176A                     l12339:
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;main.c: 2371: (Busy_eep(), Write_b_eep(0x81,val));
 10830  00176A  EC3D  F030         	call	_Busy_eep	;wreg free
 10831  00176E  6A0F               	clrf	?_Write_b_eep+1,c
 10832  001770  0E81               	movlw	129
 10833  001772  6E0E               	movwf	?_Write_b_eep,c
 10834  001774  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10835  001778  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10836                           
 10837                           ;main.c: 2372: rv = Read_b_eep(0x81);
 10838  00177C  6A17               	clrf	?_Read_b_eep+1,c
 10839  00177E  0E81               	movlw	129
 10840  001780  6E16               	movwf	?_Read_b_eep,c
 10841  001782  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10842  001786  D338               	goto	L17
 10843  001788                     l12345:
 10844                           
 10845                           ; BSR set to: 0
 10846                           ;main.c: 2377: (Busy_eep(), Write_b_eep(0x82,val));
 10847  001788  EC3D  F030         	call	_Busy_eep	;wreg free
 10848  00178C  6A0F               	clrf	?_Write_b_eep+1,c
 10849  00178E  0E82               	movlw	130
 10850  001790  6E0E               	movwf	?_Write_b_eep,c
 10851  001792  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10852  001796  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10853                           
 10854                           ;main.c: 2378: rv = Read_b_eep(0x82);
 10855  00179A  6A17               	clrf	?_Read_b_eep+1,c
 10856  00179C  0E82               	movlw	130
 10857  00179E  6E16               	movwf	?_Read_b_eep,c
 10858  0017A0  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10859  0017A4  D329               	goto	L17
 10860  0017A6                     l12351:
 10861                           
 10862                           ; BSR set to: 0
 10863                           ;main.c: 2383: (Busy_eep(), Write_b_eep(0x83,val));
 10864  0017A6  EC3D  F030         	call	_Busy_eep	;wreg free
 10865  0017AA  6A0F               	clrf	?_Write_b_eep+1,c
 10866  0017AC  0E83               	movlw	131
 10867  0017AE  6E0E               	movwf	?_Write_b_eep,c
 10868  0017B0  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10869  0017B4  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10870                           
 10871                           ;main.c: 2384: rv = Read_b_eep(0x83);
 10872  0017B8  6A17               	clrf	?_Read_b_eep+1,c
 10873  0017BA  0E83               	movlw	131
 10874  0017BC  6E16               	movwf	?_Read_b_eep,c
 10875  0017BE  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10876  0017C2  D31A               	goto	L17
 10877  0017C4                     l12357:
 10878                           
 10879                           ; BSR set to: 0
 10880                           ;main.c: 2389: (Busy_eep(), Write_b_eep(0x84,val));
 10881  0017C4  EC3D  F030         	call	_Busy_eep	;wreg free
 10882  0017C8  6A0F               	clrf	?_Write_b_eep+1,c
 10883  0017CA  0E84               	movlw	132
 10884  0017CC  6E0E               	movwf	?_Write_b_eep,c
 10885  0017CE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10886  0017D2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10887                           
 10888                           ;main.c: 2390: rv = Read_b_eep(0x84);
 10889  0017D6  6A17               	clrf	?_Read_b_eep+1,c
 10890  0017D8  0E84               	movlw	132
 10891  0017DA  6E16               	movwf	?_Read_b_eep,c
 10892  0017DC  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10893  0017E0  D30B               	goto	L17
 10894  0017E2                     l12363:
 10895                           
 10896                           ; BSR set to: 0
 10897                           ;main.c: 2395: (Busy_eep(), Write_b_eep(0x85,val));
 10898  0017E2  EC3D  F030         	call	_Busy_eep	;wreg free
 10899  0017E6  6A0F               	clrf	?_Write_b_eep+1,c
 10900  0017E8  0E85               	movlw	133
 10901  0017EA  6E0E               	movwf	?_Write_b_eep,c
 10902  0017EC  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10903  0017F0  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10904                           
 10905                           ;main.c: 2396: rv = Read_b_eep(0x85);
 10906  0017F4  6A17               	clrf	?_Read_b_eep+1,c
 10907  0017F6  0E85               	movlw	133
 10908  0017F8  6E16               	movwf	?_Read_b_eep,c
 10909  0017FA  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10910  0017FE  D2FC               	goto	L17
 10911  001800                     l12369:
 10912                           
 10913                           ; BSR set to: 0
 10914                           ;main.c: 2401: (Busy_eep(), Write_b_eep(0x86,val));
 10915  001800  EC3D  F030         	call	_Busy_eep	;wreg free
 10916  001804  6A0F               	clrf	?_Write_b_eep+1,c
 10917  001806  0E86               	movlw	134
 10918  001808  6E0E               	movwf	?_Write_b_eep,c
 10919  00180A  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10920  00180E  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10921                           
 10922                           ;main.c: 2402: rv = Read_b_eep(0x86);
 10923  001812  6A17               	clrf	?_Read_b_eep+1,c
 10924  001814  0E86               	movlw	134
 10925  001816  6E16               	movwf	?_Read_b_eep,c
 10926  001818  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10927  00181C  D2ED               	goto	L17
 10928  00181E                     l12375:
 10929                           
 10930                           ; BSR set to: 0
 10931                           ;main.c: 2407: (Busy_eep(), Write_b_eep(0x87,val));
 10932  00181E  EC3D  F030         	call	_Busy_eep	;wreg free
 10933  001822  6A0F               	clrf	?_Write_b_eep+1,c
 10934  001824  0E87               	movlw	135
 10935  001826  6E0E               	movwf	?_Write_b_eep,c
 10936  001828  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10937  00182C  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10938                           
 10939                           ;main.c: 2408: rv = Read_b_eep(0x87);
 10940  001830  6A17               	clrf	?_Read_b_eep+1,c
 10941  001832  0E87               	movlw	135
 10942  001834  6E16               	movwf	?_Read_b_eep,c
 10943  001836  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10944  00183A  D2DE               	goto	L17
 10945  00183C                     l12381:
 10946                           
 10947                           ; BSR set to: 0
 10948                           ;main.c: 2413: (Busy_eep(), Write_b_eep(0x88,val));
 10949  00183C  EC3D  F030         	call	_Busy_eep	;wreg free
 10950  001840  6A0F               	clrf	?_Write_b_eep+1,c
 10951  001842  0E88               	movlw	136
 10952  001844  6E0E               	movwf	?_Write_b_eep,c
 10953  001846  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10954  00184A  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10955                           
 10956                           ;main.c: 2414: rv = Read_b_eep(0x88);
 10957  00184E  6A17               	clrf	?_Read_b_eep+1,c
 10958  001850  0E88               	movlw	136
 10959  001852  6E16               	movwf	?_Read_b_eep,c
 10960  001854  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10961  001858  D2CF               	goto	L17
 10962  00185A                     l12387:
 10963                           
 10964                           ; BSR set to: 0
 10965                           ;main.c: 2419: (Busy_eep(), Write_b_eep(0x89,val));
 10966  00185A  EC3D  F030         	call	_Busy_eep	;wreg free
 10967  00185E  6A0F               	clrf	?_Write_b_eep+1,c
 10968  001860  0E89               	movlw	137
 10969  001862  6E0E               	movwf	?_Write_b_eep,c
 10970  001864  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10971  001868  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10972                           
 10973                           ;main.c: 2420: rv = Read_b_eep(0x89);
 10974  00186C  6A17               	clrf	?_Read_b_eep+1,c
 10975  00186E  0E89               	movlw	137
 10976  001870  6E16               	movwf	?_Read_b_eep,c
 10977  001872  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10978  001876  D2C0               	goto	L17
 10979  001878                     l12393:
 10980                           
 10981                           ; BSR set to: 0
 10982                           ;main.c: 2425: (Busy_eep(), Write_b_eep(0x8A,val));
 10983  001878  EC3D  F030         	call	_Busy_eep	;wreg free
 10984  00187C  6A0F               	clrf	?_Write_b_eep+1,c
 10985  00187E  0E8A               	movlw	138
 10986  001880  6E0E               	movwf	?_Write_b_eep,c
 10987  001882  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 10988  001886  ECC8  F02D         	call	_Write_b_eep	;wreg free
 10989                           
 10990                           ;main.c: 2426: rv = Read_b_eep(0x8A);
 10991  00188A  6A17               	clrf	?_Read_b_eep+1,c
 10992  00188C  0E8A               	movlw	138
 10993  00188E  6E16               	movwf	?_Read_b_eep,c
 10994  001890  ECC2  F02F         	call	_Read_b_eep	;wreg free
 10995  001894  D2B1               	goto	L17
 10996  001896                     l12399:
 10997                           
 10998                           ; BSR set to: 0
 10999                           ;main.c: 2435: (Busy_eep(), Write_b_eep(0x8B,val));
 11000  001896  EC3D  F030         	call	_Busy_eep	;wreg free
 11001  00189A  6A0F               	clrf	?_Write_b_eep+1,c
 11002  00189C  0E8B               	movlw	139
 11003  00189E  6E0E               	movwf	?_Write_b_eep,c
 11004  0018A0  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11005  0018A4  ECC8  F02D         	call	_Write_b_eep	;wreg free
 11006                           
 11007                           ;main.c: 2436: rv = Read_b_eep(0x8B);
 11008  0018A8  6A17               	clrf	?_Read_b_eep+1,c
 11009  0018AA  0E8B               	movlw	139
 11010  0018AC  6E16               	movwf	?_Read_b_eep,c
 11011  0018AE  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11012  0018B2  D2A2               	goto	L17
 11013  0018B4                     l12405:
 11014                           
 11015                           ; BSR set to: 0
 11016                           ;main.c: 2441: (Busy_eep(), Write_b_eep(0x8C,val));
 11017  0018B4  EC3D  F030         	call	_Busy_eep	;wreg free
 11018  0018B8  6A0F               	clrf	?_Write_b_eep+1,c
 11019  0018BA  0E8C               	movlw	140
 11020  0018BC  6E0E               	movwf	?_Write_b_eep,c
 11021  0018BE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11022  0018C2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 11023                           
 11024                           ;main.c: 2442: rv = Read_b_eep(0x8C);
 11025  0018C6  6A17               	clrf	?_Read_b_eep+1,c
 11026  0018C8  0E8C               	movlw	140
 11027  0018CA  6E16               	movwf	?_Read_b_eep,c
 11028  0018CC  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11029  0018D0  D293               	goto	L17
 11030  0018D2                     l12411:
 11031                           
 11032                           ; BSR set to: 0
 11033                           ;main.c: 2447: (Busy_eep(), Write_b_eep(0x8D,val));
 11034  0018D2  EC3D  F030         	call	_Busy_eep	;wreg free
 11035  0018D6  6A0F               	clrf	?_Write_b_eep+1,c
 11036  0018D8  0E8D               	movlw	141
 11037  0018DA  6E0E               	movwf	?_Write_b_eep,c
 11038  0018DC  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11039  0018E0  ECC8  F02D         	call	_Write_b_eep	;wreg free
 11040                           
 11041                           ;main.c: 2448: rv = Read_b_eep(0x8D);
 11042  0018E4  6A17               	clrf	?_Read_b_eep+1,c
 11043  0018E6  0E8D               	movlw	141
 11044  0018E8  6E16               	movwf	?_Read_b_eep,c
 11045  0018EA  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11046  0018EE  D284               	goto	L17
 11047  0018F0                     l12417:
 11048                           
 11049                           ; BSR set to: 0
 11050                           ;main.c: 2453: (Busy_eep(), Write_b_eep(0x8E,val));
 11051  0018F0  EC3D  F030         	call	_Busy_eep	;wreg free
 11052  0018F4  6A0F               	clrf	?_Write_b_eep+1,c
 11053  0018F6  0E8E               	movlw	142
 11054  0018F8  6E0E               	movwf	?_Write_b_eep,c
 11055  0018FA  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11056  0018FE  ECC8  F02D         	call	_Write_b_eep	;wreg free
 11057                           
 11058                           ;main.c: 2454: rv = Read_b_eep(0x8E);
 11059  001902  6A17               	clrf	?_Read_b_eep+1,c
 11060  001904  0E8E               	movlw	142
 11061  001906  6E16               	movwf	?_Read_b_eep,c
 11062  001908  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11063  00190C  D275               	goto	L17
 11064  00190E                     l12423:
 11065                           
 11066                           ; BSR set to: 0
 11067                           ;main.c: 2459: (Busy_eep(), Write_b_eep(0x8F,val));
 11068  00190E  EC3D  F030         	call	_Busy_eep	;wreg free
 11069  001912  6A0F               	clrf	?_Write_b_eep+1,c
 11070  001914  0E8F               	movlw	143
 11071  001916  6E0E               	movwf	?_Write_b_eep,c
 11072  001918  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11073  00191C  ECC8  F02D         	call	_Write_b_eep	;wreg free
 11074                           
 11075                           ;main.c: 2460: rv = Read_b_eep(0x8F);
 11076  001920  6A17               	clrf	?_Read_b_eep+1,c
 11077  001922  0E8F               	movlw	143
 11078  001924  6E16               	movwf	?_Read_b_eep,c
 11079  001926  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11080  00192A  D266               	goto	L17
 11081  00192C                     l12429:
 11082                           
 11083                           ; BSR set to: 0
 11084                           ;main.c: 2465: (Busy_eep(), Write_b_eep(0x90,val));
 11085  00192C  EC3D  F030         	call	_Busy_eep	;wreg free
 11086  001930  6A0F               	clrf	?_Write_b_eep+1,c
 11087  001932  0E90               	movlw	144
 11088  001934  6E0E               	movwf	?_Write_b_eep,c
 11089  001936  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11090  00193A  ECC8  F02D         	call	_Write_b_eep	;wreg free
 11091                           
 11092                           ;main.c: 2466: rv = Read_b_eep(0x90);
 11093  00193E  6A17               	clrf	?_Read_b_eep+1,c
 11094  001940  0E90               	movlw	144
 11095  001942  6E16               	movwf	?_Read_b_eep,c
 11096  001944  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11097  001948  D257               	goto	L17
 11098  00194A                     l12435:
 11099                           
 11100                           ; BSR set to: 0
 11101                           ;main.c: 2471: (Busy_eep(), Write_b_eep(0x91,val));
 11102  00194A  EC3D  F030         	call	_Busy_eep	;wreg free
 11103  00194E  6A0F               	clrf	?_Write_b_eep+1,c
 11104  001950  0E91               	movlw	145
 11105  001952  6E0E               	movwf	?_Write_b_eep,c
 11106  001954  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11107  001958  ECC8  F02D         	call	_Write_b_eep	;wreg free
 11108                           
 11109                           ;main.c: 2472: rv = Read_b_eep(0x91);
 11110  00195C  6A17               	clrf	?_Read_b_eep+1,c
 11111  00195E  0E91               	movlw	145
 11112  001960  6E16               	movwf	?_Read_b_eep,c
 11113  001962  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11114  001966  D248               	goto	L17
 11115  001968                     l12441:
 11116                           
 11117                           ; BSR set to: 0
 11118                           ;main.c: 2477: (Busy_eep(), Write_b_eep(0x92,val));
 11119  001968  EC3D  F030         	call	_Busy_eep	;wreg free
 11120  00196C  6A0F               	clrf	?_Write_b_eep+1,c
 11121  00196E  0E92               	movlw	146
 11122  001970  6E0E               	movwf	?_Write_b_eep,c
 11123  001972  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11124  001976  ECC8  F02D         	call	_Write_b_eep	;wreg free
 11125                           
 11126                           ;main.c: 2478: rv = Read_b_eep(0x92);
 11127  00197A  6A17               	clrf	?_Read_b_eep+1,c
 11128  00197C  0E92               	movlw	146
 11129  00197E  6E16               	movwf	?_Read_b_eep,c
 11130  001980  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11131  001984  D239               	goto	L17
 11132  001986                     l12447:
 11133                           
 11134                           ; BSR set to: 0
 11135                           ;main.c: 2483: (Busy_eep(), Write_b_eep(0x93,val));
 11136  001986  EC3D  F030         	call	_Busy_eep	;wreg free
 11137  00198A  6A0F               	clrf	?_Write_b_eep+1,c
 11138  00198C  0E93               	movlw	147
 11139  00198E  6E0E               	movwf	?_Write_b_eep,c
 11140  001990  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11141  001994  ECC8  F02D         	call	_Write_b_eep	;wreg free
 11142                           
 11143                           ;main.c: 2484: rv = Read_b_eep(0x93);
 11144  001998  6A17               	clrf	?_Read_b_eep+1,c
 11145  00199A  0E93               	movlw	147
 11146  00199C  6E16               	movwf	?_Read_b_eep,c
 11147  00199E  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11148  0019A2  D22A               	goto	L17
 11149  0019A4                     l12453:
 11150                           
 11151                           ; BSR set to: 0
 11152                           ;main.c: 2489: (Busy_eep(), Write_b_eep(0x94,val));
 11153  0019A4  EC3D  F030         	call	_Busy_eep	;wreg free
 11154  0019A8  6A0F               	clrf	?_Write_b_eep+1,c
 11155  0019AA  0E94               	movlw	148
 11156  0019AC  6E0E               	movwf	?_Write_b_eep,c
 11157  0019AE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11158  0019B2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 11159                           
 11160                           ;main.c: 2490: rv = Read_b_eep(0x94);
 11161  0019B6  6A17               	clrf	?_Read_b_eep+1,c
 11162  0019B8  0E94               	movlw	148
 11163  0019BA  6E16               	movwf	?_Read_b_eep,c
 11164  0019BC  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11165  0019C0  D21B               	goto	L17
 11166  0019C2                     l12459:
 11167                           
 11168                           ; BSR set to: 0
 11169                           ;main.c: 2495: (Busy_eep(), Write_b_eep(0x95,val));
 11170  0019C2  EC3D  F030         	call	_Busy_eep	;wreg free
 11171  0019C6  6A0F               	clrf	?_Write_b_eep+1,c
 11172  0019C8  0E95               	movlw	149
 11173  0019CA  6E0E               	movwf	?_Write_b_eep,c
 11174  0019CC  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11175  0019D0  ECC8  F02D         	call	_Write_b_eep	;wreg free
 11176                           
 11177                           ;main.c: 2496: rv = Read_b_eep(0x95);
 11178  0019D4  6A17               	clrf	?_Read_b_eep+1,c
 11179  0019D6  0E95               	movlw	149
 11180  0019D8  6E16               	movwf	?_Read_b_eep,c
 11181  0019DA  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11182  0019DE  D20C               	goto	L17
 11183  0019E0                     l12465:
 11184                           
 11185                           ; BSR set to: 0
 11186                           ;main.c: 2501: (Busy_eep(), Write_b_eep(0x96,val));
 11187  0019E0  EC3D  F030         	call	_Busy_eep	;wreg free
 11188  0019E4  6A0F               	clrf	?_Write_b_eep+1,c
 11189  0019E6  0E96               	movlw	150
 11190  0019E8  6E0E               	movwf	?_Write_b_eep,c
 11191  0019EA  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11192  0019EE  ECC8  F02D         	call	_Write_b_eep	;wreg free
 11193                           
 11194                           ;main.c: 2502: rv = Read_b_eep(0x96);
 11195  0019F2  6A17               	clrf	?_Read_b_eep+1,c
 11196  0019F4  0E96               	movlw	150
 11197  0019F6  6E16               	movwf	?_Read_b_eep,c
 11198  0019F8  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11199  0019FC  D1FD               	goto	L17
 11200  0019FE                     l12471:
 11201                           
 11202                           ; BSR set to: 0
 11203                           ;main.c: 2511: (Busy_eep(), Write_b_eep(0x97,val));
 11204  0019FE  EC3D  F030         	call	_Busy_eep	;wreg free
 11205  001A02  6A0F               	clrf	?_Write_b_eep+1,c
 11206  001A04  0E97               	movlw	151
 11207  001A06  6E0E               	movwf	?_Write_b_eep,c
 11208  001A08  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11209  001A0C  ECC8  F02D         	call	_Write_b_eep	;wreg free
 11210                           
 11211                           ;main.c: 2512: rv = Read_b_eep(0x97);
 11212  001A10  6A17               	clrf	?_Read_b_eep+1,c
 11213  001A12  0E97               	movlw	151
 11214  001A14  6E16               	movwf	?_Read_b_eep,c
 11215  001A16  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11216  001A1A  D1EE               	goto	L17
 11217  001A1C                     l12477:
 11218                           
 11219                           ; BSR set to: 0
 11220                           ;main.c: 2517: (Busy_eep(), Write_b_eep(0x98,val));
 11221  001A1C  EC3D  F030         	call	_Busy_eep	;wreg free
 11222  001A20  6A0F               	clrf	?_Write_b_eep+1,c
 11223  001A22  0E98               	movlw	152
 11224  001A24  6E0E               	movwf	?_Write_b_eep,c
 11225  001A26  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11226  001A2A  ECC8  F02D         	call	_Write_b_eep	;wreg free
 11227                           
 11228                           ;main.c: 2518: rv = Read_b_eep(0x98);
 11229  001A2E  6A17               	clrf	?_Read_b_eep+1,c
 11230  001A30  0E98               	movlw	152
 11231  001A32  6E16               	movwf	?_Read_b_eep,c
 11232  001A34  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11233  001A38  D1DF               	goto	L17
 11234  001A3A                     l12483:
 11235                           
 11236                           ; BSR set to: 0
 11237                           ;main.c: 2523: (Busy_eep(), Write_b_eep(0x99,val));
 11238  001A3A  EC3D  F030         	call	_Busy_eep	;wreg free
 11239  001A3E  6A0F               	clrf	?_Write_b_eep+1,c
 11240  001A40  0E99               	movlw	153
 11241  001A42  6E0E               	movwf	?_Write_b_eep,c
 11242  001A44  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11243  001A48  ECC8  F02D         	call	_Write_b_eep	;wreg free
 11244  001A4C  6A17               	clrf	?_Read_b_eep+1,c
 11245  001A4E  0E99               	movlw	153
 11246  001A50  6E16               	movwf	?_Read_b_eep,c
 11247  001A52  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11248  001A56                     l520:
 11249                           
 11250                           ;main.c: 2528: (Busy_eep(), Write_b_eep(0x9A,val));
 11251  001A56  EC3D  F030         	call	_Busy_eep	;wreg free
 11252  001A5A  6A0F               	clrf	?_Write_b_eep+1,c
 11253  001A5C  0E9A               	movlw	154
 11254  001A5E  6E0E               	movwf	?_Write_b_eep,c
 11255  001A60  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11256  001A64  ECC8  F02D         	call	_Write_b_eep	;wreg free
 11257                           
 11258                           ;main.c: 2529: rv = Read_b_eep(0x9A);
 11259  001A68  6A17               	clrf	?_Read_b_eep+1,c
 11260  001A6A  0E9A               	movlw	154
 11261  001A6C  6E16               	movwf	?_Read_b_eep,c
 11262  001A6E  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11263  001A72  D1C2               	goto	L17
 11264  001A74                     l12493:
 11265                           
 11266                           ; BSR set to: 0
 11267                           ;main.c: 2534: (Busy_eep(), Write_b_eep(0x9B,val));
 11268  001A74  EC3D  F030         	call	_Busy_eep	;wreg free
 11269  001A78  6A0F               	clrf	?_Write_b_eep+1,c
 11270  001A7A  0E9B               	movlw	155
 11271  001A7C  6E0E               	movwf	?_Write_b_eep,c
 11272  001A7E  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11273  001A82  ECC8  F02D         	call	_Write_b_eep	;wreg free
 11274                           
 11275                           ;main.c: 2535: rv = Read_b_eep(0x9B);
 11276  001A86  6A17               	clrf	?_Read_b_eep+1,c
 11277  001A88  0E9B               	movlw	155
 11278  001A8A  6E16               	movwf	?_Read_b_eep,c
 11279  001A8C  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11280  001A90  D1B3               	goto	L17
 11281  001A92                     l12499:
 11282                           
 11283                           ; BSR set to: 0
 11284                           ;main.c: 2540: (Busy_eep(), Write_b_eep(0x9C,val));
 11285  001A92  EC3D  F030         	call	_Busy_eep	;wreg free
 11286  001A96  6A0F               	clrf	?_Write_b_eep+1,c
 11287  001A98  0E9C               	movlw	156
 11288  001A9A  6E0E               	movwf	?_Write_b_eep,c
 11289  001A9C  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11290  001AA0  ECC8  F02D         	call	_Write_b_eep	;wreg free
 11291                           
 11292                           ;main.c: 2541: rv = Read_b_eep(0x9C);
 11293  001AA4  6A17               	clrf	?_Read_b_eep+1,c
 11294  001AA6  0E9C               	movlw	156
 11295  001AA8  6E16               	movwf	?_Read_b_eep,c
 11296  001AAA  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11297  001AAE  D1A4               	goto	L17
 11298  001AB0                     l523:
 11299                           
 11300                           ; BSR set to: 0
 11301                           ;main.c: 2546: rv = 0;
 11302  001AB0  6A24               	clrf	vscp_writeAppReg@rv,c
 11303                           
 11304                           ;main.c: 2547: break;
 11305  001AB2  D1A3               	goto	l12555
 11306  001AB4                     l12505:
 11307                           
 11308                           ; BSR set to: 0
 11309                           ;main.c: 2556: (Busy_eep(), Write_b_eep(0xF2,val));
 11310  001AB4  EC3D  F030         	call	_Busy_eep	;wreg free
 11311  001AB8  6A0F               	clrf	?_Write_b_eep+1,c
 11312  001ABA  0EF2               	movlw	242
 11313  001ABC  6E0E               	movwf	?_Write_b_eep,c
 11314  001ABE  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11315  001AC2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 11316                           
 11317                           ;main.c: 2557: rv = Read_b_eep(0xF2);
 11318  001AC6  6A17               	clrf	?_Read_b_eep+1,c
 11319  001AC8  0EF2               	movlw	242
 11320  001ACA  6E16               	movwf	?_Read_b_eep,c
 11321  001ACC  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11322  001AD0  D193               	goto	L17
 11323  001AD2                     l12511:
 11324                           
 11325                           ; BSR set to: 0
 11326                           ;main.c: 2562: (Busy_eep(), Write_b_eep(0xF3,val));
 11327  001AD2  EC3D  F030         	call	_Busy_eep	;wreg free
 11328  001AD6  6A0F               	clrf	?_Write_b_eep+1,c
 11329  001AD8  0EF3               	movlw	243
 11330  001ADA  6E0E               	movwf	?_Write_b_eep,c
 11331  001ADC  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11332  001AE0  ECC8  F02D         	call	_Write_b_eep	;wreg free
 11333                           
 11334                           ;main.c: 2563: rv = Read_b_eep(0xF3);
 11335  001AE4  6A17               	clrf	?_Read_b_eep+1,c
 11336  001AE6  0EF3               	movlw	243
 11337  001AE8  6E16               	movwf	?_Read_b_eep,c
 11338  001AEA  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11339  001AEE  D184               	goto	L17
 11340  001AF0                     l12517:
 11341                           
 11342                           ; BSR set to: 0
 11343                           ;main.c: 2567: rv = ~val;
 11344  001AF0  1C21               	comf	vscp_writeAppReg@val,w,c
 11345  001AF2  D182               	goto	L17
 11346  001AF4                     l12521:
 11347                           
 11348                           ; BSR set to: 0
 11349  001AF4  5023               	movf	vscp_writeAppReg@reg,w,c
 11350                           
 11351                           ; Switch size 1, requested type "space"
 11352                           ; Number of cases is 96, Range of values is 0 to 119
 11353                           ; switch strategies available:
 11354                           ; Name         Instructions Cycles
 11355                           ; simple_byte          289   145 (average)
 11356                           ;	Chosen strategy is simple_byte
 11357  001AF6  E102 EFC2  F007    	bz	l11955
 11358  001AFC  0A01               	xorlw	1	; case 1
 11359  001AFE  E102 EFD2  F007    	bz	l11961
 11360  001B04  0A03               	xorlw	3	; case 2
 11361  001B06  E102 EFE2  F007    	bz	l11967
 11362  001B0C  0A01               	xorlw	1	; case 3
 11363  001B0E  E102 EFF2  F007    	bz	l11973
 11364  001B14  0A07               	xorlw	7	; case 4
 11365  001B16  E102 EF02  F008    	bz	l11979
 11366  001B1C  0A01               	xorlw	1	; case 5
 11367  001B1E  E102 EF12  F008    	bz	l11985
 11368  001B24  0A03               	xorlw	3	; case 6
 11369  001B26  E102 EF22  F008    	bz	l11991
 11370  001B2C  0A01               	xorlw	1	; case 7
 11371  001B2E  E102 EF32  F008    	bz	l11997
 11372  001B34  0A13               	xorlw	19	; case 20
 11373  001B36  E102 EF42  F008    	bz	l12003
 11374  001B3C  0A01               	xorlw	1	; case 21
 11375  001B3E  E102 EF52  F008    	bz	l12009
 11376  001B44  0A03               	xorlw	3	; case 22
 11377  001B46  E102 EF62  F008    	bz	l12015
 11378  001B4C  0A01               	xorlw	1	; case 23
 11379  001B4E  E102 EF72  F008    	bz	l12021
 11380  001B54  0A0F               	xorlw	15	; case 24
 11381  001B56  E102 EF82  F008    	bz	l12027
 11382  001B5C  0A01               	xorlw	1	; case 25
 11383  001B5E  E102 EF92  F008    	bz	l12033
 11384  001B64  0A3F               	xorlw	63	; case 38
 11385  001B66  E102 EFA2  F008    	bz	l12039
 11386  001B6C  0A01               	xorlw	1	; case 39
 11387  001B6E  E102 EFB2  F008    	bz	l12045
 11388  001B74  0A0F               	xorlw	15	; case 40
 11389  001B76  E102 EFC2  F008    	bz	l12051
 11390  001B7C  0A01               	xorlw	1	; case 41
 11391  001B7E  E102 EFD2  F008    	bz	l12057
 11392  001B84  0A03               	xorlw	3	; case 42
 11393  001B86  E102 EFE2  F008    	bz	l12063
 11394  001B8C  0A01               	xorlw	1	; case 43
 11395  001B8E  E102 EFF2  F008    	bz	l12069
 11396  001B94  0A07               	xorlw	7	; case 44
 11397  001B96  E102 EF02  F009    	bz	l12075
 11398  001B9C  0A01               	xorlw	1	; case 45
 11399  001B9E  E102 EF12  F009    	bz	l12081
 11400  001BA4  0A03               	xorlw	3	; case 46
 11401  001BA6  E102 EF22  F009    	bz	l12087
 11402  001BAC  0A01               	xorlw	1	; case 47
 11403  001BAE  E102 EF32  F009    	bz	l12093
 11404  001BB4  0A1F               	xorlw	31	; case 48
 11405  001BB6  E102 EF42  F009    	bz	l12099
 11406  001BBC  0A01               	xorlw	1	; case 49
 11407  001BBE  E102 EF52  F009    	bz	l12105
 11408  001BC4  0A03               	xorlw	3	; case 50
 11409  001BC6  E102 EF62  F009    	bz	l12111
 11410  001BCC  0A01               	xorlw	1	; case 51
 11411  001BCE  E102 EF72  F009    	bz	l12117
 11412  001BD4  0A07               	xorlw	7	; case 52
 11413  001BD6  E102 EF82  F009    	bz	l12123
 11414  001BDC  0A01               	xorlw	1	; case 53
 11415  001BDE  E102 EF92  F009    	bz	l12129
 11416  001BE4  0A03               	xorlw	3	; case 54
 11417  001BE6  E102 EFA2  F009    	bz	l12135
 11418  001BEC  0A01               	xorlw	1	; case 55
 11419  001BEE  E102 EFB2  F009    	bz	l12141
 11420  001BF4  0A0F               	xorlw	15	; case 56
 11421  001BF6  E102 EFC2  F009    	bz	l12147
 11422  001BFC  0A01               	xorlw	1	; case 57
 11423  001BFE  E102 EFD2  F009    	bz	l12153
 11424  001C04  0A03               	xorlw	3	; case 58
 11425  001C06  E102 EFE2  F009    	bz	l12159
 11426  001C0C  0A01               	xorlw	1	; case 59
 11427  001C0E  E102 EFF2  F009    	bz	l12165
 11428  001C14  0A07               	xorlw	7	; case 60
 11429  001C16  E102 EF02  F00A    	bz	l12171
 11430  001C1C  0A01               	xorlw	1	; case 61
 11431  001C1E  E101 D401          	bz	l12177
 11432  001C22  0A03               	xorlw	3	; case 62
 11433  001C24  E101 D40E          	bz	l12183
 11434  001C28  0A01               	xorlw	1	; case 63
 11435  001C2A  E101 D41B          	bz	l12189
 11436  001C2E  0A7F               	xorlw	127	; case 64
 11437  001C30  E101 D428          	bz	l12195
 11438  001C34  0A01               	xorlw	1	; case 65
 11439  001C36  E101 D435          	bz	l12201
 11440  001C3A  0A03               	xorlw	3	; case 66
 11441  001C3C  E101 D442          	bz	l12207
 11442  001C40  0A01               	xorlw	1	; case 67
 11443  001C42  E101 D44F          	bz	l12213
 11444  001C46  0A07               	xorlw	7	; case 68
 11445  001C48  E101 D45C          	bz	l12219
 11446  001C4C  0A01               	xorlw	1	; case 69
 11447  001C4E  E101 D469          	bz	l12225
 11448  001C52  0A03               	xorlw	3	; case 70
 11449  001C54  E101 D476          	bz	l12231
 11450  001C58  0A01               	xorlw	1	; case 71
 11451  001C5A  E101 D483          	bz	l12237
 11452  001C5E  0A0F               	xorlw	15	; case 72
 11453  001C60  E101 D490          	bz	l12243
 11454  001C64  0A01               	xorlw	1	; case 73
 11455  001C66  E101 D49D          	bz	l12249
 11456  001C6A  0A03               	xorlw	3	; case 74
 11457  001C6C  E101 D4AA          	bz	l12255
 11458  001C70  0A01               	xorlw	1	; case 75
 11459  001C72  E101 D4B7          	bz	l12261
 11460  001C76  0A07               	xorlw	7	; case 76
 11461  001C78  E101 D4C3          	bz	l12267
 11462  001C7C  0A01               	xorlw	1	; case 77
 11463  001C7E  E101 D4CF          	bz	l12273
 11464  001C82  0A03               	xorlw	3	; case 78
 11465  001C84  E101 D4DB          	bz	l12279
 11466  001C88  0A01               	xorlw	1	; case 79
 11467  001C8A  E101 D4E7          	bz	l12285
 11468  001C8E  0A1F               	xorlw	31	; case 80
 11469  001C90  E101 D4F3          	bz	l12291
 11470  001C94  0A01               	xorlw	1	; case 81
 11471  001C96  E101 D4FF          	bz	l12297
 11472  001C9A  0A03               	xorlw	3	; case 82
 11473  001C9C  E101 D50B          	bz	l12303
 11474  001CA0  0A01               	xorlw	1	; case 83
 11475  001CA2  E101 D517          	bz	l12309
 11476  001CA6  0A07               	xorlw	7	; case 84
 11477  001CA8  E101 D523          	bz	l12315
 11478  001CAC  0A01               	xorlw	1	; case 85
 11479  001CAE  E101 D52F          	bz	l12321
 11480  001CB2  0A03               	xorlw	3	; case 86
 11481  001CB4  E101 D53B          	bz	l12327
 11482  001CB8  0A01               	xorlw	1	; case 87
 11483  001CBA  E101 D547          	bz	l12333
 11484  001CBE  0A0F               	xorlw	15	; case 88
 11485  001CC0  E101 D553          	bz	l12339
 11486  001CC4  0A01               	xorlw	1	; case 89
 11487  001CC6  E101 D55F          	bz	l12345
 11488  001CCA  0A03               	xorlw	3	; case 90
 11489  001CCC  E101 D56B          	bz	l12351
 11490  001CD0  0A01               	xorlw	1	; case 91
 11491  001CD2  E101 D577          	bz	l12357
 11492  001CD6  0A07               	xorlw	7	; case 92
 11493  001CD8  E101 D583          	bz	l12363
 11494  001CDC  0A01               	xorlw	1	; case 93
 11495  001CDE  E101 D58F          	bz	l12369
 11496  001CE2  0A03               	xorlw	3	; case 94
 11497  001CE4  E101 D59B          	bz	l12375
 11498  001CE8  0A01               	xorlw	1	; case 95
 11499  001CEA  E101 D5A7          	bz	l12381
 11500  001CEE  0A3F               	xorlw	63	; case 96
 11501  001CF0  E101 D5B3          	bz	l12387
 11502  001CF4  0A01               	xorlw	1	; case 97
 11503  001CF6  E101 D5BF          	bz	l12393
 11504  001CFA  0A03               	xorlw	3	; case 98
 11505  001CFC  E101 D5CB          	bz	l12399
 11506  001D00  0A01               	xorlw	1	; case 99
 11507  001D02  E101 D5D7          	bz	l12405
 11508  001D06  0A07               	xorlw	7	; case 100
 11509  001D08  E101 D5E3          	bz	l12411
 11510  001D0C  0A01               	xorlw	1	; case 101
 11511  001D0E  E101 D5EF          	bz	l12417
 11512  001D12  0A03               	xorlw	3	; case 102
 11513  001D14  E101 D5FB          	bz	l12423
 11514  001D18  0A01               	xorlw	1	; case 103
 11515  001D1A  E101 D607          	bz	l12429
 11516  001D1E  0A0F               	xorlw	15	; case 104
 11517  001D20  E101 D613          	bz	l12435
 11518  001D24  0A01               	xorlw	1	; case 105
 11519  001D26  E101 D61F          	bz	l12441
 11520  001D2A  0A03               	xorlw	3	; case 106
 11521  001D2C  E101 D62B          	bz	l12447
 11522  001D30  0A01               	xorlw	1	; case 107
 11523  001D32  E101 D637          	bz	l12453
 11524  001D36  0A07               	xorlw	7	; case 108
 11525  001D38  E101 D643          	bz	l12459
 11526  001D3C  0A01               	xorlw	1	; case 109
 11527  001D3E  E101 D64F          	bz	l12465
 11528  001D42  0A03               	xorlw	3	; case 110
 11529  001D44  E101 D65B          	bz	l12471
 11530  001D48  0A01               	xorlw	1	; case 111
 11531  001D4A  E101 D667          	bz	l12477
 11532  001D4E  0A1F               	xorlw	31	; case 112
 11533  001D50  E101 D673          	bz	l12483
 11534  001D54  0A01               	xorlw	1	; case 113
 11535  001D56  E101 D67E          	bz	l520
 11536  001D5A  0A03               	xorlw	3	; case 114
 11537  001D5C  E101 D68A          	bz	l12493
 11538  001D60  0A01               	xorlw	1	; case 115
 11539  001D62  E101 D696          	bz	l12499
 11540  001D66  0A07               	xorlw	7	; case 116
 11541  001D68  E101 D6A2          	bz	l523
 11542  001D6C  0A01               	xorlw	1	; case 117
 11543  001D6E  E101 D69F          	bz	l523
 11544  001D72  0A03               	xorlw	3	; case 118
 11545  001D74  E101 D69E          	bz	l12505
 11546  001D78  0A01               	xorlw	1	; case 119
 11547  001D7A  E101 D6AA          	bz	l12511
 11548  001D7E  D6B8               	goto	l12517
 11549  001D80                     l12523:
 11550                           
 11551                           ; BSR set to: 0
 11552                           ;main.c: 2571: else if (1 == vscp_page_select) {
 11553  001D80  0446               	decf	_vscp_page_select,w,c
 11554  001D82  1047               	iorwf	_vscp_page_select+1,w,c
 11555  001D84  E13A               	bnz	l12555
 11556                           
 11557                           ; BSR set to: 0
 11558                           ;main.c: 2574: if (reg < 72) {
 11559  001D86  0E48               	movlw	72
 11560  001D88  6023               	cpfslt	vscp_writeAppReg@reg,c
 11561  001D8A  D012               	goto	l12535
 11562                           
 11563                           ; BSR set to: 0
 11564                           ;main.c: 2575: (Busy_eep(), Write_b_eep(0xAA + reg,val));
 11565  001D8C  EC3D  F030         	call	_Busy_eep	;wreg free
 11566  001D90  0EAA               	movlw	170
 11567  001D92  D835               	call	PL60	;call to abstracted procedure
 11568  001D94  ECC8  F02D         	call	_Write_b_eep	;wreg free
 11569                           
 11570                           ;main.c: 2576: rv = Read_b_eep(0xAA + reg);
 11571  001D98  0EAA               	movlw	170
 11572  001D9A  2423               	addwf	vscp_writeAppReg@reg,w,c
 11573  001D9C  6E16               	movwf	?_Read_b_eep,c
 11574  001D9E  6A17               	clrf	?_Read_b_eep+1,c
 11575  001DA0  0E00               	movlw	0
 11576  001DA2  2217               	addwfc	?_Read_b_eep+1,f,c
 11577  001DA4  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11578  001DA8  6E24               	movwf	vscp_writeAppReg@rv,c
 11579                           
 11580                           ;main.c: 2577: writeCoeffs2Ram();
 11581  001DAA  EC5E  F029         	call	_writeCoeffs2Ram	;wreg free
 11582                           
 11583                           ;main.c: 2578: }
 11584  001DAE  D025               	goto	l12555
 11585  001DB0                     l12535:
 11586                           
 11587                           ; BSR set to: 0
 11588                           ;main.c: 2580: else if (reg < 84) {
 11589  001DB0  0E54               	movlw	84
 11590  001DB2  6023               	cpfslt	vscp_writeAppReg@reg,c
 11591  001DB4  D010               	goto	l12547
 11592                           
 11593                           ; BSR set to: 0
 11594                           ;main.c: 2582: uint8_t pos = reg - 72;
 11595  001DB6  5023               	movf	vscp_writeAppReg@reg,w,c
 11596  001DB8  0FB8               	addlw	184
 11597  001DBA  6E22               	movwf	vscp_writeAppReg@pos,c
 11598                           
 11599                           ; BSR set to: 0
 11600                           ;main.c: 2583: if ( pos % 2 ) {
 11601  001DBC  A022               	btfss	vscp_writeAppReg@pos,0,c
 11602  001DBE  D002               	goto	l12543
 11603                           
 11604                           ; BSR set to: 0
 11605                           ;main.c: 2584: pos--;
 11606  001DC0  0622               	decf	vscp_writeAppReg@pos,f,c
 11607                           
 11608                           ;main.c: 2585: }
 11609  001DC2  D001               	goto	l12545
 11610  001DC4                     l12543:
 11611                           
 11612                           ; BSR set to: 0
 11613                           ;main.c: 2586: else {
 11614                           ;main.c: 2587: pos++;
 11615  001DC4  2A22               	incf	vscp_writeAppReg@pos,f,c
 11616  001DC6                     l12545:
 11617                           
 11618                           ; BSR set to: 0
 11619                           ;main.c: 2588: }
 11620                           ;main.c: 2589: rv = adc[ pos ];
 11621  001DC6  0E9E               	movlw	low _adc
 11622  001DC8  2422               	addwf	vscp_writeAppReg@pos,w,c
 11623  001DCA  6ED9               	movwf	fsr2l,c
 11624  001DCC  6ADA               	clrf	fsr2h,c
 11625  001DCE  0E01               	movlw	high _adc
 11626  001DD0  22DA               	addwfc	fsr2h,f,c
 11627  001DD2  50DF               	movf	indf2,w,c
 11628  001DD4  D011               	goto	L17
 11629  001DD6                     l12547:
 11630                           
 11631                           ; BSR set to: 0
 11632                           ;main.c: 2592: else if (reg < 98) {
 11633  001DD6  0E62               	movlw	98
 11634  001DD8  6023               	cpfslt	vscp_writeAppReg@reg,c
 11635  001DDA  D00F               	goto	l12555
 11636                           
 11637                           ; BSR set to: 0
 11638                           ;main.c: 2593: (Busy_eep(), Write_b_eep(0x9E + reg - 84,val));
 11639  001DDC  EC3D  F030         	call	_Busy_eep	;wreg free
 11640  001DE0  0E4A               	movlw	74
 11641  001DE2  D80D               	call	PL60	;call to abstracted procedure
 11642  001DE4  ECC8  F02D         	call	_Write_b_eep	;wreg free
 11643                           
 11644                           ;main.c: 2594: rv = Read_b_eep(0x9E + reg - 84) ;
 11645  001DE8  0E4A               	movlw	74
 11646  001DEA  2423               	addwf	vscp_writeAppReg@reg,w,c
 11647  001DEC  6E16               	movwf	?_Read_b_eep,c
 11648  001DEE  6A17               	clrf	?_Read_b_eep+1,c
 11649  001DF0  0E00               	movlw	0
 11650  001DF2  2217               	addwfc	?_Read_b_eep+1,f,c
 11651  001DF4  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11652  001DF8                     L17:
 11653  001DF8  6E24               	movwf	vscp_writeAppReg@rv,c
 11654  001DFA                     l12555:
 11655                           
 11656                           ;main.c: 2595: }
 11657                           ;main.c: 2596: }
 11658                           ;main.c: 2598: return rv;
 11659  001DFA  5024               	movf	vscp_writeAppReg@rv,w,c
 11660  001DFC  0012               	return	
 11661  001DFE                     __end_of_vscp_writeAppReg:
 11662                           	opt stack 0
 11663  001DFE                     PL60:
 11664                           	opt stack 24
 11665  001DFE  2423               	addwf	vscp_writeAppReg@reg,w,c
 11666  001E00  6E0E               	movwf	?_Write_b_eep,c
 11667  001E02  6A0F               	clrf	?_Write_b_eep+1,c
 11668  001E04  0E00               	movlw	0
 11669  001E06  220F               	addwfc	?_Write_b_eep+1,f,c
 11670  001E08  C021  F010         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
 11671  001E0C  0C00               	retlw	0
 11672  001E0E                     __end_ofPL60:
 11673                           	opt stack 0
 11674                           tblptru	equ	0xFF8
 11675                           tblptrh	equ	0xFF7
 11676                           tblptrl	equ	0xFF6
 11677                           tablat	equ	0xFF5
 11678                           prodh	equ	0xFF4
 11679                           prodl	equ	0xFF3
 11680                           intcon	equ	0xFF2
 11681                           postinc0	equ	0xFEE
 11682                           wreg	equ	0xFE8
 11683                           indf1	equ	0xFE7
 11684                           postdec1	equ	0xFE5
 11685                           fsr1h	equ	0xFE2
 11686                           fsr1l	equ	0xFE1
 11687                           indf2	equ	0xFDF
 11688                           postinc2	equ	0xFDE
 11689                           postdec2	equ	0xFDD
 11690                           plusw2	equ	0xFDB
 11691                           fsr2h	equ	0xFDA
 11692                           fsr2l	equ	0xFD9
 11693                           status	equ	0xFD8
 11694                           
 11695 ;; *************** function _writeCoeffs2Ram *****************
 11696 ;; Defined at:
 11697 ;;		line 1014 in file "../main.c"
 11698 ;; Parameters:    Size  Location     Type
 11699 ;;		None
 11700 ;; Auto vars:     Size  Location     Type
 11701 ;;  c               3   25[COMRAM] unsigned char [3]
 11702 ;;  j               2   30[COMRAM] int 
 11703 ;;  i               2   28[COMRAM] int 
 11704 ;; Return value:  Size  Location     Type
 11705 ;;		None               void
 11706 ;; Registers used:
 11707 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11708 ;; Tracked objects:
 11709 ;;		On entry : 0/0
 11710 ;;		On exit  : F/1
 11711 ;;		Unchanged: 0/0
 11712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11714 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11715 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11716 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11717 ;;Total ram usage:        9 bytes
 11718 ;; Hardware stack levels used:    1
 11719 ;; Hardware stack levels required when called:    3
 11720 ;; This function calls:
 11721 ;;		_Read_b_eep
 11722 ;;		___wmul
 11723 ;; This function is called by:
 11724 ;;		_vscp_writeAppReg
 11725 ;; This function uses a non-reentrant model
 11726 ;;
 11727                           
 11728                           	psect	text42
 11729  0052BC                     __ptext42:
 11730                           	opt stack 0
 11731  0052BC                     _writeCoeffs2Ram:
 11732                           	opt stack 24
 11733                           
 11734                           ;main.c: 1015: int i, j;
 11735                           ;main.c: 1016: uint8_t c[3];
 11736                           ;main.c: 1018: for (i = 0; i < 6; i++) {
 11737                           
 11738                           ;incstack = 0
 11739                           ;incstack = 0
 11740  0052BC  6A1D               	clrf	writeCoeffs2Ram@i,c
 11741  0052BE  6A1E               	clrf	writeCoeffs2Ram@i+1,c
 11742  0052C0                     l11699:
 11743                           
 11744                           ;main.c: 1019: for (j = 2; j > 0; j--) {
 11745  0052C0  6A20               	clrf	writeCoeffs2Ram@j+1,c
 11746  0052C2  0E02               	movlw	2
 11747  0052C4  6E1F               	movwf	writeCoeffs2Ram@j,c
 11748  0052C6                     l11705:
 11749                           
 11750                           ;main.c: 1021: c[2 - j] = Read_b_eep(0xAA + i * 3 + j);
 11751  0052C6  501F               	movf	writeCoeffs2Ram@j,w,c
 11752  0052C8  0802               	sublw	2
 11753  0052CA  6E18               	movwf	??_writeCoeffs2Ram& (0+255),c
 11754  0052CC  5018               	movf	??_writeCoeffs2Ram,w,c
 11755  0052CE  0F1A               	addlw	low writeCoeffs2Ram@c
 11756  0052D0  6ED9               	movwf	fsr2l,c
 11757  0052D2  6ADA               	clrf	fsr2h,c
 11758  0052D4  C01D  F00E         	movff	writeCoeffs2Ram@i,?___wmul
 11759  0052D8  C01E  F00F         	movff	writeCoeffs2Ram@i+1,?___wmul+1
 11760  0052DC  6A11               	clrf	?___wmul+3,c
 11761  0052DE  0E03               	movlw	3
 11762  0052E0  6E10               	movwf	?___wmul+2,c
 11763  0052E2  EC37  F02E         	call	___wmul	;wreg free
 11764  0052E6  501F               	movf	writeCoeffs2Ram@j,w,c
 11765  0052E8  260E               	addwf	?___wmul,f,c
 11766  0052EA  5020               	movf	writeCoeffs2Ram@j+1,w,c
 11767  0052EC  220F               	addwfc	?___wmul+1,f,c
 11768  0052EE  0EAA               	movlw	170
 11769  0052F0  240E               	addwf	?___wmul,w,c
 11770  0052F2  6E16               	movwf	?_Read_b_eep,c
 11771  0052F4  0E00               	movlw	0
 11772  0052F6  200F               	addwfc	?___wmul+1,w,c
 11773  0052F8  6E17               	movwf	?_Read_b_eep+1,c
 11774  0052FA  ECC2  F02F         	call	_Read_b_eep	;wreg free
 11775  0052FE  6EDF               	movwf	indf2,c
 11776  005300  061F               	decf	writeCoeffs2Ram@j,f,c
 11777  005302  A0D8               	btfss	status,0,c
 11778  005304  0620               	decf	writeCoeffs2Ram@j+1,f,c
 11779  005306  5020               	movf	writeCoeffs2Ram@j+1,w,c
 11780  005308  0A80               	xorlw	128
 11781  00530A  0F80               	addlw	-128
 11782  00530C  0E01               	movlw	1
 11783  00530E  B4D8               	btfsc	status,2,c
 11784  005310  5C1F               	subwf	writeCoeffs2Ram@j,w,c
 11785  005312  E2D9               	bc	l11705
 11786                           
 11787                           ;main.c: 1022: }
 11788                           ;main.c: 1023: sh_coefficients[i] = *((double*) c);
 11789  005314  C01D  F018         	movff	writeCoeffs2Ram@i,??_writeCoeffs2Ram
 11790  005318  C01E  F019         	movff	writeCoeffs2Ram@i+1,??_writeCoeffs2Ram+1
 11791  00531C  90D8               	bcf	status,0,c
 11792  00531E  3618               	rlcf	??_writeCoeffs2Ram,f,c
 11793  005320  3619               	rlcf	??_writeCoeffs2Ram+1,f,c
 11794  005322  90D8               	bcf	status,0,c
 11795  005324  3618               	rlcf	??_writeCoeffs2Ram,f,c
 11796  005326  3619               	rlcf	??_writeCoeffs2Ram+1,f,c
 11797  005328  0101               	movlb	1	; () banked
 11798  00532A  0E22               	movlw	low _sh_coefficients
 11799  00532C  2418               	addwf	??_writeCoeffs2Ram,w,c
 11800  00532E  6ED9               	movwf	fsr2l,c
 11801  005330  0E01               	movlw	high _sh_coefficients
 11802  005332  2019               	addwfc	??_writeCoeffs2Ram+1,w,c
 11803  005334  6EDA               	movwf	fsr2h,c
 11804  005336  C01A  FFDE         	movff	writeCoeffs2Ram@c,postinc2
 11805  00533A  C01B  FFDE         	movff	writeCoeffs2Ram@c+1,postinc2
 11806  00533E  C01C  FFDE         	movff	writeCoeffs2Ram@c+2,postinc2
 11807  005342  C01D  FFDE         	movff	writeCoeffs2Ram@c+3,postinc2
 11808                           
 11809                           ; BSR set to: 1
 11810  005346  4A1D               	infsnz	writeCoeffs2Ram@i,f,c
 11811  005348  2A1E               	incf	writeCoeffs2Ram@i+1,f,c
 11812                           
 11813                           ; BSR set to: 1
 11814  00534A  501E               	movf	writeCoeffs2Ram@i+1,w,c
 11815  00534C  0A80               	xorlw	128
 11816  00534E  0F80               	addlw	-128
 11817  005350  0E06               	movlw	6
 11818  005352  B4D8               	btfsc	status,2,c
 11819  005354  5C1D               	subwf	writeCoeffs2Ram@i,w,c
 11820  005356  B0D8               	btfsc	status,0,c
 11821  005358  0012               	return	
 11822  00535A  D7B2               	goto	l11699
 11823  00535C                     __end_of_writeCoeffs2Ram:
 11824                           	opt stack 0
 11825                           tblptru	equ	0xFF8
 11826                           tblptrh	equ	0xFF7
 11827                           tblptrl	equ	0xFF6
 11828                           tablat	equ	0xFF5
 11829                           prodh	equ	0xFF4
 11830                           prodl	equ	0xFF3
 11831                           intcon	equ	0xFF2
 11832                           postinc0	equ	0xFEE
 11833                           wreg	equ	0xFE8
 11834                           indf1	equ	0xFE7
 11835                           postdec1	equ	0xFE5
 11836                           fsr1h	equ	0xFE2
 11837                           fsr1l	equ	0xFE1
 11838                           indf2	equ	0xFDF
 11839                           postinc2	equ	0xFDE
 11840                           postdec2	equ	0xFDD
 11841                           plusw2	equ	0xFDB
 11842                           fsr2h	equ	0xFDA
 11843                           fsr2l	equ	0xFD9
 11844                           status	equ	0xFD8
 11845                           
 11846 ;; *************** function ___wmul *****************
 11847 ;; Defined at:
 11848 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/common/wmul.c"
 11849 ;; Parameters:    Size  Location     Type
 11850 ;;  multiplier      2   13[COMRAM] unsigned int 
 11851 ;;  multiplicand    2   15[COMRAM] unsigned int 
 11852 ;; Auto vars:     Size  Location     Type
 11853 ;;  product         2   19[COMRAM] unsigned int 
 11854 ;; Return value:  Size  Location     Type
 11855 ;;                  2   13[COMRAM] unsigned int 
 11856 ;; Registers used:
 11857 ;;		wreg, status,2, status,0, prodl, prodh
 11858 ;; Tracked objects:
 11859 ;;		On entry : 0/1
 11860 ;;		On exit  : 0/0
 11861 ;;		Unchanged: 0/0
 11862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11863 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11864 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11866 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11867 ;;Total ram usage:        8 bytes
 11868 ;; Hardware stack levels used:    1
 11869 ;; Hardware stack levels required when called:    2
 11870 ;; This function calls:
 11871 ;;		Nothing
 11872 ;; This function is called by:
 11873 ;;		_doOneSecondWork
 11874 ;;		_writeCoeffs2Ram
 11875 ;; This function uses a non-reentrant model
 11876 ;;
 11877                           
 11878                           	psect	text43
 11879  005C6E                     __ptext43:
 11880                           	opt stack 0
 11881  005C6E                     ___wmul:
 11882                           	opt stack 27
 11883                           
 11884                           ; BSR set to: 1
 11885                           ;incstack = 0
 11886                           ;incstack = 0
 11887  005C6E  500E               	movf	___wmul@multiplier,w,c
 11888  005C70  0210               	mulwf	___wmul@multiplicand,c
 11889  005C72  CFF3 F014          	movff	prodl,___wmul@product
 11890  005C76  CFF4 F015          	movff	prodh,___wmul@product+1
 11891  005C7A  500E               	movf	___wmul@multiplier,w,c
 11892  005C7C  0211               	mulwf	___wmul@multiplicand+1,c
 11893  005C7E  D808               	call	PL64	;call to abstracted procedure
 11894  005C80  500F               	movf	___wmul@multiplier+1,w,c
 11895  005C82  0210               	mulwf	___wmul@multiplicand,c
 11896  005C84  D805               	call	PL64	;call to abstracted procedure
 11897  005C86  C014  F00E         	movff	___wmul@product,?___wmul
 11898  005C8A  C015  F00F         	movff	___wmul@product+1,?___wmul+1
 11899  005C8E  0012               	return	
 11900  005C90                     __end_of___wmul:
 11901                           	opt stack 0
 11902  005C90                     PL64:
 11903                           	opt stack 27
 11904  005C90  CFF3 FFF4          	movff	prodl,prodh
 11905  005C94  6AF3               	clrf	prodl,c
 11906  005C96  50F3               	movf	prodl,w,c
 11907  005C98  2614               	addwf	___wmul@product,f,c
 11908  005C9A  50F4               	movf	prodh,w,c
 11909  005C9C  2215               	addwfc	___wmul@product+1,f,c
 11910  005C9E  0012               	return	
 11911  005CA0                     __end_ofPL64:
 11912                           	opt stack 0
 11913                           tblptru	equ	0xFF8
 11914                           tblptrh	equ	0xFF7
 11915                           tblptrl	equ	0xFF6
 11916                           tablat	equ	0xFF5
 11917                           prodh	equ	0xFF4
 11918                           prodl	equ	0xFF3
 11919                           intcon	equ	0xFF2
 11920                           postinc0	equ	0xFEE
 11921                           wreg	equ	0xFE8
 11922                           indf1	equ	0xFE7
 11923                           postdec1	equ	0xFE5
 11924                           fsr1h	equ	0xFE2
 11925                           fsr1l	equ	0xFE1
 11926                           indf2	equ	0xFDF
 11927                           postinc2	equ	0xFDE
 11928                           postdec2	equ	0xFDD
 11929                           plusw2	equ	0xFDB
 11930                           fsr2h	equ	0xFDA
 11931                           fsr2l	equ	0xFD9
 11932                           status	equ	0xFD8
 11933                           
 11934 ;; *************** function _vscp_readRegister *****************
 11935 ;; Defined at:
 11936 ;;		line 550 in file "../../vscp_firmware/common/vscp_firmware.c"
 11937 ;; Parameters:    Size  Location     Type
 11938 ;;  reg             1    wreg     unsigned char 
 11939 ;; Auto vars:     Size  Location     Type
 11940 ;;  reg             1   41[COMRAM] unsigned char 
 11941 ;; Return value:  Size  Location     Type
 11942 ;;                  1    wreg      unsigned char 
 11943 ;; Registers used:
 11944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11945 ;; Tracked objects:
 11946 ;;		On entry : F/0
 11947 ;;		On exit  : 0/0
 11948 ;;		Unchanged: 0/0
 11949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11951 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11953 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11954 ;;Total ram usage:        1 bytes
 11955 ;; Hardware stack levels used:    1
 11956 ;; Hardware stack levels required when called:    5
 11957 ;; This function calls:
 11958 ;;		_vscp_readAppReg
 11959 ;;		_vscp_readStdReg
 11960 ;; This function is called by:
 11961 ;;		_vscp_handleProtocolEvent
 11962 ;; This function uses a non-reentrant model
 11963 ;;
 11964                           
 11965                           	psect	text44
 11966  005FB4                     __ptext44:
 11967                           	opt stack 0
 11968  005FB4                     _vscp_readRegister:
 11969                           	opt stack 24
 11970                           
 11971                           ;incstack = 0
 11972                           ;incstack = 0
 11973                           ;vscp_readRegister@reg stored from wreg
 11974  005FB4  CFE8 F02A          	movff	wreg,vscp_readRegister@reg
 11975                           
 11976                           ; BSR set to: 0
 11977                           ;vscp_firmware.c: 551: if (reg >= 0x80) {
 11978  005FB8  0E7F               	movlw	127
 11979  005FBA  642A               	cpfsgt	vscp_readRegister@reg,c
 11980  005FBC  D003               	goto	l12763
 11981                           
 11982                           ; BSR set to: 0
 11983                           ;vscp_firmware.c: 552: return vscp_readStdReg(reg);
 11984  005FBE  502A               	movf	vscp_readRegister@reg,w,c
 11985  005FC0  EFAC  F020         	goto	_vscp_readStdReg
 11986  005FC4                     l12763:
 11987                           
 11988                           ; BSR set to: 0
 11989                           ;vscp_firmware.c: 554: else {
 11990                           ;vscp_firmware.c: 555: return vscp_readAppReg(reg);
 11991  005FC4  502A               	movf	vscp_readRegister@reg,w,c
 11992  005FC6  EF07  F00F         	goto	_vscp_readAppReg
 11993  005FCA                     __end_of_vscp_readRegister:
 11994                           	opt stack 0
 11995                           tblptru	equ	0xFF8
 11996                           tblptrh	equ	0xFF7
 11997                           tblptrl	equ	0xFF6
 11998                           tablat	equ	0xFF5
 11999                           prodh	equ	0xFF4
 12000                           prodl	equ	0xFF3
 12001                           intcon	equ	0xFF2
 12002                           postinc0	equ	0xFEE
 12003                           wreg	equ	0xFE8
 12004                           indf1	equ	0xFE7
 12005                           postdec1	equ	0xFE5
 12006                           fsr1h	equ	0xFE2
 12007                           fsr1l	equ	0xFE1
 12008                           indf2	equ	0xFDF
 12009                           postinc2	equ	0xFDE
 12010                           postdec2	equ	0xFDD
 12011                           plusw2	equ	0xFDB
 12012                           fsr2h	equ	0xFDA
 12013                           fsr2l	equ	0xFD9
 12014                           status	equ	0xFD8
 12015                           
 12016 ;; *************** function _vscp_readStdReg *****************
 12017 ;; Defined at:
 12018 ;;		line 564 in file "../../vscp_firmware/common/vscp_firmware.c"
 12019 ;; Parameters:    Size  Location     Type
 12020 ;;  reg             1    wreg     unsigned char 
 12021 ;; Auto vars:     Size  Location     Type
 12022 ;;  reg             1   40[COMRAM] unsigned char 
 12023 ;;  code            4   33[COMRAM] unsigned long 
 12024 ;;  idx             1   38[COMRAM] unsigned char 
 12025 ;;  code            4   29[COMRAM] unsigned long 
 12026 ;;  idx             1   37[COMRAM] unsigned char 
 12027 ;;  rv              1   39[COMRAM] unsigned char 
 12028 ;; Return value:  Size  Location     Type
 12029 ;;                  1    wreg      unsigned char 
 12030 ;; Registers used:
 12031 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12032 ;; Tracked objects:
 12033 ;;		On entry : F/0
 12034 ;;		On exit  : 0/0
 12035 ;;		Unchanged: 0/0
 12036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12038 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12039 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12040 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12041 ;;Total ram usage:       17 bytes
 12042 ;; Hardware stack levels used:    1
 12043 ;; Hardware stack levels required when called:    4
 12044 ;; This function calls:
 12045 ;;		_vscp_getMajorVersion
 12046 ;;		_vscp_getMinorVersion
 12047 ;;		_vscp_getSubMinorVersion
 12048 ;;		_vscp_getGUID
 12049 ;;		_vscp_getMDF_URL
 12050 ;;		_vscp_getUserID
 12051 ;;		_vscp_getManufacturerId
 12052 ;;		_vscp_getBootLoaderAlgorithm
 12053 ;;		_vscp_getBufferSize
 12054 ;;		_vscp_getRegisterPagesUsed
 12055 ;;		_vscp_getFamilyCode
 12056 ;;		_vscp_getFamilyType
 12057 ;; This function is called by:
 12058 ;;		_vscp_readRegister
 12059 ;;		_vscp_handleProtocolEvent
 12060 ;; This function uses a non-reentrant model
 12061 ;;
 12062                           
 12063                           	psect	text45
 12064  004158                     __ptext45:
 12065                           	opt stack 0
 12066  004158                     _vscp_readStdReg:
 12067                           	opt stack 25
 12068                           
 12069                           ;incstack = 0
 12070                           ;incstack = 0
 12071                           ;vscp_readStdReg@reg stored from wreg
 12072  004158  CFE8 F029          	movff	wreg,vscp_readStdReg@reg
 12073                           
 12074                           ; BSR set to: 0
 12075                           ;vscp_firmware.c: 565: uint8_t rv = 0;
 12076  00415C  6A28               	clrf	vscp_readStdReg@rv,c
 12077                           
 12078                           ; BSR set to: 0
 12079                           ;vscp_firmware.c: 567: if (0x80 == reg) {
 12080  00415E  5029               	movf	vscp_readStdReg@reg,w,c
 12081  004160  0A80               	xorlw	128
 12082  004162  E104               	bnz	l12773
 12083                           
 12084                           ; BSR set to: 0
 12085                           ;vscp_firmware.c: 570: rv = vscp_alarmstatus;
 12086  004164  C04A  F028         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 12087                           
 12088                           ;vscp_firmware.c: 571: vscp_alarmstatus = 0x00;
 12089  004168  6A4A               	clrf	_vscp_alarmstatus,c
 12090                           
 12091                           ;vscp_firmware.c: 573: }
 12092  00416A  D0B4               	goto	l12861
 12093  00416C                     l12773:
 12094                           
 12095                           ; BSR set to: 0
 12096                           ;vscp_firmware.c: 574: else if (0x81 == reg) {
 12097  00416C  5029               	movf	vscp_readStdReg@reg,w,c
 12098  00416E  0A81               	xorlw	129
 12099  004170  E102               	bnz	l12777
 12100                           
 12101                           ; BSR set to: 0
 12102                           ;vscp_firmware.c: 577: rv = 1;
 12103  004172  0E01               	movlw	1
 12104  004174  D076               	goto	L28
 12105  004176                     l12777:
 12106                           
 12107                           ; BSR set to: 0
 12108                           ;vscp_firmware.c: 580: else if (0x82 == reg) {
 12109  004176  5029               	movf	vscp_readStdReg@reg,w,c
 12110  004178  0A82               	xorlw	130
 12111  00417A  E102               	bnz	l12781
 12112                           
 12113                           ; BSR set to: 0
 12114                           ;vscp_firmware.c: 583: rv = 6;
 12115  00417C  0E06               	movlw	6
 12116  00417E  D071               	goto	L28
 12117  004180                     l12781:
 12118                           
 12119                           ; BSR set to: 0
 12120                           ;vscp_firmware.c: 586: else if (0x83 == reg) {
 12121  004180  5029               	movf	vscp_readStdReg@reg,w,c
 12122  004182  0A83               	xorlw	131
 12123  004184  E103               	bnz	l12785
 12124                           
 12125                           ; BSR set to: 0
 12126                           ;vscp_firmware.c: 589: rv = vscp_errorcnt;
 12127  004186  C04B  F028         	movff	_vscp_errorcnt,vscp_readStdReg@rv
 12128                           
 12129                           ;vscp_firmware.c: 591: }
 12130  00418A  D0A4               	goto	l12861
 12131  00418C                     l12785:
 12132                           
 12133                           ; BSR set to: 0
 12134                           ;vscp_firmware.c: 592: else if (0x94 == reg) {
 12135  00418C  5029               	movf	vscp_readStdReg@reg,w,c
 12136  00418E  0A94               	xorlw	148
 12137  004190  E103               	bnz	l12789
 12138                           
 12139                           ; BSR set to: 0
 12140                           ;vscp_firmware.c: 595: rv = vscp_getMajorVersion();
 12141  004192  EC4D  F030         	call	_vscp_getMajorVersion	;wreg free
 12142  004196  D065               	goto	L28
 12143  004198                     l12789:
 12144                           
 12145                           ; BSR set to: 0
 12146                           ;vscp_firmware.c: 598: else if (0x95 == reg) {
 12147  004198  5029               	movf	vscp_readStdReg@reg,w,c
 12148  00419A  0A95               	xorlw	149
 12149  00419C  E103               	bnz	l12793
 12150                           
 12151                           ; BSR set to: 0
 12152                           ;vscp_firmware.c: 601: rv = vscp_getMinorVersion();
 12153  00419E  EC4C  F030         	call	_vscp_getMinorVersion	;wreg free
 12154  0041A2  D05F               	goto	L28
 12155  0041A4                     l12793:
 12156                           
 12157                           ; BSR set to: 0
 12158                           ;vscp_firmware.c: 604: else if (0x96 == reg) {
 12159  0041A4  5029               	movf	vscp_readStdReg@reg,w,c
 12160  0041A6  0A96               	xorlw	150
 12161  0041A8  E103               	bnz	l12797
 12162                           
 12163                           ; BSR set to: 0
 12164                           ;vscp_firmware.c: 607: rv = vscp_getSubMinorVersion();
 12165  0041AA  EC4B  F030         	call	_vscp_getSubMinorVersion	;wreg free
 12166  0041AE  D059               	goto	L28
 12167  0041B0                     l12797:
 12168                           
 12169                           ; BSR set to: 0
 12170                           ;vscp_firmware.c: 610: else if (reg < 0x89) {
 12171  0041B0  0E89               	movlw	137
 12172  0041B2  6029               	cpfslt	vscp_readStdReg@reg,c
 12173  0041B4  D005               	goto	l12801
 12174                           
 12175                           ; BSR set to: 0
 12176                           ;vscp_firmware.c: 613: rv = vscp_getUserID(reg - 0x84);
 12177  0041B6  5029               	movf	vscp_readStdReg@reg,w,c
 12178  0041B8  0F7C               	addlw	124
 12179  0041BA  ECFA  F02F         	call	_vscp_getUserID
 12180  0041BE  D051               	goto	L28
 12181  0041C0                     l12801:
 12182                           
 12183                           ; BSR set to: 0
 12184                           ;vscp_firmware.c: 616: else if ((reg > 0x88) &&
 12185                           ;vscp_firmware.c: 617: (reg < 0x91)) {
 12186  0041C0  0E88               	movlw	136
 12187  0041C2  6429               	cpfsgt	vscp_readStdReg@reg,c
 12188  0041C4  D008               	goto	l12807
 12189                           
 12190                           ; BSR set to: 0
 12191  0041C6  0E91               	movlw	145
 12192  0041C8  6029               	cpfslt	vscp_readStdReg@reg,c
 12193  0041CA  D005               	goto	l12807
 12194                           
 12195                           ; BSR set to: 0
 12196                           ;vscp_firmware.c: 620: rv = vscp_getManufacturerId(reg - 0x89);
 12197  0041CC  5029               	movf	vscp_readStdReg@reg,w,c
 12198  0041CE  0F77               	addlw	119
 12199  0041D0  ECF0  F02F         	call	_vscp_getManufacturerId
 12200  0041D4  D046               	goto	L28
 12201  0041D6                     l12807:
 12202                           
 12203                           ; BSR set to: 0
 12204                           ;vscp_firmware.c: 623: else if (0x91 == reg) {
 12205  0041D6  5029               	movf	vscp_readStdReg@reg,w,c
 12206  0041D8  0A91               	xorlw	145
 12207  0041DA  E103               	bnz	l12811
 12208                           
 12209                           ; BSR set to: 0
 12210                           ;vscp_firmware.c: 626: rv = vscp_nickname;
 12211  0041DC  C0BB  F028         	movff	_vscp_nickname,vscp_readStdReg@rv
 12212                           
 12213                           ;vscp_firmware.c: 628: }
 12214  0041E0  D079               	goto	l12861
 12215  0041E2                     l12811:
 12216                           
 12217                           ; BSR set to: 0
 12218                           ;vscp_firmware.c: 629: else if (0x93 == reg) {
 12219  0041E2  5029               	movf	vscp_readStdReg@reg,w,c
 12220  0041E4  0A93               	xorlw	147
 12221  0041E6  E103               	bnz	l12815
 12222                           
 12223                           ; BSR set to: 0
 12224                           ;vscp_firmware.c: 632: rv = (vscp_page_select & 0xff);
 12225  0041E8  C046  F028         	movff	_vscp_page_select,vscp_readStdReg@rv
 12226                           
 12227                           ;vscp_firmware.c: 634: }
 12228  0041EC  D073               	goto	l12861
 12229  0041EE                     l12815:
 12230                           
 12231                           ; BSR set to: 0
 12232                           ;vscp_firmware.c: 636: else if (0x92 == reg) {
 12233  0041EE  5029               	movf	vscp_readStdReg@reg,w,c
 12234  0041F0  0A92               	xorlw	146
 12235  0041F2  E102               	bnz	l12819
 12236                           
 12237                           ; BSR set to: 0
 12238                           ;vscp_firmware.c: 639: rv = (vscp_page_select >> 8) & 0xff;
 12239  0041F4  5047               	movf	_vscp_page_select+1,w,c
 12240  0041F6  D035               	goto	L28
 12241  0041F8                     l12819:
 12242                           
 12243                           ; BSR set to: 0
 12244                           ;vscp_firmware.c: 642: else if (0x97 == reg) {
 12245  0041F8  5029               	movf	vscp_readStdReg@reg,w,c
 12246  0041FA  0A97               	xorlw	151
 12247  0041FC  E103               	bnz	l12823
 12248                           
 12249                           ; BSR set to: 0
 12250                           ;vscp_firmware.c: 644: rv = vscp_getBootLoaderAlgorithm();
 12251  0041FE  EC4A  F030         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 12252  004202  D02F               	goto	L28
 12253  004204                     l12823:
 12254                           
 12255                           ; BSR set to: 0
 12256                           ;vscp_firmware.c: 646: else if (0x98 == reg) {
 12257  004204  5029               	movf	vscp_readStdReg@reg,w,c
 12258  004206  0A98               	xorlw	152
 12259  004208  E103               	bnz	l12827
 12260                           
 12261                           ; BSR set to: 0
 12262                           ;vscp_firmware.c: 648: rv = vscp_getBufferSize();
 12263  00420A  EC49  F030         	call	_vscp_getBufferSize	;wreg free
 12264  00420E  D029               	goto	L28
 12265  004210                     l12827:
 12266                           
 12267                           ; BSR set to: 0
 12268                           ;vscp_firmware.c: 650: else if (0x99 == reg) {
 12269  004210  5029               	movf	vscp_readStdReg@reg,w,c
 12270  004212  0A99               	xorlw	153
 12271  004214  E103               	bnz	l12831
 12272                           
 12273                           ; BSR set to: 0
 12274                           ;vscp_firmware.c: 652: rv = vscp_getRegisterPagesUsed();
 12275  004216  EC48  F030         	call	_vscp_getRegisterPagesUsed	;wreg free
 12276  00421A  D023               	goto	L28
 12277  00421C                     l12831:
 12278                           
 12279                           ; BSR set to: 0
 12280                           ;vscp_firmware.c: 654: else if ( ( reg >= 0x9A ) &&
 12281                           ;vscp_firmware.c: 655: ( reg < ( 0x9A + 4 ) ) ) {
 12282  00421C  0E99               	movlw	153
 12283  00421E  6429               	cpfsgt	vscp_readStdReg@reg,c
 12284  004220  D022               	goto	l12841
 12285                           
 12286                           ; BSR set to: 0
 12287  004222  0E9E               	movlw	158
 12288  004224  6029               	cpfslt	vscp_readStdReg@reg,c
 12289  004226  D01F               	goto	l12841
 12290                           
 12291                           ; BSR set to: 0
 12292                           ;vscp_firmware.c: 657: uint32_t code = vscp_getFamilyCode();
 12293  004228  EC2F  F030         	call	_vscp_getFamilyCode	;wreg free
 12294  00422C  C011  F021         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 12295  004230  C010  F020         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 12296  004234  C00F  F01F         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 12297  004238  C00E  F01E         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 12298                           
 12299                           ; BSR set to: 0
 12300                           ;vscp_firmware.c: 658: uint8_t idx = reg - 0x9A;
 12301  00423C  5029               	movf	vscp_readStdReg@reg,w,c
 12302  00423E  0F66               	addlw	102
 12303  004240  6E26               	movwf	vscp_readStdReg@idx,c
 12304                           
 12305                           ; BSR set to: 0
 12306                           ;vscp_firmware.c: 659: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 12307  004242  5026               	movf	vscp_readStdReg@idx,w,c
 12308  004244  D849               	call	PL44	;call to abstracted procedure
 12309  004246  C01E  F01A         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 12310  00424A  C01F  F01B         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 12311  00424E  C020  F01C         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 12312  004252  C021  F01D         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 12313  004256  2AE8               	incf	wreg,f,c
 12314  004258  D001               	goto	u9450
 12315  00425A                     u9455:
 12316  00425A  D848               	call	PL80	;call to abstracted procedure
 12317  00425C                     u9450:
 12318  00425C  2EE8               	decfsz	wreg,f,c
 12319  00425E  D7FD               	goto	u9455
 12320  004260  D024               	goto	L29
 12321  004262                     L28:
 12322  004262  6E28               	movwf	vscp_readStdReg@rv,c
 12323                           
 12324                           ;vscp_firmware.c: 660: }
 12325  004264  D037               	goto	l12861
 12326  004266                     l12841:
 12327                           
 12328                           ; BSR set to: 0
 12329                           ;vscp_firmware.c: 661: else if ( ( reg >= 0x9E ) &&
 12330                           ;vscp_firmware.c: 662: ( reg < ( 0x9E + 4 ) ) ) {
 12331  004266  0E9D               	movlw	157
 12332  004268  6429               	cpfsgt	vscp_readStdReg@reg,c
 12333  00426A  D021               	goto	l12851
 12334                           
 12335                           ; BSR set to: 0
 12336  00426C  0EA2               	movlw	162
 12337  00426E  6029               	cpfslt	vscp_readStdReg@reg,c
 12338  004270  D01E               	goto	l12851
 12339                           
 12340                           ; BSR set to: 0
 12341                           ;vscp_firmware.c: 664: uint32_t code = vscp_getFamilyType();
 12342  004272  EC2A  F030         	call	_vscp_getFamilyType	;wreg free
 12343  004276  C011  F025         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1003+3
 12344  00427A  C010  F024         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1003+2
 12345  00427E  C00F  F023         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1003+1
 12346  004282  C00E  F022         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1003
 12347                           
 12348                           ; BSR set to: 0
 12349                           ;vscp_firmware.c: 665: uint8_t idx = reg - 0x9E;
 12350  004286  5029               	movf	vscp_readStdReg@reg,w,c
 12351  004288  0F62               	addlw	98
 12352  00428A  6E27               	movwf	vscp_readStdReg@idx_1004,c
 12353                           
 12354                           ; BSR set to: 0
 12355                           ;vscp_firmware.c: 666: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 12356  00428C  5027               	movf	vscp_readStdReg@idx_1004,w,c
 12357  00428E  D824               	call	PL44	;call to abstracted procedure
 12358  004290  C022  F01A         	movff	vscp_readStdReg@code_1003,??_vscp_readStdReg+1
 12359  004294  C023  F01B         	movff	vscp_readStdReg@code_1003+1,??_vscp_readStdReg+2
 12360  004298  C024  F01C         	movff	vscp_readStdReg@code_1003+2,??_vscp_readStdReg+3
 12361  00429C  C025  F01D         	movff	vscp_readStdReg@code_1003+3,??_vscp_readStdReg+4
 12362  0042A0  2AE8               	incf	wreg,f,c
 12363  0042A2  D001               	goto	u9480
 12364  0042A4                     u9485:
 12365  0042A4  D823               	call	PL80	;call to abstracted procedure
 12366  0042A6                     u9480:
 12367  0042A6  2EE8               	decfsz	wreg,f,c
 12368  0042A8  D7FD               	goto	u9485
 12369  0042AA                     L29:
 12370  0042AA  501A               	movf	??_vscp_readStdReg+1,w,c
 12371  0042AC  D7DA               	goto	L28
 12372  0042AE                     l12851:
 12373                           
 12374                           ; BSR set to: 0
 12375                           ;vscp_firmware.c: 668: else if ((reg > (0xD0 - 1)) &&
 12376                           ;vscp_firmware.c: 669: (reg < 0xE0)) {
 12377  0042AE  0ECF               	movlw	207
 12378  0042B0  6429               	cpfsgt	vscp_readStdReg@reg,c
 12379  0042B2  D008               	goto	l12857
 12380                           
 12381                           ; BSR set to: 0
 12382  0042B4  0EE0               	movlw	224
 12383  0042B6  6029               	cpfslt	vscp_readStdReg@reg,c
 12384  0042B8  D005               	goto	l12857
 12385                           
 12386                           ; BSR set to: 0
 12387                           ;vscp_firmware.c: 672: rv = vscp_getGUID(reg - 0xD0);
 12388  0042BA  5029               	movf	vscp_readStdReg@reg,w,c
 12389  0042BC  0F30               	addlw	48
 12390  0042BE  EC04  F030         	call	_vscp_getGUID
 12391  0042C2  D7CF               	goto	L28
 12392  0042C4                     l12857:
 12393                           
 12394                           ; BSR set to: 0
 12395                           ;vscp_firmware.c: 675: else if ( reg >= 0xE0 ) {
 12396  0042C4  0EDF               	movlw	223
 12397  0042C6  6429               	cpfsgt	vscp_readStdReg@reg,c
 12398  0042C8  D005               	goto	l12861
 12399                           
 12400                           ; BSR set to: 0
 12401                           ;vscp_firmware.c: 678: rv = vscp_getMDF_URL(reg - 0xE0);
 12402  0042CA  5029               	movf	vscp_readStdReg@reg,w,c
 12403  0042CC  0F20               	addlw	32
 12404  0042CE  EC99  F02F         	call	_vscp_getMDF_URL
 12405  0042D2  D7C7               	goto	L28
 12406  0042D4                     l12861:
 12407                           
 12408                           ;vscp_firmware.c: 680: }
 12409                           ;vscp_firmware.c: 682: return rv;
 12410  0042D4  5028               	movf	vscp_readStdReg@rv,w,c
 12411  0042D6  0012               	return	
 12412  0042D8                     __end_of_vscp_readStdReg:
 12413                           	opt stack 0
 12414  0042D8                     PL44:
 12415                           	opt stack 25
 12416  0042D8  0803               	sublw	3
 12417  0042DA  6E19               	movwf	??_vscp_readStdReg& (0+255),c
 12418  0042DC  90D8               	bcf	status,0,c
 12419  0042DE  3619               	rlcf	??_vscp_readStdReg,f,c
 12420  0042E0  90D8               	bcf	status,0,c
 12421  0042E2  3619               	rlcf	??_vscp_readStdReg,f,c
 12422  0042E4  90D8               	bcf	status,0,c
 12423  0042E6  3619               	rlcf	??_vscp_readStdReg,f,c
 12424  0042E8  5019               	movf	??_vscp_readStdReg,w,c
 12425  0042EA  0012               	return	
 12426  0042EC                     __end_ofPL44:
 12427                           	opt stack 0
 12428  0042EC                     PL80:
 12429                           	opt stack 25
 12430  0042EC  90D8               	bcf	status,0,c
 12431  0042EE  321D               	rrcf	??_vscp_readStdReg+4,f,c
 12432  0042F0  321C               	rrcf	??_vscp_readStdReg+3,f,c
 12433  0042F2  321B               	rrcf	??_vscp_readStdReg+2,f,c
 12434  0042F4  321A               	rrcf	??_vscp_readStdReg+1,f,c
 12435  0042F6  0012               	return	
 12436  0042F8                     __end_ofPL80:
 12437                           	opt stack 0
 12438                           tblptru	equ	0xFF8
 12439                           tblptrh	equ	0xFF7
 12440                           tblptrl	equ	0xFF6
 12441                           tablat	equ	0xFF5
 12442                           prodh	equ	0xFF4
 12443                           prodl	equ	0xFF3
 12444                           intcon	equ	0xFF2
 12445                           postinc0	equ	0xFEE
 12446                           wreg	equ	0xFE8
 12447                           indf1	equ	0xFE7
 12448                           postdec1	equ	0xFE5
 12449                           fsr1h	equ	0xFE2
 12450                           fsr1l	equ	0xFE1
 12451                           indf2	equ	0xFDF
 12452                           postinc2	equ	0xFDE
 12453                           postdec2	equ	0xFDD
 12454                           plusw2	equ	0xFDB
 12455                           fsr2h	equ	0xFDA
 12456                           fsr2l	equ	0xFD9
 12457                           status	equ	0xFD8
 12458                           
 12459 ;; *************** function _vscp_getFamilyType *****************
 12460 ;; Defined at:
 12461 ;;		line 2892 in file "../main.c"
 12462 ;; Parameters:    Size  Location     Type
 12463 ;;		None
 12464 ;; Auto vars:     Size  Location     Type
 12465 ;;		None
 12466 ;; Return value:  Size  Location     Type
 12467 ;;                  4   13[COMRAM] unsigned long 
 12468 ;; Registers used:
 12469 ;;		None
 12470 ;; Tracked objects:
 12471 ;;		On entry : F/0
 12472 ;;		On exit  : F/0
 12473 ;;		Unchanged: F/0
 12474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12475 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12478 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12479 ;;Total ram usage:        4 bytes
 12480 ;; Hardware stack levels used:    1
 12481 ;; Hardware stack levels required when called:    2
 12482 ;; This function calls:
 12483 ;;		Nothing
 12484 ;; This function is called by:
 12485 ;;		_vscp_readStdReg
 12486 ;; This function uses a non-reentrant model
 12487 ;;
 12488                           
 12489                           	psect	text46
 12490  006054                     __ptext46:
 12491                           	opt stack 0
 12492  006054                     _vscp_getFamilyType:
 12493                           	opt stack 26
 12494                           
 12495                           ; BSR set to: 0
 12496                           ;main.c: 2893: return 0;
 12497                           
 12498                           ;incstack = 0
 12499                           ;incstack = 0
 12500  006054  6A0E               	clrf	?_vscp_getFamilyType,c
 12501  006056  6A0F               	clrf	?_vscp_getFamilyType+1,c
 12502  006058  6A10               	clrf	?_vscp_getFamilyType+2,c
 12503  00605A  6A11               	clrf	?_vscp_getFamilyType+3,c
 12504                           
 12505                           ; BSR set to: 0
 12506  00605C  0012               	return	
 12507  00605E                     __end_of_vscp_getFamilyType:
 12508                           	opt stack 0
 12509                           tblptru	equ	0xFF8
 12510                           tblptrh	equ	0xFF7
 12511                           tblptrl	equ	0xFF6
 12512                           tablat	equ	0xFF5
 12513                           prodh	equ	0xFF4
 12514                           prodl	equ	0xFF3
 12515                           intcon	equ	0xFF2
 12516                           postinc0	equ	0xFEE
 12517                           wreg	equ	0xFE8
 12518                           indf1	equ	0xFE7
 12519                           postdec1	equ	0xFE5
 12520                           fsr1h	equ	0xFE2
 12521                           fsr1l	equ	0xFE1
 12522                           indf2	equ	0xFDF
 12523                           postinc2	equ	0xFDE
 12524                           postdec2	equ	0xFDD
 12525                           plusw2	equ	0xFDB
 12526                           fsr2h	equ	0xFDA
 12527                           fsr2l	equ	0xFD9
 12528                           status	equ	0xFD8
 12529                           
 12530 ;; *************** function _vscp_getFamilyCode *****************
 12531 ;; Defined at:
 12532 ;;		line 2882 in file "../main.c"
 12533 ;; Parameters:    Size  Location     Type
 12534 ;;		None
 12535 ;; Auto vars:     Size  Location     Type
 12536 ;;		None
 12537 ;; Return value:  Size  Location     Type
 12538 ;;                  4   13[COMRAM] unsigned long 
 12539 ;; Registers used:
 12540 ;;		None
 12541 ;; Tracked objects:
 12542 ;;		On entry : F/0
 12543 ;;		On exit  : F/0
 12544 ;;		Unchanged: F/0
 12545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12546 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12549 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12550 ;;Total ram usage:        4 bytes
 12551 ;; Hardware stack levels used:    1
 12552 ;; Hardware stack levels required when called:    2
 12553 ;; This function calls:
 12554 ;;		Nothing
 12555 ;; This function is called by:
 12556 ;;		_vscp_readStdReg
 12557 ;; This function uses a non-reentrant model
 12558 ;;
 12559                           
 12560                           	psect	text47
 12561  00605E                     __ptext47:
 12562                           	opt stack 0
 12563  00605E                     _vscp_getFamilyCode:
 12564                           	opt stack 26
 12565                           
 12566                           ; BSR set to: 0
 12567                           ;main.c: 2883: return 0L;
 12568                           
 12569                           ; BSR set to: 0
 12570                           ;incstack = 0
 12571                           ;incstack = 0
 12572  00605E  6A0E               	clrf	?_vscp_getFamilyCode,c
 12573  006060  6A0F               	clrf	?_vscp_getFamilyCode+1,c
 12574  006062  6A10               	clrf	?_vscp_getFamilyCode+2,c
 12575  006064  6A11               	clrf	?_vscp_getFamilyCode+3,c
 12576                           
 12577                           ; BSR set to: 0
 12578  006066  0012               	return	
 12579  006068                     __end_of_vscp_getFamilyCode:
 12580                           	opt stack 0
 12581                           tblptru	equ	0xFF8
 12582                           tblptrh	equ	0xFF7
 12583                           tblptrl	equ	0xFF6
 12584                           tablat	equ	0xFF5
 12585                           prodh	equ	0xFF4
 12586                           prodl	equ	0xFF3
 12587                           intcon	equ	0xFF2
 12588                           postinc0	equ	0xFEE
 12589                           wreg	equ	0xFE8
 12590                           indf1	equ	0xFE7
 12591                           postdec1	equ	0xFE5
 12592                           fsr1h	equ	0xFE2
 12593                           fsr1l	equ	0xFE1
 12594                           indf2	equ	0xFDF
 12595                           postinc2	equ	0xFDE
 12596                           postdec2	equ	0xFDD
 12597                           plusw2	equ	0xFDB
 12598                           fsr2h	equ	0xFDA
 12599                           fsr2l	equ	0xFD9
 12600                           status	equ	0xFD8
 12601                           
 12602 ;; *************** function _vscp_getRegisterPagesUsed *****************
 12603 ;; Defined at:
 12604 ;;		line 2770 in file "../main.c"
 12605 ;; Parameters:    Size  Location     Type
 12606 ;;		None
 12607 ;; Auto vars:     Size  Location     Type
 12608 ;;		None
 12609 ;; Return value:  Size  Location     Type
 12610 ;;                  1    wreg      unsigned char 
 12611 ;; Registers used:
 12612 ;;		wreg
 12613 ;; Tracked objects:
 12614 ;;		On entry : F/0
 12615 ;;		On exit  : F/0
 12616 ;;		Unchanged: F/0
 12617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12622 ;;Total ram usage:        0 bytes
 12623 ;; Hardware stack levels used:    1
 12624 ;; Hardware stack levels required when called:    2
 12625 ;; This function calls:
 12626 ;;		Nothing
 12627 ;; This function is called by:
 12628 ;;		_vscp_readStdReg
 12629 ;; This function uses a non-reentrant model
 12630 ;;
 12631                           
 12632                           	psect	text48
 12633  006090                     __ptext48:
 12634                           	opt stack 0
 12635  006090                     _vscp_getRegisterPagesUsed:
 12636                           	opt stack 26
 12637                           
 12638                           ; BSR set to: 0
 12639                           
 12640                           ; BSR set to: 0
 12641                           ;main.c: 2771: return 1;
 12642                           
 12643                           ; BSR set to: 0
 12644                           ;incstack = 0
 12645                           ;incstack = 0
 12646  006090  0C01               	retlw	1
 12647  006092                     __end_of_vscp_getRegisterPagesUsed:
 12648                           	opt stack 0
 12649                           tblptru	equ	0xFF8
 12650                           tblptrh	equ	0xFF7
 12651                           tblptrl	equ	0xFF6
 12652                           tablat	equ	0xFF5
 12653                           prodh	equ	0xFF4
 12654                           prodl	equ	0xFF3
 12655                           intcon	equ	0xFF2
 12656                           postinc0	equ	0xFEE
 12657                           wreg	equ	0xFE8
 12658                           indf1	equ	0xFE7
 12659                           postdec1	equ	0xFE5
 12660                           fsr1h	equ	0xFE2
 12661                           fsr1l	equ	0xFE1
 12662                           indf2	equ	0xFDF
 12663                           postinc2	equ	0xFDE
 12664                           postdec2	equ	0xFDD
 12665                           plusw2	equ	0xFDB
 12666                           fsr2h	equ	0xFDA
 12667                           fsr2l	equ	0xFD9
 12668                           status	equ	0xFD8
 12669                           
 12670 ;; *************** function _vscp_getBufferSize *****************
 12671 ;; Defined at:
 12672 ;;		line 2723 in file "../main.c"
 12673 ;; Parameters:    Size  Location     Type
 12674 ;;		None
 12675 ;; Auto vars:     Size  Location     Type
 12676 ;;		None
 12677 ;; Return value:  Size  Location     Type
 12678 ;;                  1    wreg      unsigned char 
 12679 ;; Registers used:
 12680 ;;		wreg
 12681 ;; Tracked objects:
 12682 ;;		On entry : F/0
 12683 ;;		On exit  : F/0
 12684 ;;		Unchanged: F/0
 12685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12690 ;;Total ram usage:        0 bytes
 12691 ;; Hardware stack levels used:    1
 12692 ;; Hardware stack levels required when called:    2
 12693 ;; This function calls:
 12694 ;;		Nothing
 12695 ;; This function is called by:
 12696 ;;		_vscp_readStdReg
 12697 ;; This function uses a non-reentrant model
 12698 ;;
 12699                           
 12700                           	psect	text49
 12701  006092                     __ptext49:
 12702                           	opt stack 0
 12703  006092                     _vscp_getBufferSize:
 12704                           	opt stack 26
 12705                           
 12706                           ; BSR set to: 0
 12707                           
 12708                           ; BSR set to: 0
 12709                           ;main.c: 2724: return 8;
 12710                           
 12711                           ; BSR set to: 0
 12712                           ;incstack = 0
 12713                           ;incstack = 0
 12714  006092  0C08               	retlw	8
 12715  006094                     __end_of_vscp_getBufferSize:
 12716                           	opt stack 0
 12717                           tblptru	equ	0xFF8
 12718                           tblptrh	equ	0xFF7
 12719                           tblptrl	equ	0xFF6
 12720                           tablat	equ	0xFF5
 12721                           prodh	equ	0xFF4
 12722                           prodl	equ	0xFF3
 12723                           intcon	equ	0xFF2
 12724                           postinc0	equ	0xFEE
 12725                           wreg	equ	0xFE8
 12726                           indf1	equ	0xFE7
 12727                           postdec1	equ	0xFE5
 12728                           fsr1h	equ	0xFE2
 12729                           fsr1l	equ	0xFE1
 12730                           indf2	equ	0xFDF
 12731                           postinc2	equ	0xFDE
 12732                           postdec2	equ	0xFDD
 12733                           plusw2	equ	0xFDB
 12734                           fsr2h	equ	0xFDA
 12735                           fsr2l	equ	0xFD9
 12736                           status	equ	0xFD8
 12737                           
 12738 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 12739 ;; Defined at:
 12740 ;;		line 2714 in file "../main.c"
 12741 ;; Parameters:    Size  Location     Type
 12742 ;;		None
 12743 ;; Auto vars:     Size  Location     Type
 12744 ;;		None
 12745 ;; Return value:  Size  Location     Type
 12746 ;;                  1    wreg      unsigned char 
 12747 ;; Registers used:
 12748 ;;		wreg
 12749 ;; Tracked objects:
 12750 ;;		On entry : F/0
 12751 ;;		On exit  : F/0
 12752 ;;		Unchanged: F/0
 12753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12758 ;;Total ram usage:        0 bytes
 12759 ;; Hardware stack levels used:    1
 12760 ;; Hardware stack levels required when called:    2
 12761 ;; This function calls:
 12762 ;;		Nothing
 12763 ;; This function is called by:
 12764 ;;		_vscp_readStdReg
 12765 ;; This function uses a non-reentrant model
 12766 ;;
 12767                           
 12768                           	psect	text50
 12769  006094                     __ptext50:
 12770                           	opt stack 0
 12771  006094                     _vscp_getBootLoaderAlgorithm:
 12772                           	opt stack 26
 12773                           
 12774                           ; BSR set to: 0
 12775                           
 12776                           ; BSR set to: 0
 12777                           ;main.c: 2715: return 0x01;
 12778                           
 12779                           ; BSR set to: 0
 12780                           ;incstack = 0
 12781                           ;incstack = 0
 12782  006094  0C01               	retlw	1
 12783  006096                     __end_of_vscp_getBootLoaderAlgorithm:
 12784                           	opt stack 0
 12785                           tblptru	equ	0xFF8
 12786                           tblptrh	equ	0xFF7
 12787                           tblptrl	equ	0xFF6
 12788                           tablat	equ	0xFF5
 12789                           prodh	equ	0xFF4
 12790                           prodl	equ	0xFF3
 12791                           intcon	equ	0xFF2
 12792                           postinc0	equ	0xFEE
 12793                           wreg	equ	0xFE8
 12794                           indf1	equ	0xFE7
 12795                           postdec1	equ	0xFE5
 12796                           fsr1h	equ	0xFE2
 12797                           fsr1l	equ	0xFE1
 12798                           indf2	equ	0xFDF
 12799                           postinc2	equ	0xFDE
 12800                           postdec2	equ	0xFDD
 12801                           plusw2	equ	0xFDB
 12802                           fsr2h	equ	0xFDA
 12803                           fsr2l	equ	0xFD9
 12804                           status	equ	0xFD8
 12805                           
 12806 ;; *************** function _vscp_getManufacturerId *****************
 12807 ;; Defined at:
 12808 ;;		line 2694 in file "../main.c"
 12809 ;; Parameters:    Size  Location     Type
 12810 ;;  idx             1    wreg     unsigned char 
 12811 ;; Auto vars:     Size  Location     Type
 12812 ;;  idx             1   23[COMRAM] unsigned char 
 12813 ;; Return value:  Size  Location     Type
 12814 ;;                  1    wreg      unsigned char 
 12815 ;; Registers used:
 12816 ;;		wreg, status,2, status,0, cstack
 12817 ;; Tracked objects:
 12818 ;;		On entry : 0/0
 12819 ;;		On exit  : 0/0
 12820 ;;		Unchanged: 0/0
 12821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12823 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12825 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12826 ;;Total ram usage:        1 bytes
 12827 ;; Hardware stack levels used:    1
 12828 ;; Hardware stack levels required when called:    3
 12829 ;; This function calls:
 12830 ;;		_Read_b_eep
 12831 ;; This function is called by:
 12832 ;;		_vscp_readStdReg
 12833 ;;		_vscp_writeStdReg
 12834 ;; This function uses a non-reentrant model
 12835 ;;
 12836                           
 12837                           	psect	text51
 12838  005FE0                     __ptext51:
 12839                           	opt stack 0
 12840  005FE0                     _vscp_getManufacturerId:
 12841                           	opt stack 25
 12842                           
 12843                           ; BSR set to: 0
 12844                           ;incstack = 0
 12845                           ;incstack = 0
 12846                           ;vscp_getManufacturerId@idx stored from wreg
 12847  005FE0  CFE8 F018          	movff	wreg,vscp_getManufacturerId@idx
 12848                           
 12849                           ;main.c: 2695: return Read_b_eep(0x0A + idx);
 12850  005FE4  0E0A               	movlw	10
 12851  005FE6  2418               	addwf	vscp_getManufacturerId@idx,w,c
 12852  005FE8  6E16               	movwf	?_Read_b_eep,c
 12853  005FEA  6A17               	clrf	?_Read_b_eep+1,c
 12854  005FEC  0E00               	movlw	0
 12855  005FEE  2217               	addwfc	?_Read_b_eep+1,f,c
 12856  005FF0  EFC2  F02F         	goto	_Read_b_eep	;wreg free
 12857  005FF4                     __end_of_vscp_getManufacturerId:
 12858                           	opt stack 0
 12859                           tblptru	equ	0xFF8
 12860                           tblptrh	equ	0xFF7
 12861                           tblptrl	equ	0xFF6
 12862                           tablat	equ	0xFF5
 12863                           prodh	equ	0xFF4
 12864                           prodl	equ	0xFF3
 12865                           intcon	equ	0xFF2
 12866                           postinc0	equ	0xFEE
 12867                           wreg	equ	0xFE8
 12868                           indf1	equ	0xFE7
 12869                           postdec1	equ	0xFE5
 12870                           fsr1h	equ	0xFE2
 12871                           fsr1l	equ	0xFE1
 12872                           indf2	equ	0xFDF
 12873                           postinc2	equ	0xFDE
 12874                           postdec2	equ	0xFDD
 12875                           plusw2	equ	0xFDB
 12876                           fsr2h	equ	0xFDA
 12877                           fsr2l	equ	0xFD9
 12878                           status	equ	0xFD8
 12879                           
 12880 ;; *************** function _vscp_getUserID *****************
 12881 ;; Defined at:
 12882 ;;		line 2674 in file "../main.c"
 12883 ;; Parameters:    Size  Location     Type
 12884 ;;  idx             1    wreg     unsigned char 
 12885 ;; Auto vars:     Size  Location     Type
 12886 ;;  idx             1   23[COMRAM] unsigned char 
 12887 ;; Return value:  Size  Location     Type
 12888 ;;                  1    wreg      unsigned char 
 12889 ;; Registers used:
 12890 ;;		wreg, status,2, status,0, cstack
 12891 ;; Tracked objects:
 12892 ;;		On entry : 0/0
 12893 ;;		On exit  : 0/0
 12894 ;;		Unchanged: 0/0
 12895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12897 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12899 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12900 ;;Total ram usage:        1 bytes
 12901 ;; Hardware stack levels used:    1
 12902 ;; Hardware stack levels required when called:    3
 12903 ;; This function calls:
 12904 ;;		_Read_b_eep
 12905 ;; This function is called by:
 12906 ;;		_vscp_readStdReg
 12907 ;;		_vscp_writeStdReg
 12908 ;; This function uses a non-reentrant model
 12909 ;;
 12910                           
 12911                           	psect	text52
 12912  005FF4                     __ptext52:
 12913                           	opt stack 0
 12914  005FF4                     _vscp_getUserID:
 12915                           	opt stack 25
 12916                           
 12917                           ;incstack = 0
 12918                           ;incstack = 0
 12919                           ;vscp_getUserID@idx stored from wreg
 12920  005FF4  CFE8 F018          	movff	wreg,vscp_getUserID@idx
 12921                           
 12922                           ;main.c: 2675: return Read_b_eep(0x05 + idx);
 12923  005FF8  0E05               	movlw	5
 12924  005FFA  2418               	addwf	vscp_getUserID@idx,w,c
 12925  005FFC  6E16               	movwf	?_Read_b_eep,c
 12926  005FFE  6A17               	clrf	?_Read_b_eep+1,c
 12927  006000  0E00               	movlw	0
 12928  006002  2217               	addwfc	?_Read_b_eep+1,f,c
 12929  006004  EFC2  F02F         	goto	_Read_b_eep	;wreg free
 12930  006008                     __end_of_vscp_getUserID:
 12931                           	opt stack 0
 12932                           tblptru	equ	0xFF8
 12933                           tblptrh	equ	0xFF7
 12934                           tblptrl	equ	0xFF6
 12935                           tablat	equ	0xFF5
 12936                           prodh	equ	0xFF4
 12937                           prodl	equ	0xFF3
 12938                           intcon	equ	0xFF2
 12939                           postinc0	equ	0xFEE
 12940                           wreg	equ	0xFE8
 12941                           indf1	equ	0xFE7
 12942                           postdec1	equ	0xFE5
 12943                           fsr1h	equ	0xFE2
 12944                           fsr1l	equ	0xFE1
 12945                           indf2	equ	0xFDF
 12946                           postinc2	equ	0xFDE
 12947                           postdec2	equ	0xFDD
 12948                           plusw2	equ	0xFDB
 12949                           fsr2h	equ	0xFDA
 12950                           fsr2l	equ	0xFD9
 12951                           status	equ	0xFD8
 12952                           
 12953 ;; *************** function _vscp_getMDF_URL *****************
 12954 ;; Defined at:
 12955 ;;		line 2665 in file "../main.c"
 12956 ;; Parameters:    Size  Location     Type
 12957 ;;  idx             1    wreg     unsigned char 
 12958 ;; Auto vars:     Size  Location     Type
 12959 ;;  idx             1   14[COMRAM] unsigned char 
 12960 ;; Return value:  Size  Location     Type
 12961 ;;                  1    wreg      unsigned char 
 12962 ;; Registers used:
 12963 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 12964 ;; Tracked objects:
 12965 ;;		On entry : F/0
 12966 ;;		On exit  : F/0
 12967 ;;		Unchanged: F/0
 12968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12970 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12971 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12972 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12973 ;;Total ram usage:        2 bytes
 12974 ;; Hardware stack levels used:    1
 12975 ;; Hardware stack levels required when called:    2
 12976 ;; This function calls:
 12977 ;;		Nothing
 12978 ;; This function is called by:
 12979 ;;		_vscp_readStdReg
 12980 ;;		_vscp_handleProtocolEvent
 12981 ;; This function uses a non-reentrant model
 12982 ;;
 12983                           
 12984                           	psect	text53
 12985  005F32                     __ptext53:
 12986                           	opt stack 0
 12987  005F32                     _vscp_getMDF_URL:
 12988                           	opt stack 26
 12989                           
 12990                           ;incstack = 0
 12991                           ;incstack = 0
 12992                           ;vscp_getMDF_URL@idx stored from wreg
 12993  005F32  CFE8 F00F          	movff	wreg,vscp_getMDF_URL@idx
 12994                           
 12995                           ; BSR set to: 0
 12996                           ;main.c: 2666: return vscp_deviceURL[ idx ];
 12997  005F36  500F               	movf	vscp_getMDF_URL@idx,w,c
 12998  005F38  0F00               	addlw	low _vscp_deviceURL
 12999  005F3A  6E0E               	movwf	??_vscp_getMDF_URL& (0+255),c
 13000  005F3C  C00E  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 13001  005F40  0E0F               	movlw	high __smallconst
 13002  005F42  6EF7               	movwf	tblptrh,c
 13003  005F44  0E00               	movlw	low (__smallconst shr (0+16))
 13004  005F46  6EF8               	movwf	tblptru,c
 13005  005F48  0008               	tblrd		*
 13006  005F4A  50F5               	movf	tablat,w,c
 13007                           
 13008                           ; BSR set to: 0
 13009  005F4C  0012               	return	
 13010  005F4E                     __end_of_vscp_getMDF_URL:
 13011                           	opt stack 0
 13012                           tblptru	equ	0xFF8
 13013                           tblptrh	equ	0xFF7
 13014                           tblptrl	equ	0xFF6
 13015                           tablat	equ	0xFF5
 13016                           prodh	equ	0xFF4
 13017                           prodl	equ	0xFF3
 13018                           intcon	equ	0xFF2
 13019                           postinc0	equ	0xFEE
 13020                           wreg	equ	0xFE8
 13021                           indf1	equ	0xFE7
 13022                           postdec1	equ	0xFE5
 13023                           fsr1h	equ	0xFE2
 13024                           fsr1l	equ	0xFE1
 13025                           indf2	equ	0xFDF
 13026                           postinc2	equ	0xFDE
 13027                           postdec2	equ	0xFDD
 13028                           plusw2	equ	0xFDB
 13029                           fsr2h	equ	0xFDA
 13030                           fsr2l	equ	0xFD9
 13031                           status	equ	0xFD8
 13032                           
 13033 ;; *************** function _vscp_getGUID *****************
 13034 ;; Defined at:
 13035 ;;		line 2642 in file "../main.c"
 13036 ;; Parameters:    Size  Location     Type
 13037 ;;  idx             1    wreg     unsigned char 
 13038 ;; Auto vars:     Size  Location     Type
 13039 ;;  idx             1   23[COMRAM] unsigned char 
 13040 ;; Return value:  Size  Location     Type
 13041 ;;                  1    wreg      unsigned char 
 13042 ;; Registers used:
 13043 ;;		wreg, status,2, status,0, cstack
 13044 ;; Tracked objects:
 13045 ;;		On entry : 0/0
 13046 ;;		On exit  : 0/0
 13047 ;;		Unchanged: 0/0
 13048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13050 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13052 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13053 ;;Total ram usage:        1 bytes
 13054 ;; Hardware stack levels used:    1
 13055 ;; Hardware stack levels required when called:    3
 13056 ;; This function calls:
 13057 ;;		_Read_b_eep
 13058 ;; This function is called by:
 13059 ;;		_vscp_readStdReg
 13060 ;;		_vscp_writeStdReg
 13061 ;;		_vscp_handleProtocolEvent
 13062 ;; This function uses a non-reentrant model
 13063 ;;
 13064                           
 13065                           	psect	text54
 13066  006008                     __ptext54:
 13067                           	opt stack 0
 13068  006008                     _vscp_getGUID:
 13069                           	opt stack 25
 13070                           
 13071                           ; BSR set to: 0
 13072                           ;incstack = 0
 13073                           ;incstack = 0
 13074                           ;vscp_getGUID@idx stored from wreg
 13075  006008  CFE8 F018          	movff	wreg,vscp_getGUID@idx
 13076                           
 13077                           ;main.c: 2643: return Read_b_eep(0x12 + idx);
 13078  00600C  0E12               	movlw	18
 13079  00600E  2418               	addwf	vscp_getGUID@idx,w,c
 13080  006010  6E16               	movwf	?_Read_b_eep,c
 13081  006012  6A17               	clrf	?_Read_b_eep+1,c
 13082  006014  0E00               	movlw	0
 13083  006016  2217               	addwfc	?_Read_b_eep+1,f,c
 13084  006018  EFC2  F02F         	goto	_Read_b_eep	;wreg free
 13085  00601C                     __end_of_vscp_getGUID:
 13086                           	opt stack 0
 13087                           tblptru	equ	0xFF8
 13088                           tblptrh	equ	0xFF7
 13089                           tblptrl	equ	0xFF6
 13090                           tablat	equ	0xFF5
 13091                           prodh	equ	0xFF4
 13092                           prodl	equ	0xFF3
 13093                           intcon	equ	0xFF2
 13094                           postinc0	equ	0xFEE
 13095                           wreg	equ	0xFE8
 13096                           indf1	equ	0xFE7
 13097                           postdec1	equ	0xFE5
 13098                           fsr1h	equ	0xFE2
 13099                           fsr1l	equ	0xFE1
 13100                           indf2	equ	0xFDF
 13101                           postinc2	equ	0xFDE
 13102                           postdec2	equ	0xFDD
 13103                           plusw2	equ	0xFDB
 13104                           fsr2h	equ	0xFDA
 13105                           fsr2l	equ	0xFD9
 13106                           status	equ	0xFD8
 13107                           
 13108 ;; *************** function _vscp_getSubMinorVersion *****************
 13109 ;; Defined at:
 13110 ;;		line 2631 in file "../main.c"
 13111 ;; Parameters:    Size  Location     Type
 13112 ;;		None
 13113 ;; Auto vars:     Size  Location     Type
 13114 ;;		None
 13115 ;; Return value:  Size  Location     Type
 13116 ;;                  1    wreg      unsigned char 
 13117 ;; Registers used:
 13118 ;;		wreg
 13119 ;; Tracked objects:
 13120 ;;		On entry : F/0
 13121 ;;		On exit  : F/0
 13122 ;;		Unchanged: F/0
 13123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13128 ;;Total ram usage:        0 bytes
 13129 ;; Hardware stack levels used:    1
 13130 ;; Hardware stack levels required when called:    2
 13131 ;; This function calls:
 13132 ;;		Nothing
 13133 ;; This function is called by:
 13134 ;;		_vscp_readStdReg
 13135 ;; This function uses a non-reentrant model
 13136 ;;
 13137                           
 13138                           	psect	text55
 13139  006096                     __ptext55:
 13140                           	opt stack 0
 13141  006096                     _vscp_getSubMinorVersion:
 13142                           	opt stack 26
 13143                           
 13144                           ; BSR set to: 0
 13145                           
 13146                           ; BSR set to: 0
 13147                           ;main.c: 2632: return 2;
 13148                           
 13149                           ;incstack = 0
 13150                           ;incstack = 0
 13151  006096  0C02               	retlw	2
 13152  006098                     __end_of_vscp_getSubMinorVersion:
 13153                           	opt stack 0
 13154                           tblptru	equ	0xFF8
 13155                           tblptrh	equ	0xFF7
 13156                           tblptrl	equ	0xFF6
 13157                           tablat	equ	0xFF5
 13158                           prodh	equ	0xFF4
 13159                           prodl	equ	0xFF3
 13160                           intcon	equ	0xFF2
 13161                           postinc0	equ	0xFEE
 13162                           wreg	equ	0xFE8
 13163                           indf1	equ	0xFE7
 13164                           postdec1	equ	0xFE5
 13165                           fsr1h	equ	0xFE2
 13166                           fsr1l	equ	0xFE1
 13167                           indf2	equ	0xFDF
 13168                           postinc2	equ	0xFDE
 13169                           postdec2	equ	0xFDD
 13170                           plusw2	equ	0xFDB
 13171                           fsr2h	equ	0xFDA
 13172                           fsr2l	equ	0xFD9
 13173                           status	equ	0xFD8
 13174                           
 13175 ;; *************** function _vscp_getMinorVersion *****************
 13176 ;; Defined at:
 13177 ;;		line 2622 in file "../main.c"
 13178 ;; Parameters:    Size  Location     Type
 13179 ;;		None
 13180 ;; Auto vars:     Size  Location     Type
 13181 ;;		None
 13182 ;; Return value:  Size  Location     Type
 13183 ;;                  1    wreg      unsigned char 
 13184 ;; Registers used:
 13185 ;;		wreg
 13186 ;; Tracked objects:
 13187 ;;		On entry : F/0
 13188 ;;		On exit  : F/0
 13189 ;;		Unchanged: F/0
 13190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13195 ;;Total ram usage:        0 bytes
 13196 ;; Hardware stack levels used:    1
 13197 ;; Hardware stack levels required when called:    2
 13198 ;; This function calls:
 13199 ;;		Nothing
 13200 ;; This function is called by:
 13201 ;;		_vscp_readStdReg
 13202 ;; This function uses a non-reentrant model
 13203 ;;
 13204                           
 13205                           	psect	text56
 13206  006098                     __ptext56:
 13207                           	opt stack 0
 13208  006098                     _vscp_getMinorVersion:
 13209                           	opt stack 26
 13210                           
 13211                           ; BSR set to: 0
 13212                           
 13213                           ; BSR set to: 0
 13214                           ;main.c: 2623: return 2;
 13215                           
 13216                           ; BSR set to: 0
 13217                           ;incstack = 0
 13218                           ;incstack = 0
 13219  006098  0C02               	retlw	2
 13220  00609A                     __end_of_vscp_getMinorVersion:
 13221                           	opt stack 0
 13222                           tblptru	equ	0xFF8
 13223                           tblptrh	equ	0xFF7
 13224                           tblptrl	equ	0xFF6
 13225                           tablat	equ	0xFF5
 13226                           prodh	equ	0xFF4
 13227                           prodl	equ	0xFF3
 13228                           intcon	equ	0xFF2
 13229                           postinc0	equ	0xFEE
 13230                           wreg	equ	0xFE8
 13231                           indf1	equ	0xFE7
 13232                           postdec1	equ	0xFE5
 13233                           fsr1h	equ	0xFE2
 13234                           fsr1l	equ	0xFE1
 13235                           indf2	equ	0xFDF
 13236                           postinc2	equ	0xFDE
 13237                           postdec2	equ	0xFDD
 13238                           plusw2	equ	0xFDB
 13239                           fsr2h	equ	0xFDA
 13240                           fsr2l	equ	0xFD9
 13241                           status	equ	0xFD8
 13242                           
 13243 ;; *************** function _vscp_getMajorVersion *****************
 13244 ;; Defined at:
 13245 ;;		line 2613 in file "../main.c"
 13246 ;; Parameters:    Size  Location     Type
 13247 ;;		None
 13248 ;; Auto vars:     Size  Location     Type
 13249 ;;		None
 13250 ;; Return value:  Size  Location     Type
 13251 ;;                  1    wreg      unsigned char 
 13252 ;; Registers used:
 13253 ;;		wreg
 13254 ;; Tracked objects:
 13255 ;;		On entry : F/0
 13256 ;;		On exit  : F/0
 13257 ;;		Unchanged: F/0
 13258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13263 ;;Total ram usage:        0 bytes
 13264 ;; Hardware stack levels used:    1
 13265 ;; Hardware stack levels required when called:    2
 13266 ;; This function calls:
 13267 ;;		Nothing
 13268 ;; This function is called by:
 13269 ;;		_vscp_readStdReg
 13270 ;; This function uses a non-reentrant model
 13271 ;;
 13272                           
 13273                           	psect	text57
 13274  00609A                     __ptext57:
 13275                           	opt stack 0
 13276  00609A                     _vscp_getMajorVersion:
 13277                           	opt stack 26
 13278                           
 13279                           ; BSR set to: 0
 13280                           
 13281                           ; BSR set to: 0
 13282                           ;main.c: 2614: return 1;
 13283                           
 13284                           ; BSR set to: 0
 13285                           ;incstack = 0
 13286                           ;incstack = 0
 13287  00609A  0C01               	retlw	1
 13288  00609C                     __end_of_vscp_getMajorVersion:
 13289                           	opt stack 0
 13290                           tblptru	equ	0xFF8
 13291                           tblptrh	equ	0xFF7
 13292                           tblptrl	equ	0xFF6
 13293                           tablat	equ	0xFF5
 13294                           prodh	equ	0xFF4
 13295                           prodl	equ	0xFF3
 13296                           intcon	equ	0xFF2
 13297                           postinc0	equ	0xFEE
 13298                           wreg	equ	0xFE8
 13299                           indf1	equ	0xFE7
 13300                           postdec1	equ	0xFE5
 13301                           fsr1h	equ	0xFE2
 13302                           fsr1l	equ	0xFE1
 13303                           indf2	equ	0xFDF
 13304                           postinc2	equ	0xFDE
 13305                           postdec2	equ	0xFDD
 13306                           plusw2	equ	0xFDB
 13307                           fsr2h	equ	0xFDA
 13308                           fsr2l	equ	0xFD9
 13309                           status	equ	0xFD8
 13310                           
 13311 ;; *************** function _vscp_newNodeOnline *****************
 13312 ;; Defined at:
 13313 ;;		line 491 in file "../../vscp_firmware/common/vscp_firmware.c"
 13314 ;; Parameters:    Size  Location     Type
 13315 ;;		None
 13316 ;; Auto vars:     Size  Location     Type
 13317 ;;		None
 13318 ;; Return value:  Size  Location     Type
 13319 ;;		None               void
 13320 ;; Registers used:
 13321 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13322 ;; Tracked objects:
 13323 ;;		On entry : F/0
 13324 ;;		On exit  : 0/0
 13325 ;;		Unchanged: 0/0
 13326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13329 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13330 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13331 ;;Total ram usage:        1 bytes
 13332 ;; Hardware stack levels used:    1
 13333 ;; Hardware stack levels required when called:    7
 13334 ;; This function calls:
 13335 ;;		_vscp_sendEvent
 13336 ;; This function is called by:
 13337 ;;		_vscp_handleProtocolEvent
 13338 ;; This function uses a non-reentrant model
 13339 ;;
 13340                           
 13341                           	psect	text58
 13342  005D54                     __ptext58:
 13343                           	opt stack 0
 13344  005D54                     _vscp_newNodeOnline:
 13345                           	opt stack 22
 13346                           
 13347                           ; BSR set to: 0
 13348                           ;vscp_firmware.c: 492: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 13349                           ;vscp_firmware.c: 493: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 13350                           
 13351                           ; BSR set to: 0
 13352                           ;incstack = 0
 13353                           ;incstack = 0
 13354  005D54  C0BD  F044         	movff	_vscp_imsg,??_vscp_newNodeOnline
 13355  005D58  0E0F               	movlw	15
 13356  005D5A  1644               	andwf	??_vscp_newNodeOnline,f,c
 13357  005D5C  0444               	decf	??_vscp_newNodeOnline,w,c
 13358  005D5E  A4D8               	btfss	status,2,c
 13359  005D60  0012               	return	
 13360                           
 13361                           ; BSR set to: 0
 13362  005D62  51BB               	movf	_vscp_nickname& (0+255),w,b
 13363  005D64  EE20  F0C3         	lfsr	2,_vscp_imsg+6
 13364  005D68  62DF               	cpfseq	indf2,c
 13365  005D6A  0012               	return	
 13366                           
 13367                           ; BSR set to: 0
 13368                           ;vscp_firmware.c: 499: vscp_omsg.flags = 0x80;
 13369  005D6C  0E80               	movlw	128
 13370  005D6E  6FCB               	movwf	_vscp_omsg& (0+255),b
 13371                           
 13372                           ; BSR set to: 0
 13373                           ;vscp_firmware.c: 500: vscp_omsg.priority = 0x00;
 13374  005D70  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
 13375                           
 13376                           ; BSR set to: 0
 13377                           ;vscp_firmware.c: 501: vscp_omsg.vscp_class = 0;
 13378  005D72  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
 13379  005D74  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
 13380                           
 13381                           ;vscp_firmware.c: 502: vscp_omsg.vscp_type = 3;
 13382  005D76  0E03               	movlw	3
 13383  005D78  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
 13384                           
 13385                           ; BSR set to: 0
 13386                           ;vscp_firmware.c: 503: vscp_sendEvent();
 13387  005D7A  EF68  F02E         	goto	_vscp_sendEvent	;wreg free
 13388  005D7E                     __end_of_vscp_newNodeOnline:
 13389                           	opt stack 0
 13390                           tblptru	equ	0xFF8
 13391                           tblptrh	equ	0xFF7
 13392                           tblptrl	equ	0xFF6
 13393                           tablat	equ	0xFF5
 13394                           prodh	equ	0xFF4
 13395                           prodl	equ	0xFF3
 13396                           intcon	equ	0xFF2
 13397                           postinc0	equ	0xFEE
 13398                           wreg	equ	0xFE8
 13399                           indf1	equ	0xFE7
 13400                           postdec1	equ	0xFE5
 13401                           fsr1h	equ	0xFE2
 13402                           fsr1l	equ	0xFE1
 13403                           indf2	equ	0xFDF
 13404                           postinc2	equ	0xFDE
 13405                           postdec2	equ	0xFDD
 13406                           plusw2	equ	0xFDB
 13407                           fsr2h	equ	0xFDA
 13408                           fsr2l	equ	0xFD9
 13409                           status	equ	0xFD8
 13410                           
 13411 ;; *************** function _vscp_handleDropNickname *****************
 13412 ;; Defined at:
 13413 ;;		line 425 in file "../../vscp_firmware/common/vscp_firmware.c"
 13414 ;; Parameters:    Size  Location     Type
 13415 ;;		None
 13416 ;; Auto vars:     Size  Location     Type
 13417 ;;  bytes           1   23[COMRAM] unsigned char 
 13418 ;; Return value:  Size  Location     Type
 13419 ;;		None               void
 13420 ;; Registers used:
 13421 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13422 ;; Tracked objects:
 13423 ;;		On entry : F/0
 13424 ;;		On exit  : E/0
 13425 ;;		Unchanged: 0/0
 13426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13428 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13430 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13431 ;;Total ram usage:        1 bytes
 13432 ;; Hardware stack levels used:    1
 13433 ;; Hardware stack levels required when called:    5
 13434 ;; This function calls:
 13435 ;;		_vscp_init
 13436 ;;		_vscp_writeNicknamePermanent
 13437 ;; This function is called by:
 13438 ;;		_vscp_handleProtocolEvent
 13439 ;; This function uses a non-reentrant model
 13440 ;;
 13441                           
 13442                           	psect	text59
 13443  005CA0                     __ptext59:
 13444                           	opt stack 0
 13445  005CA0                     _vscp_handleDropNickname:
 13446                           	opt stack 24
 13447                           
 13448                           ; BSR set to: 0
 13449                           ;vscp_firmware.c: 426: uint8_t bytes = vscp_imsg.flags & 0x0f;
 13450                           
 13451                           ;incstack = 0
 13452                           ;incstack = 0
 13453  005CA0  51BD               	movf	_vscp_imsg& (0+255),w,b
 13454  005CA2  0B0F               	andlw	15
 13455  005CA4  6E18               	movwf	vscp_handleDropNickname@bytes,c
 13456                           
 13457                           ; BSR set to: 0
 13458                           ;vscp_firmware.c: 432: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 13459  005CA6  5018               	movf	vscp_handleDropNickname@bytes,w,c
 13460  005CA8  B4D8               	btfsc	status,2,c
 13461  005CAA  0012               	return	
 13462                           
 13463                           ; BSR set to: 0
 13464  005CAC  51BB               	movf	_vscp_nickname& (0+255),w,b
 13465  005CAE  EE20  F0C3         	lfsr	2,_vscp_imsg+6
 13466  005CB2  62DF               	cpfseq	indf2,c
 13467  005CB4  0012               	return	
 13468                           
 13469                           ; BSR set to: 0
 13470                           ;vscp_firmware.c: 465: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 13471  005CB6  0418               	decf	vscp_handleDropNickname@bytes,w,c
 13472  005CB8  E005               	bz	l1071
 13473                           
 13474                           ; BSR set to: 0
 13475  005CBA  0E01               	movlw	1
 13476  005CBC  6418               	cpfsgt	vscp_handleDropNickname@bytes,c
 13477  005CBE  0C01               	retlw	1
 13478                           
 13479                           ; BSR set to: 0
 13480  005CC0  67C4               	tstfsz	(_vscp_imsg+7)& (0+255),b
 13481  005CC2  0C01               	retlw	1
 13482  005CC4                     l1071:
 13483                           
 13484                           ; BSR set to: 0
 13485                           ;vscp_firmware.c: 467: vscp_nickname = 0xff;
 13486  005CC4  69BB               	setf	_vscp_nickname& (0+255),b
 13487                           
 13488                           ; BSR set to: 0
 13489                           ;vscp_firmware.c: 468: vscp_writeNicknamePermanent(0xff);
 13490  005CC6  0EFF               	movlw	255
 13491  005CC8  ECE5  F02F         	call	_vscp_writeNicknamePermanent
 13492                           
 13493                           ;vscp_firmware.c: 469: vscp_init();
 13494  005CCC  EFE7  F02C         	goto	_vscp_init	;wreg free
 13495  005CD0                     __end_of_vscp_handleDropNickname:
 13496                           	opt stack 0
 13497                           tblptru	equ	0xFF8
 13498                           tblptrh	equ	0xFF7
 13499                           tblptrl	equ	0xFF6
 13500                           tablat	equ	0xFF5
 13501                           prodh	equ	0xFF4
 13502                           prodl	equ	0xFF3
 13503                           intcon	equ	0xFF2
 13504                           postinc0	equ	0xFEE
 13505                           wreg	equ	0xFE8
 13506                           indf1	equ	0xFE7
 13507                           postdec1	equ	0xFE5
 13508                           fsr1h	equ	0xFE2
 13509                           fsr1l	equ	0xFE1
 13510                           indf2	equ	0xFDF
 13511                           postinc2	equ	0xFDE
 13512                           postdec2	equ	0xFDD
 13513                           plusw2	equ	0xFDB
 13514                           fsr2h	equ	0xFDA
 13515                           fsr2l	equ	0xFD9
 13516                           status	equ	0xFD8
 13517                           
 13518 ;; *************** function _vscp_init *****************
 13519 ;; Defined at:
 13520 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 13521 ;; Parameters:    Size  Location     Type
 13522 ;;		None
 13523 ;; Auto vars:     Size  Location     Type
 13524 ;;		None
 13525 ;; Return value:  Size  Location     Type
 13526 ;;		None               void
 13527 ;; Registers used:
 13528 ;;		wreg, status,2, status,0, cstack
 13529 ;; Tracked objects:
 13530 ;;		On entry : 0/0
 13531 ;;		On exit  : F/1
 13532 ;;		Unchanged: 0/0
 13533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13538 ;;Total ram usage:        0 bytes
 13539 ;; Hardware stack levels used:    1
 13540 ;; Hardware stack levels required when called:    4
 13541 ;; This function calls:
 13542 ;;		_vscp_readNicknamePermanent
 13543 ;; This function is called by:
 13544 ;;		_main
 13545 ;;		_vscp_handleDropNickname
 13546 ;;		_vscp_handleProtocolEvent
 13547 ;; This function uses a non-reentrant model
 13548 ;;
 13549                           
 13550                           	psect	text60
 13551  0059CE                     __ptext60:
 13552                           	opt stack 0
 13553  0059CE                     _vscp_init:
 13554                           	opt stack 24
 13555                           
 13556                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 13557                           
 13558                           ;incstack = 0
 13559                           ;incstack = 0
 13560  0059CE  0E02               	movlw	2
 13561  0059D0  6E4D               	movwf	_vscp_initledfunc,c
 13562                           
 13563                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 13564  0059D2  EC34  F030         	call	_vscp_readNicknamePermanent	;wreg free
 13565  0059D6  0100               	movlb	0	; () banked
 13566  0059D8  6FBB               	movwf	_vscp_nickname& (0+255),b
 13567                           
 13568                           ; BSR set to: 0
 13569                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 13570  0059DA  67BB               	tstfsz	_vscp_nickname& (0+255),b
 13571  0059DC  D001               	goto	l1016
 13572                           
 13573                           ; BSR set to: 0
 13574  0059DE  69BB               	setf	_vscp_nickname& (0+255),b
 13575  0059E0                     l1016:
 13576                           
 13577                           ; BSR set to: 0
 13578                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 13579  0059E0  6BBD               	clrf	_vscp_imsg& (0+255),b
 13580                           
 13581                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 13582  0059E2  6BBE               	clrf	(_vscp_imsg+1)& (0+255),b
 13583                           
 13584                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 13585  0059E4  6BBF               	clrf	(_vscp_imsg+2)& (0+255),b
 13586  0059E6  6BC0               	clrf	(_vscp_imsg+3)& (0+255),b
 13587                           
 13588                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 13589  0059E8  6BC1               	clrf	(_vscp_imsg+4)& (0+255),b
 13590                           
 13591                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 13592  0059EA  6BCB               	clrf	_vscp_omsg& (0+255),b
 13593                           
 13594                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 13595  0059EC  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
 13596                           
 13597                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 13598  0059EE  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
 13599  0059F0  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
 13600                           
 13601                           ;vscp_firmware.c: 138: vscp_omsg.vscp_type = 0;
 13602  0059F2  6BCF               	clrf	(_vscp_omsg+4)& (0+255),b
 13603                           
 13604                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 13605  0059F4  6A4B               	clrf	_vscp_errorcnt,c
 13606                           
 13607                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 13608  0059F6  6A4A               	clrf	_vscp_alarmstatus,c
 13609                           
 13610                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 13611  0059F8  6A4F               	clrf	_vscp_probe_address,c
 13612                           
 13613                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 13614  0059FA  6BBC               	clrf	_vscp_node_state& (0+255),b
 13615                           
 13616                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 13617  0059FC  6A4E               	clrf	_vscp_node_substate,c
 13618                           
 13619                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 13620  0059FE  6A50               	clrf	_vscp_probe_cnt,c
 13621                           
 13622                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 13623  005A00  6A46               	clrf	_vscp_page_select,c
 13624  005A02  6A47               	clrf	_vscp_page_select+1,c
 13625                           
 13626                           ;vscp_firmware.c: 153: vscp_timer = 0;
 13627  005A04  0101               	movlb	1	; () banked
 13628  005A06  6B1E               	clrf	_vscp_timer& (0+255),b	;volatile
 13629  005A08  6B1F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 13630                           
 13631                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 13632  005A0A  6B1C               	clrf	_vscp_configtimer& (0+255),b	;volatile
 13633  005A0C  6B1D               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 13634                           
 13635                           ;vscp_firmware.c: 155: vscp_second = 0;
 13636  005A0E  6A51               	clrf	_vscp_second,c
 13637                           
 13638                           ;vscp_firmware.c: 156: vscp_minute = 0;
 13639  005A10  6B21               	clrf	_vscp_minute& (0+255),b
 13640                           
 13641                           ;vscp_firmware.c: 157: vscp_hour = 0;
 13642  005A12  6B20               	clrf	_vscp_hour& (0+255),b
 13643                           
 13644                           ; BSR set to: 1
 13645  005A14  0012               	return	
 13646  005A16                     __end_of_vscp_init:
 13647                           	opt stack 0
 13648                           tblptru	equ	0xFF8
 13649                           tblptrh	equ	0xFF7
 13650                           tblptrl	equ	0xFF6
 13651                           tablat	equ	0xFF5
 13652                           prodh	equ	0xFF4
 13653                           prodl	equ	0xFF3
 13654                           intcon	equ	0xFF2
 13655                           postinc0	equ	0xFEE
 13656                           wreg	equ	0xFE8
 13657                           indf1	equ	0xFE7
 13658                           postdec1	equ	0xFE5
 13659                           fsr1h	equ	0xFE2
 13660                           fsr1l	equ	0xFE1
 13661                           indf2	equ	0xFDF
 13662                           postinc2	equ	0xFDE
 13663                           postdec2	equ	0xFDD
 13664                           plusw2	equ	0xFDB
 13665                           fsr2h	equ	0xFDA
 13666                           fsr2l	equ	0xFD9
 13667                           status	equ	0xFD8
 13668                           
 13669 ;; *************** function _vscp_readNicknamePermanent *****************
 13670 ;; Defined at:
 13671 ;;		line 2816 in file "../main.c"
 13672 ;; Parameters:    Size  Location     Type
 13673 ;;		None
 13674 ;; Auto vars:     Size  Location     Type
 13675 ;;		None
 13676 ;; Return value:  Size  Location     Type
 13677 ;;                  1    wreg      unsigned char 
 13678 ;; Registers used:
 13679 ;;		wreg, status,2, status,0, cstack
 13680 ;; Tracked objects:
 13681 ;;		On entry : 0/0
 13682 ;;		On exit  : 0/0
 13683 ;;		Unchanged: 0/0
 13684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13689 ;;Total ram usage:        0 bytes
 13690 ;; Hardware stack levels used:    1
 13691 ;; Hardware stack levels required when called:    3
 13692 ;; This function calls:
 13693 ;;		_Read_b_eep
 13694 ;; This function is called by:
 13695 ;;		_vscp_init
 13696 ;; This function uses a non-reentrant model
 13697 ;;
 13698                           
 13699                           	psect	text61
 13700  006068                     __ptext61:
 13701                           	opt stack 0
 13702  006068                     _vscp_readNicknamePermanent:
 13703                           	opt stack 24
 13704                           
 13705                           ;main.c: 2817: return Read_b_eep(0x01);
 13706                           
 13707                           ; BSR set to: 1
 13708                           ;incstack = 0
 13709                           ;incstack = 0
 13710  006068  6A17               	clrf	?_Read_b_eep+1,c
 13711  00606A  0E01               	movlw	1
 13712  00606C  6E16               	movwf	?_Read_b_eep,c
 13713  00606E  EFC2  F02F         	goto	_Read_b_eep	;wreg free
 13714  006072                     __end_of_vscp_readNicknamePermanent:
 13715                           	opt stack 0
 13716                           tblptru	equ	0xFF8
 13717                           tblptrh	equ	0xFF7
 13718                           tblptrl	equ	0xFF6
 13719                           tablat	equ	0xFF5
 13720                           prodh	equ	0xFF4
 13721                           prodl	equ	0xFF3
 13722                           intcon	equ	0xFF2
 13723                           postinc0	equ	0xFEE
 13724                           wreg	equ	0xFE8
 13725                           indf1	equ	0xFE7
 13726                           postdec1	equ	0xFE5
 13727                           fsr1h	equ	0xFE2
 13728                           fsr1l	equ	0xFE1
 13729                           indf2	equ	0xFDF
 13730                           postinc2	equ	0xFDE
 13731                           postdec2	equ	0xFDD
 13732                           plusw2	equ	0xFDB
 13733                           fsr2h	equ	0xFDA
 13734                           fsr2l	equ	0xFD9
 13735                           status	equ	0xFD8
 13736                           
 13737 ;; *************** function _Read_b_eep *****************
 13738 ;; Defined at:
 13739 ;;		line 36 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/EEP/read_B.c"
 13740 ;; Parameters:    Size  Location     Type
 13741 ;;  badd            2   21[COMRAM] unsigned int 
 13742 ;; Auto vars:     Size  Location     Type
 13743 ;;		None
 13744 ;; Return value:  Size  Location     Type
 13745 ;;                  1    wreg      unsigned char 
 13746 ;; Registers used:
 13747 ;;		wreg, status,2, status,0
 13748 ;; Tracked objects:
 13749 ;;		On entry : 0/0
 13750 ;;		On exit  : 0/0
 13751 ;;		Unchanged: 0/0
 13752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13753 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13756 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13757 ;;Total ram usage:        2 bytes
 13758 ;; Hardware stack levels used:    1
 13759 ;; Hardware stack levels required when called:    2
 13760 ;; This function calls:
 13761 ;;		Nothing
 13762 ;; This function is called by:
 13763 ;;		_doWork
 13764 ;;		_doOneSecondWork
 13765 ;;		_sendTempEvent
 13766 ;;		_getCalibrationValue
 13767 ;;		_writeCoeffs2Ram
 13768 ;;		_handle_sync
 13769 ;;		_vscp_readAppReg
 13770 ;;		_vscp_writeAppReg
 13771 ;;		_vscp_getGUID
 13772 ;;		_vscp_getUserID
 13773 ;;		_vscp_getManufacturerId
 13774 ;;		_vscp_getZone
 13775 ;;		_vscp_getSubzone
 13776 ;;		_vscp_readNicknamePermanent
 13777 ;;		_vscp_getControlByte
 13778 ;; This function uses a non-reentrant model
 13779 ;;
 13780                           
 13781                           	psect	text62
 13782  005F84                     __ptext62:
 13783                           	opt stack 0
 13784  005F84                     _Read_b_eep:
 13785                           	opt stack 26
 13786                           
 13787                           ;incstack = 0
 13788                           ;incstack = 0
 13789  005F84  5017               	movf	Read_b_eep@badd+1,w,c
 13790  005F86  0B03               	andlw	3
 13791  005F88  6E75               	movwf	3957,c	;volatile
 13792  005F8A  C016  FF74         	movff	Read_b_eep@badd,3956	;volatile
 13793  005F8E  9C7F               	bcf	3967,6,c	;volatile
 13794  005F90  9E7F               	bcf	3967,7,c	;volatile
 13795  005F92  807F               	bsf	3967,0,c	;volatile
 13796  005F94  F000               	nop		;# 
 13797  005F96  F000               	nop		;# 
 13798  005F98  5073               	movf	3955,w,c	;volatile
 13799  005F9A  0012               	return	
 13800  005F9C                     __end_of_Read_b_eep:
 13801                           	opt stack 0
 13802                           tblptru	equ	0xFF8
 13803                           tblptrh	equ	0xFF7
 13804                           tblptrl	equ	0xFF6
 13805                           tablat	equ	0xFF5
 13806                           prodh	equ	0xFF4
 13807                           prodl	equ	0xFF3
 13808                           intcon	equ	0xFF2
 13809                           postinc0	equ	0xFEE
 13810                           wreg	equ	0xFE8
 13811                           indf1	equ	0xFE7
 13812                           postdec1	equ	0xFE5
 13813                           fsr1h	equ	0xFE2
 13814                           fsr1l	equ	0xFE1
 13815                           indf2	equ	0xFDF
 13816                           postinc2	equ	0xFDE
 13817                           postdec2	equ	0xFDD
 13818                           plusw2	equ	0xFDB
 13819                           fsr2h	equ	0xFDA
 13820                           fsr2l	equ	0xFD9
 13821                           status	equ	0xFD8
 13822                           
 13823 ;; *************** function _vscp_handleSetNickname *****************
 13824 ;; Defined at:
 13825 ;;		line 409 in file "../../vscp_firmware/common/vscp_firmware.c"
 13826 ;; Parameters:    Size  Location     Type
 13827 ;;		None
 13828 ;; Auto vars:     Size  Location     Type
 13829 ;;		None
 13830 ;; Return value:  Size  Location     Type
 13831 ;;		None               void
 13832 ;; Registers used:
 13833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13834 ;; Tracked objects:
 13835 ;;		On entry : F/0
 13836 ;;		On exit  : 0/0
 13837 ;;		Unchanged: 0/0
 13838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13843 ;;Total ram usage:        0 bytes
 13844 ;; Hardware stack levels used:    1
 13845 ;; Hardware stack levels required when called:    4
 13846 ;; This function calls:
 13847 ;;		_vscp_writeNicknamePermanent
 13848 ;; This function is called by:
 13849 ;;		_vscp_handleProtocolEvent
 13850 ;; This function uses a non-reentrant model
 13851 ;;
 13852                           
 13853                           	psect	text63
 13854  005EA0                     __ptext63:
 13855                           	opt stack 0
 13856  005EA0                     _vscp_handleSetNickname:
 13857                           	opt stack 25
 13858                           
 13859                           ; BSR set to: 0
 13860                           ;vscp_firmware.c: 410: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 13861                           ;vscp_firmware.c: 411: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 13862                           
 13863                           ;incstack = 0
 13864                           ;incstack = 0
 13865  005EA0  51BD               	movf	_vscp_imsg& (0+255),w,b
 13866  005EA2  0B0F               	andlw	15
 13867  005EA4  0A02               	xorlw	2
 13868  005EA6  A4D8               	btfss	status,2,c
 13869  005EA8  0012               	return	
 13870                           
 13871                           ; BSR set to: 0
 13872  005EAA  51BB               	movf	_vscp_nickname& (0+255),w,b
 13873  005EAC  EE20  F0C3         	lfsr	2,_vscp_imsg+6
 13874  005EB0  62DF               	cpfseq	indf2,c
 13875  005EB2  0012               	return	
 13876                           
 13877                           ; BSR set to: 0
 13878                           ;vscp_firmware.c: 414: vscp_nickname = vscp_imsg.data[ 1 ];
 13879  005EB4  C0C4  F0BB         	movff	_vscp_imsg+7,_vscp_nickname
 13880                           
 13881                           ; BSR set to: 0
 13882                           ;vscp_firmware.c: 415: vscp_writeNicknamePermanent(vscp_nickname);
 13883  005EB8  51BB               	movf	_vscp_nickname& (0+255),w,b
 13884  005EBA  EFE5  F02F         	goto	_vscp_writeNicknamePermanent
 13885  005EBE                     __end_of_vscp_handleSetNickname:
 13886                           	opt stack 0
 13887                           tblptru	equ	0xFF8
 13888                           tblptrh	equ	0xFF7
 13889                           tblptrl	equ	0xFF6
 13890                           tablat	equ	0xFF5
 13891                           prodh	equ	0xFF4
 13892                           prodl	equ	0xFF3
 13893                           intcon	equ	0xFF2
 13894                           postinc0	equ	0xFEE
 13895                           wreg	equ	0xFE8
 13896                           indf1	equ	0xFE7
 13897                           postdec1	equ	0xFE5
 13898                           fsr1h	equ	0xFE2
 13899                           fsr1l	equ	0xFE1
 13900                           indf2	equ	0xFDF
 13901                           postinc2	equ	0xFDE
 13902                           postdec2	equ	0xFDD
 13903                           plusw2	equ	0xFDB
 13904                           fsr2h	equ	0xFDA
 13905                           fsr2l	equ	0xFD9
 13906                           status	equ	0xFD8
 13907                           
 13908 ;; *************** function _vscp_handleHeartbeat *****************
 13909 ;; Defined at:
 13910 ;;		line 400 in file "../../vscp_firmware/common/vscp_firmware.c"
 13911 ;; Parameters:    Size  Location     Type
 13912 ;;		None
 13913 ;; Auto vars:     Size  Location     Type
 13914 ;;		None
 13915 ;; Return value:  Size  Location     Type
 13916 ;;		None               void
 13917 ;; Registers used:
 13918 ;;		None
 13919 ;; Tracked objects:
 13920 ;;		On entry : F/0
 13921 ;;		On exit  : F/0
 13922 ;;		Unchanged: F/0
 13923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13928 ;;Total ram usage:        0 bytes
 13929 ;; Hardware stack levels used:    1
 13930 ;; Hardware stack levels required when called:    2
 13931 ;; This function calls:
 13932 ;;		Nothing
 13933 ;; This function is called by:
 13934 ;;		_vscp_handleProtocolEvent
 13935 ;; This function uses a non-reentrant model
 13936 ;;
 13937                           
 13938                           	psect	text64
 13939  00609C                     __ptext64:
 13940                           	opt stack 0
 13941  00609C                     _vscp_handleHeartbeat:
 13942                           	opt stack 27
 13943                           
 13944                           ; BSR set to: 0
 13945                           
 13946                           ;incstack = 0
 13947                           ;incstack = 0
 13948  00609C  0012               	return	
 13949  00609E                     __end_of_vscp_handleHeartbeat:
 13950                           	opt stack 0
 13951                           tblptru	equ	0xFF8
 13952                           tblptrh	equ	0xFF7
 13953                           tblptrl	equ	0xFF6
 13954                           tablat	equ	0xFF5
 13955                           prodh	equ	0xFF4
 13956                           prodl	equ	0xFF3
 13957                           intcon	equ	0xFF2
 13958                           postinc0	equ	0xFEE
 13959                           wreg	equ	0xFE8
 13960                           indf1	equ	0xFE7
 13961                           postdec1	equ	0xFE5
 13962                           fsr1h	equ	0xFE2
 13963                           fsr1l	equ	0xFE1
 13964                           indf2	equ	0xFDF
 13965                           postinc2	equ	0xFDE
 13966                           postdec2	equ	0xFDD
 13967                           plusw2	equ	0xFDB
 13968                           fsr2h	equ	0xFDA
 13969                           fsr2l	equ	0xFD9
 13970                           status	equ	0xFD8
 13971                           
 13972 ;; *************** function _vscp_goBootloaderMode *****************
 13973 ;; Defined at:
 13974 ;;		line 2797 in file "../main.c"
 13975 ;; Parameters:    Size  Location     Type
 13976 ;;  algorithm       1    wreg     unsigned char 
 13977 ;; Auto vars:     Size  Location     Type
 13978 ;;  algorithm       1   17[COMRAM] unsigned char 
 13979 ;; Return value:  Size  Location     Type
 13980 ;;		None               void
 13981 ;; Registers used:
 13982 ;;		wreg, status,2, status,0, cstack
 13983 ;; Tracked objects:
 13984 ;;		On entry : F/0
 13985 ;;		On exit  : 0/0
 13986 ;;		Unchanged: 0/0
 13987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13989 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13991 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13992 ;;Total ram usage:        1 bytes
 13993 ;; Hardware stack levels used:    1
 13994 ;; Hardware stack levels required when called:    3
 13995 ;; This function calls:
 13996 ;;		_Busy_eep
 13997 ;;		_Write_b_eep
 13998 ;;		_ECANSetOperationMode
 13999 ;; This function is called by:
 14000 ;;		_vscp_handleProtocolEvent
 14001 ;; This function uses a non-reentrant model
 14002 ;;
 14003                           
 14004                           	psect	text65
 14005  005E3A                     __ptext65:
 14006                           	opt stack 0
 14007  005E3A                     _vscp_goBootloaderMode:
 14008                           	opt stack 26
 14009                           
 14010                           ; BSR set to: 0
 14011                           ;incstack = 0
 14012                           ;incstack = 0
 14013                           ;vscp_goBootloaderMode@algorithm stored from wreg
 14014  005E3A  CFE8 F012          	movff	wreg,vscp_goBootloaderMode@algorithm
 14015                           
 14016                           ; BSR set to: 0
 14017                           ;main.c: 2798: if ( 0x01 != algorithm ) return;
 14018  005E3E  0412               	decf	vscp_goBootloaderMode@algorithm,w,c
 14019  005E40  A4D8               	btfss	status,2,c
 14020  005E42  0012               	return	
 14021                           
 14022                           ; BSR set to: 0
 14023                           ;main.c: 2802: (Busy_eep(), Write_b_eep(0x00,0xff));
 14024  005E44  EC3D  F030         	call	_Busy_eep	;wreg free
 14025  005E48  6A0F               	clrf	?_Write_b_eep+1,c
 14026  005E4A  6A0E               	clrf	?_Write_b_eep,c
 14027  005E4C  0EFF               	movlw	255
 14028  005E4E  6810               	setf	?_Write_b_eep+2,c
 14029  005E50  ECC8  F02D         	call	_Write_b_eep	;wreg free
 14030                           
 14031                           ;main.c: 2805: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 14032  005E54  0E80               	movlw	128
 14033  005E56  ECCE  F02F         	call	_ECANSetOperationMode
 14034  005E5A  00FF               	reset		;# 
 14035  005E5C  0012               	return	
 14036  005E5E                     __end_of_vscp_goBootloaderMode:
 14037                           	opt stack 0
 14038                           tblptru	equ	0xFF8
 14039                           tblptrh	equ	0xFF7
 14040                           tblptrl	equ	0xFF6
 14041                           tablat	equ	0xFF5
 14042                           prodh	equ	0xFF4
 14043                           prodl	equ	0xFF3
 14044                           intcon	equ	0xFF2
 14045                           postinc0	equ	0xFEE
 14046                           wreg	equ	0xFE8
 14047                           indf1	equ	0xFE7
 14048                           postdec1	equ	0xFE5
 14049                           fsr1h	equ	0xFE2
 14050                           fsr1l	equ	0xFE1
 14051                           indf2	equ	0xFDF
 14052                           postinc2	equ	0xFDE
 14053                           postdec2	equ	0xFDD
 14054                           plusw2	equ	0xFDB
 14055                           fsr2h	equ	0xFDA
 14056                           fsr2l	equ	0xFD9
 14057                           status	equ	0xFD8
 14058                           
 14059 ;; *************** function _vscp_getMatrixInfo *****************
 14060 ;; Defined at:
 14061 ;;		line 2732 in file "../main.c"
 14062 ;; Parameters:    Size  Location     Type
 14063 ;;  pData           1    wreg     PTR unsigned char 
 14064 ;;		 -> vscp_omsg(14), 
 14065 ;; Auto vars:     Size  Location     Type
 14066 ;;  pData           1   13[COMRAM] PTR unsigned char 
 14067 ;;		 -> vscp_omsg(14), 
 14068 ;;  i               1   14[COMRAM] unsigned char 
 14069 ;; Return value:  Size  Location     Type
 14070 ;;		None               void
 14071 ;; Registers used:
 14072 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14073 ;; Tracked objects:
 14074 ;;		On entry : F/0
 14075 ;;		On exit  : F/0
 14076 ;;		Unchanged: F/0
 14077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14079 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14081 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14082 ;;Total ram usage:        2 bytes
 14083 ;; Hardware stack levels used:    1
 14084 ;; Hardware stack levels required when called:    2
 14085 ;; This function calls:
 14086 ;;		Nothing
 14087 ;; This function is called by:
 14088 ;;		_vscp_handleProtocolEvent
 14089 ;; This function uses a non-reentrant model
 14090 ;;
 14091                           
 14092                           	psect	text66
 14093  005F6A                     __ptext66:
 14094                           	opt stack 0
 14095  005F6A                     _vscp_getMatrixInfo:
 14096                           	opt stack 27
 14097                           
 14098                           ;incstack = 0
 14099                           ;incstack = 0
 14100                           ;vscp_getMatrixInfo@pData stored from wreg
 14101  005F6A  CFE8 F00E          	movff	wreg,vscp_getMatrixInfo@pData
 14102                           
 14103                           ; BSR set to: 0
 14104                           ;main.c: 2733: uint8_t i;
 14105                           ;main.c: 2737: for (i = 0; i < 8; i++) {
 14106  005F6E  6A0F               	clrf	vscp_getMatrixInfo@i,c
 14107  005F70                     l9269:
 14108                           
 14109                           ; BSR set to: 0
 14110                           ;main.c: 2738: pData[ i ] = 0;
 14111  005F70  500E               	movf	vscp_getMatrixInfo@pData,w,c
 14112  005F72  240F               	addwf	vscp_getMatrixInfo@i,w,c
 14113  005F74  6ED9               	movwf	fsr2l,c
 14114  005F76  6ADA               	clrf	fsr2h,c
 14115  005F78  6ADF               	clrf	indf2,c
 14116                           
 14117                           ; BSR set to: 0
 14118  005F7A  2A0F               	incf	vscp_getMatrixInfo@i,f,c
 14119                           
 14120                           ; BSR set to: 0
 14121  005F7C  0E07               	movlw	7
 14122  005F7E  640F               	cpfsgt	vscp_getMatrixInfo@i,c
 14123  005F80  D7F7               	goto	l9269
 14124  005F82  0C07               	retlw	7
 14125  005F84                     __end_of_vscp_getMatrixInfo:
 14126                           	opt stack 0
 14127                           tblptru	equ	0xFF8
 14128                           tblptrh	equ	0xFF7
 14129                           tblptrl	equ	0xFF6
 14130                           tablat	equ	0xFF5
 14131                           prodh	equ	0xFF4
 14132                           prodl	equ	0xFF3
 14133                           intcon	equ	0xFF2
 14134                           postinc0	equ	0xFEE
 14135                           wreg	equ	0xFE8
 14136                           indf1	equ	0xFE7
 14137                           postdec1	equ	0xFE5
 14138                           fsr1h	equ	0xFE2
 14139                           fsr1l	equ	0xFE1
 14140                           indf2	equ	0xFDF
 14141                           postinc2	equ	0xFDE
 14142                           postdec2	equ	0xFDD
 14143                           plusw2	equ	0xFDB
 14144                           fsr2h	equ	0xFDA
 14145                           fsr2l	equ	0xFD9
 14146                           status	equ	0xFD8
 14147                           
 14148 ;; *************** function _vscp_handleProbeState *****************
 14149 ;; Defined at:
 14150 ;;		line 206 in file "../../vscp_firmware/common/vscp_firmware.c"
 14151 ;; Parameters:    Size  Location     Type
 14152 ;;		None
 14153 ;; Auto vars:     Size  Location     Type
 14154 ;;		None
 14155 ;; Return value:  Size  Location     Type
 14156 ;;		None               void
 14157 ;; Registers used:
 14158 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14159 ;; Tracked objects:
 14160 ;;		On entry : 0/0
 14161 ;;		On exit  : F/0
 14162 ;;		Unchanged: 0/0
 14163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14168 ;;Total ram usage:        0 bytes
 14169 ;; Hardware stack levels used:    1
 14170 ;; Hardware stack levels required when called:    8
 14171 ;; This function calls:
 14172 ;;		_vscp_goActiveState
 14173 ;;		_vscp_sendEvent
 14174 ;;		_vscp_writeNicknamePermanent
 14175 ;; This function is called by:
 14176 ;;		_main
 14177 ;; This function uses a non-reentrant model
 14178 ;;
 14179                           
 14180                           	psect	text67
 14181  004D0E                     __ptext67:
 14182                           	opt stack 0
 14183  004D0E                     _vscp_handleProbeState:
 14184                           	opt stack 22
 14185                           
 14186                           ;vscp_firmware.c: 207: switch (vscp_node_substate) {
 14187                           
 14188                           ; BSR set to: 0
 14189                           ;incstack = 0
 14190                           ;incstack = 0
 14191  004D0E  D055               	goto	l10851
 14192  004D10                     l10783:
 14193                           
 14194                           ;vscp_firmware.c: 211: if (0xff != vscp_probe_address) {
 14195  004D10  284F               	incf	_vscp_probe_address,w,c
 14196  004D12  E012               	bz	l10799
 14197                           
 14198                           ;vscp_firmware.c: 213: vscp_omsg.flags = 0x80 + 1;
 14199  004D14  0E81               	movlw	129
 14200  004D16  0100               	movlb	0	; () banked
 14201  004D18  6FCB               	movwf	_vscp_omsg& (0+255),b
 14202                           
 14203                           ; BSR set to: 0
 14204                           ;vscp_firmware.c: 214: vscp_omsg.priority = 0x00;
 14205  004D1A  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
 14206                           
 14207                           ; BSR set to: 0
 14208                           ;vscp_firmware.c: 215: vscp_omsg.vscp_class = 0;
 14209  004D1C  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
 14210  004D1E  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
 14211                           
 14212                           ;vscp_firmware.c: 216: vscp_omsg.vscp_type = 2;
 14213  004D20  0E02               	movlw	2
 14214  004D22  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
 14215                           
 14216                           ; BSR set to: 0
 14217                           ;vscp_firmware.c: 217: vscp_omsg.data[ 0 ] = vscp_probe_address;
 14218  004D24  C04F  F0D1         	movff	_vscp_probe_address,_vscp_omsg+6
 14219                           
 14220                           ; BSR set to: 0
 14221                           ;vscp_firmware.c: 220: vscp_sendEvent();
 14222  004D28  EC68  F02E         	call	_vscp_sendEvent	;wreg free
 14223                           
 14224                           ;vscp_firmware.c: 222: vscp_node_substate = 0x01;
 14225  004D2C  0E01               	movlw	1
 14226  004D2E  6E4E               	movwf	_vscp_node_substate,c
 14227  004D30                     l10797:
 14228                           
 14229                           ;vscp_firmware.c: 223: vscp_timer = 0;
 14230  004D30  0101               	movlb	1	; () banked
 14231  004D32  6B1E               	clrf	_vscp_timer& (0+255),b	;volatile
 14232  004D34  6B1F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14233                           
 14234                           ;vscp_firmware.c: 225: }
 14235  004D36  D047               	goto	l1031
 14236  004D38                     l10799:
 14237                           
 14238                           ;vscp_firmware.c: 226: else {
 14239                           ;vscp_firmware.c: 229: vscp_node_state = 0x04;
 14240  004D38  0E04               	movlw	4
 14241  004D3A  0100               	movlb	0	; () banked
 14242  004D3C  6FBC               	movwf	_vscp_node_state& (0+255),b
 14243                           
 14244                           ;vscp_firmware.c: 232: vscp_omsg.flags = 0x80 + 1;
 14245  004D3E  0E81               	movlw	129
 14246  004D40  6FCB               	movwf	_vscp_omsg& (0+255),b
 14247                           
 14248                           ; BSR set to: 0
 14249                           ;vscp_firmware.c: 233: vscp_omsg.data[ 0 ] = 0xff;
 14250  004D42  69D1               	setf	(_vscp_omsg+6)& (0+255),b
 14251                           
 14252                           ;vscp_firmware.c: 234: vscp_omsg.priority = 0x07;
 14253  004D44  0E07               	movlw	7
 14254  004D46  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
 14255                           
 14256                           ; BSR set to: 0
 14257                           ;vscp_firmware.c: 235: vscp_omsg.vscp_class = 0;
 14258  004D48  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
 14259  004D4A  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
 14260                           
 14261                           ;vscp_firmware.c: 236: vscp_omsg.vscp_type = 3;
 14262  004D4C  0E03               	movlw	3
 14263  004D4E  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
 14264                           
 14265                           ; BSR set to: 0
 14266                           ;vscp_firmware.c: 239: vscp_sendEvent();
 14267  004D50  EC68  F02E         	call	_vscp_sendEvent	;wreg free
 14268  004D54  D038               	goto	l1031
 14269  004D56                     l1032:
 14270                           
 14271                           ;vscp_firmware.c: 246: if (vscp_imsg.flags & 0x80) {
 14272  004D56  0100               	movlb	0	; () banked
 14273  004D58  AFBD               	btfss	_vscp_imsg& (0+255),7,b
 14274  004D5A  D00F               	goto	l10823
 14275                           
 14276                           ; BSR set to: 0
 14277                           ;vscp_firmware.c: 249: if ((0 == vscp_imsg.vscp_class) &&
 14278                           ;vscp_firmware.c: 250: (3 == vscp_imsg.vscp_type)) {
 14279  004D5C  51C0               	movf	(_vscp_imsg+3)& (0+255),w,b
 14280  004D5E  11BF               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 14281  004D60  E132               	bnz	l1031
 14282                           
 14283                           ; BSR set to: 0
 14284  004D62  51C1               	movf	(_vscp_imsg+4)& (0+255),w,b
 14285  004D64  0A03               	xorlw	3
 14286  004D66  E12F               	bnz	l1031
 14287                           
 14288                           ; BSR set to: 0
 14289                           ;vscp_firmware.c: 253: if (0 == vscp_probe_address) {
 14290  004D68  664F               	tstfsz	_vscp_probe_address,c
 14291  004D6A  D003               	goto	l10817
 14292                           
 14293                           ; BSR set to: 0
 14294                           ;vscp_firmware.c: 257: vscp_node_state = 0x02;
 14295  004D6C  0E02               	movlw	2
 14296  004D6E  6FBC               	movwf	_vscp_node_state& (0+255),b
 14297  004D70  D7DF               	goto	l10797
 14298  004D72                     l10817:
 14299                           
 14300                           ; BSR set to: 0
 14301                           ;vscp_firmware.c: 261: else {
 14302                           ;vscp_firmware.c: 264: vscp_probe_address++;
 14303  004D72  2A4F               	incf	_vscp_probe_address,f,c
 14304                           
 14305                           ; BSR set to: 0
 14306                           ;vscp_firmware.c: 265: vscp_node_substate = 0x00;
 14307  004D74  6A4E               	clrf	_vscp_node_substate,c
 14308  004D76                     l10821:
 14309                           
 14310                           ;vscp_firmware.c: 266: vscp_probe_cnt = 0;
 14311  004D76  6A50               	clrf	_vscp_probe_cnt,c
 14312  004D78  D026               	goto	l1031
 14313  004D7A                     l10823:
 14314                           
 14315                           ; BSR set to: 0
 14316                           ;vscp_firmware.c: 271: else {
 14317                           ;vscp_firmware.c: 273: if (vscp_timer > 1000) {
 14318  004D7A  0EE9               	movlw	233
 14319  004D7C  0101               	movlb	1	; () banked
 14320  004D7E  5D1E               	subwf	_vscp_timer& (0+255),w,b	;volatile
 14321  004D80  0E03               	movlw	3
 14322  004D82  591F               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 14323  004D84  E320               	bnc	l1031
 14324                           
 14325                           ; BSR set to: 1
 14326                           ;vscp_firmware.c: 275: vscp_probe_cnt++;
 14327  004D86  2A50               	incf	_vscp_probe_cnt,f,c
 14328                           
 14329                           ; BSR set to: 1
 14330                           ;vscp_firmware.c: 277: if (vscp_probe_cnt >= 3) {
 14331  004D88  0E02               	movlw	2
 14332  004D8A  6450               	cpfsgt	_vscp_probe_cnt,c
 14333  004D8C  D014               	goto	l1039
 14334                           
 14335                           ; BSR set to: 1
 14336                           ;vscp_firmware.c: 280: if (0 == vscp_probe_address) {
 14337  004D8E  664F               	tstfsz	_vscp_probe_address,c
 14338  004D90  D005               	goto	l1040
 14339                           
 14340                           ; BSR set to: 1
 14341                           ;vscp_firmware.c: 283: vscp_probe_address++;
 14342  004D92  2A4F               	incf	_vscp_probe_address,f,c
 14343                           
 14344                           ; BSR set to: 1
 14345                           ;vscp_firmware.c: 284: vscp_node_substate = 0x00;
 14346  004D94  6A4E               	clrf	_vscp_node_substate,c
 14347                           
 14348                           ; BSR set to: 1
 14349                           ;vscp_firmware.c: 285: vscp_timer = 0;
 14350  004D96  6B1E               	clrf	_vscp_timer& (0+255),b	;volatile
 14351  004D98  6B1F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14352  004D9A  D7ED               	goto	l10821
 14353  004D9C                     l1040:
 14354                           
 14355                           ; BSR set to: 1
 14356                           ;vscp_firmware.c: 289: else {
 14357                           ;vscp_firmware.c: 292: vscp_nickname = vscp_probe_address;
 14358  004D9C  C04F  F0BB         	movff	_vscp_probe_address,_vscp_nickname
 14359                           
 14360                           ; BSR set to: 1
 14361                           ;vscp_firmware.c: 293: vscp_node_state = 0x03;
 14362  004DA0  0E03               	movlw	3
 14363  004DA2  0100               	movlb	0	; () banked
 14364  004DA4  6FBC               	movwf	_vscp_node_state& (0+255),b
 14365                           
 14366                           ; BSR set to: 0
 14367                           ;vscp_firmware.c: 294: vscp_node_substate = 0x00;
 14368  004DA6  6A4E               	clrf	_vscp_node_substate,c
 14369                           
 14370                           ; BSR set to: 0
 14371                           ;vscp_firmware.c: 295: vscp_writeNicknamePermanent(vscp_nickname);
 14372  004DA8  51BB               	movf	_vscp_nickname& (0+255),w,b
 14373  004DAA  ECE5  F02F         	call	_vscp_writeNicknamePermanent
 14374                           
 14375                           ;vscp_firmware.c: 298: vscp_probe_cnt = 0;
 14376  004DAE  6A50               	clrf	_vscp_probe_cnt,c
 14377                           
 14378                           ;vscp_firmware.c: 299: vscp_goActiveState();
 14379  004DB0  EC5F  F02F         	call	_vscp_goActiveState	;wreg free
 14380  004DB4  D008               	goto	l1031
 14381  004DB6                     l1039:
 14382                           
 14383                           ;vscp_firmware.c: 303: else {
 14384                           ;vscp_firmware.c: 304: vscp_node_substate = 0x00;
 14385  004DB6  6A4E               	clrf	_vscp_node_substate,c
 14386  004DB8  D006               	goto	l1031
 14387  004DBA                     l10851:
 14388  004DBA  504E               	movf	_vscp_node_substate,w,c
 14389                           
 14390                           ; Switch size 1, requested type "space"
 14391                           ; Number of cases is 3, Range of values is 0 to 2
 14392                           ; switch strategies available:
 14393                           ; Name         Instructions Cycles
 14394                           ; simple_byte           10     6 (average)
 14395                           ;	Chosen strategy is simple_byte
 14396  004DBC  E0A9               	bz	l10783
 14397  004DBE  0A01               	xorlw	1	; case 1
 14398  004DC0  E0CA               	bz	l1032
 14399  004DC2  0A03               	xorlw	3	; case 2
 14400  004DC4  E1F8               	bnz	l1039
 14401  004DC6                     l1031:
 14402                           
 14403                           ;vscp_firmware.c: 319: vscp_imsg.flags = 0;
 14404  004DC6  0100               	movlb	0	; () banked
 14405  004DC8  6BBD               	clrf	_vscp_imsg& (0+255),b
 14406                           
 14407                           ; BSR set to: 0
 14408  004DCA  0012               	return	
 14409  004DCC                     __end_of_vscp_handleProbeState:
 14410                           	opt stack 0
 14411                           tblptru	equ	0xFF8
 14412                           tblptrh	equ	0xFF7
 14413                           tblptrl	equ	0xFF6
 14414                           tablat	equ	0xFF5
 14415                           prodh	equ	0xFF4
 14416                           prodl	equ	0xFF3
 14417                           intcon	equ	0xFF2
 14418                           postinc0	equ	0xFEE
 14419                           wreg	equ	0xFE8
 14420                           indf1	equ	0xFE7
 14421                           postdec1	equ	0xFE5
 14422                           fsr1h	equ	0xFE2
 14423                           fsr1l	equ	0xFE1
 14424                           indf2	equ	0xFDF
 14425                           postinc2	equ	0xFDE
 14426                           postdec2	equ	0xFDD
 14427                           plusw2	equ	0xFDB
 14428                           fsr2h	equ	0xFDA
 14429                           fsr2l	equ	0xFD9
 14430                           status	equ	0xFD8
 14431                           
 14432 ;; *************** function _vscp_goActiveState *****************
 14433 ;; Defined at:
 14434 ;;		line 362 in file "../../vscp_firmware/common/vscp_firmware.c"
 14435 ;; Parameters:    Size  Location     Type
 14436 ;;		None
 14437 ;; Auto vars:     Size  Location     Type
 14438 ;;		None
 14439 ;; Return value:  Size  Location     Type
 14440 ;;		None               void
 14441 ;; Registers used:
 14442 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14443 ;; Tracked objects:
 14444 ;;		On entry : 0/0
 14445 ;;		On exit  : 0/0
 14446 ;;		Unchanged: 0/0
 14447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14452 ;;Total ram usage:        0 bytes
 14453 ;; Hardware stack levels used:    1
 14454 ;; Hardware stack levels required when called:    7
 14455 ;; This function calls:
 14456 ;;		_vscp_sendEvent
 14457 ;; This function is called by:
 14458 ;;		_main
 14459 ;;		_vscp_handleProbeState
 14460 ;; This function uses a non-reentrant model
 14461 ;;
 14462                           
 14463                           	psect	text68
 14464  005EBE                     __ptext68:
 14465                           	opt stack 0
 14466  005EBE                     _vscp_goActiveState:
 14467                           	opt stack 22
 14468                           
 14469                           ;vscp_firmware.c: 363: vscp_omsg.flags = 0x80 + 1;
 14470                           
 14471                           ; BSR set to: 0
 14472                           ;incstack = 0
 14473                           ;incstack = 0
 14474  005EBE  0E81               	movlw	129
 14475  005EC0  0100               	movlb	0	; () banked
 14476  005EC2  6FCB               	movwf	_vscp_omsg& (0+255),b
 14477                           
 14478                           ; BSR set to: 0
 14479                           ;vscp_firmware.c: 364: vscp_omsg.priority = 0x00;
 14480  005EC4  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
 14481                           
 14482                           ; BSR set to: 0
 14483                           ;vscp_firmware.c: 365: vscp_omsg.vscp_class = 0;
 14484  005EC6  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
 14485  005EC8  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
 14486                           
 14487                           ;vscp_firmware.c: 366: vscp_omsg.vscp_type = 2;
 14488  005ECA  0E02               	movlw	2
 14489  005ECC  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
 14490                           
 14491                           ; BSR set to: 0
 14492                           ;vscp_firmware.c: 367: vscp_omsg.data[ 0 ] = vscp_nickname;
 14493  005ECE  C0BB  F0D1         	movff	_vscp_nickname,_vscp_omsg+6
 14494                           
 14495                           ; BSR set to: 0
 14496                           ;vscp_firmware.c: 370: vscp_sendEvent();
 14497  005ED2  EC68  F02E         	call	_vscp_sendEvent	;wreg free
 14498                           
 14499                           ;vscp_firmware.c: 372: vscp_initledfunc = 0x01;
 14500  005ED6  0E01               	movlw	1
 14501  005ED8  6E4D               	movwf	_vscp_initledfunc,c
 14502  005EDA  0C01               	retlw	1
 14503  005EDC                     __end_of_vscp_goActiveState:
 14504                           	opt stack 0
 14505                           tblptru	equ	0xFF8
 14506                           tblptrh	equ	0xFF7
 14507                           tblptrl	equ	0xFF6
 14508                           tablat	equ	0xFF5
 14509                           prodh	equ	0xFF4
 14510                           prodl	equ	0xFF3
 14511                           intcon	equ	0xFF2
 14512                           postinc0	equ	0xFEE
 14513                           wreg	equ	0xFE8
 14514                           indf1	equ	0xFE7
 14515                           postdec1	equ	0xFE5
 14516                           fsr1h	equ	0xFE2
 14517                           fsr1l	equ	0xFE1
 14518                           indf2	equ	0xFDF
 14519                           postinc2	equ	0xFDE
 14520                           postdec2	equ	0xFDD
 14521                           plusw2	equ	0xFDB
 14522                           fsr2h	equ	0xFDA
 14523                           fsr2l	equ	0xFD9
 14524                           status	equ	0xFD8
 14525                           
 14526 ;; *************** function _vscp_sendEvent *****************
 14527 ;; Defined at:
 14528 ;;		line 1280 in file "../../vscp_firmware/common/vscp_firmware.c"
 14529 ;; Parameters:    Size  Location     Type
 14530 ;;		None
 14531 ;; Auto vars:     Size  Location     Type
 14532 ;;  rv              1   66[COMRAM] unsigned char 
 14533 ;; Return value:  Size  Location     Type
 14534 ;;                  1    wreg      unsigned char 
 14535 ;; Registers used:
 14536 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14537 ;; Tracked objects:
 14538 ;;		On entry : F/0
 14539 ;;		On exit  : 0/0
 14540 ;;		Unchanged: 0/0
 14541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14543 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14545 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14546 ;;Total ram usage:        1 bytes
 14547 ;; Hardware stack levels used:    1
 14548 ;; Hardware stack levels required when called:    6
 14549 ;; This function calls:
 14550 ;;		_sendVSCPFrame
 14551 ;; This function is called by:
 14552 ;;		_doOneSecondWork
 14553 ;;		_sendTempEvent
 14554 ;;		_vscp_handleProbeState
 14555 ;;		_vscp_goActiveState
 14556 ;;		_vscp_sendHeartBeat
 14557 ;;		_vscp_newNodeOnline
 14558 ;;		_vscp_handleProtocolEvent
 14559 ;; This function uses a non-reentrant model
 14560 ;;
 14561                           
 14562                           	psect	text69
 14563  005CD0                     __ptext69:
 14564                           	opt stack 0
 14565  005CD0                     _vscp_sendEvent:
 14566                           	opt stack 22
 14567                           
 14568                           ; BSR set to: 0
 14569                           ;vscp_firmware.c: 1281: int8_t rv;
 14570                           ;vscp_firmware.c: 1283: if ( !(rv = sendVSCPFrame( vscp_omsg.vscp_class,
 14571                           ;vscp_firmware.c: 1284: vscp_omsg.vscp_type,
 14572                           ;vscp_firmware.c: 1285: vscp_nickname,
 14573                           ;vscp_firmware.c: 1286: vscp_omsg.priority,
 14574                           ;vscp_firmware.c: 1287: (vscp_omsg.flags & 0x0f),
 14575                           ;vscp_firmware.c: 1288: vscp_omsg.data ) ) ) {
 14576                           
 14577                           ;incstack = 0
 14578                           ;incstack = 0
 14579  005CD0  C0CD  F060         	movff	_vscp_omsg+2,?_sendVSCPFrame
 14580  005CD4  C0CE  F061         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 14581  005CD8  C0CF  F062         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 14582  005CDC  C0BB  F063         	movff	_vscp_nickname,?_sendVSCPFrame+3
 14583  005CE0  C0CC  F064         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 14584  005CE4  51CB               	movf	_vscp_omsg& (0+255),w,b
 14585  005CE6  0B0F               	andlw	15
 14586  005CE8  6F65               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 14587  005CEA  0ED1               	movlw	low (_vscp_omsg+6)
 14588  005CEC  6F66               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 14589  005CEE  ECFE  F027         	call	_sendVSCPFrame	;wreg free
 14590  005CF2  6E43               	movwf	vscp_sendEvent@rv,c
 14591  005CF4  6643               	tstfsz	vscp_sendEvent@rv& (0+255),c
 14592  005CF6  D001               	goto	l11667
 14593                           
 14594                           ;vscp_firmware.c: 1289: vscp_errorcnt++;
 14595  005CF8  2A4B               	incf	_vscp_errorcnt,f,c
 14596  005CFA                     l11667:
 14597                           
 14598                           ;vscp_firmware.c: 1290: }
 14599                           ;vscp_firmware.c: 1292: return rv;
 14600  005CFA  5043               	movf	vscp_sendEvent@rv,w,c
 14601  005CFC  0012               	return	
 14602  005CFE                     __end_of_vscp_sendEvent:
 14603                           	opt stack 0
 14604                           tblptru	equ	0xFF8
 14605                           tblptrh	equ	0xFF7
 14606                           tblptrl	equ	0xFF6
 14607                           tablat	equ	0xFF5
 14608                           prodh	equ	0xFF4
 14609                           prodl	equ	0xFF3
 14610                           intcon	equ	0xFF2
 14611                           postinc0	equ	0xFEE
 14612                           wreg	equ	0xFE8
 14613                           indf1	equ	0xFE7
 14614                           postdec1	equ	0xFE5
 14615                           fsr1h	equ	0xFE2
 14616                           fsr1l	equ	0xFE1
 14617                           indf2	equ	0xFDF
 14618                           postinc2	equ	0xFDE
 14619                           postdec2	equ	0xFDD
 14620                           plusw2	equ	0xFDB
 14621                           fsr2h	equ	0xFDA
 14622                           fsr2l	equ	0xFD9
 14623                           status	equ	0xFD8
 14624                           
 14625 ;; *************** function _sendVSCPFrame *****************
 14626 ;; Defined at:
 14627 ;;		line 2916 in file "../main.c"
 14628 ;; Parameters:    Size  Location     Type
 14629 ;;  vscpclass       2    0[BANK0 ] unsigned short 
 14630 ;;  vscptype        1    2[BANK0 ] unsigned char 
 14631 ;;  nodeid          1    3[BANK0 ] unsigned char 
 14632 ;;  priority        1    4[BANK0 ] unsigned char 
 14633 ;;  size            1    5[BANK0 ] unsigned char 
 14634 ;;  pData           1    6[BANK0 ] PTR unsigned char 
 14635 ;;		 -> vscp_omsg(14), 
 14636 ;; Auto vars:     Size  Location     Type
 14637 ;;  id              4   27[BANK0 ] unsigned long 
 14638 ;; Return value:  Size  Location     Type
 14639 ;;                  1    wreg      unsigned char 
 14640 ;; Registers used:
 14641 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14642 ;; Tracked objects:
 14643 ;;		On entry : F/0
 14644 ;;		On exit  : F/0
 14645 ;;		Unchanged: 0/0
 14646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14647 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14648 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14649 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14650 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14651 ;;Total ram usage:       31 bytes
 14652 ;; Hardware stack levels used:    1
 14653 ;; Hardware stack levels required when called:    5
 14654 ;; This function calls:
 14655 ;;		_sendCANFrame
 14656 ;; This function is called by:
 14657 ;;		_vscp_sendEvent
 14658 ;; This function uses a non-reentrant model
 14659 ;;
 14660                           
 14661                           	psect	text70
 14662  004FFC                     __ptext70:
 14663                           	opt stack 0
 14664  004FFC                     _sendVSCPFrame:
 14665                           	opt stack 22
 14666                           
 14667                           ; BSR set to: 0
 14668                           ;main.c: 2917: uint32_t id = ((uint32_t) priority << 26) |
 14669                           ;main.c: 2918: ((uint32_t) vscpclass << 16) |
 14670                           ;main.c: 2919: ((uint32_t) vscptype << 8) |
 14671                           ;main.c: 2920: nodeid;
 14672                           
 14673                           ;incstack = 0
 14674                           ;incstack = 0
 14675  004FFC  C062  F067         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 14676  005000  6B68               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 14677  005002  6B69               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 14678  005004  6B6A               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 14679  005006  C069  F06A         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 14680  00500A  C068  F069         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 14681  00500E  C067  F068         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 14682  005012  6B67               	clrf	??_sendVSCPFrame& (0+255),b
 14683  005014  5160               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 14684  005016  6F6B               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 14685  005018  5161               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 14686  00501A  6F6C               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 14687  00501C  6B6D               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 14688  00501E  6B6E               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 14689  005020  C06C  F06E         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 14690  005024  C06B  F06D         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 14691  005028  6B6C               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 14692  00502A  6B6B               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 14693  00502C  C064  F06F         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 14694  005030  6B70               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 14695  005032  6B71               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 14696  005034  6B72               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 14697  005036  0E1A               	movlw	26
 14698  005038                     u9025:
 14699  005038  90D8               	bcf	status,0,c
 14700  00503A  376F               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 14701  00503C  3770               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 14702  00503E  3771               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 14703  005040  3772               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 14704  005042  2EE8               	decfsz	wreg,f,c
 14705  005044  D7F9               	goto	u9025
 14706  005046  516B               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 14707  005048  116F               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 14708  00504A  6F73               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 14709  00504C  516C               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 14710  00504E  1170               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 14711  005050  6F74               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 14712  005052  516D               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 14713  005054  1171               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 14714  005056  6F75               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 14715  005058  516E               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 14716  00505A  1172               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 14717  00505C  6F76               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 14718  00505E  5167               	movf	??_sendVSCPFrame& (0+255),w,b
 14719  005060  1173               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 14720  005062  6F77               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 14721  005064  5168               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 14722  005066  1174               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 14723  005068  6F78               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 14724  00506A  5169               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 14725  00506C  1175               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 14726  00506E  6F79               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 14727  005070  516A               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 14728  005072  1176               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 14729  005074  6F7A               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 14730  005076  5163               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 14731  005078  1177               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 14732  00507A  6F7B               	movwf	sendVSCPFrame@id& (0+255),b
 14733  00507C  5178               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 14734  00507E  6F7C               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 14735  005080  5179               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 14736  005082  6F7D               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 14737  005084  517A               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 14738  005086  6F7E               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 14739                           
 14740                           ; BSR set to: 0
 14741                           ;main.c: 2922: if (!sendCANFrame(id, size, pData)) {
 14742  005088  C07B  F03C         	movff	sendVSCPFrame@id,?_sendCANFrame
 14743  00508C  C07C  F03D         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 14744  005090  C07D  F03E         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 14745  005094  C07E  F03F         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 14746  005098  C065  F040         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 14747  00509C  C066  F041         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 14748  0050A0  EC0B  F02D         	call	_sendCANFrame	;wreg free
 14749  0050A4  0900               	iorlw	0
 14750  0050A6  E102               	bnz	l12603
 14751                           
 14752                           ; BSR set to: 0
 14753                           ;main.c: 2924: vscp_errorcnt++;
 14754  0050A8  2A4B               	incf	_vscp_errorcnt,f,c
 14755                           
 14756                           ; BSR set to: 0
 14757                           ;main.c: 2925: return 0;
 14758  0050AA  0C00               	retlw	0
 14759  0050AC                     l12603:
 14760                           
 14761                           ; BSR set to: 0
 14762                           
 14763                           ; BSR set to: 0
 14764                           ;main.c: 2926: }
 14765                           ;main.c: 2928: return 1;
 14766  0050AC  0C01               	retlw	1
 14767  0050AE                     __end_of_sendVSCPFrame:
 14768                           	opt stack 0
 14769                           tblptru	equ	0xFF8
 14770                           tblptrh	equ	0xFF7
 14771                           tblptrl	equ	0xFF6
 14772                           tablat	equ	0xFF5
 14773                           prodh	equ	0xFF4
 14774                           prodl	equ	0xFF3
 14775                           intcon	equ	0xFF2
 14776                           postinc0	equ	0xFEE
 14777                           wreg	equ	0xFE8
 14778                           indf1	equ	0xFE7
 14779                           postdec1	equ	0xFE5
 14780                           fsr1h	equ	0xFE2
 14781                           fsr1l	equ	0xFE1
 14782                           indf2	equ	0xFDF
 14783                           postinc2	equ	0xFDE
 14784                           postdec2	equ	0xFDD
 14785                           plusw2	equ	0xFDB
 14786                           fsr2h	equ	0xFDA
 14787                           fsr2l	equ	0xFD9
 14788                           status	equ	0xFD8
 14789                           
 14790 ;; *************** function _sendCANFrame *****************
 14791 ;; Defined at:
 14792 ;;		line 2963 in file "../main.c"
 14793 ;; Parameters:    Size  Location     Type
 14794 ;;  id              4   59[COMRAM] unsigned long 
 14795 ;;  dlc             1   63[COMRAM] unsigned char 
 14796 ;;  pdata           1   64[COMRAM] PTR unsigned char 
 14797 ;;		 -> vscp_omsg(14), 
 14798 ;; Auto vars:     Size  Location     Type
 14799 ;;  rv              1   65[COMRAM] unsigned char 
 14800 ;; Return value:  Size  Location     Type
 14801 ;;                  1    wreg      unsigned char 
 14802 ;; Registers used:
 14803 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14804 ;; Tracked objects:
 14805 ;;		On entry : F/0
 14806 ;;		On exit  : F/0
 14807 ;;		Unchanged: 0/0
 14808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14809 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14810 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14812 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14813 ;;Total ram usage:        7 bytes
 14814 ;; Hardware stack levels used:    1
 14815 ;; Hardware stack levels required when called:    4
 14816 ;; This function calls:
 14817 ;;		_ECANSendMessage
 14818 ;; This function is called by:
 14819 ;;		_sendVSCPFrame
 14820 ;; This function uses a non-reentrant model
 14821 ;;
 14822                           
 14823                           	psect	text71
 14824  005A16                     __ptext71:
 14825                           	opt stack 0
 14826  005A16                     _sendCANFrame:
 14827                           	opt stack 22
 14828                           
 14829                           ; BSR set to: 0
 14830                           ;main.c: 2964: uint8_t rv = 0;
 14831                           
 14832                           ; BSR set to: 0
 14833                           ;incstack = 0
 14834                           ;incstack = 0
 14835  005A16  6A42               	clrf	sendCANFrame@rv,c
 14836                           
 14837                           ;main.c: 2966: sendTimer = 0;
 14838  005A18  0101               	movlb	1	; () banked
 14839  005A1A  6B1A               	clrf	_sendTimer& (0+255),b	;volatile
 14840  005A1C  6B1B               	clrf	(_sendTimer+1)& (0+255),b	;volatile
 14841                           
 14842                           ;main.c: 2967: while ( sendTimer < 1000 ) {
 14843  005A1E  D015               	goto	l12613
 14844  005A20                     l12609:
 14845                           
 14846                           ; BSR set to: 1
 14847                           ;main.c: 2968: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 14848  005A20  C03C  F018         	movff	sendCANFrame@id,?_ECANSendMessage
 14849  005A24  C03D  F019         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 14850  005A28  C03E  F01A         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 14851  005A2C  C03F  F01B         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 14852  005A30  C041  F01C         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 14853  005A34  C040  F01D         	movff	sendCANFrame@dlc,?_ECANSendMessage+5
 14854  005A38  0E20               	movlw	32
 14855  005A3A  6E1E               	movwf	?_ECANSendMessage+6,c
 14856  005A3C  EC7C  F021         	call	_ECANSendMessage	;wreg free
 14857  005A40  0900               	iorlw	0
 14858  005A42  E003               	bz	l12613
 14859                           
 14860                           ;main.c: 2969: rv = 1;
 14861  005A44  0E01               	movlw	1
 14862  005A46  6E42               	movwf	sendCANFrame@rv,c
 14863                           
 14864                           ;main.c: 2970: break;
 14865  005A48  D006               	goto	l641
 14866  005A4A                     l12613:
 14867  005A4A  0EE8               	movlw	232
 14868  005A4C  0101               	movlb	1	; () banked
 14869  005A4E  5D1A               	subwf	_sendTimer& (0+255),w,b	;volatile
 14870  005A50  0E03               	movlw	3
 14871  005A52  591B               	subwfb	(_sendTimer+1)& (0+255),w,b	;volatile
 14872  005A54  E3E5               	bnc	l12609
 14873  005A56                     l641:
 14874                           
 14875                           ;main.c: 2971: }
 14876                           ;main.c: 2972: }
 14877                           ;main.c: 2974: vscp_omsg.flags = 0;
 14878  005A56  0100               	movlb	0	; () banked
 14879  005A58  6BCB               	clrf	_vscp_omsg& (0+255),b
 14880                           
 14881                           ; BSR set to: 0
 14882                           ;main.c: 2976: return rv;
 14883  005A5A  5042               	movf	sendCANFrame@rv,w,c
 14884                           
 14885                           ; BSR set to: 0
 14886  005A5C  0012               	return	
 14887  005A5E                     __end_of_sendCANFrame:
 14888                           	opt stack 0
 14889                           tblptru	equ	0xFF8
 14890                           tblptrh	equ	0xFF7
 14891                           tblptrl	equ	0xFF6
 14892                           tablat	equ	0xFF5
 14893                           prodh	equ	0xFF4
 14894                           prodl	equ	0xFF3
 14895                           intcon	equ	0xFF2
 14896                           postinc0	equ	0xFEE
 14897                           wreg	equ	0xFE8
 14898                           indf1	equ	0xFE7
 14899                           postdec1	equ	0xFE5
 14900                           fsr1h	equ	0xFE2
 14901                           fsr1l	equ	0xFE1
 14902                           indf2	equ	0xFDF
 14903                           postinc2	equ	0xFDE
 14904                           postdec2	equ	0xFDD
 14905                           plusw2	equ	0xFDB
 14906                           fsr2h	equ	0xFDA
 14907                           fsr2l	equ	0xFD9
 14908                           status	equ	0xFD8
 14909                           
 14910 ;; *************** function _ECANSendMessage *****************
 14911 ;; Defined at:
 14912 ;;		line 617 in file "../ECAN.c"
 14913 ;; Parameters:    Size  Location     Type
 14914 ;;  id              4   23[COMRAM] unsigned long 
 14915 ;;  data            1   27[COMRAM] PTR unsigned char 
 14916 ;;		 -> vscp_omsg(14), 
 14917 ;;  dataLen         1   28[COMRAM] unsigned char 
 14918 ;;  msgFlags        1   29[COMRAM] enum E18958
 14919 ;; Auto vars:     Size  Location     Type
 14920 ;;  pb             18   31[COMRAM] PTR unsigned char [9]
 14921 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 14922 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 14923 ;;		 -> B0CON(1), 
 14924 ;;  ptr             2   57[COMRAM] PTR unsigned char 
 14925 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 14926 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 14927 ;;		 -> B0CON(1), 
 14928 ;;  tempPtr         2   53[COMRAM] PTR unsigned char 
 14929 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 14930 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 14931 ;;		 -> B0CON(1), 
 14932 ;;  i               1   56[COMRAM] unsigned char 
 14933 ;;  temp            1   55[COMRAM] unsigned char 
 14934 ;;  tempBSEL0       1   52[COMRAM] struct .
 14935 ;;  j               1   51[COMRAM] unsigned char 
 14936 ;;  buffers         1   50[COMRAM] unsigned char 
 14937 ;;  mode            1   49[COMRAM] unsigned char 
 14938 ;; Return value:  Size  Location     Type
 14939 ;;                  1    wreg      enum E18242
 14940 ;; Registers used:
 14941 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14942 ;; Tracked objects:
 14943 ;;		On entry : E/1
 14944 ;;		On exit  : 0/0
 14945 ;;		Unchanged: 0/0
 14946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14947 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14948 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14949 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14950 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14951 ;;Total ram usage:       36 bytes
 14952 ;; Hardware stack levels used:    1
 14953 ;; Hardware stack levels required when called:    3
 14954 ;; This function calls:
 14955 ;;		__CANIDToRegs
 14956 ;; This function is called by:
 14957 ;;		_sendCANFrame
 14958 ;; This function uses a non-reentrant model
 14959 ;;
 14960                           
 14961                           	psect	text72
 14962  0042F8                     __ptext72:
 14963                           	opt stack 0
 14964  0042F8                     _ECANSendMessage:
 14965                           	opt stack 22
 14966                           
 14967                           ;ECAN.c: 619: BYTE mode;
 14968                           ;ECAN.c: 620: BYTE buffers;
 14969                           ;ECAN.c: 628: BYTE i,j;
 14970                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 14971                           ;ECAN.c: 630: BYTE* pb[9];
 14972                           ;ECAN.c: 631: BYTE temp;
 14973                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 14974                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 14975                           
 14976                           ; BSR set to: 0
 14977                           ;incstack = 0
 14978                           ;incstack = 0
 14979  0042F8  0E0F               	movlw	15	;volatile
 14980  0042FA  6E21               	movwf	ECANSendMessage@pb+1,c
 14981  0042FC  0E20               	movlw	32	;volatile
 14982  0042FE  6E20               	movwf	ECANSendMessage@pb,c
 14983                           
 14984                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 14985  004300  0E0F               	movlw	15	;volatile
 14986  004302  6E23               	movwf	ECANSendMessage@pb+3,c
 14987  004304  0E10               	movlw	16	;volatile
 14988  004306  6E22               	movwf	ECANSendMessage@pb+2,c
 14989                           
 14990                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 14991  004308  0E0F               	movlw	15	;volatile
 14992  00430A  6E25               	movwf	ECANSendMessage@pb+5,c
 14993  00430C  6A24               	clrf	ECANSendMessage@pb+4,c
 14994                           
 14995                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 14996  00430E  010E               	movlb	14	; () banked
 14997  004310  0E0E               	movlw	14	;volatile
 14998  004312  6E27               	movwf	ECANSendMessage@pb+7,c
 14999  004314  0E80               	movlw	128	;volatile
 15000  004316  6E26               	movwf	ECANSendMessage@pb+6,c
 15001                           
 15002                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 15003  004318  0E0E               	movlw	14	;volatile
 15004  00431A  6E29               	movwf	ECANSendMessage@pb+9,c
 15005  00431C  0E90               	movlw	144	;volatile
 15006  00431E  6E28               	movwf	ECANSendMessage@pb+8,c
 15007                           
 15008                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 15009  004320  0E0E               	movlw	14	;volatile
 15010  004322  6E2B               	movwf	ECANSendMessage@pb+11,c
 15011  004324  0EA0               	movlw	160	;volatile
 15012  004326  6E2A               	movwf	ECANSendMessage@pb+10,c
 15013                           
 15014                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 15015  004328  0E0E               	movlw	14	;volatile
 15016  00432A  6E2D               	movwf	ECANSendMessage@pb+13,c
 15017  00432C  0EB0               	movlw	176	;volatile
 15018  00432E  6E2C               	movwf	ECANSendMessage@pb+12,c
 15019                           
 15020                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 15021  004330  0E0E               	movlw	14	;volatile
 15022  004332  6E2F               	movwf	ECANSendMessage@pb+15,c
 15023  004334  0EC0               	movlw	192	;volatile
 15024  004336  6E2E               	movwf	ECANSendMessage@pb+14,c
 15025                           
 15026                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 15027  004338  0E0E               	movlw	14	;volatile
 15028  00433A  6E31               	movwf	ECANSendMessage@pb+17,c
 15029  00433C  0ED0               	movlw	208	;volatile
 15030  00433E  6E30               	movwf	ECANSendMessage@pb+16,c
 15031                           
 15032                           ; BSR set to: 14
 15033                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 15034  004340  5072               	movf	3954,w,c	;volatile
 15035  004342  0BC0               	andlw	192
 15036  004344  6E32               	movwf	ECANSendMessage@mode,c
 15037                           
 15038                           ; BSR set to: 14
 15039                           ;ECAN.c: 660: if ( mode == 0x00 )
 15040  004346  6632               	tstfsz	ECANSendMessage@mode,c
 15041  004348  D002               	goto	l12627
 15042                           
 15043                           ; BSR set to: 14
 15044                           ;ECAN.c: 661: buffers = 2;
 15045  00434A  0E02               	movlw	2
 15046  00434C  D001               	goto	L30
 15047  00434E                     l12627:
 15048                           
 15049                           ; BSR set to: 14
 15050                           ;ECAN.c: 662: else
 15051                           ;ECAN.c: 663: buffers = 8;
 15052  00434E  0E08               	movlw	8
 15053  004350                     L30:
 15054  004350  6E33               	movwf	ECANSendMessage@buffers,c
 15055                           
 15056                           ; BSR set to: 14
 15057                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 15058  004352  90D8               	bcf	status,0,c
 15059  004354  317D               	rrcf	125,w,b	;volatile
 15060  004356  6E35               	movwf	ECANSendMessage@tempBSEL0,c
 15061                           
 15062                           ; BSR set to: 14
 15063                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 15064  004358  6A39               	clrf	ECANSendMessage@i,c
 15065  00435A  D07A               	goto	l12687
 15066  00435C                     l12633:
 15067                           
 15068                           ;ECAN.c: 688: {
 15069                           ;ECAN.c: 693: ptr = pb[i];
 15070  00435C  5039               	movf	ECANSendMessage@i,w,c
 15071  00435E  0D02               	mullw	2
 15072  004360  50F3               	movf	prodl,w,c
 15073  004362  0F20               	addlw	low ECANSendMessage@pb
 15074  004364  6ED9               	movwf	fsr2l,c
 15075  004366  6ADA               	clrf	fsr2h,c
 15076  004368  CFDE F03A          	movff	postinc2,ECANSendMessage@ptr
 15077  00436C  CFDD F03B          	movff	postdec2,ECANSendMessage@ptr+1
 15078                           
 15079                           ;ECAN.c: 694: tempPtr = ptr;
 15080  004370  C03A  F036         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 15081  004374  C03B  F037         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 15082                           
 15083                           ;ECAN.c: 702: if ( i > 2 )
 15084  004378  0E02               	movlw	2
 15085  00437A  6439               	cpfsgt	ECANSendMessage@i,c
 15086  00437C  D004               	goto	l12645
 15087                           
 15088                           ;ECAN.c: 703: {
 15089                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 15090  00437E  90D8               	bcf	status,0,c
 15091  004380  3235               	rrcf	ECANSendMessage@tempBSEL0,f,c
 15092                           
 15093                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 15094  004382  A035               	btfss	ECANSendMessage@tempBSEL0,0,c
 15095  004384  D064               	goto	l12685
 15096  004386                     l12645:
 15097                           
 15098                           ;ECAN.c: 714: }
 15099                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 15100  004386  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15101  00438A  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15102  00438E  50DF               	movf	indf2,w,c
 15103  004390  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15104  004392  B61F               	btfsc	??_ECANSendMessage,3,c
 15105  004394  D05C               	goto	l12685
 15106                           
 15107                           ;ECAN.c: 721: {
 15108                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 15109  004396  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15110  00439A  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15111  00439E  0EFC               	movlw	252
 15112  0043A0  16DF               	andwf	indf2,f,c
 15113                           
 15114                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 15115  0043A2  C01E  F01F         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 15116  0043A6  0E03               	movlw	3
 15117  0043A8  161F               	andwf	??_ECANSendMessage,f,c
 15118  0043AA  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15119  0043AE  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15120  0043B2  501F               	movf	??_ECANSendMessage,w,c
 15121  0043B4  12DF               	iorwf	indf2,f,c
 15122                           
 15123                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 15124  0043B6  AC1E               	btfss	ECANSendMessage@msgFlags,6,c
 15125  0043B8  D004               	goto	l829
 15126                           
 15127                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 15128  0043BA  501D               	movf	ECANSendMessage@dataLen,w,c
 15129  0043BC  0940               	iorlw	64
 15130  0043BE  6E38               	movwf	ECANSendMessage@temp,c
 15131  0043C0  D002               	goto	l12655
 15132  0043C2                     l829:
 15133                           
 15134                           ;ECAN.c: 729: else
 15135                           ;ECAN.c: 730: temp = dataLen;
 15136  0043C2  C01D  F038         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 15137  0043C6                     l12655:
 15138                           
 15139                           ;ECAN.c: 732: *(ptr+5) = temp;
 15140  0043C6  EE20 F005          	lfsr	2,5
 15141  0043CA  503A               	movf	ECANSendMessage@ptr,w,c
 15142  0043CC  26D9               	addwf	fsr2l,f,c
 15143  0043CE  503B               	movf	ECANSendMessage@ptr+1,w,c
 15144  0043D0  22DA               	addwfc	fsr2h,f,c
 15145  0043D2  C038  FFDF         	movff	ECANSendMessage@temp,indf2
 15146                           
 15147                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 15148  0043D6  AA1E               	btfss	ECANSendMessage@msgFlags,5,c
 15149  0043D8  D003               	goto	l831
 15150                           
 15151                           ;ECAN.c: 736: temp = 1;
 15152  0043DA  0E01               	movlw	1
 15153  0043DC  6E38               	movwf	ECANSendMessage@temp,c
 15154  0043DE  D001               	goto	l12661
 15155  0043E0                     l831:
 15156                           
 15157                           ;ECAN.c: 738: else
 15158                           ;ECAN.c: 739: temp = 0;
 15159  0043E0  6A38               	clrf	ECANSendMessage@temp,c
 15160  0043E2                     l12661:
 15161                           
 15162                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 15163  0043E2  283A               	incf	ECANSendMessage@ptr,w,c
 15164  0043E4  6E0E               	movwf	?__CANIDToRegs,c
 15165  0043E6  0E00               	movlw	0
 15166  0043E8  203B               	addwfc	ECANSendMessage@ptr+1,w,c
 15167  0043EA  6E0F               	movwf	?__CANIDToRegs+1,c
 15168  0043EC  C018  F010         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 15169  0043F0  C019  F011         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 15170  0043F4  C01A  F012         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 15171  0043F8  C01B  F013         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 15172  0043FC  C038  F014         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 15173  004400  EC18  F025         	call	__CANIDToRegs	;wreg free
 15174                           
 15175                           ;ECAN.c: 745: ptr += 6;
 15176  004404  0E06               	movlw	6
 15177  004406  263A               	addwf	ECANSendMessage@ptr,f,c
 15178  004408  0E00               	movlw	0
 15179  00440A  223B               	addwfc	ECANSendMessage@ptr+1,f,c
 15180                           
 15181                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 15182  00440C  6A34               	clrf	ECANSendMessage@j,c
 15183  00440E  D00D               	goto	l12675
 15184  004410                     l12667:
 15185                           
 15186                           ;ECAN.c: 748: *ptr++ = *data++;
 15187  004410  501C               	movf	ECANSendMessage@data,w,c
 15188  004412  6ED9               	movwf	fsr2l,c
 15189  004414  6ADA               	clrf	fsr2h,c
 15190  004416  C03A  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 15191  00441A  C03B  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 15192  00441E  CFDF FFE7          	movff	indf2,indf1
 15193  004422  2A1C               	incf	ECANSendMessage@data,f,c
 15194  004424  4A3A               	infsnz	ECANSendMessage@ptr,f,c
 15195  004426  2A3B               	incf	ECANSendMessage@ptr+1,f,c
 15196  004428  2A34               	incf	ECANSendMessage@j,f,c
 15197  00442A                     l12675:
 15198  00442A  501D               	movf	ECANSendMessage@dataLen,w,c
 15199  00442C  5C34               	subwf	ECANSendMessage@j,w,c
 15200  00442E  E3F0               	bnc	l12667
 15201                           
 15202                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 15203  004430  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15204  004434  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15205  004438  50DF               	movf	indf2,w,c
 15206  00443A  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15207  00443C  B41F               	btfsc	??_ECANSendMessage,2,c
 15208  00443E  0C01               	retlw	1
 15209                           
 15210                           ;ECAN.c: 753: *tempPtr |= 0x08;
 15211  004440  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15212  004444  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15213  004448  0E00               	movlw	0
 15214  00444A  86DB               	bsf	plusw2,3,c
 15215                           
 15216                           ;ECAN.c: 755: return TRUE;
 15217  00444C  0C01               	retlw	1
 15218  00444E                     l12685:
 15219  00444E  2A39               	incf	ECANSendMessage@i,f,c
 15220  004450                     l12687:
 15221  004450  5033               	movf	ECANSendMessage@buffers,w,c
 15222  004452  5C39               	subwf	ECANSendMessage@i,w,c
 15223  004454  E383               	bnc	l12633
 15224                           
 15225                           ;ECAN.c: 756: }
 15226                           ;ECAN.c: 757: }
 15227                           ;ECAN.c: 760: return FALSE;
 15228  004456  0C00               	retlw	0
 15229  004458                     __end_of_ECANSendMessage:
 15230                           	opt stack 0
 15231                           tblptru	equ	0xFF8
 15232                           tblptrh	equ	0xFF7
 15233                           tblptrl	equ	0xFF6
 15234                           tablat	equ	0xFF5
 15235                           prodh	equ	0xFF4
 15236                           prodl	equ	0xFF3
 15237                           intcon	equ	0xFF2
 15238                           postinc0	equ	0xFEE
 15239                           wreg	equ	0xFE8
 15240                           indf1	equ	0xFE7
 15241                           postdec1	equ	0xFE5
 15242                           fsr1h	equ	0xFE2
 15243                           fsr1l	equ	0xFE1
 15244                           indf2	equ	0xFDF
 15245                           postinc2	equ	0xFDE
 15246                           postdec2	equ	0xFDD
 15247                           plusw2	equ	0xFDB
 15248                           fsr2h	equ	0xFDA
 15249                           fsr2l	equ	0xFD9
 15250                           status	equ	0xFD8
 15251                           
 15252 ;; *************** function __CANIDToRegs *****************
 15253 ;; Defined at:
 15254 ;;		line 1099 in file "../ECAN.c"
 15255 ;; Parameters:    Size  Location     Type
 15256 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 15257 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15258 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15259 ;;		 -> B0CON(1), 
 15260 ;;  val             4   15[COMRAM] unsigned long 
 15261 ;;  type            1   19[COMRAM] unsigned char 
 15262 ;; Auto vars:     Size  Location     Type
 15263 ;;  Value           1   22[COMRAM] PTR struct _CAN_MESSAGE_
 15264 ;;		 -> _CANIDToRegs@val(4), 
 15265 ;; Return value:  Size  Location     Type
 15266 ;;		None               void
 15267 ;; Registers used:
 15268 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15269 ;; Tracked objects:
 15270 ;;		On entry : 0/E
 15271 ;;		On exit  : 0/0
 15272 ;;		Unchanged: 0/0
 15273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15274 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15275 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15276 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15277 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15278 ;;Total ram usage:       10 bytes
 15279 ;; Hardware stack levels used:    1
 15280 ;; Hardware stack levels required when called:    2
 15281 ;; This function calls:
 15282 ;;		Nothing
 15283 ;; This function is called by:
 15284 ;;		_ECANSendMessage
 15285 ;; This function uses a non-reentrant model
 15286 ;;
 15287                           
 15288                           	psect	text73
 15289  004A30                     __ptext73:
 15290                           	opt stack 0
 15291  004A30                     __CANIDToRegs:
 15292                           	opt stack 22
 15293                           
 15294                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 15295                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 15296                           
 15297                           ;incstack = 0
 15298                           ;incstack = 0
 15299  004A30  0E10               	movlw	low __CANIDToRegs@val
 15300  004A32  6E17               	movwf	__CANIDToRegs@Value,c
 15301                           
 15302                           ;ECAN.c: 1104: if ( type == 0 )
 15303  004A34  6614               	tstfsz	__CANIDToRegs@type,c
 15304  004A36  D022               	goto	l12703
 15305                           
 15306                           ;ECAN.c: 1105: {
 15307                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 15308  004A38  5017               	movf	__CANIDToRegs@Value,w,c
 15309  004A3A  6ED9               	movwf	fsr2l,c
 15310  004A3C  6ADA               	clrf	fsr2h,c
 15311  004A3E  50DF               	movf	indf2,w,c
 15312  004A40  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15313  004A42  90D8               	bcf	status,0,c
 15314  004A44  3215               	rrcf	??__CANIDToRegs,f,c
 15315  004A46  90D8               	bcf	status,0,c
 15316  004A48  3215               	rrcf	??__CANIDToRegs,f,c
 15317  004A4A  90D8               	bcf	status,0,c
 15318  004A4C  3015               	rrcf	??__CANIDToRegs,w,c
 15319                           
 15320                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 15321  004A4E  D862               	call	PL26	;call to abstracted procedure
 15322  004A50  2AD9               	incf	fsr2l,f,c
 15323  004A52  6ADA               	clrf	fsr2h,c
 15324  004A54  D872               	call	PL78	;call to abstracted procedure
 15325  004A56                     u9165:
 15326  004A56  90D8               	bcf	status,0,c
 15327  004A58  3615               	rlcf	??__CANIDToRegs,f,c
 15328  004A5A  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 15329  004A5C  D7FC               	goto	u9165
 15330  004A5E  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15331                           
 15332                           ;ECAN.c: 1109: ptr++;
 15333                           
 15334                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 15335  004A62  D846               	call	PL16	;call to abstracted procedure
 15336  004A64  D86A               	call	PL78	;call to abstracted procedure
 15337  004A66                     u9175:
 15338  004A66  90D8               	bcf	status,0,c
 15339  004A68  3615               	rlcf	??__CANIDToRegs,f,c
 15340  004A6A  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 15341  004A6C  D7FC               	goto	u9175
 15342  004A6E  5015               	movf	??__CANIDToRegs,w,c
 15343  004A70  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15344  004A74  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15345  004A78  6EDF               	movwf	indf2,c
 15346                           
 15347                           ;ECAN.c: 1111: }
 15348  004A7A  0012               	return	
 15349  004A7C                     l12703:
 15350                           
 15351                           ;ECAN.c: 1112: else
 15352                           ;ECAN.c: 1113: {
 15353                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 15354  004A7C  5017               	movf	__CANIDToRegs@Value,w,c
 15355  004A7E  D842               	call	PL24	;call to abstracted procedure
 15356  004A80  0E05               	movlw	5
 15357  004A82  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 15358  004A84                     u9185:
 15359  004A84  90D8               	bcf	status,0,c
 15360  004A86  3215               	rrcf	??__CANIDToRegs,f,c
 15361  004A88  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 15362  004A8A  D7FC               	goto	u9185
 15363  004A8C  5015               	movf	??__CANIDToRegs,w,c
 15364                           
 15365                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 15366  004A8E  D842               	call	PL26	;call to abstracted procedure
 15367  004A90  0E03               	movlw	3
 15368  004A92  D849               	call	PL40	;call to abstracted procedure
 15369  004A94  3615               	rlcf	??__CANIDToRegs,f,c
 15370  004A96  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15371                           
 15372                           ;ECAN.c: 1117: ptr++;
 15373                           
 15374                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 15375  004A9A  D82A               	call	PL16	;call to abstracted procedure
 15376  004A9C  0E02               	movlw	2
 15377  004A9E  D843               	call	PL40	;call to abstracted procedure
 15378  004AA0  3415               	rlcf	??__CANIDToRegs,w,c
 15379  004AA2  0BE0               	andlw	224
 15380  004AA4  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15381  004AA8  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15382  004AAC  6EDF               	movwf	indf2,c
 15383                           
 15384                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 15385  004AAE  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15386  004AB2  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15387  004AB6  0E00               	movlw	0
 15388  004AB8  86DB               	bsf	plusw2,3,c
 15389                           
 15390                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 15391  004ABA  5017               	movf	__CANIDToRegs@Value,w,c
 15392  004ABC  D823               	call	PL24	;call to abstracted procedure
 15393  004ABE  0E03               	movlw	3
 15394  004AC0  1615               	andwf	??__CANIDToRegs,f,c
 15395  004AC2  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15396                           
 15397                           ;ECAN.c: 1122: ptr++;
 15398                           
 15399                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 15400  004AC6  D814               	call	PL16	;call to abstracted procedure
 15401  004AC8  2AD9               	incf	fsr2l,f,c
 15402  004ACA  6ADA               	clrf	fsr2h,c
 15403  004ACC  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 15404  004AD0  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 15405  004AD4  CFDF FFE7          	movff	indf2,indf1
 15406                           
 15407                           ;ECAN.c: 1124: ptr++;
 15408  004AD8  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 15409  004ADA  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 15410                           
 15411                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 15412  004ADC  5017               	movf	__CANIDToRegs@Value,w,c
 15413  004ADE  6ED9               	movwf	fsr2l,c
 15414  004AE0  6ADA               	clrf	fsr2h,c
 15415  004AE2  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 15416  004AE6  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 15417  004AEA  CFDF FFE7          	movff	indf2,indf1
 15418  004AEE  0012               	return	
 15419  004AF0                     __end_of__CANIDToRegs:
 15420                           	opt stack 0
 15421  004AF0                     PL16:
 15422                           	opt stack 22
 15423  004AF0  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15424  004AF4  5015               	movf	??__CANIDToRegs,w,c
 15425  004AF6  12DF               	iorwf	indf2,f,c
 15426  004AF8  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 15427  004AFA  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 15428  004AFC  5017               	movf	__CANIDToRegs@Value,w,c
 15429  004AFE  6ED9               	movwf	fsr2l,c
 15430  004B00  6ADA               	clrf	fsr2h,c
 15431  004B02  0012               	return	
 15432  004B04                     __end_ofPL16:
 15433                           	opt stack 0
 15434  004B04                     PL24:
 15435                           	opt stack 22
 15436  004B04  6ED9               	movwf	fsr2l,c
 15437  004B06  6ADA               	clrf	fsr2h,c
 15438  004B08  0E02               	movlw	2
 15439  004B0A  26D9               	addwf	fsr2l,f,c
 15440  004B0C  6ADA               	clrf	fsr2h,c
 15441  004B0E  50DF               	movf	indf2,w,c
 15442  004B10  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15443  004B12  0012               	return	
 15444  004B14                     __end_ofPL24:
 15445                           	opt stack 0
 15446  004B14                     PL26:
 15447                           	opt stack 22
 15448  004B14  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15449  004B18  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15450  004B1C  6EDF               	movwf	indf2,c
 15451  004B1E  5017               	movf	__CANIDToRegs@Value,w,c
 15452  004B20  6ED9               	movwf	fsr2l,c
 15453  004B22  6ADA               	clrf	fsr2h,c
 15454  004B24  0012               	return	
 15455  004B26                     __end_ofPL26:
 15456                           	opt stack 0
 15457  004B26                     PL40:
 15458                           	opt stack 22
 15459  004B26  26D9               	addwf	fsr2l,f,c
 15460  004B28  6ADA               	clrf	fsr2h,c
 15461  004B2A  50DF               	movf	indf2,w,c
 15462  004B2C  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15463  004B2E  90D8               	bcf	status,0,c
 15464  004B30  3615               	rlcf	??__CANIDToRegs,f,c
 15465  004B32  90D8               	bcf	status,0,c
 15466  004B34  3615               	rlcf	??__CANIDToRegs,f,c
 15467  004B36  90D8               	bcf	status,0,c
 15468  004B38  0012               	return	
 15469  004B3A                     __end_ofPL40:
 15470                           	opt stack 0
 15471  004B3A                     PL78:
 15472                           	opt stack 22
 15473  004B3A  50DF               	movf	indf2,w,c
 15474  004B3C  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15475  004B3E  0E05               	movlw	5
 15476  004B40  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 15477  004B42  0C05               	retlw	5
 15478  004B44                     __end_ofPL78:
 15479                           	opt stack 0
 15480                           tblptru	equ	0xFF8
 15481                           tblptrh	equ	0xFF7
 15482                           tblptrl	equ	0xFF6
 15483                           tablat	equ	0xFF5
 15484                           prodh	equ	0xFF4
 15485                           prodl	equ	0xFF3
 15486                           intcon	equ	0xFF2
 15487                           postinc0	equ	0xFEE
 15488                           wreg	equ	0xFE8
 15489                           indf1	equ	0xFE7
 15490                           postdec1	equ	0xFE5
 15491                           fsr1h	equ	0xFE2
 15492                           fsr1l	equ	0xFE1
 15493                           indf2	equ	0xFDF
 15494                           postinc2	equ	0xFDE
 15495                           postdec2	equ	0xFDD
 15496                           plusw2	equ	0xFDB
 15497                           fsr2h	equ	0xFDA
 15498                           fsr2l	equ	0xFD9
 15499                           status	equ	0xFD8
 15500                           
 15501 ;; *************** function _vscp_getEvent *****************
 15502 ;; Defined at:
 15503 ;;		line 1300 in file "../../vscp_firmware/common/vscp_firmware.c"
 15504 ;; Parameters:    Size  Location     Type
 15505 ;;		None
 15506 ;; Auto vars:     Size  Location     Type
 15507 ;;  rv              1   49[COMRAM] unsigned char 
 15508 ;; Return value:  Size  Location     Type
 15509 ;;                  1    wreg      unsigned char 
 15510 ;; Registers used:
 15511 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15512 ;; Tracked objects:
 15513 ;;		On entry : F/0
 15514 ;;		On exit  : 0/0
 15515 ;;		Unchanged: 0/0
 15516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15518 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15520 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15521 ;;Total ram usage:        1 bytes
 15522 ;; Hardware stack levels used:    1
 15523 ;; Hardware stack levels required when called:    6
 15524 ;; This function calls:
 15525 ;;		_getVSCPFrame
 15526 ;; This function is called by:
 15527 ;;		_main
 15528 ;; This function uses a non-reentrant model
 15529 ;;
 15530                           
 15531                           	psect	text74
 15532  005CFE                     __ptext74:
 15533                           	opt stack 0
 15534  005CFE                     _vscp_getEvent:
 15535                           	opt stack 24
 15536                           
 15537                           ; BSR set to: 0
 15538                           ;vscp_firmware.c: 1301: int8_t rv;
 15539                           ;vscp_firmware.c: 1307: if (vscp_imsg.flags & 0x80) return !0;
 15540                           
 15541                           ;incstack = 0
 15542                           ;incstack = 0
 15543  005CFE  BFBD               	btfsc	_vscp_imsg& (0+255),7,b
 15544  005D00  0012               	return	
 15545                           
 15546                           ; BSR set to: 0
 15547                           ;vscp_firmware.c: 1310: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 15548                           ;vscp_firmware.c: 1311: &vscp_imsg.vscp_type,
 15549                           ;vscp_firmware.c: 1312: &vscp_imsg.oaddr,
 15550                           ;vscp_firmware.c: 1313: &vscp_imsg.priority,
 15551                           ;vscp_firmware.c: 1314: &vscp_imsg.flags,
 15552                           ;vscp_firmware.c: 1315: vscp_imsg.data ) ) ) {
 15553  005D02  0EC1               	movlw	low (_vscp_imsg+4)
 15554  005D04  6E24               	movwf	?_getVSCPFrame,c
 15555  005D06  0EC2               	movlw	low (_vscp_imsg+5)
 15556  005D08  6E25               	movwf	?_getVSCPFrame+1,c
 15557  005D0A  0EBE               	movlw	low (_vscp_imsg+1)
 15558  005D0C  6E26               	movwf	?_getVSCPFrame+2,c
 15559  005D0E  0EBD               	movlw	low _vscp_imsg
 15560  005D10  6E27               	movwf	?_getVSCPFrame+3,c
 15561  005D12  0EC3               	movlw	low (_vscp_imsg+6)
 15562  005D14  6E28               	movwf	?_getVSCPFrame+4,c
 15563  005D16  0EBF               	movlw	(_vscp_imsg+2)& (0+255)
 15564  005D18  EC7C  F02B         	call	_getVSCPFrame
 15565  005D1C  6E32               	movwf	vscp_getEvent@rv,c
 15566  005D1E  5032               	movf	vscp_getEvent@rv& (0+255),w,c
 15567  005D20  B4D8               	btfsc	status,2,c
 15568  005D22  0012               	return	
 15569                           
 15570                           ;vscp_firmware.c: 1317: vscp_imsg.flags |= 0x80;
 15571  005D24  0100               	movlb	0	; () banked
 15572  005D26  8FBD               	bsf	_vscp_imsg& (0+255),7,b
 15573  005D28  0012               	return	
 15574  005D2A                     __end_of_vscp_getEvent:
 15575                           	opt stack 0
 15576                           tblptru	equ	0xFF8
 15577                           tblptrh	equ	0xFF7
 15578                           tblptrl	equ	0xFF6
 15579                           tablat	equ	0xFF5
 15580                           prodh	equ	0xFF4
 15581                           prodl	equ	0xFF3
 15582                           intcon	equ	0xFF2
 15583                           postinc0	equ	0xFEE
 15584                           wreg	equ	0xFE8
 15585                           indf1	equ	0xFE7
 15586                           postdec1	equ	0xFE5
 15587                           fsr1h	equ	0xFE2
 15588                           fsr1l	equ	0xFE1
 15589                           indf2	equ	0xFDF
 15590                           postinc2	equ	0xFDE
 15591                           postdec2	equ	0xFDD
 15592                           plusw2	equ	0xFDB
 15593                           fsr2h	equ	0xFDA
 15594                           fsr2l	equ	0xFD9
 15595                           status	equ	0xFD8
 15596                           
 15597 ;; *************** function _getVSCPFrame *****************
 15598 ;; Defined at:
 15599 ;;		line 2942 in file "../main.c"
 15600 ;; Parameters:    Size  Location     Type
 15601 ;;  pvscpclass      1    wreg     PTR unsigned short 
 15602 ;;		 -> vscp_imsg(14), 
 15603 ;;  pvscptype       1   35[COMRAM] PTR unsigned char 
 15604 ;;		 -> vscp_imsg(14), 
 15605 ;;  pNodeId         1   36[COMRAM] PTR unsigned char 
 15606 ;;		 -> vscp_imsg(14), 
 15607 ;;  pPriority       1   37[COMRAM] PTR unsigned char 
 15608 ;;		 -> vscp_imsg(14), 
 15609 ;;  pSize           1   38[COMRAM] PTR unsigned char 
 15610 ;;		 -> vscp_imsg(14), 
 15611 ;;  pData           1   39[COMRAM] PTR unsigned char 
 15612 ;;		 -> vscp_imsg(14), 
 15613 ;; Auto vars:     Size  Location     Type
 15614 ;;  pvscpclass      1   44[COMRAM] PTR unsigned short 
 15615 ;;		 -> vscp_imsg(14), 
 15616 ;;  id              4   45[COMRAM] unsigned long 
 15617 ;; Return value:  Size  Location     Type
 15618 ;;                  1    wreg      unsigned char 
 15619 ;; Registers used:
 15620 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15621 ;; Tracked objects:
 15622 ;;		On entry : F/0
 15623 ;;		On exit  : 0/0
 15624 ;;		Unchanged: 0/0
 15625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15626 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15627 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15628 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15629 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15630 ;;Total ram usage:       14 bytes
 15631 ;; Hardware stack levels used:    1
 15632 ;; Hardware stack levels required when called:    5
 15633 ;; This function calls:
 15634 ;;		_getCANFrame
 15635 ;; This function is called by:
 15636 ;;		_vscp_getEvent
 15637 ;; This function uses a non-reentrant model
 15638 ;;
 15639                           
 15640                           	psect	text75
 15641  0056F8                     __ptext75:
 15642                           	opt stack 0
 15643  0056F8                     _getVSCPFrame:
 15644                           	opt stack 24
 15645                           
 15646                           ;incstack = 0
 15647                           ;incstack = 0
 15648                           ;getVSCPFrame@pvscpclass stored from wreg
 15649  0056F8  CFE8 F02D          	movff	wreg,getVSCPFrame@pvscpclass
 15650                           
 15651                           ; BSR set to: 0
 15652                           ;main.c: 2943: uint32_t id;
 15653                           ;main.c: 2945: if (!getCANFrame(&id, pSize, pData)) {
 15654  0056FC  C027  F020         	movff	getVSCPFrame@pSize,?_getCANFrame
 15655  005700  C028  F021         	movff	getVSCPFrame@pData,?_getCANFrame+1
 15656  005704  0E2E               	movlw	getVSCPFrame@id& (0+255)
 15657  005706  ECE6  F02E         	call	_getCANFrame
 15658  00570A  0900               	iorlw	0
 15659  00570C  E101               	bnz	l9369
 15660                           
 15661                           ;main.c: 2946: return 0;
 15662  00570E  0C00               	retlw	0
 15663  005710                     l9369:
 15664                           
 15665                           ;main.c: 2947: }
 15666                           ;main.c: 2949: *pNodeId = id & 0x0ff;
 15667  005710  5025               	movf	getVSCPFrame@pNodeId,w,c
 15668  005712  6ED9               	movwf	fsr2l,c
 15669  005714  6ADA               	clrf	fsr2h,c
 15670  005716  C02E  FFDF         	movff	getVSCPFrame@id,indf2
 15671                           
 15672                           ;main.c: 2950: *pvscptype = (id >> 8) & 0xff;
 15673  00571A  5024               	movf	getVSCPFrame@pvscptype,w,c
 15674  00571C  6ED9               	movwf	fsr2l,c
 15675  00571E  6ADA               	clrf	fsr2h,c
 15676  005720  C02F  FFDF         	movff	getVSCPFrame@id+1,indf2
 15677                           
 15678                           ;main.c: 2951: *pvscpclass = (id >> 16) & 0x1ff;
 15679  005724  5030               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 15680  005726  6E29               	movwf	??_getVSCPFrame& (0+255),c
 15681  005728  0E01               	movlw	1
 15682  00572A  1431               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 15683  00572C  6E2A               	movwf	(??_getVSCPFrame+1)& (0+255),c
 15684  00572E  502D               	movf	getVSCPFrame@pvscpclass,w,c
 15685  005730  6ED9               	movwf	fsr2l,c
 15686  005732  6ADA               	clrf	fsr2h,c
 15687  005734  C029  FFDE         	movff	??_getVSCPFrame,postinc2
 15688  005738  C02A  FFDD         	movff	??_getVSCPFrame+1,postdec2
 15689                           
 15690                           ;main.c: 2952: *pPriority = (uint16_t) (0x07 & (id >> 26));
 15691  00573C  5026               	movf	getVSCPFrame@pPriority,w,c
 15692  00573E  6ED9               	movwf	fsr2l,c
 15693  005740  6ADA               	clrf	fsr2h,c
 15694  005742  C02E  F029         	movff	getVSCPFrame@id,??_getVSCPFrame
 15695  005746  C02F  F02A         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 15696  00574A  C030  F02B         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 15697  00574E  C031  F02C         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 15698  005752  0E1B               	movlw	27
 15699  005754  D005               	goto	u5530
 15700  005756                     u5535:
 15701  005756  90D8               	bcf	status,0,c
 15702  005758  322C               	rrcf	??_getVSCPFrame+3,f,c
 15703  00575A  322B               	rrcf	??_getVSCPFrame+2,f,c
 15704  00575C  322A               	rrcf	??_getVSCPFrame+1,f,c
 15705  00575E  3229               	rrcf	??_getVSCPFrame,f,c
 15706  005760                     u5530:
 15707  005760  2EE8               	decfsz	wreg,f,c
 15708  005762  D7F9               	goto	u5535
 15709  005764  5029               	movf	??_getVSCPFrame,w,c
 15710  005766  0B07               	andlw	7
 15711  005768  6EDF               	movwf	indf2,c
 15712                           
 15713                           ;main.c: 2954: return 1;
 15714  00576A  0C01               	retlw	1
 15715  00576C                     __end_of_getVSCPFrame:
 15716                           	opt stack 0
 15717                           tblptru	equ	0xFF8
 15718                           tblptrh	equ	0xFF7
 15719                           tblptrl	equ	0xFF6
 15720                           tablat	equ	0xFF5
 15721                           prodh	equ	0xFF4
 15722                           prodl	equ	0xFF3
 15723                           intcon	equ	0xFF2
 15724                           postinc0	equ	0xFEE
 15725                           wreg	equ	0xFE8
 15726                           indf1	equ	0xFE7
 15727                           postdec1	equ	0xFE5
 15728                           fsr1h	equ	0xFE2
 15729                           fsr1l	equ	0xFE1
 15730                           indf2	equ	0xFDF
 15731                           postinc2	equ	0xFDE
 15732                           postdec2	equ	0xFDD
 15733                           plusw2	equ	0xFDB
 15734                           fsr2h	equ	0xFDA
 15735                           fsr2l	equ	0xFD9
 15736                           status	equ	0xFD8
 15737                           
 15738 ;; *************** function _getCANFrame *****************
 15739 ;; Defined at:
 15740 ;;		line 2984 in file "../main.c"
 15741 ;; Parameters:    Size  Location     Type
 15742 ;;  pid             1    wreg     PTR unsigned long 
 15743 ;;		 -> getVSCPFrame@id(4), 
 15744 ;;  pdlc            1   31[COMRAM] PTR unsigned char 
 15745 ;;		 -> vscp_imsg(14), 
 15746 ;;  pdata           1   32[COMRAM] PTR unsigned char 
 15747 ;;		 -> vscp_imsg(14), 
 15748 ;; Auto vars:     Size  Location     Type
 15749 ;;  pid             1   33[COMRAM] PTR unsigned long 
 15750 ;;		 -> getVSCPFrame@id(4), 
 15751 ;;  flags           1   34[COMRAM] enum E19044
 15752 ;; Return value:  Size  Location     Type
 15753 ;;                  1    wreg      unsigned char 
 15754 ;; Registers used:
 15755 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15756 ;; Tracked objects:
 15757 ;;		On entry : F/0
 15758 ;;		On exit  : 0/0
 15759 ;;		Unchanged: 0/0
 15760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15761 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15762 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15764 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15765 ;;Total ram usage:        4 bytes
 15766 ;; Hardware stack levels used:    1
 15767 ;; Hardware stack levels required when called:    4
 15768 ;; This function calls:
 15769 ;;		_ECANReceiveMessage
 15770 ;; This function is called by:
 15771 ;;		_getVSCPFrame
 15772 ;; This function uses a non-reentrant model
 15773 ;;
 15774                           
 15775                           	psect	text76
 15776  005DCC                     __ptext76:
 15777                           	opt stack 0
 15778  005DCC                     _getCANFrame:
 15779                           	opt stack 24
 15780                           
 15781                           ;incstack = 0
 15782                           ;incstack = 0
 15783                           ;getCANFrame@pid stored from wreg
 15784  005DCC  CFE8 F022          	movff	wreg,getCANFrame@pid
 15785                           
 15786                           ; BSR set to: 0
 15787                           ;main.c: 2985: ECAN_RX_MSG_FLAGS flags;
 15788                           ;main.c: 2989: if (vscp_imsg.flags & 0x80) return 0;
 15789  005DD0  BFBD               	btfsc	_vscp_imsg& (0+255),7,b
 15790  005DD2                     l9381:
 15791  005DD2  0C00               	retlw	0
 15792                           
 15793                           ; BSR set to: 0
 15794                           ;main.c: 2991: if (ECANReceiveMessage((unsigned long *) pid, (BYTE*) pdata, (BYTE*) pdlc
      +                          , &flags)) {
 15795  005DD4  C021  F015         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 15796  005DD8  C020  F016         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 15797  005DDC  0E23               	movlw	low getCANFrame@flags
 15798  005DDE  6E17               	movwf	?_ECANReceiveMessage+2,c
 15799  005DE0  5022               	movf	getCANFrame@pid,w,c
 15800  005DE2  ECBC  F01E         	call	_ECANReceiveMessage
 15801  005DE6  0900               	iorlw	0
 15802  005DE8  E0F4               	bz	l9381
 15803                           
 15804                           ;main.c: 2993: if (flags & ECAN_RX_RTR_FRAME) return 0;
 15805  005DEA  AC23               	btfss	getCANFrame@flags,6,c
 15806                           
 15807                           ;main.c: 2996: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 15808  005DEC  AA23               	btfss	getCANFrame@flags,5,c
 15809  005DEE  0C00               	retlw	0
 15810                           
 15811                           ;main.c: 2998: return 1;
 15812  005DF0  0C01               	retlw	1
 15813  005DF2                     __end_of_getCANFrame:
 15814                           	opt stack 0
 15815                           tblptru	equ	0xFF8
 15816                           tblptrh	equ	0xFF7
 15817                           tblptrl	equ	0xFF6
 15818                           tablat	equ	0xFF5
 15819                           prodh	equ	0xFF4
 15820                           prodl	equ	0xFF3
 15821                           intcon	equ	0xFF2
 15822                           postinc0	equ	0xFEE
 15823                           wreg	equ	0xFE8
 15824                           indf1	equ	0xFE7
 15825                           postdec1	equ	0xFE5
 15826                           fsr1h	equ	0xFE2
 15827                           fsr1l	equ	0xFE1
 15828                           indf2	equ	0xFDF
 15829                           postinc2	equ	0xFDE
 15830                           postdec2	equ	0xFDD
 15831                           plusw2	equ	0xFDB
 15832                           fsr2h	equ	0xFDA
 15833                           fsr2l	equ	0xFD9
 15834                           status	equ	0xFD8
 15835                           
 15836 ;; *************** function _ECANReceiveMessage *****************
 15837 ;; Defined at:
 15838 ;;		line 803 in file "../ECAN.c"
 15839 ;; Parameters:    Size  Location     Type
 15840 ;;  id              1    wreg     PTR unsigned long 
 15841 ;;		 -> getVSCPFrame@id(4), 
 15842 ;;  data            1   20[COMRAM] PTR unsigned char 
 15843 ;;		 -> vscp_imsg(14), 
 15844 ;;  dataLen         1   21[COMRAM] PTR unsigned char 
 15845 ;;		 -> vscp_imsg(14), 
 15846 ;;  msgFlags        1   22[COMRAM] PTR enum E18976
 15847 ;;		 -> getCANFrame@flags(1), 
 15848 ;; Auto vars:     Size  Location     Type
 15849 ;;  id              1   25[COMRAM] PTR unsigned long 
 15850 ;;		 -> getVSCPFrame@id(4), 
 15851 ;;  ptr             2   29[COMRAM] PTR unsigned char 
 15852 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 15853 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 15854 ;;  savedPtr        2   23[COMRAM] PTR unsigned char 
 15855 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 15856 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 15857 ;;  temp            1   28[COMRAM] struct .
 15858 ;;  mode            1   27[COMRAM] unsigned char 
 15859 ;;  i               1   26[COMRAM] unsigned char 
 15860 ;; Return value:  Size  Location     Type
 15861 ;;                  1    wreg      enum E18242
 15862 ;; Registers used:
 15863 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 15864 ;; Tracked objects:
 15865 ;;		On entry : F/0
 15866 ;;		On exit  : 0/0
 15867 ;;		Unchanged: 0/0
 15868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15869 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15870 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15872 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15873 ;;Total ram usage:       11 bytes
 15874 ;; Hardware stack levels used:    1
 15875 ;; Hardware stack levels required when called:    3
 15876 ;; This function calls:
 15877 ;;		__ECANPointBuffer
 15878 ;;		__RegsToCANID
 15879 ;; This function is called by:
 15880 ;;		_getCANFrame
 15881 ;; This function uses a non-reentrant model
 15882 ;;
 15883                           
 15884                           	psect	text77
 15885  003D78                     __ptext77:
 15886                           	opt stack 0
 15887  003D78                     _ECANReceiveMessage:
 15888                           	opt stack 24
 15889                           
 15890                           ;incstack = 0
 15891                           ;incstack = 0
 15892                           ;ECANReceiveMessage@id stored from wreg
 15893  003D78  CFE8 F01A          	movff	wreg,ECANReceiveMessage@id
 15894                           
 15895                           ; BSR set to: 0
 15896                           ;ECAN.c: 805: BYTE mode;
 15897                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 15898                           ;ECAN.c: 809: char i;
 15899                           ;ECAN.c: 810: BYTE_VAL temp;
 15900                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 15901  003D7C  6A48               	clrf	__ECANRxFilterHitInfo,c
 15902                           
 15903                           ; BSR set to: 0
 15904                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 15905  003D7E  5072               	movf	3954,w,c	;volatile
 15906  003D80  0BC0               	andlw	192
 15907  003D82  6E1C               	movwf	ECANReceiveMessage@mode,c
 15908                           
 15909                           ; BSR set to: 0
 15910                           ;ECAN.c: 816: if ( mode == 0x00 )
 15911  003D84  661C               	tstfsz	ECANReceiveMessage@mode,c
 15912  003D86  D030               	goto	l9517
 15913                           
 15914                           ; BSR set to: 0
 15915                           ;ECAN.c: 822: {
 15916                           ;ECAN.c: 824: if ( RXB0FUL )
 15917  003D88  AE60               	btfss	3936,7,c	;volatile
 15918  003D8A  D012               	goto	l842
 15919                           
 15920                           ; BSR set to: 0
 15921                           ;ECAN.c: 825: {
 15922                           ;ECAN.c: 827: RXB0IF = 0;
 15923  003D8C  9077               	bcf	3959,0,c	;volatile
 15924                           
 15925                           ;ECAN.c: 830: if ( RXB0OVFL )
 15926  003D8E  AE71               	btfss	3953,7,c	;volatile
 15927  003D90  D006               	goto	l9493
 15928                           
 15929                           ; BSR set to: 0
 15930                           ;ECAN.c: 831: {
 15931                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 15932  003D92  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 15933  003D94  6ED9               	movwf	fsr2l,c
 15934  003D96  6ADA               	clrf	fsr2h,c
 15935  003D98  0E00               	movlw	0
 15936  003D9A  86DB               	bsf	plusw2,3,c
 15937                           
 15938                           ; BSR set to: 0
 15939                           ;ECAN.c: 833: RXB0OVFL = 0;
 15940  003D9C  9E71               	bcf	3953,7,c	;volatile
 15941  003D9E                     l9493:
 15942                           
 15943                           ; BSR set to: 0
 15944                           ;ECAN.c: 834: }
 15945                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 15946  003D9E  A060               	btfss	3936,0,c	;volatile
 15947  003DA0  D002               	bra	u5705
 15948  003DA2  8048               	bsf	__ECANRxFilterHitInfo,0,c
 15949  003DA4  D001               	bra	u5707
 15950  003DA6                     u5705:
 15951  003DA6  9048               	bcf	__ECANRxFilterHitInfo,0,c
 15952  003DA8                     u5707:
 15953                           
 15954                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 15955  003DA8  0E0F               	movlw	15	;volatile
 15956  003DAA  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 15957  003DAC  0E60               	movlw	96	;volatile
 15958  003DAE  D01A               	goto	L31
 15959  003DB0                     l842:
 15960                           
 15961                           ; BSR set to: 0
 15962                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 15963  003DB0  010F               	movlb	15	; () banked
 15964  003DB2  AF30               	btfss	48,7,b	;volatile
 15965  003DB4  0C00               	retlw	0
 15966                           
 15967                           ; BSR set to: 15
 15968                           ;ECAN.c: 842: {
 15969                           ;ECAN.c: 844: RXB1IF = 0;
 15970  003DB6  9277               	bcf	3959,1,c	;volatile
 15971                           
 15972                           ;ECAN.c: 847: if ( RXB1OVFL )
 15973  003DB8  AC71               	btfss	3953,6,c	;volatile
 15974  003DBA  D006               	goto	l9503
 15975                           
 15976                           ; BSR set to: 15
 15977                           ;ECAN.c: 848: {
 15978                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 15979  003DBC  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 15980  003DBE  6ED9               	movwf	fsr2l,c
 15981  003DC0  6ADA               	clrf	fsr2h,c
 15982  003DC2  0E00               	movlw	0
 15983  003DC4  86DB               	bsf	plusw2,3,c
 15984                           
 15985                           ; BSR set to: 15
 15986                           ;ECAN.c: 850: RXB1OVFL = 0;
 15987  003DC6  9C71               	bcf	3953,6,c	;volatile
 15988  003DC8                     l9503:
 15989                           
 15990                           ; BSR set to: 15
 15991                           ;ECAN.c: 851: }
 15992                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 15993  003DC8  5130               	movf	48,w,b	;volatile
 15994  003DCA  0B07               	andlw	7
 15995  003DCC  6E48               	movwf	__ECANRxFilterHitInfo,c
 15996                           
 15997                           ; BSR set to: 15
 15998                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 15999  003DCE  0E02               	movlw	2
 16000  003DD0  6048               	cpfslt	__ECANRxFilterHitInfo,c
 16001  003DD2  D005               	goto	l9509
 16002                           
 16003                           ; BSR set to: 15
 16004                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 16005  003DD4  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16006  003DD6  6ED9               	movwf	fsr2l,c
 16007  003DD8  6ADA               	clrf	fsr2h,c
 16008  003DDA  0E00               	movlw	0
 16009  003DDC  8EDB               	bsf	plusw2,7,c
 16010  003DDE                     l9509:
 16011                           
 16012                           ; BSR set to: 15
 16013                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 16014  003DDE  0E0F               	movlw	15	;volatile
 16015  003DE0  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16016  003DE2  0E30               	movlw	48	;volatile
 16017  003DE4                     L31:
 16018  003DE4  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16019                           
 16020                           ;ECAN.c: 860: }
 16021  003DE6  D05B               	goto	l9571
 16022  003DE8                     l9517:
 16023                           
 16024                           ; BSR set to: 0
 16025                           ;ECAN.c: 869: else if ( mode == 0x40 )
 16026  003DE8  501C               	movf	ECANReceiveMessage@mode,w,c
 16027  003DEA  0A40               	xorlw	64
 16028  003DEC  E13E               	bnz	l852
 16029                           
 16030                           ; BSR set to: 0
 16031                           ;ECAN.c: 875: {
 16032                           ;ECAN.c: 876: if ( RXB0FUL )
 16033  003DEE  AE60               	btfss	3936,7,c	;volatile
 16034  003DF0  D004               	goto	l853
 16035                           
 16036                           ; BSR set to: 0
 16037                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 16038  003DF2  0E0F               	movlw	15	;volatile
 16039  003DF4  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16040  003DF6  0E60               	movlw	96	;volatile
 16041  003DF8  D036               	goto	L38
 16042  003DFA                     l853:
 16043                           
 16044                           ; BSR set to: 0
 16045                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 16046  003DFA  010F               	movlb	15	; () banked
 16047  003DFC  AF30               	btfss	48,7,b	;volatile
 16048  003DFE  D004               	goto	l855
 16049                           
 16050                           ; BSR set to: 15
 16051                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 16052  003E00  0E0F               	movlw	15	;volatile
 16053  003E02  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16054  003E04  0E30               	movlw	48	;volatile
 16055  003E06  D02F               	goto	L38
 16056  003E08                     l855:
 16057                           
 16058                           ; BSR set to: 15
 16059                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 16060  003E08  010E               	movlb	14
 16061  003E0A  A57D               	btfss	125,2,b	;volatile
 16062  003E0C  AF80               	btfss	128,7,b	;volatile
 16063  003E0E  D004               	goto	l857
 16064                           
 16065                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 16066  003E10  0E0E               	movlw	14	;volatile
 16067  003E12  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16068  003E14  0E80               	movlw	128	;volatile
 16069  003E16  D027               	goto	L38
 16070  003E18                     l857:
 16071                           
 16072                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 16073  003E18  010E               	movlb	14
 16074  003E1A  A77D               	btfss	125,3,b	;volatile
 16075  003E1C  AF90               	btfss	144,7,b	;volatile
 16076  003E1E  D004               	goto	l859
 16077                           
 16078                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 16079  003E20  0E0E               	movlw	14	;volatile
 16080  003E22  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16081  003E24  0E90               	movlw	144	;volatile
 16082  003E26  D01F               	goto	L38
 16083  003E28                     l859:
 16084                           
 16085                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 16086  003E28  010E               	movlb	14
 16087  003E2A  A97D               	btfss	125,4,b	;volatile
 16088  003E2C  AFA0               	btfss	160,7,b	;volatile
 16089  003E2E  D004               	goto	l861
 16090                           
 16091                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 16092  003E30  0E0E               	movlw	14	;volatile
 16093  003E32  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16094  003E34  0EA0               	movlw	160	;volatile
 16095  003E36  D017               	goto	L38
 16096  003E38                     l861:
 16097                           
 16098                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 16099  003E38  010E               	movlb	14
 16100  003E3A  AB7D               	btfss	125,5,b	;volatile
 16101  003E3C  AFB0               	btfss	176,7,b	;volatile
 16102  003E3E  D004               	goto	l863
 16103                           
 16104                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 16105  003E40  0E0E               	movlw	14	;volatile
 16106  003E42  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16107  003E44  0EB0               	movlw	176	;volatile
 16108  003E46  D00F               	goto	L38
 16109  003E48                     l863:
 16110                           
 16111                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 16112  003E48  010E               	movlb	14
 16113  003E4A  AD7D               	btfss	125,6,b	;volatile
 16114  003E4C  AFC0               	btfss	192,7,b	;volatile
 16115  003E4E  D004               	goto	l865
 16116                           
 16117                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 16118  003E50  0E0E               	movlw	14	;volatile
 16119  003E52  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16120  003E54  0EC0               	movlw	192	;volatile
 16121  003E56  D007               	goto	L38
 16122  003E58                     l865:
 16123                           
 16124                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 16125  003E58  010E               	movlb	14
 16126  003E5A  AF7D               	btfss	125,7,b	;volatile
 16127  003E5C  AFD0               	btfss	208,7,b	;volatile
 16128  003E5E  0C00               	retlw	0
 16129                           
 16130                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 16131  003E60  0E0E               	movlw	14	;volatile
 16132  003E62  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16133  003E64  0ED0               	movlw	208	;volatile
 16134  003E66                     L38:
 16135  003E66  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16136  003E68  D00A               	goto	l9561
 16137  003E6A                     l852:
 16138                           
 16139                           ; BSR set to: 0
 16140                           ;ECAN.c: 910: else
 16141                           ;ECAN.c: 915: {
 16142                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 16143  003E6A  AE71               	btfss	3953,7,c	;volatile
 16144  003E6C  0C00               	retlw	0
 16145                           
 16146                           ; BSR set to: 0
 16147                           ;ECAN.c: 917: {
 16148                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 16149  003E6E  506F               	movf	3951,w,c	;volatile
 16150  003E70  0B07               	andlw	7
 16151  003E72  ECC9  F02A         	call	__ECANPointBuffer
 16152  003E76  C00E  F01E         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 16153  003E7A  C00F  F01F         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 16154  003E7E                     l9561:
 16155                           
 16156                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 16157  003E7E  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 16158  003E82  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 16159  003E86  50DF               	movf	indf2,w,c
 16160  003E88  0B1F               	andlw	31
 16161  003E8A  6E48               	movwf	__ECANRxFilterHitInfo,c
 16162                           
 16163                           ;ECAN.c: 932: RXB1IF = 0;
 16164  003E8C  9277               	bcf	3959,1,c	;volatile
 16165                           
 16166                           ;ECAN.c: 934: if ( RXB1OVFL )
 16167  003E8E  AC71               	btfss	3953,6,c	;volatile
 16168  003E90  D006               	goto	l9571
 16169                           
 16170                           ;ECAN.c: 935: {
 16171                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 16172  003E92  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16173  003E94  6ED9               	movwf	fsr2l,c
 16174  003E96  6ADA               	clrf	fsr2h,c
 16175  003E98  0E00               	movlw	0
 16176  003E9A  86DB               	bsf	plusw2,3,c
 16177                           
 16178                           ;ECAN.c: 937: RXB1OVFL = 0;
 16179  003E9C  9C71               	bcf	3953,6,c	;volatile
 16180  003E9E                     l9571:
 16181                           
 16182                           ;ECAN.c: 942: savedPtr = ptr;
 16183  003E9E  C01E  F018         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 16184  003EA2  C01F  F019         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 16185                           
 16186                           ;ECAN.c: 943: *msgFlags = 0;
 16187  003EA6  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16188  003EA8  6ED9               	movwf	fsr2l,c
 16189  003EAA  6ADA               	clrf	fsr2h,c
 16190  003EAC  6ADF               	clrf	indf2,c
 16191                           
 16192                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 16193  003EAE  EE20 F005          	lfsr	2,5
 16194  003EB2  D854               	call	PL74	;call to abstracted procedure
 16195                           
 16196                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 16197  003EB4  5016               	movf	ECANReceiveMessage@dataLen,w,c
 16198  003EB6  6ED9               	movwf	fsr2l,c
 16199  003EB8  6ADA               	clrf	fsr2h,c
 16200  003EBA  501D               	movf	ECANReceiveMessage@temp,w,c
 16201  003EBC  0B0F               	andlw	15
 16202  003EBE  6EDF               	movwf	indf2,c
 16203                           
 16204                           ;ECAN.c: 950: if ( temp.bits.b6 )
 16205  003EC0  AC1D               	btfss	ECANReceiveMessage@temp,6,c
 16206  003EC2  D005               	goto	l873
 16207                           
 16208                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 16209  003EC4  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16210  003EC6  6ED9               	movwf	fsr2l,c
 16211  003EC8  6ADA               	clrf	fsr2h,c
 16212  003ECA  0E00               	movlw	0
 16213  003ECC  8CDB               	bsf	plusw2,6,c
 16214  003ECE                     l873:
 16215                           
 16216                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 16217  003ECE  EE20 F002          	lfsr	2,2
 16218  003ED2  D844               	call	PL74	;call to abstracted procedure
 16219                           
 16220                           ;ECAN.c: 955: if ( temp.bits.b3 )
 16221  003ED4  A61D               	btfss	ECANReceiveMessage@temp,3,c
 16222  003ED6  D008               	goto	l874
 16223                           
 16224                           ;ECAN.c: 956: {
 16225                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 16226  003ED8  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16227  003EDA  6ED9               	movwf	fsr2l,c
 16228  003EDC  6ADA               	clrf	fsr2h,c
 16229  003EDE  0E00               	movlw	0
 16230  003EE0  8ADB               	bsf	plusw2,5,c
 16231                           
 16232                           ;ECAN.c: 958: temp.Val = 1;
 16233  003EE2  0E01               	movlw	1
 16234  003EE4  6E1D               	movwf	ECANReceiveMessage@temp,c
 16235                           
 16236                           ;ECAN.c: 959: }
 16237  003EE6  D001               	goto	l9589
 16238  003EE8                     l874:
 16239                           
 16240                           ;ECAN.c: 960: else
 16241                           ;ECAN.c: 961: temp.Val = 0;
 16242  003EE8  6A1D               	clrf	ECANReceiveMessage@temp,c
 16243  003EEA                     l9589:
 16244                           
 16245                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 16246  003EEA  281E               	incf	ECANReceiveMessage@ptr,w,c
 16247  003EEC  6E0E               	movwf	?__RegsToCANID,c
 16248  003EEE  0E00               	movlw	0
 16249  003EF0  201F               	addwfc	ECANReceiveMessage@ptr+1,w,c
 16250  003EF2  6E0F               	movwf	?__RegsToCANID+1,c
 16251  003EF4  C01A  F010         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 16252  003EF8  C01D  F011         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 16253  003EFC  EC73  F023         	call	__RegsToCANID	;wreg free
 16254                           
 16255                           ;ECAN.c: 966: ptr += 6;
 16256  003F00  0E06               	movlw	6
 16257  003F02  261E               	addwf	ECANReceiveMessage@ptr,f,c
 16258  003F04  0E00               	movlw	0
 16259  003F06  221F               	addwfc	ECANReceiveMessage@ptr+1,f,c
 16260                           
 16261                           ;ECAN.c: 967: temp.Val = *dataLen;
 16262  003F08  5016               	movf	ECANReceiveMessage@dataLen,w,c
 16263  003F0A  6ED9               	movwf	fsr2l,c
 16264  003F0C  6ADA               	clrf	fsr2h,c
 16265  003F0E  50DF               	movf	indf2,w,c
 16266  003F10  6E1D               	movwf	ECANReceiveMessage@temp,c
 16267                           
 16268                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 16269  003F12  6A1B               	clrf	ECANReceiveMessage@i,c
 16270  003F14  D00D               	goto	l9605
 16271  003F16                     l9597:
 16272                           
 16273                           ;ECAN.c: 969: *data++ = *ptr++;
 16274  003F16  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 16275  003F1A  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 16276  003F1E  5015               	movf	ECANReceiveMessage@data,w,c
 16277  003F20  6EE1               	movwf	fsr1l,c
 16278  003F22  6AE2               	clrf	fsr1h,c
 16279  003F24  CFDF FFE7          	movff	indf2,indf1
 16280  003F28  4A1E               	infsnz	ECANReceiveMessage@ptr,f,c
 16281  003F2A  2A1F               	incf	ECANReceiveMessage@ptr+1,f,c
 16282  003F2C  2A15               	incf	ECANReceiveMessage@data,f,c
 16283  003F2E  2A1B               	incf	ECANReceiveMessage@i,f,c
 16284  003F30                     l9605:
 16285  003F30  501D               	movf	ECANReceiveMessage@temp,w,c
 16286  003F32  5C1B               	subwf	ECANReceiveMessage@i,w,c
 16287  003F34  E3F0               	bnc	l9597
 16288                           
 16289                           ;ECAN.c: 972: if ( IRXIF )
 16290  003F36  AE77               	btfss	3959,7,c	;volatile
 16291  003F38  D006               	goto	l9611
 16292                           
 16293                           ;ECAN.c: 973: {
 16294                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 16295  003F3A  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16296  003F3C  6ED9               	movwf	fsr2l,c
 16297  003F3E  6ADA               	clrf	fsr2h,c
 16298  003F40  0E00               	movlw	0
 16299  003F42  88DB               	bsf	plusw2,4,c
 16300                           
 16301                           ;ECAN.c: 975: IRXIF = 0;
 16302  003F44  9E77               	bcf	3959,7,c	;volatile
 16303  003F46                     l9611:
 16304                           
 16305                           ;ECAN.c: 976: }
 16306                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 16307  003F46  C018  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 16308  003F4A  C019  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 16309  003F4E  0E7F               	movlw	127
 16310  003F50  16DF               	andwf	indf2,f,c
 16311                           
 16312                           ;ECAN.c: 983: if ( mode == 0x80 )
 16313  003F52  501C               	movf	ECANReceiveMessage@mode,w,c
 16314  003F54  0A80               	xorlw	128
 16315  003F56  B4D8               	btfsc	status,2,c
 16316                           
 16317                           ;ECAN.c: 984: FIFOEMPTY = 0;
 16318  003F58  9E71               	bcf	3953,7,c	;volatile
 16319                           
 16320                           ;ECAN.c: 990: return TRUE;
 16321  003F5A  0C01               	retlw	1
 16322  003F5C                     __end_of_ECANReceiveMessage:
 16323                           	opt stack 0
 16324  003F5C                     PL74:
 16325                           	opt stack 24
 16326  003F5C  501E               	movf	ECANReceiveMessage@ptr,w,c
 16327  003F5E  26D9               	addwf	fsr2l,f,c
 16328  003F60  501F               	movf	ECANReceiveMessage@ptr+1,w,c
 16329  003F62  22DA               	addwfc	fsr2h,f,c
 16330  003F64  50DF               	movf	indf2,w,c
 16331  003F66  6E1D               	movwf	ECANReceiveMessage@temp,c
 16332  003F68  0012               	return	
 16333  003F6A                     __end_ofPL74:
 16334                           	opt stack 0
 16335                           tblptru	equ	0xFF8
 16336                           tblptrh	equ	0xFF7
 16337                           tblptrl	equ	0xFF6
 16338                           tablat	equ	0xFF5
 16339                           prodh	equ	0xFF4
 16340                           prodl	equ	0xFF3
 16341                           intcon	equ	0xFF2
 16342                           postinc0	equ	0xFEE
 16343                           wreg	equ	0xFE8
 16344                           indf1	equ	0xFE7
 16345                           postdec1	equ	0xFE5
 16346                           fsr1h	equ	0xFE2
 16347                           fsr1l	equ	0xFE1
 16348                           indf2	equ	0xFDF
 16349                           postinc2	equ	0xFDE
 16350                           postdec2	equ	0xFDD
 16351                           plusw2	equ	0xFDB
 16352                           fsr2h	equ	0xFDA
 16353                           fsr2l	equ	0xFD9
 16354                           status	equ	0xFD8
 16355                           
 16356 ;; *************** function __RegsToCANID *****************
 16357 ;; Defined at:
 16358 ;;		line 1156 in file "../ECAN.c"
 16359 ;; Parameters:    Size  Location     Type
 16360 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 16361 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16362 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16363 ;;  val             1   15[COMRAM] PTR unsigned long 
 16364 ;;		 -> getVSCPFrame@id(4), 
 16365 ;;  type            1   16[COMRAM] unsigned char 
 16366 ;; Auto vars:     Size  Location     Type
 16367 ;;  Value           1   19[COMRAM] PTR struct _CAN_MESSAGE_
 16368 ;;		 -> getVSCPFrame@id(4), 
 16369 ;; Return value:  Size  Location     Type
 16370 ;;		None               void
 16371 ;; Registers used:
 16372 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16373 ;; Tracked objects:
 16374 ;;		On entry : 0/0
 16375 ;;		On exit  : 0/0
 16376 ;;		Unchanged: 0/0
 16377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16378 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16379 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16380 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16381 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16382 ;;Total ram usage:        7 bytes
 16383 ;; Hardware stack levels used:    1
 16384 ;; Hardware stack levels required when called:    2
 16385 ;; This function calls:
 16386 ;;		Nothing
 16387 ;; This function is called by:
 16388 ;;		_ECANReceiveMessage
 16389 ;; This function uses a non-reentrant model
 16390 ;;
 16391                           
 16392                           	psect	text78
 16393  0046E6                     __ptext78:
 16394                           	opt stack 0
 16395  0046E6                     __RegsToCANID:
 16396                           	opt stack 24
 16397                           
 16398                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 16399                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 16400                           
 16401                           ;incstack = 0
 16402                           ;incstack = 0
 16403  0046E6  C010  F014         	movff	__RegsToCANID@val,__RegsToCANID@Value
 16404                           
 16405                           ;ECAN.c: 1161: if ( type == 0 )
 16406  0046EA  6611               	tstfsz	__RegsToCANID@type,c
 16407  0046EC  D02B               	goto	l9681
 16408                           
 16409                           ;ECAN.c: 1162: {
 16410                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 16411  0046EE  5014               	movf	__RegsToCANID@Value,w,c
 16412  0046F0  6ED9               	movwf	fsr2l,c
 16413  0046F2  D862               	call	PL34	;call to abstracted procedure
 16414  0046F4  3612               	rlcf	??__RegsToCANID,f,c
 16415  0046F6  90D8               	bcf	status,0,c
 16416  0046F8  3612               	rlcf	??__RegsToCANID,f,c
 16417  0046FA  90D8               	bcf	status,0,c
 16418  0046FC  3412               	rlcf	??__RegsToCANID,w,c
 16419  0046FE  6EDF               	movwf	indf2,c
 16420                           
 16421                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 16422  004700  5014               	movf	__RegsToCANID@Value,w,c
 16423  004702  6ED9               	movwf	fsr2l,c
 16424  004704  6ADA               	clrf	fsr2h,c
 16425  004706  2AD9               	incf	fsr2l,f,c
 16426  004708  6ADA               	clrf	fsr2h,c
 16427  00470A  D873               	call	PL52	;call to abstracted procedure
 16428  00470C                     u6015:
 16429  00470C  90D8               	bcf	status,0,c
 16430  00470E  3212               	rrcf	??__RegsToCANID,f,c
 16431  004710  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 16432  004712  D7FC               	goto	u6015
 16433  004714  5012               	movf	??__RegsToCANID,w,c
 16434                           
 16435                           ;ECAN.c: 1166: ptr++;
 16436                           
 16437                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 16438  004716  D859               	call	PL36	;call to abstracted procedure
 16439  004718  0E05               	movlw	5
 16440  00471A  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 16441  00471C                     u6025:
 16442  00471C  90D8               	bcf	status,0,c
 16443  00471E  3212               	rrcf	??__RegsToCANID,f,c
 16444  004720  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 16445  004722  D7FC               	goto	u6025
 16446  004724  5014               	movf	__RegsToCANID@Value,w,c
 16447  004726  6ED9               	movwf	fsr2l,c
 16448  004728  6ADA               	clrf	fsr2h,c
 16449  00472A  5012               	movf	??__RegsToCANID,w,c
 16450  00472C  12DF               	iorwf	indf2,f,c
 16451                           
 16452                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 16453  00472E  D83D               	call	PL18	;call to abstracted procedure
 16454  004730  6ADF               	clrf	indf2,c
 16455                           
 16456                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 16457  004732  5014               	movf	__RegsToCANID@Value,w,c
 16458  004734  6ED9               	movwf	fsr2l,c
 16459  004736  6ADA               	clrf	fsr2h,c
 16460  004738  0E03               	movlw	3
 16461  00473A  26D9               	addwf	fsr2l,f,c
 16462  00473C  6ADA               	clrf	fsr2h,c
 16463  00473E  0E00               	movlw	0
 16464  004740  6EDF               	movwf	indf2,c
 16465                           
 16466                           ;ECAN.c: 1170: }
 16467  004742  0C00               	retlw	0
 16468  004744                     l9681:
 16469                           
 16470                           ;ECAN.c: 1171: else
 16471                           ;ECAN.c: 1172: {
 16472                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 16473  004744  D832               	call	PL18	;call to abstracted procedure
 16474  004746  D855               	call	PL52	;call to abstracted procedure
 16475  004748                     u6035:
 16476  004748  90D8               	bcf	status,0,c
 16477  00474A  3612               	rlcf	??__RegsToCANID,f,c
 16478  00474C  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 16479  00474E  D7FC               	goto	u6035
 16480  004750  5012               	movf	??__RegsToCANID,w,c
 16481  004752  6EDF               	movwf	indf2,c
 16482                           
 16483                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 16484  004754  5014               	movf	__RegsToCANID@Value,w,c
 16485  004756  6ED9               	movwf	fsr2l,c
 16486  004758  6ADA               	clrf	fsr2h,c
 16487  00475A  0E03               	movlw	3
 16488  00475C  26D9               	addwf	fsr2l,f,c
 16489  00475E  D82C               	call	PL34	;call to abstracted procedure
 16490  004760  3212               	rrcf	??__RegsToCANID,f,c
 16491  004762  90D8               	bcf	status,0,c
 16492  004764  3212               	rrcf	??__RegsToCANID,f,c
 16493  004766  90D8               	bcf	status,0,c
 16494  004768  3012               	rrcf	??__RegsToCANID,w,c
 16495                           
 16496                           ;ECAN.c: 1176: ptr++;
 16497                           
 16498                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 16499  00476A  D82F               	call	PL36	;call to abstracted procedure
 16500  00476C  0E03               	movlw	3
 16501  00476E  1612               	andwf	??__RegsToCANID,f,c
 16502  004770  D81C               	call	PL18	;call to abstracted procedure
 16503  004772  5012               	movf	??__RegsToCANID,w,c
 16504  004774  12DF               	iorwf	indf2,f,c
 16505                           
 16506                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 16507  004776  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 16508  00477A  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 16509  00477E  50DF               	movf	indf2,w,c
 16510  004780  6E12               	movwf	??__RegsToCANID& (0+255),c
 16511  004782  90D8               	bcf	status,0,c
 16512  004784  3212               	rrcf	??__RegsToCANID,f,c
 16513  004786  90D8               	bcf	status,0,c
 16514  004788  3212               	rrcf	??__RegsToCANID,f,c
 16515  00478A  90D8               	bcf	status,0,c
 16516  00478C  3212               	rrcf	??__RegsToCANID,f,c
 16517  00478E  0E1C               	movlw	28
 16518  004790  1612               	andwf	??__RegsToCANID,f,c
 16519  004792  D80B               	call	PL18	;call to abstracted procedure
 16520  004794  5012               	movf	??__RegsToCANID,w,c
 16521  004796  12DF               	iorwf	indf2,f,c
 16522                           
 16523                           ;ECAN.c: 1180: ptr++;
 16524                           
 16525                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 16526  004798  D822               	call	PL46	;call to abstracted procedure
 16527  00479A  2AE1               	incf	fsr1l,f,c
 16528  00479C  6AE2               	clrf	fsr1h,c
 16529  00479E  CFDF FFE7          	movff	indf2,indf1
 16530                           
 16531                           ;ECAN.c: 1182: ptr++;
 16532                           
 16533                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 16534  0047A2  D81D               	call	PL46	;call to abstracted procedure
 16535  0047A4  CFDF FFE7          	movff	indf2,indf1
 16536  0047A8  0012               	return	
 16537  0047AA                     __end_of__RegsToCANID:
 16538                           	opt stack 0
 16539  0047AA                     PL18:
 16540                           	opt stack 24
 16541  0047AA  5014               	movf	__RegsToCANID@Value,w,c
 16542  0047AC  6ED9               	movwf	fsr2l,c
 16543  0047AE  6ADA               	clrf	fsr2h,c
 16544  0047B0  0E02               	movlw	2
 16545  0047B2  26D9               	addwf	fsr2l,f,c
 16546  0047B4  6ADA               	clrf	fsr2h,c
 16547  0047B6  0012               	return	
 16548  0047B8                     __end_ofPL18:
 16549                           	opt stack 0
 16550  0047B8                     PL34:
 16551                           	opt stack 24
 16552  0047B8  6ADA               	clrf	fsr2h,c
 16553  0047BA  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 16554  0047BE  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 16555  0047C2  50E7               	movf	indf1,w,c
 16556  0047C4  6E12               	movwf	??__RegsToCANID& (0+255),c
 16557  0047C6  90D8               	bcf	status,0,c
 16558  0047C8  0012               	return	
 16559  0047CA                     __end_ofPL34:
 16560                           	opt stack 0
 16561  0047CA                     PL36:
 16562                           	opt stack 24
 16563  0047CA  6EDF               	movwf	indf2,c
 16564  0047CC  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 16565  0047CE  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 16566  0047D0  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 16567  0047D4  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 16568  0047D8  50DF               	movf	indf2,w,c
 16569  0047DA  6E12               	movwf	??__RegsToCANID& (0+255),c
 16570  0047DC  0012               	return	
 16571  0047DE                     __end_ofPL36:
 16572                           	opt stack 0
 16573  0047DE                     PL46:
 16574                           	opt stack 24
 16575  0047DE  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 16576  0047E0  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 16577  0047E2  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 16578  0047E6  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 16579  0047EA  5014               	movf	__RegsToCANID@Value,w,c
 16580  0047EC  6EE1               	movwf	fsr1l,c
 16581  0047EE  6AE2               	clrf	fsr1h,c
 16582  0047F0  0012               	return	
 16583  0047F2                     __end_ofPL46:
 16584                           	opt stack 0
 16585  0047F2                     PL52:
 16586                           	opt stack 24
 16587  0047F2  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 16588  0047F6  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 16589  0047FA  50E7               	movf	indf1,w,c
 16590  0047FC  6E12               	movwf	??__RegsToCANID& (0+255),c
 16591  0047FE  0E05               	movlw	5
 16592  004800  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 16593  004802  0C05               	retlw	5
 16594  004804                     __end_ofPL52:
 16595                           	opt stack 0
 16596                           tblptru	equ	0xFF8
 16597                           tblptrh	equ	0xFF7
 16598                           tblptrl	equ	0xFF6
 16599                           tablat	equ	0xFF5
 16600                           prodh	equ	0xFF4
 16601                           prodl	equ	0xFF3
 16602                           intcon	equ	0xFF2
 16603                           postinc0	equ	0xFEE
 16604                           wreg	equ	0xFE8
 16605                           indf1	equ	0xFE7
 16606                           postdec1	equ	0xFE5
 16607                           fsr1h	equ	0xFE2
 16608                           fsr1l	equ	0xFE1
 16609                           indf2	equ	0xFDF
 16610                           postinc2	equ	0xFDE
 16611                           postdec2	equ	0xFDD
 16612                           plusw2	equ	0xFDB
 16613                           fsr2h	equ	0xFDA
 16614                           fsr2l	equ	0xFD9
 16615                           status	equ	0xFD8
 16616                           
 16617 ;; *************** function __ECANPointBuffer *****************
 16618 ;; Defined at:
 16619 ;;		line 1207 in file "../ECAN.c"
 16620 ;; Parameters:    Size  Location     Type
 16621 ;;  b               1    wreg     unsigned char 
 16622 ;; Auto vars:     Size  Location     Type
 16623 ;;  b               1   16[COMRAM] unsigned char 
 16624 ;;  pt              2   17[COMRAM] PTR unsigned char 
 16625 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16626 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16627 ;; Return value:  Size  Location     Type
 16628 ;;                  2   13[COMRAM] PTR unsigned char 
 16629 ;; Registers used:
 16630 ;;		wreg, status,2, status,0
 16631 ;; Tracked objects:
 16632 ;;		On entry : F/0
 16633 ;;		On exit  : 0/0
 16634 ;;		Unchanged: 0/0
 16635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16636 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16637 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16639 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16640 ;;Total ram usage:        6 bytes
 16641 ;; Hardware stack levels used:    1
 16642 ;; Hardware stack levels required when called:    2
 16643 ;; This function calls:
 16644 ;;		Nothing
 16645 ;; This function is called by:
 16646 ;;		_ECANReceiveMessage
 16647 ;; This function uses a non-reentrant model
 16648 ;;
 16649                           
 16650                           	psect	text79
 16651  005592                     __ptext79:
 16652                           	opt stack 0
 16653  005592                     __ECANPointBuffer:
 16654                           	opt stack 24
 16655                           
 16656                           ;incstack = 0
 16657                           ;incstack = 0
 16658                           ;__ECANPointBuffer@b stored from wreg
 16659  005592  CFE8 F011          	movff	wreg,__ECANPointBuffer@b
 16660                           
 16661                           ; BSR set to: 0
 16662                           ;ECAN.c: 1208: BYTE* pt;
 16663                           ;ECAN.c: 1210: switch(b)
 16664  005596  D028               	goto	l9667
 16665  005598                     l9649:
 16666                           
 16667                           ; BSR set to: 0
 16668                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 16669  005598  0E0F               	movlw	15	;volatile
 16670  00559A  6E13               	movwf	__ECANPointBuffer@pt+1,c
 16671  00559C  0E60               	movlw	96	;volatile
 16672  00559E  D022               	goto	L45
 16673  0055A0                     l9651:
 16674                           
 16675                           ; BSR set to: 0
 16676                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 16677  0055A0  010F               	movlb	15	; () banked
 16678  0055A2  0E0F               	movlw	15	;volatile
 16679  0055A4  6E13               	movwf	__ECANPointBuffer@pt+1,c
 16680  0055A6  0E30               	movlw	48	;volatile
 16681  0055A8  D01D               	goto	L45
 16682  0055AA                     l9653:
 16683                           
 16684                           ; BSR set to: 0
 16685                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 16686  0055AA  010E               	movlb	14	; () banked
 16687  0055AC  0E0E               	movlw	14	;volatile
 16688  0055AE  6E13               	movwf	__ECANPointBuffer@pt+1,c
 16689  0055B0  0E80               	movlw	128	;volatile
 16690  0055B2  D018               	goto	L45
 16691  0055B4                     l9655:
 16692                           
 16693                           ; BSR set to: 0
 16694                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 16695  0055B4  010E               	movlb	14	; () banked
 16696  0055B6  0E0E               	movlw	14	;volatile
 16697  0055B8  6E13               	movwf	__ECANPointBuffer@pt+1,c
 16698  0055BA  0E90               	movlw	144	;volatile
 16699  0055BC  D013               	goto	L45
 16700  0055BE                     l9657:
 16701                           
 16702                           ; BSR set to: 0
 16703                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 16704  0055BE  010E               	movlb	14	; () banked
 16705  0055C0  0E0E               	movlw	14	;volatile
 16706  0055C2  6E13               	movwf	__ECANPointBuffer@pt+1,c
 16707  0055C4  0EA0               	movlw	160	;volatile
 16708  0055C6  D00E               	goto	L45
 16709  0055C8                     l9659:
 16710                           
 16711                           ; BSR set to: 0
 16712                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 16713  0055C8  010E               	movlb	14	; () banked
 16714  0055CA  0E0E               	movlw	14	;volatile
 16715  0055CC  6E13               	movwf	__ECANPointBuffer@pt+1,c
 16716  0055CE  0EB0               	movlw	176	;volatile
 16717  0055D0  D009               	goto	L45
 16718  0055D2                     l9661:
 16719                           
 16720                           ; BSR set to: 0
 16721                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 16722  0055D2  010E               	movlb	14	; () banked
 16723  0055D4  0E0E               	movlw	14	;volatile
 16724  0055D6  6E13               	movwf	__ECANPointBuffer@pt+1,c
 16725  0055D8  0EC0               	movlw	192	;volatile
 16726  0055DA  D004               	goto	L45
 16727  0055DC                     l9663:
 16728                           
 16729                           ; BSR set to: 0
 16730                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 16731  0055DC  010E               	movlb	14	; () banked
 16732  0055DE  0E0E               	movlw	14	;volatile
 16733  0055E0  6E13               	movwf	__ECANPointBuffer@pt+1,c
 16734  0055E2  0ED0               	movlw	208	;volatile
 16735  0055E4                     L45:
 16736  0055E4  6E12               	movwf	__ECANPointBuffer@pt,c
 16737                           
 16738                           ;ECAN.c: 1235: break;
 16739  0055E6  D00F               	goto	l901
 16740  0055E8                     l9667:
 16741                           
 16742                           ; BSR set to: 0
 16743  0055E8  5011               	movf	__ECANPointBuffer@b,w,c
 16744                           
 16745                           ; Switch size 1, requested type "space"
 16746                           ; Number of cases is 7, Range of values is 0 to 6
 16747                           ; switch strategies available:
 16748                           ; Name         Instructions Cycles
 16749                           ; simple_byte           22    12 (average)
 16750                           ;	Chosen strategy is simple_byte
 16751  0055EA  E0D6               	bz	l9649
 16752  0055EC  0A01               	xorlw	1	; case 1
 16753  0055EE  E0D8               	bz	l9651
 16754  0055F0  0A03               	xorlw	3	; case 2
 16755  0055F2  E0DB               	bz	l9653
 16756  0055F4  0A01               	xorlw	1	; case 3
 16757  0055F6  E0DE               	bz	l9655
 16758  0055F8  0A07               	xorlw	7	; case 4
 16759  0055FA  E0E1               	bz	l9657
 16760  0055FC  0A01               	xorlw	1	; case 5
 16761  0055FE  E0E4               	bz	l9659
 16762  005600  0A03               	xorlw	3	; case 6
 16763  005602  E0E7               	bz	l9661
 16764  005604  D7EB               	goto	l9663
 16765  005606                     l901:
 16766                           
 16767                           ;ECAN.c: 1237: return (pt);
 16768  005606  C012  F00E         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 16769  00560A  C013  F00F         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 16770  00560E  0012               	return	
 16771  005610                     __end_of__ECANPointBuffer:
 16772                           	opt stack 0
 16773                           tblptru	equ	0xFF8
 16774                           tblptrh	equ	0xFF7
 16775                           tblptrl	equ	0xFF6
 16776                           tablat	equ	0xFF5
 16777                           prodh	equ	0xFF4
 16778                           prodl	equ	0xFF3
 16779                           intcon	equ	0xFF2
 16780                           postinc0	equ	0xFEE
 16781                           wreg	equ	0xFE8
 16782                           indf1	equ	0xFE7
 16783                           postdec1	equ	0xFE5
 16784                           fsr1h	equ	0xFE2
 16785                           fsr1l	equ	0xFE1
 16786                           indf2	equ	0xFDF
 16787                           postinc2	equ	0xFDE
 16788                           postdec2	equ	0xFDD
 16789                           plusw2	equ	0xFDB
 16790                           fsr2h	equ	0xFDA
 16791                           fsr2l	equ	0xFD9
 16792                           status	equ	0xFD8
 16793                           
 16794 ;; *************** function _vscp_check_pstorage *****************
 16795 ;; Defined at:
 16796 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 16797 ;; Parameters:    Size  Location     Type
 16798 ;;		None
 16799 ;; Auto vars:     Size  Location     Type
 16800 ;;		None
 16801 ;; Return value:  Size  Location     Type
 16802 ;;                  1    wreg      unsigned char 
 16803 ;; Registers used:
 16804 ;;		wreg, status,2, status,0, cstack
 16805 ;; Tracked objects:
 16806 ;;		On entry : 0/0
 16807 ;;		On exit  : 0/0
 16808 ;;		Unchanged: 0/0
 16809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16814 ;;Total ram usage:        0 bytes
 16815 ;; Hardware stack levels used:    1
 16816 ;; Hardware stack levels required when called:    5
 16817 ;; This function calls:
 16818 ;;		_vscp_writeNicknamePermanent
 16819 ;;		_vscp_setControlByte
 16820 ;;		_vscp_getControlByte
 16821 ;;		_vscp_init_pstorage
 16822 ;; This function is called by:
 16823 ;;		_main
 16824 ;; This function uses a non-reentrant model
 16825 ;;
 16826                           
 16827                           	psect	text80
 16828  005C04                     __ptext80:
 16829                           	opt stack 0
 16830  005C04                     _vscp_check_pstorage:
 16831                           	opt stack 25
 16832                           
 16833                           ;vscp_firmware.c: 170: if ( ( 0x55 ==
 16834                           ;vscp_firmware.c: 171: vscp_getControlByte( 0 ) ) &&
 16835                           ;vscp_firmware.c: 172: ( 0xAA ==
 16836                           ;vscp_firmware.c: 173: vscp_getControlByte( 1 ) ) ) {
 16837                           
 16838                           ;incstack = 0
 16839                           ;incstack = 0
 16840  005C04  0E00               	movlw	0
 16841  005C06  ECA7  F02F         	call	_vscp_getControlByte
 16842  005C0A  0A55               	xorlw	85
 16843  005C0C  E106               	bnz	l10755
 16844  005C0E  0E01               	movlw	1
 16845  005C10  ECA7  F02F         	call	_vscp_getControlByte
 16846  005C14  0AAA               	xorlw	170
 16847  005C16  E101               	bnz	l10755
 16848                           
 16849                           ;vscp_firmware.c: 174: return !0;
 16850  005C18  0C01               	retlw	1
 16851  005C1A                     l10755:
 16852                           
 16853                           ;vscp_firmware.c: 175: }
 16854                           ;vscp_firmware.c: 178: vscp_init_pstorage();
 16855  005C1A  EC42  F030         	call	_vscp_init_pstorage	;wreg free
 16856                           
 16857                           ;vscp_firmware.c: 181: vscp_writeNicknamePermanent( 0xff );
 16858  005C1E  0EFF               	movlw	255
 16859  005C20  ECE5  F02F         	call	_vscp_writeNicknamePermanent
 16860                           
 16861                           ;vscp_firmware.c: 184: vscp_setControlByte( 0,
 16862                           ;vscp_firmware.c: 185: 0x55 );
 16863  005C24  0E55               	movlw	85
 16864  005C26  6E12               	movwf	?_vscp_setControlByte,c
 16865  005C28  0E00               	movlw	0
 16866  005C2A  EC2F  F02F         	call	_vscp_setControlByte
 16867                           
 16868                           ;vscp_firmware.c: 186: vscp_setControlByte( 1,
 16869                           ;vscp_firmware.c: 187: 0xAA );
 16870  005C2E  0EAA               	movlw	170
 16871  005C30  6E12               	movwf	?_vscp_setControlByte,c
 16872  005C32  0E01               	movlw	1
 16873  005C34  EC2F  F02F         	call	_vscp_setControlByte
 16874                           
 16875                           ;vscp_firmware.c: 189: return 0;
 16876  005C38  0C00               	retlw	0
 16877  005C3A                     __end_of_vscp_check_pstorage:
 16878                           	opt stack 0
 16879                           tblptru	equ	0xFF8
 16880                           tblptrh	equ	0xFF7
 16881                           tblptrl	equ	0xFF6
 16882                           tablat	equ	0xFF5
 16883                           prodh	equ	0xFF4
 16884                           prodl	equ	0xFF3
 16885                           intcon	equ	0xFF2
 16886                           postinc0	equ	0xFEE
 16887                           wreg	equ	0xFE8
 16888                           indf1	equ	0xFE7
 16889                           postdec1	equ	0xFE5
 16890                           fsr1h	equ	0xFE2
 16891                           fsr1l	equ	0xFE1
 16892                           indf2	equ	0xFDF
 16893                           postinc2	equ	0xFDE
 16894                           postdec2	equ	0xFDD
 16895                           plusw2	equ	0xFDB
 16896                           fsr2h	equ	0xFDA
 16897                           fsr2l	equ	0xFD9
 16898                           status	equ	0xFD8
 16899                           
 16900 ;; *************** function _vscp_init_pstorage *****************
 16901 ;; Defined at:
 16902 ;;		line 2873 in file "../main.c"
 16903 ;; Parameters:    Size  Location     Type
 16904 ;;		None
 16905 ;; Auto vars:     Size  Location     Type
 16906 ;;		None
 16907 ;; Return value:  Size  Location     Type
 16908 ;;		None               void
 16909 ;; Registers used:
 16910 ;;		wreg, status,2, status,0, cstack
 16911 ;; Tracked objects:
 16912 ;;		On entry : 0/0
 16913 ;;		On exit  : 0/0
 16914 ;;		Unchanged: 0/0
 16915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16920 ;;Total ram usage:        0 bytes
 16921 ;; Hardware stack levels used:    1
 16922 ;; Hardware stack levels required when called:    4
 16923 ;; This function calls:
 16924 ;;		_init_app_eeprom
 16925 ;; This function is called by:
 16926 ;;		_vscp_check_pstorage
 16927 ;; This function uses a non-reentrant model
 16928 ;;
 16929                           
 16930                           	psect	text81
 16931  006084                     __ptext81:
 16932                           	opt stack 0
 16933  006084                     _vscp_init_pstorage:
 16934                           	opt stack 25
 16935                           
 16936                           ;main.c: 2874: init_app_eeprom();
 16937                           
 16938                           ;incstack = 0
 16939                           ;incstack = 0
 16940  006084  EFDD  F012         	goto	_init_app_eeprom	;wreg free
 16941  006088                     __end_of_vscp_init_pstorage:
 16942                           	opt stack 0
 16943                           tblptru	equ	0xFF8
 16944                           tblptrh	equ	0xFF7
 16945                           tblptrl	equ	0xFF6
 16946                           tablat	equ	0xFF5
 16947                           prodh	equ	0xFF4
 16948                           prodl	equ	0xFF3
 16949                           intcon	equ	0xFF2
 16950                           postinc0	equ	0xFEE
 16951                           wreg	equ	0xFE8
 16952                           indf1	equ	0xFE7
 16953                           postdec1	equ	0xFE5
 16954                           fsr1h	equ	0xFE2
 16955                           fsr1l	equ	0xFE1
 16956                           indf2	equ	0xFDF
 16957                           postinc2	equ	0xFDE
 16958                           postdec2	equ	0xFDD
 16959                           plusw2	equ	0xFDB
 16960                           fsr2h	equ	0xFDA
 16961                           fsr2l	equ	0xFD9
 16962                           status	equ	0xFD8
 16963                           
 16964 ;; *************** function _init_app_eeprom *****************
 16965 ;; Defined at:
 16966 ;;		line 1067 in file "../main.c"
 16967 ;; Parameters:    Size  Location     Type
 16968 ;;		None
 16969 ;; Auto vars:     Size  Location     Type
 16970 ;;		None
 16971 ;; Return value:  Size  Location     Type
 16972 ;;		None               void
 16973 ;; Registers used:
 16974 ;;		wreg, status,2, status,0, cstack
 16975 ;; Tracked objects:
 16976 ;;		On entry : 0/0
 16977 ;;		On exit  : 0/0
 16978 ;;		Unchanged: 0/0
 16979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16984 ;;Total ram usage:        0 bytes
 16985 ;; Hardware stack levels used:    1
 16986 ;; Hardware stack levels required when called:    3
 16987 ;; This function calls:
 16988 ;;		_Busy_eep
 16989 ;;		_Write_b_eep
 16990 ;; This function is called by:
 16991 ;;		_main
 16992 ;;		_vscp_init_pstorage
 16993 ;;		_vscp_restoreDefaults
 16994 ;; This function uses a non-reentrant model
 16995 ;;
 16996                           
 16997                           	psect	text82
 16998  0025BA                     __ptext82:
 16999                           	opt stack 0
 17000  0025BA                     _init_app_eeprom:
 17001                           	opt stack 24
 17002                           
 17003                           ;main.c: 1069: (Busy_eep(), Write_b_eep(0x41,0));
 17004                           
 17005                           ;incstack = 0
 17006                           ;incstack = 0
 17007  0025BA  EC3D  F030         	call	_Busy_eep	;wreg free
 17008  0025BE  6A0F               	clrf	?_Write_b_eep+1,c
 17009  0025C0  0E41               	movlw	65
 17010  0025C2  6E0E               	movwf	?_Write_b_eep,c
 17011  0025C4  0E00               	movlw	0
 17012  0025C6  6A10               	clrf	?_Write_b_eep+2,c
 17013  0025C8  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17014                           
 17015                           ;main.c: 1070: (Busy_eep(), Write_b_eep(0x41,0));
 17016  0025CC  EC3D  F030         	call	_Busy_eep	;wreg free
 17017  0025D0  6A0F               	clrf	?_Write_b_eep+1,c
 17018  0025D2  0E41               	movlw	65
 17019  0025D4  6E0E               	movwf	?_Write_b_eep,c
 17020  0025D6  0E00               	movlw	0
 17021  0025D8  6A10               	clrf	?_Write_b_eep+2,c
 17022  0025DA  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17023                           
 17024                           ;main.c: 1072: (Busy_eep(), Write_b_eep(0x43,0b00000001));
 17025  0025DE  EC3D  F030         	call	_Busy_eep	;wreg free
 17026  0025E2  6A0F               	clrf	?_Write_b_eep+1,c
 17027  0025E4  0E43               	movlw	67
 17028  0025E6  6E0E               	movwf	?_Write_b_eep,c
 17029  0025E8  0E01               	movlw	1
 17030  0025EA  6E10               	movwf	?_Write_b_eep+2,c
 17031  0025EC  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17032                           
 17033                           ;main.c: 1073: (Busy_eep(), Write_b_eep(0x44,0b00000001));
 17034  0025F0  EC3D  F030         	call	_Busy_eep	;wreg free
 17035  0025F4  6A0F               	clrf	?_Write_b_eep+1,c
 17036  0025F6  0E44               	movlw	68
 17037  0025F8  6E0E               	movwf	?_Write_b_eep,c
 17038  0025FA  0E01               	movlw	1
 17039  0025FC  6E10               	movwf	?_Write_b_eep+2,c
 17040  0025FE  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17041                           
 17042                           ;main.c: 1074: (Busy_eep(), Write_b_eep(0x45,0b00000001));
 17043  002602  EC3D  F030         	call	_Busy_eep	;wreg free
 17044  002606  6A0F               	clrf	?_Write_b_eep+1,c
 17045  002608  0E45               	movlw	69
 17046  00260A  6E0E               	movwf	?_Write_b_eep,c
 17047  00260C  0E01               	movlw	1
 17048  00260E  6E10               	movwf	?_Write_b_eep+2,c
 17049  002610  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17050                           
 17051                           ;main.c: 1075: (Busy_eep(), Write_b_eep(0x46,0b00000001));
 17052  002614  EC3D  F030         	call	_Busy_eep	;wreg free
 17053  002618  6A0F               	clrf	?_Write_b_eep+1,c
 17054  00261A  0E46               	movlw	70
 17055  00261C  6E0E               	movwf	?_Write_b_eep,c
 17056  00261E  0E01               	movlw	1
 17057  002620  6E10               	movwf	?_Write_b_eep+2,c
 17058  002622  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17059                           
 17060                           ;main.c: 1076: (Busy_eep(), Write_b_eep(0x47,0b00000001));
 17061  002626  EC3D  F030         	call	_Busy_eep	;wreg free
 17062  00262A  6A0F               	clrf	?_Write_b_eep+1,c
 17063  00262C  0E47               	movlw	71
 17064  00262E  6E0E               	movwf	?_Write_b_eep,c
 17065  002630  0E01               	movlw	1
 17066  002632  6E10               	movwf	?_Write_b_eep+2,c
 17067  002634  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17068                           
 17069                           ;main.c: 1077: (Busy_eep(), Write_b_eep(0x48,0b00000001));
 17070  002638  EC3D  F030         	call	_Busy_eep	;wreg free
 17071  00263C  6A0F               	clrf	?_Write_b_eep+1,c
 17072  00263E  0E48               	movlw	72
 17073  002640  6E0E               	movwf	?_Write_b_eep,c
 17074  002642  0E01               	movlw	1
 17075  002644  6E10               	movwf	?_Write_b_eep+2,c
 17076  002646  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17077                           
 17078                           ;main.c: 1079: (Busy_eep(), Write_b_eep(0x49,30));
 17079  00264A  EC3D  F030         	call	_Busy_eep	;wreg free
 17080  00264E  6A0F               	clrf	?_Write_b_eep+1,c
 17081  002650  0E49               	movlw	73
 17082  002652  6E0E               	movwf	?_Write_b_eep,c
 17083  002654  0E1E               	movlw	30
 17084  002656  6E10               	movwf	?_Write_b_eep+2,c
 17085  002658  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17086                           
 17087                           ;main.c: 1080: (Busy_eep(), Write_b_eep(0x4A,0));
 17088  00265C  EC3D  F030         	call	_Busy_eep	;wreg free
 17089  002660  6A0F               	clrf	?_Write_b_eep+1,c
 17090  002662  0E4A               	movlw	74
 17091  002664  6E0E               	movwf	?_Write_b_eep,c
 17092  002666  0E00               	movlw	0
 17093  002668  6A10               	clrf	?_Write_b_eep+2,c
 17094  00266A  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17095                           
 17096                           ;main.c: 1081: (Busy_eep(), Write_b_eep(0x4B,0));
 17097  00266E  EC3D  F030         	call	_Busy_eep	;wreg free
 17098  002672  6A0F               	clrf	?_Write_b_eep+1,c
 17099  002674  0E4B               	movlw	75
 17100  002676  6E0E               	movwf	?_Write_b_eep,c
 17101  002678  0E00               	movlw	0
 17102  00267A  6A10               	clrf	?_Write_b_eep+2,c
 17103  00267C  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17104                           
 17105                           ;main.c: 1082: (Busy_eep(), Write_b_eep(0x4C,0));
 17106  002680  EC3D  F030         	call	_Busy_eep	;wreg free
 17107  002684  6A0F               	clrf	?_Write_b_eep+1,c
 17108  002686  0E4C               	movlw	76
 17109  002688  6E0E               	movwf	?_Write_b_eep,c
 17110  00268A  0E00               	movlw	0
 17111  00268C  6A10               	clrf	?_Write_b_eep+2,c
 17112  00268E  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17113                           
 17114                           ;main.c: 1083: (Busy_eep(), Write_b_eep(0x4D,0));
 17115  002692  EC3D  F030         	call	_Busy_eep	;wreg free
 17116  002696  6A0F               	clrf	?_Write_b_eep+1,c
 17117  002698  0E4D               	movlw	77
 17118  00269A  6E0E               	movwf	?_Write_b_eep,c
 17119  00269C  0E00               	movlw	0
 17120  00269E  6A10               	clrf	?_Write_b_eep+2,c
 17121  0026A0  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17122                           
 17123                           ;main.c: 1084: (Busy_eep(), Write_b_eep(0x4E,0));
 17124  0026A4  EC3D  F030         	call	_Busy_eep	;wreg free
 17125  0026A8  6A0F               	clrf	?_Write_b_eep+1,c
 17126  0026AA  0E4E               	movlw	78
 17127  0026AC  6E0E               	movwf	?_Write_b_eep,c
 17128  0026AE  0E00               	movlw	0
 17129  0026B0  6A10               	clrf	?_Write_b_eep+2,c
 17130  0026B2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17131                           
 17132                           ;main.c: 1088: (Busy_eep(), Write_b_eep(0x4F,0x0F));
 17133  0026B6  EC3D  F030         	call	_Busy_eep	;wreg free
 17134  0026BA  6A0F               	clrf	?_Write_b_eep+1,c
 17135  0026BC  0E4F               	movlw	79
 17136  0026BE  6E0E               	movwf	?_Write_b_eep,c
 17137  0026C0  0E0F               	movlw	15
 17138  0026C2  6E10               	movwf	?_Write_b_eep+2,c
 17139  0026C4  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17140                           
 17141                           ;main.c: 1089: (Busy_eep(), Write_b_eep(0x50,0x68));
 17142  0026C8  EC3D  F030         	call	_Busy_eep	;wreg free
 17143  0026CC  6A0F               	clrf	?_Write_b_eep+1,c
 17144  0026CE  0E50               	movlw	80
 17145  0026D0  6E0E               	movwf	?_Write_b_eep,c
 17146  0026D2  0E68               	movlw	104
 17147  0026D4  6E10               	movwf	?_Write_b_eep+2,c
 17148  0026D6  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17149                           
 17150                           ;main.c: 1091: (Busy_eep(), Write_b_eep(0x51,0x0D));
 17151  0026DA  EC3D  F030         	call	_Busy_eep	;wreg free
 17152  0026DE  6A0F               	clrf	?_Write_b_eep+1,c
 17153  0026E0  0E51               	movlw	81
 17154  0026E2  6E0E               	movwf	?_Write_b_eep,c
 17155  0026E4  0E0D               	movlw	13
 17156  0026E6  6E10               	movwf	?_Write_b_eep+2,c
 17157  0026E8  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17158                           
 17159                           ;main.c: 1092: (Busy_eep(), Write_b_eep(0x52,0x7F));
 17160  0026EC  EC3D  F030         	call	_Busy_eep	;wreg free
 17161  0026F0  6A0F               	clrf	?_Write_b_eep+1,c
 17162  0026F2  0E52               	movlw	82
 17163  0026F4  6E0E               	movwf	?_Write_b_eep,c
 17164  0026F6  0E7F               	movlw	127
 17165  0026F8  6E10               	movwf	?_Write_b_eep+2,c
 17166  0026FA  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17167                           
 17168                           ;main.c: 1094: (Busy_eep(), Write_b_eep(0x53,0x0D));
 17169  0026FE  EC3D  F030         	call	_Busy_eep	;wreg free
 17170  002702  6A0F               	clrf	?_Write_b_eep+1,c
 17171  002704  0E53               	movlw	83
 17172  002706  6E0E               	movwf	?_Write_b_eep,c
 17173  002708  0E0D               	movlw	13
 17174  00270A  6E10               	movwf	?_Write_b_eep+2,c
 17175  00270C  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17176                           
 17177                           ;main.c: 1095: (Busy_eep(), Write_b_eep(0x54,0x7F));
 17178  002710  EC3D  F030         	call	_Busy_eep	;wreg free
 17179  002714  6A0F               	clrf	?_Write_b_eep+1,c
 17180  002716  0E54               	movlw	84
 17181  002718  6E0E               	movwf	?_Write_b_eep,c
 17182  00271A  0E7F               	movlw	127
 17183  00271C  6E10               	movwf	?_Write_b_eep+2,c
 17184  00271E  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17185                           
 17186                           ;main.c: 1097: (Busy_eep(), Write_b_eep(0x55,0x0D));
 17187  002722  EC3D  F030         	call	_Busy_eep	;wreg free
 17188  002726  6A0F               	clrf	?_Write_b_eep+1,c
 17189  002728  0E55               	movlw	85
 17190  00272A  6E0E               	movwf	?_Write_b_eep,c
 17191  00272C  0E0D               	movlw	13
 17192  00272E  6E10               	movwf	?_Write_b_eep+2,c
 17193  002730  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17194                           
 17195                           ;main.c: 1098: (Busy_eep(), Write_b_eep(0x56,0x7F));
 17196  002734  EC3D  F030         	call	_Busy_eep	;wreg free
 17197  002738  6A0F               	clrf	?_Write_b_eep+1,c
 17198  00273A  0E56               	movlw	86
 17199  00273C  6E0E               	movwf	?_Write_b_eep,c
 17200  00273E  0E7F               	movlw	127
 17201  002740  6E10               	movwf	?_Write_b_eep+2,c
 17202  002742  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17203                           
 17204                           ;main.c: 1100: (Busy_eep(), Write_b_eep(0x57,0x0D));
 17205  002746  EC3D  F030         	call	_Busy_eep	;wreg free
 17206  00274A  6A0F               	clrf	?_Write_b_eep+1,c
 17207  00274C  0E57               	movlw	87
 17208  00274E  6E0E               	movwf	?_Write_b_eep,c
 17209  002750  0E0D               	movlw	13
 17210  002752  6E10               	movwf	?_Write_b_eep+2,c
 17211  002754  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17212                           
 17213                           ;main.c: 1101: (Busy_eep(), Write_b_eep(0x58,0x7F));
 17214  002758  EC3D  F030         	call	_Busy_eep	;wreg free
 17215  00275C  6A0F               	clrf	?_Write_b_eep+1,c
 17216  00275E  0E58               	movlw	88
 17217  002760  6E0E               	movwf	?_Write_b_eep,c
 17218  002762  0E7F               	movlw	127
 17219  002764  6E10               	movwf	?_Write_b_eep+2,c
 17220  002766  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17221                           
 17222                           ;main.c: 1103: (Busy_eep(), Write_b_eep(0x59,0x0D));
 17223  00276A  EC3D  F030         	call	_Busy_eep	;wreg free
 17224  00276E  6A0F               	clrf	?_Write_b_eep+1,c
 17225  002770  0E59               	movlw	89
 17226  002772  6E0E               	movwf	?_Write_b_eep,c
 17227  002774  0E0D               	movlw	13
 17228  002776  6E10               	movwf	?_Write_b_eep+2,c
 17229  002778  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17230                           
 17231                           ;main.c: 1104: (Busy_eep(), Write_b_eep(0x5A,0x7F));
 17232  00277C  EC3D  F030         	call	_Busy_eep	;wreg free
 17233  002780  6A0F               	clrf	?_Write_b_eep+1,c
 17234  002782  0E5A               	movlw	90
 17235  002784  6E0E               	movwf	?_Write_b_eep,c
 17236  002786  0E7F               	movlw	127
 17237  002788  6E10               	movwf	?_Write_b_eep+2,c
 17238  00278A  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17239                           
 17240                           ;main.c: 1108: (Busy_eep(), Write_b_eep(0x5B,0x80));
 17241  00278E  EC3D  F030         	call	_Busy_eep	;wreg free
 17242  002792  6A0F               	clrf	?_Write_b_eep+1,c
 17243  002794  0E5B               	movlw	91
 17244  002796  6E0E               	movwf	?_Write_b_eep,c
 17245  002798  0E80               	movlw	128
 17246  00279A  6E10               	movwf	?_Write_b_eep+2,c
 17247  00279C  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17248                           
 17249                           ;main.c: 1109: (Busy_eep(), Write_b_eep(0x5C,0xff));
 17250  0027A0  EC3D  F030         	call	_Busy_eep	;wreg free
 17251  0027A4  6A0F               	clrf	?_Write_b_eep+1,c
 17252  0027A6  0E5C               	movlw	92
 17253  0027A8  6E0E               	movwf	?_Write_b_eep,c
 17254  0027AA  0EFF               	movlw	255
 17255  0027AC  6810               	setf	?_Write_b_eep+2,c
 17256  0027AE  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17257                           
 17258                           ;main.c: 1111: (Busy_eep(), Write_b_eep(0x5D,0x80));
 17259  0027B2  EC3D  F030         	call	_Busy_eep	;wreg free
 17260  0027B6  6A0F               	clrf	?_Write_b_eep+1,c
 17261  0027B8  0E5D               	movlw	93
 17262  0027BA  6E0E               	movwf	?_Write_b_eep,c
 17263  0027BC  0E80               	movlw	128
 17264  0027BE  6E10               	movwf	?_Write_b_eep+2,c
 17265  0027C0  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17266                           
 17267                           ;main.c: 1112: (Busy_eep(), Write_b_eep(0x5E,0xff));
 17268  0027C4  EC3D  F030         	call	_Busy_eep	;wreg free
 17269  0027C8  6A0F               	clrf	?_Write_b_eep+1,c
 17270  0027CA  0E5E               	movlw	94
 17271  0027CC  6E0E               	movwf	?_Write_b_eep,c
 17272  0027CE  0EFF               	movlw	255
 17273  0027D0  6810               	setf	?_Write_b_eep+2,c
 17274  0027D2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17275                           
 17276                           ;main.c: 1114: (Busy_eep(), Write_b_eep(0x5F,0x80));
 17277  0027D6  EC3D  F030         	call	_Busy_eep	;wreg free
 17278  0027DA  6A0F               	clrf	?_Write_b_eep+1,c
 17279  0027DC  0E5F               	movlw	95
 17280  0027DE  6E0E               	movwf	?_Write_b_eep,c
 17281  0027E0  0E80               	movlw	128
 17282  0027E2  6E10               	movwf	?_Write_b_eep+2,c
 17283  0027E4  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17284                           
 17285                           ;main.c: 1115: (Busy_eep(), Write_b_eep(0x60,0xff));
 17286  0027E8  EC3D  F030         	call	_Busy_eep	;wreg free
 17287  0027EC  6A0F               	clrf	?_Write_b_eep+1,c
 17288  0027EE  0E60               	movlw	96
 17289  0027F0  6E0E               	movwf	?_Write_b_eep,c
 17290  0027F2  0EFF               	movlw	255
 17291  0027F4  6810               	setf	?_Write_b_eep+2,c
 17292  0027F6  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17293                           
 17294                           ;main.c: 1117: (Busy_eep(), Write_b_eep(0x61,0x80));
 17295  0027FA  EC3D  F030         	call	_Busy_eep	;wreg free
 17296  0027FE  6A0F               	clrf	?_Write_b_eep+1,c
 17297  002800  0E61               	movlw	97
 17298  002802  6E0E               	movwf	?_Write_b_eep,c
 17299  002804  0E80               	movlw	128
 17300  002806  6E10               	movwf	?_Write_b_eep+2,c
 17301  002808  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17302                           
 17303                           ;main.c: 1118: (Busy_eep(), Write_b_eep(0x62,0xff));
 17304  00280C  EC3D  F030         	call	_Busy_eep	;wreg free
 17305  002810  6A0F               	clrf	?_Write_b_eep+1,c
 17306  002812  0E62               	movlw	98
 17307  002814  6E0E               	movwf	?_Write_b_eep,c
 17308  002816  0EFF               	movlw	255
 17309  002818  6810               	setf	?_Write_b_eep+2,c
 17310  00281A  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17311                           
 17312                           ;main.c: 1120: (Busy_eep(), Write_b_eep(0x63,0x80));
 17313  00281E  EC3D  F030         	call	_Busy_eep	;wreg free
 17314  002822  6A0F               	clrf	?_Write_b_eep+1,c
 17315  002824  0E63               	movlw	99
 17316  002826  6E0E               	movwf	?_Write_b_eep,c
 17317  002828  0E80               	movlw	128
 17318  00282A  6E10               	movwf	?_Write_b_eep+2,c
 17319  00282C  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17320                           
 17321                           ;main.c: 1121: (Busy_eep(), Write_b_eep(0x64,0xff));
 17322  002830  EC3D  F030         	call	_Busy_eep	;wreg free
 17323  002834  6A0F               	clrf	?_Write_b_eep+1,c
 17324  002836  0E64               	movlw	100
 17325  002838  6E0E               	movwf	?_Write_b_eep,c
 17326  00283A  0EFF               	movlw	255
 17327  00283C  6810               	setf	?_Write_b_eep+2,c
 17328  00283E  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17329                           
 17330                           ;main.c: 1123: (Busy_eep(), Write_b_eep(0x65,0x80));
 17331  002842  EC3D  F030         	call	_Busy_eep	;wreg free
 17332  002846  6A0F               	clrf	?_Write_b_eep+1,c
 17333  002848  0E65               	movlw	101
 17334  00284A  6E0E               	movwf	?_Write_b_eep,c
 17335  00284C  0E80               	movlw	128
 17336  00284E  6E10               	movwf	?_Write_b_eep+2,c
 17337  002850  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17338                           
 17339                           ;main.c: 1124: (Busy_eep(), Write_b_eep(0x66,0xff));
 17340  002854  EC3D  F030         	call	_Busy_eep	;wreg free
 17341  002858  6A0F               	clrf	?_Write_b_eep+1,c
 17342  00285A  0E66               	movlw	102
 17343  00285C  6E0E               	movwf	?_Write_b_eep,c
 17344  00285E  0EFF               	movlw	255
 17345  002860  6810               	setf	?_Write_b_eep+2,c
 17346  002862  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17347                           
 17348                           ;main.c: 1128: (Busy_eep(), Write_b_eep(0x67,0x7f));
 17349  002866  EC3D  F030         	call	_Busy_eep	;wreg free
 17350  00286A  6A0F               	clrf	?_Write_b_eep+1,c
 17351  00286C  0E67               	movlw	103
 17352  00286E  6E0E               	movwf	?_Write_b_eep,c
 17353  002870  0E7F               	movlw	127
 17354  002872  6E10               	movwf	?_Write_b_eep+2,c
 17355  002874  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17356                           
 17357                           ;main.c: 1129: (Busy_eep(), Write_b_eep(0x68,0xff));
 17358  002878  EC3D  F030         	call	_Busy_eep	;wreg free
 17359  00287C  6A0F               	clrf	?_Write_b_eep+1,c
 17360  00287E  0E68               	movlw	104
 17361  002880  6E0E               	movwf	?_Write_b_eep,c
 17362  002882  0EFF               	movlw	255
 17363  002884  6810               	setf	?_Write_b_eep+2,c
 17364  002886  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17365                           
 17366                           ;main.c: 1131: (Busy_eep(), Write_b_eep(0x69,0x7f));
 17367  00288A  EC3D  F030         	call	_Busy_eep	;wreg free
 17368  00288E  6A0F               	clrf	?_Write_b_eep+1,c
 17369  002890  0E69               	movlw	105
 17370  002892  6E0E               	movwf	?_Write_b_eep,c
 17371  002894  0E7F               	movlw	127
 17372  002896  6E10               	movwf	?_Write_b_eep+2,c
 17373  002898  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17374                           
 17375                           ;main.c: 1132: (Busy_eep(), Write_b_eep(0x6A,0xff));
 17376  00289C  EC3D  F030         	call	_Busy_eep	;wreg free
 17377  0028A0  6A0F               	clrf	?_Write_b_eep+1,c
 17378  0028A2  0E6A               	movlw	106
 17379  0028A4  6E0E               	movwf	?_Write_b_eep,c
 17380  0028A6  0EFF               	movlw	255
 17381  0028A8  6810               	setf	?_Write_b_eep+2,c
 17382  0028AA  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17383                           
 17384                           ;main.c: 1134: (Busy_eep(), Write_b_eep(0x6B,0x7f));
 17385  0028AE  EC3D  F030         	call	_Busy_eep	;wreg free
 17386  0028B2  6A0F               	clrf	?_Write_b_eep+1,c
 17387  0028B4  0E6B               	movlw	107
 17388  0028B6  6E0E               	movwf	?_Write_b_eep,c
 17389  0028B8  0E7F               	movlw	127
 17390  0028BA  6E10               	movwf	?_Write_b_eep+2,c
 17391  0028BC  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17392                           
 17393                           ;main.c: 1135: (Busy_eep(), Write_b_eep(0x6C,0xff));
 17394  0028C0  EC3D  F030         	call	_Busy_eep	;wreg free
 17395  0028C4  6A0F               	clrf	?_Write_b_eep+1,c
 17396  0028C6  0E6C               	movlw	108
 17397  0028C8  6E0E               	movwf	?_Write_b_eep,c
 17398  0028CA  0EFF               	movlw	255
 17399  0028CC  6810               	setf	?_Write_b_eep+2,c
 17400  0028CE  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17401                           
 17402                           ;main.c: 1137: (Busy_eep(), Write_b_eep(0x6D,0x7f));
 17403  0028D2  EC3D  F030         	call	_Busy_eep	;wreg free
 17404  0028D6  6A0F               	clrf	?_Write_b_eep+1,c
 17405  0028D8  0E6D               	movlw	109
 17406  0028DA  6E0E               	movwf	?_Write_b_eep,c
 17407  0028DC  0E7F               	movlw	127
 17408  0028DE  6E10               	movwf	?_Write_b_eep+2,c
 17409  0028E0  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17410                           
 17411                           ;main.c: 1138: (Busy_eep(), Write_b_eep(0x6E,0xff));
 17412  0028E4  EC3D  F030         	call	_Busy_eep	;wreg free
 17413  0028E8  6A0F               	clrf	?_Write_b_eep+1,c
 17414  0028EA  0E6E               	movlw	110
 17415  0028EC  6E0E               	movwf	?_Write_b_eep,c
 17416  0028EE  0EFF               	movlw	255
 17417  0028F0  6810               	setf	?_Write_b_eep+2,c
 17418  0028F2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17419                           
 17420                           ;main.c: 1140: (Busy_eep(), Write_b_eep(0x6F,0x7f));
 17421  0028F6  EC3D  F030         	call	_Busy_eep	;wreg free
 17422  0028FA  6A0F               	clrf	?_Write_b_eep+1,c
 17423  0028FC  0E6F               	movlw	111
 17424  0028FE  6E0E               	movwf	?_Write_b_eep,c
 17425  002900  0E7F               	movlw	127
 17426  002902  6E10               	movwf	?_Write_b_eep+2,c
 17427  002904  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17428                           
 17429                           ;main.c: 1141: (Busy_eep(), Write_b_eep(0x70,0xff));
 17430  002908  EC3D  F030         	call	_Busy_eep	;wreg free
 17431  00290C  6A0F               	clrf	?_Write_b_eep+1,c
 17432  00290E  0E70               	movlw	112
 17433  002910  6E0E               	movwf	?_Write_b_eep,c
 17434  002912  0EFF               	movlw	255
 17435  002914  6810               	setf	?_Write_b_eep+2,c
 17436  002916  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17437                           
 17438                           ;main.c: 1143: (Busy_eep(), Write_b_eep(0x71,0x7f));
 17439  00291A  EC3D  F030         	call	_Busy_eep	;wreg free
 17440  00291E  6A0F               	clrf	?_Write_b_eep+1,c
 17441  002920  0E71               	movlw	113
 17442  002922  6E0E               	movwf	?_Write_b_eep,c
 17443  002924  0E7F               	movlw	127
 17444  002926  6E10               	movwf	?_Write_b_eep+2,c
 17445  002928  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17446                           
 17447                           ;main.c: 1144: (Busy_eep(), Write_b_eep(0x72,0xff));
 17448  00292C  EC3D  F030         	call	_Busy_eep	;wreg free
 17449  002930  6A0F               	clrf	?_Write_b_eep+1,c
 17450  002932  0E72               	movlw	114
 17451  002934  6E0E               	movwf	?_Write_b_eep,c
 17452  002936  0EFF               	movlw	255
 17453  002938  6810               	setf	?_Write_b_eep+2,c
 17454  00293A  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17455                           
 17456                           ;main.c: 1148: (Busy_eep(), Write_b_eep(0x73,0));
 17457  00293E  EC3D  F030         	call	_Busy_eep	;wreg free
 17458  002942  6A0F               	clrf	?_Write_b_eep+1,c
 17459  002944  0E73               	movlw	115
 17460  002946  6E0E               	movwf	?_Write_b_eep,c
 17461  002948  0E00               	movlw	0
 17462  00294A  6A10               	clrf	?_Write_b_eep+2,c
 17463  00294C  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17464                           
 17465                           ;main.c: 1149: (Busy_eep(), Write_b_eep(0x74,0));
 17466  002950  EC3D  F030         	call	_Busy_eep	;wreg free
 17467  002954  6A0F               	clrf	?_Write_b_eep+1,c
 17468  002956  0E74               	movlw	116
 17469  002958  6E0E               	movwf	?_Write_b_eep,c
 17470  00295A  0E00               	movlw	0
 17471  00295C  6A10               	clrf	?_Write_b_eep+2,c
 17472  00295E  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17473                           
 17474                           ;main.c: 1151: (Busy_eep(), Write_b_eep(0x75,0));
 17475  002962  EC3D  F030         	call	_Busy_eep	;wreg free
 17476  002966  6A0F               	clrf	?_Write_b_eep+1,c
 17477  002968  0E75               	movlw	117
 17478  00296A  6E0E               	movwf	?_Write_b_eep,c
 17479  00296C  0E00               	movlw	0
 17480  00296E  6A10               	clrf	?_Write_b_eep+2,c
 17481  002970  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17482                           
 17483                           ;main.c: 1152: (Busy_eep(), Write_b_eep(0x76,0));
 17484  002974  EC3D  F030         	call	_Busy_eep	;wreg free
 17485  002978  6A0F               	clrf	?_Write_b_eep+1,c
 17486  00297A  0E76               	movlw	118
 17487  00297C  6E0E               	movwf	?_Write_b_eep,c
 17488  00297E  0E00               	movlw	0
 17489  002980  6A10               	clrf	?_Write_b_eep+2,c
 17490  002982  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17491                           
 17492                           ;main.c: 1154: (Busy_eep(), Write_b_eep(0x77,0));
 17493  002986  EC3D  F030         	call	_Busy_eep	;wreg free
 17494  00298A  6A0F               	clrf	?_Write_b_eep+1,c
 17495  00298C  0E77               	movlw	119
 17496  00298E  6E0E               	movwf	?_Write_b_eep,c
 17497  002990  0E00               	movlw	0
 17498  002992  6A10               	clrf	?_Write_b_eep+2,c
 17499  002994  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17500                           
 17501                           ;main.c: 1155: (Busy_eep(), Write_b_eep(0x78,0));
 17502  002998  EC3D  F030         	call	_Busy_eep	;wreg free
 17503  00299C  6A0F               	clrf	?_Write_b_eep+1,c
 17504  00299E  0E78               	movlw	120
 17505  0029A0  6E0E               	movwf	?_Write_b_eep,c
 17506  0029A2  0E00               	movlw	0
 17507  0029A4  6A10               	clrf	?_Write_b_eep+2,c
 17508  0029A6  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17509                           
 17510                           ;main.c: 1157: (Busy_eep(), Write_b_eep(0x79,0));
 17511  0029AA  EC3D  F030         	call	_Busy_eep	;wreg free
 17512  0029AE  6A0F               	clrf	?_Write_b_eep+1,c
 17513  0029B0  0E79               	movlw	121
 17514  0029B2  6E0E               	movwf	?_Write_b_eep,c
 17515  0029B4  0E00               	movlw	0
 17516  0029B6  6A10               	clrf	?_Write_b_eep+2,c
 17517  0029B8  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17518                           
 17519                           ;main.c: 1158: (Busy_eep(), Write_b_eep(0x7A,0));
 17520  0029BC  EC3D  F030         	call	_Busy_eep	;wreg free
 17521  0029C0  6A0F               	clrf	?_Write_b_eep+1,c
 17522  0029C2  0E7A               	movlw	122
 17523  0029C4  6E0E               	movwf	?_Write_b_eep,c
 17524  0029C6  0E00               	movlw	0
 17525  0029C8  6A10               	clrf	?_Write_b_eep+2,c
 17526  0029CA  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17527                           
 17528                           ;main.c: 1160: (Busy_eep(), Write_b_eep(0x7B,0));
 17529  0029CE  EC3D  F030         	call	_Busy_eep	;wreg free
 17530  0029D2  6A0F               	clrf	?_Write_b_eep+1,c
 17531  0029D4  0E7B               	movlw	123
 17532  0029D6  6E0E               	movwf	?_Write_b_eep,c
 17533  0029D8  0E00               	movlw	0
 17534  0029DA  6A10               	clrf	?_Write_b_eep+2,c
 17535  0029DC  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17536                           
 17537                           ;main.c: 1161: (Busy_eep(), Write_b_eep(0x7C,0));
 17538  0029E0  EC3D  F030         	call	_Busy_eep	;wreg free
 17539  0029E4  6A0F               	clrf	?_Write_b_eep+1,c
 17540  0029E6  0E7C               	movlw	124
 17541  0029E8  6E0E               	movwf	?_Write_b_eep,c
 17542  0029EA  0E00               	movlw	0
 17543  0029EC  6A10               	clrf	?_Write_b_eep+2,c
 17544  0029EE  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17545                           
 17546                           ;main.c: 1163: (Busy_eep(), Write_b_eep(0x7D,0));
 17547  0029F2  EC3D  F030         	call	_Busy_eep	;wreg free
 17548  0029F6  6A0F               	clrf	?_Write_b_eep+1,c
 17549  0029F8  0E7D               	movlw	125
 17550  0029FA  6E0E               	movwf	?_Write_b_eep,c
 17551  0029FC  0E00               	movlw	0
 17552  0029FE  6A10               	clrf	?_Write_b_eep+2,c
 17553  002A00  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17554                           
 17555                           ;main.c: 1164: (Busy_eep(), Write_b_eep(0x7E,0));
 17556  002A04  EC3D  F030         	call	_Busy_eep	;wreg free
 17557  002A08  6A0F               	clrf	?_Write_b_eep+1,c
 17558  002A0A  0E7E               	movlw	126
 17559  002A0C  6E0E               	movwf	?_Write_b_eep,c
 17560  002A0E  0E00               	movlw	0
 17561  002A10  6A10               	clrf	?_Write_b_eep+2,c
 17562  002A12  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17563                           
 17564                           ;main.c: 1168: (Busy_eep(), Write_b_eep(0x7F,0x7f));
 17565  002A16  EC3D  F030         	call	_Busy_eep	;wreg free
 17566  002A1A  6A0F               	clrf	?_Write_b_eep+1,c
 17567  002A1C  0E7F               	movlw	127
 17568  002A1E  6E0E               	movwf	?_Write_b_eep,c
 17569  002A20  6E10               	movwf	?_Write_b_eep+2,c
 17570  002A22  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17571                           
 17572                           ;main.c: 1169: (Busy_eep(), Write_b_eep(0x80,0xff));
 17573  002A26  EC3D  F030         	call	_Busy_eep	;wreg free
 17574  002A2A  6A0F               	clrf	?_Write_b_eep+1,c
 17575  002A2C  0E80               	movlw	128
 17576  002A2E  6E0E               	movwf	?_Write_b_eep,c
 17577  002A30  0EFF               	movlw	255
 17578  002A32  6810               	setf	?_Write_b_eep+2,c
 17579  002A34  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17580                           
 17581                           ;main.c: 1171: (Busy_eep(), Write_b_eep(0x81,0x7f));
 17582  002A38  EC3D  F030         	call	_Busy_eep	;wreg free
 17583  002A3C  6A0F               	clrf	?_Write_b_eep+1,c
 17584  002A3E  0E81               	movlw	129
 17585  002A40  6E0E               	movwf	?_Write_b_eep,c
 17586  002A42  0E7F               	movlw	127
 17587  002A44  6E10               	movwf	?_Write_b_eep+2,c
 17588  002A46  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17589                           
 17590                           ;main.c: 1172: (Busy_eep(), Write_b_eep(0x82,0xff));
 17591  002A4A  EC3D  F030         	call	_Busy_eep	;wreg free
 17592  002A4E  6A0F               	clrf	?_Write_b_eep+1,c
 17593  002A50  0E82               	movlw	130
 17594  002A52  6E0E               	movwf	?_Write_b_eep,c
 17595  002A54  0EFF               	movlw	255
 17596  002A56  6810               	setf	?_Write_b_eep+2,c
 17597  002A58  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17598                           
 17599                           ;main.c: 1174: (Busy_eep(), Write_b_eep(0x83,0x7f));
 17600  002A5C  EC3D  F030         	call	_Busy_eep	;wreg free
 17601  002A60  6A0F               	clrf	?_Write_b_eep+1,c
 17602  002A62  0E83               	movlw	131
 17603  002A64  6E0E               	movwf	?_Write_b_eep,c
 17604  002A66  0E7F               	movlw	127
 17605  002A68  6E10               	movwf	?_Write_b_eep+2,c
 17606  002A6A  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17607                           
 17608                           ;main.c: 1175: (Busy_eep(), Write_b_eep(0x84,0xff));
 17609  002A6E  EC3D  F030         	call	_Busy_eep	;wreg free
 17610  002A72  6A0F               	clrf	?_Write_b_eep+1,c
 17611  002A74  0E84               	movlw	132
 17612  002A76  6E0E               	movwf	?_Write_b_eep,c
 17613  002A78  0EFF               	movlw	255
 17614  002A7A  6810               	setf	?_Write_b_eep+2,c
 17615  002A7C  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17616                           
 17617                           ;main.c: 1177: (Busy_eep(), Write_b_eep(0x85,0x7f));
 17618  002A80  EC3D  F030         	call	_Busy_eep	;wreg free
 17619  002A84  6A0F               	clrf	?_Write_b_eep+1,c
 17620  002A86  0E85               	movlw	133
 17621  002A88  6E0E               	movwf	?_Write_b_eep,c
 17622  002A8A  0E7F               	movlw	127
 17623  002A8C  6E10               	movwf	?_Write_b_eep+2,c
 17624  002A8E  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17625                           
 17626                           ;main.c: 1178: (Busy_eep(), Write_b_eep(0x86,0xff));
 17627  002A92  EC3D  F030         	call	_Busy_eep	;wreg free
 17628  002A96  6A0F               	clrf	?_Write_b_eep+1,c
 17629  002A98  0E86               	movlw	134
 17630  002A9A  6E0E               	movwf	?_Write_b_eep,c
 17631  002A9C  0EFF               	movlw	255
 17632  002A9E  6810               	setf	?_Write_b_eep+2,c
 17633  002AA0  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17634                           
 17635                           ;main.c: 1180: (Busy_eep(), Write_b_eep(0x87,0x7f));
 17636  002AA4  EC3D  F030         	call	_Busy_eep	;wreg free
 17637  002AA8  6A0F               	clrf	?_Write_b_eep+1,c
 17638  002AAA  0E87               	movlw	135
 17639  002AAC  6E0E               	movwf	?_Write_b_eep,c
 17640  002AAE  0E7F               	movlw	127
 17641  002AB0  6E10               	movwf	?_Write_b_eep+2,c
 17642  002AB2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17643                           
 17644                           ;main.c: 1181: (Busy_eep(), Write_b_eep(0x88,0xff));
 17645  002AB6  EC3D  F030         	call	_Busy_eep	;wreg free
 17646  002ABA  6A0F               	clrf	?_Write_b_eep+1,c
 17647  002ABC  0E88               	movlw	136
 17648  002ABE  6E0E               	movwf	?_Write_b_eep,c
 17649  002AC0  0EFF               	movlw	255
 17650  002AC2  6810               	setf	?_Write_b_eep+2,c
 17651  002AC4  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17652                           
 17653                           ;main.c: 1183: (Busy_eep(), Write_b_eep(0x89,0x7f));
 17654  002AC8  EC3D  F030         	call	_Busy_eep	;wreg free
 17655  002ACC  6A0F               	clrf	?_Write_b_eep+1,c
 17656  002ACE  0E89               	movlw	137
 17657  002AD0  6E0E               	movwf	?_Write_b_eep,c
 17658  002AD2  0E7F               	movlw	127
 17659  002AD4  6E10               	movwf	?_Write_b_eep+2,c
 17660  002AD6  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17661                           
 17662                           ;main.c: 1184: (Busy_eep(), Write_b_eep(0x8A,0xff));
 17663  002ADA  EC3D  F030         	call	_Busy_eep	;wreg free
 17664  002ADE  6A0F               	clrf	?_Write_b_eep+1,c
 17665  002AE0  0E8A               	movlw	138
 17666  002AE2  6E0E               	movwf	?_Write_b_eep,c
 17667  002AE4  0EFF               	movlw	255
 17668  002AE6  6810               	setf	?_Write_b_eep+2,c
 17669  002AE8  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17670                           
 17671                           ;main.c: 1188: (Busy_eep(), Write_b_eep(0x8B,0x80));
 17672  002AEC  EC3D  F030         	call	_Busy_eep	;wreg free
 17673  002AF0  6A0F               	clrf	?_Write_b_eep+1,c
 17674  002AF2  0E8B               	movlw	139
 17675  002AF4  6E0E               	movwf	?_Write_b_eep,c
 17676  002AF6  0E80               	movlw	128
 17677  002AF8  6E10               	movwf	?_Write_b_eep+2,c
 17678  002AFA  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17679                           
 17680                           ;main.c: 1189: (Busy_eep(), Write_b_eep(0x8C,0x00));
 17681  002AFE  EC3D  F030         	call	_Busy_eep	;wreg free
 17682  002B02  6A0F               	clrf	?_Write_b_eep+1,c
 17683  002B04  0E8C               	movlw	140
 17684  002B06  6E0E               	movwf	?_Write_b_eep,c
 17685  002B08  0E00               	movlw	0
 17686  002B0A  6A10               	clrf	?_Write_b_eep+2,c
 17687  002B0C  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17688                           
 17689                           ;main.c: 1191: (Busy_eep(), Write_b_eep(0x8D,0x80));
 17690  002B10  EC3D  F030         	call	_Busy_eep	;wreg free
 17691  002B14  6A0F               	clrf	?_Write_b_eep+1,c
 17692  002B16  0E8D               	movlw	141
 17693  002B18  6E0E               	movwf	?_Write_b_eep,c
 17694  002B1A  0E80               	movlw	128
 17695  002B1C  6E10               	movwf	?_Write_b_eep+2,c
 17696  002B1E  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17697                           
 17698                           ;main.c: 1192: (Busy_eep(), Write_b_eep(0x8E,0x00));
 17699  002B22  EC3D  F030         	call	_Busy_eep	;wreg free
 17700  002B26  6A0F               	clrf	?_Write_b_eep+1,c
 17701  002B28  0E8E               	movlw	142
 17702  002B2A  6E0E               	movwf	?_Write_b_eep,c
 17703  002B2C  0E00               	movlw	0
 17704  002B2E  6A10               	clrf	?_Write_b_eep+2,c
 17705  002B30  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17706                           
 17707                           ;main.c: 1194: (Busy_eep(), Write_b_eep(0x8F,0x80));
 17708  002B34  EC3D  F030         	call	_Busy_eep	;wreg free
 17709  002B38  6A0F               	clrf	?_Write_b_eep+1,c
 17710  002B3A  0E8F               	movlw	143
 17711  002B3C  6E0E               	movwf	?_Write_b_eep,c
 17712  002B3E  0E80               	movlw	128
 17713  002B40  6E10               	movwf	?_Write_b_eep+2,c
 17714  002B42  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17715                           
 17716                           ;main.c: 1195: (Busy_eep(), Write_b_eep(0x90,0x00));
 17717  002B46  EC3D  F030         	call	_Busy_eep	;wreg free
 17718  002B4A  6A0F               	clrf	?_Write_b_eep+1,c
 17719  002B4C  0E90               	movlw	144
 17720  002B4E  6E0E               	movwf	?_Write_b_eep,c
 17721  002B50  0E00               	movlw	0
 17722  002B52  6A10               	clrf	?_Write_b_eep+2,c
 17723  002B54  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17724                           
 17725                           ;main.c: 1197: (Busy_eep(), Write_b_eep(0x91,0x80));
 17726  002B58  EC3D  F030         	call	_Busy_eep	;wreg free
 17727  002B5C  6A0F               	clrf	?_Write_b_eep+1,c
 17728  002B5E  0E91               	movlw	145
 17729  002B60  6E0E               	movwf	?_Write_b_eep,c
 17730  002B62  0E80               	movlw	128
 17731  002B64  6E10               	movwf	?_Write_b_eep+2,c
 17732  002B66  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17733                           
 17734                           ;main.c: 1198: (Busy_eep(), Write_b_eep(0x92,0x00));
 17735  002B6A  EC3D  F030         	call	_Busy_eep	;wreg free
 17736  002B6E  6A0F               	clrf	?_Write_b_eep+1,c
 17737  002B70  0E92               	movlw	146
 17738  002B72  6E0E               	movwf	?_Write_b_eep,c
 17739  002B74  0E00               	movlw	0
 17740  002B76  6A10               	clrf	?_Write_b_eep+2,c
 17741  002B78  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17742                           
 17743                           ;main.c: 1200: (Busy_eep(), Write_b_eep(0x93,0x80));
 17744  002B7C  EC3D  F030         	call	_Busy_eep	;wreg free
 17745  002B80  6A0F               	clrf	?_Write_b_eep+1,c
 17746  002B82  0E93               	movlw	147
 17747  002B84  6E0E               	movwf	?_Write_b_eep,c
 17748  002B86  0E80               	movlw	128
 17749  002B88  6E10               	movwf	?_Write_b_eep+2,c
 17750  002B8A  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17751                           
 17752                           ;main.c: 1201: (Busy_eep(), Write_b_eep(0x94,0x00));
 17753  002B8E  EC3D  F030         	call	_Busy_eep	;wreg free
 17754  002B92  6A0F               	clrf	?_Write_b_eep+1,c
 17755  002B94  0E94               	movlw	148
 17756  002B96  6E0E               	movwf	?_Write_b_eep,c
 17757  002B98  0E00               	movlw	0
 17758  002B9A  6A10               	clrf	?_Write_b_eep+2,c
 17759  002B9C  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17760                           
 17761                           ;main.c: 1203: (Busy_eep(), Write_b_eep(0x95,0x80));
 17762  002BA0  EC3D  F030         	call	_Busy_eep	;wreg free
 17763  002BA4  6A0F               	clrf	?_Write_b_eep+1,c
 17764  002BA6  0E95               	movlw	149
 17765  002BA8  6E0E               	movwf	?_Write_b_eep,c
 17766  002BAA  0E80               	movlw	128
 17767  002BAC  6E10               	movwf	?_Write_b_eep+2,c
 17768  002BAE  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17769                           
 17770                           ;main.c: 1204: (Busy_eep(), Write_b_eep(0x96,0x00));
 17771  002BB2  EC3D  F030         	call	_Busy_eep	;wreg free
 17772  002BB6  6A0F               	clrf	?_Write_b_eep+1,c
 17773  002BB8  0E96               	movlw	150
 17774  002BBA  6E0E               	movwf	?_Write_b_eep,c
 17775  002BBC  0E00               	movlw	0
 17776  002BBE  6A10               	clrf	?_Write_b_eep+2,c
 17777  002BC0  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17778                           
 17779                           ;main.c: 1208: (Busy_eep(), Write_b_eep(0x97,2));
 17780  002BC4  EC3D  F030         	call	_Busy_eep	;wreg free
 17781  002BC8  6A0F               	clrf	?_Write_b_eep+1,c
 17782  002BCA  0E97               	movlw	151
 17783  002BCC  6E0E               	movwf	?_Write_b_eep,c
 17784  002BCE  0E02               	movlw	2
 17785  002BD0  6E10               	movwf	?_Write_b_eep+2,c
 17786  002BD2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17787                           
 17788                           ;main.c: 1209: (Busy_eep(), Write_b_eep(0x98,2));
 17789  002BD6  EC3D  F030         	call	_Busy_eep	;wreg free
 17790  002BDA  6A0F               	clrf	?_Write_b_eep+1,c
 17791  002BDC  0E98               	movlw	152
 17792  002BDE  6E0E               	movwf	?_Write_b_eep,c
 17793  002BE0  0E02               	movlw	2
 17794  002BE2  6E10               	movwf	?_Write_b_eep+2,c
 17795  002BE4  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17796                           
 17797                           ;main.c: 1210: (Busy_eep(), Write_b_eep(0x99,2));
 17798  002BE8  EC3D  F030         	call	_Busy_eep	;wreg free
 17799  002BEC  6A0F               	clrf	?_Write_b_eep+1,c
 17800  002BEE  0E99               	movlw	153
 17801  002BF0  6E0E               	movwf	?_Write_b_eep,c
 17802  002BF2  0E02               	movlw	2
 17803  002BF4  6E10               	movwf	?_Write_b_eep+2,c
 17804  002BF6  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17805                           
 17806                           ;main.c: 1211: (Busy_eep(), Write_b_eep(0x9A,2));
 17807  002BFA  EC3D  F030         	call	_Busy_eep	;wreg free
 17808  002BFE  6A0F               	clrf	?_Write_b_eep+1,c
 17809  002C00  0E9A               	movlw	154
 17810  002C02  6E0E               	movwf	?_Write_b_eep,c
 17811  002C04  0E02               	movlw	2
 17812  002C06  6E10               	movwf	?_Write_b_eep+2,c
 17813  002C08  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17814                           
 17815                           ;main.c: 1212: (Busy_eep(), Write_b_eep(0x9B,2));
 17816  002C0C  EC3D  F030         	call	_Busy_eep	;wreg free
 17817  002C10  6A0F               	clrf	?_Write_b_eep+1,c
 17818  002C12  0E9B               	movlw	155
 17819  002C14  6E0E               	movwf	?_Write_b_eep,c
 17820  002C16  0E02               	movlw	2
 17821  002C18  6E10               	movwf	?_Write_b_eep+2,c
 17822  002C1A  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17823                           
 17824                           ;main.c: 1213: (Busy_eep(), Write_b_eep(0x9C,2));
 17825  002C1E  EC3D  F030         	call	_Busy_eep	;wreg free
 17826  002C22  6A0F               	clrf	?_Write_b_eep+1,c
 17827  002C24  0E9C               	movlw	156
 17828  002C26  6E0E               	movwf	?_Write_b_eep,c
 17829  002C28  0E02               	movlw	2
 17830  002C2A  6E10               	movwf	?_Write_b_eep+2,c
 17831  002C2C  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17832                           
 17833                           ;main.c: 1217: (Busy_eep(), Write_b_eep(0xF2,0xc3));
 17834  002C30  EC3D  F030         	call	_Busy_eep	;wreg free
 17835  002C34  6A0F               	clrf	?_Write_b_eep+1,c
 17836  002C36  0EF2               	movlw	242
 17837  002C38  6E0E               	movwf	?_Write_b_eep,c
 17838  002C3A  0EC3               	movlw	195
 17839  002C3C  6E10               	movwf	?_Write_b_eep+2,c
 17840  002C3E  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17841                           
 17842                           ;main.c: 1218: (Busy_eep(), Write_b_eep(0xF3,0x50));
 17843  002C42  EC3D  F030         	call	_Busy_eep	;wreg free
 17844  002C46  6A0F               	clrf	?_Write_b_eep+1,c
 17845  002C48  0EF3               	movlw	243
 17846  002C4A  6E0E               	movwf	?_Write_b_eep,c
 17847  002C4C  0E50               	movlw	80
 17848  002C4E  6E10               	movwf	?_Write_b_eep+2,c
 17849  002C50  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17850                           
 17851                           ;main.c: 1222: (Busy_eep(), Write_b_eep(0x9E,0));
 17852  002C54  EC3D  F030         	call	_Busy_eep	;wreg free
 17853  002C58  6A0F               	clrf	?_Write_b_eep+1,c
 17854  002C5A  0E9E               	movlw	158
 17855  002C5C  6E0E               	movwf	?_Write_b_eep,c
 17856  002C5E  0E00               	movlw	0
 17857  002C60  6A10               	clrf	?_Write_b_eep+2,c
 17858  002C62  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17859                           
 17860                           ;main.c: 1223: (Busy_eep(), Write_b_eep(0x9F,0));
 17861  002C66  EC3D  F030         	call	_Busy_eep	;wreg free
 17862  002C6A  6A0F               	clrf	?_Write_b_eep+1,c
 17863  002C6C  0E9F               	movlw	159
 17864  002C6E  6E0E               	movwf	?_Write_b_eep,c
 17865  002C70  0E00               	movlw	0
 17866  002C72  6A10               	clrf	?_Write_b_eep+2,c
 17867  002C74  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17868                           
 17869                           ;main.c: 1224: (Busy_eep(), Write_b_eep(0xA0,0));
 17870  002C78  EC3D  F030         	call	_Busy_eep	;wreg free
 17871  002C7C  6A0F               	clrf	?_Write_b_eep+1,c
 17872  002C7E  0EA0               	movlw	160
 17873  002C80  6E0E               	movwf	?_Write_b_eep,c
 17874  002C82  0E00               	movlw	0
 17875  002C84  6A10               	clrf	?_Write_b_eep+2,c
 17876  002C86  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17877                           
 17878                           ;main.c: 1225: (Busy_eep(), Write_b_eep(0xA1,0));
 17879  002C8A  EC3D  F030         	call	_Busy_eep	;wreg free
 17880  002C8E  6A0F               	clrf	?_Write_b_eep+1,c
 17881  002C90  0EA1               	movlw	161
 17882  002C92  6E0E               	movwf	?_Write_b_eep,c
 17883  002C94  0E00               	movlw	0
 17884  002C96  6A10               	clrf	?_Write_b_eep+2,c
 17885  002C98  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17886                           
 17887                           ;main.c: 1226: (Busy_eep(), Write_b_eep(0xA2,0));
 17888  002C9C  EC3D  F030         	call	_Busy_eep	;wreg free
 17889  002CA0  6A0F               	clrf	?_Write_b_eep+1,c
 17890  002CA2  0EA2               	movlw	162
 17891  002CA4  6E0E               	movwf	?_Write_b_eep,c
 17892  002CA6  0E00               	movlw	0
 17893  002CA8  6A10               	clrf	?_Write_b_eep+2,c
 17894  002CAA  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17895                           
 17896                           ;main.c: 1227: (Busy_eep(), Write_b_eep(0xA3,0));
 17897  002CAE  EC3D  F030         	call	_Busy_eep	;wreg free
 17898  002CB2  6A0F               	clrf	?_Write_b_eep+1,c
 17899  002CB4  0EA3               	movlw	163
 17900  002CB6  6E0E               	movwf	?_Write_b_eep,c
 17901  002CB8  0E00               	movlw	0
 17902  002CBA  6A10               	clrf	?_Write_b_eep+2,c
 17903  002CBC  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17904                           
 17905                           ;main.c: 1228: (Busy_eep(), Write_b_eep(0xA4,0));
 17906  002CC0  EC3D  F030         	call	_Busy_eep	;wreg free
 17907  002CC4  6A0F               	clrf	?_Write_b_eep+1,c
 17908  002CC6  0EA4               	movlw	164
 17909  002CC8  6E0E               	movwf	?_Write_b_eep,c
 17910  002CCA  0E00               	movlw	0
 17911  002CCC  6A10               	clrf	?_Write_b_eep+2,c
 17912  002CCE  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17913                           
 17914                           ;main.c: 1229: (Busy_eep(), Write_b_eep(0xA5,0));
 17915  002CD2  EC3D  F030         	call	_Busy_eep	;wreg free
 17916  002CD6  6A0F               	clrf	?_Write_b_eep+1,c
 17917  002CD8  0EA5               	movlw	165
 17918  002CDA  6E0E               	movwf	?_Write_b_eep,c
 17919  002CDC  0E00               	movlw	0
 17920  002CDE  6A10               	clrf	?_Write_b_eep+2,c
 17921  002CE0  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17922                           
 17923                           ;main.c: 1230: (Busy_eep(), Write_b_eep(0xA6,0));
 17924  002CE4  EC3D  F030         	call	_Busy_eep	;wreg free
 17925  002CE8  6A0F               	clrf	?_Write_b_eep+1,c
 17926  002CEA  0EA6               	movlw	166
 17927  002CEC  6E0E               	movwf	?_Write_b_eep,c
 17928  002CEE  0E00               	movlw	0
 17929  002CF0  6A10               	clrf	?_Write_b_eep+2,c
 17930  002CF2  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17931                           
 17932                           ;main.c: 1231: (Busy_eep(), Write_b_eep(0xA7,0));
 17933  002CF6  EC3D  F030         	call	_Busy_eep	;wreg free
 17934  002CFA  6A0F               	clrf	?_Write_b_eep+1,c
 17935  002CFC  0EA7               	movlw	167
 17936  002CFE  6E0E               	movwf	?_Write_b_eep,c
 17937  002D00  0E00               	movlw	0
 17938  002D02  6A10               	clrf	?_Write_b_eep+2,c
 17939  002D04  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17940                           
 17941                           ;main.c: 1232: (Busy_eep(), Write_b_eep(0xA8,0));
 17942  002D08  EC3D  F030         	call	_Busy_eep	;wreg free
 17943  002D0C  6A0F               	clrf	?_Write_b_eep+1,c
 17944  002D0E  0EA8               	movlw	168
 17945  002D10  6E0E               	movwf	?_Write_b_eep,c
 17946  002D12  0E00               	movlw	0
 17947  002D14  6A10               	clrf	?_Write_b_eep+2,c
 17948  002D16  ECC8  F02D         	call	_Write_b_eep	;wreg free
 17949                           
 17950                           ;main.c: 1233: (Busy_eep(), Write_b_eep(0xA9,0));
 17951  002D1A  EC3D  F030         	call	_Busy_eep	;wreg free
 17952  002D1E  6A0F               	clrf	?_Write_b_eep+1,c
 17953  002D20  0EA9               	movlw	169
 17954  002D22  6E0E               	movwf	?_Write_b_eep,c
 17955  002D24  6A10               	clrf	?_Write_b_eep+2,c
 17956  002D26  EFC8  F02D         	goto	_Write_b_eep	;wreg free
 17957  002D2A                     __end_of_init_app_eeprom:
 17958                           	opt stack 0
 17959                           tblptru	equ	0xFF8
 17960                           tblptrh	equ	0xFF7
 17961                           tblptrl	equ	0xFF6
 17962                           tablat	equ	0xFF5
 17963                           prodh	equ	0xFF4
 17964                           prodl	equ	0xFF3
 17965                           intcon	equ	0xFF2
 17966                           postinc0	equ	0xFEE
 17967                           wreg	equ	0xFE8
 17968                           indf1	equ	0xFE7
 17969                           postdec1	equ	0xFE5
 17970                           fsr1h	equ	0xFE2
 17971                           fsr1l	equ	0xFE1
 17972                           indf2	equ	0xFDF
 17973                           postinc2	equ	0xFDE
 17974                           postdec2	equ	0xFDD
 17975                           plusw2	equ	0xFDB
 17976                           fsr2h	equ	0xFDA
 17977                           fsr2l	equ	0xFD9
 17978                           status	equ	0xFD8
 17979                           
 17980 ;; *************** function _vscp_getControlByte *****************
 17981 ;; Defined at:
 17982 ;;		line 2863 in file "../main.c"
 17983 ;; Parameters:    Size  Location     Type
 17984 ;;  idx             1    wreg     unsigned char 
 17985 ;; Auto vars:     Size  Location     Type
 17986 ;;  idx             1   23[COMRAM] unsigned char 
 17987 ;; Return value:  Size  Location     Type
 17988 ;;                  1    wreg      unsigned char 
 17989 ;; Registers used:
 17990 ;;		wreg, status,2, status,0, cstack
 17991 ;; Tracked objects:
 17992 ;;		On entry : 0/0
 17993 ;;		On exit  : 0/0
 17994 ;;		Unchanged: 0/0
 17995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17997 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17999 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18000 ;;Total ram usage:        1 bytes
 18001 ;; Hardware stack levels used:    1
 18002 ;; Hardware stack levels required when called:    3
 18003 ;; This function calls:
 18004 ;;		_Read_b_eep
 18005 ;; This function is called by:
 18006 ;;		_vscp_check_pstorage
 18007 ;; This function uses a non-reentrant model
 18008 ;;
 18009                           
 18010                           	psect	text83
 18011  005F4E                     __ptext83:
 18012                           	opt stack 0
 18013  005F4E                     _vscp_getControlByte:
 18014                           	opt stack 26
 18015                           
 18016                           ;incstack = 0
 18017                           ;incstack = 0
 18018                           ;vscp_getControlByte@idx stored from wreg
 18019  005F4E  CFE8 F018          	movff	wreg,vscp_getControlByte@idx
 18020                           
 18021                           ;main.c: 2864: if ( idx > 1 ) return 0;
 18022  005F52  0E01               	movlw	1
 18023  005F54  6418               	cpfsgt	vscp_getControlByte@idx,c
 18024  005F56  D001               	goto	l12589
 18025  005F58  0C00               	retlw	0
 18026  005F5A                     l12589:
 18027                           
 18028                           ;main.c: 2865: return Read_b_eep(0x03 + idx);
 18029  005F5A  0E03               	movlw	3
 18030  005F5C  2418               	addwf	vscp_getControlByte@idx,w,c
 18031  005F5E  6E16               	movwf	?_Read_b_eep,c
 18032  005F60  6A17               	clrf	?_Read_b_eep+1,c
 18033  005F62  0E00               	movlw	0
 18034  005F64  2217               	addwfc	?_Read_b_eep+1,f,c
 18035  005F66  EFC2  F02F         	goto	_Read_b_eep	;wreg free
 18036  005F6A                     __end_of_vscp_getControlByte:
 18037                           	opt stack 0
 18038                           tblptru	equ	0xFF8
 18039                           tblptrh	equ	0xFF7
 18040                           tblptrl	equ	0xFF6
 18041                           tablat	equ	0xFF5
 18042                           prodh	equ	0xFF4
 18043                           prodl	equ	0xFF3
 18044                           intcon	equ	0xFF2
 18045                           postinc0	equ	0xFEE
 18046                           wreg	equ	0xFE8
 18047                           indf1	equ	0xFE7
 18048                           postdec1	equ	0xFE5
 18049                           fsr1h	equ	0xFE2
 18050                           fsr1l	equ	0xFE1
 18051                           indf2	equ	0xFDF
 18052                           postinc2	equ	0xFDE
 18053                           postdec2	equ	0xFDD
 18054                           plusw2	equ	0xFDB
 18055                           fsr2h	equ	0xFDA
 18056                           fsr2l	equ	0xFD9
 18057                           status	equ	0xFD8
 18058                           
 18059 ;; *************** function _vscp_setControlByte *****************
 18060 ;; Defined at:
 18061 ;;		line 2852 in file "../main.c"
 18062 ;; Parameters:    Size  Location     Type
 18063 ;;  ctrl            1    wreg     unsigned char 
 18064 ;;  idx             1   17[COMRAM] unsigned char 
 18065 ;; Auto vars:     Size  Location     Type
 18066 ;;  ctrl            1   18[COMRAM] unsigned char 
 18067 ;; Return value:  Size  Location     Type
 18068 ;;		None               void
 18069 ;; Registers used:
 18070 ;;		wreg, status,2, status,0, cstack
 18071 ;; Tracked objects:
 18072 ;;		On entry : 0/0
 18073 ;;		On exit  : 0/0
 18074 ;;		Unchanged: 0/0
 18075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18076 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18077 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18079 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18080 ;;Total ram usage:        2 bytes
 18081 ;; Hardware stack levels used:    1
 18082 ;; Hardware stack levels required when called:    3
 18083 ;; This function calls:
 18084 ;;		_Busy_eep
 18085 ;;		_Write_b_eep
 18086 ;; This function is called by:
 18087 ;;		_vscp_check_pstorage
 18088 ;; This function uses a non-reentrant model
 18089 ;;
 18090                           
 18091                           	psect	text84
 18092  005E5E                     __ptext84:
 18093                           	opt stack 0
 18094  005E5E                     _vscp_setControlByte:
 18095                           	opt stack 26
 18096                           
 18097                           ;incstack = 0
 18098                           ;incstack = 0
 18099                           ;vscp_setControlByte@ctrl stored from wreg
 18100  005E5E  CFE8 F013          	movff	wreg,vscp_setControlByte@ctrl
 18101                           
 18102                           ;main.c: 2853: if ( idx > 1 ) return;
 18103  005E62  0E01               	movlw	1
 18104  005E64  6412               	cpfsgt	vscp_setControlByte@idx,c
 18105  005E66  D001               	goto	l9313
 18106  005E68  0C01               	retlw	1
 18107  005E6A                     l9313:
 18108                           
 18109                           ;main.c: 2854: (Busy_eep(), Write_b_eep(0x03 + idx,ctrl));
 18110  005E6A  EC3D  F030         	call	_Busy_eep	;wreg free
 18111  005E6E  0E03               	movlw	3
 18112  005E70  2412               	addwf	vscp_setControlByte@idx,w,c
 18113  005E72  6E0E               	movwf	?_Write_b_eep,c
 18114  005E74  6A0F               	clrf	?_Write_b_eep+1,c
 18115  005E76  0E00               	movlw	0
 18116  005E78  220F               	addwfc	?_Write_b_eep+1,f,c
 18117  005E7A  C013  F010         	movff	vscp_setControlByte@ctrl,?_Write_b_eep+2
 18118  005E7E  EFC8  F02D         	goto	_Write_b_eep	;wreg free
 18119  005E82                     __end_of_vscp_setControlByte:
 18120                           	opt stack 0
 18121                           tblptru	equ	0xFF8
 18122                           tblptrh	equ	0xFF7
 18123                           tblptrl	equ	0xFF6
 18124                           tablat	equ	0xFF5
 18125                           prodh	equ	0xFF4
 18126                           prodl	equ	0xFF3
 18127                           intcon	equ	0xFF2
 18128                           postinc0	equ	0xFEE
 18129                           wreg	equ	0xFE8
 18130                           indf1	equ	0xFE7
 18131                           postdec1	equ	0xFE5
 18132                           fsr1h	equ	0xFE2
 18133                           fsr1l	equ	0xFE1
 18134                           indf2	equ	0xFDF
 18135                           postinc2	equ	0xFDE
 18136                           postdec2	equ	0xFDD
 18137                           plusw2	equ	0xFDB
 18138                           fsr2h	equ	0xFDA
 18139                           fsr2l	equ	0xFD9
 18140                           status	equ	0xFD8
 18141                           
 18142 ;; *************** function _vscp_writeNicknamePermanent *****************
 18143 ;; Defined at:
 18144 ;;		line 2825 in file "../main.c"
 18145 ;; Parameters:    Size  Location     Type
 18146 ;;  nickname        1    wreg     unsigned char 
 18147 ;; Auto vars:     Size  Location     Type
 18148 ;;  nickname        1   17[COMRAM] unsigned char 
 18149 ;; Return value:  Size  Location     Type
 18150 ;;		None               void
 18151 ;; Registers used:
 18152 ;;		wreg, status,2, status,0, cstack
 18153 ;; Tracked objects:
 18154 ;;		On entry : 0/0
 18155 ;;		On exit  : 0/0
 18156 ;;		Unchanged: 0/0
 18157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18159 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18161 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18162 ;;Total ram usage:        1 bytes
 18163 ;; Hardware stack levels used:    1
 18164 ;; Hardware stack levels required when called:    3
 18165 ;; This function calls:
 18166 ;;		_Busy_eep
 18167 ;;		_Write_b_eep
 18168 ;; This function is called by:
 18169 ;;		_vscp_check_pstorage
 18170 ;;		_vscp_handleProbeState
 18171 ;;		_vscp_handleSetNickname
 18172 ;;		_vscp_handleDropNickname
 18173 ;; This function uses a non-reentrant model
 18174 ;;
 18175                           
 18176                           	psect	text85
 18177  005FCA                     __ptext85:
 18178                           	opt stack 0
 18179  005FCA                     _vscp_writeNicknamePermanent:
 18180                           	opt stack 25
 18181                           
 18182                           ;incstack = 0
 18183                           ;incstack = 0
 18184                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 18185  005FCA  CFE8 F012          	movff	wreg,vscp_writeNicknamePermanent@nickname
 18186                           
 18187                           ;main.c: 2826: (Busy_eep(), Write_b_eep(0x01,nickname));
 18188  005FCE  EC3D  F030         	call	_Busy_eep	;wreg free
 18189  005FD2  6A0F               	clrf	?_Write_b_eep+1,c
 18190  005FD4  0E01               	movlw	1
 18191  005FD6  6E0E               	movwf	?_Write_b_eep,c
 18192  005FD8  C012  F010         	movff	vscp_writeNicknamePermanent@nickname,?_Write_b_eep+2
 18193  005FDC  EFC8  F02D         	goto	_Write_b_eep	;wreg free
 18194  005FE0                     __end_of_vscp_writeNicknamePermanent:
 18195                           	opt stack 0
 18196                           tblptru	equ	0xFF8
 18197                           tblptrh	equ	0xFF7
 18198                           tblptrl	equ	0xFF6
 18199                           tablat	equ	0xFF5
 18200                           prodh	equ	0xFF4
 18201                           prodl	equ	0xFF3
 18202                           intcon	equ	0xFF2
 18203                           postinc0	equ	0xFEE
 18204                           wreg	equ	0xFE8
 18205                           indf1	equ	0xFE7
 18206                           postdec1	equ	0xFE5
 18207                           fsr1h	equ	0xFE2
 18208                           fsr1l	equ	0xFE1
 18209                           indf2	equ	0xFDF
 18210                           postinc2	equ	0xFDE
 18211                           postdec2	equ	0xFDD
 18212                           plusw2	equ	0xFDB
 18213                           fsr2h	equ	0xFDA
 18214                           fsr2l	equ	0xFD9
 18215                           status	equ	0xFD8
 18216                           
 18217 ;; *************** function _Write_b_eep *****************
 18218 ;; Defined at:
 18219 ;;		line 50 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/EEP/write_B.c"
 18220 ;; Parameters:    Size  Location     Type
 18221 ;;  badd            2   13[COMRAM] unsigned int 
 18222 ;;  bdat            1   15[COMRAM] unsigned char 
 18223 ;; Auto vars:     Size  Location     Type
 18224 ;;  GIE_BIT_VAL     1   16[COMRAM] unsigned char 
 18225 ;; Return value:  Size  Location     Type
 18226 ;;		None               void
 18227 ;; Registers used:
 18228 ;;		wreg, status,2, status,0
 18229 ;; Tracked objects:
 18230 ;;		On entry : 0/0
 18231 ;;		On exit  : 0/0
 18232 ;;		Unchanged: 0/0
 18233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18234 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18235 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18237 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18238 ;;Total ram usage:        4 bytes
 18239 ;; Hardware stack levels used:    1
 18240 ;; Hardware stack levels required when called:    2
 18241 ;; This function calls:
 18242 ;;		Nothing
 18243 ;; This function is called by:
 18244 ;;		_main
 18245 ;;		_doOneSecondWork
 18246 ;;		_init_app_eeprom
 18247 ;;		_vscp_writeAppReg
 18248 ;;		_vscp_setGUID
 18249 ;;		_vscp_setUserID
 18250 ;;		_vscp_setManufacturerId
 18251 ;;		_vscp_goBootloaderMode
 18252 ;;		_vscp_writeNicknamePermanent
 18253 ;;		_vscp_setControlByte
 18254 ;; This function uses a non-reentrant model
 18255 ;;
 18256                           
 18257                           	psect	text86
 18258  005B90                     __ptext86:
 18259                           	opt stack 0
 18260  005B90                     _Write_b_eep:
 18261                           	opt stack 27
 18262                           
 18263                           ;incstack = 0
 18264                           ;incstack = 0
 18265  005B90  500F               	movf	Write_b_eep@badd+1,w,c
 18266  005B92  0B03               	andlw	3
 18267  005B94  6E75               	movwf	3957,c	;volatile
 18268  005B96  C00E  FF74         	movff	Write_b_eep@badd,3956	;volatile
 18269  005B9A  C010  FF73         	movff	Write_b_eep@bdat,3955	;volatile
 18270  005B9E  9E7F               	bcf	3967,7,c	;volatile
 18271  005BA0  9C7F               	bcf	3967,6,c	;volatile
 18272  005BA2  847F               	bsf	3967,2,c	;volatile
 18273  005BA4  0E00               	movlw	0
 18274  005BA6  BEF2               	btfsc	intcon,7,c	;volatile
 18275  005BA8  0E01               	movlw	1
 18276  005BAA  6E11               	movwf	Write_b_eep@GIE_BIT_VAL,c
 18277  005BAC  9EF2               	bcf	intcon,7,c	;volatile
 18278  005BAE  0E55               	movlw	85
 18279  005BB0  6E7E               	movwf	3966,c	;volatile
 18280  005BB2  0EAA               	movlw	170
 18281  005BB4  6E7E               	movwf	3966,c	;volatile
 18282  005BB6  827F               	bsf	3967,1,c	;volatile
 18283  005BB8                     l1322:
 18284  005BB8  B27F               	btfsc	3967,1,c	;volatile
 18285  005BBA  D7FE               	goto	l1322
 18286  005BBC  B011               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 18287  005BBE  D002               	bra	u3865
 18288  005BC0  9EF2               	bcf	intcon,7,c	;volatile
 18289  005BC2  D001               	bra	u3866
 18290  005BC4                     u3865:
 18291  005BC4  8EF2               	bsf	intcon,7,c	;volatile
 18292  005BC6                     u3866:
 18293  005BC6  947F               	bcf	3967,2,c	;volatile
 18294  005BC8  0012               	return	
 18295  005BCA                     __end_of_Write_b_eep:
 18296                           	opt stack 0
 18297                           tblptru	equ	0xFF8
 18298                           tblptrh	equ	0xFF7
 18299                           tblptrl	equ	0xFF6
 18300                           tablat	equ	0xFF5
 18301                           prodh	equ	0xFF4
 18302                           prodl	equ	0xFF3
 18303                           intcon	equ	0xFF2
 18304                           postinc0	equ	0xFEE
 18305                           wreg	equ	0xFE8
 18306                           indf1	equ	0xFE7
 18307                           postdec1	equ	0xFE5
 18308                           fsr1h	equ	0xFE2
 18309                           fsr1l	equ	0xFE1
 18310                           indf2	equ	0xFDF
 18311                           postinc2	equ	0xFDE
 18312                           postdec2	equ	0xFDD
 18313                           plusw2	equ	0xFDB
 18314                           fsr2h	equ	0xFDA
 18315                           fsr2l	equ	0xFD9
 18316                           status	equ	0xFD8
 18317                           
 18318 ;; *************** function _Busy_eep *****************
 18319 ;; Defined at:
 18320 ;;		line 13 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/EEP/busy_eep.c"
 18321 ;; Parameters:    Size  Location     Type
 18322 ;;		None
 18323 ;; Auto vars:     Size  Location     Type
 18324 ;;		None
 18325 ;; Return value:  Size  Location     Type
 18326 ;;		None               void
 18327 ;; Registers used:
 18328 ;;		None
 18329 ;; Tracked objects:
 18330 ;;		On entry : 0/0
 18331 ;;		On exit  : 0/0
 18332 ;;		Unchanged: 0/0
 18333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18338 ;;Total ram usage:        0 bytes
 18339 ;; Hardware stack levels used:    1
 18340 ;; Hardware stack levels required when called:    2
 18341 ;; This function calls:
 18342 ;;		Nothing
 18343 ;; This function is called by:
 18344 ;;		_main
 18345 ;;		_doOneSecondWork
 18346 ;;		_init_app_eeprom
 18347 ;;		_vscp_writeAppReg
 18348 ;;		_vscp_setGUID
 18349 ;;		_vscp_setUserID
 18350 ;;		_vscp_setManufacturerId
 18351 ;;		_vscp_goBootloaderMode
 18352 ;;		_vscp_writeNicknamePermanent
 18353 ;;		_vscp_setControlByte
 18354 ;; This function uses a non-reentrant model
 18355 ;;
 18356                           
 18357                           	psect	text87
 18358  00607A                     __ptext87:
 18359                           	opt stack 0
 18360  00607A                     _Busy_eep:
 18361                           	opt stack 27
 18362  00607A                     l1293:
 18363  00607A  A27F               	btfss	3967,1,c	;volatile
 18364  00607C  0012               	return	
 18365  00607E  D7FD               	goto	l1293
 18366  006080                     __end_of_Busy_eep:
 18367                           	opt stack 0
 18368                           tblptru	equ	0xFF8
 18369                           tblptrh	equ	0xFF7
 18370                           tblptrl	equ	0xFF6
 18371                           tablat	equ	0xFF5
 18372                           prodh	equ	0xFF4
 18373                           prodl	equ	0xFF3
 18374                           intcon	equ	0xFF2
 18375                           postinc0	equ	0xFEE
 18376                           wreg	equ	0xFE8
 18377                           indf1	equ	0xFE7
 18378                           postdec1	equ	0xFE5
 18379                           fsr1h	equ	0xFE2
 18380                           fsr1l	equ	0xFE1
 18381                           indf2	equ	0xFDF
 18382                           postinc2	equ	0xFDE
 18383                           postdec2	equ	0xFDD
 18384                           plusw2	equ	0xFDB
 18385                           fsr2h	equ	0xFDA
 18386                           fsr2l	equ	0xFD9
 18387                           status	equ	0xFD8
 18388                           
 18389 ;; *************** function _init *****************
 18390 ;; Defined at:
 18391 ;;		line 926 in file "../main.c"
 18392 ;; Parameters:    Size  Location     Type
 18393 ;;		None
 18394 ;; Auto vars:     Size  Location     Type
 18395 ;;		None
 18396 ;; Return value:  Size  Location     Type
 18397 ;;		None               void
 18398 ;; Registers used:
 18399 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 18400 ;; Tracked objects:
 18401 ;;		On entry : 0/0
 18402 ;;		On exit  : 0/0
 18403 ;;		Unchanged: 0/0
 18404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18409 ;;Total ram usage:        0 bytes
 18410 ;; Hardware stack levels used:    1
 18411 ;; Hardware stack levels required when called:    4
 18412 ;; This function calls:
 18413 ;;		_WriteTimer0
 18414 ;;		_ConvertADC
 18415 ;;		_init_app_ram
 18416 ;;		_OpenTimer0
 18417 ;;		_OpenADC
 18418 ;;		_ECANInitialize
 18419 ;; This function is called by:
 18420 ;;		_main
 18421 ;; This function uses a non-reentrant model
 18422 ;;
 18423                           
 18424                           	psect	text88
 18425  005B54                     __ptext88:
 18426                           	opt stack 0
 18427  005B54                     _init:
 18428                           	opt stack 26
 18429                           
 18430                           ;main.c: 930: init_app_ram();
 18431                           
 18432                           ;incstack = 0
 18433                           ;incstack = 0
 18434  005B54  EC6D  F02D         	call	_init_app_ram	;wreg free
 18435                           
 18436                           ; BSR set to: 0
 18437                           ;main.c: 938: TRISA = 0x07;
 18438  005B58  0E07               	movlw	7
 18439  005B5A  6E92               	movwf	3986,c	;volatile
 18440                           
 18441                           ; BSR set to: 0
 18442                           ;main.c: 949: TRISB = 0x1B;
 18443  005B5C  0E1B               	movlw	27
 18444  005B5E  6E93               	movwf	3987,c	;volatile
 18445                           
 18446                           ; BSR set to: 0
 18447                           ;main.c: 959: TRISC = 0x01;
 18448  005B60  0E01               	movlw	1
 18449  005B62  6E94               	movwf	3988,c	;volatile
 18450                           
 18451                           ; BSR set to: 0
 18452                           ;main.c: 960: PORTC = 0x00;
 18453  005B64  6A82               	clrf	3970,c	;volatile
 18454                           
 18455                           ; BSR set to: 0
 18456                           ;main.c: 962: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 18457  005B66  0E92               	movlw	146
 18458  005B68  EC6E  F02F         	call	_OpenTimer0
 18459                           
 18460                           ; BSR set to: 0
 18461                           ;main.c: 963: WriteTimer0(0xfb1d);
 18462  005B6C  0EFB               	movlw	251
 18463  005B6E  6E0F               	movwf	?_WriteTimer0+1,c
 18464  005B70  0E1D               	movlw	29
 18465  005B72  6E0E               	movwf	?_WriteTimer0,c
 18466  005B74  EC0E  F030         	call	_WriteTimer0	;wreg free
 18467                           
 18468                           ; BSR set to: 0
 18469                           ;main.c: 971: OpenADC(0b11101111 & 0b11111111 & 0b11111111,
 18470                           ;main.c: 972: 0b10000011 & 0b11111111,
 18471                           ;main.c: 973: 15);
 18472  005B78  0E83               	movlw	131
 18473  005B7A  6E0E               	movwf	?_OpenADC,c
 18474  005B7C  0E0F               	movlw	15
 18475  005B7E  6E0F               	movwf	?_OpenADC+1,c
 18476  005B80  0EEF               	movlw	239
 18477  005B82  EC9E  F02C         	call	_OpenADC
 18478                           
 18479                           ; BSR set to: 0
 18480                           ;main.c: 978: ECANInitialize();
 18481  005B86  ECFD  F029         	call	_ECANInitialize	;wreg free
 18482                           
 18483                           ;main.c: 1002: INTCONbits.GIE = 1;
 18484  005B8A  8EF2               	bsf	intcon,7,c	;volatile
 18485                           
 18486                           ;main.c: 1004: ConvertADC();
 18487  005B8C  EF44  F030         	goto	_ConvertADC	;wreg free
 18488  005B90                     __end_of_init:
 18489                           	opt stack 0
 18490                           tblptru	equ	0xFF8
 18491                           tblptrh	equ	0xFF7
 18492                           tblptrl	equ	0xFF6
 18493                           tablat	equ	0xFF5
 18494                           prodh	equ	0xFF4
 18495                           prodl	equ	0xFF3
 18496                           intcon	equ	0xFF2
 18497                           postinc0	equ	0xFEE
 18498                           wreg	equ	0xFE8
 18499                           indf1	equ	0xFE7
 18500                           postdec1	equ	0xFE5
 18501                           fsr1h	equ	0xFE2
 18502                           fsr1l	equ	0xFE1
 18503                           indf2	equ	0xFDF
 18504                           postinc2	equ	0xFDE
 18505                           postdec2	equ	0xFDD
 18506                           plusw2	equ	0xFDB
 18507                           fsr2h	equ	0xFDA
 18508                           fsr2l	equ	0xFD9
 18509                           status	equ	0xFD8
 18510                           
 18511 ;; *************** function _ECANInitialize *****************
 18512 ;; Defined at:
 18513 ;;		line 168 in file "../ECAN.c"
 18514 ;; Parameters:    Size  Location     Type
 18515 ;;		None
 18516 ;; Auto vars:     Size  Location     Type
 18517 ;;		None
 18518 ;; Return value:  Size  Location     Type
 18519 ;;		None               void
 18520 ;; Registers used:
 18521 ;;		wreg, status,2, status,0, cstack
 18522 ;; Tracked objects:
 18523 ;;		On entry : F/0
 18524 ;;		On exit  : 0/0
 18525 ;;		Unchanged: 0/0
 18526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18531 ;;Total ram usage:        0 bytes
 18532 ;; Hardware stack levels used:    1
 18533 ;; Hardware stack levels required when called:    3
 18534 ;; This function calls:
 18535 ;;		_ECANSetOperationMode
 18536 ;; This function is called by:
 18537 ;;		_init
 18538 ;; This function uses a non-reentrant model
 18539 ;;
 18540                           
 18541                           	psect	text89
 18542  0053FA                     __ptext89:
 18543                           	opt stack 0
 18544  0053FA                     _ECANInitialize:
 18545                           	opt stack 26
 18546                           
 18547                           ; BSR set to: 0
 18548                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 18549                           
 18550                           ;incstack = 0
 18551                           ;incstack = 0
 18552  0053FA  0E80               	movlw	128
 18553  0053FC  ECCE  F02F         	call	_ECANSetOperationMode
 18554                           
 18555                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 18556  005400  0E09               	movlw	9
 18557  005402  010E               	movlb	14	; () banked
 18558  005404  6F43               	movwf	67,b	;volatile
 18559                           
 18560                           ; BSR set to: 14
 18561                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 18562  005406  0EFC               	movlw	252
 18563  005408  6F44               	movwf	68,b	;volatile
 18564                           
 18565                           ; BSR set to: 14
 18566                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 18567                           ;ECAN.c: 181: (0 << 6) |
 18568                           ;ECAN.c: 182: (2-1);
 18569  00540A  0E01               	movlw	1
 18570  00540C  6F45               	movwf	69,b	;volatile
 18571                           
 18572                           ; BSR set to: 14
 18573                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 18574  00540E  0E20               	movlw	32
 18575  005410  6E70               	movwf	3952,c	;volatile
 18576                           
 18577                           ; BSR set to: 14
 18578                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 18579  005412  8E72               	bsf	3954,7,c	;volatile
 18580                           
 18581                           ; BSR set to: 14
 18582                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 18583  005414  9C72               	bcf	3954,6,c	;volatile
 18584                           
 18585                           ; BSR set to: 14
 18586                           ;ECAN.c: 205: RXB0CON = 0;
 18587  005416  6A60               	clrf	3936,c	;volatile
 18588                           
 18589                           ; BSR set to: 14
 18590                           ;ECAN.c: 211: RXB1CON = 0;
 18591  005418  010F               	movlb	15	; () banked
 18592  00541A  6B30               	clrf	48,b	;volatile
 18593                           
 18594                           ; BSR set to: 15
 18595                           ;ECAN.c: 221: B0CON = 0;
 18596  00541C  010E               	movlb	14	; () banked
 18597  00541E  6B80               	clrf	128,b	;volatile
 18598                           
 18599                           ; BSR set to: 14
 18600                           ;ECAN.c: 231: B1CON = 0;
 18601  005420  6B90               	clrf	144,b	;volatile
 18602                           
 18603                           ; BSR set to: 14
 18604                           ;ECAN.c: 241: B2CON = 0;
 18605  005422  6BA0               	clrf	160,b	;volatile
 18606                           
 18607                           ; BSR set to: 14
 18608                           ;ECAN.c: 254: B3CON = 0 << 2;
 18609  005424  6BB0               	clrf	176,b	;volatile
 18610                           
 18611                           ; BSR set to: 14
 18612                           ;ECAN.c: 264: B4CON = 0 << 2;
 18613  005426  6BC0               	clrf	192,b	;volatile
 18614                           
 18615                           ; BSR set to: 14
 18616                           ;ECAN.c: 274: B5CON = 0 << 2;
 18617  005428  6BD0               	clrf	208,b	;volatile
 18618                           
 18619                           ; BSR set to: 14
 18620                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 18621  00542A  0EE0               	movlw	224
 18622  00542C  6F7D               	movwf	125,b	;volatile
 18623                           
 18624                           ; BSR set to: 14
 18625                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 18626  00542E  6BE0               	clrf	224,b	;volatile
 18627                           
 18628                           ; BSR set to: 14
 18629  005430  0E08               	movlw	8
 18630  005432  6FE1               	movwf	225,b	;volatile
 18631                           
 18632                           ; BSR set to: 14
 18633  005434  6BE2               	clrf	226,b	;volatile
 18634                           
 18635                           ; BSR set to: 14
 18636  005436  6BE3               	clrf	227,b	;volatile
 18637                           
 18638                           ; BSR set to: 14
 18639                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 18640  005438  6BE4               	clrf	228,b	;volatile
 18641                           
 18642                           ; BSR set to: 14
 18643  00543A  0EE8               	movlw	232
 18644  00543C  6FE5               	movwf	229,b	;volatile
 18645                           
 18646                           ; BSR set to: 14
 18647  00543E  0E1A               	movlw	26
 18648  005440  6FE6               	movwf	230,b	;volatile
 18649                           
 18650                           ; BSR set to: 14
 18651  005442  6BE7               	clrf	231,b	;volatile
 18652                           
 18653                           ; BSR set to: 14
 18654                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 18655  005444  0E03               	movlw	3
 18656  005446  6F46               	movwf	70,b	;volatile
 18657                           
 18658                           ; BSR set to: 14
 18659                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 18660  005448  6B47               	clrf	71,b	;volatile
 18661                           
 18662                           ; BSR set to: 14
 18663                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 18664  00544A  6B71               	clrf	113,b	;volatile
 18665                           
 18666                           ; BSR set to: 14
 18667                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 18668  00544C  0E11               	movlw	17
 18669  00544E  6F72               	movwf	114,b	;volatile
 18670                           
 18671                           ; BSR set to: 14
 18672                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 18673  005450  6F73               	movwf	115,b	;volatile
 18674                           
 18675                           ; BSR set to: 14
 18676                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 18677  005452  6B74               	clrf	116,b	;volatile
 18678                           
 18679                           ; BSR set to: 14
 18680                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 18681  005454  6B75               	clrf	117,b	;volatile
 18682                           
 18683                           ; BSR set to: 14
 18684                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 18685  005456  6B76               	clrf	118,b	;volatile
 18686                           
 18687                           ; BSR set to: 14
 18688                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 18689  005458  6B77               	clrf	119,b	;volatile
 18690                           
 18691                           ; BSR set to: 14
 18692                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 18693  00545A  6B78               	clrf	120,b	;volatile
 18694                           
 18695                           ; BSR set to: 14
 18696                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 18697  00545C  0E54               	movlw	84
 18698  00545E  6F79               	movwf	121,b	;volatile
 18699                           
 18700                           ; BSR set to: 14
 18701                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 18702  005460  0E05               	movlw	5
 18703  005462  6F7A               	movwf	122,b	;volatile
 18704                           
 18705                           ; BSR set to: 14
 18706                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18707  005464  6B7B               	clrf	123,b	;volatile
 18708                           
 18709                           ; BSR set to: 14
 18710                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18711  005466  6B7B               	clrf	123,b	;volatile
 18712                           
 18713                           ; BSR set to: 14
 18714                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 18715  005468  0E0F               	movlw	15
 18716  00546A  6FF8               	movwf	248,b	;volatile
 18717                           
 18718                           ; BSR set to: 14
 18719  00546C  0EE0               	movlw	224
 18720  00546E  6FF9               	movwf	249,b	;volatile
 18721                           
 18722                           ; BSR set to: 14
 18723  005470  6BFA               	clrf	250,b	;volatile
 18724                           
 18725                           ; BSR set to: 14
 18726  005472  6BFB               	clrf	251,b	;volatile
 18727                           
 18728                           ; BSR set to: 14
 18729                           ;ECAN.c: 482: RXM0EXIDM = 1;
 18730  005474  87F9               	bsf	249,3,b	;volatile
 18731                           
 18732                           ; BSR set to: 14
 18733                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 18734  005476  0E0F               	movlw	15
 18735  005478  6FFC               	movwf	252,b	;volatile
 18736                           
 18737                           ; BSR set to: 14
 18738  00547A  0EE0               	movlw	224
 18739  00547C  6FFD               	movwf	253,b	;volatile
 18740                           
 18741                           ; BSR set to: 14
 18742  00547E  69FE               	setf	254,b	;volatile
 18743                           
 18744                           ; BSR set to: 14
 18745  005480  6BFF               	clrf	255,b	;volatile
 18746                           
 18747                           ; BSR set to: 14
 18748                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 18749  005482  87FD               	bsf	253,3,b	;volatile
 18750                           
 18751                           ; BSR set to: 14
 18752                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 18753  005484  0E00               	movlw	0
 18754  005486  EFCE  F02F         	goto	_ECANSetOperationMode
 18755  00548A                     __end_of_ECANInitialize:
 18756                           	opt stack 0
 18757                           tblptru	equ	0xFF8
 18758                           tblptrh	equ	0xFF7
 18759                           tblptrl	equ	0xFF6
 18760                           tablat	equ	0xFF5
 18761                           prodh	equ	0xFF4
 18762                           prodl	equ	0xFF3
 18763                           intcon	equ	0xFF2
 18764                           postinc0	equ	0xFEE
 18765                           wreg	equ	0xFE8
 18766                           indf1	equ	0xFE7
 18767                           postdec1	equ	0xFE5
 18768                           fsr1h	equ	0xFE2
 18769                           fsr1l	equ	0xFE1
 18770                           indf2	equ	0xFDF
 18771                           postinc2	equ	0xFDE
 18772                           postdec2	equ	0xFDD
 18773                           plusw2	equ	0xFDB
 18774                           fsr2h	equ	0xFDA
 18775                           fsr2l	equ	0xFD9
 18776                           status	equ	0xFD8
 18777                           
 18778 ;; *************** function _ECANSetOperationMode *****************
 18779 ;; Defined at:
 18780 ;;		line 1012 in file "../ECAN.c"
 18781 ;; Parameters:    Size  Location     Type
 18782 ;;  mode            1    wreg     enum E18989
 18783 ;; Auto vars:     Size  Location     Type
 18784 ;;  mode            1   13[COMRAM] enum E18989
 18785 ;; Return value:  Size  Location     Type
 18786 ;;		None               void
 18787 ;; Registers used:
 18788 ;;		wreg, status,2, status,0
 18789 ;; Tracked objects:
 18790 ;;		On entry : 0/0
 18791 ;;		On exit  : 0/0
 18792 ;;		Unchanged: 0/0
 18793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18795 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18797 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18798 ;;Total ram usage:        1 bytes
 18799 ;; Hardware stack levels used:    1
 18800 ;; Hardware stack levels required when called:    2
 18801 ;; This function calls:
 18802 ;;		Nothing
 18803 ;; This function is called by:
 18804 ;;		_vscp_goBootloaderMode
 18805 ;;		_ECANInitialize
 18806 ;; This function uses a non-reentrant model
 18807 ;;
 18808                           
 18809                           	psect	text90
 18810  005F9C                     __ptext90:
 18811                           	opt stack 0
 18812  005F9C                     _ECANSetOperationMode:
 18813                           	opt stack 26
 18814                           
 18815                           ;incstack = 0
 18816                           ;incstack = 0
 18817                           ;ECANSetOperationMode@mode stored from wreg
 18818  005F9C  CFE8 F00E          	movff	wreg,ECANSetOperationMode@mode
 18819                           
 18820                           ;ECAN.c: 1013: CANCON &= 0x1F;
 18821  005FA0  0E1F               	movlw	31
 18822  005FA2  166F               	andwf	3951,f,c	;volatile
 18823                           
 18824                           ;ECAN.c: 1014: CANCON |= mode;
 18825  005FA4  500E               	movf	ECANSetOperationMode@mode,w,c
 18826  005FA6  126F               	iorwf	3951,f,c	;volatile
 18827  005FA8                     l9299:
 18828  005FA8  506F               	movf	3951,w,c	;volatile
 18829  005FAA  0BE0               	andlw	224
 18830  005FAC  180E               	xorwf	ECANSetOperationMode@mode,w,c
 18831  005FAE  B4D8               	btfsc	status,2,c
 18832  005FB0  0012               	return	
 18833  005FB2  D7FA               	goto	l9299
 18834  005FB4                     __end_of_ECANSetOperationMode:
 18835                           	opt stack 0
 18836                           tblptru	equ	0xFF8
 18837                           tblptrh	equ	0xFF7
 18838                           tblptrl	equ	0xFF6
 18839                           tablat	equ	0xFF5
 18840                           prodh	equ	0xFF4
 18841                           prodl	equ	0xFF3
 18842                           intcon	equ	0xFF2
 18843                           postinc0	equ	0xFEE
 18844                           wreg	equ	0xFE8
 18845                           indf1	equ	0xFE7
 18846                           postdec1	equ	0xFE5
 18847                           fsr1h	equ	0xFE2
 18848                           fsr1l	equ	0xFE1
 18849                           indf2	equ	0xFDF
 18850                           postinc2	equ	0xFDE
 18851                           postdec2	equ	0xFDD
 18852                           plusw2	equ	0xFDB
 18853                           fsr2h	equ	0xFDA
 18854                           fsr2l	equ	0xFD9
 18855                           status	equ	0xFD8
 18856                           
 18857 ;; *************** function _OpenADC *****************
 18858 ;; Defined at:
 18859 ;;		line 308 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/ADC/adcopen.c"
 18860 ;; Parameters:    Size  Location     Type
 18861 ;;  config          1    wreg     unsigned char 
 18862 ;;  config2         1   13[COMRAM] unsigned char 
 18863 ;;  config3         1   14[COMRAM] unsigned char 
 18864 ;; Auto vars:     Size  Location     Type
 18865 ;;  config          1   17[COMRAM] unsigned char 
 18866 ;; Return value:  Size  Location     Type
 18867 ;;		None               void
 18868 ;; Registers used:
 18869 ;;		wreg, status,2, status,0
 18870 ;; Tracked objects:
 18871 ;;		On entry : F/0
 18872 ;;		On exit  : F/0
 18873 ;;		Unchanged: F/0
 18874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18875 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18876 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18877 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18878 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18879 ;;Total ram usage:        5 bytes
 18880 ;; Hardware stack levels used:    1
 18881 ;; Hardware stack levels required when called:    2
 18882 ;; This function calls:
 18883 ;;		Nothing
 18884 ;; This function is called by:
 18885 ;;		_init
 18886 ;; This function uses a non-reentrant model
 18887 ;;
 18888                           
 18889                           	psect	text91
 18890  00593C                     __ptext91:
 18891                           	opt stack 0
 18892  00593C                     _OpenADC:
 18893                           	opt stack 27
 18894                           
 18895                           ;incstack = 0
 18896                           ;incstack = 0
 18897                           ;OpenADC@config stored from wreg
 18898  00593C  CFE8 F012          	movff	wreg,OpenADC@config
 18899                           
 18900                           ; BSR set to: 0
 18901  005940  6AC2               	clrf	4034,c	;volatile
 18902  005942  6AC1               	clrf	4033,c	;volatile
 18903  005944  6AC0               	clrf	4032,c	;volatile
 18904                           
 18905                           ; BSR set to: 0
 18906  005946  500E               	movf	OpenADC@config2,w,c
 18907  005948  0B7C               	andlw	124
 18908  00594A  6EC2               	movwf	4034,c	;volatile
 18909                           
 18910                           ; BSR set to: 0
 18911  00594C  C00F  FFC1         	movff	OpenADC@config3,4033	;volatile
 18912  005950  C012  F010         	movff	OpenADC@config,??_OpenADC
 18913  005954  90D8               	bcf	status,0,c
 18914  005956  3610               	rlcf	??_OpenADC,f,c
 18915  005958  90D8               	bcf	status,0,c
 18916  00595A  3610               	rlcf	??_OpenADC,f,c
 18917  00595C  0E38               	movlw	56
 18918  00595E  1610               	andwf	??_OpenADC,f,c
 18919  005960  C012  F011         	movff	OpenADC@config,??_OpenADC+1
 18920  005964  3A11               	swapf	??_OpenADC+1,f,c
 18921  005966  0E0F               	movlw	15
 18922  005968  1611               	andwf	??_OpenADC+1,f,c
 18923  00596A  0E07               	movlw	7
 18924  00596C  1611               	andwf	??_OpenADC+1,f,c
 18925  00596E  5012               	movf	OpenADC@config,w,c
 18926  005970  0B80               	andlw	128
 18927  005972  1011               	iorwf	??_OpenADC+1,w,c
 18928  005974  1010               	iorwf	??_OpenADC,w,c
 18929  005976  6EC0               	movwf	4032,c	;volatile
 18930                           
 18931                           ; BSR set to: 0
 18932  005978  AE0E               	btfss	OpenADC@config2,7,c
 18933  00597A  D003               	goto	l1287
 18934                           
 18935                           ; BSR set to: 0
 18936  00597C  9C9E               	bcf	3998,6,c	;volatile
 18937  00597E  8C9D               	bsf	3997,6,c	;volatile
 18938  005980  8CF2               	bsf	intcon,6,c	;volatile
 18939  005982                     l1287:
 18940                           
 18941                           ; BSR set to: 0
 18942  005982  80C2               	bsf	4034,0,c	;volatile
 18943                           
 18944                           ; BSR set to: 0
 18945  005984  0012               	return	
 18946  005986                     __end_of_OpenADC:
 18947                           	opt stack 0
 18948                           tblptru	equ	0xFF8
 18949                           tblptrh	equ	0xFF7
 18950                           tblptrl	equ	0xFF6
 18951                           tablat	equ	0xFF5
 18952                           prodh	equ	0xFF4
 18953                           prodl	equ	0xFF3
 18954                           intcon	equ	0xFF2
 18955                           postinc0	equ	0xFEE
 18956                           wreg	equ	0xFE8
 18957                           indf1	equ	0xFE7
 18958                           postdec1	equ	0xFE5
 18959                           fsr1h	equ	0xFE2
 18960                           fsr1l	equ	0xFE1
 18961                           indf2	equ	0xFDF
 18962                           postinc2	equ	0xFDE
 18963                           postdec2	equ	0xFDD
 18964                           plusw2	equ	0xFDB
 18965                           fsr2h	equ	0xFDA
 18966                           fsr2l	equ	0xFD9
 18967                           status	equ	0xFD8
 18968                           
 18969 ;; *************** function _OpenTimer0 *****************
 18970 ;; Defined at:
 18971 ;;		line 19 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/Timers/t0open.c"
 18972 ;; Parameters:    Size  Location     Type
 18973 ;;  config          1    wreg     unsigned char 
 18974 ;; Auto vars:     Size  Location     Type
 18975 ;;  config          1   13[COMRAM] unsigned char 
 18976 ;; Return value:  Size  Location     Type
 18977 ;;		None               void
 18978 ;; Registers used:
 18979 ;;		wreg, status,2, status,0
 18980 ;; Tracked objects:
 18981 ;;		On entry : F/0
 18982 ;;		On exit  : F/0
 18983 ;;		Unchanged: F/0
 18984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18986 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18988 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18989 ;;Total ram usage:        1 bytes
 18990 ;; Hardware stack levels used:    1
 18991 ;; Hardware stack levels required when called:    2
 18992 ;; This function calls:
 18993 ;;		Nothing
 18994 ;; This function is called by:
 18995 ;;		_init
 18996 ;; This function uses a non-reentrant model
 18997 ;;
 18998                           
 18999                           	psect	text92
 19000  005EDC                     __ptext92:
 19001                           	opt stack 0
 19002  005EDC                     _OpenTimer0:
 19003                           	opt stack 27
 19004                           
 19005                           ; BSR set to: 0
 19006                           ;incstack = 0
 19007                           ;incstack = 0
 19008                           ;OpenTimer0@config stored from wreg
 19009  005EDC  CFE8 F00E          	movff	wreg,OpenTimer0@config
 19010                           
 19011                           ; BSR set to: 0
 19012  005EE0  500E               	movf	OpenTimer0@config,w,c
 19013  005EE2  0B7F               	andlw	127
 19014  005EE4  6ED5               	movwf	4053,c	;volatile
 19015                           
 19016                           ; BSR set to: 0
 19017  005EE6  6AD7               	clrf	4055,c	;volatile
 19018                           
 19019                           ; BSR set to: 0
 19020  005EE8  6AD6               	clrf	4054,c	;volatile
 19021                           
 19022                           ; BSR set to: 0
 19023  005EEA  94F2               	bcf	intcon,2,c	;volatile
 19024                           
 19025                           ; BSR set to: 0
 19026  005EEC  AE0E               	btfss	OpenTimer0@config,7,c
 19027  005EEE  D002               	goto	l1338
 19028                           
 19029                           ; BSR set to: 0
 19030  005EF0  8AF2               	bsf	intcon,5,c	;volatile
 19031  005EF2  D001               	goto	l1339
 19032  005EF4                     l1338:
 19033                           
 19034                           ; BSR set to: 0
 19035  005EF4  9AF2               	bcf	intcon,5,c	;volatile
 19036  005EF6                     l1339:
 19037                           
 19038                           ; BSR set to: 0
 19039  005EF6  8ED5               	bsf	4053,7,c	;volatile
 19040                           
 19041                           ; BSR set to: 0
 19042  005EF8  0012               	return	
 19043  005EFA                     __end_of_OpenTimer0:
 19044                           	opt stack 0
 19045                           tblptru	equ	0xFF8
 19046                           tblptrh	equ	0xFF7
 19047                           tblptrl	equ	0xFF6
 19048                           tablat	equ	0xFF5
 19049                           prodh	equ	0xFF4
 19050                           prodl	equ	0xFF3
 19051                           intcon	equ	0xFF2
 19052                           postinc0	equ	0xFEE
 19053                           wreg	equ	0xFE8
 19054                           indf1	equ	0xFE7
 19055                           postdec1	equ	0xFE5
 19056                           fsr1h	equ	0xFE2
 19057                           fsr1l	equ	0xFE1
 19058                           indf2	equ	0xFDF
 19059                           postinc2	equ	0xFDE
 19060                           postdec2	equ	0xFDD
 19061                           plusw2	equ	0xFDB
 19062                           fsr2h	equ	0xFDA
 19063                           fsr2l	equ	0xFD9
 19064                           status	equ	0xFD8
 19065                           
 19066 ;; *************** function _init_app_ram *****************
 19067 ;; Defined at:
 19068 ;;		line 1032 in file "../main.c"
 19069 ;; Parameters:    Size  Location     Type
 19070 ;;		None
 19071 ;; Auto vars:     Size  Location     Type
 19072 ;;  i               1   13[COMRAM] unsigned char 
 19073 ;; Return value:  Size  Location     Type
 19074 ;;		None               void
 19075 ;; Registers used:
 19076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19077 ;; Tracked objects:
 19078 ;;		On entry : 0/1
 19079 ;;		On exit  : F/0
 19080 ;;		Unchanged: 0/0
 19081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19083 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19085 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19086 ;;Total ram usage:        1 bytes
 19087 ;; Hardware stack levels used:    1
 19088 ;; Hardware stack levels required when called:    2
 19089 ;; This function calls:
 19090 ;;		Nothing
 19091 ;; This function is called by:
 19092 ;;		_init
 19093 ;;		_vscp_restoreDefaults
 19094 ;; This function uses a non-reentrant model
 19095 ;;
 19096                           
 19097                           	psect	text93
 19098  005ADA                     __ptext93:
 19099                           	opt stack 0
 19100  005ADA                     _init_app_ram:
 19101                           	opt stack 25
 19102                           
 19103                           ;main.c: 1033: char i;
 19104                           ;main.c: 1035: measurement_clock = 0;
 19105                           
 19106                           ; BSR set to: 0
 19107                           ;incstack = 0
 19108                           ;incstack = 0
 19109  005ADA  0101               	movlb	1	; () banked
 19110  005ADC  6B12               	clrf	_measurement_clock& (0+255),b	;volatile
 19111  005ADE  6B13               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 19112  005AE0  6B14               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 19113  005AE2  6B15               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 19114                           
 19115                           ;main.c: 1036: seconds = 0;
 19116  005AE4  0100               	movlb	0	; () banked
 19117  005AE6  6BB9               	clrf	_seconds& (0+255),b
 19118                           
 19119                           ;main.c: 1039: for (i = 0; i < 6; i++) {
 19120  005AE8  6A0E               	clrf	init_app_ram@i,c
 19121  005AEA                     l8217:
 19122                           
 19123                           ;main.c: 1040: seconds_temp[i] = 0;
 19124  005AEA  0E0C               	movlw	low _seconds_temp
 19125  005AEC  240E               	addwf	init_app_ram@i,w,c
 19126  005AEE  6ED9               	movwf	fsr2l,c
 19127  005AF0  6ADA               	clrf	fsr2h,c
 19128  005AF2  0E01               	movlw	high _seconds_temp
 19129  005AF4  22DA               	addwfc	fsr2h,f,c
 19130  005AF6  6ADF               	clrf	indf2,c
 19131                           
 19132                           ; BSR set to: 1
 19133                           ;main.c: 1041: current_temp[i] = 0;
 19134  005AF8  500E               	movf	init_app_ram@i,w,c
 19135  005AFA  0D02               	mullw	2
 19136  005AFC  ECF4  F01B         	call	PL2	;call to abstracted procedure
 19137  005B00  6ADE               	clrf	postinc2,c
 19138  005B02  6ADD               	clrf	postdec2,c
 19139                           
 19140                           ; BSR set to: 1
 19141  005B04  2A0E               	incf	init_app_ram@i,f,c
 19142                           
 19143                           ; BSR set to: 1
 19144  005B06  0E05               	movlw	5
 19145  005B08  640E               	cpfsgt	init_app_ram@i,c
 19146  005B0A  D7EF               	goto	l8217
 19147                           
 19148                           ; BSR set to: 1
 19149                           ;main.c: 1042: }
 19150                           ;main.c: 1045: adc_conversion_flags = 0;
 19151  005B0C  0100               	movlb	0	; () banked
 19152  005B0E  6BB6               	clrf	_adc_conversion_flags& (0+255),b
 19153                           
 19154                           ;main.c: 1048: adc_series_counter = 0;
 19155  005B10  6A49               	clrf	_adc_series_counter,c
 19156                           
 19157                           ;main.c: 1051: low_alarm = 0;
 19158  005B12  6BB8               	clrf	_low_alarm& (0+255),b
 19159                           
 19160                           ;main.c: 1054: high_alarm = 0;
 19161  005B14  6BB7               	clrf	_high_alarm& (0+255),b
 19162                           
 19163                           ; BSR set to: 0
 19164  005B16  0012               	return	
 19165  005B18                     __end_of_init_app_ram:
 19166                           	opt stack 0
 19167                           tblptru	equ	0xFF8
 19168                           tblptrh	equ	0xFF7
 19169                           tblptrl	equ	0xFF6
 19170                           tablat	equ	0xFF5
 19171                           prodh	equ	0xFF4
 19172                           prodl	equ	0xFF3
 19173                           intcon	equ	0xFF2
 19174                           postinc0	equ	0xFEE
 19175                           wreg	equ	0xFE8
 19176                           indf1	equ	0xFE7
 19177                           postdec1	equ	0xFE5
 19178                           fsr1h	equ	0xFE2
 19179                           fsr1l	equ	0xFE1
 19180                           indf2	equ	0xFDF
 19181                           postinc2	equ	0xFDE
 19182                           postdec2	equ	0xFDD
 19183                           plusw2	equ	0xFDB
 19184                           fsr2h	equ	0xFDA
 19185                           fsr2l	equ	0xFD9
 19186                           status	equ	0xFD8
 19187                           
 19188 ;; *************** function _ConvertADC *****************
 19189 ;; Defined at:
 19190 ;;		line 23 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/ADC/adcconv.c"
 19191 ;; Parameters:    Size  Location     Type
 19192 ;;		None
 19193 ;; Auto vars:     Size  Location     Type
 19194 ;;		None
 19195 ;; Return value:  Size  Location     Type
 19196 ;;		None               void
 19197 ;; Registers used:
 19198 ;;		None
 19199 ;; Tracked objects:
 19200 ;;		On entry : 0/0
 19201 ;;		On exit  : 0/0
 19202 ;;		Unchanged: 0/0
 19203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19208 ;;Total ram usage:        0 bytes
 19209 ;; Hardware stack levels used:    1
 19210 ;; Hardware stack levels required when called:    2
 19211 ;; This function calls:
 19212 ;;		Nothing
 19213 ;; This function is called by:
 19214 ;;		_init
 19215 ;; This function uses a non-reentrant model
 19216 ;;
 19217                           
 19218                           	psect	text94
 19219  006088                     __ptext94:
 19220                           	opt stack 0
 19221  006088                     _ConvertADC:
 19222                           	opt stack 27
 19223                           
 19224                           ; BSR set to: 0
 19225                           ;incstack = 0
 19226                           ;incstack = 0
 19227  006088  82C2               	bsf	4034,1,c	;volatile
 19228  00608A  0012               	return	
 19229  00608C                     __end_of_ConvertADC:
 19230                           	opt stack 0
 19231                           tblptru	equ	0xFF8
 19232                           tblptrh	equ	0xFF7
 19233                           tblptrl	equ	0xFF6
 19234                           tablat	equ	0xFF5
 19235                           prodh	equ	0xFF4
 19236                           prodl	equ	0xFF3
 19237                           intcon	equ	0xFF2
 19238                           postinc0	equ	0xFEE
 19239                           wreg	equ	0xFE8
 19240                           indf1	equ	0xFE7
 19241                           postdec1	equ	0xFE5
 19242                           fsr1h	equ	0xFE2
 19243                           fsr1l	equ	0xFE1
 19244                           indf2	equ	0xFDF
 19245                           postinc2	equ	0xFDE
 19246                           postdec2	equ	0xFDD
 19247                           plusw2	equ	0xFDB
 19248                           fsr2h	equ	0xFDA
 19249                           fsr2l	equ	0xFD9
 19250                           status	equ	0xFD8
 19251                           
 19252 ;; *************** function _WriteTimer0 *****************
 19253 ;; Defined at:
 19254 ;;		line 17 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/Timers/t0write.c"
 19255 ;; Parameters:    Size  Location     Type
 19256 ;;  timer0          2   13[COMRAM] unsigned int 
 19257 ;; Auto vars:     Size  Location     Type
 19258 ;;  timer           2   15[COMRAM] struct Timers
 19259 ;; Return value:  Size  Location     Type
 19260 ;;		None               void
 19261 ;; Registers used:
 19262 ;;		None
 19263 ;; Tracked objects:
 19264 ;;		On entry : F/0
 19265 ;;		On exit  : F/0
 19266 ;;		Unchanged: F/0
 19267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19268 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19269 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19271 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19272 ;;Total ram usage:        4 bytes
 19273 ;; Hardware stack levels used:    1
 19274 ;; Hardware stack levels required when called:    2
 19275 ;; This function calls:
 19276 ;;		Nothing
 19277 ;; This function is called by:
 19278 ;;		_init
 19279 ;; This function uses a non-reentrant model
 19280 ;;
 19281                           
 19282                           	psect	text95
 19283  00601C                     __ptext95:
 19284                           	opt stack 0
 19285  00601C                     _WriteTimer0:
 19286                           	opt stack 27
 19287                           
 19288                           ; BSR set to: 0
 19289                           
 19290                           ;incstack = 0
 19291                           ;incstack = 0
 19292  00601C  C00E  F010         	movff	WriteTimer0@timer0,WriteTimer0@timer
 19293  006020  C00F  F011         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 19294  006024  C011  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 19295  006028  C010  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 19296                           
 19297                           ; BSR set to: 0
 19298  00602C  0012               	return	
 19299  00602E                     __end_of_WriteTimer0:
 19300                           	opt stack 0
 19301                           tblptru	equ	0xFF8
 19302                           tblptrh	equ	0xFF7
 19303                           tblptrl	equ	0xFF6
 19304                           tablat	equ	0xFF5
 19305                           prodh	equ	0xFF4
 19306                           prodl	equ	0xFF3
 19307                           intcon	equ	0xFF2
 19308                           postinc0	equ	0xFEE
 19309                           wreg	equ	0xFE8
 19310                           indf1	equ	0xFE7
 19311                           postdec1	equ	0xFE5
 19312                           fsr1h	equ	0xFE2
 19313                           fsr1l	equ	0xFE1
 19314                           indf2	equ	0xFDF
 19315                           postinc2	equ	0xFDE
 19316                           postdec2	equ	0xFDD
 19317                           plusw2	equ	0xFDB
 19318                           fsr2h	equ	0xFDA
 19319                           fsr2l	equ	0xFD9
 19320                           status	equ	0xFD8
 19321                           
 19322 ;; *************** function ___awtofl *****************
 19323 ;; Defined at:
 19324 ;;		line 32 in file "/opt/microchip/xc8/v1.21/sources/common/awtofl.c"
 19325 ;; Parameters:    Size  Location     Type
 19326 ;;  c               2   23[COMRAM] int 
 19327 ;; Auto vars:     Size  Location     Type
 19328 ;;  f1              4    0        int 
 19329 ;;  sign            1   29[COMRAM] unsigned char 
 19330 ;; Return value:  Size  Location     Type
 19331 ;;                  4   23[COMRAM] unsigned char 
 19332 ;; Registers used:
 19333 ;;		wreg, status,2, status,0, cstack
 19334 ;; Tracked objects:
 19335 ;;		On entry : F/0
 19336 ;;		On exit  : 0/0
 19337 ;;		Unchanged: 0/0
 19338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19339 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19340 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19342 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19343 ;;Total ram usage:        7 bytes
 19344 ;; Hardware stack levels used:    1
 19345 ;; Hardware stack levels required when called:    3
 19346 ;; This function calls:
 19347 ;;		___flpack
 19348 ;; This function is called by:
 19349 ;;		_setEventData
 19350 ;;		_exp
 19351 ;;		_log
 19352 ;; This function uses a non-reentrant model
 19353 ;;
 19354                           
 19355                           	psect	text96
 19356  005BCA                     __ptext96:
 19357                           	opt stack 0
 19358  005BCA                     ___awtofl:
 19359                           	opt stack 25
 19360                           
 19361                           ; BSR set to: 0
 19362                           
 19363                           ; BSR set to: 0
 19364                           ;incstack = 0
 19365                           ;incstack = 0
 19366  005BCA  6A1E               	clrf	___awtofl@sign,c
 19367  005BCC  AE19               	btfss	___awtofl@c+1,7,c
 19368  005BCE  D005               	goto	l13201
 19369                           
 19370                           ; BSR set to: 0
 19371  005BD0  6C18               	negf	___awtofl@c,c
 19372  005BD2  1E19               	comf	___awtofl@c+1,f,c
 19373  005BD4  B0D8               	btfsc	status,0,c
 19374  005BD6  2A19               	incf	___awtofl@c+1,f,c
 19375  005BD8  2A1E               	incf	___awtofl@sign,f,c
 19376  005BDA                     l13201:
 19377                           
 19378                           ; BSR set to: 0
 19379  005BDA  C018  F00E         	movff	___awtofl@c,?___flpack
 19380  005BDE  C019  F00F         	movff	___awtofl@c+1,?___flpack+1
 19381  005BE2  6A10               	clrf	?___flpack+2,c
 19382  005BE4  6A11               	clrf	?___flpack+3,c
 19383  005BE6  0E96               	movlw	150
 19384  005BE8  6E12               	movwf	?___flpack+4,c
 19385  005BEA  C01E  F013         	movff	___awtofl@sign,?___flpack+5
 19386  005BEE  EC44  F027         	call	___flpack	;wreg free
 19387  005BF2  C011  F01B         	movff	?___flpack+3,?___awtofl+3
 19388  005BF6  C010  F01A         	movff	?___flpack+2,?___awtofl+2
 19389  005BFA  C00F  F019         	movff	?___flpack+1,?___awtofl+1
 19390  005BFE  C00E  F018         	movff	?___flpack,?___awtofl
 19391  005C02  0012               	return	
 19392  005C04                     __end_of___awtofl:
 19393                           	opt stack 0
 19394                           tblptru	equ	0xFF8
 19395                           tblptrh	equ	0xFF7
 19396                           tblptrl	equ	0xFF6
 19397                           tablat	equ	0xFF5
 19398                           prodh	equ	0xFF4
 19399                           prodl	equ	0xFF3
 19400                           intcon	equ	0xFF2
 19401                           postinc0	equ	0xFEE
 19402                           wreg	equ	0xFE8
 19403                           indf1	equ	0xFE7
 19404                           postdec1	equ	0xFE5
 19405                           fsr1h	equ	0xFE2
 19406                           fsr1l	equ	0xFE1
 19407                           indf2	equ	0xFDF
 19408                           postinc2	equ	0xFDE
 19409                           postdec2	equ	0xFDD
 19410                           plusw2	equ	0xFDB
 19411                           fsr2h	equ	0xFDA
 19412                           fsr2l	equ	0xFD9
 19413                           status	equ	0xFD8
 19414                           
 19415 ;; *************** function ___flmul *****************
 19416 ;; Defined at:
 19417 ;;		line 51 in file "/opt/microchip/xc8/v1.21/sources/common/flmul.c"
 19418 ;; Parameters:    Size  Location     Type
 19419 ;;  f1              4    0[BANK0 ] unsigned char 
 19420 ;;  f2              4    4[BANK0 ] unsigned char 
 19421 ;; Auto vars:     Size  Location     Type
 19422 ;;  f3_as_produc    4   16[BANK0 ] unsigned long 
 19423 ;;  sign            1   21[BANK0 ] unsigned char 
 19424 ;;  cntr            1   20[BANK0 ] unsigned char 
 19425 ;;  exp             1   15[BANK0 ] unsigned char 
 19426 ;; Return value:  Size  Location     Type
 19427 ;;                  4    0[BANK0 ] unsigned char 
 19428 ;; Registers used:
 19429 ;;		wreg, status,2, status,0, cstack
 19430 ;; Tracked objects:
 19431 ;;		On entry : 0/0
 19432 ;;		On exit  : 0/0
 19433 ;;		Unchanged: 0/0
 19434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19435 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19436 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19438 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19439 ;;Total ram usage:       22 bytes
 19440 ;; Hardware stack levels used:    1
 19441 ;; Hardware stack levels required when called:    3
 19442 ;; This function calls:
 19443 ;;		___flpack
 19444 ;; This function is called by:
 19445 ;;		_doWork
 19446 ;;		_Celsius2Fahrenheit
 19447 ;;		___asflmul
 19448 ;;		_log
 19449 ;;		_eval_poly
 19450 ;; This function uses a non-reentrant model
 19451 ;;
 19452                           
 19453                           	psect	text97
 19454  004C40                     __ptext97:
 19455                           	opt stack 0
 19456  004C40                     ___flmul:
 19457                           	opt stack 26
 19458                           
 19459                           ;incstack = 0
 19460                           ;incstack = 0
 19461  004C40  0100               	movlb	0	; () banked
 19462  004C42  3562               	rlcf	(___flmul@f1+2)& (0+255),w,b
 19463  004C44  3563               	rlcf	(___flmul@f1+3)& (0+255),w,b
 19464  004C46  6F6F               	movwf	___flmul@exp& (0+255),b
 19465  004C48  676F               	tstfsz	___flmul@exp& (0+255),b
 19466  004C4A  D005               	goto	l13145
 19467                           
 19468                           ; BSR set to: 0
 19469  004C4C  6B60               	clrf	?___flmul& (0+255),b
 19470  004C4E  6B61               	clrf	(?___flmul+1)& (0+255),b
 19471  004C50  6B62               	clrf	(?___flmul+2)& (0+255),b
 19472  004C52  6B63               	clrf	(?___flmul+3)& (0+255),b
 19473  004C54  0012               	return	
 19474  004C56                     l13145:
 19475                           
 19476                           ; BSR set to: 0
 19477  004C56  0100               	movlb	0	; () banked
 19478  004C58  3566               	rlcf	(___flmul@f2+2)& (0+255),w,b
 19479  004C5A  3567               	rlcf	(___flmul@f2+3)& (0+255),w,b
 19480  004C5C  6F75               	movwf	___flmul@sign& (0+255),b
 19481  004C5E  6775               	tstfsz	___flmul@sign& (0+255),b
 19482  004C60  D005               	goto	l13149
 19483                           
 19484                           ; BSR set to: 0
 19485  004C62  6B60               	clrf	?___flmul& (0+255),b
 19486  004C64  6B61               	clrf	(?___flmul+1)& (0+255),b
 19487  004C66  6B62               	clrf	(?___flmul+2)& (0+255),b
 19488  004C68  6B63               	clrf	(?___flmul+3)& (0+255),b
 19489  004C6A  0012               	return	
 19490  004C6C                     l13149:
 19491                           
 19492                           ; BSR set to: 0
 19493  004C6C  5175               	movf	___flmul@sign& (0+255),w,b
 19494  004C6E  0F7B               	addlw	123
 19495  004C70  276F               	addwf	___flmul@exp& (0+255),f,b
 19496                           
 19497                           ; BSR set to: 0
 19498  004C72  C063  F075         	movff	___flmul@f1+3,___flmul@sign
 19499  004C76  0100               	movlb	0	; () banked
 19500  004C78  5167               	movf	(___flmul@f2+3)& (0+255),w,b
 19501  004C7A  1B75               	xorwf	___flmul@sign& (0+255),f,b
 19502  004C7C  0E80               	movlw	128
 19503  004C7E  1775               	andwf	___flmul@sign& (0+255),f,b
 19504                           
 19505                           ; BSR set to: 0
 19506  004C80  8F62               	bsf	(___flmul@f1+2)& (0+255),7,b
 19507                           
 19508                           ; BSR set to: 0
 19509  004C82  8F66               	bsf	(___flmul@f2+2)& (0+255),7,b
 19510  004C84  6B67               	clrf	(___flmul@f2+3)& (0+255),b
 19511                           
 19512                           ; BSR set to: 0
 19513  004C86  6B70               	clrf	___flmul@f3_as_product& (0+255),b
 19514  004C88  6B71               	clrf	(___flmul@f3_as_product+1)& (0+255),b
 19515  004C8A  6B72               	clrf	(___flmul@f3_as_product+2)& (0+255),b
 19516  004C8C  6B73               	clrf	(___flmul@f3_as_product+3)& (0+255),b
 19517                           
 19518                           ; BSR set to: 0
 19519  004C8E  0E07               	movlw	7
 19520  004C90  6F74               	movwf	___flmul@cntr& (0+255),b
 19521  004C92                     l13161:
 19522                           
 19523                           ; BSR set to: 0
 19524  004C92  A160               	btfss	___flmul@f1& (0+255),0,b
 19525  004C94  D002               	goto	l13165
 19526                           
 19527                           ; BSR set to: 0
 19528  004C96  5164               	movf	___flmul@f2& (0+255),w,b
 19529  004C98  D82B               	call	PL62	;call to abstracted procedure
 19530  004C9A                     l13165:
 19531                           
 19532                           ; BSR set to: 0
 19533                           
 19534                           ; BSR set to: 0
 19535  004C9A  D832               	call	PL66	;call to abstracted procedure
 19536  004C9C  3764               	rlcf	___flmul@f2& (0+255),f,b
 19537  004C9E  3765               	rlcf	(___flmul@f2+1)& (0+255),f,b
 19538  004CA0  3766               	rlcf	(___flmul@f2+2)& (0+255),f,b
 19539  004CA2  3767               	rlcf	(___flmul@f2+3)& (0+255),f,b
 19540                           
 19541                           ; BSR set to: 0
 19542  004CA4  2F74               	decfsz	___flmul@cntr& (0+255),f,b
 19543  004CA6  D7F5               	goto	l13161
 19544                           
 19545                           ; BSR set to: 0
 19546  004CA8  0E11               	movlw	17
 19547  004CAA  6F74               	movwf	___flmul@cntr& (0+255),b
 19548  004CAC                     l13173:
 19549                           
 19550                           ; BSR set to: 0
 19551  004CAC  A160               	btfss	___flmul@f1& (0+255),0,b
 19552  004CAE  D002               	goto	l13177
 19553                           
 19554                           ; BSR set to: 0
 19555  004CB0  5164               	movf	___flmul@f2& (0+255),w,b
 19556  004CB2  D81E               	call	PL62	;call to abstracted procedure
 19557  004CB4                     l13177:
 19558                           
 19559                           ; BSR set to: 0
 19560                           
 19561                           ; BSR set to: 0
 19562  004CB4  D825               	call	PL66	;call to abstracted procedure
 19563  004CB6  3373               	rrcf	(___flmul@f3_as_product+3)& (0+255),f,b
 19564  004CB8  3372               	rrcf	(___flmul@f3_as_product+2)& (0+255),f,b
 19565  004CBA  3371               	rrcf	(___flmul@f3_as_product+1)& (0+255),f,b
 19566  004CBC  3370               	rrcf	___flmul@f3_as_product& (0+255),f,b
 19567                           
 19568                           ; BSR set to: 0
 19569  004CBE  2F74               	decfsz	___flmul@cntr& (0+255),f,b
 19570  004CC0  D7F5               	goto	l13173
 19571                           
 19572                           ; BSR set to: 0
 19573  004CC2  C070  F00E         	movff	___flmul@f3_as_product,?___flpack
 19574  004CC6  C071  F00F         	movff	___flmul@f3_as_product+1,?___flpack+1
 19575  004CCA  C072  F010         	movff	___flmul@f3_as_product+2,?___flpack+2
 19576  004CCE  C073  F011         	movff	___flmul@f3_as_product+3,?___flpack+3
 19577  004CD2  C06F  F012         	movff	___flmul@exp,?___flpack+4
 19578  004CD6  C075  F013         	movff	___flmul@sign,?___flpack+5
 19579  004CDA  EC44  F027         	call	___flpack	;wreg free
 19580  004CDE  C011  F063         	movff	?___flpack+3,?___flmul+3
 19581  004CE2  C010  F062         	movff	?___flpack+2,?___flmul+2
 19582  004CE6  C00F  F061         	movff	?___flpack+1,?___flmul+1
 19583  004CEA  C00E  F060         	movff	?___flpack,?___flmul
 19584  004CEE  0012               	return	
 19585  004CF0                     __end_of___flmul:
 19586                           	opt stack 0
 19587  004CF0                     PL62:
 19588                           	opt stack 26
 19589  004CF0  2770               	addwf	___flmul@f3_as_product& (0+255),f,b
 19590  004CF2  5165               	movf	(___flmul@f2+1)& (0+255),w,b
 19591  004CF4  2371               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
 19592  004CF6  5166               	movf	(___flmul@f2+2)& (0+255),w,b
 19593  004CF8  2372               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
 19594  004CFA  5167               	movf	(___flmul@f2+3)& (0+255),w,b
 19595  004CFC  2373               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
 19596  004CFE  0012               	return	
 19597  004D00                     __end_ofPL62:
 19598                           	opt stack 0
 19599  004D00                     PL66:
 19600                           	opt stack 26
 19601  004D00  90D8               	bcf	status,0,c
 19602  004D02  3363               	rrcf	(___flmul@f1+3)& (0+255),f,b
 19603  004D04  3362               	rrcf	(___flmul@f1+2)& (0+255),f,b
 19604  004D06  3361               	rrcf	(___flmul@f1+1)& (0+255),f,b
 19605  004D08  3360               	rrcf	___flmul@f1& (0+255),f,b
 19606  004D0A  90D8               	bcf	status,0,c
 19607  004D0C  0012               	return	
 19608  004D0E                     __end_ofPL66:
 19609                           	opt stack 0
 19610                           tblptru	equ	0xFF8
 19611                           tblptrh	equ	0xFF7
 19612                           tblptrl	equ	0xFF6
 19613                           tablat	equ	0xFF5
 19614                           prodh	equ	0xFF4
 19615                           prodl	equ	0xFF3
 19616                           intcon	equ	0xFF2
 19617                           postinc0	equ	0xFEE
 19618                           wreg	equ	0xFE8
 19619                           indf1	equ	0xFE7
 19620                           postdec1	equ	0xFE5
 19621                           fsr1h	equ	0xFE2
 19622                           fsr1l	equ	0xFE1
 19623                           indf2	equ	0xFDF
 19624                           postinc2	equ	0xFDE
 19625                           postdec2	equ	0xFDD
 19626                           plusw2	equ	0xFDB
 19627                           fsr2h	equ	0xFDA
 19628                           fsr2l	equ	0xFD9
 19629                           status	equ	0xFD8
 19630                           
 19631 ;; *************** function ___flpack *****************
 19632 ;; Defined at:
 19633 ;;		line 64 in file "/opt/microchip/xc8/v1.21/sources/common/double.c"
 19634 ;; Parameters:    Size  Location     Type
 19635 ;;  arg             4   13[COMRAM] unsigned long 
 19636 ;;  exp             1   17[COMRAM] unsigned char 
 19637 ;;  sign            1   18[COMRAM] unsigned char 
 19638 ;; Auto vars:     Size  Location     Type
 19639 ;;		None
 19640 ;; Return value:  Size  Location     Type
 19641 ;;                  4   13[COMRAM] unsigned char 
 19642 ;; Registers used:
 19643 ;;		wreg, status,2, status,0
 19644 ;; Tracked objects:
 19645 ;;		On entry : 0/0
 19646 ;;		On exit  : 0/0
 19647 ;;		Unchanged: 0/0
 19648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19649 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19651 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19652 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19653 ;;Total ram usage:       10 bytes
 19654 ;; Hardware stack levels used:    1
 19655 ;; Hardware stack levels required when called:    2
 19656 ;; This function calls:
 19657 ;;		Nothing
 19658 ;; This function is called by:
 19659 ;;		___altofl
 19660 ;;		___awtofl
 19661 ;;		___fladd
 19662 ;;		___fldiv
 19663 ;;		___flmul
 19664 ;;		___lwtofl
 19665 ;; This function uses a non-reentrant model
 19666 ;;
 19667                           
 19668                           	psect	text98
 19669  004E88                     __ptext98:
 19670                           	opt stack 0
 19671  004E88                     ___flpack:
 19672                           	opt stack 26
 19673                           
 19674                           ;incstack = 0
 19675                           ;incstack = 0
 19676  004E88  5012               	movf	___flpack@exp,w,c
 19677  004E8A  E005               	bz	l1558
 19678  004E8C  5011               	movf	___flpack@arg+3,w,c
 19679  004E8E  100E               	iorwf	___flpack@arg,w,c
 19680  004E90  100F               	iorwf	___flpack@arg+1,w,c
 19681  004E92  1010               	iorwf	___flpack@arg+2,w,c
 19682  004E94  E107               	bnz	l12951
 19683  004E96                     l1558:
 19684  004E96  6A0E               	clrf	?___flpack,c
 19685  004E98  6A0F               	clrf	?___flpack+1,c
 19686  004E9A  6A10               	clrf	?___flpack+2,c
 19687  004E9C  6A11               	clrf	?___flpack+3,c
 19688  004E9E  0012               	return	
 19689  004EA0                     l12949:
 19690  004EA0  2A12               	incf	___flpack@exp,f,c
 19691  004EA2  D84A               	call	PL82	;call to abstracted procedure
 19692  004EA4                     l12951:
 19693  004EA4  6A14               	clrf	??___flpack& (0+255),c
 19694  004EA6  6A15               	clrf	(??___flpack+1)& (0+255),c
 19695  004EA8  6A16               	clrf	(??___flpack+2)& (0+255),c
 19696  004EAA  0EFE               	movlw	254
 19697  004EAC  1411               	andwf	___flpack@arg+3,w,c
 19698  004EAE  6E17               	movwf	(??___flpack+3)& (0+255),c
 19699  004EB0  5017               	movf	??___flpack+3,w,c
 19700  004EB2  1014               	iorwf	??___flpack,w,c
 19701  004EB4  1015               	iorwf	??___flpack+1,w,c
 19702  004EB6  1016               	iorwf	??___flpack+2,w,c
 19703  004EB8  E008               	bz	l1563
 19704  004EBA  D7F2               	goto	l12949
 19705  004EBC                     l12953:
 19706  004EBC  2A12               	incf	___flpack@exp,f,c
 19707  004EBE  2A0E               	incf	___flpack@arg,f,c
 19708  004EC0  0E00               	movlw	0
 19709  004EC2  220F               	addwfc	___flpack@arg+1,f,c
 19710  004EC4  2210               	addwfc	___flpack@arg+2,f,c
 19711  004EC6  2211               	addwfc	___flpack@arg+3,f,c
 19712  004EC8  D837               	call	PL82	;call to abstracted procedure
 19713  004ECA                     l1563:
 19714  004ECA  6A14               	clrf	??___flpack& (0+255),c
 19715  004ECC  6A15               	clrf	(??___flpack+1)& (0+255),c
 19716  004ECE  6A16               	clrf	(??___flpack+2)& (0+255),c
 19717  004ED0  5011               	movf	___flpack@arg+3,w,c
 19718  004ED2  6E17               	movwf	(??___flpack+3)& (0+255),c
 19719  004ED4  5017               	movf	??___flpack+3,w,c
 19720  004ED6  1014               	iorwf	??___flpack,w,c
 19721  004ED8  1015               	iorwf	??___flpack+1,w,c
 19722  004EDA  1016               	iorwf	??___flpack+2,w,c
 19723  004EDC  E007               	bz	l12961
 19724  004EDE  D7EE               	goto	l12953
 19725  004EE0                     l12959:
 19726  004EE0  0612               	decf	___flpack@exp,f,c
 19727  004EE2  90D8               	bcf	status,0,c
 19728  004EE4  360E               	rlcf	___flpack@arg,f,c
 19729  004EE6  360F               	rlcf	___flpack@arg+1,f,c
 19730  004EE8  3610               	rlcf	___flpack@arg+2,f,c
 19731  004EEA  3611               	rlcf	___flpack@arg+3,f,c
 19732  004EEC                     l12961:
 19733  004EEC  AE10               	btfss	___flpack@arg+2,7,c
 19734  004EEE  D7F8               	goto	l12959
 19735  004EF0  B012               	btfsc	___flpack@exp,0,c
 19736  004EF2  D002               	goto	l1569
 19737  004EF4  0E7F               	movlw	127
 19738  004EF6  1610               	andwf	___flpack@arg+2,f,c
 19739  004EF8                     l1569:
 19740  004EF8  90D8               	bcf	status,0,c
 19741  004EFA  3212               	rrcf	___flpack@exp,f,c
 19742  004EFC  C012  F014         	movff	___flpack@exp,??___flpack
 19743  004F00  6A15               	clrf	(??___flpack+1)& (0+255),c
 19744  004F02  6A16               	clrf	(??___flpack+2)& (0+255),c
 19745  004F04  6A17               	clrf	(??___flpack+3)& (0+255),c
 19746  004F06  C014  F017         	movff	??___flpack,??___flpack+3
 19747  004F0A  6A16               	clrf	??___flpack+2,c
 19748  004F0C  6A15               	clrf	??___flpack+1,c
 19749  004F0E  6A14               	clrf	??___flpack,c
 19750  004F10  5014               	movf	??___flpack,w,c
 19751  004F12  120E               	iorwf	___flpack@arg,f,c
 19752  004F14  5015               	movf	??___flpack+1,w,c
 19753  004F16  120F               	iorwf	___flpack@arg+1,f,c
 19754  004F18  5016               	movf	??___flpack+2,w,c
 19755  004F1A  1210               	iorwf	___flpack@arg+2,f,c
 19756  004F1C  5017               	movf	??___flpack+3,w,c
 19757  004F1E  1211               	iorwf	___flpack@arg+3,f,c
 19758  004F20  5013               	movf	___flpack@sign,w,c
 19759  004F22  A4D8               	btfss	status,2,c
 19760  004F24  8E11               	bsf	___flpack@arg+3,7,c
 19761  004F26  C00E  F00E         	movff	___flpack@arg,?___flpack
 19762  004F2A  C00F  F00F         	movff	___flpack@arg+1,?___flpack+1
 19763  004F2E  C010  F010         	movff	___flpack@arg+2,?___flpack+2
 19764  004F32  C011  F011         	movff	___flpack@arg+3,?___flpack+3
 19765  004F36  0012               	return	
 19766  004F38                     __end_of___flpack:
 19767                           	opt stack 0
 19768  004F38                     PL82:
 19769                           	opt stack 26
 19770  004F38  90D8               	bcf	status,0,c
 19771  004F3A  3211               	rrcf	___flpack@arg+3,f,c
 19772  004F3C  3210               	rrcf	___flpack@arg+2,f,c
 19773  004F3E  320F               	rrcf	___flpack@arg+1,f,c
 19774  004F40  320E               	rrcf	___flpack@arg,f,c
 19775  004F42  0012               	return	
 19776  004F44                     __end_ofPL82:
 19777                           	opt stack 0
 19778                           tblptru	equ	0xFF8
 19779                           tblptrh	equ	0xFF7
 19780                           tblptrl	equ	0xFF6
 19781                           tablat	equ	0xFF5
 19782                           prodh	equ	0xFF4
 19783                           prodl	equ	0xFF3
 19784                           intcon	equ	0xFF2
 19785                           postinc0	equ	0xFEE
 19786                           wreg	equ	0xFE8
 19787                           indf1	equ	0xFE7
 19788                           postdec1	equ	0xFE5
 19789                           fsr1h	equ	0xFE2
 19790                           fsr1l	equ	0xFE1
 19791                           indf2	equ	0xFDF
 19792                           postinc2	equ	0xFDE
 19793                           postdec2	equ	0xFDD
 19794                           plusw2	equ	0xFDB
 19795                           fsr2h	equ	0xFDA
 19796                           fsr2l	equ	0xFD9
 19797                           status	equ	0xFD8
 19798                           
 19799 ;; *************** function _vscp_readAppReg *****************
 19800 ;; Defined at:
 19801 ;;		line 1327 in file "../main.c"
 19802 ;; Parameters:    Size  Location     Type
 19803 ;;  reg             1    wreg     unsigned char 
 19804 ;; Auto vars:     Size  Location     Type
 19805 ;;  reg             1   24[COMRAM] unsigned char 
 19806 ;;  pos             1   23[COMRAM] unsigned char 
 19807 ;;  rv              1   25[COMRAM] unsigned char 
 19808 ;; Return value:  Size  Location     Type
 19809 ;;                  1    wreg      unsigned char 
 19810 ;; Registers used:
 19811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19812 ;; Tracked objects:
 19813 ;;		On entry : F/0
 19814 ;;		On exit  : 0/0
 19815 ;;		Unchanged: 0/0
 19816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19818 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19820 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19821 ;;Total ram usage:        3 bytes
 19822 ;; Hardware stack levels used:    1
 19823 ;; Hardware stack levels required when called:    3
 19824 ;; This function calls:
 19825 ;;		_Read_b_eep
 19826 ;; This function is called by:
 19827 ;;		_vscp_readRegister
 19828 ;;		_vscp_handleProtocolEvent
 19829 ;; This function uses a non-reentrant model
 19830 ;;
 19831                           
 19832                           	psect	text99
 19833  001E0E                     __ptext99:
 19834                           	opt stack 0
 19835  001E0E                     _vscp_readAppReg:
 19836                           	opt stack 25
 19837                           
 19838                           ;incstack = 0
 19839                           ;incstack = 0
 19840                           ;vscp_readAppReg@reg stored from wreg
 19841  001E0E  CFE8 F019          	movff	wreg,vscp_readAppReg@reg
 19842                           
 19843                           ; BSR set to: 0
 19844                           ;main.c: 1328: uint8_t rv;
 19845                           ;main.c: 1333: if (0 == vscp_page_select) {
 19846  001E12  5047               	movf	_vscp_page_select+1,w,c
 19847  001E14  1046               	iorwf	_vscp_page_select,w,c
 19848  001E16  E101 D25B          	bz	l11923
 19849  001E1A  D39F               	goto	l11925
 19850  001E1C                     l11721:
 19851                           
 19852                           ; BSR set to: 0
 19853                           ;main.c: 1339: rv = Read_b_eep(0x41);
 19854  001E1C  6A17               	clrf	?_Read_b_eep+1,c
 19855  001E1E  0E41               	movlw	65
 19856  001E20  6E16               	movwf	?_Read_b_eep,c
 19857  001E22  ECC2  F02F         	call	_Read_b_eep	;wreg free
 19858  001E26  D3C6               	goto	L46
 19859  001E28                     l11723:
 19860                           
 19861                           ; BSR set to: 0
 19862                           ;main.c: 1344: rv = Read_b_eep(0x42);
 19863  001E28  6A17               	clrf	?_Read_b_eep+1,c
 19864  001E2A  0E42               	movlw	66
 19865  001E2C  6E16               	movwf	?_Read_b_eep,c
 19866  001E2E  ECC2  F02F         	call	_Read_b_eep	;wreg free
 19867  001E32  D3C0               	goto	L46
 19868  001E34                     l11725:
 19869                           
 19870                           ; BSR set to: 0
 19871                           ;main.c: 1349: rv = Read_b_eep(0x43);
 19872  001E34  6A17               	clrf	?_Read_b_eep+1,c
 19873  001E36  0E43               	movlw	67
 19874  001E38  6E16               	movwf	?_Read_b_eep,c
 19875  001E3A  ECC2  F02F         	call	_Read_b_eep	;wreg free
 19876  001E3E  D3BA               	goto	L46
 19877  001E40                     l11727:
 19878                           
 19879                           ; BSR set to: 0
 19880                           ;main.c: 1354: rv = Read_b_eep(0x44);
 19881  001E40  6A17               	clrf	?_Read_b_eep+1,c
 19882  001E42  0E44               	movlw	68
 19883  001E44  6E16               	movwf	?_Read_b_eep,c
 19884  001E46  ECC2  F02F         	call	_Read_b_eep	;wreg free
 19885  001E4A  D3B4               	goto	L46
 19886  001E4C                     l11729:
 19887                           
 19888                           ; BSR set to: 0
 19889                           ;main.c: 1359: rv = Read_b_eep(0x45);
 19890  001E4C  6A17               	clrf	?_Read_b_eep+1,c
 19891  001E4E  0E45               	movlw	69
 19892  001E50  6E16               	movwf	?_Read_b_eep,c
 19893  001E52  ECC2  F02F         	call	_Read_b_eep	;wreg free
 19894  001E56  D3AE               	goto	L46
 19895  001E58                     l11731:
 19896                           
 19897                           ; BSR set to: 0
 19898                           ;main.c: 1364: rv = Read_b_eep(0x46);
 19899  001E58  6A17               	clrf	?_Read_b_eep+1,c
 19900  001E5A  0E46               	movlw	70
 19901  001E5C  6E16               	movwf	?_Read_b_eep,c
 19902  001E5E  ECC2  F02F         	call	_Read_b_eep	;wreg free
 19903  001E62  D3A8               	goto	L46
 19904  001E64                     l11733:
 19905                           
 19906                           ; BSR set to: 0
 19907                           ;main.c: 1369: rv = Read_b_eep(0x47);
 19908  001E64  6A17               	clrf	?_Read_b_eep+1,c
 19909  001E66  0E47               	movlw	71
 19910  001E68  6E16               	movwf	?_Read_b_eep,c
 19911  001E6A  ECC2  F02F         	call	_Read_b_eep	;wreg free
 19912  001E6E  D3A2               	goto	L46
 19913  001E70                     l11735:
 19914                           
 19915                           ; BSR set to: 0
 19916                           ;main.c: 1374: rv = Read_b_eep(0x48);
 19917  001E70  6A17               	clrf	?_Read_b_eep+1,c
 19918  001E72  0E48               	movlw	72
 19919  001E74  6E16               	movwf	?_Read_b_eep,c
 19920  001E76  ECC2  F02F         	call	_Read_b_eep	;wreg free
 19921  001E7A  D39C               	goto	L46
 19922  001E7C                     l11737:
 19923                           
 19924                           ; BSR set to: 0
 19925                           ;main.c: 1379: rv = ((current_temp[0] & 0xff00) >> 8);
 19926  001E7C  0101               	movlb	1	; () banked
 19927  001E7E  5101               	movf	(_current_temp+1)& (0+255),w,b
 19928  001E80  D399               	goto	L46
 19929  001E82                     l316:
 19930                           
 19931                           ; BSR set to: 0
 19932                           ;main.c: 1384: rv = (current_temp[0] & 0x00ff);
 19933  001E82  C100  F01A         	movff	_current_temp,vscp_readAppReg@rv
 19934                           
 19935                           ;main.c: 1385: break;
 19936  001E86  D397               	goto	l11947
 19937  001E88                     l11739:
 19938                           
 19939                           ; BSR set to: 0
 19940                           ;main.c: 1389: rv = ((current_temp[1] & 0xff00) >> 8);
 19941  001E88  0101               	movlb	1	; () banked
 19942  001E8A  5103               	movf	(_current_temp+3)& (0+255),w,b
 19943  001E8C  D393               	goto	L46
 19944  001E8E                     l318:
 19945                           
 19946                           ; BSR set to: 0
 19947                           ;main.c: 1394: rv = (current_temp[1] & 0x00ff);
 19948  001E8E  C102  F01A         	movff	_current_temp+2,vscp_readAppReg@rv
 19949                           
 19950                           ;main.c: 1395: break;
 19951  001E92  D391               	goto	l11947
 19952  001E94                     l11741:
 19953                           
 19954                           ; BSR set to: 0
 19955                           ;main.c: 1399: rv = ((current_temp[2] & 0xff00) >> 8);
 19956  001E94  0101               	movlb	1	; () banked
 19957  001E96  5105               	movf	(_current_temp+5)& (0+255),w,b
 19958  001E98  D38D               	goto	L46
 19959  001E9A                     l320:
 19960                           
 19961                           ; BSR set to: 0
 19962                           ;main.c: 1404: rv = (current_temp[2] & 0x00ff);
 19963  001E9A  C104  F01A         	movff	_current_temp+4,vscp_readAppReg@rv
 19964                           
 19965                           ;main.c: 1405: break;
 19966  001E9E  D38B               	goto	l11947
 19967  001EA0                     l11743:
 19968                           
 19969                           ; BSR set to: 0
 19970                           ;main.c: 1409: rv = ((current_temp[3] & 0xff00) >> 8);
 19971  001EA0  0101               	movlb	1	; () banked
 19972  001EA2  5107               	movf	(_current_temp+7)& (0+255),w,b
 19973  001EA4  D387               	goto	L46
 19974  001EA6                     l322:
 19975                           
 19976                           ; BSR set to: 0
 19977                           ;main.c: 1414: rv = (current_temp[3] & 0x00ff);
 19978  001EA6  C106  F01A         	movff	_current_temp+6,vscp_readAppReg@rv
 19979                           
 19980                           ;main.c: 1415: break;
 19981  001EAA  D385               	goto	l11947
 19982  001EAC                     l11745:
 19983                           
 19984                           ; BSR set to: 0
 19985                           ;main.c: 1419: rv = ((current_temp[4] & 0xff00) >> 8);
 19986  001EAC  0101               	movlb	1	; () banked
 19987  001EAE  5109               	movf	(_current_temp+9)& (0+255),w,b
 19988  001EB0  D381               	goto	L46
 19989  001EB2                     l324:
 19990                           
 19991                           ; BSR set to: 0
 19992                           ;main.c: 1424: rv = (current_temp[4] & 0x00ff);
 19993  001EB2  C108  F01A         	movff	_current_temp+8,vscp_readAppReg@rv
 19994                           
 19995                           ;main.c: 1425: break;
 19996  001EB6  D37F               	goto	l11947
 19997  001EB8                     l11747:
 19998                           
 19999                           ; BSR set to: 0
 20000                           ;main.c: 1429: rv = ((current_temp[5] & 0xff00) >> 8);
 20001  001EB8  0101               	movlb	1	; () banked
 20002  001EBA  510B               	movf	(_current_temp+11)& (0+255),w,b
 20003  001EBC  D37B               	goto	L46
 20004  001EBE                     l326:
 20005                           
 20006                           ; BSR set to: 0
 20007                           ;main.c: 1434: rv = (current_temp[5] & 0x00ff);
 20008  001EBE  C10A  F01A         	movff	_current_temp+10,vscp_readAppReg@rv
 20009                           
 20010                           ;main.c: 1435: break;
 20011  001EC2  D379               	goto	l11947
 20012  001EC4                     l11749:
 20013                           
 20014                           ; BSR set to: 0
 20015                           ;main.c: 1439: rv = Read_b_eep(0x49);
 20016  001EC4  6A17               	clrf	?_Read_b_eep+1,c
 20017  001EC6  0E49               	movlw	73
 20018  001EC8  6E16               	movwf	?_Read_b_eep,c
 20019  001ECA  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20020  001ECE  D372               	goto	L46
 20021  001ED0                     l11751:
 20022                           
 20023                           ; BSR set to: 0
 20024                           ;main.c: 1444: rv = Read_b_eep(0x4A);
 20025  001ED0  6A17               	clrf	?_Read_b_eep+1,c
 20026  001ED2  0E4A               	movlw	74
 20027  001ED4  6E16               	movwf	?_Read_b_eep,c
 20028  001ED6  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20029  001EDA  D36C               	goto	L46
 20030  001EDC                     l11753:
 20031                           
 20032                           ; BSR set to: 0
 20033                           ;main.c: 1449: rv = Read_b_eep(0x4B);
 20034  001EDC  6A17               	clrf	?_Read_b_eep+1,c
 20035  001EDE  0E4B               	movlw	75
 20036  001EE0  6E16               	movwf	?_Read_b_eep,c
 20037  001EE2  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20038  001EE6  D366               	goto	L46
 20039  001EE8                     l11755:
 20040                           
 20041                           ; BSR set to: 0
 20042                           ;main.c: 1454: rv = Read_b_eep(0x4C);
 20043  001EE8  6A17               	clrf	?_Read_b_eep+1,c
 20044  001EEA  0E4C               	movlw	76
 20045  001EEC  6E16               	movwf	?_Read_b_eep,c
 20046  001EEE  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20047  001EF2  D360               	goto	L46
 20048  001EF4                     l11757:
 20049                           
 20050                           ; BSR set to: 0
 20051                           ;main.c: 1459: rv = Read_b_eep(0x4D);
 20052  001EF4  6A17               	clrf	?_Read_b_eep+1,c
 20053  001EF6  0E4D               	movlw	77
 20054  001EF8  6E16               	movwf	?_Read_b_eep,c
 20055  001EFA  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20056  001EFE  D35A               	goto	L46
 20057  001F00                     l11759:
 20058                           
 20059                           ; BSR set to: 0
 20060                           ;main.c: 1464: rv = Read_b_eep(0x4E);
 20061  001F00  6A17               	clrf	?_Read_b_eep+1,c
 20062  001F02  0E4E               	movlw	78
 20063  001F04  6E16               	movwf	?_Read_b_eep,c
 20064  001F06  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20065  001F0A  D354               	goto	L46
 20066  001F0C                     l11761:
 20067                           
 20068                           ; BSR set to: 0
 20069                           ;main.c: 1471: rv = Read_b_eep(0x4F);
 20070  001F0C  6A17               	clrf	?_Read_b_eep+1,c
 20071  001F0E  0E4F               	movlw	79
 20072  001F10  6E16               	movwf	?_Read_b_eep,c
 20073  001F12  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20074  001F16  D34E               	goto	L46
 20075  001F18                     l11763:
 20076                           
 20077                           ; BSR set to: 0
 20078                           ;main.c: 1476: rv = Read_b_eep(0x50);
 20079  001F18  6A17               	clrf	?_Read_b_eep+1,c
 20080  001F1A  0E50               	movlw	80
 20081  001F1C  6E16               	movwf	?_Read_b_eep,c
 20082  001F1E  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20083  001F22  D348               	goto	L46
 20084  001F24                     l11765:
 20085                           
 20086                           ; BSR set to: 0
 20087                           ;main.c: 1481: rv = Read_b_eep(0x51);
 20088  001F24  6A17               	clrf	?_Read_b_eep+1,c
 20089  001F26  0E51               	movlw	81
 20090  001F28  6E16               	movwf	?_Read_b_eep,c
 20091  001F2A  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20092  001F2E  D342               	goto	L46
 20093  001F30                     l11767:
 20094                           
 20095                           ; BSR set to: 0
 20096                           ;main.c: 1486: rv = Read_b_eep(0x52);
 20097  001F30  6A17               	clrf	?_Read_b_eep+1,c
 20098  001F32  0E52               	movlw	82
 20099  001F34  6E16               	movwf	?_Read_b_eep,c
 20100  001F36  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20101  001F3A  D33C               	goto	L46
 20102  001F3C                     l11769:
 20103                           
 20104                           ; BSR set to: 0
 20105                           ;main.c: 1491: rv = Read_b_eep(0x53);
 20106  001F3C  6A17               	clrf	?_Read_b_eep+1,c
 20107  001F3E  0E53               	movlw	83
 20108  001F40  6E16               	movwf	?_Read_b_eep,c
 20109  001F42  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20110  001F46  D336               	goto	L46
 20111  001F48                     l11771:
 20112                           
 20113                           ; BSR set to: 0
 20114                           ;main.c: 1496: rv = Read_b_eep(0x54);
 20115  001F48  6A17               	clrf	?_Read_b_eep+1,c
 20116  001F4A  0E54               	movlw	84
 20117  001F4C  6E16               	movwf	?_Read_b_eep,c
 20118  001F4E  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20119  001F52  D330               	goto	L46
 20120  001F54                     l11773:
 20121                           
 20122                           ; BSR set to: 0
 20123                           ;main.c: 1501: rv = Read_b_eep(0x55);
 20124  001F54  6A17               	clrf	?_Read_b_eep+1,c
 20125  001F56  0E55               	movlw	85
 20126  001F58  6E16               	movwf	?_Read_b_eep,c
 20127  001F5A  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20128  001F5E  D32A               	goto	L46
 20129  001F60                     l11775:
 20130                           
 20131                           ; BSR set to: 0
 20132                           ;main.c: 1506: rv = Read_b_eep(0x56);
 20133  001F60  6A17               	clrf	?_Read_b_eep+1,c
 20134  001F62  0E56               	movlw	86
 20135  001F64  6E16               	movwf	?_Read_b_eep,c
 20136  001F66  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20137  001F6A  D324               	goto	L46
 20138  001F6C                     l11777:
 20139                           
 20140                           ; BSR set to: 0
 20141                           ;main.c: 1511: rv = Read_b_eep(0x57);
 20142  001F6C  6A17               	clrf	?_Read_b_eep+1,c
 20143  001F6E  0E57               	movlw	87
 20144  001F70  6E16               	movwf	?_Read_b_eep,c
 20145  001F72  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20146  001F76  D31E               	goto	L46
 20147  001F78                     l11779:
 20148                           
 20149                           ; BSR set to: 0
 20150                           ;main.c: 1516: rv = Read_b_eep(0x58);
 20151  001F78  6A17               	clrf	?_Read_b_eep+1,c
 20152  001F7A  0E58               	movlw	88
 20153  001F7C  6E16               	movwf	?_Read_b_eep,c
 20154  001F7E  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20155  001F82  D318               	goto	L46
 20156  001F84                     l11781:
 20157                           
 20158                           ; BSR set to: 0
 20159                           ;main.c: 1521: rv = Read_b_eep(0x59);
 20160  001F84  6A17               	clrf	?_Read_b_eep+1,c
 20161  001F86  0E59               	movlw	89
 20162  001F88  6E16               	movwf	?_Read_b_eep,c
 20163  001F8A  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20164  001F8E  D312               	goto	L46
 20165  001F90                     l11783:
 20166                           
 20167                           ; BSR set to: 0
 20168                           ;main.c: 1526: rv = Read_b_eep(0x5A);
 20169  001F90  6A17               	clrf	?_Read_b_eep+1,c
 20170  001F92  0E5A               	movlw	90
 20171  001F94  6E16               	movwf	?_Read_b_eep,c
 20172  001F96  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20173  001F9A  D30C               	goto	L46
 20174  001F9C                     l11785:
 20175                           
 20176                           ; BSR set to: 0
 20177                           ;main.c: 1535: rv = Read_b_eep(0x5B);
 20178  001F9C  6A17               	clrf	?_Read_b_eep+1,c
 20179  001F9E  0E5B               	movlw	91
 20180  001FA0  6E16               	movwf	?_Read_b_eep,c
 20181  001FA2  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20182  001FA6  D306               	goto	L46
 20183  001FA8                     l11787:
 20184                           
 20185                           ; BSR set to: 0
 20186                           ;main.c: 1540: rv = Read_b_eep(0x5C);
 20187  001FA8  6A17               	clrf	?_Read_b_eep+1,c
 20188  001FAA  0E5C               	movlw	92
 20189  001FAC  6E16               	movwf	?_Read_b_eep,c
 20190  001FAE  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20191  001FB2  D300               	goto	L46
 20192  001FB4                     l11789:
 20193                           
 20194                           ; BSR set to: 0
 20195                           ;main.c: 1545: rv = Read_b_eep(0x5D);
 20196  001FB4  6A17               	clrf	?_Read_b_eep+1,c
 20197  001FB6  0E5D               	movlw	93
 20198  001FB8  6E16               	movwf	?_Read_b_eep,c
 20199  001FBA  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20200  001FBE  D2FA               	goto	L46
 20201  001FC0                     l11791:
 20202                           
 20203                           ; BSR set to: 0
 20204                           ;main.c: 1550: rv = Read_b_eep(0x5E);
 20205  001FC0  6A17               	clrf	?_Read_b_eep+1,c
 20206  001FC2  0E5E               	movlw	94
 20207  001FC4  6E16               	movwf	?_Read_b_eep,c
 20208  001FC6  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20209  001FCA  D2F4               	goto	L46
 20210  001FCC                     l11793:
 20211                           
 20212                           ; BSR set to: 0
 20213                           ;main.c: 1555: rv = Read_b_eep(0x5F);
 20214  001FCC  6A17               	clrf	?_Read_b_eep+1,c
 20215  001FCE  0E5F               	movlw	95
 20216  001FD0  6E16               	movwf	?_Read_b_eep,c
 20217  001FD2  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20218  001FD6  D2EE               	goto	L46
 20219  001FD8                     l11795:
 20220                           
 20221                           ; BSR set to: 0
 20222                           ;main.c: 1560: rv = Read_b_eep(0x60);
 20223  001FD8  6A17               	clrf	?_Read_b_eep+1,c
 20224  001FDA  0E60               	movlw	96
 20225  001FDC  6E16               	movwf	?_Read_b_eep,c
 20226  001FDE  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20227  001FE2  D2E8               	goto	L46
 20228  001FE4                     l11797:
 20229                           
 20230                           ; BSR set to: 0
 20231                           ;main.c: 1565: rv = Read_b_eep(0x61);
 20232  001FE4  6A17               	clrf	?_Read_b_eep+1,c
 20233  001FE6  0E61               	movlw	97
 20234  001FE8  6E16               	movwf	?_Read_b_eep,c
 20235  001FEA  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20236  001FEE  D2E2               	goto	L46
 20237  001FF0                     l11799:
 20238                           
 20239                           ; BSR set to: 0
 20240                           ;main.c: 1570: rv = Read_b_eep(0x62);
 20241  001FF0  6A17               	clrf	?_Read_b_eep+1,c
 20242  001FF2  0E62               	movlw	98
 20243  001FF4  6E16               	movwf	?_Read_b_eep,c
 20244  001FF6  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20245  001FFA  D2DC               	goto	L46
 20246  001FFC                     l11801:
 20247                           
 20248                           ; BSR set to: 0
 20249                           ;main.c: 1575: rv = Read_b_eep(0x63);
 20250  001FFC  6A17               	clrf	?_Read_b_eep+1,c
 20251  001FFE  0E63               	movlw	99
 20252  002000  6E16               	movwf	?_Read_b_eep,c
 20253  002002  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20254  002006  D2D6               	goto	L46
 20255  002008                     l11803:
 20256                           
 20257                           ; BSR set to: 0
 20258                           ;main.c: 1580: rv = Read_b_eep(0x64);
 20259  002008  6A17               	clrf	?_Read_b_eep+1,c
 20260  00200A  0E64               	movlw	100
 20261  00200C  6E16               	movwf	?_Read_b_eep,c
 20262  00200E  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20263  002012  D2D0               	goto	L46
 20264  002014                     l11805:
 20265                           
 20266                           ; BSR set to: 0
 20267                           ;main.c: 1585: rv = Read_b_eep(0x65);
 20268  002014  6A17               	clrf	?_Read_b_eep+1,c
 20269  002016  0E65               	movlw	101
 20270  002018  6E16               	movwf	?_Read_b_eep,c
 20271  00201A  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20272  00201E  D2CA               	goto	L46
 20273  002020                     l11807:
 20274                           
 20275                           ; BSR set to: 0
 20276                           ;main.c: 1590: rv = Read_b_eep(0x66);
 20277  002020  6A17               	clrf	?_Read_b_eep+1,c
 20278  002022  0E66               	movlw	102
 20279  002024  6E16               	movwf	?_Read_b_eep,c
 20280  002026  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20281  00202A  D2C4               	goto	L46
 20282  00202C                     l11809:
 20283                           
 20284                           ; BSR set to: 0
 20285                           ;main.c: 1600: rv = Read_b_eep(0x67);
 20286  00202C  6A17               	clrf	?_Read_b_eep+1,c
 20287  00202E  0E67               	movlw	103
 20288  002030  6E16               	movwf	?_Read_b_eep,c
 20289  002032  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20290  002036  D2BE               	goto	L46
 20291  002038                     l11811:
 20292                           
 20293                           ; BSR set to: 0
 20294                           ;main.c: 1605: rv = Read_b_eep(0x68);
 20295  002038  6A17               	clrf	?_Read_b_eep+1,c
 20296  00203A  0E68               	movlw	104
 20297  00203C  6E16               	movwf	?_Read_b_eep,c
 20298  00203E  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20299  002042  D2B8               	goto	L46
 20300  002044                     l11813:
 20301                           
 20302                           ; BSR set to: 0
 20303                           ;main.c: 1610: rv = Read_b_eep(0x69);
 20304  002044  6A17               	clrf	?_Read_b_eep+1,c
 20305  002046  0E69               	movlw	105
 20306  002048  6E16               	movwf	?_Read_b_eep,c
 20307  00204A  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20308  00204E  D2B2               	goto	L46
 20309  002050                     l11815:
 20310                           
 20311                           ; BSR set to: 0
 20312                           ;main.c: 1615: rv = Read_b_eep(0x6A);
 20313  002050  6A17               	clrf	?_Read_b_eep+1,c
 20314  002052  0E6A               	movlw	106
 20315  002054  6E16               	movwf	?_Read_b_eep,c
 20316  002056  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20317  00205A  D2AC               	goto	L46
 20318  00205C                     l11817:
 20319                           
 20320                           ; BSR set to: 0
 20321                           ;main.c: 1620: rv = Read_b_eep(0x6B);
 20322  00205C  6A17               	clrf	?_Read_b_eep+1,c
 20323  00205E  0E6B               	movlw	107
 20324  002060  6E16               	movwf	?_Read_b_eep,c
 20325  002062  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20326  002066  D2A6               	goto	L46
 20327  002068                     l11819:
 20328                           
 20329                           ; BSR set to: 0
 20330                           ;main.c: 1625: rv = Read_b_eep(0x6C);
 20331  002068  6A17               	clrf	?_Read_b_eep+1,c
 20332  00206A  0E6C               	movlw	108
 20333  00206C  6E16               	movwf	?_Read_b_eep,c
 20334  00206E  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20335  002072  D2A0               	goto	L46
 20336  002074                     l11821:
 20337                           
 20338                           ; BSR set to: 0
 20339                           ;main.c: 1630: rv = Read_b_eep(0x6D);
 20340  002074  6A17               	clrf	?_Read_b_eep+1,c
 20341  002076  0E6D               	movlw	109
 20342  002078  6E16               	movwf	?_Read_b_eep,c
 20343  00207A  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20344  00207E  D29A               	goto	L46
 20345  002080                     l11823:
 20346                           
 20347                           ; BSR set to: 0
 20348                           ;main.c: 1635: rv = Read_b_eep(0x6E);
 20349  002080  6A17               	clrf	?_Read_b_eep+1,c
 20350  002082  0E6E               	movlw	110
 20351  002084  6E16               	movwf	?_Read_b_eep,c
 20352  002086  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20353  00208A  D294               	goto	L46
 20354  00208C                     l11825:
 20355                           
 20356                           ; BSR set to: 0
 20357                           ;main.c: 1640: rv = Read_b_eep(0x6F);
 20358  00208C  6A17               	clrf	?_Read_b_eep+1,c
 20359  00208E  0E6F               	movlw	111
 20360  002090  6E16               	movwf	?_Read_b_eep,c
 20361  002092  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20362  002096  D28E               	goto	L46
 20363  002098                     l11827:
 20364                           
 20365                           ; BSR set to: 0
 20366                           ;main.c: 1645: rv = Read_b_eep(0x70);
 20367  002098  6A17               	clrf	?_Read_b_eep+1,c
 20368  00209A  0E70               	movlw	112
 20369  00209C  6E16               	movwf	?_Read_b_eep,c
 20370  00209E  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20371  0020A2  D288               	goto	L46
 20372  0020A4                     l11829:
 20373                           
 20374                           ; BSR set to: 0
 20375                           ;main.c: 1650: rv = Read_b_eep(0x71);
 20376  0020A4  6A17               	clrf	?_Read_b_eep+1,c
 20377  0020A6  0E71               	movlw	113
 20378  0020A8  6E16               	movwf	?_Read_b_eep,c
 20379  0020AA  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20380  0020AE  D282               	goto	L46
 20381  0020B0                     l11831:
 20382                           
 20383                           ; BSR set to: 0
 20384                           ;main.c: 1655: rv = Read_b_eep(0x72);
 20385  0020B0  6A17               	clrf	?_Read_b_eep+1,c
 20386  0020B2  0E72               	movlw	114
 20387  0020B4  6E16               	movwf	?_Read_b_eep,c
 20388  0020B6  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20389  0020BA  D27C               	goto	L46
 20390  0020BC                     l11833:
 20391                           
 20392                           ; BSR set to: 0
 20393                           ;main.c: 1664: rv = Read_b_eep(0x73);
 20394  0020BC  6A17               	clrf	?_Read_b_eep+1,c
 20395  0020BE  0E73               	movlw	115
 20396  0020C0  6E16               	movwf	?_Read_b_eep,c
 20397  0020C2  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20398  0020C6  D276               	goto	L46
 20399  0020C8                     l11835:
 20400                           
 20401                           ; BSR set to: 0
 20402                           ;main.c: 1669: rv = Read_b_eep(0x74);
 20403  0020C8  6A17               	clrf	?_Read_b_eep+1,c
 20404  0020CA  0E74               	movlw	116
 20405  0020CC  6E16               	movwf	?_Read_b_eep,c
 20406  0020CE  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20407  0020D2  D270               	goto	L46
 20408  0020D4                     l11837:
 20409                           
 20410                           ; BSR set to: 0
 20411                           ;main.c: 1674: rv = Read_b_eep(0x75);
 20412  0020D4  6A17               	clrf	?_Read_b_eep+1,c
 20413  0020D6  0E75               	movlw	117
 20414  0020D8  6E16               	movwf	?_Read_b_eep,c
 20415  0020DA  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20416  0020DE  D26A               	goto	L46
 20417  0020E0                     l11839:
 20418                           
 20419                           ; BSR set to: 0
 20420                           ;main.c: 1679: rv = Read_b_eep(0x76);
 20421  0020E0  6A17               	clrf	?_Read_b_eep+1,c
 20422  0020E2  0E76               	movlw	118
 20423  0020E4  6E16               	movwf	?_Read_b_eep,c
 20424  0020E6  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20425  0020EA  D264               	goto	L46
 20426  0020EC                     l11841:
 20427                           
 20428                           ; BSR set to: 0
 20429                           ;main.c: 1684: rv = Read_b_eep(0x77);
 20430  0020EC  6A17               	clrf	?_Read_b_eep+1,c
 20431  0020EE  0E77               	movlw	119
 20432  0020F0  6E16               	movwf	?_Read_b_eep,c
 20433  0020F2  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20434  0020F6  D25E               	goto	L46
 20435  0020F8                     l11843:
 20436                           
 20437                           ; BSR set to: 0
 20438                           ;main.c: 1689: rv = Read_b_eep(0x78);
 20439  0020F8  6A17               	clrf	?_Read_b_eep+1,c
 20440  0020FA  0E78               	movlw	120
 20441  0020FC  6E16               	movwf	?_Read_b_eep,c
 20442  0020FE  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20443  002102  D258               	goto	L46
 20444  002104                     l11845:
 20445                           
 20446                           ; BSR set to: 0
 20447                           ;main.c: 1694: rv = Read_b_eep(0x79);
 20448  002104  6A17               	clrf	?_Read_b_eep+1,c
 20449  002106  0E79               	movlw	121
 20450  002108  6E16               	movwf	?_Read_b_eep,c
 20451  00210A  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20452  00210E  D252               	goto	L46
 20453  002110                     l11847:
 20454                           
 20455                           ; BSR set to: 0
 20456                           ;main.c: 1699: rv = Read_b_eep(0x7A);
 20457  002110  6A17               	clrf	?_Read_b_eep+1,c
 20458  002112  0E7A               	movlw	122
 20459  002114  6E16               	movwf	?_Read_b_eep,c
 20460  002116  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20461  00211A  D24C               	goto	L46
 20462  00211C                     l11849:
 20463                           
 20464                           ; BSR set to: 0
 20465                           ;main.c: 1704: rv = Read_b_eep(0x7B);
 20466  00211C  6A17               	clrf	?_Read_b_eep+1,c
 20467  00211E  0E7B               	movlw	123
 20468  002120  6E16               	movwf	?_Read_b_eep,c
 20469  002122  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20470  002126  D246               	goto	L46
 20471  002128                     l11851:
 20472                           
 20473                           ; BSR set to: 0
 20474                           ;main.c: 1709: rv = Read_b_eep(0x7C);
 20475  002128  6A17               	clrf	?_Read_b_eep+1,c
 20476  00212A  0E7C               	movlw	124
 20477  00212C  6E16               	movwf	?_Read_b_eep,c
 20478  00212E  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20479  002132  D240               	goto	L46
 20480  002134                     l11853:
 20481                           
 20482                           ; BSR set to: 0
 20483                           ;main.c: 1714: rv = Read_b_eep(0x7D);
 20484  002134  6A17               	clrf	?_Read_b_eep+1,c
 20485  002136  0E7D               	movlw	125
 20486  002138  6E16               	movwf	?_Read_b_eep,c
 20487  00213A  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20488  00213E  D23A               	goto	L46
 20489  002140                     l11855:
 20490                           
 20491                           ; BSR set to: 0
 20492                           ;main.c: 1719: rv = Read_b_eep(0x7E);
 20493  002140  6A17               	clrf	?_Read_b_eep+1,c
 20494  002142  0E7E               	movlw	126
 20495  002144  6E16               	movwf	?_Read_b_eep,c
 20496  002146  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20497  00214A  D234               	goto	L46
 20498  00214C                     l11857:
 20499                           
 20500                           ; BSR set to: 0
 20501                           ;main.c: 1728: rv = Read_b_eep(0x7F);
 20502  00214C  6A17               	clrf	?_Read_b_eep+1,c
 20503  00214E  0E7F               	movlw	127
 20504  002150  6E16               	movwf	?_Read_b_eep,c
 20505  002152  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20506  002156  D22E               	goto	L46
 20507  002158                     l11859:
 20508                           
 20509                           ; BSR set to: 0
 20510                           ;main.c: 1733: rv = Read_b_eep(0x80);
 20511  002158  6A17               	clrf	?_Read_b_eep+1,c
 20512  00215A  0E80               	movlw	128
 20513  00215C  6E16               	movwf	?_Read_b_eep,c
 20514  00215E  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20515  002162  D228               	goto	L46
 20516  002164                     l11861:
 20517                           
 20518                           ; BSR set to: 0
 20519                           ;main.c: 1738: rv = Read_b_eep(0x81);
 20520  002164  6A17               	clrf	?_Read_b_eep+1,c
 20521  002166  0E81               	movlw	129
 20522  002168  6E16               	movwf	?_Read_b_eep,c
 20523  00216A  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20524  00216E  D222               	goto	L46
 20525  002170                     l11863:
 20526                           
 20527                           ; BSR set to: 0
 20528                           ;main.c: 1743: rv = Read_b_eep(0x82);
 20529  002170  6A17               	clrf	?_Read_b_eep+1,c
 20530  002172  0E82               	movlw	130
 20531  002174  6E16               	movwf	?_Read_b_eep,c
 20532  002176  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20533  00217A  D21C               	goto	L46
 20534  00217C                     l11865:
 20535                           
 20536                           ; BSR set to: 0
 20537                           ;main.c: 1748: rv = Read_b_eep(0x83);
 20538  00217C  6A17               	clrf	?_Read_b_eep+1,c
 20539  00217E  0E83               	movlw	131
 20540  002180  6E16               	movwf	?_Read_b_eep,c
 20541  002182  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20542  002186  D216               	goto	L46
 20543  002188                     l11867:
 20544                           
 20545                           ; BSR set to: 0
 20546                           ;main.c: 1753: rv = Read_b_eep(0x84);
 20547  002188  6A17               	clrf	?_Read_b_eep+1,c
 20548  00218A  0E84               	movlw	132
 20549  00218C  6E16               	movwf	?_Read_b_eep,c
 20550  00218E  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20551  002192  D210               	goto	L46
 20552  002194                     l11869:
 20553                           
 20554                           ; BSR set to: 0
 20555                           ;main.c: 1758: rv = Read_b_eep(0x85);
 20556  002194  6A17               	clrf	?_Read_b_eep+1,c
 20557  002196  0E85               	movlw	133
 20558  002198  6E16               	movwf	?_Read_b_eep,c
 20559  00219A  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20560  00219E  D20A               	goto	L46
 20561  0021A0                     l11871:
 20562                           
 20563                           ; BSR set to: 0
 20564                           ;main.c: 1763: rv = Read_b_eep(0x86);
 20565  0021A0  6A17               	clrf	?_Read_b_eep+1,c
 20566  0021A2  0E86               	movlw	134
 20567  0021A4  6E16               	movwf	?_Read_b_eep,c
 20568  0021A6  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20569  0021AA  D204               	goto	L46
 20570  0021AC                     l11873:
 20571                           
 20572                           ; BSR set to: 0
 20573                           ;main.c: 1768: rv = Read_b_eep(0x87);
 20574  0021AC  6A17               	clrf	?_Read_b_eep+1,c
 20575  0021AE  0E87               	movlw	135
 20576  0021B0  6E16               	movwf	?_Read_b_eep,c
 20577  0021B2  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20578  0021B6  D1FE               	goto	L46
 20579  0021B8                     l11875:
 20580                           
 20581                           ; BSR set to: 0
 20582                           ;main.c: 1773: rv = Read_b_eep(0x88);
 20583  0021B8  6A17               	clrf	?_Read_b_eep+1,c
 20584  0021BA  0E88               	movlw	136
 20585  0021BC  6E16               	movwf	?_Read_b_eep,c
 20586  0021BE  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20587  0021C2  D1F8               	goto	L46
 20588  0021C4                     l11877:
 20589                           
 20590                           ; BSR set to: 0
 20591                           ;main.c: 1778: rv = Read_b_eep(0x89);
 20592  0021C4  6A17               	clrf	?_Read_b_eep+1,c
 20593  0021C6  0E89               	movlw	137
 20594  0021C8  6E16               	movwf	?_Read_b_eep,c
 20595  0021CA  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20596  0021CE  D1F2               	goto	L46
 20597  0021D0                     l11879:
 20598                           
 20599                           ; BSR set to: 0
 20600                           ;main.c: 1783: rv = Read_b_eep(0x8A);
 20601  0021D0  6A17               	clrf	?_Read_b_eep+1,c
 20602  0021D2  0E8A               	movlw	138
 20603  0021D4  6E16               	movwf	?_Read_b_eep,c
 20604  0021D6  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20605  0021DA  D1EC               	goto	L46
 20606  0021DC                     l11881:
 20607                           
 20608                           ; BSR set to: 0
 20609                           ;main.c: 1792: rv = Read_b_eep(0x8B);
 20610  0021DC  6A17               	clrf	?_Read_b_eep+1,c
 20611  0021DE  0E8B               	movlw	139
 20612  0021E0  6E16               	movwf	?_Read_b_eep,c
 20613  0021E2  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20614  0021E6  D1E6               	goto	L46
 20615  0021E8                     l11883:
 20616                           
 20617                           ; BSR set to: 0
 20618                           ;main.c: 1797: rv = Read_b_eep(0x8C);
 20619  0021E8  6A17               	clrf	?_Read_b_eep+1,c
 20620  0021EA  0E8C               	movlw	140
 20621  0021EC  6E16               	movwf	?_Read_b_eep,c
 20622  0021EE  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20623  0021F2  D1E0               	goto	L46
 20624  0021F4                     l11885:
 20625                           
 20626                           ; BSR set to: 0
 20627                           ;main.c: 1802: rv = Read_b_eep(0x8D);
 20628  0021F4  6A17               	clrf	?_Read_b_eep+1,c
 20629  0021F6  0E8D               	movlw	141
 20630  0021F8  6E16               	movwf	?_Read_b_eep,c
 20631  0021FA  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20632  0021FE  D1DA               	goto	L46
 20633  002200                     l11887:
 20634                           
 20635                           ; BSR set to: 0
 20636                           ;main.c: 1807: rv = Read_b_eep(0x8E);
 20637  002200  6A17               	clrf	?_Read_b_eep+1,c
 20638  002202  0E8E               	movlw	142
 20639  002204  6E16               	movwf	?_Read_b_eep,c
 20640  002206  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20641  00220A  D1D4               	goto	L46
 20642  00220C                     l11889:
 20643                           
 20644                           ; BSR set to: 0
 20645                           ;main.c: 1812: rv = Read_b_eep(0x8F);
 20646  00220C  6A17               	clrf	?_Read_b_eep+1,c
 20647  00220E  0E8F               	movlw	143
 20648  002210  6E16               	movwf	?_Read_b_eep,c
 20649  002212  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20650  002216  D1CE               	goto	L46
 20651  002218                     l11891:
 20652                           
 20653                           ; BSR set to: 0
 20654                           ;main.c: 1817: rv = Read_b_eep(0x90);
 20655  002218  6A17               	clrf	?_Read_b_eep+1,c
 20656  00221A  0E90               	movlw	144
 20657  00221C  6E16               	movwf	?_Read_b_eep,c
 20658  00221E  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20659  002222  D1C8               	goto	L46
 20660  002224                     l11893:
 20661                           
 20662                           ; BSR set to: 0
 20663                           ;main.c: 1822: rv = Read_b_eep(0x91);
 20664  002224  6A17               	clrf	?_Read_b_eep+1,c
 20665  002226  0E91               	movlw	145
 20666  002228  6E16               	movwf	?_Read_b_eep,c
 20667  00222A  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20668  00222E  D1C2               	goto	L46
 20669  002230                     l11895:
 20670                           
 20671                           ; BSR set to: 0
 20672                           ;main.c: 1827: rv = Read_b_eep(0x92);
 20673  002230  6A17               	clrf	?_Read_b_eep+1,c
 20674  002232  0E92               	movlw	146
 20675  002234  6E16               	movwf	?_Read_b_eep,c
 20676  002236  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20677  00223A  D1BC               	goto	L46
 20678  00223C                     l11897:
 20679                           
 20680                           ; BSR set to: 0
 20681                           ;main.c: 1832: rv = Read_b_eep(0x93);
 20682  00223C  6A17               	clrf	?_Read_b_eep+1,c
 20683  00223E  0E93               	movlw	147
 20684  002240  6E16               	movwf	?_Read_b_eep,c
 20685  002242  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20686  002246  D1B6               	goto	L46
 20687  002248                     l11899:
 20688                           
 20689                           ; BSR set to: 0
 20690                           ;main.c: 1837: rv = Read_b_eep(0x94);
 20691  002248  6A17               	clrf	?_Read_b_eep+1,c
 20692  00224A  0E94               	movlw	148
 20693  00224C  6E16               	movwf	?_Read_b_eep,c
 20694  00224E  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20695  002252  D1B0               	goto	L46
 20696  002254                     l11901:
 20697                           
 20698                           ; BSR set to: 0
 20699                           ;main.c: 1842: rv = Read_b_eep(0x95);
 20700  002254  6A17               	clrf	?_Read_b_eep+1,c
 20701  002256  0E95               	movlw	149
 20702  002258  6E16               	movwf	?_Read_b_eep,c
 20703  00225A  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20704  00225E  D1AA               	goto	L46
 20705  002260                     l11903:
 20706                           
 20707                           ; BSR set to: 0
 20708                           ;main.c: 1847: rv = Read_b_eep(0x96);
 20709  002260  6A17               	clrf	?_Read_b_eep+1,c
 20710  002262  0E96               	movlw	150
 20711  002264  6E16               	movwf	?_Read_b_eep,c
 20712  002266  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20713  00226A  D1A4               	goto	L46
 20714  00226C                     l11905:
 20715                           
 20716                           ; BSR set to: 0
 20717                           ;main.c: 1857: rv = Read_b_eep(0x97);
 20718  00226C  6A17               	clrf	?_Read_b_eep+1,c
 20719  00226E  0E97               	movlw	151
 20720  002270  6E16               	movwf	?_Read_b_eep,c
 20721  002272  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20722  002276  D19E               	goto	L46
 20723  002278                     l11907:
 20724                           
 20725                           ; BSR set to: 0
 20726                           ;main.c: 1862: rv = Read_b_eep(0x98);
 20727  002278  6A17               	clrf	?_Read_b_eep+1,c
 20728  00227A  0E98               	movlw	152
 20729  00227C  6E16               	movwf	?_Read_b_eep,c
 20730  00227E  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20731  002282  D198               	goto	L46
 20732  002284                     l11909:
 20733                           
 20734                           ; BSR set to: 0
 20735                           ;main.c: 1867: rv = Read_b_eep(0x99);
 20736  002284  6A17               	clrf	?_Read_b_eep+1,c
 20737  002286  0E99               	movlw	153
 20738  002288  6E16               	movwf	?_Read_b_eep,c
 20739  00228A  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20740  00228E  D192               	goto	L46
 20741  002290                     l11911:
 20742                           
 20743                           ; BSR set to: 0
 20744                           ;main.c: 1872: rv = Read_b_eep(0x9A);
 20745  002290  6A17               	clrf	?_Read_b_eep+1,c
 20746  002292  0E9A               	movlw	154
 20747  002294  6E16               	movwf	?_Read_b_eep,c
 20748  002296  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20749  00229A  D18C               	goto	L46
 20750  00229C                     l11913:
 20751                           
 20752                           ; BSR set to: 0
 20753                           ;main.c: 1877: rv = Read_b_eep(0x9B);
 20754  00229C  6A17               	clrf	?_Read_b_eep+1,c
 20755  00229E  0E9B               	movlw	155
 20756  0022A0  6E16               	movwf	?_Read_b_eep,c
 20757  0022A2  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20758  0022A6  D186               	goto	L46
 20759  0022A8                     l11915:
 20760                           
 20761                           ; BSR set to: 0
 20762                           ;main.c: 1882: rv = Read_b_eep(0x9C);
 20763  0022A8  6A17               	clrf	?_Read_b_eep+1,c
 20764  0022AA  0E9C               	movlw	156
 20765  0022AC  6E16               	movwf	?_Read_b_eep,c
 20766  0022AE  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20767  0022B2  D180               	goto	L46
 20768  0022B4                     l411:
 20769                           
 20770                           ; BSR set to: 0
 20771                           ;main.c: 1887: rv = 0;
 20772  0022B4  6A1A               	clrf	vscp_readAppReg@rv,c
 20773                           
 20774                           ;main.c: 1888: break;
 20775  0022B6  D17F               	goto	l11947
 20776  0022B8                     l11917:
 20777                           
 20778                           ; BSR set to: 0
 20779                           ;main.c: 1897: rv = Read_b_eep(0xF2);
 20780  0022B8  6A17               	clrf	?_Read_b_eep+1,c
 20781  0022BA  0EF2               	movlw	242
 20782  0022BC  6E16               	movwf	?_Read_b_eep,c
 20783  0022BE  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20784  0022C2  D178               	goto	L46
 20785  0022C4                     l11919:
 20786                           
 20787                           ; BSR set to: 0
 20788                           ;main.c: 1902: rv = Read_b_eep(0xF3);
 20789  0022C4  6A17               	clrf	?_Read_b_eep+1,c
 20790  0022C6  0EF3               	movlw	243
 20791  0022C8  6E16               	movwf	?_Read_b_eep,c
 20792  0022CA  ECC2  F02F         	call	_Read_b_eep	;wreg free
 20793  0022CE  D172               	goto	L46
 20794  0022D0                     l11923:
 20795                           
 20796                           ; BSR set to: 0
 20797  0022D0  5019               	movf	vscp_readAppReg@reg,w,c
 20798                           
 20799                           ; Switch size 1, requested type "space"
 20800                           ; Number of cases is 108, Range of values is 0 to 119
 20801                           ; switch strategies available:
 20802                           ; Name         Instructions Cycles
 20803                           ; simple_byte          325   163 (average)
 20804                           ;	Chosen strategy is simple_byte
 20805  0022D2  E101 D5A3          	bz	l11721
 20806  0022D6  0A01               	xorlw	1	; case 1
 20807  0022D8  E101 D5A6          	bz	l11723
 20808  0022DC  0A03               	xorlw	3	; case 2
 20809  0022DE  E101 D5A9          	bz	l11725
 20810  0022E2  0A01               	xorlw	1	; case 3
 20811  0022E4  E101 D5AC          	bz	l11727
 20812  0022E8  0A07               	xorlw	7	; case 4
 20813  0022EA  E101 D5AF          	bz	l11729
 20814  0022EE  0A01               	xorlw	1	; case 5
 20815  0022F0  E101 D5B2          	bz	l11731
 20816  0022F4  0A03               	xorlw	3	; case 6
 20817  0022F6  E101 D5B5          	bz	l11733
 20818  0022FA  0A01               	xorlw	1	; case 7
 20819  0022FC  E101 D5B8          	bz	l11735
 20820  002300  0A0F               	xorlw	15	; case 8
 20821  002302  E101 D5BB          	bz	l11737
 20822  002306  0A01               	xorlw	1	; case 9
 20823  002308  E101 D5BB          	bz	l316
 20824  00230C  0A03               	xorlw	3	; case 10
 20825  00230E  E101 D5BB          	bz	l11739
 20826  002312  0A01               	xorlw	1	; case 11
 20827  002314  E101 D5BB          	bz	l318
 20828  002318  0A07               	xorlw	7	; case 12
 20829  00231A  E101 D5BB          	bz	l11741
 20830  00231E  0A01               	xorlw	1	; case 13
 20831  002320  E101 D5BB          	bz	l320
 20832  002324  0A03               	xorlw	3	; case 14
 20833  002326  E101 D5BB          	bz	l11743
 20834  00232A  0A01               	xorlw	1	; case 15
 20835  00232C  E101 D5BB          	bz	l322
 20836  002330  0A1F               	xorlw	31	; case 16
 20837  002332  E101 D5BB          	bz	l11745
 20838  002336  0A01               	xorlw	1	; case 17
 20839  002338  E101 D5BB          	bz	l324
 20840  00233C  0A03               	xorlw	3	; case 18
 20841  00233E  E101 D5BB          	bz	l11747
 20842  002342  0A01               	xorlw	1	; case 19
 20843  002344  E101 D5BB          	bz	l326
 20844  002348  0A07               	xorlw	7	; case 20
 20845  00234A  E101 D5BB          	bz	l11749
 20846  00234E  0A01               	xorlw	1	; case 21
 20847  002350  E101 D5BE          	bz	l11751
 20848  002354  0A03               	xorlw	3	; case 22
 20849  002356  E101 D5C1          	bz	l11753
 20850  00235A  0A01               	xorlw	1	; case 23
 20851  00235C  E101 D5C4          	bz	l11755
 20852  002360  0A0F               	xorlw	15	; case 24
 20853  002362  E101 D5C7          	bz	l11757
 20854  002366  0A01               	xorlw	1	; case 25
 20855  002368  E101 D5CA          	bz	l11759
 20856  00236C  0A3F               	xorlw	63	; case 38
 20857  00236E  E101 D5CD          	bz	l11761
 20858  002372  0A01               	xorlw	1	; case 39
 20859  002374  E101 D5D0          	bz	l11763
 20860  002378  0A0F               	xorlw	15	; case 40
 20861  00237A  E101 D5D3          	bz	l11765
 20862  00237E  0A01               	xorlw	1	; case 41
 20863  002380  E101 D5D6          	bz	l11767
 20864  002384  0A03               	xorlw	3	; case 42
 20865  002386  E101 D5D9          	bz	l11769
 20866  00238A  0A01               	xorlw	1	; case 43
 20867  00238C  E101 D5DC          	bz	l11771
 20868  002390  0A07               	xorlw	7	; case 44
 20869  002392  E101 D5DF          	bz	l11773
 20870  002396  0A01               	xorlw	1	; case 45
 20871  002398  E101 D5E2          	bz	l11775
 20872  00239C  0A03               	xorlw	3	; case 46
 20873  00239E  E101 D5E5          	bz	l11777
 20874  0023A2  0A01               	xorlw	1	; case 47
 20875  0023A4  E101 D5E8          	bz	l11779
 20876  0023A8  0A1F               	xorlw	31	; case 48
 20877  0023AA  E101 D5EB          	bz	l11781
 20878  0023AE  0A01               	xorlw	1	; case 49
 20879  0023B0  E101 D5EE          	bz	l11783
 20880  0023B4  0A03               	xorlw	3	; case 50
 20881  0023B6  E101 D5F1          	bz	l11785
 20882  0023BA  0A01               	xorlw	1	; case 51
 20883  0023BC  E101 D5F4          	bz	l11787
 20884  0023C0  0A07               	xorlw	7	; case 52
 20885  0023C2  E101 D5F7          	bz	l11789
 20886  0023C6  0A01               	xorlw	1	; case 53
 20887  0023C8  E101 D5FA          	bz	l11791
 20888  0023CC  0A03               	xorlw	3	; case 54
 20889  0023CE  E101 D5FD          	bz	l11793
 20890  0023D2  0A01               	xorlw	1	; case 55
 20891  0023D4  E101 D600          	bz	l11795
 20892  0023D8  0A0F               	xorlw	15	; case 56
 20893  0023DA  E101 D603          	bz	l11797
 20894  0023DE  0A01               	xorlw	1	; case 57
 20895  0023E0  E101 D606          	bz	l11799
 20896  0023E4  0A03               	xorlw	3	; case 58
 20897  0023E6  E101 D609          	bz	l11801
 20898  0023EA  0A01               	xorlw	1	; case 59
 20899  0023EC  E101 D60C          	bz	l11803
 20900  0023F0  0A07               	xorlw	7	; case 60
 20901  0023F2  E101 D60F          	bz	l11805
 20902  0023F6  0A01               	xorlw	1	; case 61
 20903  0023F8  E101 D612          	bz	l11807
 20904  0023FC  0A03               	xorlw	3	; case 62
 20905  0023FE  E101 D615          	bz	l11809
 20906  002402  0A01               	xorlw	1	; case 63
 20907  002404  E101 D618          	bz	l11811
 20908  002408  0A7F               	xorlw	127	; case 64
 20909  00240A  E101 D61B          	bz	l11813
 20910  00240E  0A01               	xorlw	1	; case 65
 20911  002410  E101 D61E          	bz	l11815
 20912  002414  0A03               	xorlw	3	; case 66
 20913  002416  E101 D621          	bz	l11817
 20914  00241A  0A01               	xorlw	1	; case 67
 20915  00241C  E101 D624          	bz	l11819
 20916  002420  0A07               	xorlw	7	; case 68
 20917  002422  E101 D627          	bz	l11821
 20918  002426  0A01               	xorlw	1	; case 69
 20919  002428  E101 D62A          	bz	l11823
 20920  00242C  0A03               	xorlw	3	; case 70
 20921  00242E  E101 D62D          	bz	l11825
 20922  002432  0A01               	xorlw	1	; case 71
 20923  002434  E101 D630          	bz	l11827
 20924  002438  0A0F               	xorlw	15	; case 72
 20925  00243A  E101 D633          	bz	l11829
 20926  00243E  0A01               	xorlw	1	; case 73
 20927  002440  E101 D636          	bz	l11831
 20928  002444  0A03               	xorlw	3	; case 74
 20929  002446  E101 D639          	bz	l11833
 20930  00244A  0A01               	xorlw	1	; case 75
 20931  00244C  E101 D63C          	bz	l11835
 20932  002450  0A07               	xorlw	7	; case 76
 20933  002452  E101 D63F          	bz	l11837
 20934  002456  0A01               	xorlw	1	; case 77
 20935  002458  E101 D642          	bz	l11839
 20936  00245C  0A03               	xorlw	3	; case 78
 20937  00245E  E101 D645          	bz	l11841
 20938  002462  0A01               	xorlw	1	; case 79
 20939  002464  E101 D648          	bz	l11843
 20940  002468  0A1F               	xorlw	31	; case 80
 20941  00246A  E101 D64B          	bz	l11845
 20942  00246E  0A01               	xorlw	1	; case 81
 20943  002470  E101 D64E          	bz	l11847
 20944  002474  0A03               	xorlw	3	; case 82
 20945  002476  E101 D651          	bz	l11849
 20946  00247A  0A01               	xorlw	1	; case 83
 20947  00247C  E101 D654          	bz	l11851
 20948  002480  0A07               	xorlw	7	; case 84
 20949  002482  E101 D657          	bz	l11853
 20950  002486  0A01               	xorlw	1	; case 85
 20951  002488  E101 D65A          	bz	l11855
 20952  00248C  0A03               	xorlw	3	; case 86
 20953  00248E  E101 D65D          	bz	l11857
 20954  002492  0A01               	xorlw	1	; case 87
 20955  002494  E101 D660          	bz	l11859
 20956  002498  0A0F               	xorlw	15	; case 88
 20957  00249A  E101 D663          	bz	l11861
 20958  00249E  0A01               	xorlw	1	; case 89
 20959  0024A0  E101 D666          	bz	l11863
 20960  0024A4  0A03               	xorlw	3	; case 90
 20961  0024A6  E101 D669          	bz	l11865
 20962  0024AA  0A01               	xorlw	1	; case 91
 20963  0024AC  E101 D66C          	bz	l11867
 20964  0024B0  0A07               	xorlw	7	; case 92
 20965  0024B2  E101 D66F          	bz	l11869
 20966  0024B6  0A01               	xorlw	1	; case 93
 20967  0024B8  E101 D672          	bz	l11871
 20968  0024BC  0A03               	xorlw	3	; case 94
 20969  0024BE  E101 D675          	bz	l11873
 20970  0024C2  0A01               	xorlw	1	; case 95
 20971  0024C4  E101 D678          	bz	l11875
 20972  0024C8  0A3F               	xorlw	63	; case 96
 20973  0024CA  E101 D67B          	bz	l11877
 20974  0024CE  0A01               	xorlw	1	; case 97
 20975  0024D0  E101 D67E          	bz	l11879
 20976  0024D4  0A03               	xorlw	3	; case 98
 20977  0024D6  E101 D681          	bz	l11881
 20978  0024DA  0A01               	xorlw	1	; case 99
 20979  0024DC  E101 D684          	bz	l11883
 20980  0024E0  0A07               	xorlw	7	; case 100
 20981  0024E2  E101 D687          	bz	l11885
 20982  0024E6  0A01               	xorlw	1	; case 101
 20983  0024E8  E101 D68A          	bz	l11887
 20984  0024EC  0A03               	xorlw	3	; case 102
 20985  0024EE  E101 D68D          	bz	l11889
 20986  0024F2  0A01               	xorlw	1	; case 103
 20987  0024F4  E101 D690          	bz	l11891
 20988  0024F8  0A0F               	xorlw	15	; case 104
 20989  0024FA  E101 D693          	bz	l11893
 20990  0024FE  0A01               	xorlw	1	; case 105
 20991  002500  E101 D696          	bz	l11895
 20992  002504  0A03               	xorlw	3	; case 106
 20993  002506  E101 D699          	bz	l11897
 20994  00250A  0A01               	xorlw	1	; case 107
 20995  00250C  E101 D69C          	bz	l11899
 20996  002510  0A07               	xorlw	7	; case 108
 20997  002512  E101 D69F          	bz	l11901
 20998  002516  0A01               	xorlw	1	; case 109
 20999  002518  E101 D6A2          	bz	l11903
 21000  00251C  0A03               	xorlw	3	; case 110
 21001  00251E  E101 D6A5          	bz	l11905
 21002  002522  0A01               	xorlw	1	; case 111
 21003  002524  E101 D6A8          	bz	l11907
 21004  002528  0A1F               	xorlw	31	; case 112
 21005  00252A  E101 D6AB          	bz	l11909
 21006  00252E  0A01               	xorlw	1	; case 113
 21007  002530  E101 D6AE          	bz	l11911
 21008  002534  0A03               	xorlw	3	; case 114
 21009  002536  E101 D6B1          	bz	l11913
 21010  00253A  0A01               	xorlw	1	; case 115
 21011  00253C  E101 D6B4          	bz	l11915
 21012  002540  0A07               	xorlw	7	; case 116
 21013  002542  E101 D6B7          	bz	l411
 21014  002546  0A01               	xorlw	1	; case 117
 21015  002548  E101 D6B4          	bz	l411
 21016  00254C  0A03               	xorlw	3	; case 118
 21017  00254E  E101 D6B3          	bz	l11917
 21018  002552  0A01               	xorlw	1	; case 119
 21019  002554  E101 D6B6          	bz	l11919
 21020  002558  D6AD               	goto	l411
 21021  00255A                     l11925:
 21022                           
 21023                           ; BSR set to: 0
 21024                           ;main.c: 1910: else if (1 == vscp_page_select) {
 21025  00255A  0446               	decf	_vscp_page_select,w,c
 21026  00255C  1047               	iorwf	_vscp_page_select+1,w,c
 21027  00255E  E12B               	bnz	l11947
 21028                           
 21029                           ; BSR set to: 0
 21030                           ;main.c: 1913: if (reg < 72) {
 21031  002560  0E48               	movlw	72
 21032  002562  6019               	cpfslt	vscp_readAppReg@reg,c
 21033  002564  D009               	goto	l11931
 21034                           
 21035                           ; BSR set to: 0
 21036                           ;main.c: 1914: rv = Read_b_eep(0xAA + reg) ;
 21037  002566  0EAA               	movlw	170
 21038  002568  2419               	addwf	vscp_readAppReg@reg,w,c
 21039  00256A  6E16               	movwf	?_Read_b_eep,c
 21040  00256C  6A17               	clrf	?_Read_b_eep+1,c
 21041  00256E  0E00               	movlw	0
 21042  002570  2217               	addwfc	?_Read_b_eep+1,f,c
 21043  002572  ECC2  F02F         	call	_Read_b_eep	;wreg free
 21044  002576  D01E               	goto	L46
 21045  002578                     l11931:
 21046                           
 21047                           ; BSR set to: 0
 21048                           ;main.c: 1917: else if (reg < 84) {
 21049  002578  0E54               	movlw	84
 21050  00257A  6019               	cpfslt	vscp_readAppReg@reg,c
 21051  00257C  D010               	goto	l11943
 21052                           
 21053                           ; BSR set to: 0
 21054                           ;main.c: 1919: uint8_t pos = reg - 72;
 21055  00257E  5019               	movf	vscp_readAppReg@reg,w,c
 21056  002580  0FB8               	addlw	184
 21057  002582  6E18               	movwf	vscp_readAppReg@pos,c
 21058                           
 21059                           ; BSR set to: 0
 21060                           ;main.c: 1920: if ( pos % 2 ) {
 21061  002584  A018               	btfss	vscp_readAppReg@pos,0,c
 21062  002586  D002               	goto	l11939
 21063                           
 21064                           ; BSR set to: 0
 21065                           ;main.c: 1921: pos--;
 21066  002588  0618               	decf	vscp_readAppReg@pos,f,c
 21067                           
 21068                           ;main.c: 1922: }
 21069  00258A  D001               	goto	l11941
 21070  00258C                     l11939:
 21071                           
 21072                           ; BSR set to: 0
 21073                           ;main.c: 1923: else {
 21074                           ;main.c: 1924: pos++;
 21075  00258C  2A18               	incf	vscp_readAppReg@pos,f,c
 21076  00258E                     l11941:
 21077                           
 21078                           ; BSR set to: 0
 21079                           ;main.c: 1925: }
 21080                           ;main.c: 1926: rv = adc[ pos ];
 21081  00258E  0E9E               	movlw	low _adc
 21082  002590  2418               	addwf	vscp_readAppReg@pos,w,c
 21083  002592  6ED9               	movwf	fsr2l,c
 21084  002594  6ADA               	clrf	fsr2h,c
 21085  002596  0E01               	movlw	high _adc
 21086  002598  22DA               	addwfc	fsr2h,f,c
 21087  00259A  50DF               	movf	indf2,w,c
 21088  00259C  D00B               	goto	L46
 21089  00259E                     l11943:
 21090                           
 21091                           ; BSR set to: 0
 21092                           ;main.c: 1929: else if (reg < 98) {
 21093  00259E  0E62               	movlw	98
 21094  0025A0  6019               	cpfslt	vscp_readAppReg@reg,c
 21095  0025A2  D009               	goto	l11947
 21096                           
 21097                           ; BSR set to: 0
 21098                           ;main.c: 1930: rv = Read_b_eep(0x9E + reg - 84) ;
 21099  0025A4  0E4A               	movlw	74
 21100  0025A6  2419               	addwf	vscp_readAppReg@reg,w,c
 21101  0025A8  6E16               	movwf	?_Read_b_eep,c
 21102  0025AA  6A17               	clrf	?_Read_b_eep+1,c
 21103  0025AC  0E00               	movlw	0
 21104  0025AE  2217               	addwfc	?_Read_b_eep+1,f,c
 21105  0025B0  ECC2  F02F         	call	_Read_b_eep	;wreg free
 21106  0025B4                     L46:
 21107  0025B4  6E1A               	movwf	vscp_readAppReg@rv,c
 21108  0025B6                     l11947:
 21109                           
 21110                           ;main.c: 1931: }
 21111                           ;main.c: 1932: }
 21112                           ;main.c: 1934: return rv;
 21113  0025B6  501A               	movf	vscp_readAppReg@rv,w,c
 21114  0025B8  0012               	return	
 21115  0025BA                     __end_of_vscp_readAppReg:
 21116                           	opt stack 0
 21117                           tblptru	equ	0xFF8
 21118                           tblptrh	equ	0xFF7
 21119                           tblptrl	equ	0xFF6
 21120                           tablat	equ	0xFF5
 21121                           prodh	equ	0xFF4
 21122                           prodl	equ	0xFF3
 21123                           intcon	equ	0xFF2
 21124                           postinc0	equ	0xFEE
 21125                           wreg	equ	0xFE8
 21126                           indf1	equ	0xFE7
 21127                           postdec1	equ	0xFE5
 21128                           fsr1h	equ	0xFE2
 21129                           fsr1l	equ	0xFE1
 21130                           indf2	equ	0xFDF
 21131                           postinc2	equ	0xFDE
 21132                           postdec2	equ	0xFDD
 21133                           plusw2	equ	0xFDB
 21134                           fsr2h	equ	0xFDA
 21135                           fsr2l	equ	0xFD9
 21136                           status	equ	0xFD8
 21137                           
 21138 ;; *************** function _interrupt_at_low_vector *****************
 21139 ;; Defined at:
 21140 ;;		line 166 in file "../main.c"
 21141 ;; Parameters:    Size  Location     Type
 21142 ;;		None
 21143 ;; Auto vars:     Size  Location     Type
 21144 ;;		None
 21145 ;; Return value:  Size  Location     Type
 21146 ;;		None               void
 21147 ;; Registers used:
 21148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21149 ;; Tracked objects:
 21150 ;;		On entry : 0/0
 21151 ;;		On exit  : 0/0
 21152 ;;		Unchanged: 0/0
 21153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21156 ;;      Temps:          9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21157 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21158 ;;Total ram usage:        9 bytes
 21159 ;; Hardware stack levels used:    1
 21160 ;; Hardware stack levels required when called:    1
 21161 ;; This function calls:
 21162 ;;		i1_ConvertADC
 21163 ;;		i1_WriteTimer0
 21164 ;; This function is called by:
 21165 ;;		Interrupt level 1
 21166 ;; This function uses a non-reentrant model
 21167 ;;
 21168                           
 21169                           	psect	intcodelo
 21170  000018                     __pintcodelo:
 21171                           	opt stack 0
 21172  000018                     _interrupt_at_low_vector:
 21173                           	opt stack 22
 21174                           
 21175                           ;incstack = 0
 21176  000018  CFD8 F007          	movff	status,??_interrupt_at_low_vector+2
 21177  00001C  CFE8 F008          	movff	wreg,??_interrupt_at_low_vector+3
 21178  000020  CFE0 F009          	movff	bsr,??_interrupt_at_low_vector+4
 21179  000024  CFD9 F00A          	movff	fsr2l,??_interrupt_at_low_vector+5
 21180  000028  CFDA F00B          	movff	fsr2h,??_interrupt_at_low_vector+6
 21181  00002C  CFF3 F00C          	movff	prodl,??_interrupt_at_low_vector+7
 21182  000030  CFF4 F00D          	movff	prodh,??_interrupt_at_low_vector+8
 21183  000034                     
 21184                           ;main.c: 168: if (INTCONbits.TMR0IF) {
 21185  000034  A4F2               	btfss	intcon,2,c	;volatile
 21186  000036  D001               	goto	i1u720_21
 21187  000038  D001               	goto	i1u720_20
 21188  00003A                     i1u720_21:
 21189  00003A  D047               	goto	i1l10403
 21190  00003C                     i1u720_20:
 21191  00003C                     
 21192                           ;main.c: 171: WriteTimer0(0xfb1d);
 21193  00003C  0EFB               	movlw	251
 21194  00003E  6E02               	movwf	?i1_WriteTimer0+1,c
 21195  000040  0E1D               	movlw	29
 21196  000042  6E01               	movwf	?i1_WriteTimer0,c
 21197  000044  EC17  F030         	call	i1_WriteTimer0	;wreg free
 21198  000048                     
 21199                           ;main.c: 173: vscp_timer++;
 21200  000048  0101               	movlb	1	; () banked
 21201  00004A  4B1E               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 21202  00004C  2B1F               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 21203  00004E                     
 21204                           ; BSR set to: 1
 21205                           ;main.c: 174: vscp_configtimer++;
 21206  00004E  4B1C               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 21207  000050  2B1D               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 21208  000052                     
 21209                           ; BSR set to: 1
 21210                           ;main.c: 175: measurement_clock++;
 21211  000052  0E01               	movlw	1
 21212  000054  2712               	addwf	_measurement_clock& (0+255),f,b	;volatile
 21213  000056  0E00               	movlw	0
 21214  000058  2313               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 21215  00005A  0E00               	movlw	0
 21216  00005C  2314               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 21217  00005E  0E00               	movlw	0
 21218  000060  2315               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 21219  000062                     
 21220                           ; BSR set to: 1
 21221                           ;main.c: 176: timeout_clock++;
 21222  000062  0E01               	movlw	1
 21223  000064  2716               	addwf	_timeout_clock& (0+255),f,b	;volatile
 21224  000066  0E00               	movlw	0
 21225  000068  2317               	addwfc	(_timeout_clock+1)& (0+255),f,b	;volatile
 21226  00006A  0E00               	movlw	0
 21227  00006C  2318               	addwfc	(_timeout_clock+2)& (0+255),f,b	;volatile
 21228  00006E  0E00               	movlw	0
 21229  000070  2319               	addwfc	(_timeout_clock+3)& (0+255),f,b	;volatile
 21230  000072                     
 21231                           ; BSR set to: 1
 21232                           ;main.c: 177: sendTimer++;
 21233  000072  4B1A               	infsnz	_sendTimer& (0+255),f,b	;volatile
 21234  000074  2B1B               	incf	(_sendTimer+1)& (0+255),f,b	;volatile
 21235  000076                     
 21236                           ; BSR set to: 1
 21237                           ;main.c: 180: if (!(PORTC & 0x01)) {
 21238  000076  B082               	btfsc	3970,0,c	;volatile
 21239  000078  D001               	goto	i1u721_21
 21240  00007A  D001               	goto	i1u721_20
 21241  00007C                     i1u721_21:
 21242  00007C  D003               	goto	i1l142
 21243  00007E                     i1u721_20:
 21244  00007E                     
 21245                           ; BSR set to: 1
 21246                           ;main.c: 182: vscp_initbtncnt++;
 21247  00007E  0100               	movlb	0	; () banked
 21248  000080  2BBA               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 21249                           
 21250                           ;main.c: 183: }
 21251  000082  D002               	goto	i1l10377
 21252  000084                     i1l142:
 21253                           
 21254                           ; BSR set to: 1
 21255                           ;main.c: 184: else {
 21256                           ;main.c: 185: vscp_initbtncnt = 0;
 21257  000084  0100               	movlb	0	; () banked
 21258  000086  6BBA               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 21259  000088                     i1l10377:
 21260                           
 21261                           ; BSR set to: 0
 21262                           ;main.c: 186: }
 21263                           ;main.c: 189: vscp_statuscnt++;
 21264  000088  2A52               	incf	_vscp_statuscnt,f,c	;volatile
 21265  00008A                     
 21266                           ; BSR set to: 0
 21267                           ;main.c: 190: if ( ( 0x02 ==
 21268                           ;main.c: 191: vscp_initledfunc) && (vscp_statuscnt > 100)) {
 21269  00008A  504D               	movf	_vscp_initledfunc,w,c
 21270  00008C  0A02               	xorlw	2
 21271  00008E  A4D8               	btfss	status,2,c
 21272  000090  D001               	goto	i1u722_21
 21273  000092  D001               	goto	i1u722_20
 21274  000094                     i1u722_21:
 21275  000094  D00E               	goto	i1l10391
 21276  000096                     i1u722_20:
 21277  000096                     
 21278                           ; BSR set to: 0
 21279  000096  0E64               	movlw	100
 21280  000098  6452               	cpfsgt	_vscp_statuscnt,c	;volatile
 21281  00009A  D001               	goto	i1u723_21
 21282  00009C  D001               	goto	i1u723_20
 21283  00009E                     i1u723_21:
 21284  00009E  D009               	goto	i1l10391
 21285  0000A0                     i1u723_20:
 21286  0000A0                     
 21287                           ; BSR set to: 0
 21288                           ;main.c: 192: if ( PORTC & 0x02 ) {
 21289  0000A0  A282               	btfss	3970,1,c	;volatile
 21290  0000A2  D001               	goto	i1u724_21
 21291  0000A4  D001               	goto	i1u724_20
 21292  0000A6                     i1u724_21:
 21293  0000A6  D002               	goto	i1l10387
 21294  0000A8                     i1u724_20:
 21295  0000A8                     i1l10385:
 21296                           
 21297                           ; BSR set to: 0
 21298                           ;main.c: 193: PORTC &= ~0x02;
 21299  0000A8  9282               	bcf	3970,1,c	;volatile
 21300                           
 21301                           ;main.c: 194: }
 21302  0000AA  D001               	goto	i1l10389
 21303  0000AC                     i1l10387:
 21304                           
 21305                           ; BSR set to: 0
 21306                           ;main.c: 195: else {
 21307                           ;main.c: 196: PORTC |= 0x02;
 21308  0000AC  8282               	bsf	3970,1,c	;volatile
 21309  0000AE                     i1l10389:
 21310                           
 21311                           ; BSR set to: 0
 21312                           ;main.c: 197: }
 21313                           ;main.c: 198: vscp_statuscnt = 0;
 21314  0000AE  6A52               	clrf	_vscp_statuscnt,c	;volatile
 21315                           
 21316                           ;main.c: 199: }
 21317  0000B0  D00B               	goto	i1l10401
 21318  0000B2                     i1l10391:
 21319                           
 21320                           ; BSR set to: 0
 21321                           ;main.c: 200: else if (0x01 == vscp_initledfunc) {
 21322  0000B2  044D               	decf	_vscp_initledfunc,w,c
 21323  0000B4  A4D8               	btfss	status,2,c
 21324  0000B6  D001               	goto	i1u725_21
 21325  0000B8  D001               	goto	i1u725_20
 21326  0000BA                     i1u725_21:
 21327  0000BA  D001               	goto	i1l148
 21328  0000BC                     i1u725_20:
 21329  0000BC  D7F7               	goto	i1l10387
 21330  0000BE                     i1l148:
 21331                           
 21332                           ; BSR set to: 0
 21333                           ;main.c: 204: else if (0x00 == vscp_initledfunc) {
 21334  0000BE  664D               	tstfsz	_vscp_initledfunc,c
 21335  0000C0  D001               	goto	i1u726_21
 21336  0000C2  D001               	goto	i1u726_20
 21337  0000C4                     i1u726_21:
 21338  0000C4  D001               	goto	i1l10401
 21339  0000C6                     i1u726_20:
 21340  0000C6  D7F0               	goto	i1l10385
 21341  0000C8                     i1l10401:
 21342                           
 21343                           ; BSR set to: 0
 21344                           ;main.c: 207: }
 21345                           ;main.c: 209: INTCONbits.TMR0IF = 0;
 21346  0000C8  94F2               	bcf	intcon,2,c	;volatile
 21347  0000CA                     i1l10403:
 21348                           
 21349                           ;main.c: 211: }
 21350                           ;main.c: 214: if ( PIR1bits.ADIF ) {
 21351  0000CA  AC9E               	btfss	3998,6,c	;volatile
 21352  0000CC  D001               	goto	i1u727_21
 21353  0000CE  D001               	goto	i1u727_20
 21354  0000D0                     i1u727_21:
 21355  0000D0  D0E5               	goto	i1l168
 21356  0000D2                     i1u727_20:
 21357  0000D2  D0C4               	goto	i1l10465
 21358  0000D4                     i1l10407:
 21359                           
 21360                           ;main.c: 220: adc[(12 * adc_series_counter) + 0] = ADRESH;
 21361  0000D4  5049               	movf	_adc_series_counter,w,c
 21362  0000D6  0D0C               	mullw	12
 21363  0000D8  0E9E               	movlw	low _adc
 21364  0000DA  24F3               	addwf	prodl,w,c
 21365  0000DC  6ED9               	movwf	fsr2l,c
 21366  0000DE  0E01               	movlw	high _adc
 21367  0000E0  20F4               	addwfc	prodh,w,c
 21368  0000E2  6EDA               	movwf	fsr2h,c
 21369  0000E4  CFC4 FFDF          	movff	4036,indf2	;volatile
 21370                           
 21371                           ;main.c: 221: adc[(12 * adc_series_counter) + 1] = ADRESL;
 21372  0000E8  5049               	movf	_adc_series_counter,w,c
 21373  0000EA  0D0C               	mullw	12
 21374  0000EC  0E9F               	movlw	low (_adc+1)
 21375  0000EE  24F3               	addwf	prodl,w,c
 21376  0000F0  6ED9               	movwf	fsr2l,c
 21377  0000F2  0E01               	movlw	high (_adc+1)
 21378  0000F4  20F4               	addwfc	prodh,w,c
 21379  0000F6  6EDA               	movwf	fsr2h,c
 21380  0000F8  CFC3 FFDF          	movff	4035,indf2	;volatile
 21381  0000FC                     
 21382                           ;main.c: 223: ADCON0 = (2<<2) + 1;
 21383  0000FC  0E09               	movlw	9
 21384  0000FE  6EC2               	movwf	4034,c	;volatile
 21385  000100                     
 21386                           ;main.c: 227: if ((80 - 1) == adc_series_counter) {
 21387  000100  5049               	movf	_adc_series_counter,w,c
 21388  000102  0A4F               	xorlw	79
 21389  000104  A4D8               	btfss	status,2,c
 21390  000106  D001               	goto	i1u728_21
 21391  000108  D001               	goto	i1u728_20
 21392  00010A                     i1u728_21:
 21393  00010A  D0C5               	goto	i1l10467
 21394  00010C                     i1u728_20:
 21395  00010C                     
 21396                           ;main.c: 228: adc_conversion_flags |= 1;
 21397  00010C  0100               	movlb	0	; () banked
 21398  00010E  81B6               	bsf	_adc_conversion_flags& (0+255),0,b
 21399  000110  D0C2               	goto	i1l10467
 21400  000112                     i1l10415:
 21401                           
 21402                           ;main.c: 234: adc[(12 * adc_series_counter) + 2] = ADRESH;
 21403  000112  5049               	movf	_adc_series_counter,w,c
 21404  000114  0D0C               	mullw	12
 21405  000116  0EA0               	movlw	low (_adc+2)
 21406  000118  24F3               	addwf	prodl,w,c
 21407  00011A  6ED9               	movwf	fsr2l,c
 21408  00011C  0E01               	movlw	high (_adc+2)
 21409  00011E  20F4               	addwfc	prodh,w,c
 21410  000120  6EDA               	movwf	fsr2h,c
 21411  000122  CFC4 FFDF          	movff	4036,indf2	;volatile
 21412                           
 21413                           ;main.c: 235: adc[(12 * adc_series_counter) + 3] = ADRESL;
 21414  000126  5049               	movf	_adc_series_counter,w,c
 21415  000128  0D0C               	mullw	12
 21416  00012A  0EA1               	movlw	low (_adc+3)
 21417  00012C  24F3               	addwf	prodl,w,c
 21418  00012E  6ED9               	movwf	fsr2l,c
 21419  000130  0E01               	movlw	high (_adc+3)
 21420  000132  20F4               	addwfc	prodh,w,c
 21421  000134  6EDA               	movwf	fsr2h,c
 21422  000136  CFC3 FFDF          	movff	4035,indf2	;volatile
 21423  00013A                     
 21424                           ;main.c: 238: ADCON0 = (1<<2) + 1;
 21425  00013A  0E05               	movlw	5
 21426  00013C  6EC2               	movwf	4034,c	;volatile
 21427  00013E                     
 21428                           ;main.c: 242: if ((80 - 1) == adc_series_counter) {
 21429  00013E  5049               	movf	_adc_series_counter,w,c
 21430  000140  0A4F               	xorlw	79
 21431  000142  A4D8               	btfss	status,2,c
 21432  000144  D001               	goto	i1u729_21
 21433  000146  D001               	goto	i1u729_20
 21434  000148                     i1u729_21:
 21435  000148  D0A6               	goto	i1l10467
 21436  00014A                     i1u729_20:
 21437  00014A                     
 21438                           ;main.c: 243: adc_conversion_flags |= 1 << 1;
 21439  00014A  0100               	movlb	0	; () banked
 21440  00014C  83B6               	bsf	_adc_conversion_flags& (0+255),1,b
 21441  00014E  D0A3               	goto	i1l10467
 21442  000150                     i1l10423:
 21443                           
 21444                           ;main.c: 249: adc[(12 * adc_series_counter) + 4] = ADRESH;
 21445  000150  5049               	movf	_adc_series_counter,w,c
 21446  000152  0D0C               	mullw	12
 21447  000154  0EA2               	movlw	low (_adc+4)
 21448  000156  24F3               	addwf	prodl,w,c
 21449  000158  6ED9               	movwf	fsr2l,c
 21450  00015A  0E01               	movlw	high (_adc+4)
 21451  00015C  20F4               	addwfc	prodh,w,c
 21452  00015E  6EDA               	movwf	fsr2h,c
 21453  000160  CFC4 FFDF          	movff	4036,indf2	;volatile
 21454                           
 21455                           ;main.c: 250: adc[(12 * adc_series_counter) + 5] = ADRESL;
 21456  000164  5049               	movf	_adc_series_counter,w,c
 21457  000166  0D0C               	mullw	12
 21458  000168  0EA3               	movlw	low (_adc+5)
 21459  00016A  24F3               	addwf	prodl,w,c
 21460  00016C  6ED9               	movwf	fsr2l,c
 21461  00016E  0E01               	movlw	high (_adc+5)
 21462  000170  20F4               	addwfc	prodh,w,c
 21463  000172  6EDA               	movwf	fsr2h,c
 21464  000174  CFC3 FFDF          	movff	4035,indf2	;volatile
 21465  000178                     
 21466                           ;main.c: 253: ADCON0 = (0<<2) + 1;
 21467  000178  0E01               	movlw	1
 21468  00017A  6EC2               	movwf	4034,c	;volatile
 21469  00017C                     
 21470                           ;main.c: 257: if ((80 - 1) == adc_series_counter) {
 21471  00017C  5049               	movf	_adc_series_counter,w,c
 21472  00017E  0A4F               	xorlw	79
 21473  000180  A4D8               	btfss	status,2,c
 21474  000182  D001               	goto	i1u730_21
 21475  000184  D001               	goto	i1u730_20
 21476  000186                     i1u730_21:
 21477  000186  D087               	goto	i1l10467
 21478  000188                     i1u730_20:
 21479  000188                     
 21480                           ;main.c: 258: adc_conversion_flags |= 1 << 2;
 21481  000188  0100               	movlb	0	; () banked
 21482  00018A  85B6               	bsf	_adc_conversion_flags& (0+255),2,b
 21483  00018C  D084               	goto	i1l10467
 21484  00018E                     i1l10431:
 21485                           
 21486                           ;main.c: 264: adc[(12 * adc_series_counter) + 6] = ADRESH;
 21487  00018E  5049               	movf	_adc_series_counter,w,c
 21488  000190  0D0C               	mullw	12
 21489  000192  0EA4               	movlw	low (_adc+6)
 21490  000194  24F3               	addwf	prodl,w,c
 21491  000196  6ED9               	movwf	fsr2l,c
 21492  000198  0E01               	movlw	high (_adc+6)
 21493  00019A  20F4               	addwfc	prodh,w,c
 21494  00019C  6EDA               	movwf	fsr2h,c
 21495  00019E  CFC4 FFDF          	movff	4036,indf2	;volatile
 21496                           
 21497                           ;main.c: 265: adc[(12 * adc_series_counter) + 7] = ADRESL;
 21498  0001A2  5049               	movf	_adc_series_counter,w,c
 21499  0001A4  0D0C               	mullw	12
 21500  0001A6  0EA5               	movlw	low (_adc+7)
 21501  0001A8  24F3               	addwf	prodl,w,c
 21502  0001AA  6ED9               	movwf	fsr2l,c
 21503  0001AC  0E01               	movlw	high (_adc+7)
 21504  0001AE  20F4               	addwfc	prodh,w,c
 21505  0001B0  6EDA               	movwf	fsr2h,c
 21506  0001B2  CFC3 FFDF          	movff	4035,indf2	;volatile
 21507  0001B6                     
 21508                           ;main.c: 267: ADCON0 = (9<<2) + 1;
 21509  0001B6  0E25               	movlw	37
 21510  0001B8  6EC2               	movwf	4034,c	;volatile
 21511  0001BA                     
 21512                           ;main.c: 271: if ((80 - 1) == adc_series_counter) {
 21513  0001BA  5049               	movf	_adc_series_counter,w,c
 21514  0001BC  0A4F               	xorlw	79
 21515  0001BE  A4D8               	btfss	status,2,c
 21516  0001C0  D001               	goto	i1u731_21
 21517  0001C2  D001               	goto	i1u731_20
 21518  0001C4                     i1u731_21:
 21519  0001C4  D068               	goto	i1l10467
 21520  0001C6                     i1u731_20:
 21521  0001C6                     
 21522                           ;main.c: 272: adc_conversion_flags |= 1 << 3;
 21523  0001C6  0100               	movlb	0	; () banked
 21524  0001C8  87B6               	bsf	_adc_conversion_flags& (0+255),3,b
 21525  0001CA  D065               	goto	i1l10467
 21526  0001CC                     i1l10439:
 21527                           
 21528                           ;main.c: 278: adc[(12 * adc_series_counter) + 8] = ADRESH;
 21529  0001CC  5049               	movf	_adc_series_counter,w,c
 21530  0001CE  0D0C               	mullw	12
 21531  0001D0  0EA6               	movlw	low (_adc+8)
 21532  0001D2  24F3               	addwf	prodl,w,c
 21533  0001D4  6ED9               	movwf	fsr2l,c
 21534  0001D6  0E01               	movlw	high (_adc+8)
 21535  0001D8  20F4               	addwfc	prodh,w,c
 21536  0001DA  6EDA               	movwf	fsr2h,c
 21537  0001DC  CFC4 FFDF          	movff	4036,indf2	;volatile
 21538                           
 21539                           ;main.c: 279: adc[(12 * adc_series_counter) + 9] = ADRESL;
 21540  0001E0  5049               	movf	_adc_series_counter,w,c
 21541  0001E2  0D0C               	mullw	12
 21542  0001E4  0EA7               	movlw	low (_adc+9)
 21543  0001E6  24F3               	addwf	prodl,w,c
 21544  0001E8  6ED9               	movwf	fsr2l,c
 21545  0001EA  0E01               	movlw	high (_adc+9)
 21546  0001EC  20F4               	addwfc	prodh,w,c
 21547  0001EE  6EDA               	movwf	fsr2h,c
 21548  0001F0  CFC3 FFDF          	movff	4035,indf2	;volatile
 21549  0001F4                     
 21550                           ;main.c: 281: ADCON0 = (8<<2) + 1;
 21551  0001F4  0E21               	movlw	33
 21552  0001F6  6EC2               	movwf	4034,c	;volatile
 21553  0001F8                     
 21554                           ;main.c: 285: if ((80 - 1) == adc_series_counter) {
 21555  0001F8  5049               	movf	_adc_series_counter,w,c
 21556  0001FA  0A4F               	xorlw	79
 21557  0001FC  A4D8               	btfss	status,2,c
 21558  0001FE  D001               	goto	i1u732_21
 21559  000200  D001               	goto	i1u732_20
 21560  000202                     i1u732_21:
 21561  000202  D049               	goto	i1l10467
 21562  000204                     i1u732_20:
 21563  000204                     
 21564                           ;main.c: 286: adc_conversion_flags |= 1 << 4;
 21565  000204  0100               	movlb	0	; () banked
 21566  000206  89B6               	bsf	_adc_conversion_flags& (0+255),4,b
 21567  000208  D046               	goto	i1l10467
 21568  00020A                     i1l10447:
 21569                           
 21570                           ;main.c: 292: adc[(12 * adc_series_counter) + 10] = ADRESH;
 21571  00020A  5049               	movf	_adc_series_counter,w,c
 21572  00020C  0D0C               	mullw	12
 21573  00020E  0EA8               	movlw	low (_adc+10)
 21574  000210  24F3               	addwf	prodl,w,c
 21575  000212  6ED9               	movwf	fsr2l,c
 21576  000214  0E01               	movlw	high (_adc+10)
 21577  000216  20F4               	addwfc	prodh,w,c
 21578  000218  6EDA               	movwf	fsr2h,c
 21579  00021A  CFC4 FFDF          	movff	4036,indf2	;volatile
 21580                           
 21581                           ;main.c: 293: adc[(12 * adc_series_counter) + 11] = ADRESL;
 21582  00021E  5049               	movf	_adc_series_counter,w,c
 21583  000220  0D0C               	mullw	12
 21584  000222  0EA9               	movlw	low (_adc+11)
 21585  000224  24F3               	addwf	prodl,w,c
 21586  000226  6ED9               	movwf	fsr2l,c
 21587  000228  0E01               	movlw	high (_adc+11)
 21588  00022A  20F4               	addwfc	prodh,w,c
 21589  00022C  6EDA               	movwf	fsr2h,c
 21590  00022E  CFC3 FFDF          	movff	4035,indf2	;volatile
 21591  000232                     
 21592                           ;main.c: 295: ADCON0 = (10<<2) + 1;
 21593  000232  0E29               	movlw	41
 21594  000234  6EC2               	movwf	4034,c	;volatile
 21595  000236                     
 21596                           ;main.c: 299: if ((80 - 1) == adc_series_counter) {
 21597  000236  5049               	movf	_adc_series_counter,w,c
 21598  000238  0A4F               	xorlw	79
 21599  00023A  A4D8               	btfss	status,2,c
 21600  00023C  D001               	goto	i1u733_21
 21601  00023E  D001               	goto	i1u733_20
 21602  000240                     i1u733_21:
 21603  000240  D002               	goto	i1l165
 21604  000242                     i1u733_20:
 21605  000242                     
 21606                           ;main.c: 300: adc_conversion_flags |= 1 << 5;
 21607  000242  0100               	movlb	0	; () banked
 21608  000244  8BB6               	bsf	_adc_conversion_flags& (0+255),5,b
 21609  000246                     i1l165:
 21610                           
 21611                           ;main.c: 301: }
 21612                           ;main.c: 304: adc_series_counter++;
 21613  000246  2A49               	incf	_adc_series_counter,f,c
 21614  000248                     
 21615                           ;main.c: 305: if (adc_series_counter >= 80) {
 21616  000248  0E4F               	movlw	79
 21617  00024A  6449               	cpfsgt	_adc_series_counter,c
 21618  00024C  D001               	goto	i1u734_21
 21619  00024E  D001               	goto	i1u734_20
 21620  000250                     i1u734_21:
 21621  000250  D022               	goto	i1l10467
 21622  000252                     i1u734_20:
 21623  000252                     i1l10457:
 21624                           
 21625                           ;main.c: 306: adc_series_counter = 0;
 21626  000252  6A49               	clrf	_adc_series_counter,c
 21627  000254  D020               	goto	i1l10467
 21628  000256                     i1l10459:
 21629                           
 21630                           ;main.c: 312: ADCON0 = (10<<2) + 1;
 21631  000256  0E29               	movlw	41
 21632  000258  6EC2               	movwf	4034,c	;volatile
 21633  00025A  D7FB               	goto	i1l10457
 21634  00025C                     i1l10465:
 21635  00025C  50C2               	movf	4034,w,c	;volatile
 21636  00025E  0B3C               	andlw	60
 21637  000260  6E05               	movwf	??_interrupt_at_low_vector& (0+255),c
 21638  000262  6A06               	clrf	(??_interrupt_at_low_vector+1)& (0+255),c
 21639                           
 21640                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21641                           ; Switch size 1, requested type "space"
 21642                           ; Number of cases is 1, Range of values is 0 to 0
 21643                           ; switch strategies available:
 21644                           ; Name         Instructions Cycles
 21645                           ; simple_byte            4     3 (average)
 21646                           ;	Chosen strategy is simple_byte
 21647  000264  5006               	movf	??_interrupt_at_low_vector+1,w,c
 21648  000266  0A00               	xorlw	0	; case 0
 21649  000268  B4D8               	btfsc	status,2,c
 21650  00026A  D001               	goto	i1l13663
 21651  00026C  D7F4               	goto	i1l10459
 21652  00026E                     i1l13663:
 21653                           
 21654                           ; Switch size 1, requested type "space"
 21655                           ; Number of cases is 6, Range of values is 0 to 40
 21656                           ; switch strategies available:
 21657                           ; Name         Instructions Cycles
 21658                           ; simple_byte           19    10 (average)
 21659                           ;	Chosen strategy is simple_byte
 21660  00026E  5005               	movf	??_interrupt_at_low_vector,w,c
 21661  000270  0A00               	xorlw	0	; case 0
 21662  000272  B4D8               	btfsc	status,2,c
 21663  000274  D78C               	goto	i1l10431
 21664  000276  0A04               	xorlw	4	; case 4
 21665  000278  B4D8               	btfsc	status,2,c
 21666  00027A  D76A               	goto	i1l10423
 21667  00027C  0A0C               	xorlw	12	; case 8
 21668  00027E  B4D8               	btfsc	status,2,c
 21669  000280  D748               	goto	i1l10415
 21670  000282  0A28               	xorlw	40	; case 32
 21671  000284  B4D8               	btfsc	status,2,c
 21672  000286  D7C1               	goto	i1l10447
 21673  000288  0A04               	xorlw	4	; case 36
 21674  00028A  B4D8               	btfsc	status,2,c
 21675  00028C  D79F               	goto	i1l10439
 21676  00028E  0A0C               	xorlw	12	; case 40
 21677  000290  B4D8               	btfsc	status,2,c
 21678  000292  D720               	goto	i1l10407
 21679  000294  D7E0               	goto	i1l10459
 21680  000296                     i1l10467:
 21681                           
 21682                           ;main.c: 318: ConvertADC();
 21683  000296  EC46  F030         	call	i1_ConvertADC	;wreg free
 21684  00029A                     
 21685                           ;main.c: 320: PIR1bits.ADIF = 0;
 21686  00029A  9C9E               	bcf	3998,6,c	;volatile
 21687  00029C                     i1l168:
 21688  00029C  C00D  FFF4         	movff	??_interrupt_at_low_vector+8,prodh
 21689  0002A0  C00C  FFF3         	movff	??_interrupt_at_low_vector+7,prodl
 21690  0002A4  C00B  FFDA         	movff	??_interrupt_at_low_vector+6,fsr2h
 21691  0002A8  C00A  FFD9         	movff	??_interrupt_at_low_vector+5,fsr2l
 21692  0002AC  C009  FFE0         	movff	??_interrupt_at_low_vector+4,bsr
 21693  0002B0  C008  FFE8         	movff	??_interrupt_at_low_vector+3,wreg
 21694  0002B4  C007  FFD8         	movff	??_interrupt_at_low_vector+2,status
 21695  0002B8  0010               	retfie	
 21696  0002BA                     __end_of_interrupt_at_low_vector:
 21697                           	opt stack 0
 21698                           tblptru	equ	0xFF8
 21699                           tblptrh	equ	0xFF7
 21700                           tblptrl	equ	0xFF6
 21701                           tablat	equ	0xFF5
 21702                           prodh	equ	0xFF4
 21703                           prodl	equ	0xFF3
 21704                           intcon	equ	0xFF2
 21705                           postinc0	equ	0xFEE
 21706                           wreg	equ	0xFE8
 21707                           indf1	equ	0xFE7
 21708                           postdec1	equ	0xFE5
 21709                           fsr1h	equ	0xFE2
 21710                           fsr1l	equ	0xFE1
 21711                           bsr	equ	0xFE0
 21712                           indf2	equ	0xFDF
 21713                           postinc2	equ	0xFDE
 21714                           postdec2	equ	0xFDD
 21715                           plusw2	equ	0xFDB
 21716                           fsr2h	equ	0xFDA
 21717                           fsr2l	equ	0xFD9
 21718                           status	equ	0xFD8
 21719                           
 21720 ;; *************** function i1_WriteTimer0 *****************
 21721 ;; Defined at:
 21722 ;;		line 17 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/Timers/t0write.c"
 21723 ;; Parameters:    Size  Location     Type
 21724 ;;  timer0          2    0[COMRAM] unsigned int 
 21725 ;; Auto vars:     Size  Location     Type
 21726 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 21727 ;; Return value:  Size  Location     Type
 21728 ;;		None               void
 21729 ;; Registers used:
 21730 ;;		None
 21731 ;; Tracked objects:
 21732 ;;		On entry : 0/0
 21733 ;;		On exit  : 0/0
 21734 ;;		Unchanged: 0/0
 21735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21736 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21737 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21739 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21740 ;;Total ram usage:        4 bytes
 21741 ;; Hardware stack levels used:    1
 21742 ;; This function calls:
 21743 ;;		Nothing
 21744 ;; This function is called by:
 21745 ;;		_interrupt_at_low_vector
 21746 ;; This function uses a non-reentrant model
 21747 ;;
 21748                           
 21749                           	psect	text101
 21750  00602E                     __ptext101:
 21751                           	opt stack 0
 21752  00602E                     i1_WriteTimer0:
 21753                           	opt stack 22
 21754                           
 21755                           ;incstack = 0
 21756                           ;incstack = 0
 21757  00602E  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 21758  006032  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 21759  006036  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 21760  00603A  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 21761  00603E  0012               	return	
 21762  006040                     __end_ofi1_WriteTimer0:
 21763                           	opt stack 0
 21764                           tblptru	equ	0xFF8
 21765                           tblptrh	equ	0xFF7
 21766                           tblptrl	equ	0xFF6
 21767                           tablat	equ	0xFF5
 21768                           prodh	equ	0xFF4
 21769                           prodl	equ	0xFF3
 21770                           intcon	equ	0xFF2
 21771                           postinc0	equ	0xFEE
 21772                           wreg	equ	0xFE8
 21773                           indf1	equ	0xFE7
 21774                           postdec1	equ	0xFE5
 21775                           fsr1h	equ	0xFE2
 21776                           fsr1l	equ	0xFE1
 21777                           bsr	equ	0xFE0
 21778                           indf2	equ	0xFDF
 21779                           postinc2	equ	0xFDE
 21780                           postdec2	equ	0xFDD
 21781                           plusw2	equ	0xFDB
 21782                           fsr2h	equ	0xFDA
 21783                           fsr2l	equ	0xFD9
 21784                           status	equ	0xFD8
 21785                           
 21786 ;; *************** function i1_ConvertADC *****************
 21787 ;; Defined at:
 21788 ;;		line 23 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/ADC/adcconv.c"
 21789 ;; Parameters:    Size  Location     Type
 21790 ;;		None
 21791 ;; Auto vars:     Size  Location     Type
 21792 ;;		None
 21793 ;; Return value:  Size  Location     Type
 21794 ;;		None               void
 21795 ;; Registers used:
 21796 ;;		None
 21797 ;; Tracked objects:
 21798 ;;		On entry : 0/0
 21799 ;;		On exit  : 0/0
 21800 ;;		Unchanged: 0/0
 21801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21806 ;;Total ram usage:        0 bytes
 21807 ;; Hardware stack levels used:    1
 21808 ;; This function calls:
 21809 ;;		Nothing
 21810 ;; This function is called by:
 21811 ;;		_interrupt_at_low_vector
 21812 ;; This function uses a non-reentrant model
 21813 ;;
 21814                           
 21815                           	psect	text102
 21816  00608C                     __ptext102:
 21817                           	opt stack 0
 21818  00608C                     i1_ConvertADC:
 21819                           	opt stack 22
 21820                           
 21821                           ;incstack = 0
 21822                           ;incstack = 0
 21823  00608C  82C2               	bsf	4034,1,c	;volatile
 21824  00608E  0012               	return	
 21825  006090                     __end_ofi1_ConvertADC:
 21826                           	opt stack 0
 21827                           tblptru	equ	0xFF8
 21828                           tblptrh	equ	0xFF7
 21829                           tblptrl	equ	0xFF6
 21830                           tablat	equ	0xFF5
 21831                           prodh	equ	0xFF4
 21832                           prodl	equ	0xFF3
 21833                           intcon	equ	0xFF2
 21834                           postinc0	equ	0xFEE
 21835                           wreg	equ	0xFE8
 21836                           indf1	equ	0xFE7
 21837                           postdec1	equ	0xFE5
 21838                           fsr1h	equ	0xFE2
 21839                           fsr1l	equ	0xFE1
 21840                           bsr	equ	0xFE0
 21841                           indf2	equ	0xFDF
 21842                           postinc2	equ	0xFDE
 21843                           postdec2	equ	0xFDD
 21844                           plusw2	equ	0xFDB
 21845                           fsr2h	equ	0xFDA
 21846                           fsr2l	equ	0xFD9
 21847                           status	equ	0xFD8
 21848                           tblptru	equ	0xFF8
 21849                           tblptrh	equ	0xFF7
 21850                           tblptrl	equ	0xFF6
 21851                           tablat	equ	0xFF5
 21852                           prodh	equ	0xFF4
 21853                           prodl	equ	0xFF3
 21854                           intcon	equ	0xFF2
 21855                           postinc0	equ	0xFEE
 21856                           wreg	equ	0xFE8
 21857                           indf1	equ	0xFE7
 21858                           postdec1	equ	0xFE5
 21859                           fsr1h	equ	0xFE2
 21860                           fsr1l	equ	0xFE1
 21861                           bsr	equ	0xFE0
 21862                           indf2	equ	0xFDF
 21863                           postinc2	equ	0xFDE
 21864                           postdec2	equ	0xFDD
 21865                           plusw2	equ	0xFDB
 21866                           fsr2h	equ	0xFDA
 21867                           fsr2l	equ	0xFD9
 21868                           status	equ	0xFD8
 21869                           
 21870                           	psect	text103
 21871  000000                     __ptext103:
 21872                           	opt stack 0
 21873                           tblptru	equ	0xFF8
 21874                           tblptrh	equ	0xFF7
 21875                           tblptrl	equ	0xFF6
 21876                           tablat	equ	0xFF5
 21877                           prodh	equ	0xFF4
 21878                           prodl	equ	0xFF3
 21879                           intcon	equ	0xFF2
 21880                           postinc0	equ	0xFEE
 21881                           wreg	equ	0xFE8
 21882                           indf1	equ	0xFE7
 21883                           postdec1	equ	0xFE5
 21884                           fsr1h	equ	0xFE2
 21885                           fsr1l	equ	0xFE1
 21886                           bsr	equ	0xFE0
 21887                           indf2	equ	0xFDF
 21888                           postinc2	equ	0xFDE
 21889                           postdec2	equ	0xFDD
 21890                           plusw2	equ	0xFDB
 21891                           fsr2h	equ	0xFDA
 21892                           fsr2l	equ	0xFD9
 21893                           status	equ	0xFD8
 21894                           
 21895                           	psect	rparam
 21896  0000                     tblptru	equ	0xFF8
 21897                           tblptrh	equ	0xFF7
 21898                           tblptrl	equ	0xFF6
 21899                           tablat	equ	0xFF5
 21900                           prodh	equ	0xFF4
 21901                           prodl	equ	0xFF3
 21902                           intcon	equ	0xFF2
 21903                           postinc0	equ	0xFEE
 21904                           wreg	equ	0xFE8
 21905                           indf1	equ	0xFE7
 21906                           postdec1	equ	0xFE5
 21907                           fsr1h	equ	0xFE2
 21908                           fsr1l	equ	0xFE1
 21909                           bsr	equ	0xFE0
 21910                           indf2	equ	0xFDF
 21911                           postinc2	equ	0xFDE
 21912                           postdec2	equ	0xFDD
 21913                           plusw2	equ	0xFDB
 21914                           fsr2h	equ	0xFDA
 21915                           fsr2l	equ	0xFD9
 21916                           status	equ	0xFD8
 21917                           tblptru	equ	0xFF8
 21918                           tblptrh	equ	0xFF7
 21919                           tblptrl	equ	0xFF6
 21920                           tablat	equ	0xFF5
 21921                           prodh	equ	0xFF4
 21922                           prodl	equ	0xFF3
 21923                           intcon	equ	0xFF2
 21924                           postinc0	equ	0xFEE
 21925                           wreg	equ	0xFE8
 21926                           indf1	equ	0xFE7
 21927                           postdec1	equ	0xFE5
 21928                           fsr1h	equ	0xFE2
 21929                           fsr1l	equ	0xFE1
 21930                           bsr	equ	0xFE0
 21931                           indf2	equ	0xFDF
 21932                           postinc2	equ	0xFDE
 21933                           postdec2	equ	0xFDD
 21934                           plusw2	equ	0xFDB
 21935                           fsr2h	equ	0xFDA
 21936                           fsr2l	equ	0xFD9
 21937                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    108
    Data        0
    BSS         1114
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     69      82
    BANK0           160     86     121
    BANK1           256     52     158
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    ?_frexp	PTR unsigned char  size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_ldexp	PTR unsigned char  size(2) Largest target is 0

    ?_eval_poly	PTR unsigned char  size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_floor	PTR unsigned char  size(2) Largest target is 0

    ?___flneg	PTR unsigned char  size(2) Largest target is 0

    ?___asflmul	PTR unsigned char  size(2) Largest target is 0

    ?___flpack	PTR unsigned char  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_getCalibrationValue	short  size(2) Largest target is 0

    ?_Celsius2Fahrenheit	short  size(2) Largest target is 0

    ?___awtofl	short  size(2) Largest target is 0

    ?_Celsius2Kelvin	short  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?___fladd	unsigned int  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?___altofl	unsigned int  size(2) Largest target is 0

    ?___aldiv	long  size(2) Largest target is 0

    ?___fltol	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___asflsub	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?_log	long  size(2) Largest target is 0

    ?___flsub	long  size(2) Largest target is 0

    ?___flmul	long  size(2) Largest target is 0

    ?___fldiv	long  size(2) Largest target is 0

    ?_exp	long  size(2) Largest target is 0

    ?___asfldiv	long  size(2) Largest target is 0

    ?___asfladd	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___lwtofl	long  size(2) Largest target is 0

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    __asflsub@f1p	PTR  size(2) Largest target is 4
		 -> exp@x(BANK0[4]), doWork@temp(BANK1[4]), 

    __asflmul@mp	PTR  size(1) Largest target is 4
		 -> exp@x(BANK0[4]), 

    __asfldiv@f1p	PTR  size(2) Largest target is 4
		 -> doWork@avarage(BANK1[4]), 

    __asfladd@f1p	PTR  size(2) Largest target is 4
		 -> doWork@temp(BANK1[4]), doWork@avarage(BANK1[4]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E18976 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_omsg(BANK0[14]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_omsg(BANK0[14]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_omsg(BANK0[14]), 

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_omsg(BANK0[14]), 


Critical Paths under _main in COMRAM

    _doWork->___fltol
    ___lwtofl->_Read_b_eep
    ___lwtofl->___flpack
    ___asfldiv->___fldiv
    ___asfladd->___fladd
    ___aldiv->___fltol
    _getCalibrationValue->_Read_b_eep
    _log->_eval_poly
    _exp->_ldexp
    _exp->___fltol
    _ldexp->_eval_poly
    _floor->___fltol
    ___altofl->___fltol
    ___fldiv->___fladd
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_Read_b_eep
    _vscp_getZone->_Read_b_eep
    _setEventData->___fltol
    _Celsius2Fahrenheit->___fldiv
    _Celsius2Kelvin->___fladd
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeStdReg->_vscp_getGUID
    _vscp_writeStdReg->_vscp_getUserID
    _vscp_writeStdReg->_vscp_getManufacturerId
    _vscp_setManufacturerId->_Write_b_eep
    _vscp_setUserID->_Write_b_eep
    _vscp_setGUID->_Write_b_eep
    _vscp_writeAppReg->_writeCoeffs2Ram
    _writeCoeffs2Ram->_Read_b_eep
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_getManufacturerId->_Read_b_eep
    _vscp_getUserID->_Read_b_eep
    _vscp_getGUID->_Read_b_eep
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_readNicknamePermanent->_Read_b_eep
    _Read_b_eep->___wmul
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_goBootloaderMode->_Write_b_eep
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_getControlByte
    _init_app_eeprom->_Write_b_eep
    _vscp_getControlByte->_Read_b_eep
    _vscp_setControlByte->_Write_b_eep
    _vscp_writeNicknamePermanent->_Write_b_eep
    _init->_OpenADC
    _ECANInitialize->_ECANSetOperationMode
    ___awtofl->___flpack
    ___flmul->___fldiv
    _vscp_readAppReg->_Read_b_eep

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_doWork
    _doWork->_exp
    ___aldiv->___fltol
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _eval_poly->___flmul
    _floor->___altofl
    ___fltol->___flmul
    ___altofl->___aldiv
    ___asflsub->___flsub
    ___flsub->___flmul
    ___asflmul->___flmul
    _doOneSecondWork->_sendTempEvent
    _handle_sync->_sendTempEvent
    _sendTempEvent->_setEventData
    _setEventData->___fltol
    _Celsius2Fahrenheit->___flmul
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doWork

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_at_low_vector in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupt_at_low_vector in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interrupt_at_low_vector in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interrupt_at_low_vector in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interrupt_at_low_vector in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interrupt_at_low_vector in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interrupt_at_low_vector in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interrupt_at_low_vector in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interrupt_at_low_vector in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   86885
                                             82 BANK0      4     4      0
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                          _vscp_init
                           _Busy_eep
                        _Write_b_eep
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                        _handle_sync
                         _vscp_error
                    _doOneSecondWork
               _vscp_doOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                              66    66      0   29828
                                             68 BANK0     14    14      0
                                              0 BANK1     52    52      0
                         _Read_b_eep
                                _exp
                                _log
                _getCalibrationValue
                            ___aldiv
                           ___altofl
                          ___asfladd
                            ___fladd
                          ___asfldiv
                            ___fldiv
                            ___flmul
                          ___asflsub
                            ___flsub
                            ___fltol
                           ___lwtofl
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4     343
                                             23 COMRAM     4     0      4
                         _Read_b_eep (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___asfldiv                                            6     0      6     855
                                              0 BANK0      6     0      6
                            ___fldiv
 ---------------------------------------------------------------------------------
 (2) ___asfladd                                            6     0      6    1630
                                             43 COMRAM     6     0      6
                            ___fladd
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     445
                                             28 BANK0     14     6      8
                _getCalibrationValue (ARG)
                            ___flmul (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) _getCalibrationValue                                  6     4      2     158
                                             23 COMRAM     6     4      2
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     2      4    5945
                                             66 COMRAM     2     2      0
                                             33 BANK0      4     0      4
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
                           ___awtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 11     7      4   11079
                                             57 BANK0     11     7      4
                            ___fldiv
                          ___asflmul
                          ___asflsub
                           ___awtofl
                              _floor
                          _eval_poly
                              _ldexp
                             ___flge
                            ___flneg
                            ___fltol
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4      65
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                9     3      6     359
                                             66 COMRAM     3     3      0
                                             33 BANK0      6     0      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7    2591
                                             65 COMRAM     1     1      0
                                             22 BANK0     11     4      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) _floor                                               10     6      4    3207
                                             47 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                              _frexp
                            ___fltol
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     337
                                             65 COMRAM     4     4      0
                                             22 BANK0      6     2      4
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _frexp                                                9     3      6     322
                                             13 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___flge                                               8     0      8     198
                                             13 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (2) ___altofl                                             5     1      4     445
                                             42 BANK0      5     1      4
                           ___flpack
                            ___aldiv (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asflsub                                            6     0      6    1695
                                             30 BANK0      6     0      6
                            ___flsub
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    1602
                                             22 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___asflmul                                            5     1      4     893
                                             65 COMRAM     1     1      0
                                             22 BANK0      4     0      4
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8     729
                                             43 COMRAM    22    14      8
                           ___flpack
                            ___fladd (ARG)
                            ___flsub (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2456
                                             31 BANK0      1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2332
                                             67 COMRAM     2     1      1
                     _vscp_sendEvent
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      62
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      62
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _doOneSecondWork                                     11    11      0   12466
                                             39 BANK0     11    11      0
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
                      _sendTempEvent
                     _vscp_sendEvent
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_sync                                          3     3      0    7762
                                             39 BANK0      3     3      0
                         _Read_b_eep
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (2) _sendTempEvent                                        2     2      0    7539
                                             37 BANK0      2     2      0
                         _Read_b_eep
                     _vscp_sendEvent
                       _setEventData
 ---------------------------------------------------------------------------------
 (3) _setEventData                                         9     6      3    5083
                                             28 BANK0      9     6      3
                         _Read_b_eep (ARG)
                     _Celsius2Kelvin
                 _Celsius2Fahrenheit
                           ___awtofl
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) _Celsius2Fahrenheit                                   4     0      4    2785
                                             22 BANK0      4     0      4
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    1537
                                             28 COMRAM    15     7      8
                           ___flpack
                            ___flmul (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) _Celsius2Kelvin                                       4     0      4    1256
                                             43 COMRAM     4     0      4
                            ___fladd
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   24610
                                             31 BANK0     28    28      0
                          _vscp_init
                     _vscp_sendEvent
                    _vscp_readAppReg
                   _vscp_writeAppReg
                       _vscp_getGUID
                    _vscp_getMDF_URL
                 _vscp_getMatrixInfo
              _vscp_goBootloaderMode
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                             13 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    6371
                                             36 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    1790
                                             24 COMRAM     7     6      1
                       _vscp_getGUID
                       _vscp_setGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
             _vscp_setManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     180
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     134
                                             17 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     134
                                             17 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     156
                                             17 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     4     3      1    4426
                                             32 COMRAM     4     3      1
                           _Busy_eep
                        _Write_b_eep
                         _Read_b_eep
                    _writeCoeffs2Ram
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (4) _writeCoeffs2Ram                                      9     9      0     552
                                             23 COMRAM     9     9      0
                         _Read_b_eep
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     159
                                             13 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    2237
                                             41 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1427
                                             24 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
          _vscp_getRegisterPagesUsed
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      93
                                             23 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      93
                                             23 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      93
                                             23 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2270
                                             67 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     270
                                             23 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      62
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      62
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      62
                                             21 COMRAM     2     0      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     112
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0     156
                                             17 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      90
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4652
                 _vscp_goActiveState
                     _vscp_sendEvent
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2270
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2270
                                             66 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       31    24      7    2236
                                              0 BANK0     31    24      7
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (5) _sendCANFrame                                         7     1      6    2016
                                             59 COMRAM     7     1      6
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (6) _ECANSendMessage                                     36    29      7    1886
                                             23 COMRAM    36    29      7
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (7) __CANIDToRegs                                        10     3      7     693
                                             13 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             49 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             35 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             31 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             20 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                             13 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                             13 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     482
        _vscp_writeNicknamePermanent
                _vscp_setControlByte
                _vscp_getControlByte
                 _vscp_init_pstorage
 ---------------------------------------------------------------------------------
 (2) _vscp_init_pstorage                                   0     0      0      90
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      0     0      0      90
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_getControlByte                                  1     1      0     124
                                             23 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  2     1      1     156
                                             17 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0     112
                                             17 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3      90
                                             13 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     380
                        _WriteTimer0
                         _ConvertADC
                       _init_app_ram
                         _OpenTimer0
                            _OpenADC
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     132
                                             13 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0      90
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4     445
                                             23 COMRAM     7     3      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8     800
                                              0 BANK0     22    14      8
                           ___flpack
                            ___fldiv (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     312
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     312
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      3     3      0     717
                                             23 COMRAM     3     3      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              9     9      0     221
                                              4 COMRAM     9     9      0
                       i1_ConvertADC
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) i1_ConvertADC                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _ConvertADC
     _init_app_ram
     _OpenTimer0
     _OpenADC
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_setControlByte
       _Busy_eep
       _Write_b_eep
     _vscp_getControlByte
       _Read_b_eep
         ___wmul (ARG)
     _vscp_init_pstorage
       _init_app_eeprom
         _Busy_eep
         _Write_b_eep
   _init_app_eeprom
     _Busy_eep
     _Write_b_eep
   _vscp_init
     _vscp_readNicknamePermanent
       _Read_b_eep
         ___wmul (ARG)
   _Busy_eep
   _Write_b_eep
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _Read_b_eep
           ___wmul (ARG)
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_readAppReg
       _Read_b_eep
         ___wmul (ARG)
     _vscp_writeAppReg
       _Busy_eep
       _Write_b_eep
       _Read_b_eep
         ___wmul (ARG)
       _writeCoeffs2Ram
         _Read_b_eep
           ___wmul (ARG)
         ___wmul
       _vscp_readAppReg (ARG)
         _Read_b_eep
           ___wmul (ARG)
     _vscp_getGUID
       _Read_b_eep
         ___wmul (ARG)
     _vscp_getMDF_URL
     _vscp_getMatrixInfo
     _vscp_goBootloaderMode
       _Busy_eep
       _Write_b_eep
       _ECANSetOperationMode
     _vscp_handleHeartbeat
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _Read_b_eep
             ___wmul (ARG)
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _Read_b_eep
           ___wmul (ARG)
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _Read_b_eep
             ___wmul (ARG)
         _vscp_getMDF_URL
         _vscp_getUserID
           _Read_b_eep
             ___wmul (ARG)
         _vscp_getManufacturerId
           _Read_b_eep
             ___wmul (ARG)
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getRegisterPagesUsed
         _vscp_getFamilyCode
         _vscp_getFamilyType
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _Read_b_eep
           ___wmul (ARG)
       _vscp_getMDF_URL
       _vscp_getUserID
         _Read_b_eep
           ___wmul (ARG)
       _vscp_getManufacturerId
         _Read_b_eep
           ___wmul (ARG)
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getRegisterPagesUsed
       _vscp_getFamilyCode
       _vscp_getFamilyType
     _vscp_writeRegister
       _vscp_writeAppReg
         _Busy_eep
         _Write_b_eep
         _Read_b_eep
           ___wmul (ARG)
         _writeCoeffs2Ram
           _Read_b_eep
             ___wmul (ARG)
           ___wmul
         _vscp_readAppReg (ARG)
           _Read_b_eep
             ___wmul (ARG)
       _vscp_writeStdReg
         _vscp_getGUID
           _Read_b_eep
             ___wmul (ARG)
         _vscp_setGUID
           _Busy_eep
           _Write_b_eep
         _vscp_getUserID
           _Read_b_eep
             ___wmul (ARG)
         _vscp_setUserID
           _Busy_eep
           _Write_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
             ___wmul (ARG)
         _vscp_setManufacturerId
           _Busy_eep
           _Write_b_eep
         _vscp_restoreDefaults
           _init_app_eeprom
             _Busy_eep
             _Write_b_eep
           _init_app_ram
     _vscp_writeStdReg
       _vscp_getGUID
         _Read_b_eep
           ___wmul (ARG)
       _vscp_setGUID
         _Busy_eep
         _Write_b_eep
       _vscp_getUserID
         _Read_b_eep
           ___wmul (ARG)
       _vscp_setUserID
         _Busy_eep
         _Write_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
           ___wmul (ARG)
       _vscp_setManufacturerId
         _Busy_eep
         _Write_b_eep
       _vscp_restoreDefaults
         _init_app_eeprom
           _Busy_eep
           _Write_b_eep
         _init_app_ram
     ___lbmod
   _handle_sync
     _Read_b_eep
       ___wmul (ARG)
     _sendTempEvent
       _Read_b_eep
         ___wmul (ARG)
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _Read_b_eep (ARG)
           ___wmul (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _Read_b_eep (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
   _vscp_error
   _doOneSecondWork
     _Busy_eep
     _Write_b_eep
     _Read_b_eep
       ___wmul (ARG)
     _sendTempEvent
       _Read_b_eep
         ___wmul (ARG)
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _Read_b_eep (ARG)
           ___wmul (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _Read_b_eep (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     ___wmul
   _vscp_doOneSecondWork
     _vscp_getZone
       _Read_b_eep
         ___wmul (ARG)
     _vscp_getSubzone
       _Read_b_eep
         ___wmul (ARG)
     _vscp_sendHeartBeat
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_getZone (ARG)
         _Read_b_eep
           ___wmul (ARG)
       _vscp_getSubzone (ARG)
         _Read_b_eep
           ___wmul (ARG)
   _doWork
     _Read_b_eep
       ___wmul (ARG)
     _exp
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _Read_b_eep (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___asflmul
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___asflsub
         ___flsub
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
       ___awtofl
         ___flpack
       _floor
         ___altofl
           ___flpack
           ___aldiv (ARG)
             _getCalibrationValue (ARG)
               _Read_b_eep
                 ___wmul (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___fltol (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___fldiv (ARG)
                   ___flpack
                   ___fladd (ARG)
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                   ___flsub (ARG)
                     ___fladd
                       ___flpack
                       ___awtofl (ARG)
                         ___flpack
                       _frexp (ARG)
                   ___lwtofl (ARG)
                     _Read_b_eep (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
           ___fltol (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flge
         _frexp
         ___fltol
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       _eval_poly
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       _ldexp
         _eval_poly (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _Read_b_eep (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       ___flge
       ___flneg
       ___fltol
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _Read_b_eep (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     _log
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _Read_b_eep (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _Read_b_eep (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _eval_poly (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       _frexp (ARG)
     _getCalibrationValue
       _Read_b_eep
         ___wmul (ARG)
     ___aldiv
       _getCalibrationValue (ARG)
         _Read_b_eep
           ___wmul (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _Read_b_eep (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
     ___altofl
       ___flpack
       ___aldiv (ARG)
         _getCalibrationValue (ARG)
           _Read_b_eep
             ___wmul (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
     ___asfladd
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___lwtofl (ARG)
         _Read_b_eep (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___fladd
       ___flpack
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___flsub (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _Read_b_eep (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
     ___asfldiv
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _Read_b_eep (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___fldiv
       ___flpack
       ___fladd (ARG)
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flsub (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _Read_b_eep (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___flmul
       ___flpack
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
         ___lwtofl (ARG)
           _Read_b_eep (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
       ___lwtofl (ARG)
         _Read_b_eep (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___asflsub
       ___flsub
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___lwtofl (ARG)
                 _Read_b_eep (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
     ___flsub
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___lwtofl (ARG)
               _Read_b_eep (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _Read_b_eep (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___fltol
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _Read_b_eep (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _Read_b_eep (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___lwtofl
       _Read_b_eep (ARG)
         ___wmul (ARG)
       ___flpack (ARG)

 _interrupt_at_low_vector (ROOT)
   i1_ConvertADC
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0     3C0      35       26.3%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     34      9E       8       61.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     56      79       5       75.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     45      52       1       86.3%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     169       6        0.0%
DATA                 0      0     534       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Tue Mar  8 12:32:06 2016

                          ___asfldiv@f1p 0060                            ___altofl@sign 008E  
                           ___fldiv@cntr 003F                  __end_of_vscp_readAppReg 25BA  
                           ___fldiv@sign 0041                    __end_of_sendVSCPFrame 50AE  
                           ___asflmul@mp 0042                             ___asflsub@f2 0080  
                                     PL2 37E8                                       PL4 37F6  
                                     PL6 3814                                       PL8 3830  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 000E  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 0012  
                    ___wmul@multiplicand 0010                              __CFG_BORV$1 000000  
                __end_of_vscp_readStdReg 42D8                            ___asflsub@f1p 007E  
                           ___flpack@arg 000E                                      PL10 383E  
                                    PL20 387E                                      PL12 3858  
                                    PL30 38A6                                      PL22 388C  
                                    PL14 386E                                      PL40 4B26  
                                    PL32 330C                                      PL24 4B04  
                                    PL16 4AF0                                      PL50 38E6  
                                    PL42 38D2                                      PL34 47B8  
                                    PL26 4B14                                      PL18 47AA  
                                    PL60 1DFE                                      PL52 47F2  
                                    PL44 42D8                                      PL36 47CA  
                                    PL28 4FE4                                      PL70 3338  
                                    PL62 4CF0                                      PL54 38FA  
                                    PL46 47DE                                      PL38 38BE  
                                    PL80 42EC                                      PL72 390C  
                                    PL64 5C90                                      PL56 3D66  
                                    PL48 3324                                      PL90 3936  
                                    PL82 4F38                                      PL74 3F5C  
                                    PL66 4D00                                      PL58 459C  
                                    PL84 3346                                      PL76 391A  
                                    PL68 5676                                      PL86 3928  
                                    PL78 4B3A                                      PL88 3930  
                           ___flpack@exp 0012                           _Celsius2Kelvin 5C3A  
                                    l211 33C4                                      l230 36A0  
                                    l320 1E9A                                      l322 1EA6  
                                    l411 22B4                                      l324 1EB2  
                                    l316 1E82                                      l172 4818  
                                    l181 4862                                      l326 1EBE  
                                    l318 1E8E                                      l520 1A56  
                                    l256 51E8                       vscp_readStdReg@idx 0026  
                                    l523 1AB0                                      l187 488C  
                                    l296 555A                                      l641 5A56  
                                    l901 5606                                      l831 43E0  
                                    l842 3DB0                                      l852 3E6A  
                                    l861 3E38                                      l853 3DFA  
                                    l829 43C2                       vscp_readStdReg@reg 0029  
                                    l863 3E48                                      l855 3E08  
                                    l873 3ECE                                      l865 3E58  
                                    l857 3E18                                      l874 3EE8  
                                    l859 3E28           __size_of_vscp_handleProbeState 00BE  
                       setEventData@ival 0083                           getVSCPFrame@id 002E  
          __end_of_vscp_handleProbeState 4DCC                    ?_vscp_restoreDefaults 0001  
                   __size_of_WriteTimer0 0012                         setEventData@unit 007E  
                                    _adc 019E                                      _exp 3F6A  
                                    _log 45AE                                      fsr2 000FD9  
                   __size_of_Write_b_eep 003A             __size_of_vscp_getControlByte 001C  
                                    prod 000FF3                                      wreg 000FE8  
                           ___flmul@cntr 0074                             ___flmul@sign 0075  
                          ___flpack@sign 0013                             ___fltol@exp1 007B  
                                   l1031 4DC6                                     l1040 4D9C  
                                   l1032 4D56                                     l1016 59E0  
                                   l1220 3068                                     l1221 307C  
                                   l1222 30BA                                     l1039 4DB6  
                                   l1071 5CC4                                     l1231 30F8  
                                   l1322 5BB8                                     l1162 4A2A  
                                   l1600 44A2                                     l1338 5EF4  
                                   l1339 5EF6                                     l1611 4532  
                                   l1196 2EE2                                     l1293 607A  
                                   l1287 5982                                     l1563 4ECA  
                                   l1636 583C                                     l1558 4E96  
                                   l1680 4C2E                                     l1569 4EF8  
                                   l1587 4022                                     l1596 447A  
                                   l1588 4146                                     l1677 4B78  
                __end_of_doOneSecondWork 37E8                      vscp_readStdReg@code 001E  
              vscp_getManufacturerId@idx 0018                                     ?_exp 0099  
                                   ?_log 0081                                     l8217 5AEA  
                                   l9231 5E22                                     l9313 5E6A  
                                   l9503 3DC8                                     l9611 3F46  
                                   l9605 3F30                                     l9509 3DDE  
                                   l9517 3DE8                                     l9381 5DD2  
                                   l9269 5F70                                     l9561 3E7E  
                                   l9369 5710                                     l9299 5FA8  
                                   l9651 55A0                                     l9571 3E9E  
                                   l9661 55D2                                     l9653 55AA  
                                   l9493 3D9E                                     l9663 55DC  
                                   l9655 55B4                                     l9657 55BE  
                                   l9649 5598                                     l9681 4744  
                                   l9659 55C8                                     l9667 55E8  
                                   l9597 3F16                                     l9589 3EEA  
            __size_of_vscp_getMatrixInfo 001A                                     u6015 470C  
                                   u6025 471C                                     u6035 4748  
                         sendCANFrame@id 003C                                     u5530 5760  
                                   u5535 5756                                     u3865 5BC4  
                                   u5705 3DA6                                     u3866 5BC6  
                                   u5707 3DA8                                     u9025 5038  
                                   u8324 3492                                     u8325 348E  
                                   u9165 4A56                                     u8454 3866  
                                   u8374 3850                                     u9175 4A66  
                                   u8455 3862                                     u8375 384C  
                         sendCANFrame@rv 0042                                     u9185 4A84  
                                   u9450 425C                                     u8474 38B6  
                                   u8475 38B2                                     u9455 425A  
                                   u9480 42A6                                     u9485 42A4  
                       ??_ECANInitialize 000F                vscp_setManufacturerId@idx 0013  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 4804                                     _init 5B54  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   exp@x 0099                                     log@x 0081  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 0F6E                              _vscp_minute 0121  
                            _vscp_second 0051                                     prodh 000FF4  
                                   prodl 000FF3                                     start 02BA  
          __size_of_vscp_doOneSecondWork 0056                            __CFG_FOSC$HS2 000000  
                      vscp_getUserID@idx 0018                    __size_of_vscp_setGUID 0024  
                          __CFG_MCLRE$ON 000000                         _vscp_writeStdReg 491C  
              ECANReceiveMessage@dataLen 0016                    getVSCPFrame@pPriority 0026  
                        __end_of_OpenADC 5986                          _sh_coefficients 0122  
                   __end_of_getVSCPFrame 576C                                    ??_exp 0046  
                                  ??_log 0043                         __RegsToCANID@val 0010  
                       __RegsToCANID@ptr 000E                   __end_of_Celsius2Kelvin 5C6E  
                   __size_of_getCANFrame 0026                                    l11001 2F2A  
                                  l11011 2F8A                                    l11031 2FBE  
                                  l11007 2F74                                    l11201 3186  
                                  l11121 30A4                                    l12003 1084  
                                  l10331 5D88                                    l11203 318C  
                                  l11027 2FB2                                    l12021 10E4  
                                  l11125 30AC                                    l11117 309C  
                                  l11109 307E                                    l11045 3008  
                                  l11029 2FB4                                    l11301 557A  
                                  l12111 12C4                                    l12015 10C4  
                                  l11231 31E8                                    l11223 31B6  
                                  l11135 30BC                                    l11039 2FD8  
                                  l11303 5586                                    _B0CON 000E80  
                                  l12201 14A4                                    l12105 12A4  
                                  l12033 1124                                    l12009 10A4  
                                  l11241 3214                                    l11161 30FA  
                                  l11073 303C                                    l11057 301C  
                                  l11313 3354                                    l12123 1304  
                                  l12051 1184                                    l12027 1104  
                                  l10339 5D9E                                    l11227 31CC  
                                  l11219 319C                                    l11139 30D6  
                                  l13011 4E76                                    l13003 4E54  
                                  l12213 14E4                                    l12141 1364  
                                  l12117 12E4                                    l12045 1164  
                                  l11253 3256                                    l11421 3680  
                                  l13021 59A0                                    l12303 16B6  
                                  l12231 1544                                    l12207 14C4  
                                  l12135 1344                                    l12063 11C4  
                                  l12039 1144                                    l11175 3124  
                                  l11327 3436                                    l13007 4E62  
                                  _B1CON 000E90                                    l13201 5BDA  
                                  l12321 1710                                    l12225 1524  
                                  l12153 13A4                                    l12129 1324  
                                  l12081 1224                                    l12057 11A4  
                                  l11249 322E                                    l11185 3148  
                                  l11089 305C                                    l13041 44B4  
                                  l11353 34DC                                    l11337 3472  
                                  l13121 50F4                                    l13105 50C2  
                                  l11601 3FF0                                    l12411 18D2  
                                  l12315 16F2                                    l12243 1584  
                                  l12219 1504                                    l12171 1404  
                                  l12147 1384                                    l12075 1204  
                                  l11275 32A8                                    l13035 448C  
                                  l11419 367C                                    l11355 34E0  
                                  l10821 4D76                                    l12405 18B4  
                                  l12333 174C                                    l12309 16D4  
                                  l12261 15E4                                    l12237 1564  
                                  l12165 13E4                                    l12093 1264  
                                  l12069 11E4                                    l11197 3174  
                                  l11293 5536                                    l11461 37BC  
                                  l11437 371A                                    l11381 354A  
                                  l11365 34FC                                    l13109 50D6  
                                  l10823 4D7A                                    l12511 1AD2  
                                  l12423 190E                                    l12351 17A6  
                                  l12327 172E                                    l12255 15C4  
                                  l12183 1444                                    l12159 13C4  
                                  l12087 1244                                    l13063 44EA  
                                  l11439 3724                                    l11391 3566  
                                  l13215 4B82                                    _B2CON 000EA0  
                                  l11801 1FFC                                    l11721 1E1C  
                                  l13161 4C92                                    l13145 4C56  
                                  l10817 4D72                                    l11705 52C6  
                                  l12505 1AB4                                    l12441 1968  
                                  l12417 18F0                                    l12345 1788  
                                  l12273 1620                                    l12249 15A4  
                                  l12177 1424                                    l12521 1AF4  
                                  l13081 4548                                    l13065 44F6  
                                  l13057 44CE                                    l11297 5566  
                                  l11289 5512                                    l11473 37DC  
                                  l13129 5122                                    l11617 4114  
                                  l11625 45BE                                    l11811 2038  
                                  l11803 2008                                    l11731 1E58  
                                  l11723 1E28                                    l10755 5C1A  
                                  l12603 50AC                                    l10851 4DBA  
                                  l12435 194A                                    l12363 17E2  
                                  l12339 176A                                    l12291 167A  
                                  l12267 1602                                    l12195 1484  
                                  l12099 1284                                    l12523 1D80  
                                  l13075 4520                                    l13067 44FE  
                                  l11459 37B8                                    l11379 3546  
                                  l13331 53C4                                    l13323 53AC  
                                  l13307 5368                                    l13219 4B9E  
                                  l13227 4F60                                    l13243 5258  
                                  l13235 5226                                    l11901 2254  
                                  l11821 2074                                    l11813 2044  
                                  l11805 2014                                    l11741 1E94  
                                  l11733 1E64                                    l11725 1E34  
                                  l13173 4CAC                                    l13165 4C9A  
                                  l13149 4C6C                                    l12613 5A4A  
                                  l12517 1AF0                                    l12453 19A4  
                                  l12429 192C                                    l12381 183C  
                                  l12357 17C4                                    l12285 165C  
                                  l12189 1464                                    l10933 2DB8  
                                  l10861 2D3A                                    l13093 456E  
                                  l13085 4550                                    l13077 452C  
                                  l13069 4504                                    l11397 35DA  
                                  l11493 579C                                    l13333 53D0  
                                  l13309 5372                                    l13229 4FCA  
                                  l13253 5276                                    l11629 45D6  
                                  l11911 2290                                    l11903 2260  
                                  l11831 20B0                                    l11823 2080  
                                  l11815 2050                                    l11807 2020  
                                  l11751 1ED0                                    l11743 1EA0  
                                  l11735 1E70                                    l11727 1E40  
                                  l12703 4A7C                                    l10783 4D10  
                                  l12543 1DC4                                    l12535 1DB0  
                                  l12471 19FE                                    l12447 1986  
                                  l12375 181E                                    l12279 163E  
                                  l10919 2DAC                                    l10863 2D3E  
                                  l11399 35E4                                    l11487 5790  
                                  l13335 53D4                                    l13327 53BC  
                                  l11591 3F8A                                    l13511 48A8  
                                  _B3CON 000EB0                                    l11913 229C  
                                  l11905 226C                                    l11841 20EC  
                                  l11833 20BC                                    l11825 208C  
                                  l11817 205C                                    l11809 202C  
                                  l11761 1F0C                                    l11753 1EDC  
                                  l11745 1EAC                                    l11737 1E7C  
                                  l11729 1E4C                                    l13177 4CB4  
                                  l12633 435C                                    l12609 5A20  
                                  l12801 41C0                                    l12545 1DC6  
                                  l12465 19E0                                    l12393 1878  
                                  l12369 1800                                    l12297 1698  
                                  l10865 2D42                                    l10857 2D34  
                                  l11497 57A4                                    l13273 5858  
                                  l13257 5282                                    l13281 5E04  
                                  l13505 4886                                    l11931 2578  
                                  l11915 22A8                                    l11907 2278  
                                  l11851 2128                                    l11843 20F8  
                                  l11835 20C8                                    l11827 2098  
                                  l11819 2068                                    l11771 1F48  
                                  l11763 1F18                                    l11755 1EE8  
                                  l11747 1EB8                                    l11739 1E88  
                                  l11923 22D0                                    l12627 434E  
                                  l11667 5CFA                                    l12811 41E2  
                                  l12547 1DD6                                    l12483 1A3A  
                                  l12459 19C2                                    l12387 185A  
                                  l12555 1DFA                                    l10859 2D36  
                                  l11675 5194                                    l11659 5674  
                                  l13267 5826                                    l13339 53E8  
                                  l13603 3D5A                                    l11941 258E  
                                  l11917 22B8                                    l11909 2284  
                                  l11861 2164                                    l11853 2134  
                                  l11845 2104                                    l11837 20D4  
                                  l11829 20A4                                    l11781 1F84  
                                  l11773 1F54                                    l11765 1F24  
                                  l11757 1EF4                                    l11749 1EC4  
                                  l11925 255A                                    l12661 43E2  
                                  l12645 4386                                    l10797 4D30  
                                  l12493 1A74                                    l12477 1A1C  
                                  l10949 2E12                                    l10885 2D7E  
                                  l13293 54B0                                    l11597 3FBE  
                                  l13533 4904                                    l13509 4890  
                                  l11943 259E                                    l11919 22C4  
                                  l11871 21A0                                    l11863 2170  
                                  l11855 2140                                    l11847 2110  
                                  l11839 20E0                                    l11791 1FC0  
                                  l11783 1F90                                    l11775 1F60  
                                  l11767 1F30                                    l11759 1F00  
                                  l12655 43C6                                    l10799 4D38  
                                  l12831 421C                                    l12823 4204  
                                  l12815 41EE                                    l12807 41D6  
                                  l12399 1896                                    l12911 49C4  
                                  l10991 2EE6                                    l10959 2E46  
                                  l11679 51CC                                    l13527 48D8  
                                  _B4CON 000EC0                                    l11881 21DC  
                                  l11873 21AC                                    l11865 217C  
                                  l11857 214C                                    l11849 211C  
                                  l11793 1FCC                                    l11785 1F9C  
                                  l11777 1F6C                                    l11769 1F3C  
                                  l12841 4266                                    l11961 0FA4  
                                  l10969 2E7A                                    l10993 2F04  
                                  l13537 490C                                    l11939 258C  
                                  l11891 2218                                    l11883 21E8  
                                  l11875 21B8                                    l11867 2188  
                                  l11859 2158                                    l11795 1FD8  
                                  l11787 1FA8                                    l11779 1F78  
                                  l11947 25B6                                    l12667 4410  
                                  l12675 442A                                    l12851 42AE  
                                  l12827 4210                                    l12819 41F8  
                                  l12763 5FC4                                    l11699 52C0  
                                  l12499 1A92                                    l11955 0F84  
                                  l12931 4A0E                                    l12923 49F8  
                                  l12907 49AA                                    l10979 2EAE  
                                  l10899 2D86                                    l13491 485C  
                                  l13483 4848            __size_of_vscp_getMajorVersion 0002  
                                  l11893 2224                                    l11885 21F4  
                                  l11877 21C4                                    l11869 2194  
                                  l11797 1FE4                                    l11789 1FB4  
                                  l12589 5F5A                                    l12685 444E  
                                  l12781 4180                                    l12861 42D4  
                                  l12773 416C                                    l11973 0FE4  
                                  l12909 49AE                                    l12941 4A2C  
                                  l10997 2F12                                    l13557 39A0  
                                  l13549 3976                                    l11895 2230  
                                  l11887 2200                                    l11879 21D0  
                                  l11799 1FF0                                    l12951 4EA4  
                                  l12687 4450                                    l11991 1044  
                                  l11967 0FC4                                    l13487 4852  
                                  l13479 483E                                    _B5CON 000ED0  
                                  l11897 223C                                    l11889 220C  
                                  l12961 4EEC                                    l12953 4EBC  
                                  l12857 42C4                                    l12793 41A4  
                                  l12785 418C                                    l12777 4176  
                                  l11985 1024                                    l12881 492E  
                                  l12873 5E96                                    l13489 4856  
                                  l11899 2248                                    l11979 1004  
                                  l13499 4872                                    l12949 4EA0  
                                  l12797 41B0                                    l12789 4198  
                                  l11997 1064                                    l12893 4970  
                                  l12959 4EE0                                    l12887 4950  
                                  l12991 4E16                                    l12993 4E22  
                                  l12985 4DFE                                    l12899 498C  
                                  l12995 4E26                                    l12979 4DE6  
             __end_of_vscp_goActiveState 5EDC                            ___fltol@sign1 007A  
                        __end_of___aldiv 4E88            ??_vscp_writeNicknamePermanent 0012  
                        __end_of___fladd 459C                                    ?_main 0001  
                                  ?_init 0001                   ?_vscp_goBootloaderMode 0001  
                        __end_of___fldiv 515E                            i1_WriteTimer0 602E  
                        __end_of___flneg 5E16                                    _EEADR 000F74  
                        __end_of___lbmod 5DA6                          __end_of___flmul 4CF0  
                        __end_of___flsub 5B54                          __end_of___fltol 53FA  
                _vscp_handleDropNickname 5CA0                                    _BSEL0 000E7D  
                                  u10260 5390                                    _T0CON 000FD5  
                                  u10265 5386                                    u10454 3988  
                                  u10455 3984                                    u10484 3D52  
                                  u10485 3D4E                                    i1l142 0084  
                                  i1l148 00BE                                    i1l165 0246  
                                  i1l168 029C                          sendCANFrame@dlc 0040  
                                  _MSEL0 000E79                                    _MSEL1 000E7A  
                                  _MSEL2 000E7B                                    _IRXIF 007BBF  
                      ??_writeCoeffs2Ram 0018                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6       __end_of_vscp_readNicknamePermanent 6072  
             _vscp_readNicknamePermanent 6068                                    _PORTC 000F82  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                       setEventData@newval 007F  
                       ?_vscp_getSubzone 0001                            ___awtofl@sign 001E  
                  __end_of_sendTempEvent 5676                             _vscp_getGUID 6008  
                         Read_b_eep@badd 0016                   Write_b_eep@GIE_BIT_VAL 0011  
                                  _floor 4B44                                    _ldexp 520E  
                           _vscp_getZone 604A                                    _frexp 548A  
                     vscp_writeAppReg@rv 0024                _vscp_getRegisterPagesUsed 6090  
                 __size_of_vscp_getEvent 002C                                    main@i 00B2  
                             _ConvertADC 6088                             _vscp_setGUID 5E16  
                                  tablat 000FF5                  _vscp_getSubMinorVersion 6096  
                                  plusw2 000FDB                                    status 000FD8  
             __end_of_vscp_sendHeartBeat 5DCC                              exp@exponent 00A1  
                            ldexp@newexp 0085                     _ECANSetOperationMode 5F9C  
                        __initialization 5A5E                              log@exponent 0043  
                           __end_of_main 491C                             __end_of_init 5B90  
                       ?_vscp_readAppReg 0001                               _Read_b_eep 5F84  
                _interrupt_at_low_vector 0018                         __end_of_Busy_eep 6080  
                        ?_Celsius2Kelvin 002C                        ??_ECANSendMessage 001F  
                         ?i1_WriteTimer0 0001                         ?_vscp_readStdReg 0001  
                  getVSCPFrame@pvscptype 0024                   ??_vscp_restoreDefaults 0012  
                                 ??_main 0046                                   ??_init 0013  
          __size_of_vscp_handleHeartbeat 0002                 ??_vscp_getManufacturerId 0018  
               ??_vscp_setManufacturerId 0013                 _vscp_handleProtocolEvent 2D2A  
                          __activetblptr 000003                        __RegsToCANID@type 0011  
                         __CFG_PLLCFG$ON 000000                           __CFG_RETEN$OFF 000000  
             ECANReceiveMessage@msgFlags 0017                         doWork@calVoltage 016E  
              __size_of__ECANPointBuffer 007E                                   _B0TXEN 0073EA  
                                 _B1TXEN 0073EB                                   _B2TXEN 0073EC  
                                 _B3TXEN 0073ED                                   _B4TXEN 0073EE  
                                 _B5TXEN 0073EF                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                                   _ADCON2 000FC0  
                                 ?_floor 008F                                   ?_ldexp 0081  
                   __size_of_handle_sync 0082                                   ?_frexp 000E  
                       __end_of___altofl 59CE               ECANReceiveMessage@savedPtr 0018  
                                 _CANCON 000F6F                                   _ADRESH 000FC4  
                                 _EEADRH 000F75                                   _ADRESL 000FC3  
                                 _EEDATA 000F73                         __end_of___flpack 4F38  
                                 _EECON2 000F7E                                   _CIOCON 000F70  
                       __end_of___awtofl 5C04                         ?_doOneSecondWork 0001  
                     vscp_writeStdReg@rv 001E                            ?_init_app_ram 0001  
                                 _MDSEL0 007B96                                   _MDSEL1 007B97  
                        __CFG_BBSIZ$BB2K 000000                               _OpenTimer0 5EDC  
                         __CFG_WDTEN$OFF 000000                          _init_app_eeprom 25BA  
                       __end_of___lwtofl 5D54                                   _RXB0IF 007BB8  
                                 _RXB1IF 007BB9                   ECANReceiveMessage@data 0015  
                 ECANReceiveMessage@mode 001C                   ECANReceiveMessage@temp 001D  
                      getVSCPFrame@pData 0028                        getVSCPFrame@pSize 0027  
                              ??_OpenADC 0010                       _vscp_newNodeOnline 5D54  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0017  
                         __CFG_XINST$OFF 000000   vscp_handleProtocolEvent@page_save_1030 0088  
                                 ___flge 5810                           getCANFrame@pid 0022  
                              ??___aldiv 0046                                ??___fladd 0025  
                                 ___wmul 5C6E                                ??___fldiv 0034  
                              ??___flneg 0012                           __CFG_STVREN$ON 000000  
                              ??___lbmod 000F                                ??___flmul 0042  
                              ??___flsub 0042                                ??___fltol 0042  
                          _vscp_getEvent 5CFE                                   _doWork 393E  
                       OpenTimer0@config 000E                      ?_vscp_newNodeOnline 0001  
              ??_vscp_handleDropNickname 0018                      vscp_writeAppReg@reg 0023  
                    vscp_writeAppReg@val 0021                      vscp_writeAppReg@pos 0022  
                                 clear_0 5A66                                   clear_1 5A78  
                                 clear_2 5A84                                   clear_3 5A90  
                          ?_sendCANFrame 003C             vscp_handleProtocolEvent@byte 0095  
                                 floor@i 0093                                   floor@x 008F  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 00BB  
                          _vscp_errorcnt 004B                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                       _vscp_init_pstorage 6084  
              ??_vscp_getSubMinorVersion 000E     __size_of_vscp_getBootLoaderAlgorithm 0002  
                         ??_init_app_ram 000E                     ??_vscp_newNodeOnline 0044  
                            ?_ConvertADC 0001                       __size_of___asfladd 004A  
                     __size_of___asfldiv 004A                       __size_of___asflmul 004C  
                             ___fladd@f1 001D                               ___fladd@f2 0021  
                     __size_of___asflsub 004E                               ___flge@ff1 000E  
                             ___flge@ff2 0012                         __end_ofexp@coeff 0F48  
                       __end_oflog@coeff 0F6C                          ___lbmod@divisor 000E  
                             ___altofl@c 008A                               ___fldiv@f1 002C  
                             ___fldiv@f2 0030                               ___fldiv@f3 003B  
                             __accesstop 0060                  __end_of__initialization 5A96  
                        ___lbmod@counter 0010                       _Celsius2Fahrenheit 5684  
                             ___flneg@f1 000E            __size_of_vscp_getMinorVersion 0002  
                    ?_vscp_init_pstorage 0001                               ___flmul@f1 0060  
                             ___flmul@f2 0064                             eval_poly@res 007D  
                             ___flsub@f1 0076                               ___flsub@f2 007A  
                             ___fltol@f1 0076                    __size_of_getVSCPFrame 0074  
                     _vscp_writeRegister 5E82                      _vscp_getControlByte 5F4E  
                             ___awtofl@c 0018                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 002E                      ?_Celsius2Fahrenheit 0076  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
                 ___asflmul@multiplicand 0076              __end_of_vscp_check_pstorage 5C3A  
                __size_of_vscp_setUserID 001C                              ?_Read_b_eep 0016  
                        ??i1_WriteTimer0 0003                            __end_of_floor 4C40  
                          __end_of_ldexp 52BC                            __end_of_frexp 5510  
                    ?_vscp_writeRegister 0025                               __end_ofPL2 37F6  
                             __end_ofPL4 3814                               __end_ofPL6 3830  
                             __end_ofPL8 383E                           ??_sendCANFrame 0042  
                             ___lwtofl@c 0018                     ??_vscp_init_pstorage 0012  
             __end_of_vscp_getFamilyCode 6068                            ?__RegsToCANID 000E  
            __size_of_ECANReceiveMessage 01E4             __size_of_getCalibrationValue 003E  
                     sendVSCPFrame@pData 0066               __end_of_vscp_getFamilyType 605E  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 0025  
        __size_of_vscp_setManufacturerId 001C                 __end_of_vscp_writeAppReg 1DFE  
                   ?_vscp_getControlByte 0001                   getVSCPFrame@pvscpclass 002D  
                __end_of_init_app_eeprom 2D2A                     ??_Celsius2Fahrenheit 0042  
            __end_of_vscp_setControlByte 5E82                 __end_of_vscp_writeStdReg 4A30  
                     __RegsToCANID@Value 0014                                  ??_floor 0046  
                                ??_ldexp 0043                                  ??_frexp 0014  
                          ?_setEventData 007C                     ??_vscp_writeRegister 0026  
        __end_of_vscp_handleDropNickname 5CD0                             _getVSCPFrame 56F8  
                             __pbssBANK0 00B6                               __pbssBANK1 0100  
                            ?_OpenTimer0 0001                       __size_of_eval_poly 00A0  
             __end_of_vscp_getBufferSize 6094                                ?_Busy_eep 0001  
                       Celsius2Kelvin@tc 002C                    vscp_writeRegister@reg 0026  
                 ??_ECANSetOperationMode 000E       __size_of_vscp_getRegisterPagesUsed 0002  
                        _writeCoeffs2Ram 52BC                                  ?___flge 000E  
        __end_of_vscp_getSubMinorVersion 6098                 ECANSetOperationMode@mode 000E  
                                ?___wmul 000E                                  _B0RXFUL 007407  
                                _B1RXFUL 007487                     __ECANRxFilterHitInfo 0048  
                                _B2RXFUL 007507                                  _B3RXFUL 007587  
                                _B4RXFUL 007607                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 0012                                  _B5RXFUL 007687  
                      __end_of___asfladd 593C                        __end_of___asfldiv 58F2  
                       WriteTimer0@timer 0010                                ?___altofl 008A  
                      __end_of___asflmul 58A8                                  _ECANCON 000F72  
                      __end_of___asflsub 5810                                ?___flpack 000E  
                          ??_WriteTimer0 0010                         doWork@resistance 0190  
                    __size_of_ConvertADC 0004                                ?___awtofl 0018  
                         ??__RegsToCANID 0012                            ??_Write_b_eep 0011  
                  sendVSCPFrame@priority 0064                                  _BRGCON1 000E43  
                                _BRGCON2 000E44                                  _BRGCON3 000E45  
                              ?___lwtofl 0018                      vscp_writeStdReg@reg 001F  
           __end_of_vscp_doOneSecondWork 57C2                    ??_vscp_getControlByte 0018  
                                i1l10401 00C8                                  i1l10411 0100  
                                i1l10403 00CA                                  i1l10421 014A  
                                i1l10413 010C                                  i1l10431 018E  
                                i1l10423 0150                                  i1l10415 0112  
                                i1l10407 00D4                                  i1l10441 01F4  
                                i1l10433 01B6                                  i1l10425 0178  
                                i1l10417 013A                                  i1l10409 00FC  
                                i1l10361 003C                                  i1l10451 0236  
                                i1l10443 01F8                                  i1l10435 01BA  
                                i1l10427 017C                                  i1l10419 013E  
                                i1l10371 0072                                  i1l10363 0048  
                                i1l10453 0242                                  i1l10445 0204  
                                i1l10437 01C6                                  i1l10429 0188  
                                i1l10381 0096                                  i1l10373 0076  
                                i1l10365 004E                                  i1l10455 0248  
                                i1l10447 020A                                  i1l10439 01CC  
                                i1l10383 00A0                                  i1l10391 00B2  
                                i1l10375 007E                                  i1l10367 0052  
                                i1l10359 0034                                  i1l10457 0252  
                                i1l10449 0232                                  i1l10465 025C  
                                i1l10385 00A8                                  i1l10377 0088  
                                i1l10369 0062                                  i1l10459 0256  
                                i1l10467 0296                                  i1l10387 00AC  
                                i1l10379 008A                                  i1l10469 029A  
                                i1l10389 00AE                                  i1l13663 026E  
                     _adc_series_counter 0049                         __CFG_CANMX$PORTB 000000  
            ?_vscp_readNicknamePermanent 0001                    sendVSCPFrame@vscptype 0062  
                             _high_alarm 00B7          __end_of_interrupt_at_low_vector 02BA  
               vscp_readStdReg@code_1003 0022                        sendCANFrame@pdata 0041  
                  _vscp_handleProbeState 4D0E                                  _RXB0CON 000F60  
                                _RXB1CON 000F30                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 5592               __end_of_vscp_getMatrixInfo 5F84  
                                _TXB0CON 000F20                                  _TXB1CON 000F10  
                                _TXB2CON 000F00                           ??_setEventData 0046  
                                _RXFCON0 000E46                                  _RXFCON1 000E47  
                          setEventData@v 007C                       _vscp_goActiveState 5EBE  
                 __size_of_sendVSCPFrame 00B2             __end_of_vscp_getMajorVersion 609C  
                    __size_of_Read_b_eep 0018                       __size_of_vscp_init 0048  
                             ??_Busy_eep 000E                   _vscp_getManufacturerId 5FE0  
                 _vscp_setManufacturerId 5EFA                          _ECANSendMessage 42F8  
                    ?_vscp_goActiveState 0001                                  _OpenADC 593C  
                                __Hparam 0000                          ??_vscp_getEvent 0032  
                       ??_Celsius2Kelvin 0030                                  __Lparam 0000  
                     _vscp_node_substate 004E               ??_vscp_handleProtocolEvent 007F  
                          ??_getCANFrame 0022        __end_of_vscp_getRegisterPagesUsed 6092  
               __size_of_vscp_getMDF_URL 001C                                  ___aldiv 4DCC  
                        __size_of___flge 004C                                  ___fladd 4458  
                                ___fldiv 50AE                                  ___flneg 5DF2  
                                ___lbmod 5D7E                                  ___flmul 4C40  
                                ___flsub 5B18                                  ___fltol 535C  
                        __size_of___wmul 0022                          getCANFrame@pdlc 0020  
                              _FIFOEMPTY 007B8F                            ?i1_ConvertADC 0001  
                        __size_of_doWork 0428                             __psmallconst 0F00  
                             ??___altofl 0046                     __end_of_init_app_ram 5B18  
                             ??___flpack 0014                       _vscp_sendHeartBeat 5DA6  
                                __pcinit 5A5E                               ??___awtofl 001C  
                         _vscp_deviceURL 0F00                        __end_of_eval_poly 4FE4  
                                __ramtop 0F00                      __size_of_OpenTimer0 001E  
                                __ptext0 4804                                  __ptext1 393E  
                                __ptext2 5D2A                                  __ptext3 58A8  
                                __ptext4 58F2                                  __ptext5 4DCC  
                                __ptext6 5A9C                                  __ptext7 45AE  
                                __ptext8 3F6A                                  __ptext9 5DF2  
                             ??___lwtofl 001C                           _vscp_getUserID 5FF4  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 0044  
                           __size_of_exp 01EE                             __size_of_log 0138  
                  vscp_writeStdReg@value 0019                         ___aldiv@dividend 007C  
                    ?_vscp_sendHeartBeat 0044                 ??_vscp_handleSetNickname 0013  
                                _seconds 00B9                                  doWork@B 018E  
                      __CFG_MSSPMSK$MSK7 000000                                  doWork@i 019D  
                                doWork@j 0194                                  doWork@v 018A  
                    __end_of_WriteTimer0 602E                         ?_init_app_eeprom 0001  
                    __end_of_Write_b_eep 5BCA                        vscp_readAppReg@rv 001A  
                     vscp_getMDF_URL@idx 000F                           OpenADC@config2 000E  
                         OpenADC@config3 000F            vscp_handleProtocolEvent@bytes 008C  
                   end_of_initialization 5A96                                  exp@sign 00A3  
           __end_of_vscp_handleHeartbeat 609E                 __size_of_vscp_getSubzone 000A  
                __end_of_writeCoeffs2Ram 535C                     __end_of_sendCANFrame 5A5E  
                             doWork@Rinf 016A                       doOneSecondWork@tmp 008E  
                             doWork@temp 0199                vscp_handleProtocolEvent@i 0099  
              vscp_handleProtocolEvent@j 009A                vscp_handleProtocolEvent@k 0093  
                   ??_vscp_sendHeartBeat 0045                           _vscp_sendEvent 5CD0  
                 vscp_getControlByte@idx 0018                   vscp_setControlByte@idx 0012  
                      ECANSendMessage@id 0018                        ECANSendMessage@pb 0020  
                       ___aldiv@quotient 0086                                  postdec1 000FE5  
                                postdec2 000FDD                  __size_of_ECANInitialize 0090  
                 __size_of_sendTempEvent 0066                           _vscp_setUserID 5F16  
                                postinc0 000FEE                                  postinc2 000FDE  
                         ??i1_ConvertADC 0001                   __end_of_vscp_deviceURL 0F20  
    __end_of_vscp_writeNicknamePermanent 5FE0              _vscp_writeNicknamePermanent 5FCA  
                     __ECANPointBuffer@b 0011                            _sendVSCPFrame 4FFC  
                 __end_of_vscp_getUserID 6008             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0077CB                        __end_of_vscp_init 5A16  
                         _vscp_probe_cnt 0050                      __end_of_getCANFrame 5DF2  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
                          ??_handle_sync 0087                 __size_of_vscp_readAppReg 07AC  
                       ___lbmod@dividend 000F                         writeCoeffs2Ram@c 001A  
                       writeCoeffs2Ram@i 001D                         writeCoeffs2Ram@j 001F  
                            ___fldiv@exp 0040                           _vscp_statuscnt 0052  
               __size_of_vscp_readStdReg 0180                             ??_ConvertADC 000E  
             vscp_handleProtocolEvent@cb 0091                  __end_of_ECANSendMessage 4458  
                      vscp_readStdReg@rv 0028                              ___lbmod@rem 0011  
                            ___flmul@exp 006F                            ?__CANIDToRegs 000E  
                   __end_of__RegsToCANID 47AA                      _getCalibrationValue 5A9C  
                 __end_of_vscp_sendEvent 5CFE                               _vscp_error 6080  
                   _vscp_doOneSecondWork 576C                       i1WriteTimer0@timer 0003  
                             _vscp_timer 011E                   __end_of_vscp_setUserID 5F32  
               __size_of_doOneSecondWork 0498                   vscp_sendHeartBeat@zone 0045  
                           ??_Read_b_eep 0018                     __end_of_setEventData 520E  
                         ?_sendVSCPFrame 0060                           __end_of___flge 585C  
                         __end_of___wmul 5C90                          ?_vscp_getUserID 0001  
                         __end_of_doWork 3D66             __end_of_vscp_getMinorVersion 609A  
                            _WriteTimer0 601C                     _vscp_getMajorVersion 609A  
                     __end_of_ConvertADC 608C                     ?_getCalibrationValue 0018  
                            _Write_b_eep 5B90                        ??_vscp_getMDF_URL 000E  
          ??_vscp_getBootLoaderAlgorithm 000E                               floor@expon 0097  
                            __end_ofPL10 3858                              __end_ofPL20 388C  
                            __end_ofPL12 386E                        ?_vscp_writeAppReg 0021  
                            __end_ofPL30 38BE                              __end_ofPL22 38A6  
                            __end_ofPL14 387E                              __end_ofPL40 4B3A  
                            __end_ofPL32 3324                              __end_ofPL24 4B14  
                            __end_ofPL16 4B04                              __end_ofPL50 38FA  
                            __end_ofPL42 38E6                              __end_ofPL34 47CA  
                            __end_ofPL26 4B26                              __end_ofPL18 47B8  
                            __end_ofPL60 1E0E                              __end_ofPL52 4804  
                            __end_ofPL44 42EC                              __end_ofPL36 47DE  
                            __end_ofPL28 4FFC                              __end_ofPL70 3346  
                            __end_ofPL62 4D00                              __end_ofPL54 390C  
                            __end_ofPL46 47F2                              __end_ofPL38 38D2  
                            __end_ofPL80 42F8                              __end_ofPL72 391A  
                            __end_ofPL64 5CA0                              __end_ofPL56 3D78  
                            __end_ofPL48 3338                              __end_ofPL90 393E  
                            __end_ofPL82 4F44                              __end_ofPL74 3F6A  
                            __end_ofPL66 4D0E                              __end_ofPL58 45AE  
                            __end_ofPL84 3350                              __end_ofPL76 3928  
                            __end_ofPL68 5684                              __end_ofPL86 3930  
                            __end_ofPL78 4B44                              __end_ofPL88 3936  
                    start_initialization 5A5E                               eval_poly@d 007A  
                             eval_poly@n 007B                               eval_poly@x 0076  
                             ldexp@value 0081          __size_of_vscp_handleSetNickname 001E  
                            __end_of_exp 4158                              __end_of_log 46E6  
                     ??_vscp_writeAppReg 0022                            _sendTempEvent 5610  
                      ?_vscp_writeStdReg 0019              __size_of_vscp_newNodeOnline 002A  
                           ??_OpenTimer0 000E                       ??_vscp_writeStdReg 001A  
                     _vscp_getFamilyCode 605E                      __end_of_handle_sync 5592  
                doOneSecondWork@setpoint 008F                           ??__CANIDToRegs 0015  
                     _vscp_getFamilyType 6054                               frexp@value 000E  
                     __end_of_Read_b_eep 5F9C                      sendVSCPFrame@nodeid 0063  
                       ?_writeCoeffs2Ram 0001                        _vscp_readRegister 5FB4  
                   Celsius2Fahrenheit@tc 0076                          ?_vscp_sendEvent 0001  
vscp_handleProtocolEvent@bytes_this_time 0090                    ?_vscp_doOneSecondWork 0001  
                      __size_of_Busy_eep 0006                    ECANReceiveMessage@ptr 001E  
                    ?_vscp_getFamilyCode 000E                       ?_vscp_readRegister 0001  
       __end_of_vscp_handleProtocolEvent 330C                          ?_vscp_setUserID 0012  
                    ?_vscp_getFamilyType 000E                    __size_of_init_app_ram 003E  
               ?_vscp_handleDropNickname 0001                   getCalibrationValue@cal 001B  
                      ??_vscp_getSubzone 0018                                 ??___flge 0016  
               __end_of__ECANPointBuffer 5610                        __CANIDToRegs@type 0014  
                            _getCANFrame 5DCC                                 ??___wmul 0012  
                               ??_doWork 00A4                       _vscp_getBufferSize 6092  
            vscp_handleProtocolEvent@len 008D              vscp_handleProtocolEvent@pos 008B  
             __end_of_ECANReceiveMessage 3F5C                      ??_vscp_readRegister 002A  
         __size_of_vscp_goBootloaderMode 0024                    ?_vscp_getMajorVersion 0001  
                  ??_getCalibrationValue 001A                    __end_ofi1_WriteTimer0 6040  
          __end_of_vscp_goBootloaderMode 5E5E                     _vscp_handleHeartbeat 609C  
            __size_of_vscp_init_pstorage 0004                       __end_of_OpenTimer0 5EFA  
                      __size_of___altofl 0048                        __size_of___flpack 00B0  
                              ___asfladd 58F2                      ?_vscp_getBufferSize 0001  
                      __size_of___awtofl 003A                                ___asfldiv 58A8  
                            __pbssBIGRAM 019E                                ___asflmul 585C  
                              ___asflsub 57C2             __size_of_vscp_check_pstorage 0036  
                   ??_vscp_getFamilyCode 0012                 ?_vscp_getSubMinorVersion 0001  
                            __pbssCOMRAM 0046                     ??_vscp_getFamilyType 0012  
                      __size_of___lwtofl 002A                            ?_vscp_getGUID 0001  
                          __pcstackBANK0 0060                            __pcstackBANK1 016A  
                         ?_sendTempEvent 0001                         _vscp_alarmstatus 004A  
            __size_of_Celsius2Fahrenheit 0074                            ?_vscp_getZone 0001  
                  __size_of_sendCANFrame 0048                  ?_vscp_getManufacturerId 0001  
                ?_vscp_setManufacturerId 0012                     __end_ofi1_ConvertADC 6090  
                          ?_vscp_setGUID 0012              __size_of_vscp_writeRegister 001E  
                       ?_ECANSendMessage 0018                        ??_vscp_readAppReg 0018  
                      sendVSCPFrame@size 0065                __end_of_vscp_readRegister 5FCA  
                           _init_app_ram 5ADA                     getCalibrationValue@i 001D  
                            _doWork$2235 0172                              _doWork$2236 0176  
                            _doWork$2237 017A             __size_of_vscp_setControlByte 0024  
                          doWork@avarage 0195                 ?_interrupt_at_low_vector 0001  
                      ??_vscp_readStdReg 0019                     ??_vscp_getBufferSize 000E  
                           _current_temp 0100                                 ?_OpenADC 000E  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 5F6A  
                 _vscp_handleSetNickname 5EA0            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 0067                           _ECANInitialize 53FA  
                               ?___aldiv 007C                                 ?___fladd 001D  
                               ?___fldiv 002C                                __ptext101 602E  
                              __ptext102 608C                                 ?___flneg 000E  
                              __ptext103 0000                                 ?___lbmod 000E  
                               ?___flmul 0060                                 ?___flsub 0076  
                               ?___fltol 0076              __end_of_vscp_getControlByte 5F6A  
                    ?_vscp_getMatrixInfo 0001                          vscp_getGUID@idx 0018  
                            __pintcodelo 0018                        ??_doOneSecondWork 0087  
       vscp_handleProtocolEvent@len_1020 008F                    ?_vscp_handleHeartbeat 0001  
                vscp_readStdReg@idx_1004 0027               vscp_setManufacturerId@data 0012  
                           _sendCANFrame 5A16                              __smallconst 0F00  
                             ?___asfladd 002C                        WriteTimer0@timer0 000E  
                             ?___asfldiv 0060                               ?___asflmul 0076  
                             ?___asflsub 007E                           ??_vscp_getGUID 0018  
                              _eval_poly 4F44                              _handle_sync 5510  
                         ??_vscp_getZone 0018           __end_of_vscp_getManufacturerId 5FF4  
         __end_of_vscp_setManufacturerId 5F16                    __size_of__RegsToCANID 00C4  
       vscp_handleProtocolEvent@pos_1019 008E                           __size_of_floor 00FC  
                         __size_of_ldexp 00AE                           ??_vscp_setGUID 0013  
                         __size_of_frexp 0086                     ??_vscp_getMatrixInfo 000E  
                       _vscp_configtimer 011C                          ___aldiv@divisor 0080  
                        ___aldiv@counter 0084                           ___wmul@product 0014  
                 ??_vscp_doOneSecondWork 007F                   sendVSCPFrame@vscpclass 0060  
                          OpenADC@config 0012                     _vscp_getMinorVersion 6098  
                              _sendTimer 011A                                 _PIE1bits 000F9D  
                              _low_alarm 00B8                    __size_of_setEventData 00B0  
                 __end_of_ECANInitialize 548A                                 i1u720_20 003C  
                               i1u720_21 003A                                 i1u721_20 007E  
                               i1u721_21 007C                                 i1u730_20 0188  
                               i1u722_20 0096                                 i1u730_21 0186  
                               i1u722_21 0094                                 i1u731_20 01C6  
                               i1u723_20 00A0                                 i1u731_21 01C4  
                               i1u723_21 009E                                 i1u732_20 0204  
                               i1u724_20 00A8                                 i1u732_21 0202  
                               i1u724_21 00A6                                 i1u733_20 0242  
                               i1u725_20 00BC                                 i1u733_21 0240  
                               i1u725_21 00BA                                 i1u734_20 0252  
                               i1u726_20 00C6                                 i1u734_21 0250  
                               i1u726_21 00C4                                 i1u727_20 00D2  
                               i1u727_21 00D0                                 i1u728_20 010C  
                               i1u728_21 010A                                 i1u729_20 014A  
                               i1u729_21 0148                                 _PIR1bits 000F9E  
                       ECANSendMessage@i 0039                         ECANSendMessage@j 0034  
                  __end_of_vscp_getEvent 5D2A                                 _RXF0EIDH 000EE2  
                               _RXF0EIDL 000EE3                                 _RXB0OVFL 007B8F  
                               _RXF1EIDH 000EE6                                 _RXF1EIDL 000EE7  
                               _RXB1OVFL 007B8E                                 _RXF0SIDH 000EE0  
                               _RXF0SIDL 000EE1                                 _RXF1SIDH 000EE4  
                               _RXF1SIDL 000EE5                                 _RXM0EIDH 000EFA  
                               _RXM0EIDL 000EFB                          vscp_getEvent@rv 0032  
                               _RXM1EIDH 000EFE                                 _RXM1EIDL 000EFF  
                               _RXFBCON0 000E71                                 _RXFBCON1 000E72  
                               _RXFBCON2 000E73                                 _RXFBCON3 000E74  
                               _RXFBCON4 000E75                                 _RXFBCON5 000E76  
                               _RXFBCON6 000E77                                 _RXFBCON7 000E78  
                               _RXM0SIDH 000EF8                                 _RXM0SIDL 000EF9  
                               _RXM1SIDH 000EFC                   ??_vscp_getMajorVersion 000E  
                               _RXM1SIDL 000EFD               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 0044                       vscp_setUserID@data 0012  
                   __end_of__CANIDToRegs 4AF0                               _ADCON0bits 000FC2  
                      ___wmul@multiplier 000E                         __CFG_SOSCSEL$DIG 000000  
                           __RegsToCANID 46E6                       _vscp_probe_address 004F  
                        Write_b_eep@badd 000E                          Write_b_eep@bdat 0010  
                        ??_sendTempEvent 0085              __size_of_vscp_goActiveState 001E  
                             ?_eval_poly 0076                      getVSCPFrame@pNodeId 0025  
                              _vscp_init 59CE                                _vscp_imsg 00BD  
                              _vscp_hour 0120                                _vscp_omsg 00CB  
                       vscp_setGUID@data 0012        __size_of_vscp_handleProtocolEvent 05E2  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
   __size_of_vscp_writeNicknamePermanent 0016                         _vscp_page_select 0046  
                           _setEventData 515E               __size_of_vscp_readRegister 0016  
                      _measurement_clock 0112                                 _Busy_eep 607A  
                  ?_vscp_getMinorVersion 0001                 __size_of_init_app_eeprom 0770  
           __end_of_vscp_restoreDefaults 607A                                frexp@eptr 0012  
                             _EECON1bits 000F7F                          ?_ECANInitialize 0001  
                               __Hrparam 0000                     ECANReceiveMessage@id 001A  
                           _seconds_temp 010C              __size_of_vscp_sendHeartBeat 0026  
                       __size_of_OpenADC 004A                         ??_vscp_getUserID 0018  
                        _vscp_getMDF_URL 5F32                                 __Lrparam 0000  
                       __CANIDToRegs@val 0010                         __CANIDToRegs@ptr 000E  
                     __CFG_BOREN$SBORDIS 000000                         __size_of___aldiv 00BC  
                       __size_of___fladd 0144                         __size_of___fldiv 00B0  
                       __size_of___flneg 0024                         _vscp_initledfunc 004D  
                       __size_of___lbmod 0028                         __size_of___flmul 00B0  
                 ??_vscp_handleHeartbeat 000E                         __size_of___flsub 003C  
                       __size_of___fltol 009E                                 ___altofl 5986  
                               ___flpack 4E88                         getCANFrame@flags 0023  
                           ?_WriteTimer0 000E                                 ___awtofl 5BCA  
                       getCANFrame@pdata 0021                             ?_Write_b_eep 000E  
                               ___lwtofl 5D2A                           sendTempEvent@i 0086  
                __size_of_Celsius2Kelvin 0034                              ??___asfladd 0032  
                            ??___asfldiv 0042                                 _exp$2241 009D  
                            ??___asflmul 0042                              ??___asflsub 0042  
                  __size_ofi1_ConvertADC 0004                               ?_vscp_init 0001  
                               __ptext10 520E                                 __ptext11 4F44  
                               __ptext20 50AE                                 __ptext12 4B44  
                               __ptext21 576C                                 __ptext13 535C  
                               __ptext30 5684                                 __ptext22 5DA6  
                               __ptext14 548A                                 __ptext31 4458  
                               __ptext23 6040                                 __ptext15 5810  
                               __ptext40 5E16                                 __ptext32 5C3A  
                               __ptext24 604A                                 __ptext16 5986  
                               __ptext41 0F6E                                 __ptext33 2D2A  
                               __ptext25 3350                                 __ptext17 57C2  
                               __ptext50 6094                                 __ptext42 52BC  
                               __ptext34 5D7E                                 __ptext26 6080  
                               __ptext18 5B18                                 __ptext51 5FE0  
                               __ptext43 5C6E                                 __ptext35 5E82  
                               __ptext27 5510                                 __ptext19 585C  
                               __ptext60 59CE                                 __ptext52 5FF4  
                               __ptext44 5FB4                                 __ptext36 491C  
                               __ptext28 5610                                 __ptext61 6068  
                               __ptext53 5F32                                 __ptext45 4158  
                               __ptext37 6072                                 __ptext29 515E  
                               __ptext70 4FFC                                 __ptext62 5F84  
                               __ptext54 6008                                 __ptext46 6054  
                               __ptext38 5EFA                                 __ptext71 5A16  
                               __ptext63 5EA0                                 __ptext55 6096  
                               __ptext47 605E                                 __ptext39 5F16  
                               __ptext80 5C04                                 __ptext72 42F8  
                               __ptext64 609C                                 __ptext56 6098  
                               __ptext48 6090                                 __ptext81 6084  
                               __ptext73 4A30                                 __ptext65 5E3A  
                               __ptext57 609A                                 __ptext49 6092  
                               __ptext90 5F9C                                 __ptext82 25BA  
                               __ptext74 5CFE                                 __ptext66 5F6A  
                               __ptext58 5D54                                 __ptext91 593C  
                               __ptext83 5F4E                                 __ptext75 56F8  
                               __ptext67 4D0E                                 __ptext59 5CA0  
                               __ptext92 5EDC                                 __ptext84 5E5E  
                               __ptext76 5DCC                                 __ptext68 5EBE  
                               __ptext93 5ADA                                 __ptext85 5FCA  
                               __ptext77 3D78                                 __ptext69 5CD0  
                               __ptext94 6088                                 __ptext86 5B90  
                               __ptext78 46E6                                 __ptext95 601C  
                               __ptext87 607A                                 __ptext79 5592  
                               __ptext96 5BCA                                 __ptext88 5B54  
                               __ptext97 4C40                                 __ptext89 53FA  
                               __ptext98 4E88                                 __ptext99 1E0E  
         vscp_goBootloaderMode@algorithm 0012                vscp_sendHeartBeat@subzone 0044  
                          ?_getVSCPFrame 0024                         ??_vscp_sendEvent 0043  
                        _vscp_getSubzone 6040                         ??_vscp_setUserID 0013  
                          __size_of_main 0118                            __size_of_init 003C  
              __size_of_vscp_writeAppReg 0E90                      _vscp_check_pstorage 5C04  
                          init_app_ram@i 000E           vscp_handleProtocolEvent@i_1021 0098  
         vscp_handleProtocolEvent@i_1018 0094           vscp_handleProtocolEvent@i_1029 0092  
                       doOneSecondWork@i 0091                     __end_of_vscp_getGUID 601C  
              __size_of_vscp_writeStdReg 0114                      ECANSendMessage@data 001C  
               ECANSendMessage@tempBSEL0 0035                             ?_getCANFrame 0020  
                    ECANSendMessage@mode 0032                     __end_of_vscp_getZone 6054  
                    ECANSendMessage@temp 0038                        ?__ECANPointBuffer 000E  
                      vscp_setUserID@idx 0013                     __end_of_vscp_setGUID 5E3A  
                     vscp_readAppReg@reg 0019                       vscp_readAppReg@pos 0018  
                           i1_ConvertADC 608C                         vscp_sendEvent@rv 0043  
                     ??__ECANPointBuffer 0011           vscp_handleProtocolEvent@offset 008A  
                            _RXB0FILHIT0 007B00                          vscp_setGUID@idx 0013  
                    __CFG_INTOSCSEL$HIGH 000000                      _vscp_setControlByte 5E5E  
                               exp@coeff 0F20                    ___flmul@f3_as_product 0070  
                               log@coeff 0F48                          _vscp_readAppReg 1E0E  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F30  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
                            ??_eval_poly 0042             ??_vscp_readNicknamePermanent 0018  
                    ECANReceiveMessage@i 001B                          _vscp_guid_reset 004C  
                        _vscp_readStdReg 4158             vscp_handleDropNickname@bytes 0018  
             __end_of_vscp_newNodeOnline 5D7E                       _ECANReceiveMessage 3D78  
                         ??_getVSCPFrame 0029                          _vscp_initbtncnt 00BA  
                        sendVSCPFrame@id 007B                                 intlevel1 0000  
                 ??_vscp_getMinorVersion 000E                  vscp_getMatrixInfo@pData 000E  
                __end_of_vscp_getMDF_URL 5F4E                     ?_vscp_setControlByte 0012  
                          _timeout_clock 0116                      ?_ECANReceiveMessage 0015  
                ?_vscp_handleSetNickname 0001         __size_of_vscp_getSubMinorVersion 0002  
                        _vscp_node_state 00BC                             handle_sync@i 0089  
                        _doOneSecondWork 3350                             ??_vscp_error 000E  
                ECANSendMessage@msgFlags 001E                      vscp_getMatrixInfo@i 000F  
                vscp_setControlByte@ctrl 0013              __end_of_getCalibrationValue 5ADA  
                     ECANSendMessage@ptr 003A                        ??_init_app_eeprom 0012  
                  __size_of__CANIDToRegs 00C0                 __size_of_writeCoeffs2Ram 00A0  
                     __CFG_WDTPS$1048576 000000      __size_of_vscp_readNicknamePermanent 000A  
             __end_of_vscp_init_pstorage 6088      __end_of_vscp_getBootLoaderAlgorithm 6096  
            _vscp_getBootLoaderAlgorithm 6094         __size_of_interrupt_at_low_vector 02A2  
                 ECANSendMessage@dataLen 001D                      __ECANPointBuffer@pt 0012  
                   ??_ECANReceiveMessage 0018                    ??_vscp_check_pstorage 0019  
                 ECANSendMessage@buffers 0033                    _vscp_goBootloaderMode 5E3A  
             __end_of_Celsius2Fahrenheit 56F8             __end_of_ECANSetOperationMode 5FB4  
                   _vscp_restoreDefaults 6072              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 0018                  __end_of_vscp_getSubzone 604A  
                           ?_handle_sync 0001              __size_of_vscp_getFamilyType 000A  
                           ___aldiv@sign 0085                               _RXM1EXIDEN 0077EB  
             __end_of_vscp_writeRegister 5EA0                       __end_of_vscp_error 6084  
                 ECANSendMessage@tempPtr 0036                     _adc_conversion_flags 00B6  
         __end_of_vscp_handleSetNickname 5EBE       vscp_handleProtocolEvent@bytes_1025 0096  
                  ??_vscp_setControlByte 0013                     vscp_readRegister@reg 002A  
                           ___fladd@exp1 002B                             ___fladd@exp2 002A  
                           ___fladd@sign 0029                             __CANIDToRegs 4A30  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 0086  
                          ___asfladd@f1p 002C              __size_of_vscp_getBufferSize 0002  
                           ___asfladd@f2 002E                 __size_of_ECANSendMessage 0160  
                           ___asfldiv@f2 0062  
